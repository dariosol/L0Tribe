
memtest.elf:     file format elf32-littlenios2
memtest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80080244

Program Header:
    LOAD off    0x00001000 vaddr 0x80080000 paddr 0x80080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x80080020 paddr 0x80080020 align 2**12
         filesz 0x0001eb0c memsz 0x0001eb0c flags r-x
    LOAD off    0x0001fb2c vaddr 0x8009eb2c paddr 0x800a0750 align 2**12
         filesz 0x00001c24 memsz 0x00001c24 flags rw-
    LOAD off    0x00022374 vaddr 0x800a2374 paddr 0x800a2374 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  80080000  80080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80080020  80080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001d42c  80080244  80080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000014bc  8009d670  8009d670  0001e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c24  8009eb2c  800a0750  0001fb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  800a2374  800a2374  00022374  2**2
                  ALLOC, SMALL_DATA
  6 .ddr2_ram     00000000  00000000  00000000  00021750  2**0
                  CONTENTS
  7 .system_ram   00000000  800a24dc  800a24dc  00021750  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00021750  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001400  00000000  00000000  00021778  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00038363  00000000  00000000  00022b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d576  00000000  00000000  0005aedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012241  00000000  00000000  00068451  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003478  00000000  00000000  0007a694  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005464  00000000  00000000  0007db0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00025b76  00000000  00000000  00082f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000a8ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002230  00000000  00000000  000a8b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000af52a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000008  00000000  00000000  000af52d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000af535  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000af536  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  000af537  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  000af53b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  000af53f  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  000af543  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000025  00000000  00000000  000af54f  2**0
                  CONTENTS, READONLY
 27 .jdi          00008d5f  00000000  00000000  000af574  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0012607b  00000000  00000000  000b82d3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80080000 l    d  .entry	00000000 .entry
80080020 l    d  .exceptions	00000000 .exceptions
80080244 l    d  .text	00000000 .text
8009d670 l    d  .rodata	00000000 .rodata
8009eb2c l    d  .rwdata	00000000 .rwdata
800a2374 l    d  .bss	00000000 .bss
00000000 l    d  .ddr2_ram	00000000 .ddr2_ram
800a24dc l    d  .system_ram	00000000 .system_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testbench_ls_bsp//obj/HAL/src/crt0.o
8008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 memtest.c
80080290 l     F .text	0000007c MenuHeader
8008030c l     F .text	00000058 MenuBegin
80080364 l     F .text	0000004c MenuItem
80080440 l     F .text	00000104 MenuEnd
800a2374 l     O .bss	00000004 entry.3380
800a2378 l     O .bss	00000001 ch.3381
80080544 l     F .text	00000114 MemGetAddressRange
80080658 l     F .text	00000074 MemTestDataBus
800806cc l     F .text	000001e0 MemTestAddressBus
800808ac l     F .text	00000220 MemTest8_16BitAccess
80080acc l     F .text	000001a4 MemTestDevice
80080c70 l     F .text	000001b4 TestRam
80080e24 l     F .text	00000148 FlashCheckIfBlockErased
80080f6c l     F .text	0000030c FlashTestBlockWrite
80081278 l     F .text	000002fc FlashTestReadWrite
80081574 l     F .text	000000f0 FlashTestBlockErase
80081664 l     F .text	0000012c FlashRunTests
80081790 l     F .text	00000180 GetFlashName
80081910 l     F .text	00000330 FlashErase
80081c40 l     F .text	00000278 FlashFindErasedBlocks
80081eb8 l     F .text	000001d0 TestFlash
80082088 l     F .text	00000170 TopMenu
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
8009eb2c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfscanf.c
8009e15a l     O .rodata	00000022 basefix.4340
00000000 l    df *ABS*	00000000 vfprintf.c
8009e1be l     O .rodata	00000010 zeroes.4404
80086dc0 l     F .text	000000bc __sbprintf
8009e1ce l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
8009e2df l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
80087084 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
80088bb4 l     F .text	00000008 __fp_unlock
80088bc8 l     F .text	0000019c __sinit.part.1
80088d64 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8009f378 l     O .rwdata	00000020 lc_ctype_charset
8009f358 l     O .rwdata	00000020 lc_message_charset
8009f398 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8009e47c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
8008b9a8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8008be84 l     F .text	00000064 sulp
8009e5c4 l     O .rodata	00000014 fpi.2737
8009e5d8 l     O .rodata	00000028 tinytens
8009e5b0 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfscanf.c
8009e600 l     O .rodata	00000022 basefix.3791
00000000 l    df *ABS*	00000000 vfprintf.c
8009e622 l     O .rodata	00000010 zeroes.4389
8009e632 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
80091824 l     F .text	000000fc __sprint_r.part.0
8009e652 l     O .rodata	00000010 blanks.4348
8009e642 l     O .rodata	00000010 zeroes.4349
80092db0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
800933f0 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8009e772 l     O .rodata	00000010 blanks.4332
8009e762 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
80098bc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
80098cd0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
80098db8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
80098ea4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
80098f84 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
80099070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
80099244 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
800a0738 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
80099490 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
800995c4 l     F .text	00000034 alt_dev_reg
8009f578 l     O .rwdata	00001060 jtag
800a05d8 l     O .rwdata	00000060 dma_fifo_subsystem_1_dma
800a0638 l     O .rwdata	00000060 dma_fifo_susbystem_dma
800a0698 l     O .rwdata	00000060 from_ETH_to_DDR_ETH_DMA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80099938 l     F .text	0000020c altera_avalon_jtag_uart_irq
80099b44 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8009a17c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
8009a270 l     F .text	0000003c alt_get_errno
8009a2ac l     F .text	00000094 alt_msgdma_write_standard_descriptor
8009a340 l     F .text	0000012c alt_msgdma_write_extended_descriptor
8009a46c l     F .text	00000184 alt_msgdma_irq
8009a5f0 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8009a67c l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8009a7d0 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8009aaa0 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
8009b0e8 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8009b18c l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8009c3b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8009c8bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
8009c9fc l     F .text	0000003c alt_get_errno
8009ca38 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
800a23b0 g     O .bss	00000004 alt_instruction_exception_handler
8009bffc g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
80082f60 g     F .text	00000018 putchar
8008b104 g     F .text	00000074 _mprec_log10
8008b1f0 g     F .text	0000008c __any_on
80093f7c g     F .text	00000054 _isatty_r
8009e488 g     O .rodata	00000028 __mprec_tinytens
80099180 g     F .text	0000007c alt_main
80082f78 g     F .text	000000c0 _puts_r
800a23dc g     O .bss	00000100 alt_irq
80089ad8 g     F .text	00000060 _lseek_r
800a0750 g       *ABS*	00000000 __flash_rwdata_start
80097548 g     F .text	00000088 .hidden __eqdf2
8009aec8 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
800a24dc g       *ABS*	00000000 __alt_heap_start
80082f1c g     F .text	0000003c printf
800954ac g     F .text	0000009c _wcrtomb_r
800832f4 g     F .text	0000005c __sseek
80088f04 g     F .text	00000010 __sinit
80092e6c g     F .text	00000140 __swbuf_r
800899fc g     F .text	0000007c _setlocale_r
80088d6c g     F .text	00000068 __sfmoreglue
8009180c g     F .text	00000018 ungetc
80099220 g     F .text	00000024 __malloc_unlock
8008bee8 g     F .text	000015f8 _strtod_r
800803b0 g     F .text	00000090 GetInputString
8008e1e4 g     F .text	000000f4 _sfread_r
80089ffc g     F .text	0000015c memmove
80088eec g     F .text	00000018 _cleanup
8008a280 g     F .text	000000a8 _Balloc
8009ae18 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
800975d0 g     F .text	000000dc .hidden __gtdf2
8009d05c g     F .text	00000024 altera_nios2_gen2_irq_init
80080000 g     F .entry	0000001c __reset
80080020 g       *ABS*	00000000 __flash_exceptions_start
80093394 g     F .text	0000005c _fstat_r
800a2388 g     O .bss	00000004 errno
800830c0 g     F .text	00000014 __srget
80083270 g     F .text	00000008 __seofread
80094270 g     F .text	0000123c ___svfiprintf_internal_r
800a239c g     O .bss	00000004 alt_argv
800a86f8 g       *ABS*	00000000 _gp
8009b938 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8009f3f8 g     O .rwdata	00000180 alt_fd_list
800823fc g     F .text	00000070 _getc_r
8008246c g     F .text	00000088 getc
80082f58 g     F .text	00000008 _putchar_r
8009c558 g     F .text	00000090 alt_find_dev
80082da4 g     F .text	00000148 memcpy
80093d20 g     F .text	0000025c __hexnan
80088bbc g     F .text	0000000c _cleanup_r
80098834 g     F .text	000000dc .hidden __floatsidf
8009c980 g     F .text	0000007c alt_io_redirect
800976ac g     F .text	000000f4 .hidden __ltdf2
8009d670 g       *ABS*	00000000 __DTOR_END__
8009bd58 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
8009c038 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8009bfa8 g     F .text	00000054 alt_msgdma_register_callback
80083038 g     F .text	00000014 puts
8009d2bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
80089da0 g     F .text	000000d8 mbrtowc
8008bb98 g     F .text	00000074 __fpclassifyd
8008b060 g     F .text	000000a4 __ratio
80092d94 g     F .text	0000001c __vfiprintf_internal
80099d3c g     F .text	0000021c altera_avalon_jtag_uart_read
800824f4 g     F .text	00000014 malloc
8009b618 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
80082eec g     F .text	00000030 _printf_r
80082340 g     F .text	00000064 .hidden __udivsi3
80098ee0 g     F .text	000000a4 isatty
800899cc g     F .text	00000030 iswspace
8009e4d8 g     O .rodata	000000c8 __mprec_tens
80089a78 g     F .text	0000000c __locale_charset
800962ec g     F .text	000000c8 .hidden __lesf2
80095694 g     F .text	00000074 .hidden __fixunsdfsi
8009d22c g     F .text	00000090 alt_icache_flush
800a2384 g     O .bss	00000004 __malloc_top_pad
8008e174 g     F .text	00000070 __ssrefill_r
8008dd78 g     F .text	0000001c strtoul
800a070c g     O .rwdata	00000004 __mb_cur_max
80089aa8 g     F .text	0000000c _localeconv_r
8008dd94 g     F .text	000002d8 _strtoull_r
8008a68c g     F .text	0000003c __i2b
80089388 g     F .text	000004bc __sfvwrite_r
800830d4 g     F .text	00000054 _sbrk_r
8008b3e4 g     F .text	00000060 _read_r
800a0728 g     O .rwdata	00000004 alt_max_fd
80093088 g     F .text	000000f0 _fclose_r
80088b84 g     F .text	00000030 fflush
800a2380 g     O .bss	00000004 __malloc_max_sbrked_mem
800833f0 g     F .text	000017bc __ssvfscanf_r
800963b4 g     F .text	000008ac .hidden __adddf3
800961b8 g     F .text	00000078 .hidden __nesf2
8008ae08 g     F .text	0000010c __b2d
8009b378 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
80095c80 g     F .text	00000538 .hidden __umoddi3
800990ac g     F .text	000000d4 lseek
800a06f8 g     O .rwdata	00000004 _global_impure_ptr
8008b444 g     F .text	00000564 _realloc_r
800a24dc g       *ABS*	00000000 __bss_end
8009c7cc g     F .text	000000f0 alt_iic_isr_register
8009cf54 g     F .text	00000108 alt_tick
8009e662 g     O .rodata	00000100 __hexdig
8009be3c g     F .text	0000016c alt_msgdma_init
80095708 g     F .text	00000578 .hidden __udivdi3
800932f0 g     F .text	00000024 _fputwc_r
8009e4b0 g     O .rodata	00000028 __mprec_bigtens
8008a470 g     F .text	00000104 __s2b
80098910 g     F .text	000000a8 .hidden __floatunsidf
8008ab48 g     F .text	00000060 __mcmp
8009c0b0 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80088f24 g     F .text	00000018 __fp_lock_all
8009c780 g     F .text	0000004c alt_ic_irq_enabled
8009ceb8 g     F .text	0000009c alt_alarm_stop
8008d830 g     F .text	0000001c strtol
800a23a4 g     O .bss	00000004 alt_irq_active
800800fc g     F .exceptions	000000d4 alt_irq_handler
8009f3d0 g     O .rwdata	00000028 alt_dev_null
8009afb0 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
8009bccc g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
80080000 g       *ABS*	00000000 __alt_mem_system_ram
8009c370 g     F .text	00000048 alt_dcache_flush_all
8008a574 g     F .text	00000068 __hi0bits
800987b4 g     F .text	00000080 .hidden __fixdfsi
8008d4e0 g     F .text	00000018 strtod
800a0750 g       *ABS*	00000000 __ram_rwdata_end
800a0720 g     O .rwdata	00000008 alt_dev_list
800994cc g     F .text	000000f8 write
8008b27c g     F .text	000000a0 _putc_r
80096230 g     F .text	000000bc .hidden __gtsf2
8009eb2c g       *ABS*	00000000 __ram_rodata_end
80098df4 g     F .text	000000b0 fstat
800976ac g     F .text	000000f4 .hidden __ledf2
8008a8c0 g     F .text	00000140 __pow5mult
80091938 g     F .text	0000145c ___vfiprintf_internal_r
800a2394 g     O .bss	00000004 __nlocale_changed
800823a4 g     F .text	00000058 .hidden __umodsi3
8009b3d0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
800a24dc g       *ABS*	00000000 end
80099878 g     F .text	000000c0 altera_avalon_jtag_uart_init
800801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8009d670 g       *ABS*	00000000 __CTOR_LIST__
800fd000 g       *ABS*	00000000 __alt_stack_pointer
8009a1f4 g     F .text	0000007c alt_avalon_timer_sc_init
80098b60 g     F .text	00000064 .hidden __clzsi2
80099f58 g     F .text	00000224 altera_avalon_jtag_uart_write
80088f14 g     F .text	00000004 __sfp_lock_acquire
80089f18 g     F .text	000000e4 memchr
80084bac g     F .text	000021f8 ___vfprintf_internal_r
8008bce4 g     F .text	00000058 _sprintf_r
80089078 g     F .text	00000310 _free_r
8009cc50 g     F .text	0000022c alt_printf
80089a84 g     F .text	00000010 __locale_mb_cur_max
8009d4bc g     F .text	00000180 __call_exitprocs
8008304c g     F .text	00000074 __srget_r
8008e06c g     F .text	00000108 _sungetc_r
800a2390 g     O .bss	00000004 __mlocale_changed
800a0700 g     O .rwdata	00000004 __malloc_sbrk_base
80080244 g     F .text	0000004c _start
800a23a8 g     O .bss	00000004 _alt_tick_rate
8008d84c g     F .text	000002e0 _strtoll_r
8008aa00 g     F .text	00000148 __lshift
800a23ac g     O .bss	00000004 _alt_nticks
8009ae70 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
80099280 g     F .text	000000fc read
80099630 g     F .text	000000e4 alt_sys_init
800940a0 g     F .text	000001d0 __ssprint_r
8009d3a4 g     F .text	00000118 __register_exitproc
80093fd0 g     F .text	000000d0 strncmp
8008a6c8 g     F .text	000001f8 __multiply
80099be4 g     F .text	00000068 altera_avalon_jtag_uart_close
8009eb2c g       *ABS*	00000000 __ram_rwdata_start
8009d670 g       *ABS*	00000000 __ram_rodata_start
800a23b4 g     O .bss	00000028 __malloc_current_mallinfo
800961b8 g     F .text	00000078 .hidden __eqsf2
8008af14 g     F .text	0000014c __d2b
80099714 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8008db2c g     F .text	0000024c _strtoul_r
8009d188 g     F .text	000000a4 alt_get_fd
8009c218 g     F .text	00000158 alt_busy_sleep
80087030 g     F .text	00000054 _close_r
8009b320 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
80082d28 g     F .text	0000007c memcmp
800997d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
800a24dc g       *ABS*	00000000 __alt_stack_base
80099824 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8009b428 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
80083128 g     F .text	0000007c sscanf
80086edc g     F .text	00000154 __swsetup_r
80096c60 g     F .text	000008e8 .hidden __divdf3
80088dd4 g     F .text	00000118 __sfp
8008b178 g     F .text	00000078 __copybits
8009ef50 g     O .rwdata	00000408 __malloc_av_
80088f20 g     F .text	00000004 __sinit_lock_release
800977a0 g     F .text	00000718 .hidden __muldf3
8008321c g     F .text	00000054 __sread
8009d080 g     F .text	00000108 alt_find_file
8009c3f4 g     F .text	000000a4 alt_dev_llist_insert
800991fc g     F .text	00000024 __malloc_lock
800993e0 g     F .text	000000b0 sbrk
8008f3cc g     F .text	000021d8 ___svfprintf_internal_r
80088b28 g     F .text	0000005c _fflush_r
80092fc4 g     F .text	000000c4 _calloc_r
800a0730 g     O .rwdata	00000008 alt_flash_dev_list
800a2374 g       *ABS*	00000000 __bss_start
8008a158 g     F .text	00000128 memset
8009bde4 g     F .text	00000058 alt_msgdma_open
800821f8 g     F .text	00000050 main
800a23a0 g     O .bss	00000004 alt_envp
800a237c g     O .bss	00000004 __malloc_max_total_mem
8009b708 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
80099774 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
80092fac g     F .text	00000018 __swbuf
800962ec g     F .text	000000c8 .hidden __ltsf2
80083350 g     F .text	00000008 __sclose
800fd000 g       *ABS*	00000000 __alt_heap_limit
80093178 g     F .text	00000014 fclose
8008d5f8 g     F .text	00000238 _strtol_r
800989b8 g     F .text	000001a8 .hidden __truncdfsf2
80087284 g     F .text	00001688 _dtoa_r
8009ba0c g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8008251c g     F .text	0000080c _malloc_r
80095608 g     F .text	00000030 __ascii_wctomb
800a072c g     O .rwdata	00000004 alt_errno
8009b560 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
800915a4 g     F .text	000000d4 __submore
80089844 g     F .text	000000c4 _fwalk
80089ebc g     F .text	0000005c _mbtowc_r
8008b31c g     F .text	000000c8 putc
80082248 g     F .text	00000084 .hidden __divsi3
80088f54 g     F .text	00000124 _malloc_trim_r
8009d670 g       *ABS*	00000000 __CTOR_END__
8008bda8 g     F .text	000000dc strcmp
8009d670 g       *ABS*	00000000 __flash_rodata_start
8009d670 g       *ABS*	00000000 __DTOR_LIST__
80097548 g     F .text	00000088 .hidden __nedf2
800995f8 g     F .text	00000038 alt_irq_init
8009937c g     F .text	00000064 alt_release_fd
8009c074 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8008bd3c g     F .text	0000006c sprintf
8009e782 g     O .rodata	00000100 .hidden __clz_tab
800a238c g     O .bss	00000004 _PathLocale
8008d4f8 g     F .text	00000100 strtof
8009d358 g     F .text	00000014 atexit
80096230 g     F .text	000000bc .hidden __gesf2
80086e7c g     F .text	00000060 _write_r
80089ab4 g     F .text	00000018 setlocale
8009b4c8 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8008bcdc g     F .text	00000008 nanf
800a06fc g     O .rwdata	00000004 _impure_ptr
800a2398 g     O .bss	00000004 alt_argc
8008890c g     F .text	0000021c __sflush_r
80089cf4 g     F .text	000000ac _mbrtowc_r
8009c4f8 g     F .text	00000060 _do_dtors
80089aa0 g     F .text	00000008 __locale_cjk_lang
8008b9c4 g     F .text	000001d4 __srefill_r
80080020 g       .exceptions	00000000 alt_irq_entry
80089e78 g     F .text	00000044 __ascii_mbtowc
8008ada4 g     F .text	00000064 __ulp
80088f3c g     F .text	00000018 __fp_unlock_all
800a0718 g     O .rwdata	00000008 alt_fs_list
8008e2d8 g     F .text	000010f4 __ssvfiscanf_r
80080020 g       *ABS*	00000000 __ram_exceptions_start
80089acc g     F .text	0000000c localeconv
8009c61c g     F .text	00000050 alt_ic_isr_register
800831a4 g     F .text	00000078 _sscanf_r
800a0750 g       *ABS*	00000000 _edata
800a24dc g       *ABS*	00000000 _end
80098cfc g     F .text	00000068 alt_flash_open_dev
8009318c g     F .text	00000164 __fputwc
80080244 g       *ABS*	00000000 __ram_exceptions_end
80099c4c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
8009c6f4 g     F .text	0000008c alt_ic_irq_disable
80083278 g     F .text	0000007c __swrite
800a0704 g     O .rwdata	00000004 __malloc_trim_threshold
80089a94 g     F .text	0000000c __locale_msgcharset
8009d36c g     F .text	00000038 exit
80089908 g     F .text	000000c4 _fwalk_reent
8009b8a0 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8008aba8 g     F .text	000001fc __mdiff
80098d64 g     F .text	00000054 alt_flash_close_dev
800822cc g     F .text	00000074 .hidden __modsi3
800a0708 g     O .rwdata	00000004 __ctype_ptr__
800fd000 g       *ABS*	00000000 __alt_data_end
80080020 g     F .exceptions	00000000 alt_exception
80088f18 g     F .text	00000004 __sfp_lock_release
8009b040 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
8008bc0c g     F .text	000000d0 __sccl
8009e1de g     O .rodata	00000101 _ctype_
8009af20 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
800a0710 g     O .rwdata	00000004 __mbtowc
8009d63c g     F .text	00000034 _exit
8009c0ec g     F .text	0000012c alt_alarm_start
00000000 g       *ABS*	00000000 __alt_mem_ddr2_ram
80089b38 g     F .text	000001bc __smakebuf_r
800a073c g     O .rwdata	00000008 alt_msgdma_list
80083358 g     F .text	00000098 strlen
8009cafc g     F .text	00000154 open
800975d0 g     F .text	000000dc .hidden __gedf2
8009ce7c g     F .text	0000003c alt_putchar
800934f0 g     F .text	00000830 __gethex
800a0714 g     O .rwdata	00000004 __wctomb
80091920 g     F .text	00000018 __sprint_r
8009c5e8 g     F .text	00000034 alt_icache_flush_all
800a0744 g     O .rwdata	00000004 alt_priority_mask
8009c66c g     F .text	00000088 alt_ic_irq_enable
80086da4 g     F .text	0000001c __vfprintf_internal
80095638 g     F .text	0000005c _wctomb_r
80097eb8 g     F .text	000008fc .hidden __subdf3
8008a5dc g     F .text	000000b0 __lo0bits
800a0748 g     O .rwdata	00000008 alt_alarm_list
80091678 g     F .text	00000194 _ungetc_r
8009c498 g     F .text	00000060 _do_ctors
80095548 g     F .text	000000c0 wcrtomb
80098c00 g     F .text	000000d0 close
80098fec g     F .text	00000084 alt_load
80093314 g     F .text	00000080 fputwc
80082508 g     F .text	00000014 free
80088f1c g     F .text	00000004 __sinit_lock_acquire
8008a350 g     F .text	00000120 __multadd
8008a328 g     F .text	00000028 _Bfree



Disassembly of section .entry:

80080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
80080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
80080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
80080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
8008000c:	00bffd16 	blt	zero,r2,80080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
80080010:	00600234 	movhi	at,32776
    ori r1, r1, %lo(_start)
80080014:	08409114 	ori	at,at,580
    jmp r1
80080018:	0800683a 	jmp	at
8008001c:	00000000 	call	80000000 <__alt_mem_ddr2_ram+0x80000000>

Disassembly of section .exceptions:

80080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8008007c:	10000326 	beq	r2,zero,8008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80080080:	20000226 	beq	r4,zero,8008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80080084:	00800fc0 	call	800800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80080088:	00000706 	br	800800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8008008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80080098:	00801d00 	call	800801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8008009c:	1000021e 	bne	r2,zero,800800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
800800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
800800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
800800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
800800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
800800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
800800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
800800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
800800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
800800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
800800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
800800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
800800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
800800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
800800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
800800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
800800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
800800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
800800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
800800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
800800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
800800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
800800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
800800f8:	ef80083a 	eret

800800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
800800fc:	defff904 	addi	sp,sp,-28
80080100:	dfc00615 	stw	ra,24(sp)
80080104:	df000515 	stw	fp,20(sp)
80080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80080110:	0005313a 	rdctl	r2,ipending
80080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80080124:	00800044 	movi	r2,1
80080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8008012c:	e0fffb17 	ldw	r3,-20(fp)
80080130:	e0bffc17 	ldw	r2,-16(fp)
80080134:	1884703a 	and	r2,r3,r2
80080138:	10001426 	beq	r2,zero,8008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8008013c:	00a002b4 	movhi	r2,32778
80080140:	1088f704 	addi	r2,r2,9180
80080144:	e0fffd17 	ldw	r3,-12(fp)
80080148:	180690fa 	slli	r3,r3,3
8008014c:	10c5883a 	add	r2,r2,r3
80080150:	10c00017 	ldw	r3,0(r2)
80080154:	00a002b4 	movhi	r2,32778
80080158:	1088f704 	addi	r2,r2,9180
8008015c:	e13ffd17 	ldw	r4,-12(fp)
80080160:	200890fa 	slli	r4,r4,3
80080164:	1105883a 	add	r2,r2,r4
80080168:	10800104 	addi	r2,r2,4
8008016c:	10800017 	ldw	r2,0(r2)
80080170:	1009883a 	mov	r4,r2
80080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8008017c:	0005313a 	rdctl	r2,ipending
80080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80080184:	e0bfff17 	ldw	r2,-4(fp)
80080188:	00000706 	br	800801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8008018c:	e0bffc17 	ldw	r2,-16(fp)
80080190:	1085883a 	add	r2,r2,r2
80080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80080198:	e0bffd17 	ldw	r2,-12(fp)
8008019c:	10800044 	addi	r2,r2,1
800801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
800801a4:	003fe106 	br	8008012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
800801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
800801ac:	e0bffb17 	ldw	r2,-20(fp)
800801b0:	103fdb1e 	bne	r2,zero,80080120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
800801b4:	0001883a 	nop
}
800801b8:	0001883a 	nop
800801bc:	e037883a 	mov	sp,fp
800801c0:	dfc00117 	ldw	ra,4(sp)
800801c4:	df000017 	ldw	fp,0(sp)
800801c8:	dec00204 	addi	sp,sp,8
800801cc:	f800283a 	ret

800801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
800801d0:	defffb04 	addi	sp,sp,-20
800801d4:	dfc00415 	stw	ra,16(sp)
800801d8:	df000315 	stw	fp,12(sp)
800801dc:	df000304 	addi	fp,sp,12
800801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
800801e4:	000531fa 	rdctl	r2,exception
800801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
800801ec:	e0bffd17 	ldw	r2,-12(fp)
800801f0:	10801f0c 	andi	r2,r2,124
800801f4:	1004d0ba 	srli	r2,r2,2
800801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
800801fc:	0005333a 	rdctl	r2,badaddr
80080200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80080204:	d0a72e17 	ldw	r2,-25416(gp)
80080208:	10000726 	beq	r2,zero,80080228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8008020c:	d0a72e17 	ldw	r2,-25416(gp)
80080210:	e0fffd17 	ldw	r3,-12(fp)
80080214:	e1bffe17 	ldw	r6,-8(fp)
80080218:	e17fff17 	ldw	r5,-4(fp)
8008021c:	1809883a 	mov	r4,r3
80080220:	103ee83a 	callr	r2
80080224:	00000206 	br	80080230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80080228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8008022c:	0005883a 	mov	r2,zero
}
80080230:	e037883a 	mov	sp,fp
80080234:	dfc00117 	ldw	ra,4(sp)
80080238:	df000017 	ldw	fp,0(sp)
8008023c:	dec00204 	addi	sp,sp,8
80080240:	f800283a 	ret

Disassembly of section .text:

80080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
80080244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
80080248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
8008024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
80080250:	00bffd16 	blt	zero,r2,80080248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80080254:	06e003f4 	movhi	sp,32783
    ori sp, sp, %lo(__alt_stack_pointer)
80080258:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
8008025c:	06a002b4 	movhi	gp,32778
    ori gp, gp, %lo(_gp)
80080260:	d6a1be14 	ori	gp,gp,34552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80080264:	00a002b4 	movhi	r2,32778
    ori r2, r2, %lo(__bss_start)
80080268:	1088dd14 	ori	r2,r2,9076

    movhi r3, %hi(__bss_end)
8008026c:	00e002b4 	movhi	r3,32778
    ori r3, r3, %lo(__bss_end)
80080270:	18c93714 	ori	r3,r3,9436

    beq r2, r3, 1f
80080274:	10c00326 	beq	r2,r3,80080284 <_start+0x40>

0:
    stw zero, (r2)
80080278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8008027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80080280:	10fffd36 	bltu	r2,r3,80080278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
80080284:	0098fec0 	call	80098fec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80080288:	00991800 	call	80099180 <alt_main>

8008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
8008028c:	003fff06 	br	8008028c <alt_after_alt_main>

80080290 <MenuHeader>:
*
*  Purpose: Prints the menu header.
*
******************************************************************/
static void MenuHeader(void)
{
80080290:	defffe04 	addi	sp,sp,-8
80080294:	dfc00115 	stw	ra,4(sp)
80080298:	df000015 	stw	fp,0(sp)
8008029c:	d839883a 	mov	fp,sp
  printf("\n\n");
800802a0:	012002b4 	movhi	r4,32778
800802a4:	21359c04 	addi	r4,r4,-10640
800802a8:	00830380 	call	80083038 <puts>
  printf("             <---->   Nios II Memory Test.   <---->\n");
800802ac:	012002b4 	movhi	r4,32778
800802b0:	21359d04 	addi	r4,r4,-10636
800802b4:	00830380 	call	80083038 <puts>
  printf("This software example tests the memory in your system to assure it\n");
800802b8:	012002b4 	movhi	r4,32778
800802bc:	2135aa04 	addi	r4,r4,-10584
800802c0:	00830380 	call	80083038 <puts>
  printf("is working properly.  This test is destructive to the contents of\n");
800802c4:	012002b4 	movhi	r4,32778
800802c8:	2135bb04 	addi	r4,r4,-10516
800802cc:	00830380 	call	80083038 <puts>
  printf("the memory it tests. Assure the memory being tested does not contain\n");
800802d0:	012002b4 	movhi	r4,32778
800802d4:	2135cc04 	addi	r4,r4,-10448
800802d8:	00830380 	call	80083038 <puts>
  printf("the executable or data sections of this code or the exception address\n");
800802dc:	012002b4 	movhi	r4,32778
800802e0:	2135de04 	addi	r4,r4,-10376
800802e4:	00830380 	call	80083038 <puts>
  printf("of the system.\n");
800802e8:	012002b4 	movhi	r4,32778
800802ec:	2135f004 	addi	r4,r4,-10304
800802f0:	00830380 	call	80083038 <puts>
}
800802f4:	0001883a 	nop
800802f8:	e037883a 	mov	sp,fp
800802fc:	dfc00117 	ldw	ra,4(sp)
80080300:	df000017 	ldw	fp,0(sp)
80080304:	dec00204 	addi	sp,sp,8
80080308:	f800283a 	ret

8008030c <MenuBegin>:
*
*  Purpose: Prints the top portion of the menu.
*
******************************************************************/
static void MenuBegin( char *title )
{
8008030c:	defffd04 	addi	sp,sp,-12
80080310:	dfc00215 	stw	ra,8(sp)
80080314:	df000115 	stw	fp,4(sp)
80080318:	df000104 	addi	fp,sp,4
8008031c:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
80080320:	012002b4 	movhi	r4,32778
80080324:	21359c04 	addi	r4,r4,-10640
80080328:	00830380 	call	80083038 <puts>
  printf("----------------------------------\n");
8008032c:	012002b4 	movhi	r4,32778
80080330:	2135f404 	addi	r4,r4,-10288
80080334:	00830380 	call	80083038 <puts>
  printf("%s\n",title);
80080338:	e13fff17 	ldw	r4,-4(fp)
8008033c:	00830380 	call	80083038 <puts>
  printf("----------------------------------\n");
80080340:	012002b4 	movhi	r4,32778
80080344:	2135f404 	addi	r4,r4,-10288
80080348:	00830380 	call	80083038 <puts>
}
8008034c:	0001883a 	nop
80080350:	e037883a 	mov	sp,fp
80080354:	dfc00117 	ldw	ra,4(sp)
80080358:	df000017 	ldw	fp,0(sp)
8008035c:	dec00204 	addi	sp,sp,8
80080360:	f800283a 	ret

80080364 <MenuItem>:
*  Purpose: Prints selection items in the menu, enumerated by the 
*           specified letter.
*
******************************************************************/
static void MenuItem( char letter, char *name )
{
80080364:	defffc04 	addi	sp,sp,-16
80080368:	dfc00315 	stw	ra,12(sp)
8008036c:	df000215 	stw	fp,8(sp)
80080370:	df000204 	addi	fp,sp,8
80080374:	2005883a 	mov	r2,r4
80080378:	e17fff15 	stw	r5,-4(fp)
8008037c:	e0bffe05 	stb	r2,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
80080380:	e0bffe07 	ldb	r2,-8(fp)
80080384:	e1bfff17 	ldw	r6,-4(fp)
80080388:	100b883a 	mov	r5,r2
8008038c:	012002b4 	movhi	r4,32778
80080390:	2135fd04 	addi	r4,r4,-10252
80080394:	0082f1c0 	call	80082f1c <printf>
}
80080398:	0001883a 	nop
8008039c:	e037883a 	mov	sp,fp
800803a0:	dfc00117 	ldw	ra,4(sp)
800803a4:	df000017 	ldw	fp,0(sp)
800803a8:	dec00204 	addi	sp,sp,8
800803ac:	f800283a 	ret

800803b0 <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
800803b0:	defff904 	addi	sp,sp,-28
800803b4:	dfc00615 	stw	ra,24(sp)
800803b8:	df000515 	stw	fp,20(sp)
800803bc:	df000504 	addi	fp,sp,20
800803c0:	e13ffd15 	stw	r4,-12(fp)
800803c4:	e17ffe15 	stw	r5,-8(fp)
800803c8:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
800803cc:	e03ffc15 	stw	zero,-16(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
800803d0:	e03ffb15 	stw	zero,-20(fp)
800803d4:	00000e06 	br	80080410 <GetInputString+0x60>
  {
    if( (ch = getc(stream)) != '\r')
800803d8:	e13fff17 	ldw	r4,-4(fp)
800803dc:	008246c0 	call	8008246c <getc>
800803e0:	e0bffc15 	stw	r2,-16(fp)
800803e4:	e0bffc17 	ldw	r2,-16(fp)
800803e8:	10800360 	cmpeqi	r2,r2,13
800803ec:	1000081e 	bne	r2,zero,80080410 <GetInputString+0x60>
    {
      entry[i] = ch;
800803f0:	e0bffb17 	ldw	r2,-20(fp)
800803f4:	e0fffd17 	ldw	r3,-12(fp)
800803f8:	1885883a 	add	r2,r3,r2
800803fc:	e0fffc17 	ldw	r3,-16(fp)
80080400:	10c00005 	stb	r3,0(r2)
      i++;
80080404:	e0bffb17 	ldw	r2,-20(fp)
80080408:	10800044 	addi	r2,r2,1
8008040c:	e0bffb15 	stw	r2,-20(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
80080410:	e0bffc17 	ldw	r2,-16(fp)
80080414:	108002a0 	cmpeqi	r2,r2,10
80080418:	1000031e 	bne	r2,zero,80080428 <GetInputString+0x78>
8008041c:	e0fffb17 	ldw	r3,-20(fp)
80080420:	e0bffe17 	ldw	r2,-8(fp)
80080424:	18bfec16 	blt	r3,r2,800803d8 <GetInputString+0x28>
    {
      entry[i] = ch;
      i++;
    }
  }
}
80080428:	0001883a 	nop
8008042c:	e037883a 	mov	sp,fp
80080430:	dfc00117 	ldw	ra,4(sp)
80080434:	df000017 	ldw	fp,0(sp)
80080438:	dec00204 	addi	sp,sp,8
8008043c:	f800283a 	ret

80080440 <MenuEnd>:
*  Purpose: Prints the end of the menu, then captures and returns
*           the user's selection.
*
******************************************************************/
static int MenuEnd( char lowLetter, char highLetter )
{
80080440:	defffc04 	addi	sp,sp,-16
80080444:	dfc00315 	stw	ra,12(sp)
80080448:	df000215 	stw	fp,8(sp)
8008044c:	df000204 	addi	fp,sp,8
80080450:	2007883a 	mov	r3,r4
80080454:	2805883a 	mov	r2,r5
80080458:	e0fffe05 	stb	r3,-8(fp)
8008045c:	e0bfff05 	stb	r2,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
80080460:	012002b4 	movhi	r4,32778
80080464:	21360104 	addi	r4,r4,-10236
80080468:	00830380 	call	80083038 <puts>
  printf("----------------------------------\n");
8008046c:	012002b4 	movhi	r4,32778
80080470:	2135f404 	addi	r4,r4,-10288
80080474:	00830380 	call	80083038 <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
80080478:	e0bffe07 	ldb	r2,-8(fp)
8008047c:	e0ffff07 	ldb	r3,-4(fp)
80080480:	180d883a 	mov	r6,r3
80080484:	100b883a 	mov	r5,r2
80080488:	012002b4 	movhi	r4,32778
8008048c:	21360504 	addi	r4,r4,-10220
80080490:	0082f1c0 	call	80082f1c <printf>

  GetInputString( entry, sizeof(entry), stdin );
80080494:	d0a00117 	ldw	r2,-32764(gp)
80080498:	10800117 	ldw	r2,4(r2)
8008049c:	100d883a 	mov	r6,r2
800804a0:	01400104 	movi	r5,4
800804a4:	d1271f04 	addi	r4,gp,-25476
800804a8:	00803b00 	call	800803b0 <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
800804ac:	d1a72004 	addi	r6,gp,-25472
800804b0:	016002b4 	movhi	r5,32778
800804b4:	29761104 	addi	r5,r5,-10172
800804b8:	d1271f04 	addi	r4,gp,-25476
800804bc:	00831280 	call	80083128 <sscanf>
800804c0:	10001726 	beq	r2,zero,80080520 <MenuEnd+0xe0>
  {
    if( ch >= 'A' && ch <= 'Z' )
800804c4:	d0a72003 	ldbu	r2,-25472(gp)
800804c8:	10803fcc 	andi	r2,r2,255
800804cc:	1080201c 	xori	r2,r2,128
800804d0:	10bfe004 	addi	r2,r2,-128
800804d4:	10801050 	cmplti	r2,r2,65
800804d8:	1000091e 	bne	r2,zero,80080500 <MenuEnd+0xc0>
800804dc:	d0a72003 	ldbu	r2,-25472(gp)
800804e0:	10803fcc 	andi	r2,r2,255
800804e4:	1080201c 	xori	r2,r2,128
800804e8:	10bfe004 	addi	r2,r2,-128
800804ec:	108016c8 	cmpgei	r2,r2,91
800804f0:	1000031e 	bne	r2,zero,80080500 <MenuEnd+0xc0>
      ch += 'a' - 'A';
800804f4:	d0a72003 	ldbu	r2,-25472(gp)
800804f8:	10800804 	addi	r2,r2,32
800804fc:	d0a72005 	stb	r2,-25472(gp)
    if( ch == 27 )
80080500:	d0a72003 	ldbu	r2,-25472(gp)
80080504:	10803fcc 	andi	r2,r2,255
80080508:	1080201c 	xori	r2,r2,128
8008050c:	10bfe004 	addi	r2,r2,-128
80080510:	108006d8 	cmpnei	r2,r2,27
80080514:	1000021e 	bne	r2,zero,80080520 <MenuEnd+0xe0>
      ch = 'q';
80080518:	00801c44 	movi	r2,113
8008051c:	d0a72005 	stb	r2,-25472(gp)
  }
  return ch;
80080520:	d0a72003 	ldbu	r2,-25472(gp)
80080524:	10803fcc 	andi	r2,r2,255
80080528:	1080201c 	xori	r2,r2,128
8008052c:	10bfe004 	addi	r2,r2,-128
}
80080530:	e037883a 	mov	sp,fp
80080534:	dfc00117 	ldw	ra,4(sp)
80080538:	df000017 	ldw	fp,0(sp)
8008053c:	dec00204 	addi	sp,sp,8
80080540:	f800283a 	ret

80080544 <MemGetAddressRange>:
*
*  Purpose: Gathers a range of memory from the user.
*
******************************************************************/
static int MemGetAddressRange(int* base_address, int* end_address)
{
80080544:	defff904 	addi	sp,sp,-28
80080548:	dfc00615 	stw	ra,24(sp)
8008054c:	df000515 	stw	fp,20(sp)
80080550:	df000504 	addi	fp,sp,20
80080554:	e13ffe15 	stw	r4,-8(fp)
80080558:	e17fff15 	stw	r5,-4(fp)
  char line[12];

  while(1)
  {
    /* Get the base address */
    printf("Base address to start memory test: (i.e. 0x800000)\n");
8008055c:	012002b4 	movhi	r4,32778
80080560:	21361204 	addi	r4,r4,-10168
80080564:	00830380 	call	80083038 <puts>
    printf(">");
80080568:	01000f84 	movi	r4,62
8008056c:	0082f600 	call	80082f60 <putchar>

    GetInputString( line, sizeof(line), stdin );
80080570:	d0a00117 	ldw	r2,-32764(gp)
80080574:	10800117 	ldw	r2,4(r2)
80080578:	100d883a 	mov	r6,r2
8008057c:	01400304 	movi	r5,12
80080580:	e13ffb04 	addi	r4,fp,-20
80080584:	00803b00 	call	800803b0 <GetInputString>
   
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", base_address) != 1)
80080588:	e1bffe17 	ldw	r6,-8(fp)
8008058c:	016002b4 	movhi	r5,32778
80080590:	29761f04 	addi	r5,r5,-10116
80080594:	e13ffb04 	addi	r4,fp,-20
80080598:	00831280 	call	80083128 <sscanf>
8008059c:	10800060 	cmpeqi	r2,r2,1
800805a0:	1000061e 	bne	r2,zero,800805bc <MemGetAddressRange+0x78>
    {
      printf("%s\n", line);
800805a4:	e13ffb04 	addi	r4,fp,-20
800805a8:	00830380 	call	80083038 <puts>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
800805ac:	012002b4 	movhi	r4,32778
800805b0:	21362104 	addi	r4,r4,-10108
800805b4:	00830380 	call	80083038 <puts>
      continue;
800805b8:	00001f06 	br	80080638 <MemGetAddressRange+0xf4>
    }
    
    /* Get the end address */
    printf("End Address:\n");
800805bc:	012002b4 	movhi	r4,32778
800805c0:	21363504 	addi	r4,r4,-10028
800805c4:	00830380 	call	80083038 <puts>
    printf(">");
800805c8:	01000f84 	movi	r4,62
800805cc:	0082f600 	call	80082f60 <putchar>

    GetInputString( line, sizeof(line), stdin );
800805d0:	d0a00117 	ldw	r2,-32764(gp)
800805d4:	10800117 	ldw	r2,4(r2)
800805d8:	100d883a 	mov	r6,r2
800805dc:	01400304 	movi	r5,12
800805e0:	e13ffb04 	addi	r4,fp,-20
800805e4:	00803b00 	call	800803b0 <GetInputString>
    
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", end_address) != 1)
800805e8:	e1bfff17 	ldw	r6,-4(fp)
800805ec:	016002b4 	movhi	r5,32778
800805f0:	29761f04 	addi	r5,r5,-10116
800805f4:	e13ffb04 	addi	r4,fp,-20
800805f8:	00831280 	call	80083128 <sscanf>
800805fc:	10800060 	cmpeqi	r2,r2,1
80080600:	1000041e 	bne	r2,zero,80080614 <MemGetAddressRange+0xd0>
    {
      printf(" -ERROR: Invalid end address entered.  Address must be in the form '0x8FFFFF'\n\n");
80080604:	012002b4 	movhi	r4,32778
80080608:	21363904 	addi	r4,r4,-10012
8008060c:	00830380 	call	80083038 <puts>
      continue;
80080610:	00000906 	br	80080638 <MemGetAddressRange+0xf4>
    }
    
    /* Make sure end address is greater than base address. */
    if (*end_address <= *base_address)
80080614:	e0bfff17 	ldw	r2,-4(fp)
80080618:	10800017 	ldw	r2,0(r2)
8008061c:	e0fffe17 	ldw	r3,-8(fp)
80080620:	18c00017 	ldw	r3,0(r3)
80080624:	18800516 	blt	r3,r2,8008063c <MemGetAddressRange+0xf8>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");
80080628:	012002b4 	movhi	r4,32778
8008062c:	21364d04 	addi	r4,r4,-9932
80080630:	00830380 	call	80083038 <puts>

      continue;
80080634:	0001883a 	nop
    }
    break;
  }
80080638:	003fc806 	br	8008055c <MemGetAddressRange+0x18>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");

      continue;
    }
    break;
8008063c:	0001883a 	nop
  }

  return(0);
80080640:	0005883a 	mov	r2,zero
}
80080644:	e037883a 	mov	sp,fp
80080648:	dfc00117 	ldw	ra,4(sp)
8008064c:	df000017 	ldw	fp,0(sp)
80080650:	dec00204 	addi	sp,sp,8
80080654:	f800283a 	ret

80080658 <MemTestDataBus>:
*  Purpose: Tests that the data bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestDataBus(unsigned int address)
{
80080658:	defffc04 	addi	sp,sp,-16
8008065c:	df000315 	stw	fp,12(sp)
80080660:	df000304 	addi	fp,sp,12
80080664:	e13fff15 	stw	r4,-4(fp)
  unsigned int pattern;
  unsigned int ret_code = 0x0;
80080668:	e03ffe15 	stw	zero,-8(fp)

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
8008066c:	00800044 	movi	r2,1
80080670:	e0bffd15 	stw	r2,-12(fp)
80080674:	00000e06 	br	800806b0 <MemTestDataBus+0x58>
  {
    /* Write the test pattern. */
    IOWR_32DIRECT(address, 0, pattern);
80080678:	e0bfff17 	ldw	r2,-4(fp)
8008067c:	e0fffd17 	ldw	r3,-12(fp)
80080680:	10c00035 	stwio	r3,0(r2)

    /* Read it back (immediately is okay for this test). */
    if (IORD_32DIRECT(address, 0) != pattern)
80080684:	e0bfff17 	ldw	r2,-4(fp)
80080688:	10800037 	ldwio	r2,0(r2)
8008068c:	1007883a 	mov	r3,r2
80080690:	e0bffd17 	ldw	r2,-12(fp)
80080694:	18800326 	beq	r3,r2,800806a4 <MemTestDataBus+0x4c>
    {
      ret_code = pattern;
80080698:	e0bffd17 	ldw	r2,-12(fp)
8008069c:	e0bffe15 	stw	r2,-8(fp)
      break;
800806a0:	00000506 	br	800806b8 <MemTestDataBus+0x60>
{
  unsigned int pattern;
  unsigned int ret_code = 0x0;

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
800806a4:	e0bffd17 	ldw	r2,-12(fp)
800806a8:	1085883a 	add	r2,r2,r2
800806ac:	e0bffd15 	stw	r2,-12(fp)
800806b0:	e0bffd17 	ldw	r2,-12(fp)
800806b4:	103ff01e 	bne	r2,zero,80080678 <MemTestDataBus+0x20>
    {
      ret_code = pattern;
      break;
    }
  }
  return ret_code;
800806b8:	e0bffe17 	ldw	r2,-8(fp)
}
800806bc:	e037883a 	mov	sp,fp
800806c0:	df000017 	ldw	fp,0(sp)
800806c4:	dec00104 	addi	sp,sp,4
800806c8:	f800283a 	ret

800806cc <MemTestAddressBus>:
*  Purpose: Tests that the address bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestAddressBus(unsigned int memory_base, unsigned int nBytes)
{
800806cc:	defff704 	addi	sp,sp,-36
800806d0:	df000815 	stw	fp,32(sp)
800806d4:	df000804 	addi	fp,sp,32
800806d8:	e13ffe15 	stw	r4,-8(fp)
800806dc:	e17fff15 	stw	r5,-4(fp)
  unsigned int address_mask = (nBytes - 1);
800806e0:	e0bfff17 	ldw	r2,-4(fp)
800806e4:	10bfffc4 	addi	r2,r2,-1
800806e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int offset;
  unsigned int test_offset;

  unsigned int pattern     = 0xAAAAAAAA;
800806ec:	00aaaaf4 	movhi	r2,43691
800806f0:	10aaaa84 	addi	r2,r2,-21846
800806f4:	e0bffc15 	stw	r2,-16(fp)
  unsigned int antipattern  = 0x55555555;
800806f8:	00955574 	movhi	r2,21845
800806fc:	10955544 	addi	r2,r2,21845
80080700:	e0bffd15 	stw	r2,-12(fp)

  unsigned int ret_code = 0x0;
80080704:	e03ffa15 	stw	zero,-24(fp)

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
80080708:	00800104 	movi	r2,4
8008070c:	e0bff815 	stw	r2,-32(fp)
80080710:	00000906 	br	80080738 <MemTestAddressBus+0x6c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
80080714:	e0fff817 	ldw	r3,-32(fp)
80080718:	e0bffe17 	ldw	r2,-8(fp)
8008071c:	1885883a 	add	r2,r3,r2
80080720:	1007883a 	mov	r3,r2
80080724:	e0bffc17 	ldw	r2,-16(fp)
80080728:	18800035 	stwio	r2,0(r3)
  unsigned int antipattern  = 0x55555555;

  unsigned int ret_code = 0x0;

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
8008072c:	e0bff817 	ldw	r2,-32(fp)
80080730:	1085883a 	add	r2,r2,r2
80080734:	e0bff815 	stw	r2,-32(fp)
80080738:	e0fff817 	ldw	r3,-32(fp)
8008073c:	e0bffb17 	ldw	r2,-20(fp)
80080740:	1884703a 	and	r2,r3,r2
80080744:	103ff31e 	bne	r2,zero,80080714 <MemTestAddressBus+0x48>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
80080748:	e03ff915 	stw	zero,-28(fp)
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
8008074c:	e0fff917 	ldw	r3,-28(fp)
80080750:	e0bffe17 	ldw	r2,-8(fp)
80080754:	1885883a 	add	r2,r3,r2
80080758:	1007883a 	mov	r3,r2
8008075c:	e0bffd17 	ldw	r2,-12(fp)
80080760:	18800035 	stwio	r2,0(r3)
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
80080764:	00800104 	movi	r2,4
80080768:	e0bff815 	stw	r2,-32(fp)
8008076c:	00000f06 	br	800807ac <MemTestAddressBus+0xe0>
  {
     if (IORD_32DIRECT(memory_base, offset) != pattern)
80080770:	e0fff817 	ldw	r3,-32(fp)
80080774:	e0bffe17 	ldw	r2,-8(fp)
80080778:	1885883a 	add	r2,r3,r2
8008077c:	10800037 	ldwio	r2,0(r2)
80080780:	1007883a 	mov	r3,r2
80080784:	e0bffc17 	ldw	r2,-16(fp)
80080788:	18800526 	beq	r3,r2,800807a0 <MemTestAddressBus+0xd4>
     {
        ret_code = (memory_base+offset);
8008078c:	e0fffe17 	ldw	r3,-8(fp)
80080790:	e0bff817 	ldw	r2,-32(fp)
80080794:	1885883a 	add	r2,r3,r2
80080798:	e0bffa15 	stw	r2,-24(fp)
        break;
8008079c:	00000706 	br	800807bc <MemTestAddressBus+0xf0>
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
800807a0:	e0bff817 	ldw	r2,-32(fp)
800807a4:	1085883a 	add	r2,r2,r2
800807a8:	e0bff815 	stw	r2,-32(fp)
800807ac:	e0fff817 	ldw	r3,-32(fp)
800807b0:	e0bffb17 	ldw	r2,-20(fp)
800807b4:	1884703a 	and	r2,r3,r2
800807b8:	103fed1e 	bne	r2,zero,80080770 <MemTestAddressBus+0xa4>
        break;
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
800807bc:	e0fff917 	ldw	r3,-28(fp)
800807c0:	e0bffe17 	ldw	r2,-8(fp)
800807c4:	1885883a 	add	r2,r3,r2
800807c8:	1007883a 	mov	r3,r2
800807cc:	e0bffc17 	ldw	r2,-16(fp)
800807d0:	18800035 	stwio	r2,0(r3)
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
800807d4:	00800104 	movi	r2,4
800807d8:	e0bff915 	stw	r2,-28(fp)
800807dc:	00002a06 	br	80080888 <MemTestAddressBus+0x1bc>
  {
    if (!ret_code)
800807e0:	e0bffa17 	ldw	r2,-24(fp)
800807e4:	1000251e 	bne	r2,zero,8008087c <MemTestAddressBus+0x1b0>
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
800807e8:	e0fff917 	ldw	r3,-28(fp)
800807ec:	e0bffe17 	ldw	r2,-8(fp)
800807f0:	1885883a 	add	r2,r3,r2
800807f4:	1007883a 	mov	r3,r2
800807f8:	e0bffd17 	ldw	r2,-12(fp)
800807fc:	18800035 	stwio	r2,0(r3)
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
80080800:	00800104 	movi	r2,4
80080804:	e0bff815 	stw	r2,-32(fp)
80080808:	00001206 	br	80080854 <MemTestAddressBus+0x188>
      {
        if ((IORD_32DIRECT(memory_base, offset) != pattern) && (offset != test_offset))
8008080c:	e0fff817 	ldw	r3,-32(fp)
80080810:	e0bffe17 	ldw	r2,-8(fp)
80080814:	1885883a 	add	r2,r3,r2
80080818:	10800037 	ldwio	r2,0(r2)
8008081c:	1007883a 	mov	r3,r2
80080820:	e0bffc17 	ldw	r2,-16(fp)
80080824:	18800826 	beq	r3,r2,80080848 <MemTestAddressBus+0x17c>
80080828:	e0fff817 	ldw	r3,-32(fp)
8008082c:	e0bff917 	ldw	r2,-28(fp)
80080830:	18800526 	beq	r3,r2,80080848 <MemTestAddressBus+0x17c>
        {
          ret_code = (memory_base + test_offset);
80080834:	e0fffe17 	ldw	r3,-8(fp)
80080838:	e0bff917 	ldw	r2,-28(fp)
8008083c:	1885883a 	add	r2,r3,r2
80080840:	e0bffa15 	stw	r2,-24(fp)
          break;
80080844:	00000706 	br	80080864 <MemTestAddressBus+0x198>
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
  {
    if (!ret_code)
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
80080848:	e0bff817 	ldw	r2,-32(fp)
8008084c:	1085883a 	add	r2,r2,r2
80080850:	e0bff815 	stw	r2,-32(fp)
80080854:	e0fff817 	ldw	r3,-32(fp)
80080858:	e0bffb17 	ldw	r2,-20(fp)
8008085c:	1884703a 	and	r2,r3,r2
80080860:	103fea1e 	bne	r2,zero,8008080c <MemTestAddressBus+0x140>
        {
          ret_code = (memory_base + test_offset);
          break;
        }
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
80080864:	e0fff917 	ldw	r3,-28(fp)
80080868:	e0bffe17 	ldw	r2,-8(fp)
8008086c:	1885883a 	add	r2,r3,r2
80080870:	1007883a 	mov	r3,r2
80080874:	e0bffc17 	ldw	r2,-16(fp)
80080878:	18800035 	stwio	r2,0(r3)
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
8008087c:	e0bff917 	ldw	r2,-28(fp)
80080880:	1085883a 	add	r2,r2,r2
80080884:	e0bff915 	stw	r2,-28(fp)
80080888:	e0fff917 	ldw	r3,-28(fp)
8008088c:	e0bffb17 	ldw	r2,-20(fp)
80080890:	1884703a 	and	r2,r3,r2
80080894:	103fd21e 	bne	r2,zero,800807e0 <MemTestAddressBus+0x114>
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
    }
  }

  return ret_code;
80080898:	e0bffa17 	ldw	r2,-24(fp)
}
8008089c:	e037883a 	mov	sp,fp
800808a0:	df000017 	ldw	fp,0(sp)
800808a4:	dec00104 	addi	sp,sp,4
800808a8:	f800283a 	ret

800808ac <MemTest8_16BitAccess>:
*           can be read and written in both byte and half-word 
*           modes.
*
******************************************************************/
static int MemTest8_16BitAccess(unsigned int memory_base)
{
800808ac:	defffd04 	addi	sp,sp,-12
800808b0:	df000215 	stw	fp,8(sp)
800808b4:	df000204 	addi	fp,sp,8
800808b8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0x0;
800808bc:	e03ffe15 	stw	zero,-8(fp)

  /* Write 4 bytes */
  IOWR_8DIRECT(memory_base, 0, 0x0A);
800808c0:	e0bfff17 	ldw	r2,-4(fp)
800808c4:	00c00284 	movi	r3,10
800808c8:	10c00025 	stbio	r3,0(r2)
  IOWR_8DIRECT(memory_base, 1, 0x05);
800808cc:	e0bfff17 	ldw	r2,-4(fp)
800808d0:	10800044 	addi	r2,r2,1
800808d4:	1007883a 	mov	r3,r2
800808d8:	00800144 	movi	r2,5
800808dc:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 2, 0xA0);
800808e0:	e0bfff17 	ldw	r2,-4(fp)
800808e4:	10800084 	addi	r2,r2,2
800808e8:	1007883a 	mov	r3,r2
800808ec:	00bfe804 	movi	r2,-96
800808f0:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 3, 0x50);
800808f4:	e0bfff17 	ldw	r2,-4(fp)
800808f8:	108000c4 	addi	r2,r2,3
800808fc:	1007883a 	mov	r3,r2
80080900:	00801404 	movi	r2,80
80080904:	18800025 	stbio	r2,0(r3)

  /* Read it back as one word */
  if(IORD_32DIRECT(memory_base, 0) != 0x50A0050A)
80080908:	e0bfff17 	ldw	r2,-4(fp)
8008090c:	10c00037 	ldwio	r3,0(r2)
80080910:	00942834 	movhi	r2,20640
80080914:	10814284 	addi	r2,r2,1290
80080918:	18800226 	beq	r3,r2,80080924 <MemTest8_16BitAccess+0x78>
  {
    ret_code = memory_base;
8008091c:	e0bfff17 	ldw	r2,-4(fp)
80080920:	e0bffe15 	stw	r2,-8(fp)
  }

  /* Read it back as two half-words */
  if (!ret_code)
80080924:	e0bffe17 	ldw	r2,-8(fp)
80080928:	10000d1e 	bne	r2,zero,80080960 <MemTest8_16BitAccess+0xb4>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
8008092c:	e0bfff17 	ldw	r2,-4(fp)
80080930:	10800084 	addi	r2,r2,2
80080934:	1080002b 	ldhuio	r2,0(r2)
80080938:	10bfffcc 	andi	r2,r2,65535
8008093c:	10942818 	cmpnei	r2,r2,20640
80080940:	1000051e 	bne	r2,zero,80080958 <MemTest8_16BitAccess+0xac>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
80080944:	e0bfff17 	ldw	r2,-4(fp)
80080948:	1080002b 	ldhuio	r2,0(r2)
8008094c:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
80080950:	108142a0 	cmpeqi	r2,r2,1290
80080954:	1000021e 	bne	r2,zero,80080960 <MemTest8_16BitAccess+0xb4>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
    {
      ret_code = memory_base;
80080958:	e0bfff17 	ldw	r2,-4(fp)
8008095c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
80080960:	e0bffe17 	ldw	r2,-8(fp)
80080964:	1000191e 	bne	r2,zero,800809cc <MemTest8_16BitAccess+0x120>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
80080968:	e0bfff17 	ldw	r2,-4(fp)
8008096c:	108000c4 	addi	r2,r2,3
80080970:	10800023 	ldbuio	r2,0(r2)
80080974:	10803fcc 	andi	r2,r2,255
80080978:	10801418 	cmpnei	r2,r2,80
8008097c:	1000111e 	bne	r2,zero,800809c4 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
80080980:	e0bfff17 	ldw	r2,-4(fp)
80080984:	10800084 	addi	r2,r2,2
80080988:	10800023 	ldbuio	r2,0(r2)
8008098c:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
80080990:	10802818 	cmpnei	r2,r2,160
80080994:	10000b1e 	bne	r2,zero,800809c4 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
80080998:	e0bfff17 	ldw	r2,-4(fp)
8008099c:	10800044 	addi	r2,r2,1
800809a0:	10800023 	ldbuio	r2,0(r2)
800809a4:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
800809a8:	10800158 	cmpnei	r2,r2,5
800809ac:	1000051e 	bne	r2,zero,800809c4 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
800809b0:	e0bfff17 	ldw	r2,-4(fp)
800809b4:	10800023 	ldbuio	r2,0(r2)
800809b8:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
800809bc:	108002a0 	cmpeqi	r2,r2,10
800809c0:	1000021e 	bne	r2,zero,800809cc <MemTest8_16BitAccess+0x120>
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
    {
    ret_code = memory_base;
800809c4:	e0bfff17 	ldw	r2,-4(fp)
800809c8:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Write 2 half-words */
  if (!ret_code)
800809cc:	e0bffe17 	ldw	r2,-8(fp)
800809d0:	10000f1e 	bne	r2,zero,80080a10 <MemTest8_16BitAccess+0x164>
  {
    IOWR_16DIRECT(memory_base, 0, 0x50A0);
800809d4:	e0bfff17 	ldw	r2,-4(fp)
800809d8:	00d42804 	movi	r3,20640
800809dc:	10c0002d 	sthio	r3,0(r2)
    IOWR_16DIRECT(memory_base, 2, 0x050A);
800809e0:	e0bfff17 	ldw	r2,-4(fp)
800809e4:	10800084 	addi	r2,r2,2
800809e8:	1007883a 	mov	r3,r2
800809ec:	00814284 	movi	r2,1290
800809f0:	1880002d 	sthio	r2,0(r3)

    /* Read it back as one word */
    if(IORD_32DIRECT(memory_base, 0) != 0x050A50A0)
800809f4:	e0bfff17 	ldw	r2,-4(fp)
800809f8:	10c00037 	ldwio	r3,0(r2)
800809fc:	008142b4 	movhi	r2,1290
80080a00:	10942804 	addi	r2,r2,20640
80080a04:	18800226 	beq	r3,r2,80080a10 <MemTest8_16BitAccess+0x164>
    {
      ret_code = memory_base;
80080a08:	e0bfff17 	ldw	r2,-4(fp)
80080a0c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as two half-words */
  if (!ret_code)
80080a10:	e0bffe17 	ldw	r2,-8(fp)
80080a14:	10000d1e 	bne	r2,zero,80080a4c <MemTest8_16BitAccess+0x1a0>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
80080a18:	e0bfff17 	ldw	r2,-4(fp)
80080a1c:	10800084 	addi	r2,r2,2
80080a20:	1080002b 	ldhuio	r2,0(r2)
80080a24:	10bfffcc 	andi	r2,r2,65535
80080a28:	10814298 	cmpnei	r2,r2,1290
80080a2c:	1000051e 	bne	r2,zero,80080a44 <MemTest8_16BitAccess+0x198>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
80080a30:	e0bfff17 	ldw	r2,-4(fp)
80080a34:	1080002b 	ldhuio	r2,0(r2)
80080a38:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
80080a3c:	10942820 	cmpeqi	r2,r2,20640
80080a40:	1000021e 	bne	r2,zero,80080a4c <MemTest8_16BitAccess+0x1a0>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
    {
      ret_code = memory_base;
80080a44:	e0bfff17 	ldw	r2,-4(fp)
80080a48:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
80080a4c:	e0bffe17 	ldw	r2,-8(fp)
80080a50:	1000191e 	bne	r2,zero,80080ab8 <MemTest8_16BitAccess+0x20c>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
80080a54:	e0bfff17 	ldw	r2,-4(fp)
80080a58:	108000c4 	addi	r2,r2,3
80080a5c:	10800023 	ldbuio	r2,0(r2)
80080a60:	10803fcc 	andi	r2,r2,255
80080a64:	10800158 	cmpnei	r2,r2,5
80080a68:	1000111e 	bne	r2,zero,80080ab0 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
80080a6c:	e0bfff17 	ldw	r2,-4(fp)
80080a70:	10800084 	addi	r2,r2,2
80080a74:	10800023 	ldbuio	r2,0(r2)
80080a78:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
80080a7c:	10800298 	cmpnei	r2,r2,10
80080a80:	10000b1e 	bne	r2,zero,80080ab0 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
80080a84:	e0bfff17 	ldw	r2,-4(fp)
80080a88:	10800044 	addi	r2,r2,1
80080a8c:	10800023 	ldbuio	r2,0(r2)
80080a90:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
80080a94:	10801418 	cmpnei	r2,r2,80
80080a98:	1000051e 	bne	r2,zero,80080ab0 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
80080a9c:	e0bfff17 	ldw	r2,-4(fp)
80080aa0:	10800023 	ldbuio	r2,0(r2)
80080aa4:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
80080aa8:	10802820 	cmpeqi	r2,r2,160
80080aac:	1000021e 	bne	r2,zero,80080ab8 <MemTest8_16BitAccess+0x20c>
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
    {
      ret_code = memory_base;
80080ab0:	e0bfff17 	ldw	r2,-4(fp)
80080ab4:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return(ret_code);
80080ab8:	e0bffe17 	ldw	r2,-8(fp)
}
80080abc:	e037883a 	mov	sp,fp
80080ac0:	df000017 	ldw	fp,0(sp)
80080ac4:	dec00104 	addi	sp,sp,4
80080ac8:	f800283a 	ret

80080acc <MemTestDevice>:
*  Purpose: Tests that every bit in the memory device within the 
*           specified address range can store both a '1' and a '0'.
*
******************************************************************/
static int MemTestDevice(unsigned int memory_base, unsigned int nBytes)
{
80080acc:	defff804 	addi	sp,sp,-32
80080ad0:	dfc00715 	stw	ra,28(sp)
80080ad4:	df000615 	stw	fp,24(sp)
80080ad8:	df000604 	addi	fp,sp,24
80080adc:	e13ffe15 	stw	r4,-8(fp)
80080ae0:	e17fff15 	stw	r5,-4(fp)
  unsigned int offset;
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;
80080ae4:	e03ffc15 	stw	zero,-16(fp)

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080ae8:	00800044 	movi	r2,1
80080aec:	e0bffb15 	stw	r2,-20(fp)
80080af0:	e03ffa15 	stw	zero,-24(fp)
80080af4:	00000c06 	br	80080b28 <MemTestDevice+0x5c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
80080af8:	e0fffa17 	ldw	r3,-24(fp)
80080afc:	e0bffe17 	ldw	r2,-8(fp)
80080b00:	1885883a 	add	r2,r3,r2
80080b04:	1007883a 	mov	r3,r2
80080b08:	e0bffb17 	ldw	r2,-20(fp)
80080b0c:	18800035 	stwio	r2,0(r3)
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080b10:	e0bffb17 	ldw	r2,-20(fp)
80080b14:	10800044 	addi	r2,r2,1
80080b18:	e0bffb15 	stw	r2,-20(fp)
80080b1c:	e0bffa17 	ldw	r2,-24(fp)
80080b20:	10800104 	addi	r2,r2,4
80080b24:	e0bffa15 	stw	r2,-24(fp)
80080b28:	e0fffa17 	ldw	r3,-24(fp)
80080b2c:	e0bfff17 	ldw	r2,-4(fp)
80080b30:	18bff136 	bltu	r3,r2,80080af8 <MemTestDevice+0x2c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  printf(" .");
80080b34:	012002b4 	movhi	r4,32778
80080b38:	21365d04 	addi	r4,r4,-9868
80080b3c:	0082f1c0 	call	80082f1c <printf>

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080b40:	00800044 	movi	r2,1
80080b44:	e0bffb15 	stw	r2,-20(fp)
80080b48:	e03ffa15 	stw	zero,-24(fp)
80080b4c:	00001b06 	br	80080bbc <MemTestDevice+0xf0>
  {
    if (IORD_32DIRECT(memory_base, offset) != pattern)
80080b50:	e0fffa17 	ldw	r3,-24(fp)
80080b54:	e0bffe17 	ldw	r2,-8(fp)
80080b58:	1885883a 	add	r2,r3,r2
80080b5c:	10800037 	ldwio	r2,0(r2)
80080b60:	1007883a 	mov	r3,r2
80080b64:	e0bffb17 	ldw	r2,-20(fp)
80080b68:	18800526 	beq	r3,r2,80080b80 <MemTestDevice+0xb4>
    {
      ret_code = (memory_base + offset);
80080b6c:	e0fffe17 	ldw	r3,-8(fp)
80080b70:	e0bffa17 	ldw	r2,-24(fp)
80080b74:	1885883a 	add	r2,r3,r2
80080b78:	e0bffc15 	stw	r2,-16(fp)
      break;
80080b7c:	00001206 	br	80080bc8 <MemTestDevice+0xfc>
    }
    antipattern = ~pattern;
80080b80:	e0bffb17 	ldw	r2,-20(fp)
80080b84:	0084303a 	nor	r2,zero,r2
80080b88:	e0bffd15 	stw	r2,-12(fp)
    IOWR_32DIRECT(memory_base, offset, antipattern);
80080b8c:	e0fffa17 	ldw	r3,-24(fp)
80080b90:	e0bffe17 	ldw	r2,-8(fp)
80080b94:	1885883a 	add	r2,r3,r2
80080b98:	1007883a 	mov	r3,r2
80080b9c:	e0bffd17 	ldw	r2,-12(fp)
80080ba0:	18800035 	stwio	r2,0(r3)
  }

  printf(" .");

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080ba4:	e0bffb17 	ldw	r2,-20(fp)
80080ba8:	10800044 	addi	r2,r2,1
80080bac:	e0bffb15 	stw	r2,-20(fp)
80080bb0:	e0bffa17 	ldw	r2,-24(fp)
80080bb4:	10800104 	addi	r2,r2,4
80080bb8:	e0bffa15 	stw	r2,-24(fp)
80080bbc:	e0fffa17 	ldw	r3,-24(fp)
80080bc0:	e0bfff17 	ldw	r2,-4(fp)
80080bc4:	18bfe236 	bltu	r3,r2,80080b50 <MemTestDevice+0x84>
    }
    antipattern = ~pattern;
    IOWR_32DIRECT(memory_base, offset, antipattern);
  }

  printf(" .");
80080bc8:	012002b4 	movhi	r4,32778
80080bcc:	21365d04 	addi	r4,r4,-9868
80080bd0:	0082f1c0 	call	80082f1c <printf>

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080bd4:	00800044 	movi	r2,1
80080bd8:	e0bffb15 	stw	r2,-20(fp)
80080bdc:	e03ffa15 	stw	zero,-24(fp)
80080be0:	00001a06 	br	80080c4c <MemTestDevice+0x180>
  {
    antipattern = ~pattern;
80080be4:	e0bffb17 	ldw	r2,-20(fp)
80080be8:	0084303a 	nor	r2,zero,r2
80080bec:	e0bffd15 	stw	r2,-12(fp)
    if (IORD_32DIRECT(memory_base, offset) != antipattern)
80080bf0:	e0fffa17 	ldw	r3,-24(fp)
80080bf4:	e0bffe17 	ldw	r2,-8(fp)
80080bf8:	1885883a 	add	r2,r3,r2
80080bfc:	10800037 	ldwio	r2,0(r2)
80080c00:	1007883a 	mov	r3,r2
80080c04:	e0bffd17 	ldw	r2,-12(fp)
80080c08:	18800526 	beq	r3,r2,80080c20 <MemTestDevice+0x154>
    {
      ret_code = (memory_base + offset);
80080c0c:	e0fffe17 	ldw	r3,-8(fp)
80080c10:	e0bffa17 	ldw	r2,-24(fp)
80080c14:	1885883a 	add	r2,r3,r2
80080c18:	e0bffc15 	stw	r2,-16(fp)
      break;
80080c1c:	00000e06 	br	80080c58 <MemTestDevice+0x18c>
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
80080c20:	e0fffa17 	ldw	r3,-24(fp)
80080c24:	e0bffe17 	ldw	r2,-8(fp)
80080c28:	1885883a 	add	r2,r3,r2
80080c2c:	0007883a 	mov	r3,zero
80080c30:	10c00035 	stwio	r3,0(r2)
  }

  printf(" .");

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080c34:	e0bffb17 	ldw	r2,-20(fp)
80080c38:	10800044 	addi	r2,r2,1
80080c3c:	e0bffb15 	stw	r2,-20(fp)
80080c40:	e0bffa17 	ldw	r2,-24(fp)
80080c44:	10800104 	addi	r2,r2,4
80080c48:	e0bffa15 	stw	r2,-24(fp)
80080c4c:	e0fffa17 	ldw	r3,-24(fp)
80080c50:	e0bfff17 	ldw	r2,-4(fp)
80080c54:	18bfe336 	bltu	r3,r2,80080be4 <MemTestDevice+0x118>
      ret_code = (memory_base + offset);
      break;
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
  }
  return ret_code;
80080c58:	e0bffc17 	ldw	r2,-16(fp)
}
80080c5c:	e037883a 	mov	sp,fp
80080c60:	dfc00117 	ldw	ra,4(sp)
80080c64:	df000017 	ldw	fp,0(sp)
80080c68:	dec00204 	addi	sp,sp,8
80080c6c:	f800283a 	ret

80080c70 <TestRam>:
*             - MemTestDevice
*             - MemDMATest
*
******************************************************************/
static void TestRam(void)
{
80080c70:	defffa04 	addi	sp,sp,-24
80080c74:	dfc00515 	stw	ra,20(sp)
80080c78:	df000415 	stw	fp,16(sp)
80080c7c:	df000404 	addi	fp,sp,16
  
  int memory_base, memory_end, memory_size;
  int ret_code = 0x0;
80080c80:	e03ffc15 	stw	zero,-16(fp)

  /* Find out what range of memory we are testing */
  MemGetAddressRange(&memory_base, &memory_end);
80080c84:	e0ffff04 	addi	r3,fp,-4
80080c88:	e0bffe04 	addi	r2,fp,-8
80080c8c:	180b883a 	mov	r5,r3
80080c90:	1009883a 	mov	r4,r2
80080c94:	00805440 	call	80080544 <MemGetAddressRange>
  memory_size = (memory_end - memory_base);
80080c98:	e0ffff17 	ldw	r3,-4(fp)
80080c9c:	e0bffe17 	ldw	r2,-8(fp)
80080ca0:	1885c83a 	sub	r2,r3,r2
80080ca4:	e0bffd15 	stw	r2,-12(fp)

  printf("\n");
80080ca8:	01000284 	movi	r4,10
80080cac:	0082f600 	call	80082f60 <putchar>
  printf("Testing RAM from 0x%X to 0x%X\n", memory_base, (memory_base + memory_size));
80080cb0:	e13ffe17 	ldw	r4,-8(fp)
80080cb4:	e0fffe17 	ldw	r3,-8(fp)
80080cb8:	e0bffd17 	ldw	r2,-12(fp)
80080cbc:	1885883a 	add	r2,r3,r2
80080cc0:	100d883a 	mov	r6,r2
80080cc4:	200b883a 	mov	r5,r4
80080cc8:	012002b4 	movhi	r4,32778
80080ccc:	21365e04 	addi	r4,r4,-9864
80080cd0:	0082f1c0 	call	80082f1c <printf>

  /* Test Data Bus. */
  ret_code = MemTestDataBus(memory_base);
80080cd4:	e0bffe17 	ldw	r2,-8(fp)
80080cd8:	1009883a 	mov	r4,r2
80080cdc:	00806580 	call	80080658 <MemTestDataBus>
80080ce0:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code)
80080ce4:	e0bffc17 	ldw	r2,-16(fp)
80080ce8:	10000526 	beq	r2,zero,80080d00 <TestRam+0x90>
   printf(" -Data bus test failed at bit 0x%X", (int)ret_code);
80080cec:	e17ffc17 	ldw	r5,-16(fp)
80080cf0:	012002b4 	movhi	r4,32778
80080cf4:	21366604 	addi	r4,r4,-9832
80080cf8:	0082f1c0 	call	80082f1c <printf>
80080cfc:	00000306 	br	80080d0c <TestRam+0x9c>
  else
    printf(" -Data bus test passed\n");
80080d00:	012002b4 	movhi	r4,32778
80080d04:	21366f04 	addi	r4,r4,-9796
80080d08:	00830380 	call	80083038 <puts>

  /* Test Address Bus. */
  if (!ret_code)
80080d0c:	e0bffc17 	ldw	r2,-16(fp)
80080d10:	1000111e 	bne	r2,zero,80080d58 <TestRam+0xe8>
  {
    ret_code  = MemTestAddressBus(memory_base, memory_size);
80080d14:	e0bffe17 	ldw	r2,-8(fp)
80080d18:	1007883a 	mov	r3,r2
80080d1c:	e0bffd17 	ldw	r2,-12(fp)
80080d20:	100b883a 	mov	r5,r2
80080d24:	1809883a 	mov	r4,r3
80080d28:	00806cc0 	call	800806cc <MemTestAddressBus>
80080d2c:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
80080d30:	e0bffc17 	ldw	r2,-16(fp)
80080d34:	10000526 	beq	r2,zero,80080d4c <TestRam+0xdc>
      printf(" -Address bus test failed at address 0x%X", (int)ret_code);
80080d38:	e17ffc17 	ldw	r5,-16(fp)
80080d3c:	012002b4 	movhi	r4,32778
80080d40:	21367504 	addi	r4,r4,-9772
80080d44:	0082f1c0 	call	80082f1c <printf>
80080d48:	00000306 	br	80080d58 <TestRam+0xe8>
    else
      printf(" -Address bus test passed\n");
80080d4c:	012002b4 	movhi	r4,32778
80080d50:	21368004 	addi	r4,r4,-9728
80080d54:	00830380 	call	80083038 <puts>
  }

  /* Test byte and half-word access. */
  if (!ret_code)
80080d58:	e0bffc17 	ldw	r2,-16(fp)
80080d5c:	10000e1e 	bne	r2,zero,80080d98 <TestRam+0x128>
  {
    ret_code = MemTest8_16BitAccess(memory_base);
80080d60:	e0bffe17 	ldw	r2,-8(fp)
80080d64:	1009883a 	mov	r4,r2
80080d68:	00808ac0 	call	800808ac <MemTest8_16BitAccess>
80080d6c:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
80080d70:	e0bffc17 	ldw	r2,-16(fp)
80080d74:	10000526 	beq	r2,zero,80080d8c <TestRam+0x11c>
      printf(" -Byte and half-word access test failed at address 0x%X", (int)ret_code);
80080d78:	e17ffc17 	ldw	r5,-16(fp)
80080d7c:	012002b4 	movhi	r4,32778
80080d80:	21368704 	addi	r4,r4,-9700
80080d84:	0082f1c0 	call	80082f1c <printf>
80080d88:	00000306 	br	80080d98 <TestRam+0x128>
    else
      printf(" -Byte and half-word access test passed\n");
80080d8c:	012002b4 	movhi	r4,32778
80080d90:	21369504 	addi	r4,r4,-9644
80080d94:	00830380 	call	80083038 <puts>
  }

  /* Test that each bit in the device can store both 1 and 0. */
  if (!ret_code)
80080d98:	e0bffc17 	ldw	r2,-16(fp)
80080d9c:	1000141e 	bne	r2,zero,80080df0 <TestRam+0x180>
  {
    printf(" -Testing each bit in memory device.");
80080da0:	012002b4 	movhi	r4,32778
80080da4:	21369f04 	addi	r4,r4,-9604
80080da8:	0082f1c0 	call	80082f1c <printf>
    ret_code = MemTestDevice(memory_base, memory_size);
80080dac:	e0bffe17 	ldw	r2,-8(fp)
80080db0:	1007883a 	mov	r3,r2
80080db4:	e0bffd17 	ldw	r2,-12(fp)
80080db8:	100b883a 	mov	r5,r2
80080dbc:	1809883a 	mov	r4,r3
80080dc0:	0080acc0 	call	80080acc <MemTestDevice>
80080dc4:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
80080dc8:	e0bffc17 	ldw	r2,-16(fp)
80080dcc:	10000526 	beq	r2,zero,80080de4 <TestRam+0x174>
      printf("  failed at address 0x%X", (int)ret_code);
80080dd0:	e17ffc17 	ldw	r5,-16(fp)
80080dd4:	012002b4 	movhi	r4,32778
80080dd8:	2136a904 	addi	r4,r4,-9564
80080ddc:	0082f1c0 	call	80082f1c <printf>
80080de0:	00000306 	br	80080df0 <TestRam+0x180>
    else
      printf("  passed\n");
80080de4:	012002b4 	movhi	r4,32778
80080de8:	2136b004 	addi	r4,r4,-9536
80080dec:	00830380 	call	80083038 <puts>
    else
      printf("  passed\n");
  }
#endif /* DMA_NAME */
      
  if (!ret_code)
80080df0:	e0bffc17 	ldw	r2,-16(fp)
80080df4:	1000051e 	bne	r2,zero,80080e0c <TestRam+0x19c>
    printf("Memory at 0x%X Okay\n", memory_base);
80080df8:	e0bffe17 	ldw	r2,-8(fp)
80080dfc:	100b883a 	mov	r5,r2
80080e00:	012002b4 	movhi	r4,32778
80080e04:	2136b304 	addi	r4,r4,-9524
80080e08:	0082f1c0 	call	80082f1c <printf>
}
80080e0c:	0001883a 	nop
80080e10:	e037883a 	mov	sp,fp
80080e14:	dfc00117 	ldw	ra,4(sp)
80080e18:	df000017 	ldw	fp,0(sp)
80080e1c:	dec00204 	addi	sp,sp,8
80080e20:	f800283a 	ret

80080e24 <FlashCheckIfBlockErased>:
*  Purpose: Checks the specified flash block to see if it is 
*           completely erased (all 0xFFFFFFFF).
*
******************************************************************/
static int FlashCheckIfBlockErased(alt_flash_fd* fd, int block, flash_region* regions)
{
80080e24:	defff204 	addi	sp,sp,-56
80080e28:	dfc00d15 	stw	ra,52(sp)
80080e2c:	df000c15 	stw	fp,48(sp)
80080e30:	df000c04 	addi	fp,sp,48
80080e34:	e13ffd15 	stw	r4,-12(fp)
80080e38:	e17ffe15 	stw	r5,-8(fp)
80080e3c:	e1bfff15 	stw	r6,-4(fp)
  int i, j;
  int ret_code = 0x0;
80080e40:	e03ff615 	stw	zero,-40(fp)
  char block_is_erased = 0x1;
80080e44:	00800044 	movi	r2,1
80080e48:	e0bff705 	stb	r2,-36(fp)
  alt_u8 *data_read;
 
  /* Get a buffer */
  data_read = malloc(64);
80080e4c:	01001004 	movi	r4,64
80080e50:	00824f40 	call	800824f4 <malloc>
80080e54:	e0bff815 	stw	r2,-32(fp)
  
  /* Initialize the flag */
  block_is_erased = 0x1;
80080e58:	00800044 	movi	r2,1
80080e5c:	e0bff705 	stb	r2,-36(fp)

  for(i = 0; i < regions->block_size; i += 64)
80080e60:	e03ff415 	stw	zero,-48(fp)
80080e64:	00002b06 	br	80080f14 <FlashCheckIfBlockErased+0xf0>
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);
80080e68:	e0bfff17 	ldw	r2,-4(fp)
80080e6c:	10c00317 	ldw	r3,12(r2)
80080e70:	e0bffe17 	ldw	r2,-8(fp)
80080e74:	1887383a 	mul	r3,r3,r2
80080e78:	e0bff417 	ldw	r2,-48(fp)
80080e7c:	1885883a 	add	r2,r3,r2
80080e80:	e0fffd17 	ldw	r3,-12(fp)
80080e84:	e0fff915 	stw	r3,-28(fp)
80080e88:	e0bffa15 	stw	r2,-24(fp)
80080e8c:	e0bff817 	ldw	r2,-32(fp)
80080e90:	e0bffb15 	stw	r2,-20(fp)
80080e94:	00801004 	movi	r2,64
80080e98:	e0bffc15 	stw	r2,-16(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
80080e9c:	e0bff917 	ldw	r2,-28(fp)
80080ea0:	10800617 	ldw	r2,24(r2)
80080ea4:	e1fffc17 	ldw	r7,-16(fp)
80080ea8:	e1bffb17 	ldw	r6,-20(fp)
80080eac:	e17ffa17 	ldw	r5,-24(fp)
80080eb0:	e13ff917 	ldw	r4,-28(fp)
80080eb4:	103ee83a 	callr	r2
80080eb8:	e0bff615 	stw	r2,-40(fp)

    for(j=0; j < 64; j+=1)
80080ebc:	e03ff515 	stw	zero,-44(fp)
80080ec0:	00000c06 	br	80080ef4 <FlashCheckIfBlockErased+0xd0>
    {
      if(*(data_read+j) != 0xFF)
80080ec4:	e0bff517 	ldw	r2,-44(fp)
80080ec8:	e0fff817 	ldw	r3,-32(fp)
80080ecc:	1885883a 	add	r2,r3,r2
80080ed0:	10800003 	ldbu	r2,0(r2)
80080ed4:	10803fcc 	andi	r2,r2,255
80080ed8:	10803fe0 	cmpeqi	r2,r2,255
80080edc:	1000021e 	bne	r2,zero,80080ee8 <FlashCheckIfBlockErased+0xc4>
      {
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
80080ee0:	e03ff705 	stb	zero,-36(fp)
        break;
80080ee4:	00000606 	br	80080f00 <FlashCheckIfBlockErased+0xdc>

  for(i = 0; i < regions->block_size; i += 64)
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);

    for(j=0; j < 64; j+=1)
80080ee8:	e0bff517 	ldw	r2,-44(fp)
80080eec:	10800044 	addi	r2,r2,1
80080ef0:	e0bff515 	stw	r2,-44(fp)
80080ef4:	e0bff517 	ldw	r2,-44(fp)
80080ef8:	10801010 	cmplti	r2,r2,64
80080efc:	103ff11e 	bne	r2,zero,80080ec4 <FlashCheckIfBlockErased+0xa0>
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
80080f00:	e0bff707 	ldb	r2,-36(fp)
80080f04:	10000826 	beq	r2,zero,80080f28 <FlashCheckIfBlockErased+0x104>
  data_read = malloc(64);
  
  /* Initialize the flag */
  block_is_erased = 0x1;

  for(i = 0; i < regions->block_size; i += 64)
80080f08:	e0bff417 	ldw	r2,-48(fp)
80080f0c:	10801004 	addi	r2,r2,64
80080f10:	e0bff415 	stw	r2,-48(fp)
80080f14:	e0bfff17 	ldw	r2,-4(fp)
80080f18:	10800317 	ldw	r2,12(r2)
80080f1c:	e0fff417 	ldw	r3,-48(fp)
80080f20:	18bfd116 	blt	r3,r2,80080e68 <FlashCheckIfBlockErased+0x44>
80080f24:	00000106 	br	80080f2c <FlashCheckIfBlockErased+0x108>
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
      break;
80080f28:	0001883a 	nop
  }
  /* Block is erased if we indexed through all block locations */
  if(i == regions->block_size)
80080f2c:	e0bfff17 	ldw	r2,-4(fp)
80080f30:	10c00317 	ldw	r3,12(r2)
80080f34:	e0bff417 	ldw	r2,-48(fp)
80080f38:	1880031e 	bne	r3,r2,80080f48 <FlashCheckIfBlockErased+0x124>
    ret_code = 1;
80080f3c:	00800044 	movi	r2,1
80080f40:	e0bff615 	stw	r2,-40(fp)
80080f44:	00000106 	br	80080f4c <FlashCheckIfBlockErased+0x128>
  else
    ret_code = 0;
80080f48:	e03ff615 	stw	zero,-40(fp)
  
  free(data_read);
80080f4c:	e13ff817 	ldw	r4,-32(fp)
80080f50:	00825080 	call	80082508 <free>
 
  return ret_code;
80080f54:	e0bff617 	ldw	r2,-40(fp)
}
80080f58:	e037883a 	mov	sp,fp
80080f5c:	dfc00117 	ldw	ra,4(sp)
80080f60:	df000017 	ldw	fp,0(sp)
80080f64:	dec00204 	addi	sp,sp,8
80080f68:	f800283a 	ret

80080f6c <FlashTestBlockWrite>:
*  Purpose: Tests that the function alt_write_flash_block is
*           is working properly.
*
******************************************************************/
static int FlashTestBlockWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
80080f6c:	deffdc04 	addi	sp,sp,-144
80080f70:	dfc02315 	stw	ra,140(sp)
80080f74:	df002215 	stw	fp,136(sp)
80080f78:	df002204 	addi	fp,sp,136
80080f7c:	e13ffc15 	stw	r4,-16(fp)
80080f80:	e17ffd15 	stw	r5,-12(fp)
80080f84:	e1bffe15 	stw	r6,-8(fp)
80080f88:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
80080f8c:	e03fe015 	stw	zero,-128(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;


  /* Get a couple buffers for the test */
  data_written = malloc(100);
80080f90:	01001904 	movi	r4,100
80080f94:	00824f40 	call	800824f4 <malloc>
80080f98:	e0bfe115 	stw	r2,-124(fp)
  data_read = malloc(100);
80080f9c:	01001904 	movi	r4,100
80080fa0:	00824f40 	call	800824f4 <malloc>
80080fa4:	e0bfe215 	stw	r2,-120(fp)

  test_offset = (regions->offset + (block * regions->block_size));
80080fa8:	e0bfff17 	ldw	r2,-4(fp)
80080fac:	10c00017 	ldw	r3,0(r2)
80080fb0:	e0bfff17 	ldw	r2,-4(fp)
80080fb4:	11000317 	ldw	r4,12(r2)
80080fb8:	e0bffc17 	ldw	r2,-16(fp)
80080fbc:	2085383a 	mul	r2,r4,r2
80080fc0:	1885883a 	add	r2,r3,r2
80080fc4:	e0bfe315 	stw	r2,-116(fp)

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
80080fc8:	e03fdf15 	stw	zero,-132(fp)
80080fcc:	00000c06 	br	80081000 <FlashTestBlockWrite+0x94>
    *(data_written + i) = (i * 3);
80080fd0:	e0bfdf17 	ldw	r2,-132(fp)
80080fd4:	e0ffe117 	ldw	r3,-124(fp)
80080fd8:	1887883a 	add	r3,r3,r2
80080fdc:	e0bfdf17 	ldw	r2,-132(fp)
80080fe0:	1009883a 	mov	r4,r2
80080fe4:	2005883a 	mov	r2,r4
80080fe8:	1085883a 	add	r2,r2,r2
80080fec:	1105883a 	add	r2,r2,r4
80080ff0:	18800005 	stb	r2,0(r3)
  data_read = malloc(100);

  test_offset = (regions->offset + (block * regions->block_size));

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
80080ff4:	e0bfdf17 	ldw	r2,-132(fp)
80080ff8:	10800044 	addi	r2,r2,1
80080ffc:	e0bfdf15 	stw	r2,-132(fp)
80081000:	e0bfdf17 	ldw	r2,-132(fp)
80081004:	10801910 	cmplti	r2,r2,100
80081008:	103ff11e 	bne	r2,zero,80080fd0 <FlashTestBlockWrite+0x64>
    *(data_written + i) = (i * 3);

  /* Write the buffer to flash starting 0x40 bytes from the beginning of the block. */
  printf(" -Testing \"alt_write_flash_block\".");
8008100c:	012002b4 	movhi	r4,32778
80081010:	2136b904 	addi	r4,r4,-9500
80081014:	0082f1c0 	call	80082f1c <printf>
  ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x40), data_written, 100);
80081018:	e0bfe317 	ldw	r2,-116(fp)
8008101c:	10801004 	addi	r2,r2,64
80081020:	e0fffe17 	ldw	r3,-8(fp)
80081024:	e0ffe815 	stw	r3,-96(fp)
80081028:	e0ffe317 	ldw	r3,-116(fp)
8008102c:	e0ffe915 	stw	r3,-92(fp)
80081030:	e0bfea15 	stw	r2,-88(fp)
80081034:	e0bfe117 	ldw	r2,-124(fp)
80081038:	e0bfeb15 	stw	r2,-84(fp)
8008103c:	00801904 	movi	r2,100
80081040:	e0bfec15 	stw	r2,-80(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
80081044:	e0bfe817 	ldw	r2,-96(fp)
80081048:	10800917 	ldw	r2,36(r2)
8008104c:	e0ffec17 	ldw	r3,-80(fp)
80081050:	d8c00015 	stw	r3,0(sp)
80081054:	e1ffeb17 	ldw	r7,-84(fp)
80081058:	e1bfea17 	ldw	r6,-88(fp)
8008105c:	e17fe917 	ldw	r5,-92(fp)
80081060:	e13fe817 	ldw	r4,-96(fp)
80081064:	103ee83a 	callr	r2
80081068:	e0bfed15 	stw	r2,-76(fp)

/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
*/
  return ret_code;
8008106c:	e0bfed17 	ldw	r2,-76(fp)
80081070:	e0bfe015 	stw	r2,-128(fp)
  if (!ret_code)
80081074:	e0bfe017 	ldw	r2,-128(fp)
80081078:	1000241e 	bne	r2,zero,8008110c <FlashTestBlockWrite+0x1a0>
  {
    /* Now read it back into the read_buffer */
    ret_code = alt_read_flash(fd, (test_offset + 0x40), data_read, 100);
8008107c:	e0bfe317 	ldw	r2,-116(fp)
80081080:	10801004 	addi	r2,r2,64
80081084:	e0fffe17 	ldw	r3,-8(fp)
80081088:	e0ffe415 	stw	r3,-112(fp)
8008108c:	e0bfee15 	stw	r2,-72(fp)
80081090:	e0bfe217 	ldw	r2,-120(fp)
80081094:	e0bfef15 	stw	r2,-68(fp)
80081098:	00801904 	movi	r2,100
8008109c:	e0bff015 	stw	r2,-64(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
800810a0:	e0bfe417 	ldw	r2,-112(fp)
800810a4:	10800617 	ldw	r2,24(r2)
800810a8:	e1fff017 	ldw	r7,-64(fp)
800810ac:	e1bfef17 	ldw	r6,-68(fp)
800810b0:	e17fee17 	ldw	r5,-72(fp)
800810b4:	e13fe417 	ldw	r4,-112(fp)
800810b8:	103ee83a 	callr	r2
800810bc:	e0bfe015 	stw	r2,-128(fp)
    if(!ret_code)
800810c0:	e0bfe017 	ldw	r2,-128(fp)
800810c4:	1000111e 	bne	r2,zero,8008110c <FlashTestBlockWrite+0x1a0>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, 100))
800810c8:	01801904 	movi	r6,100
800810cc:	e17fe217 	ldw	r5,-120(fp)
800810d0:	e13fe117 	ldw	r4,-124(fp)
800810d4:	0082d280 	call	80082d28 <memcmp>
800810d8:	10000926 	beq	r2,zero,80081100 <FlashTestBlockWrite+0x194>
      {
        printf("  FAILED.\n");
800810dc:	012002b4 	movhi	r4,32778
800810e0:	2136c204 	addi	r4,r4,-9464
800810e4:	00830380 	call	80083038 <puts>
        (*error)++;
800810e8:	e0bffd17 	ldw	r2,-12(fp)
800810ec:	10800017 	ldw	r2,0(r2)
800810f0:	10c00044 	addi	r3,r2,1
800810f4:	e0bffd17 	ldw	r2,-12(fp)
800810f8:	10c00015 	stw	r3,0(r2)
800810fc:	00000306 	br	8008110c <FlashTestBlockWrite+0x1a0>
      }
      else
        printf("  passed.\n");
80081100:	012002b4 	movhi	r4,32778
80081104:	2136c504 	addi	r4,r4,-9452
80081108:	00830380 	call	80083038 <puts>
    }
  }

  /* Test unaligned writes */
  if(!ret_code)
8008110c:	e0bfe017 	ldw	r2,-128(fp)
80081110:	10004f1e 	bne	r2,zero,80081250 <FlashTestBlockWrite+0x2e4>
  {
    /* Erase the block */
    ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
80081114:	e0bfff17 	ldw	r2,-4(fp)
80081118:	10800317 	ldw	r2,12(r2)
8008111c:	e0fffe17 	ldw	r3,-8(fp)
80081120:	e0ffe715 	stw	r3,-100(fp)
80081124:	e0ffe317 	ldw	r3,-116(fp)
80081128:	e0fff615 	stw	r3,-40(fp)
8008112c:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
80081130:	e0bfe717 	ldw	r2,-100(fp)
80081134:	10800817 	ldw	r2,32(r2)
80081138:	e17ff617 	ldw	r5,-40(fp)
8008113c:	e13fe717 	ldw	r4,-100(fp)
80081140:	103ee83a 	callr	r2
80081144:	e0bff815 	stw	r2,-32(fp)
  
/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
*/
  return ret_code;
80081148:	e0bff817 	ldw	r2,-32(fp)
8008114c:	e0bfe015 	stw	r2,-128(fp)
  
    /* Write the buffer to flash on an unaligned address. */
    printf(" -Testing unaligned writes.");
80081150:	012002b4 	movhi	r4,32778
80081154:	2136c804 	addi	r4,r4,-9440
80081158:	0082f1c0 	call	80082f1c <printf>
    ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x43), data_written, 100);
8008115c:	e0bfe317 	ldw	r2,-116(fp)
80081160:	108010c4 	addi	r2,r2,67
80081164:	e0fffe17 	ldw	r3,-8(fp)
80081168:	e0ffe515 	stw	r3,-108(fp)
8008116c:	e0ffe317 	ldw	r3,-116(fp)
80081170:	e0fff115 	stw	r3,-60(fp)
80081174:	e0bff215 	stw	r2,-56(fp)
80081178:	e0bfe117 	ldw	r2,-124(fp)
8008117c:	e0bff315 	stw	r2,-52(fp)
80081180:	00801904 	movi	r2,100
80081184:	e0bff415 	stw	r2,-48(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
80081188:	e0bfe517 	ldw	r2,-108(fp)
8008118c:	10800917 	ldw	r2,36(r2)
80081190:	e0fff417 	ldw	r3,-48(fp)
80081194:	d8c00015 	stw	r3,0(sp)
80081198:	e1fff317 	ldw	r7,-52(fp)
8008119c:	e1bff217 	ldw	r6,-56(fp)
800811a0:	e17ff117 	ldw	r5,-60(fp)
800811a4:	e13fe517 	ldw	r4,-108(fp)
800811a8:	103ee83a 	callr	r2
800811ac:	e0bff515 	stw	r2,-44(fp)

/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
*/
  return ret_code;
800811b0:	e0bff517 	ldw	r2,-44(fp)
800811b4:	e0bfe015 	stw	r2,-128(fp)
    if (!ret_code)
800811b8:	e0bfe017 	ldw	r2,-128(fp)
800811bc:	1000241e 	bne	r2,zero,80081250 <FlashTestBlockWrite+0x2e4>
    {
      /* Now read it back into the read_buffer */
      ret_code = alt_read_flash(fd, (test_offset + 0x43), data_read, 100);
800811c0:	e0bfe317 	ldw	r2,-116(fp)
800811c4:	108010c4 	addi	r2,r2,67
800811c8:	e0fffe17 	ldw	r3,-8(fp)
800811cc:	e0ffe615 	stw	r3,-104(fp)
800811d0:	e0bff915 	stw	r2,-28(fp)
800811d4:	e0bfe217 	ldw	r2,-120(fp)
800811d8:	e0bffa15 	stw	r2,-24(fp)
800811dc:	00801904 	movi	r2,100
800811e0:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
800811e4:	e0bfe617 	ldw	r2,-104(fp)
800811e8:	10800617 	ldw	r2,24(r2)
800811ec:	e1fffb17 	ldw	r7,-20(fp)
800811f0:	e1bffa17 	ldw	r6,-24(fp)
800811f4:	e17ff917 	ldw	r5,-28(fp)
800811f8:	e13fe617 	ldw	r4,-104(fp)
800811fc:	103ee83a 	callr	r2
80081200:	e0bfe015 	stw	r2,-128(fp)
      if(!ret_code)
80081204:	e0bfe017 	ldw	r2,-128(fp)
80081208:	1000111e 	bne	r2,zero,80081250 <FlashTestBlockWrite+0x2e4>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, 100))
8008120c:	01801904 	movi	r6,100
80081210:	e17fe217 	ldw	r5,-120(fp)
80081214:	e13fe117 	ldw	r4,-124(fp)
80081218:	0082d280 	call	80082d28 <memcmp>
8008121c:	10000926 	beq	r2,zero,80081244 <FlashTestBlockWrite+0x2d8>
        {
          printf("  FAILED.\n");
80081220:	012002b4 	movhi	r4,32778
80081224:	2136c204 	addi	r4,r4,-9464
80081228:	00830380 	call	80083038 <puts>
          (*error)++;
8008122c:	e0bffd17 	ldw	r2,-12(fp)
80081230:	10800017 	ldw	r2,0(r2)
80081234:	10c00044 	addi	r3,r2,1
80081238:	e0bffd17 	ldw	r2,-12(fp)
8008123c:	10c00015 	stw	r3,0(r2)
80081240:	00000306 	br	80081250 <FlashTestBlockWrite+0x2e4>
        }
        else
          printf("  passed.\n");
80081244:	012002b4 	movhi	r4,32778
80081248:	2136c504 	addi	r4,r4,-9452
8008124c:	00830380 	call	80083038 <puts>
      }
    }
  }

  /* Free up the buffers we allocated. */
  free(data_written);
80081250:	e13fe117 	ldw	r4,-124(fp)
80081254:	00825080 	call	80082508 <free>
  free(data_read);
80081258:	e13fe217 	ldw	r4,-120(fp)
8008125c:	00825080 	call	80082508 <free>
  
  return ret_code;
80081260:	e0bfe017 	ldw	r2,-128(fp)
}
80081264:	e037883a 	mov	sp,fp
80081268:	dfc00117 	ldw	ra,4(sp)
8008126c:	df000017 	ldw	fp,0(sp)
80081270:	dec00204 	addi	sp,sp,8
80081274:	f800283a 	ret

80081278 <FlashTestReadWrite>:
*           that every bit in the specified block can store both
*           a '1' and '0'.
*
******************************************************************/
static int FlashTestReadWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
80081278:	deffe504 	addi	sp,sp,-108
8008127c:	dfc01a15 	stw	ra,104(sp)
80081280:	df001915 	stw	fp,100(sp)
80081284:	df001904 	addi	fp,sp,100
80081288:	e13ffc15 	stw	r4,-16(fp)
8008128c:	e17ffd15 	stw	r5,-12(fp)
80081290:	e1bffe15 	stw	r6,-8(fp)
80081294:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
80081298:	e03fe815 	stw	zero,-96(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;
 

  /* Get a couple buffers for the tests */
  data_written = malloc(regions->block_size);
8008129c:	e0bfff17 	ldw	r2,-4(fp)
800812a0:	10800317 	ldw	r2,12(r2)
800812a4:	1009883a 	mov	r4,r2
800812a8:	00824f40 	call	800824f4 <malloc>
800812ac:	e0bfe915 	stw	r2,-92(fp)
  data_read = malloc(regions->block_size);
800812b0:	e0bfff17 	ldw	r2,-4(fp)
800812b4:	10800317 	ldw	r2,12(r2)
800812b8:	1009883a 	mov	r4,r2
800812bc:	00824f40 	call	800824f4 <malloc>
800812c0:	e0bfea15 	stw	r2,-88(fp)
 
  /* Calculate the offset at which the block lives */
  test_offset = (regions->offset + (block * regions->block_size));
800812c4:	e0bfff17 	ldw	r2,-4(fp)
800812c8:	10c00017 	ldw	r3,0(r2)
800812cc:	e0bfff17 	ldw	r2,-4(fp)
800812d0:	11000317 	ldw	r4,12(r2)
800812d4:	e0bffc17 	ldw	r2,-16(fp)
800812d8:	2085383a 	mul	r2,r4,r2
800812dc:	1885883a 	add	r2,r3,r2
800812e0:	e0bfeb15 	stw	r2,-84(fp)

  printf("\n -Starting Flash Test.\n");
800812e4:	012002b4 	movhi	r4,32778
800812e8:	2136cf04 	addi	r4,r4,-9412
800812ec:	00830380 	call	80083038 <puts>
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
800812f0:	012002b4 	movhi	r4,32778
800812f4:	2136d504 	addi	r4,r4,-9388
800812f8:	00830380 	call	80083038 <puts>
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
800812fc:	e03fe715 	stw	zero,-100(fp)
80081300:	00000806 	br	80081324 <FlashTestReadWrite+0xac>
    *(data_written + i) = i;
80081304:	e0bfe717 	ldw	r2,-100(fp)
80081308:	e0ffe917 	ldw	r3,-92(fp)
8008130c:	1885883a 	add	r2,r3,r2
80081310:	e0ffe717 	ldw	r3,-100(fp)
80081314:	10c00005 	stb	r3,0(r2)

  printf("\n -Starting Flash Test.\n");
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
80081318:	e0bfe717 	ldw	r2,-100(fp)
8008131c:	10800044 	addi	r2,r2,1
80081320:	e0bfe715 	stw	r2,-100(fp)
80081324:	e0bfff17 	ldw	r2,-4(fp)
80081328:	10800317 	ldw	r2,12(r2)
8008132c:	e0ffe717 	ldw	r3,-100(fp)
80081330:	18bff416 	blt	r3,r2,80081304 <FlashTestReadWrite+0x8c>
    *(data_written + i) = i;

  /* Write the buffer to flash block */
  ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
80081334:	e0bfff17 	ldw	r2,-4(fp)
80081338:	10800317 	ldw	r2,12(r2)
8008133c:	e0fffe17 	ldw	r3,-8(fp)
80081340:	e0ffef15 	stw	r3,-68(fp)
80081344:	e0ffeb17 	ldw	r3,-84(fp)
80081348:	e0fff015 	stw	r3,-64(fp)
8008134c:	e0ffe917 	ldw	r3,-92(fp)
80081350:	e0fff115 	stw	r3,-60(fp)
80081354:	e0bff215 	stw	r2,-56(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
80081358:	e0bfef17 	ldw	r2,-68(fp)
8008135c:	10800517 	ldw	r2,20(r2)
80081360:	e1fff217 	ldw	r7,-56(fp)
80081364:	e1bff117 	ldw	r6,-60(fp)
80081368:	e17ff017 	ldw	r5,-64(fp)
8008136c:	e13fef17 	ldw	r4,-68(fp)
80081370:	103ee83a 	callr	r2
80081374:	e0bfe815 	stw	r2,-96(fp)
     
  if (!ret_code)
80081378:	e0bfe817 	ldw	r2,-96(fp)
8008137c:	1000731e 	bne	r2,zero,8008154c <FlashTestReadWrite+0x2d4>
  {
    /* Read flash block into read buffer */
    ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
80081380:	e0bfff17 	ldw	r2,-4(fp)
80081384:	10800317 	ldw	r2,12(r2)
80081388:	e0fffe17 	ldw	r3,-8(fp)
8008138c:	e0ffec15 	stw	r3,-80(fp)
80081390:	e0ffeb17 	ldw	r3,-84(fp)
80081394:	e0fff315 	stw	r3,-52(fp)
80081398:	e0ffea17 	ldw	r3,-88(fp)
8008139c:	e0fff415 	stw	r3,-48(fp)
800813a0:	e0bff515 	stw	r2,-44(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
800813a4:	e0bfec17 	ldw	r2,-80(fp)
800813a8:	10800617 	ldw	r2,24(r2)
800813ac:	e1fff517 	ldw	r7,-44(fp)
800813b0:	e1bff417 	ldw	r6,-48(fp)
800813b4:	e17ff317 	ldw	r5,-52(fp)
800813b8:	e13fec17 	ldw	r4,-80(fp)
800813bc:	103ee83a 	callr	r2
800813c0:	e0bfe815 	stw	r2,-96(fp)
    if(!ret_code)
800813c4:	e0bfe817 	ldw	r2,-96(fp)
800813c8:	1000131e 	bne	r2,zero,80081418 <FlashTestReadWrite+0x1a0>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, regions->block_size))
800813cc:	e0bfff17 	ldw	r2,-4(fp)
800813d0:	10800317 	ldw	r2,12(r2)
800813d4:	100d883a 	mov	r6,r2
800813d8:	e17fea17 	ldw	r5,-88(fp)
800813dc:	e13fe917 	ldw	r4,-92(fp)
800813e0:	0082d280 	call	80082d28 <memcmp>
800813e4:	10000926 	beq	r2,zero,8008140c <FlashTestReadWrite+0x194>
      {
        printf("    pass 1 - FAILED.\n");
800813e8:	012002b4 	movhi	r4,32778
800813ec:	2136e204 	addi	r4,r4,-9336
800813f0:	00830380 	call	80083038 <puts>
        (*error)++;
800813f4:	e0bffd17 	ldw	r2,-12(fp)
800813f8:	10800017 	ldw	r2,0(r2)
800813fc:	10c00044 	addi	r3,r2,1
80081400:	e0bffd17 	ldw	r2,-12(fp)
80081404:	10c00015 	stw	r3,0(r2)
80081408:	00000306 	br	80081418 <FlashTestReadWrite+0x1a0>
      }
      else
        printf("    pass 1 - passed.\n");
8008140c:	012002b4 	movhi	r4,32778
80081410:	2136e804 	addi	r4,r4,-9312
80081414:	00830380 	call	80083038 <puts>
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
80081418:	e03fe715 	stw	zero,-100(fp)
8008141c:	00000906 	br	80081444 <FlashTestReadWrite+0x1cc>
      *(data_written + i) = ~((alt_u8)(i));
80081420:	e0bfe717 	ldw	r2,-100(fp)
80081424:	e0ffe917 	ldw	r3,-92(fp)
80081428:	1885883a 	add	r2,r3,r2
8008142c:	e0ffe717 	ldw	r3,-100(fp)
80081430:	00c6303a 	nor	r3,zero,r3
80081434:	10c00005 	stb	r3,0(r2)
      else
        printf("    pass 1 - passed.\n");
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
80081438:	e0bfe717 	ldw	r2,-100(fp)
8008143c:	10800044 	addi	r2,r2,1
80081440:	e0bfe715 	stw	r2,-100(fp)
80081444:	e0bfff17 	ldw	r2,-4(fp)
80081448:	10800317 	ldw	r2,12(r2)
8008144c:	e0ffe717 	ldw	r3,-100(fp)
80081450:	18bff316 	blt	r3,r2,80081420 <FlashTestReadWrite+0x1a8>
      *(data_written + i) = ~((alt_u8)(i));
 
    /* Write the buffer to flash block */
    ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
80081454:	e0bfff17 	ldw	r2,-4(fp)
80081458:	10800317 	ldw	r2,12(r2)
8008145c:	e0fffe17 	ldw	r3,-8(fp)
80081460:	e0ffed15 	stw	r3,-76(fp)
80081464:	e0ffeb17 	ldw	r3,-84(fp)
80081468:	e0fff615 	stw	r3,-40(fp)
8008146c:	e0ffe917 	ldw	r3,-92(fp)
80081470:	e0fff715 	stw	r3,-36(fp)
80081474:	e0bff815 	stw	r2,-32(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
80081478:	e0bfed17 	ldw	r2,-76(fp)
8008147c:	10800517 	ldw	r2,20(r2)
80081480:	e1fff817 	ldw	r7,-32(fp)
80081484:	e1bff717 	ldw	r6,-36(fp)
80081488:	e17ff617 	ldw	r5,-40(fp)
8008148c:	e13fed17 	ldw	r4,-76(fp)
80081490:	103ee83a 	callr	r2
80081494:	e0bfe815 	stw	r2,-96(fp)
    
    if (!ret_code)
80081498:	e0bfe817 	ldw	r2,-96(fp)
8008149c:	1000261e 	bne	r2,zero,80081538 <FlashTestReadWrite+0x2c0>
    {
      /* Read flash block into read buffer */
      ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
800814a0:	e0bfff17 	ldw	r2,-4(fp)
800814a4:	10800317 	ldw	r2,12(r2)
800814a8:	e0fffe17 	ldw	r3,-8(fp)
800814ac:	e0ffee15 	stw	r3,-72(fp)
800814b0:	e0ffeb17 	ldw	r3,-84(fp)
800814b4:	e0fff915 	stw	r3,-28(fp)
800814b8:	e0ffea17 	ldw	r3,-88(fp)
800814bc:	e0fffa15 	stw	r3,-24(fp)
800814c0:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
800814c4:	e0bfee17 	ldw	r2,-72(fp)
800814c8:	10800617 	ldw	r2,24(r2)
800814cc:	e1fffb17 	ldw	r7,-20(fp)
800814d0:	e1bffa17 	ldw	r6,-24(fp)
800814d4:	e17ff917 	ldw	r5,-28(fp)
800814d8:	e13fee17 	ldw	r4,-72(fp)
800814dc:	103ee83a 	callr	r2
800814e0:	e0bfe815 	stw	r2,-96(fp)
      if(!ret_code)
800814e4:	e0bfe817 	ldw	r2,-96(fp)
800814e8:	1000131e 	bne	r2,zero,80081538 <FlashTestReadWrite+0x2c0>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, regions->block_size))
800814ec:	e0bfff17 	ldw	r2,-4(fp)
800814f0:	10800317 	ldw	r2,12(r2)
800814f4:	100d883a 	mov	r6,r2
800814f8:	e17fea17 	ldw	r5,-88(fp)
800814fc:	e13fe917 	ldw	r4,-92(fp)
80081500:	0082d280 	call	80082d28 <memcmp>
80081504:	10000926 	beq	r2,zero,8008152c <FlashTestReadWrite+0x2b4>
        {
          printf("    pass 2 - FAILED.\n");
80081508:	012002b4 	movhi	r4,32778
8008150c:	2136ee04 	addi	r4,r4,-9288
80081510:	00830380 	call	80083038 <puts>
          (*error)++;
80081514:	e0bffd17 	ldw	r2,-12(fp)
80081518:	10800017 	ldw	r2,0(r2)
8008151c:	10c00044 	addi	r3,r2,1
80081520:	e0bffd17 	ldw	r2,-12(fp)
80081524:	10c00015 	stw	r3,0(r2)
80081528:	00000306 	br	80081538 <FlashTestReadWrite+0x2c0>
        }
        else
          printf("    pass 2 - passed.\n");
8008152c:	012002b4 	movhi	r4,32778
80081530:	2136f404 	addi	r4,r4,-9264
80081534:	00830380 	call	80083038 <puts>
      }
    }
    if (*error)
80081538:	e0bffd17 	ldw	r2,-12(fp)
8008153c:	10800017 	ldw	r2,0(r2)
80081540:	10000226 	beq	r2,zero,8008154c <FlashTestReadWrite+0x2d4>
      ret_code = 1;
80081544:	00800044 	movi	r2,1
80081548:	e0bfe815 	stw	r2,-96(fp)
  }

  /* Free up the buffers we allocated */
  free(data_written);
8008154c:	e13fe917 	ldw	r4,-92(fp)
80081550:	00825080 	call	80082508 <free>
  free(data_read);
80081554:	e13fea17 	ldw	r4,-88(fp)
80081558:	00825080 	call	80082508 <free>
  
  return ret_code;
8008155c:	e0bfe817 	ldw	r2,-96(fp)
}
80081560:	e037883a 	mov	sp,fp
80081564:	dfc00117 	ldw	ra,4(sp)
80081568:	df000017 	ldw	fp,0(sp)
8008156c:	dec00204 	addi	sp,sp,8
80081570:	f800283a 	ret

80081574 <FlashTestBlockErase>:
*           flash block contains some non-0xFFFFFFFF data before
*           this function is called.
*
******************************************************************/
static int FlashTestBlockErase(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
80081574:	defff404 	addi	sp,sp,-48
80081578:	dfc00b15 	stw	ra,44(sp)
8008157c:	df000a15 	stw	fp,40(sp)
80081580:	df000a04 	addi	fp,sp,40
80081584:	e13ffc15 	stw	r4,-16(fp)
80081588:	e17ffd15 	stw	r5,-12(fp)
8008158c:	e1bffe15 	stw	r6,-8(fp)
80081590:	e1ffff15 	stw	r7,-4(fp)

  int ret_code = 0x0;
80081594:	e03ff615 	stw	zero,-40(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
80081598:	e0bfff17 	ldw	r2,-4(fp)
8008159c:	10c00017 	ldw	r3,0(r2)
800815a0:	e0bfff17 	ldw	r2,-4(fp)
800815a4:	11000317 	ldw	r4,12(r2)
800815a8:	e0bffc17 	ldw	r2,-16(fp)
800815ac:	2085383a 	mul	r2,r4,r2
800815b0:	1885883a 	add	r2,r3,r2
800815b4:	e0bff715 	stw	r2,-36(fp)

  printf(" -Testing \"alt_erase_flash_block\".");
800815b8:	012002b4 	movhi	r4,32778
800815bc:	2136fa04 	addi	r4,r4,-9240
800815c0:	0082f1c0 	call	80082f1c <printf>
  ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
800815c4:	e0bfff17 	ldw	r2,-4(fp)
800815c8:	10800317 	ldw	r2,12(r2)
800815cc:	e0fffe17 	ldw	r3,-8(fp)
800815d0:	e0fff815 	stw	r3,-32(fp)
800815d4:	e0fff717 	ldw	r3,-36(fp)
800815d8:	e0fff915 	stw	r3,-28(fp)
800815dc:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
800815e0:	e0bff817 	ldw	r2,-32(fp)
800815e4:	10800817 	ldw	r2,32(r2)
800815e8:	e17ff917 	ldw	r5,-28(fp)
800815ec:	e13ff817 	ldw	r4,-32(fp)
800815f0:	103ee83a 	callr	r2
800815f4:	e0bffb15 	stw	r2,-20(fp)
  
/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
*/
  return ret_code;
800815f8:	e0bffb17 	ldw	r2,-20(fp)
800815fc:	e0bff615 	stw	r2,-40(fp)
  /* Check that the erase was successful. */
  if (!ret_code)
80081600:	e0bff617 	ldw	r2,-40(fp)
80081604:	1000111e 	bne	r2,zero,8008164c <FlashTestBlockErase+0xd8>
  {
    if(FlashCheckIfBlockErased(fd, block, regions))
80081608:	e1bfff17 	ldw	r6,-4(fp)
8008160c:	e17ffc17 	ldw	r5,-16(fp)
80081610:	e13ffe17 	ldw	r4,-8(fp)
80081614:	0080e240 	call	80080e24 <FlashCheckIfBlockErased>
80081618:	10000426 	beq	r2,zero,8008162c <FlashTestBlockErase+0xb8>
      printf("  passed.\n");
8008161c:	012002b4 	movhi	r4,32778
80081620:	2136c504 	addi	r4,r4,-9452
80081624:	00830380 	call	80083038 <puts>
80081628:	00000806 	br	8008164c <FlashTestBlockErase+0xd8>
    else
    {
      printf("  FAILED\n");  
8008162c:	012002b4 	movhi	r4,32778
80081630:	21370304 	addi	r4,r4,-9204
80081634:	00830380 	call	80083038 <puts>
      (*error)++;
80081638:	e0bffd17 	ldw	r2,-12(fp)
8008163c:	10800017 	ldw	r2,0(r2)
80081640:	10c00044 	addi	r3,r2,1
80081644:	e0bffd17 	ldw	r2,-12(fp)
80081648:	10c00015 	stw	r3,0(r2)
    }
  }
  
  return ret_code;
8008164c:	e0bff617 	ldw	r2,-40(fp)
}
80081650:	e037883a 	mov	sp,fp
80081654:	dfc00117 	ldw	ra,4(sp)
80081658:	df000017 	ldw	fp,0(sp)
8008165c:	dec00204 	addi	sp,sp,8
80081660:	f800283a 	ret

80081664 <FlashRunTests>:
*             - alt_erase_flash_block
*             - alt_write_flash_block
* 
******************************************************************/
static void FlashRunTests(alt_flash_fd* fd, int block, flash_region* regions)
{
80081664:	defff404 	addi	sp,sp,-48
80081668:	dfc00b15 	stw	ra,44(sp)
8008166c:	df000a15 	stw	fp,40(sp)
80081670:	df000a04 	addi	fp,sp,40
80081674:	e13ffd15 	stw	r4,-12(fp)
80081678:	e17ffe15 	stw	r5,-8(fp)
8008167c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0x0;
80081680:	e03ff615 	stw	zero,-40(fp)
  int error = 0x0;
80081684:	e03ffc15 	stw	zero,-16(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
80081688:	e0bfff17 	ldw	r2,-4(fp)
8008168c:	10c00017 	ldw	r3,0(r2)
80081690:	e0bfff17 	ldw	r2,-4(fp)
80081694:	11000317 	ldw	r4,12(r2)
80081698:	e0bffe17 	ldw	r2,-8(fp)
8008169c:	2085383a 	mul	r2,r4,r2
800816a0:	1885883a 	add	r2,r3,r2
800816a4:	e0bff715 	stw	r2,-36(fp)
  
  /* Test reading and writing functions */
  ret_code = FlashTestReadWrite(block, &error, fd, regions);
800816a8:	e0bffc04 	addi	r2,fp,-16
800816ac:	e1ffff17 	ldw	r7,-4(fp)
800816b0:	e1bffd17 	ldw	r6,-12(fp)
800816b4:	100b883a 	mov	r5,r2
800816b8:	e13ffe17 	ldw	r4,-8(fp)
800816bc:	00812780 	call	80081278 <FlashTestReadWrite>
800816c0:	e0bff615 	stw	r2,-40(fp)
 
  /* Test the erase function */
  if (!ret_code)
800816c4:	e0bff617 	ldw	r2,-40(fp)
800816c8:	1000071e 	bne	r2,zero,800816e8 <FlashRunTests+0x84>
  {
    ret_code = FlashTestBlockErase(block, &error, fd, regions);
800816cc:	e0bffc04 	addi	r2,fp,-16
800816d0:	e1ffff17 	ldw	r7,-4(fp)
800816d4:	e1bffd17 	ldw	r6,-12(fp)
800816d8:	100b883a 	mov	r5,r2
800816dc:	e13ffe17 	ldw	r4,-8(fp)
800816e0:	00815740 	call	80081574 <FlashTestBlockErase>
800816e4:	e0bff615 	stw	r2,-40(fp)
  }
  /* Test the block write function */
  if (!ret_code)
800816e8:	e0bff617 	ldw	r2,-40(fp)
800816ec:	1000071e 	bne	r2,zero,8008170c <FlashRunTests+0xa8>
  {
    ret_code = FlashTestBlockWrite(block, &error, fd, regions);
800816f0:	e0bffc04 	addi	r2,fp,-16
800816f4:	e1ffff17 	ldw	r7,-4(fp)
800816f8:	e1bffd17 	ldw	r6,-12(fp)
800816fc:	100b883a 	mov	r5,r2
80081700:	e13ffe17 	ldw	r4,-8(fp)
80081704:	0080f6c0 	call	80080f6c <FlashTestBlockWrite>
80081708:	e0bff615 	stw	r2,-40(fp)
  }

  /* Erase the block so we dont fill one up each time we run the test */
  printf(" -Returning block %d to its erased state.\n", block);
8008170c:	e17ffe17 	ldw	r5,-8(fp)
80081710:	012002b4 	movhi	r4,32778
80081714:	21370604 	addi	r4,r4,-9192
80081718:	0082f1c0 	call	80082f1c <printf>
  alt_erase_flash_block(fd, test_offset, regions->block_size);
8008171c:	e0bfff17 	ldw	r2,-4(fp)
80081720:	10800317 	ldw	r2,12(r2)
80081724:	e0fffd17 	ldw	r3,-12(fp)
80081728:	e0fff815 	stw	r3,-32(fp)
8008172c:	e0fff717 	ldw	r3,-36(fp)
80081730:	e0fff915 	stw	r3,-28(fp)
80081734:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
80081738:	e0bff817 	ldw	r2,-32(fp)
8008173c:	10800817 	ldw	r2,32(r2)
80081740:	e17ff917 	ldw	r5,-28(fp)
80081744:	e13ff817 	ldw	r4,-32(fp)
80081748:	103ee83a 	callr	r2
8008174c:	e0bffb15 	stw	r2,-20(fp)
 
  printf(" -Flash tests complete.\n");
80081750:	012002b4 	movhi	r4,32778
80081754:	21371104 	addi	r4,r4,-9148
80081758:	00830380 	call	80083038 <puts>
  if(ret_code || error)
8008175c:	e0bff617 	ldw	r2,-40(fp)
80081760:	1000021e 	bne	r2,zero,8008176c <FlashRunTests+0x108>
80081764:	e0bffc17 	ldw	r2,-16(fp)
80081768:	10000326 	beq	r2,zero,80081778 <FlashRunTests+0x114>
  {
    printf(" -At least one test failed.\n\n");
8008176c:	012002b4 	movhi	r4,32778
80081770:	21371704 	addi	r4,r4,-9124
80081774:	00830380 	call	80083038 <puts>
  }
}
80081778:	0001883a 	nop
8008177c:	e037883a 	mov	sp,fp
80081780:	dfc00117 	ldw	ra,4(sp)
80081784:	df000017 	ldw	fp,0(sp)
80081788:	dec00204 	addi	sp,sp,8
8008178c:	f800283a 	ret

80081790 <GetFlashName>:
*           Defaults to "/dev/ext_flash", the name of the flash
*           component in the Nios II example designs.
* 
******************************************************************/
static int GetFlashName(char line[30], int flash_type)
{
80081790:	defffa04 	addi	sp,sp,-24
80081794:	dfc00515 	stw	ra,20(sp)
80081798:	df000415 	stw	fp,16(sp)
8008179c:	df000404 	addi	fp,sp,16
800817a0:	e13ffe15 	stw	r4,-8(fp)
800817a4:	e17fff15 	stw	r5,-4(fp)

  char ch = 0x0;
800817a8:	e03ffc05 	stb	zero,-16(fp)
  int i;

  if (flash_type == CFI)
800817ac:	e0bfff17 	ldw	r2,-4(fp)
800817b0:	108000d8 	cmpnei	r2,r2,3
800817b4:	1000091e 	bne	r2,zero,800817dc <GetFlashName+0x4c>
  { 
    printf("\nEnter the name of the CFI flash device to be opened,\n");
800817b8:	012002b4 	movhi	r4,32778
800817bc:	21371f04 	addi	r4,r4,-9092
800817c0:	00830380 	call	80083038 <puts>
    printf("or just press <enter> to open \"/dev/ext_flash\"\n");
800817c4:	012002b4 	movhi	r4,32778
800817c8:	21372d04 	addi	r4,r4,-9036
800817cc:	00830380 	call	80083038 <puts>
    printf(">");
800817d0:	01000f84 	movi	r4,62
800817d4:	0082f600 	call	80082f60 <putchar>
800817d8:	00000b06 	br	80081808 <GetFlashName+0x78>
  }
  else if (flash_type == EPCS)
800817dc:	e0bfff17 	ldw	r2,-4(fp)
800817e0:	10800118 	cmpnei	r2,r2,4
800817e4:	1000081e 	bne	r2,zero,80081808 <GetFlashName+0x78>
  {
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
800817e8:	012002b4 	movhi	r4,32778
800817ec:	21373904 	addi	r4,r4,-8988
800817f0:	00830380 	call	80083038 <puts>
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
800817f4:	012002b4 	movhi	r4,32778
800817f8:	21374704 	addi	r4,r4,-8932
800817fc:	00830380 	call	80083038 <puts>
    printf(">");
80081800:	01000f84 	movi	r4,62
80081804:	0082f600 	call	80082f60 <putchar>
  }
 
  for(i = 0; ch != '\n'; i++)
80081808:	e03ffd15 	stw	zero,-12(fp)
8008180c:	00003706 	br	800818ec <GetFlashName+0x15c>
  {
    ch = getc(stdin);
80081810:	d0a00117 	ldw	r2,-32764(gp)
80081814:	10800117 	ldw	r2,4(r2)
80081818:	1009883a 	mov	r4,r2
8008181c:	008246c0 	call	8008246c <getc>
80081820:	e0bffc05 	stb	r2,-16(fp)
    if(ch == '\r' || ch == '\n')
80081824:	e0bffc07 	ldb	r2,-16(fp)
80081828:	10800360 	cmpeqi	r2,r2,13
8008182c:	1000031e 	bne	r2,zero,8008183c <GetFlashName+0xac>
80081830:	e0bffc07 	ldb	r2,-16(fp)
80081834:	10800298 	cmpnei	r2,r2,10
80081838:	1000221e 	bne	r2,zero,800818c4 <GetFlashName+0x134>
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
8008183c:	e0bffd17 	ldw	r2,-12(fp)
80081840:	10800088 	cmpgei	r2,r2,2
80081844:	10001a1e 	bne	r2,zero,800818b0 <GetFlashName+0x120>
      {
        if (flash_type == CFI)
80081848:	e0bfff17 	ldw	r2,-4(fp)
8008184c:	108000d8 	cmpnei	r2,r2,3
80081850:	10000a1e 	bne	r2,zero,8008187c <GetFlashName+0xec>
          strcpy(line, "/dev/ext_flash\0");
80081854:	e0fffe17 	ldw	r3,-8(fp)
80081858:	00a002b4 	movhi	r2,32778
8008185c:	10b75504 	addi	r2,r2,-8876
80081860:	1009883a 	mov	r4,r2
80081864:	008003c4 	movi	r2,15
80081868:	100d883a 	mov	r6,r2
8008186c:	200b883a 	mov	r5,r4
80081870:	1809883a 	mov	r4,r3
80081874:	0082da40 	call	80082da4 <memcpy>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
80081878:	00001806 	br	800818dc <GetFlashName+0x14c>
      {
        if (flash_type == CFI)
          strcpy(line, "/dev/ext_flash\0");
        else if (flash_type == EPCS)
8008187c:	e0bfff17 	ldw	r2,-4(fp)
80081880:	10800118 	cmpnei	r2,r2,4
80081884:	1000151e 	bne	r2,zero,800818dc <GetFlashName+0x14c>
          strcpy(line, "/dev/epcs_controller\0");
80081888:	e0fffe17 	ldw	r3,-8(fp)
8008188c:	00a002b4 	movhi	r2,32778
80081890:	10b75904 	addi	r2,r2,-8860
80081894:	1009883a 	mov	r4,r2
80081898:	00800544 	movi	r2,21
8008189c:	100d883a 	mov	r6,r2
800818a0:	200b883a 	mov	r5,r4
800818a4:	1809883a 	mov	r4,r3
800818a8:	0082da40 	call	80082da4 <memcpy>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
800818ac:	00000b06 	br	800818dc <GetFlashName+0x14c>
          strcpy(line, "/dev/epcs_controller\0");
      }
         
      else
        /* Properly terminate the string. */
        line[i] = '\0';
800818b0:	e0bffd17 	ldw	r2,-12(fp)
800818b4:	e0fffe17 	ldw	r3,-8(fp)
800818b8:	1885883a 	add	r2,r3,r2
800818bc:	10000005 	stb	zero,0(r2)
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
800818c0:	00000606 	br	800818dc <GetFlashName+0x14c>
      else
        /* Properly terminate the string. */
        line[i] = '\0';
    }
    else
     line[i] = ch;
800818c4:	e0bffd17 	ldw	r2,-12(fp)
800818c8:	e0fffe17 	ldw	r3,-8(fp)
800818cc:	1885883a 	add	r2,r3,r2
800818d0:	e0fffc03 	ldbu	r3,-16(fp)
800818d4:	10c00005 	stb	r3,0(r2)
800818d8:	00000106 	br	800818e0 <GetFlashName+0x150>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
800818dc:	0001883a 	nop
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
    printf(">");
  }
 
  for(i = 0; ch != '\n'; i++)
800818e0:	e0bffd17 	ldw	r2,-12(fp)
800818e4:	10800044 	addi	r2,r2,1
800818e8:	e0bffd15 	stw	r2,-12(fp)
800818ec:	e0bffc07 	ldb	r2,-16(fp)
800818f0:	10800298 	cmpnei	r2,r2,10
800818f4:	103fc61e 	bne	r2,zero,80081810 <GetFlashName+0x80>
    }
    else
     line[i] = ch;
  }
 
  return 0;
800818f8:	0005883a 	mov	r2,zero
}
800818fc:	e037883a 	mov	sp,fp
80081900:	dfc00117 	ldw	ra,4(sp)
80081904:	df000017 	ldw	fp,0(sp)
80081908:	dec00204 	addi	sp,sp,8
8008190c:	f800283a 	ret

80081910 <FlashErase>:
*
*  Purpose: Erases 1 or all blocks in the specified flash device.
* 
******************************************************************/
static void FlashErase(int flash_type)
{
80081910:	deffe304 	addi	sp,sp,-116
80081914:	dfc01c15 	stw	ra,112(sp)
80081918:	df001b15 	stw	fp,108(sp)
8008191c:	df001b04 	addi	fp,sp,108
80081920:	e13fff15 	stw	r4,-4(fp)
  char entry[4];
  char flashname[30];
  unsigned int block;
 
  /* Get the name of the flash we are erasing */
  ret_code = GetFlashName(flashname, flash_type);
80081924:	e0bff604 	addi	r2,fp,-40
80081928:	e17fff17 	ldw	r5,-4(fp)
8008192c:	1009883a 	mov	r4,r2
80081930:	00817900 	call	80081790 <GetFlashName>
80081934:	e0bfe515 	stw	r2,-108(fp)
 
  fd = alt_flash_open_dev(flashname);
80081938:	e0bff604 	addi	r2,fp,-40
8008193c:	1009883a 	mov	r4,r2
80081940:	0098cfc0 	call	80098cfc <alt_flash_open_dev>
80081944:	e0bfe615 	stw	r2,-104(fp)
  if (fd)
80081948:	e0bfe617 	ldw	r2,-104(fp)
8008194c:	1000b626 	beq	r2,zero,80081c28 <FlashErase+0x318>
80081950:	e0bfe617 	ldw	r2,-104(fp)
80081954:	e0bfea15 	stw	r2,-88(fp)
80081958:	e0bff304 	addi	r2,fp,-52
8008195c:	e0bfeb15 	stw	r2,-84(fp)
80081960:	e0bff404 	addi	r2,fp,-48
80081964:	e0bfec15 	stw	r2,-80(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
80081968:	e0bfea17 	ldw	r2,-88(fp)
8008196c:	10800717 	ldw	r2,28(r2)
80081970:	e1bfec17 	ldw	r6,-80(fp)
80081974:	e17feb17 	ldw	r5,-84(fp)
80081978:	e13fea17 	ldw	r4,-88(fp)
8008197c:	103ee83a 	callr	r2
  {
    /* Find out some useful stuff about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
80081980:	e0bfe515 	stw	r2,-108(fp)
    if (!ret_code)
80081984:	e0bfe517 	ldw	r2,-108(fp)
80081988:	1000a01e 	bne	r2,zero,80081c0c <FlashErase+0x2fc>
    {
      printf(" -Region has %d blocks.\n", regions->number_of_blocks);
8008198c:	e0bff317 	ldw	r2,-52(fp)
80081990:	10800217 	ldw	r2,8(r2)
80081994:	100b883a 	mov	r5,r2
80081998:	012002b4 	movhi	r4,32778
8008199c:	21375f04 	addi	r4,r4,-8836
800819a0:	0082f1c0 	call	80082f1c <printf>
      printf(" -Which block would you like to erase?\n");
800819a4:	012002b4 	movhi	r4,32778
800819a8:	21376604 	addi	r4,r4,-8808
800819ac:	00830380 	call	80083038 <puts>
      printf(" -> ");
800819b0:	012002b4 	movhi	r4,32778
800819b4:	21377004 	addi	r4,r4,-8768
800819b8:	0082f1c0 	call	80082f1c <printf>
      
      GetInputString( entry, sizeof(entry), stdin );
800819bc:	d0a00117 	ldw	r2,-32764(gp)
800819c0:	10c00117 	ldw	r3,4(r2)
800819c4:	e0bff504 	addi	r2,fp,-44
800819c8:	180d883a 	mov	r6,r3
800819cc:	01400104 	movi	r5,4
800819d0:	1009883a 	mov	r4,r2
800819d4:	00803b00 	call	800803b0 <GetInputString>

      if(entry[0] == 'a')
800819d8:	e0bff503 	ldbu	r2,-44(fp)
800819dc:	10803fcc 	andi	r2,r2,255
800819e0:	1080201c 	xori	r2,r2,128
800819e4:	10bfe004 	addi	r2,r2,-128
800819e8:	10801858 	cmpnei	r2,r2,97
800819ec:	1000501e 	bne	r2,zero,80081b30 <FlashErase+0x220>
      {
        printf(" -Erase ALL blocks? (y/n) ");
800819f0:	012002b4 	movhi	r4,32778
800819f4:	21377204 	addi	r4,r4,-8760
800819f8:	0082f1c0 	call	80082f1c <printf>

        GetInputString( entry, sizeof(entry), stdin );
800819fc:	d0a00117 	ldw	r2,-32764(gp)
80081a00:	10c00117 	ldw	r3,4(r2)
80081a04:	e0bff504 	addi	r2,fp,-44
80081a08:	180d883a 	mov	r6,r3
80081a0c:	01400104 	movi	r5,4
80081a10:	1009883a 	mov	r4,r2
80081a14:	00803b00 	call	800803b0 <GetInputString>
        
        if(entry[0] == 'y')
80081a18:	e0bff503 	ldbu	r2,-44(fp)
80081a1c:	10803fcc 	andi	r2,r2,255
80081a20:	1080201c 	xori	r2,r2,128
80081a24:	10bfe004 	addi	r2,r2,-128
80081a28:	10801e58 	cmpnei	r2,r2,121
80081a2c:	10003d1e 	bne	r2,zero,80081b24 <FlashErase+0x214>
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
80081a30:	e0bff317 	ldw	r2,-52(fp)
80081a34:	10800217 	ldw	r2,8(r2)
80081a38:	100b883a 	mov	r5,r2
80081a3c:	012002b4 	movhi	r4,32778
80081a40:	21377904 	addi	r4,r4,-8732
80081a44:	0082f1c0 	call	80082f1c <printf>
          for(block = 0; block < regions->number_of_blocks; block++)
80081a48:	e03ffe15 	stw	zero,-8(fp)
80081a4c:	00002c06 	br	80081b00 <FlashErase+0x1f0>
          {
            /* Dont erase it if it's already erased silly. */
            if ((FlashCheckIfBlockErased(fd, block, regions)) == 0)
80081a50:	e0bffe17 	ldw	r2,-8(fp)
80081a54:	1007883a 	mov	r3,r2
80081a58:	e0bff317 	ldw	r2,-52(fp)
80081a5c:	100d883a 	mov	r6,r2
80081a60:	180b883a 	mov	r5,r3
80081a64:	e13fe617 	ldw	r4,-104(fp)
80081a68:	0080e240 	call	80080e24 <FlashCheckIfBlockErased>
80081a6c:	1000171e 	bne	r2,zero,80081acc <FlashErase+0x1bc>
            {
              test_offset = (regions->offset + (block * regions->block_size));
80081a70:	e0bff317 	ldw	r2,-52(fp)
80081a74:	10800017 	ldw	r2,0(r2)
80081a78:	1007883a 	mov	r3,r2
80081a7c:	e0bff317 	ldw	r2,-52(fp)
80081a80:	10800317 	ldw	r2,12(r2)
80081a84:	1009883a 	mov	r4,r2
80081a88:	e0bffe17 	ldw	r2,-8(fp)
80081a8c:	2085383a 	mul	r2,r4,r2
80081a90:	1885883a 	add	r2,r3,r2
80081a94:	e0bfe815 	stw	r2,-96(fp)
              alt_erase_flash_block(fd, test_offset, regions->block_size);
80081a98:	e0bff317 	ldw	r2,-52(fp)
80081a9c:	10800317 	ldw	r2,12(r2)
80081aa0:	e0ffe617 	ldw	r3,-104(fp)
80081aa4:	e0ffe715 	stw	r3,-100(fp)
80081aa8:	e0ffe817 	ldw	r3,-96(fp)
80081aac:	e0ffed15 	stw	r3,-76(fp)
80081ab0:	e0bfee15 	stw	r2,-72(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
80081ab4:	e0bfe717 	ldw	r2,-100(fp)
80081ab8:	10800817 	ldw	r2,32(r2)
80081abc:	e17fed17 	ldw	r5,-76(fp)
80081ac0:	e13fe717 	ldw	r4,-100(fp)
80081ac4:	103ee83a 	callr	r2
80081ac8:	e0bfef15 	stw	r2,-68(fp)
            }
            /* Just a simple progress meter so we dont get bored waiting for the flash to erase. */
            printf(".");
80081acc:	01000b84 	movi	r4,46
80081ad0:	0082f600 	call	80082f60 <putchar>
            if(((block + 1) % 80) == 0)
80081ad4:	e0bffe17 	ldw	r2,-8(fp)
80081ad8:	10800044 	addi	r2,r2,1
80081adc:	01401404 	movi	r5,80
80081ae0:	1009883a 	mov	r4,r2
80081ae4:	00823a40 	call	800823a4 <__umodsi3>
80081ae8:	1000021e 	bne	r2,zero,80081af4 <FlashErase+0x1e4>
            {
              printf("\n");
80081aec:	01000284 	movi	r4,10
80081af0:	0082f600 	call	80082f60 <putchar>
        
        if(entry[0] == 'y')
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
          for(block = 0; block < regions->number_of_blocks; block++)
80081af4:	e0bffe17 	ldw	r2,-8(fp)
80081af8:	10800044 	addi	r2,r2,1
80081afc:	e0bffe15 	stw	r2,-8(fp)
80081b00:	e0bff317 	ldw	r2,-52(fp)
80081b04:	10800217 	ldw	r2,8(r2)
80081b08:	1007883a 	mov	r3,r2
80081b0c:	e0bffe17 	ldw	r2,-8(fp)
80081b10:	10ffcf36 	bltu	r2,r3,80081a50 <FlashErase+0x140>
            if(((block + 1) % 80) == 0)
            {
              printf("\n");
            }
          }
          printf("\n -All Blocks Erased.\n");
80081b14:	012002b4 	movhi	r4,32778
80081b18:	21378204 	addi	r4,r4,-8696
80081b1c:	00830380 	call	80083038 <puts>
80081b20:	00000306 	br	80081b30 <FlashErase+0x220>
        }
        else
        {
          printf("Erased zero blocks.\n");
80081b24:	012002b4 	movhi	r4,32778
80081b28:	21378804 	addi	r4,r4,-8672
80081b2c:	00830380 	call	80083038 <puts>
        }
      }
      /* Just erase one block */
      if(sscanf(entry, "%d\n", &block))
80081b30:	e0fffe04 	addi	r3,fp,-8
80081b34:	e0bff504 	addi	r2,fp,-44
80081b38:	180d883a 	mov	r6,r3
80081b3c:	016002b4 	movhi	r5,32778
80081b40:	29778d04 	addi	r5,r5,-8652
80081b44:	1009883a 	mov	r4,r2
80081b48:	00831280 	call	80083128 <sscanf>
80081b4c:	10002f26 	beq	r2,zero,80081c0c <FlashErase+0x2fc>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
80081b50:	e0bff317 	ldw	r2,-52(fp)
80081b54:	10800217 	ldw	r2,8(r2)
80081b58:	10bfffc4 	addi	r2,r2,-1
80081b5c:	1007883a 	mov	r3,r2
80081b60:	e0bffe17 	ldw	r2,-8(fp)
80081b64:	18801d36 	bltu	r3,r2,80081bdc <FlashErase+0x2cc>
        {
          test_offset = (regions->offset + (block * regions->block_size));
80081b68:	e0bff317 	ldw	r2,-52(fp)
80081b6c:	10800017 	ldw	r2,0(r2)
80081b70:	1007883a 	mov	r3,r2
80081b74:	e0bff317 	ldw	r2,-52(fp)
80081b78:	10800317 	ldw	r2,12(r2)
80081b7c:	1009883a 	mov	r4,r2
80081b80:	e0bffe17 	ldw	r2,-8(fp)
80081b84:	2085383a 	mul	r2,r4,r2
80081b88:	1885883a 	add	r2,r3,r2
80081b8c:	e0bfe815 	stw	r2,-96(fp)
          alt_erase_flash_block(fd, test_offset, regions->block_size);
80081b90:	e0bff317 	ldw	r2,-52(fp)
80081b94:	10800317 	ldw	r2,12(r2)
80081b98:	e0ffe617 	ldw	r3,-104(fp)
80081b9c:	e0ffe915 	stw	r3,-92(fp)
80081ba0:	e0ffe817 	ldw	r3,-96(fp)
80081ba4:	e0fff015 	stw	r3,-64(fp)
80081ba8:	e0bff115 	stw	r2,-60(fp)
80081bac:	e0bfe917 	ldw	r2,-92(fp)
80081bb0:	10800817 	ldw	r2,32(r2)
80081bb4:	e17ff017 	ldw	r5,-64(fp)
80081bb8:	e13fe917 	ldw	r4,-92(fp)
80081bbc:	103ee83a 	callr	r2
80081bc0:	e0bff215 	stw	r2,-56(fp)
          printf(" -Block %d erased.\n", block);
80081bc4:	e0bffe17 	ldw	r2,-8(fp)
80081bc8:	100b883a 	mov	r5,r2
80081bcc:	012002b4 	movhi	r4,32778
80081bd0:	21378e04 	addi	r4,r4,-8648
80081bd4:	0082f1c0 	call	80082f1c <printf>
80081bd8:	00000c06 	br	80081c0c <FlashErase+0x2fc>
        }
        else
        {
          printf(" -Block number entered is %d\n", block);
80081bdc:	e0bffe17 	ldw	r2,-8(fp)
80081be0:	100b883a 	mov	r5,r2
80081be4:	012002b4 	movhi	r4,32778
80081be8:	21379304 	addi	r4,r4,-8628
80081bec:	0082f1c0 	call	80082f1c <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
80081bf0:	e0bff317 	ldw	r2,-52(fp)
80081bf4:	10800217 	ldw	r2,8(r2)
80081bf8:	10bfffc4 	addi	r2,r2,-1
80081bfc:	100b883a 	mov	r5,r2
80081c00:	012002b4 	movhi	r4,32778
80081c04:	21379b04 	addi	r4,r4,-8596
80081c08:	0082f1c0 	call	80082f1c <printf>
        }
      }
    }
    printf(" -Closing flash \"%s\".\n", flashname);
80081c0c:	e0bff604 	addi	r2,fp,-40
80081c10:	100b883a 	mov	r5,r2
80081c14:	012002b4 	movhi	r4,32778
80081c18:	2137a604 	addi	r4,r4,-8552
80081c1c:	0082f1c0 	call	80082f1c <printf>
    alt_flash_close_dev(fd);
80081c20:	e13fe617 	ldw	r4,-104(fp)
80081c24:	0098d640 	call	80098d64 <alt_flash_close_dev>
  }
}
80081c28:	0001883a 	nop
80081c2c:	e037883a 	mov	sp,fp
80081c30:	dfc00117 	ldw	ra,4(sp)
80081c34:	df000017 	ldw	fp,0(sp)
80081c38:	dec00204 	addi	sp,sp,8
80081c3c:	f800283a 	ret

80081c40 <FlashFindErasedBlocks>:
*           parameter is SHOWMAP, the function prints a list of 
*           all blocks, indicating which ones are erased.
* 
******************************************************************/
static int FlashFindErasedBlocks(alt_flash_fd* fd, flash_region* regions, int number_of_regions, int mode)
{ 
80081c40:	defff404 	addi	sp,sp,-48
80081c44:	dfc00b15 	stw	ra,44(sp)
80081c48:	df000a15 	stw	fp,40(sp)
80081c4c:	df000a04 	addi	fp,sp,40
80081c50:	e13ffc15 	stw	r4,-16(fp)
80081c54:	e17ffd15 	stw	r5,-12(fp)
80081c58:	e1bffe15 	stw	r6,-8(fp)
80081c5c:	e1ffff15 	stw	r7,-4(fp)
  int region_index, block_index;
  int block_erased = 0x0;
80081c60:	e03ff815 	stw	zero,-32(fp)
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
80081c64:	e03ff615 	stw	zero,-40(fp)
80081c68:	00008806 	br	80081e8c <FlashFindErasedBlocks+0x24c>
  {
    printf(" -Checking Region %d for erased blocks.\n", region_index);
80081c6c:	e17ff617 	ldw	r5,-40(fp)
80081c70:	012002b4 	movhi	r4,32778
80081c74:	2137ac04 	addi	r4,r4,-8528
80081c78:	0082f1c0 	call	80082f1c <printf>
    /* SHOWMAP mode has a legend reminding us what little plus and minus signs mean */
    if(mode == SHOWMAP)
80081c7c:	e0bfff17 	ldw	r2,-4(fp)
80081c80:	10800098 	cmpnei	r2,r2,2
80081c84:	1000061e 	bne	r2,zero,80081ca0 <FlashFindErasedBlocks+0x60>
    {
      printf("            erased block = '-'\n");     
80081c88:	012002b4 	movhi	r4,32778
80081c8c:	2137b704 	addi	r4,r4,-8484
80081c90:	00830380 	call	80083038 <puts>
      printf("          unerased block = '+'\n\n");     
80081c94:	012002b4 	movhi	r4,32778
80081c98:	2137bf04 	addi	r4,r4,-8452
80081c9c:	00830380 	call	80083038 <puts>
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
80081ca0:	e03ff715 	stw	zero,-36(fp)
80081ca4:	00003006 	br	80081d68 <FlashFindErasedBlocks+0x128>
    {
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
80081ca8:	e1bffd17 	ldw	r6,-12(fp)
80081cac:	e17ff717 	ldw	r5,-36(fp)
80081cb0:	e13ffc17 	ldw	r4,-16(fp)
80081cb4:	0080e240 	call	80080e24 <FlashCheckIfBlockErased>
80081cb8:	e0bff815 	stw	r2,-32(fp)
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
80081cbc:	e0bff817 	ldw	r2,-32(fp)
80081cc0:	10000326 	beq	r2,zero,80081cd0 <FlashFindErasedBlocks+0x90>
80081cc4:	e0bfff17 	ldw	r2,-4(fp)
80081cc8:	10800060 	cmpeqi	r2,r2,1
80081ccc:	10002a1e 	bne	r2,zero,80081d78 <FlashFindErasedBlocks+0x138>
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
80081cd0:	e0bff817 	ldw	r2,-32(fp)
80081cd4:	10001026 	beq	r2,zero,80081d18 <FlashFindErasedBlocks+0xd8>
80081cd8:	e0bfff17 	ldw	r2,-4(fp)
80081cdc:	10800098 	cmpnei	r2,r2,2
80081ce0:	10000d1e 	bne	r2,zero,80081d18 <FlashFindErasedBlocks+0xd8>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
80081ce4:	e0bffd17 	ldw	r2,-12(fp)
80081ce8:	10c00017 	ldw	r3,0(r2)
80081cec:	e0bffd17 	ldw	r2,-12(fp)
80081cf0:	11000317 	ldw	r4,12(r2)
80081cf4:	e0bff717 	ldw	r2,-36(fp)
80081cf8:	2085383a 	mul	r2,r4,r2
80081cfc:	1885883a 	add	r2,r3,r2
80081d00:	100d883a 	mov	r6,r2
80081d04:	e17ff717 	ldw	r5,-36(fp)
80081d08:	012002b4 	movhi	r4,32778
80081d0c:	2137c704 	addi	r4,r4,-8420
80081d10:	0082f1c0 	call	80082f1c <printf>
80081d14:	00001106 	br	80081d5c <FlashFindErasedBlocks+0x11c>
      else if(!block_erased && (mode == SHOWMAP))
80081d18:	e0bff817 	ldw	r2,-32(fp)
80081d1c:	10000f1e 	bne	r2,zero,80081d5c <FlashFindErasedBlocks+0x11c>
80081d20:	e0bfff17 	ldw	r2,-4(fp)
80081d24:	10800098 	cmpnei	r2,r2,2
80081d28:	10000c1e 	bne	r2,zero,80081d5c <FlashFindErasedBlocks+0x11c>
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
80081d2c:	e0bffd17 	ldw	r2,-12(fp)
80081d30:	10c00017 	ldw	r3,0(r2)
80081d34:	e0bffd17 	ldw	r2,-12(fp)
80081d38:	11000317 	ldw	r4,12(r2)
80081d3c:	e0bff717 	ldw	r2,-36(fp)
80081d40:	2085383a 	mul	r2,r4,r2
80081d44:	1885883a 	add	r2,r3,r2
80081d48:	100d883a 	mov	r6,r2
80081d4c:	e17ff717 	ldw	r5,-36(fp)
80081d50:	012002b4 	movhi	r4,32778
80081d54:	2137ce04 	addi	r4,r4,-8392
80081d58:	0082f1c0 	call	80082f1c <printf>
    {
      printf("            erased block = '-'\n");     
      printf("          unerased block = '+'\n\n");     
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
80081d5c:	e0bff717 	ldw	r2,-36(fp)
80081d60:	10800044 	addi	r2,r2,1
80081d64:	e0bff715 	stw	r2,-36(fp)
80081d68:	e0bffd17 	ldw	r2,-12(fp)
80081d6c:	10800217 	ldw	r2,8(r2)
80081d70:	e0fff717 	ldw	r3,-36(fp)
80081d74:	18bfcc16 	blt	r3,r2,80081ca8 <FlashFindErasedBlocks+0x68>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
    }
    /* Special case if no blocks are erased (TEST mode only)*/
    if(( block_index == ( regions->number_of_blocks )) && ( mode == TEST ))
80081d78:	e0bffd17 	ldw	r2,-12(fp)
80081d7c:	10c00217 	ldw	r3,8(r2)
80081d80:	e0bff717 	ldw	r2,-36(fp)
80081d84:	1880391e 	bne	r3,r2,80081e6c <FlashFindErasedBlocks+0x22c>
80081d88:	e0bfff17 	ldw	r2,-4(fp)
80081d8c:	10800058 	cmpnei	r2,r2,1
80081d90:	1000361e 	bne	r2,zero,80081e6c <FlashFindErasedBlocks+0x22c>
    {
      printf(" -Found no erased blocks.  Please enter the number of the block\n");
80081d94:	012002b4 	movhi	r4,32778
80081d98:	2137d504 	addi	r4,r4,-8364
80081d9c:	00830380 	call	80083038 <puts>
      printf("  you would like to test.  Enter 'q' to quit without testing flash.\n");
80081da0:	012002b4 	movhi	r4,32778
80081da4:	2137e504 	addi	r4,r4,-8300
80081da8:	00830380 	call	80083038 <puts>
      printf(" -> ");
80081dac:	012002b4 	movhi	r4,32778
80081db0:	21377004 	addi	r4,r4,-8768
80081db4:	0082f1c0 	call	80082f1c <printf>

      GetInputString( entry, sizeof(entry), stdin );
80081db8:	d0a00117 	ldw	r2,-32764(gp)
80081dbc:	10c00117 	ldw	r3,4(r2)
80081dc0:	e0bff904 	addi	r2,fp,-28
80081dc4:	180d883a 	mov	r6,r3
80081dc8:	01400144 	movi	r5,5
80081dcc:	1009883a 	mov	r4,r2
80081dd0:	00803b00 	call	800803b0 <GetInputString>

      if(entry[0] == 'q')
80081dd4:	e0bff903 	ldbu	r2,-28(fp)
80081dd8:	10803fcc 	andi	r2,r2,255
80081ddc:	1080201c 	xori	r2,r2,128
80081de0:	10bfe004 	addi	r2,r2,-128
80081de4:	10801c58 	cmpnei	r2,r2,113
80081de8:	1000031e 	bne	r2,zero,80081df8 <FlashFindErasedBlocks+0x1b8>
      {
    		block_index = QUIT_WITHOUT_TESTING;
80081dec:	00bfffc4 	movi	r2,-1
80081df0:	e0bff715 	stw	r2,-36(fp)
    		break;
80081df4:	00002a06 	br	80081ea0 <FlashFindErasedBlocks+0x260>
    	}
      else if(sscanf(entry, "%d\n", &block))
80081df8:	e0fffb04 	addi	r3,fp,-20
80081dfc:	e0bff904 	addi	r2,fp,-28
80081e00:	180d883a 	mov	r6,r3
80081e04:	016002b4 	movhi	r5,32778
80081e08:	29778d04 	addi	r5,r5,-8652
80081e0c:	1009883a 	mov	r4,r2
80081e10:	00831280 	call	80083128 <sscanf>
80081e14:	10001526 	beq	r2,zero,80081e6c <FlashFindErasedBlocks+0x22c>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
80081e18:	e0bffd17 	ldw	r2,-12(fp)
80081e1c:	10800217 	ldw	r2,8(r2)
80081e20:	10bfffc4 	addi	r2,r2,-1
80081e24:	1007883a 	mov	r3,r2
80081e28:	e0bffb17 	ldw	r2,-20(fp)
80081e2c:	18800336 	bltu	r3,r2,80081e3c <FlashFindErasedBlocks+0x1fc>
        {
        	block_index = block;
80081e30:	e0bffb17 	ldw	r2,-20(fp)
80081e34:	e0bff715 	stw	r2,-36(fp)
        	break;
80081e38:	00001906 	br	80081ea0 <FlashFindErasedBlocks+0x260>
        }
        else 
        {
          printf(" -Block number entered is %d\n", block);
80081e3c:	e0bffb17 	ldw	r2,-20(fp)
80081e40:	100b883a 	mov	r5,r2
80081e44:	012002b4 	movhi	r4,32778
80081e48:	21379304 	addi	r4,r4,-8628
80081e4c:	0082f1c0 	call	80082f1c <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
80081e50:	e0bffd17 	ldw	r2,-12(fp)
80081e54:	10800217 	ldw	r2,8(r2)
80081e58:	10bfffc4 	addi	r2,r2,-1
80081e5c:	100b883a 	mov	r5,r2
80081e60:	012002b4 	movhi	r4,32778
80081e64:	21379b04 	addi	r4,r4,-8596
80081e68:	0082f1c0 	call	80082f1c <printf>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
80081e6c:	e0bff817 	ldw	r2,-32(fp)
80081e70:	10000326 	beq	r2,zero,80081e80 <FlashFindErasedBlocks+0x240>
80081e74:	e0bfff17 	ldw	r2,-4(fp)
80081e78:	10800058 	cmpnei	r2,r2,1
80081e7c:	10000726 	beq	r2,zero,80081e9c <FlashFindErasedBlocks+0x25c>
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
80081e80:	e0bff617 	ldw	r2,-40(fp)
80081e84:	10800044 	addi	r2,r2,1
80081e88:	e0bff615 	stw	r2,-40(fp)
80081e8c:	e0fff617 	ldw	r3,-40(fp)
80081e90:	e0bffe17 	ldw	r2,-8(fp)
80081e94:	18bf7516 	blt	r3,r2,80081c6c <FlashFindErasedBlocks+0x2c>
80081e98:	00000106 	br	80081ea0 <FlashFindErasedBlocks+0x260>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
      break;
80081e9c:	0001883a 	nop
  }

  return block_index;
80081ea0:	e0bff717 	ldw	r2,-36(fp)
}
80081ea4:	e037883a 	mov	sp,fp
80081ea8:	dfc00117 	ldw	ra,4(sp)
80081eac:	df000017 	ldw	fp,0(sp)
80081eb0:	dec00204 	addi	sp,sp,8
80081eb4:	f800283a 	ret

80081eb8 <TestFlash>:
*           indicates which ones are erased.  The flash is closed
*           at the end of the function.
* 
******************************************************************/
static void TestFlash(int mode, int flash_type)
{
80081eb8:	deffeb04 	addi	sp,sp,-84
80081ebc:	dfc01415 	stw	ra,80(sp)
80081ec0:	df001315 	stw	fp,76(sp)
80081ec4:	df001304 	addi	fp,sp,76
80081ec8:	e13ffe15 	stw	r4,-8(fp)
80081ecc:	e17fff15 	stw	r5,-4(fp)
  alt_flash_fd* fd;
  int number_of_regions;
  int block;
  flash_region* regions;
  int ret_code = 0x0;
80081ed0:	e03fed15 	stw	zero,-76(fp)
  char entry[4];
  char flashname[30];
  
  ret_code = GetFlashName(flashname, flash_type);
80081ed4:	e0bff604 	addi	r2,fp,-40
80081ed8:	e17fff17 	ldw	r5,-4(fp)
80081edc:	1009883a 	mov	r4,r2
80081ee0:	00817900 	call	80081790 <GetFlashName>
80081ee4:	e0bfed15 	stw	r2,-76(fp)

  fd = alt_flash_open_dev(flashname);
80081ee8:	e0bff604 	addi	r2,fp,-40
80081eec:	1009883a 	mov	r4,r2
80081ef0:	0098cfc0 	call	80098cfc <alt_flash_open_dev>
80081ef4:	e0bfee15 	stw	r2,-72(fp)
  if (fd)
80081ef8:	e0bfee17 	ldw	r2,-72(fp)
80081efc:	10005726 	beq	r2,zero,8008205c <TestFlash+0x1a4>
  {
    printf(" -Successfully opened %s\n", flashname);
80081f00:	e0bff604 	addi	r2,fp,-40
80081f04:	100b883a 	mov	r5,r2
80081f08:	012002b4 	movhi	r4,32778
80081f0c:	2137f604 	addi	r4,r4,-8232
80081f10:	0082f1c0 	call	80082f1c <printf>
80081f14:	e0bfee17 	ldw	r2,-72(fp)
80081f18:	e0bff015 	stw	r2,-64(fp)
80081f1c:	e0bff404 	addi	r2,fp,-48
80081f20:	e0bff115 	stw	r2,-60(fp)
80081f24:	e0bff304 	addi	r2,fp,-52
80081f28:	e0bff215 	stw	r2,-56(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
80081f2c:	e0bff017 	ldw	r2,-64(fp)
80081f30:	10800717 	ldw	r2,28(r2)
80081f34:	e1bff217 	ldw	r6,-56(fp)
80081f38:	e17ff117 	ldw	r5,-60(fp)
80081f3c:	e13ff017 	ldw	r4,-64(fp)
80081f40:	103ee83a 	callr	r2
    
    /* Get some useful info about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
80081f44:	e0bfed15 	stw	r2,-76(fp)
      
    if (!ret_code)
80081f48:	e0bfed17 	ldw	r2,-76(fp)
80081f4c:	1000481e 	bne	r2,zero,80082070 <TestFlash+0x1b8>
    {
      printf(" -Region 0 contains %d blocks.\n", regions->number_of_blocks);
80081f50:	e0bff417 	ldw	r2,-48(fp)
80081f54:	10800217 	ldw	r2,8(r2)
80081f58:	100b883a 	mov	r5,r2
80081f5c:	012002b4 	movhi	r4,32778
80081f60:	2137fd04 	addi	r4,r4,-8204
80081f64:	0082f1c0 	call	80082f1c <printf>
      
      block = FlashFindErasedBlocks(fd, regions, number_of_regions, mode);
80081f68:	e0bff417 	ldw	r2,-48(fp)
80081f6c:	e0fff317 	ldw	r3,-52(fp)
80081f70:	e1fffe17 	ldw	r7,-8(fp)
80081f74:	180d883a 	mov	r6,r3
80081f78:	100b883a 	mov	r5,r2
80081f7c:	e13fee17 	ldw	r4,-72(fp)
80081f80:	0081c400 	call	80081c40 <FlashFindErasedBlocks>
80081f84:	e0bfef15 	stw	r2,-68(fp)

      /* If we're in TEST mode, ask if this block is okay to test. */
      if(( mode == TEST ) && ( block != QUIT_WITHOUT_TESTING ))
80081f88:	e0bffe17 	ldw	r2,-8(fp)
80081f8c:	10800058 	cmpnei	r2,r2,1
80081f90:	1000371e 	bne	r2,zero,80082070 <TestFlash+0x1b8>
80081f94:	e0bfef17 	ldw	r2,-68(fp)
80081f98:	10bfffe0 	cmpeqi	r2,r2,-1
80081f9c:	1000341e 	bne	r2,zero,80082070 <TestFlash+0x1b8>
      {
        printf(" -Block %d, at address 0x%X identified.\n", block, (regions->offset + (block * regions->block_size)));
80081fa0:	e0bff417 	ldw	r2,-48(fp)
80081fa4:	10c00017 	ldw	r3,0(r2)
80081fa8:	e0bff417 	ldw	r2,-48(fp)
80081fac:	11000317 	ldw	r4,12(r2)
80081fb0:	e0bfef17 	ldw	r2,-68(fp)
80081fb4:	2085383a 	mul	r2,r4,r2
80081fb8:	1885883a 	add	r2,r3,r2
80081fbc:	100d883a 	mov	r6,r2
80081fc0:	e17fef17 	ldw	r5,-68(fp)
80081fc4:	012002b4 	movhi	r4,32778
80081fc8:	21380504 	addi	r4,r4,-8172
80081fcc:	0082f1c0 	call	80082f1c <printf>
        printf(" -Would you like to test this block? (y/n)");
80081fd0:	012002b4 	movhi	r4,32778
80081fd4:	21381004 	addi	r4,r4,-8128
80081fd8:	0082f1c0 	call	80082f1c <printf>

        GetInputString(entry, sizeof(entry), stdin);
80081fdc:	d0a00117 	ldw	r2,-32764(gp)
80081fe0:	10c00117 	ldw	r3,4(r2)
80081fe4:	e0bff504 	addi	r2,fp,-44
80081fe8:	180d883a 	mov	r6,r3
80081fec:	01400104 	movi	r5,4
80081ff0:	1009883a 	mov	r4,r2
80081ff4:	00803b00 	call	800803b0 <GetInputString>

        if ( entry[0] == 'y' && entry[1] == '\n' )
80081ff8:	e0bff503 	ldbu	r2,-44(fp)
80081ffc:	10803fcc 	andi	r2,r2,255
80082000:	1080201c 	xori	r2,r2,128
80082004:	10bfe004 	addi	r2,r2,-128
80082008:	10801e58 	cmpnei	r2,r2,121
8008200c:	1000181e 	bne	r2,zero,80082070 <TestFlash+0x1b8>
80082010:	e0bff543 	ldbu	r2,-43(fp)
80082014:	10803fcc 	andi	r2,r2,255
80082018:	1080201c 	xori	r2,r2,128
8008201c:	10bfe004 	addi	r2,r2,-128
80082020:	10800298 	cmpnei	r2,r2,10
80082024:	1000121e 	bne	r2,zero,80082070 <TestFlash+0x1b8>
        {
          /* Test that Flash! */
          FlashRunTests(fd, block, regions);
80082028:	e0bff417 	ldw	r2,-48(fp)
8008202c:	100d883a 	mov	r6,r2
80082030:	e17fef17 	ldw	r5,-68(fp)
80082034:	e13fee17 	ldw	r4,-72(fp)
80082038:	00816640 	call	80081664 <FlashRunTests>
          printf(" -Closing flash device \"%s\".\n", flashname);
8008203c:	e0bff604 	addi	r2,fp,-40
80082040:	100b883a 	mov	r5,r2
80082044:	012002b4 	movhi	r4,32778
80082048:	21381b04 	addi	r4,r4,-8084
8008204c:	0082f1c0 	call	80082f1c <printf>
          alt_flash_close_dev(fd);
80082050:	e13fee17 	ldw	r4,-72(fp)
80082054:	0098d640 	call	80098d64 <alt_flash_close_dev>
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
  }
}
80082058:	00000506 	br	80082070 <TestFlash+0x1b8>
      }
    }
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
8008205c:	e0bff604 	addi	r2,fp,-40
80082060:	100b883a 	mov	r5,r2
80082064:	012002b4 	movhi	r4,32778
80082068:	21382304 	addi	r4,r4,-8052
8008206c:	0082f1c0 	call	80082f1c <printf>
  }
}
80082070:	0001883a 	nop
80082074:	e037883a 	mov	sp,fp
80082078:	dfc00117 	ldw	ra,4(sp)
8008207c:	df000017 	ldw	fp,0(sp)
80082080:	dec00204 	addi	sp,sp,8
80082084:	f800283a 	ret

80082088 <TopMenu>:
*
*  Purpose: Generates the top level menu.
* 
******************************************************************/
static int TopMenu( void )
{
80082088:	defffd04 	addi	sp,sp,-12
8008208c:	dfc00215 	stw	ra,8(sp)
80082090:	df000115 	stw	fp,4(sp)
80082094:	df000104 	addi	fp,sp,4
  char ch;

  /* Print the top-level menu to stdout */
  while (1)
  {
    MenuBegin("      Memory Test Main Menu");
80082098:	012002b4 	movhi	r4,32778
8008209c:	21382a04 	addi	r4,r4,-8024
800820a0:	008030c0 	call	8008030c <MenuBegin>
    MenuItem( 'a', "Test RAM" );
800820a4:	016002b4 	movhi	r5,32778
800820a8:	29783104 	addi	r5,r5,-7996
800820ac:	01001844 	movi	r4,97
800820b0:	00803640 	call	80080364 <MenuItem>
    MenuItem( 'b', "Test Flash");
800820b4:	016002b4 	movhi	r5,32778
800820b8:	29783404 	addi	r5,r5,-7984
800820bc:	01001884 	movi	r4,98
800820c0:	00803640 	call	80080364 <MenuItem>
#ifdef EPCS_CONTROLLER_NAME    
    MenuItem( 'c', "Test EPCS Serial Flash");
    ch = MenuEnd( 'a', 'c' );    
#else
    ch = MenuEnd( 'a', 'b' );
800820c4:	01401884 	movi	r5,98
800820c8:	01001844 	movi	r4,97
800820cc:	00804400 	call	80080440 <MenuEnd>
800820d0:	e0bfff05 	stb	r2,-4(fp)
#endif /* EPCS_CONTROLLER_NAME */

    switch(ch)
800820d4:	e0bfff07 	ldb	r2,-4(fp)
800820d8:	10bfe7c4 	addi	r2,r2,-97
800820dc:	10c00468 	cmpgeui	r3,r2,17
800820e0:	1800241e 	bne	r3,zero,80082174 <TopMenu+0xec>
800820e4:	100690ba 	slli	r3,r2,2
800820e8:	00a00234 	movhi	r2,32776
800820ec:	10883f04 	addi	r2,r2,8444
800820f0:	1885883a 	add	r2,r3,r2
800820f4:	10800017 	ldw	r2,0(r2)
800820f8:	1000683a 	jmp	r2
800820fc:	80082140 	call	88008214 <__alt_data_end+0x7f0b214>
80082100:	80082148 	cmpgei	zero,r16,8325
80082104:	80082174 	orhi	zero,r16,8325
80082108:	80082174 	orhi	zero,r16,8325
8008210c:	80082158 	cmpnei	zero,r16,8325
80082110:	80082174 	orhi	zero,r16,8325
80082114:	80082174 	orhi	zero,r16,8325
80082118:	80082174 	orhi	zero,r16,8325
8008211c:	80082174 	orhi	zero,r16,8325
80082120:	80082174 	orhi	zero,r16,8325
80082124:	80082174 	orhi	zero,r16,8325
80082128:	80082174 	orhi	zero,r16,8325
8008212c:	80082164 	muli	zero,r16,8325
80082130:	80082174 	orhi	zero,r16,8325
80082134:	80082174 	orhi	zero,r16,8325
80082138:	80082174 	orhi	zero,r16,8325
8008213c:	8008218c 	andi	zero,r16,8326
    {
      MenuCase('a',TestRam());
80082140:	0080c700 	call	80080c70 <TestRam>
80082144:	00001206 	br	80082190 <TopMenu+0x108>
      MenuCase('b',TestFlash(TEST, CFI));
80082148:	014000c4 	movi	r5,3
8008214c:	01000044 	movi	r4,1
80082150:	0081eb80 	call	80081eb8 <TestFlash>
80082154:	00000e06 	br	80082190 <TopMenu+0x108>
      MenuCase('e',FlashErase(CFI));       /* hidden option */
80082158:	010000c4 	movi	r4,3
8008215c:	00819100 	call	80081910 <FlashErase>
80082160:	00000b06 	br	80082190 <TopMenu+0x108>
      MenuCase('m',TestFlash(SHOWMAP, CFI)); /* hidden option */
80082164:	014000c4 	movi	r5,3
80082168:	01000084 	movi	r4,2
8008216c:	0081eb80 	call	80081eb8 <TestFlash>
80082170:	00000706 	br	80082190 <TopMenu+0x108>
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
80082174:	e0bfff07 	ldb	r2,-4(fp)
80082178:	100b883a 	mov	r5,r2
8008217c:	012002b4 	movhi	r4,32778
80082180:	21383704 	addi	r4,r4,-7972
80082184:	0082f1c0 	call	80082f1c <printf>
80082188:	00000106 	br	80082190 <TopMenu+0x108>
#ifdef EPCS_CONTROLLER_NAME    
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
8008218c:	0001883a 	nop
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
    }
    if (ch == 'q')
80082190:	e0bfff07 	ldb	r2,-4(fp)
80082194:	10801c58 	cmpnei	r2,r2,113
80082198:	10001026 	beq	r2,zero,800821dc <TopMenu+0x154>
      break;
    printf("\nPress enter to continue...\n");
8008219c:	012002b4 	movhi	r4,32778
800821a0:	21384504 	addi	r4,r4,-7916
800821a4:	00830380 	call	80083038 <puts>
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));
800821a8:	0001883a 	nop
800821ac:	d0a00117 	ldw	r2,-32764(gp)
800821b0:	10800117 	ldw	r2,4(r2)
800821b4:	1009883a 	mov	r4,r2
800821b8:	008246c0 	call	8008246c <getc>
800821bc:	e0bfff05 	stb	r2,-4(fp)
800821c0:	e0bfff07 	ldb	r2,-4(fp)
800821c4:	108002a0 	cmpeqi	r2,r2,10
800821c8:	103fb31e 	bne	r2,zero,80082098 <TopMenu+0x10>
800821cc:	e0bfff07 	ldb	r2,-4(fp)
800821d0:	10bfffd8 	cmpnei	r2,r2,-1
800821d4:	103ff51e 	bne	r2,zero,800821ac <TopMenu+0x124>

  }
800821d8:	003faf06 	br	80082098 <TopMenu+0x10>
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
    }
    if (ch == 'q')
      break;
800821dc:	0001883a 	nop
    printf("\nPress enter to continue...\n");
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));

  }
  return (ch);
800821e0:	e0bfff07 	ldb	r2,-4(fp)
}
800821e4:	e037883a 	mov	sp,fp
800821e8:	dfc00117 	ldw	ra,4(sp)
800821ec:	df000017 	ldw	fp,0(sp)
800821f0:	dec00204 	addi	sp,sp,8
800821f4:	f800283a 	ret

800821f8 <main>:
*  Purpose: Continually prints the menu and performs the actions
*           requested by the user.
* 
******************************************************************/
int main(void)
{
800821f8:	defffd04 	addi	sp,sp,-12
800821fc:	dfc00215 	stw	ra,8(sp)
80082200:	df000115 	stw	fp,4(sp)
80082204:	df000104 	addi	fp,sp,4

  int ch;

  /* Print the Header */
  MenuHeader();
80082208:	00802900 	call	80080290 <MenuHeader>
  /* Print the menu and do what the user requests, until they hit 'q' */
  while (1)
  {
    ch = TopMenu();
8008220c:	00820880 	call	80082088 <TopMenu>
80082210:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
80082214:	e0bfff17 	ldw	r2,-4(fp)
80082218:	10801c58 	cmpnei	r2,r2,113
8008221c:	103ffb1e 	bne	r2,zero,8008220c <main+0x14>
    {
      printf( "\nExiting from Memory Test.\n");
80082220:	012002b4 	movhi	r4,32778
80082224:	21384c04 	addi	r4,r4,-7888
80082228:	00830380 	call	80083038 <puts>
      break;
8008222c:	0001883a 	nop
    }
  }
  return (0);
80082230:	0005883a 	mov	r2,zero
}
80082234:	e037883a 	mov	sp,fp
80082238:	dfc00117 	ldw	ra,4(sp)
8008223c:	df000017 	ldw	fp,0(sp)
80082240:	dec00204 	addi	sp,sp,8
80082244:	f800283a 	ret

80082248 <__divsi3>:
80082248:	20001b16 	blt	r4,zero,800822b8 <__divsi3+0x70>
8008224c:	000f883a 	mov	r7,zero
80082250:	28001616 	blt	r5,zero,800822ac <__divsi3+0x64>
80082254:	200d883a 	mov	r6,r4
80082258:	29001a2e 	bgeu	r5,r4,800822c4 <__divsi3+0x7c>
8008225c:	00800804 	movi	r2,32
80082260:	00c00044 	movi	r3,1
80082264:	00000106 	br	8008226c <__divsi3+0x24>
80082268:	10000d26 	beq	r2,zero,800822a0 <__divsi3+0x58>
8008226c:	294b883a 	add	r5,r5,r5
80082270:	10bfffc4 	addi	r2,r2,-1
80082274:	18c7883a 	add	r3,r3,r3
80082278:	293ffb36 	bltu	r5,r4,80082268 <__divsi3+0x20>
8008227c:	0005883a 	mov	r2,zero
80082280:	18000726 	beq	r3,zero,800822a0 <__divsi3+0x58>
80082284:	0005883a 	mov	r2,zero
80082288:	31400236 	bltu	r6,r5,80082294 <__divsi3+0x4c>
8008228c:	314dc83a 	sub	r6,r6,r5
80082290:	10c4b03a 	or	r2,r2,r3
80082294:	1806d07a 	srli	r3,r3,1
80082298:	280ad07a 	srli	r5,r5,1
8008229c:	183ffa1e 	bne	r3,zero,80082288 <__divsi3+0x40>
800822a0:	38000126 	beq	r7,zero,800822a8 <__divsi3+0x60>
800822a4:	0085c83a 	sub	r2,zero,r2
800822a8:	f800283a 	ret
800822ac:	014bc83a 	sub	r5,zero,r5
800822b0:	39c0005c 	xori	r7,r7,1
800822b4:	003fe706 	br	80082254 <__divsi3+0xc>
800822b8:	0109c83a 	sub	r4,zero,r4
800822bc:	01c00044 	movi	r7,1
800822c0:	003fe306 	br	80082250 <__divsi3+0x8>
800822c4:	00c00044 	movi	r3,1
800822c8:	003fee06 	br	80082284 <__divsi3+0x3c>

800822cc <__modsi3>:
800822cc:	20001716 	blt	r4,zero,8008232c <__modsi3+0x60>
800822d0:	000f883a 	mov	r7,zero
800822d4:	2005883a 	mov	r2,r4
800822d8:	28001216 	blt	r5,zero,80082324 <__modsi3+0x58>
800822dc:	2900162e 	bgeu	r5,r4,80082338 <__modsi3+0x6c>
800822e0:	01800804 	movi	r6,32
800822e4:	00c00044 	movi	r3,1
800822e8:	00000106 	br	800822f0 <__modsi3+0x24>
800822ec:	30000a26 	beq	r6,zero,80082318 <__modsi3+0x4c>
800822f0:	294b883a 	add	r5,r5,r5
800822f4:	31bfffc4 	addi	r6,r6,-1
800822f8:	18c7883a 	add	r3,r3,r3
800822fc:	293ffb36 	bltu	r5,r4,800822ec <__modsi3+0x20>
80082300:	18000526 	beq	r3,zero,80082318 <__modsi3+0x4c>
80082304:	1806d07a 	srli	r3,r3,1
80082308:	11400136 	bltu	r2,r5,80082310 <__modsi3+0x44>
8008230c:	1145c83a 	sub	r2,r2,r5
80082310:	280ad07a 	srli	r5,r5,1
80082314:	183ffb1e 	bne	r3,zero,80082304 <__modsi3+0x38>
80082318:	38000126 	beq	r7,zero,80082320 <__modsi3+0x54>
8008231c:	0085c83a 	sub	r2,zero,r2
80082320:	f800283a 	ret
80082324:	014bc83a 	sub	r5,zero,r5
80082328:	003fec06 	br	800822dc <__modsi3+0x10>
8008232c:	0109c83a 	sub	r4,zero,r4
80082330:	01c00044 	movi	r7,1
80082334:	003fe706 	br	800822d4 <__modsi3+0x8>
80082338:	00c00044 	movi	r3,1
8008233c:	003ff106 	br	80082304 <__modsi3+0x38>

80082340 <__udivsi3>:
80082340:	200d883a 	mov	r6,r4
80082344:	2900152e 	bgeu	r5,r4,8008239c <__udivsi3+0x5c>
80082348:	28001416 	blt	r5,zero,8008239c <__udivsi3+0x5c>
8008234c:	00800804 	movi	r2,32
80082350:	00c00044 	movi	r3,1
80082354:	00000206 	br	80082360 <__udivsi3+0x20>
80082358:	10000e26 	beq	r2,zero,80082394 <__udivsi3+0x54>
8008235c:	28000516 	blt	r5,zero,80082374 <__udivsi3+0x34>
80082360:	294b883a 	add	r5,r5,r5
80082364:	10bfffc4 	addi	r2,r2,-1
80082368:	18c7883a 	add	r3,r3,r3
8008236c:	293ffa36 	bltu	r5,r4,80082358 <__udivsi3+0x18>
80082370:	18000826 	beq	r3,zero,80082394 <__udivsi3+0x54>
80082374:	0005883a 	mov	r2,zero
80082378:	31400236 	bltu	r6,r5,80082384 <__udivsi3+0x44>
8008237c:	314dc83a 	sub	r6,r6,r5
80082380:	10c4b03a 	or	r2,r2,r3
80082384:	1806d07a 	srli	r3,r3,1
80082388:	280ad07a 	srli	r5,r5,1
8008238c:	183ffa1e 	bne	r3,zero,80082378 <__udivsi3+0x38>
80082390:	f800283a 	ret
80082394:	0005883a 	mov	r2,zero
80082398:	f800283a 	ret
8008239c:	00c00044 	movi	r3,1
800823a0:	003ff406 	br	80082374 <__udivsi3+0x34>

800823a4 <__umodsi3>:
800823a4:	2005883a 	mov	r2,r4
800823a8:	2900122e 	bgeu	r5,r4,800823f4 <__umodsi3+0x50>
800823ac:	28001116 	blt	r5,zero,800823f4 <__umodsi3+0x50>
800823b0:	01800804 	movi	r6,32
800823b4:	00c00044 	movi	r3,1
800823b8:	00000206 	br	800823c4 <__umodsi3+0x20>
800823bc:	30000c26 	beq	r6,zero,800823f0 <__umodsi3+0x4c>
800823c0:	28000516 	blt	r5,zero,800823d8 <__umodsi3+0x34>
800823c4:	294b883a 	add	r5,r5,r5
800823c8:	31bfffc4 	addi	r6,r6,-1
800823cc:	18c7883a 	add	r3,r3,r3
800823d0:	293ffa36 	bltu	r5,r4,800823bc <__umodsi3+0x18>
800823d4:	18000626 	beq	r3,zero,800823f0 <__umodsi3+0x4c>
800823d8:	1806d07a 	srli	r3,r3,1
800823dc:	11400136 	bltu	r2,r5,800823e4 <__umodsi3+0x40>
800823e0:	1145c83a 	sub	r2,r2,r5
800823e4:	280ad07a 	srli	r5,r5,1
800823e8:	183ffb1e 	bne	r3,zero,800823d8 <__umodsi3+0x34>
800823ec:	f800283a 	ret
800823f0:	f800283a 	ret
800823f4:	00c00044 	movi	r3,1
800823f8:	003ff706 	br	800823d8 <__umodsi3+0x34>

800823fc <_getc_r>:
800823fc:	defffd04 	addi	sp,sp,-12
80082400:	dc000115 	stw	r16,4(sp)
80082404:	dfc00215 	stw	ra,8(sp)
80082408:	2021883a 	mov	r16,r4
8008240c:	20000226 	beq	r4,zero,80082418 <_getc_r+0x1c>
80082410:	20800e17 	ldw	r2,56(r4)
80082414:	10000c26 	beq	r2,zero,80082448 <_getc_r+0x4c>
80082418:	28800117 	ldw	r2,4(r5)
8008241c:	10bfffc4 	addi	r2,r2,-1
80082420:	28800115 	stw	r2,4(r5)
80082424:	10000c16 	blt	r2,zero,80082458 <_getc_r+0x5c>
80082428:	28800017 	ldw	r2,0(r5)
8008242c:	10c00044 	addi	r3,r2,1
80082430:	28c00015 	stw	r3,0(r5)
80082434:	10800003 	ldbu	r2,0(r2)
80082438:	dfc00217 	ldw	ra,8(sp)
8008243c:	dc000117 	ldw	r16,4(sp)
80082440:	dec00304 	addi	sp,sp,12
80082444:	f800283a 	ret
80082448:	d9400015 	stw	r5,0(sp)
8008244c:	0088f040 	call	80088f04 <__sinit>
80082450:	d9400017 	ldw	r5,0(sp)
80082454:	003ff006 	br	80082418 <_getc_r+0x1c>
80082458:	8009883a 	mov	r4,r16
8008245c:	dfc00217 	ldw	ra,8(sp)
80082460:	dc000117 	ldw	r16,4(sp)
80082464:	dec00304 	addi	sp,sp,12
80082468:	008304c1 	jmpi	8008304c <__srget_r>

8008246c <getc>:
8008246c:	00a002b4 	movhi	r2,32778
80082470:	defffd04 	addi	sp,sp,-12
80082474:	1081bf04 	addi	r2,r2,1788
80082478:	dc400115 	stw	r17,4(sp)
8008247c:	14400017 	ldw	r17,0(r2)
80082480:	dc000015 	stw	r16,0(sp)
80082484:	dfc00215 	stw	ra,8(sp)
80082488:	2021883a 	mov	r16,r4
8008248c:	88000226 	beq	r17,zero,80082498 <getc+0x2c>
80082490:	88800e17 	ldw	r2,56(r17)
80082494:	10000d26 	beq	r2,zero,800824cc <getc+0x60>
80082498:	80800117 	ldw	r2,4(r16)
8008249c:	10bfffc4 	addi	r2,r2,-1
800824a0:	80800115 	stw	r2,4(r16)
800824a4:	10000c16 	blt	r2,zero,800824d8 <getc+0x6c>
800824a8:	80800017 	ldw	r2,0(r16)
800824ac:	10c00044 	addi	r3,r2,1
800824b0:	80c00015 	stw	r3,0(r16)
800824b4:	10800003 	ldbu	r2,0(r2)
800824b8:	dfc00217 	ldw	ra,8(sp)
800824bc:	dc400117 	ldw	r17,4(sp)
800824c0:	dc000017 	ldw	r16,0(sp)
800824c4:	dec00304 	addi	sp,sp,12
800824c8:	f800283a 	ret
800824cc:	8809883a 	mov	r4,r17
800824d0:	0088f040 	call	80088f04 <__sinit>
800824d4:	003ff006 	br	80082498 <getc+0x2c>
800824d8:	800b883a 	mov	r5,r16
800824dc:	8809883a 	mov	r4,r17
800824e0:	dfc00217 	ldw	ra,8(sp)
800824e4:	dc400117 	ldw	r17,4(sp)
800824e8:	dc000017 	ldw	r16,0(sp)
800824ec:	dec00304 	addi	sp,sp,12
800824f0:	008304c1 	jmpi	8008304c <__srget_r>

800824f4 <malloc>:
800824f4:	00a002b4 	movhi	r2,32778
800824f8:	1081bf04 	addi	r2,r2,1788
800824fc:	200b883a 	mov	r5,r4
80082500:	11000017 	ldw	r4,0(r2)
80082504:	008251c1 	jmpi	8008251c <_malloc_r>

80082508 <free>:
80082508:	00a002b4 	movhi	r2,32778
8008250c:	1081bf04 	addi	r2,r2,1788
80082510:	200b883a 	mov	r5,r4
80082514:	11000017 	ldw	r4,0(r2)
80082518:	00890781 	jmpi	80089078 <_free_r>

8008251c <_malloc_r>:
8008251c:	defff504 	addi	sp,sp,-44
80082520:	dc800315 	stw	r18,12(sp)
80082524:	dfc00a15 	stw	ra,40(sp)
80082528:	df000915 	stw	fp,36(sp)
8008252c:	ddc00815 	stw	r23,32(sp)
80082530:	dd800715 	stw	r22,28(sp)
80082534:	dd400615 	stw	r21,24(sp)
80082538:	dd000515 	stw	r20,20(sp)
8008253c:	dcc00415 	stw	r19,16(sp)
80082540:	dc400215 	stw	r17,8(sp)
80082544:	dc000115 	stw	r16,4(sp)
80082548:	288002c4 	addi	r2,r5,11
8008254c:	00c00584 	movi	r3,22
80082550:	2025883a 	mov	r18,r4
80082554:	18807f2e 	bgeu	r3,r2,80082754 <_malloc_r+0x238>
80082558:	047ffe04 	movi	r17,-8
8008255c:	1462703a 	and	r17,r2,r17
80082560:	8800a316 	blt	r17,zero,800827f0 <_malloc_r+0x2d4>
80082564:	8940a236 	bltu	r17,r5,800827f0 <_malloc_r+0x2d4>
80082568:	00991fc0 	call	800991fc <__malloc_lock>
8008256c:	00807dc4 	movi	r2,503
80082570:	1441e92e 	bgeu	r2,r17,80082d18 <_malloc_r+0x7fc>
80082574:	8804d27a 	srli	r2,r17,9
80082578:	1000a126 	beq	r2,zero,80082800 <_malloc_r+0x2e4>
8008257c:	00c00104 	movi	r3,4
80082580:	18811e36 	bltu	r3,r2,800829fc <_malloc_r+0x4e0>
80082584:	8804d1ba 	srli	r2,r17,6
80082588:	12000e44 	addi	r8,r2,57
8008258c:	11c00e04 	addi	r7,r2,56
80082590:	4209883a 	add	r4,r8,r8
80082594:	04e002b4 	movhi	r19,32778
80082598:	2109883a 	add	r4,r4,r4
8008259c:	9cfbd404 	addi	r19,r19,-4272
800825a0:	2109883a 	add	r4,r4,r4
800825a4:	9909883a 	add	r4,r19,r4
800825a8:	24000117 	ldw	r16,4(r4)
800825ac:	213ffe04 	addi	r4,r4,-8
800825b0:	24009726 	beq	r4,r16,80082810 <_malloc_r+0x2f4>
800825b4:	80800117 	ldw	r2,4(r16)
800825b8:	01bfff04 	movi	r6,-4
800825bc:	014003c4 	movi	r5,15
800825c0:	1184703a 	and	r2,r2,r6
800825c4:	1447c83a 	sub	r3,r2,r17
800825c8:	28c00716 	blt	r5,r3,800825e8 <_malloc_r+0xcc>
800825cc:	1800920e 	bge	r3,zero,80082818 <_malloc_r+0x2fc>
800825d0:	84000317 	ldw	r16,12(r16)
800825d4:	24008e26 	beq	r4,r16,80082810 <_malloc_r+0x2f4>
800825d8:	80800117 	ldw	r2,4(r16)
800825dc:	1184703a 	and	r2,r2,r6
800825e0:	1447c83a 	sub	r3,r2,r17
800825e4:	28fff90e 	bge	r5,r3,800825cc <_malloc_r+0xb0>
800825e8:	3809883a 	mov	r4,r7
800825ec:	01a002b4 	movhi	r6,32778
800825f0:	9c000417 	ldw	r16,16(r19)
800825f4:	31bbd404 	addi	r6,r6,-4272
800825f8:	32000204 	addi	r8,r6,8
800825fc:	82013426 	beq	r16,r8,80082ad0 <_malloc_r+0x5b4>
80082600:	80c00117 	ldw	r3,4(r16)
80082604:	00bfff04 	movi	r2,-4
80082608:	188e703a 	and	r7,r3,r2
8008260c:	3c45c83a 	sub	r2,r7,r17
80082610:	00c003c4 	movi	r3,15
80082614:	18811f16 	blt	r3,r2,80082a94 <_malloc_r+0x578>
80082618:	32000515 	stw	r8,20(r6)
8008261c:	32000415 	stw	r8,16(r6)
80082620:	10007f0e 	bge	r2,zero,80082820 <_malloc_r+0x304>
80082624:	00807fc4 	movi	r2,511
80082628:	11c0fd36 	bltu	r2,r7,80082a20 <_malloc_r+0x504>
8008262c:	3806d0fa 	srli	r3,r7,3
80082630:	01c00044 	movi	r7,1
80082634:	30800117 	ldw	r2,4(r6)
80082638:	19400044 	addi	r5,r3,1
8008263c:	294b883a 	add	r5,r5,r5
80082640:	1807d0ba 	srai	r3,r3,2
80082644:	294b883a 	add	r5,r5,r5
80082648:	294b883a 	add	r5,r5,r5
8008264c:	298b883a 	add	r5,r5,r6
80082650:	38c6983a 	sll	r3,r7,r3
80082654:	29c00017 	ldw	r7,0(r5)
80082658:	2a7ffe04 	addi	r9,r5,-8
8008265c:	1886b03a 	or	r3,r3,r2
80082660:	82400315 	stw	r9,12(r16)
80082664:	81c00215 	stw	r7,8(r16)
80082668:	30c00115 	stw	r3,4(r6)
8008266c:	2c000015 	stw	r16,0(r5)
80082670:	3c000315 	stw	r16,12(r7)
80082674:	2005d0ba 	srai	r2,r4,2
80082678:	01400044 	movi	r5,1
8008267c:	288a983a 	sll	r5,r5,r2
80082680:	19406f36 	bltu	r3,r5,80082840 <_malloc_r+0x324>
80082684:	28c4703a 	and	r2,r5,r3
80082688:	10000a1e 	bne	r2,zero,800826b4 <_malloc_r+0x198>
8008268c:	00bfff04 	movi	r2,-4
80082690:	294b883a 	add	r5,r5,r5
80082694:	2088703a 	and	r4,r4,r2
80082698:	28c4703a 	and	r2,r5,r3
8008269c:	21000104 	addi	r4,r4,4
800826a0:	1000041e 	bne	r2,zero,800826b4 <_malloc_r+0x198>
800826a4:	294b883a 	add	r5,r5,r5
800826a8:	28c4703a 	and	r2,r5,r3
800826ac:	21000104 	addi	r4,r4,4
800826b0:	103ffc26 	beq	r2,zero,800826a4 <_malloc_r+0x188>
800826b4:	02bfff04 	movi	r10,-4
800826b8:	024003c4 	movi	r9,15
800826bc:	21800044 	addi	r6,r4,1
800826c0:	318d883a 	add	r6,r6,r6
800826c4:	318d883a 	add	r6,r6,r6
800826c8:	318d883a 	add	r6,r6,r6
800826cc:	998d883a 	add	r6,r19,r6
800826d0:	333ffe04 	addi	r12,r6,-8
800826d4:	2017883a 	mov	r11,r4
800826d8:	31800104 	addi	r6,r6,4
800826dc:	34000017 	ldw	r16,0(r6)
800826e0:	31fffd04 	addi	r7,r6,-12
800826e4:	81c0041e 	bne	r16,r7,800826f8 <_malloc_r+0x1dc>
800826e8:	0000fb06 	br	80082ad8 <_malloc_r+0x5bc>
800826ec:	1801030e 	bge	r3,zero,80082afc <_malloc_r+0x5e0>
800826f0:	84000317 	ldw	r16,12(r16)
800826f4:	81c0f826 	beq	r16,r7,80082ad8 <_malloc_r+0x5bc>
800826f8:	80800117 	ldw	r2,4(r16)
800826fc:	1284703a 	and	r2,r2,r10
80082700:	1447c83a 	sub	r3,r2,r17
80082704:	48fff90e 	bge	r9,r3,800826ec <_malloc_r+0x1d0>
80082708:	80800317 	ldw	r2,12(r16)
8008270c:	81000217 	ldw	r4,8(r16)
80082710:	89400054 	ori	r5,r17,1
80082714:	81400115 	stw	r5,4(r16)
80082718:	20800315 	stw	r2,12(r4)
8008271c:	11000215 	stw	r4,8(r2)
80082720:	8463883a 	add	r17,r16,r17
80082724:	9c400515 	stw	r17,20(r19)
80082728:	9c400415 	stw	r17,16(r19)
8008272c:	18800054 	ori	r2,r3,1
80082730:	88800115 	stw	r2,4(r17)
80082734:	8a000315 	stw	r8,12(r17)
80082738:	8a000215 	stw	r8,8(r17)
8008273c:	88e3883a 	add	r17,r17,r3
80082740:	88c00015 	stw	r3,0(r17)
80082744:	9009883a 	mov	r4,r18
80082748:	00992200 	call	80099220 <__malloc_unlock>
8008274c:	80800204 	addi	r2,r16,8
80082750:	00001b06 	br	800827c0 <_malloc_r+0x2a4>
80082754:	04400404 	movi	r17,16
80082758:	89402536 	bltu	r17,r5,800827f0 <_malloc_r+0x2d4>
8008275c:	00991fc0 	call	800991fc <__malloc_lock>
80082760:	00800184 	movi	r2,6
80082764:	01000084 	movi	r4,2
80082768:	04e002b4 	movhi	r19,32778
8008276c:	1085883a 	add	r2,r2,r2
80082770:	9cfbd404 	addi	r19,r19,-4272
80082774:	1085883a 	add	r2,r2,r2
80082778:	9885883a 	add	r2,r19,r2
8008277c:	14000117 	ldw	r16,4(r2)
80082780:	10fffe04 	addi	r3,r2,-8
80082784:	80c0d926 	beq	r16,r3,80082aec <_malloc_r+0x5d0>
80082788:	80c00117 	ldw	r3,4(r16)
8008278c:	81000317 	ldw	r4,12(r16)
80082790:	00bfff04 	movi	r2,-4
80082794:	1884703a 	and	r2,r3,r2
80082798:	81400217 	ldw	r5,8(r16)
8008279c:	8085883a 	add	r2,r16,r2
800827a0:	10c00117 	ldw	r3,4(r2)
800827a4:	29000315 	stw	r4,12(r5)
800827a8:	21400215 	stw	r5,8(r4)
800827ac:	18c00054 	ori	r3,r3,1
800827b0:	10c00115 	stw	r3,4(r2)
800827b4:	9009883a 	mov	r4,r18
800827b8:	00992200 	call	80099220 <__malloc_unlock>
800827bc:	80800204 	addi	r2,r16,8
800827c0:	dfc00a17 	ldw	ra,40(sp)
800827c4:	df000917 	ldw	fp,36(sp)
800827c8:	ddc00817 	ldw	r23,32(sp)
800827cc:	dd800717 	ldw	r22,28(sp)
800827d0:	dd400617 	ldw	r21,24(sp)
800827d4:	dd000517 	ldw	r20,20(sp)
800827d8:	dcc00417 	ldw	r19,16(sp)
800827dc:	dc800317 	ldw	r18,12(sp)
800827e0:	dc400217 	ldw	r17,8(sp)
800827e4:	dc000117 	ldw	r16,4(sp)
800827e8:	dec00b04 	addi	sp,sp,44
800827ec:	f800283a 	ret
800827f0:	00800304 	movi	r2,12
800827f4:	90800015 	stw	r2,0(r18)
800827f8:	0005883a 	mov	r2,zero
800827fc:	003ff006 	br	800827c0 <_malloc_r+0x2a4>
80082800:	01002004 	movi	r4,128
80082804:	02001004 	movi	r8,64
80082808:	01c00fc4 	movi	r7,63
8008280c:	003f6106 	br	80082594 <_malloc_r+0x78>
80082810:	4009883a 	mov	r4,r8
80082814:	003f7506 	br	800825ec <_malloc_r+0xd0>
80082818:	81000317 	ldw	r4,12(r16)
8008281c:	003fde06 	br	80082798 <_malloc_r+0x27c>
80082820:	81c5883a 	add	r2,r16,r7
80082824:	11400117 	ldw	r5,4(r2)
80082828:	9009883a 	mov	r4,r18
8008282c:	29400054 	ori	r5,r5,1
80082830:	11400115 	stw	r5,4(r2)
80082834:	00992200 	call	80099220 <__malloc_unlock>
80082838:	80800204 	addi	r2,r16,8
8008283c:	003fe006 	br	800827c0 <_malloc_r+0x2a4>
80082840:	9c000217 	ldw	r16,8(r19)
80082844:	00bfff04 	movi	r2,-4
80082848:	85800117 	ldw	r22,4(r16)
8008284c:	b0ac703a 	and	r22,r22,r2
80082850:	b4400336 	bltu	r22,r17,80082860 <_malloc_r+0x344>
80082854:	b445c83a 	sub	r2,r22,r17
80082858:	00c003c4 	movi	r3,15
8008285c:	18805d16 	blt	r3,r2,800829d4 <_malloc_r+0x4b8>
80082860:	05e002b4 	movhi	r23,32778
80082864:	00a002b4 	movhi	r2,32778
80082868:	1088e104 	addi	r2,r2,9092
8008286c:	bdc1c004 	addi	r23,r23,1792
80082870:	15400017 	ldw	r21,0(r2)
80082874:	b8c00017 	ldw	r3,0(r23)
80082878:	00bfffc4 	movi	r2,-1
8008287c:	858d883a 	add	r6,r16,r22
80082880:	8d6b883a 	add	r21,r17,r21
80082884:	1880ea26 	beq	r3,r2,80082c30 <_malloc_r+0x714>
80082888:	ad4403c4 	addi	r21,r21,4111
8008288c:	00bc0004 	movi	r2,-4096
80082890:	a8aa703a 	and	r21,r21,r2
80082894:	a80b883a 	mov	r5,r21
80082898:	9009883a 	mov	r4,r18
8008289c:	d9800015 	stw	r6,0(sp)
800828a0:	00830d40 	call	800830d4 <_sbrk_r>
800828a4:	1029883a 	mov	r20,r2
800828a8:	00bfffc4 	movi	r2,-1
800828ac:	d9800017 	ldw	r6,0(sp)
800828b0:	a080e826 	beq	r20,r2,80082c54 <_malloc_r+0x738>
800828b4:	a180a636 	bltu	r20,r6,80082b50 <_malloc_r+0x634>
800828b8:	072002b4 	movhi	fp,32778
800828bc:	e708ed04 	addi	fp,fp,9140
800828c0:	e0800017 	ldw	r2,0(fp)
800828c4:	a887883a 	add	r3,r21,r2
800828c8:	e0c00015 	stw	r3,0(fp)
800828cc:	3500e626 	beq	r6,r20,80082c68 <_malloc_r+0x74c>
800828d0:	b9000017 	ldw	r4,0(r23)
800828d4:	00bfffc4 	movi	r2,-1
800828d8:	2080ee26 	beq	r4,r2,80082c94 <_malloc_r+0x778>
800828dc:	a185c83a 	sub	r2,r20,r6
800828e0:	10c5883a 	add	r2,r2,r3
800828e4:	e0800015 	stw	r2,0(fp)
800828e8:	a0c001cc 	andi	r3,r20,7
800828ec:	1800bc26 	beq	r3,zero,80082be0 <_malloc_r+0x6c4>
800828f0:	a0e9c83a 	sub	r20,r20,r3
800828f4:	00840204 	movi	r2,4104
800828f8:	a5000204 	addi	r20,r20,8
800828fc:	10c7c83a 	sub	r3,r2,r3
80082900:	a545883a 	add	r2,r20,r21
80082904:	1083ffcc 	andi	r2,r2,4095
80082908:	18abc83a 	sub	r21,r3,r2
8008290c:	a80b883a 	mov	r5,r21
80082910:	9009883a 	mov	r4,r18
80082914:	00830d40 	call	800830d4 <_sbrk_r>
80082918:	00ffffc4 	movi	r3,-1
8008291c:	10c0e126 	beq	r2,r3,80082ca4 <_malloc_r+0x788>
80082920:	1505c83a 	sub	r2,r2,r20
80082924:	1545883a 	add	r2,r2,r21
80082928:	10800054 	ori	r2,r2,1
8008292c:	e0c00017 	ldw	r3,0(fp)
80082930:	9d000215 	stw	r20,8(r19)
80082934:	a0800115 	stw	r2,4(r20)
80082938:	a8c7883a 	add	r3,r21,r3
8008293c:	e0c00015 	stw	r3,0(fp)
80082940:	84c00e26 	beq	r16,r19,8008297c <_malloc_r+0x460>
80082944:	018003c4 	movi	r6,15
80082948:	3580a72e 	bgeu	r6,r22,80082be8 <_malloc_r+0x6cc>
8008294c:	81400117 	ldw	r5,4(r16)
80082950:	013ffe04 	movi	r4,-8
80082954:	b0bffd04 	addi	r2,r22,-12
80082958:	1104703a 	and	r2,r2,r4
8008295c:	2900004c 	andi	r4,r5,1
80082960:	2088b03a 	or	r4,r4,r2
80082964:	81000115 	stw	r4,4(r16)
80082968:	01400144 	movi	r5,5
8008296c:	8089883a 	add	r4,r16,r2
80082970:	21400115 	stw	r5,4(r4)
80082974:	21400215 	stw	r5,8(r4)
80082978:	3080cd36 	bltu	r6,r2,80082cb0 <_malloc_r+0x794>
8008297c:	00a002b4 	movhi	r2,32778
80082980:	1088e004 	addi	r2,r2,9088
80082984:	11000017 	ldw	r4,0(r2)
80082988:	20c0012e 	bgeu	r4,r3,80082990 <_malloc_r+0x474>
8008298c:	10c00015 	stw	r3,0(r2)
80082990:	00a002b4 	movhi	r2,32778
80082994:	1088df04 	addi	r2,r2,9084
80082998:	11000017 	ldw	r4,0(r2)
8008299c:	9c000217 	ldw	r16,8(r19)
800829a0:	20c0012e 	bgeu	r4,r3,800829a8 <_malloc_r+0x48c>
800829a4:	10c00015 	stw	r3,0(r2)
800829a8:	80c00117 	ldw	r3,4(r16)
800829ac:	00bfff04 	movi	r2,-4
800829b0:	1886703a 	and	r3,r3,r2
800829b4:	1c45c83a 	sub	r2,r3,r17
800829b8:	1c400236 	bltu	r3,r17,800829c4 <_malloc_r+0x4a8>
800829bc:	00c003c4 	movi	r3,15
800829c0:	18800416 	blt	r3,r2,800829d4 <_malloc_r+0x4b8>
800829c4:	9009883a 	mov	r4,r18
800829c8:	00992200 	call	80099220 <__malloc_unlock>
800829cc:	0005883a 	mov	r2,zero
800829d0:	003f7b06 	br	800827c0 <_malloc_r+0x2a4>
800829d4:	88c00054 	ori	r3,r17,1
800829d8:	80c00115 	stw	r3,4(r16)
800829dc:	8463883a 	add	r17,r16,r17
800829e0:	10800054 	ori	r2,r2,1
800829e4:	9c400215 	stw	r17,8(r19)
800829e8:	88800115 	stw	r2,4(r17)
800829ec:	9009883a 	mov	r4,r18
800829f0:	00992200 	call	80099220 <__malloc_unlock>
800829f4:	80800204 	addi	r2,r16,8
800829f8:	003f7106 	br	800827c0 <_malloc_r+0x2a4>
800829fc:	00c00504 	movi	r3,20
80082a00:	18804a2e 	bgeu	r3,r2,80082b2c <_malloc_r+0x610>
80082a04:	00c01504 	movi	r3,84
80082a08:	18806e36 	bltu	r3,r2,80082bc4 <_malloc_r+0x6a8>
80082a0c:	8804d33a 	srli	r2,r17,12
80082a10:	12001bc4 	addi	r8,r2,111
80082a14:	11c01b84 	addi	r7,r2,110
80082a18:	4209883a 	add	r4,r8,r8
80082a1c:	003edd06 	br	80082594 <_malloc_r+0x78>
80082a20:	3804d27a 	srli	r2,r7,9
80082a24:	00c00104 	movi	r3,4
80082a28:	1880442e 	bgeu	r3,r2,80082b3c <_malloc_r+0x620>
80082a2c:	00c00504 	movi	r3,20
80082a30:	18808136 	bltu	r3,r2,80082c38 <_malloc_r+0x71c>
80082a34:	11401704 	addi	r5,r2,92
80082a38:	10c016c4 	addi	r3,r2,91
80082a3c:	294b883a 	add	r5,r5,r5
80082a40:	294b883a 	add	r5,r5,r5
80082a44:	294b883a 	add	r5,r5,r5
80082a48:	994b883a 	add	r5,r19,r5
80082a4c:	28800017 	ldw	r2,0(r5)
80082a50:	01a002b4 	movhi	r6,32778
80082a54:	297ffe04 	addi	r5,r5,-8
80082a58:	31bbd404 	addi	r6,r6,-4272
80082a5c:	28806526 	beq	r5,r2,80082bf4 <_malloc_r+0x6d8>
80082a60:	01bfff04 	movi	r6,-4
80082a64:	10c00117 	ldw	r3,4(r2)
80082a68:	1986703a 	and	r3,r3,r6
80082a6c:	38c0022e 	bgeu	r7,r3,80082a78 <_malloc_r+0x55c>
80082a70:	10800217 	ldw	r2,8(r2)
80082a74:	28bffb1e 	bne	r5,r2,80082a64 <_malloc_r+0x548>
80082a78:	11400317 	ldw	r5,12(r2)
80082a7c:	98c00117 	ldw	r3,4(r19)
80082a80:	81400315 	stw	r5,12(r16)
80082a84:	80800215 	stw	r2,8(r16)
80082a88:	2c000215 	stw	r16,8(r5)
80082a8c:	14000315 	stw	r16,12(r2)
80082a90:	003ef806 	br	80082674 <_malloc_r+0x158>
80082a94:	88c00054 	ori	r3,r17,1
80082a98:	80c00115 	stw	r3,4(r16)
80082a9c:	8463883a 	add	r17,r16,r17
80082aa0:	34400515 	stw	r17,20(r6)
80082aa4:	34400415 	stw	r17,16(r6)
80082aa8:	10c00054 	ori	r3,r2,1
80082aac:	8a000315 	stw	r8,12(r17)
80082ab0:	8a000215 	stw	r8,8(r17)
80082ab4:	88c00115 	stw	r3,4(r17)
80082ab8:	88a3883a 	add	r17,r17,r2
80082abc:	88800015 	stw	r2,0(r17)
80082ac0:	9009883a 	mov	r4,r18
80082ac4:	00992200 	call	80099220 <__malloc_unlock>
80082ac8:	80800204 	addi	r2,r16,8
80082acc:	003f3c06 	br	800827c0 <_malloc_r+0x2a4>
80082ad0:	30c00117 	ldw	r3,4(r6)
80082ad4:	003ee706 	br	80082674 <_malloc_r+0x158>
80082ad8:	5ac00044 	addi	r11,r11,1
80082adc:	588000cc 	andi	r2,r11,3
80082ae0:	31800204 	addi	r6,r6,8
80082ae4:	103efd1e 	bne	r2,zero,800826dc <_malloc_r+0x1c0>
80082ae8:	00002406 	br	80082b7c <_malloc_r+0x660>
80082aec:	14000317 	ldw	r16,12(r2)
80082af0:	143f251e 	bne	r2,r16,80082788 <_malloc_r+0x26c>
80082af4:	21000084 	addi	r4,r4,2
80082af8:	003ebc06 	br	800825ec <_malloc_r+0xd0>
80082afc:	8085883a 	add	r2,r16,r2
80082b00:	10c00117 	ldw	r3,4(r2)
80082b04:	81000317 	ldw	r4,12(r16)
80082b08:	81400217 	ldw	r5,8(r16)
80082b0c:	18c00054 	ori	r3,r3,1
80082b10:	10c00115 	stw	r3,4(r2)
80082b14:	29000315 	stw	r4,12(r5)
80082b18:	21400215 	stw	r5,8(r4)
80082b1c:	9009883a 	mov	r4,r18
80082b20:	00992200 	call	80099220 <__malloc_unlock>
80082b24:	80800204 	addi	r2,r16,8
80082b28:	003f2506 	br	800827c0 <_malloc_r+0x2a4>
80082b2c:	12001704 	addi	r8,r2,92
80082b30:	11c016c4 	addi	r7,r2,91
80082b34:	4209883a 	add	r4,r8,r8
80082b38:	003e9606 	br	80082594 <_malloc_r+0x78>
80082b3c:	3804d1ba 	srli	r2,r7,6
80082b40:	11400e44 	addi	r5,r2,57
80082b44:	10c00e04 	addi	r3,r2,56
80082b48:	294b883a 	add	r5,r5,r5
80082b4c:	003fbc06 	br	80082a40 <_malloc_r+0x524>
80082b50:	84ff5926 	beq	r16,r19,800828b8 <_malloc_r+0x39c>
80082b54:	00a002b4 	movhi	r2,32778
80082b58:	10bbd404 	addi	r2,r2,-4272
80082b5c:	14000217 	ldw	r16,8(r2)
80082b60:	00bfff04 	movi	r2,-4
80082b64:	80c00117 	ldw	r3,4(r16)
80082b68:	1886703a 	and	r3,r3,r2
80082b6c:	003f9106 	br	800829b4 <_malloc_r+0x498>
80082b70:	60800217 	ldw	r2,8(r12)
80082b74:	213fffc4 	addi	r4,r4,-1
80082b78:	1300651e 	bne	r2,r12,80082d10 <_malloc_r+0x7f4>
80082b7c:	208000cc 	andi	r2,r4,3
80082b80:	633ffe04 	addi	r12,r12,-8
80082b84:	103ffa1e 	bne	r2,zero,80082b70 <_malloc_r+0x654>
80082b88:	98800117 	ldw	r2,4(r19)
80082b8c:	0146303a 	nor	r3,zero,r5
80082b90:	1884703a 	and	r2,r3,r2
80082b94:	98800115 	stw	r2,4(r19)
80082b98:	294b883a 	add	r5,r5,r5
80082b9c:	117f2836 	bltu	r2,r5,80082840 <_malloc_r+0x324>
80082ba0:	283f2726 	beq	r5,zero,80082840 <_malloc_r+0x324>
80082ba4:	2886703a 	and	r3,r5,r2
80082ba8:	5809883a 	mov	r4,r11
80082bac:	183ec31e 	bne	r3,zero,800826bc <_malloc_r+0x1a0>
80082bb0:	294b883a 	add	r5,r5,r5
80082bb4:	2886703a 	and	r3,r5,r2
80082bb8:	21000104 	addi	r4,r4,4
80082bbc:	183ffc26 	beq	r3,zero,80082bb0 <_malloc_r+0x694>
80082bc0:	003ebe06 	br	800826bc <_malloc_r+0x1a0>
80082bc4:	00c05504 	movi	r3,340
80082bc8:	18801236 	bltu	r3,r2,80082c14 <_malloc_r+0x6f8>
80082bcc:	8804d3fa 	srli	r2,r17,15
80082bd0:	12001e04 	addi	r8,r2,120
80082bd4:	11c01dc4 	addi	r7,r2,119
80082bd8:	4209883a 	add	r4,r8,r8
80082bdc:	003e6d06 	br	80082594 <_malloc_r+0x78>
80082be0:	00c40004 	movi	r3,4096
80082be4:	003f4606 	br	80082900 <_malloc_r+0x3e4>
80082be8:	00800044 	movi	r2,1
80082bec:	a0800115 	stw	r2,4(r20)
80082bf0:	003f7406 	br	800829c4 <_malloc_r+0x4a8>
80082bf4:	1805d0ba 	srai	r2,r3,2
80082bf8:	01c00044 	movi	r7,1
80082bfc:	30c00117 	ldw	r3,4(r6)
80082c00:	388e983a 	sll	r7,r7,r2
80082c04:	2805883a 	mov	r2,r5
80082c08:	38c6b03a 	or	r3,r7,r3
80082c0c:	30c00115 	stw	r3,4(r6)
80082c10:	003f9b06 	br	80082a80 <_malloc_r+0x564>
80082c14:	00c15504 	movi	r3,1364
80082c18:	18801a36 	bltu	r3,r2,80082c84 <_malloc_r+0x768>
80082c1c:	8804d4ba 	srli	r2,r17,18
80082c20:	12001f44 	addi	r8,r2,125
80082c24:	11c01f04 	addi	r7,r2,124
80082c28:	4209883a 	add	r4,r8,r8
80082c2c:	003e5906 	br	80082594 <_malloc_r+0x78>
80082c30:	ad400404 	addi	r21,r21,16
80082c34:	003f1706 	br	80082894 <_malloc_r+0x378>
80082c38:	00c01504 	movi	r3,84
80082c3c:	18802336 	bltu	r3,r2,80082ccc <_malloc_r+0x7b0>
80082c40:	3804d33a 	srli	r2,r7,12
80082c44:	11401bc4 	addi	r5,r2,111
80082c48:	10c01b84 	addi	r3,r2,110
80082c4c:	294b883a 	add	r5,r5,r5
80082c50:	003f7b06 	br	80082a40 <_malloc_r+0x524>
80082c54:	9c000217 	ldw	r16,8(r19)
80082c58:	00bfff04 	movi	r2,-4
80082c5c:	80c00117 	ldw	r3,4(r16)
80082c60:	1886703a 	and	r3,r3,r2
80082c64:	003f5306 	br	800829b4 <_malloc_r+0x498>
80082c68:	3083ffcc 	andi	r2,r6,4095
80082c6c:	103f181e 	bne	r2,zero,800828d0 <_malloc_r+0x3b4>
80082c70:	99000217 	ldw	r4,8(r19)
80082c74:	b545883a 	add	r2,r22,r21
80082c78:	10800054 	ori	r2,r2,1
80082c7c:	20800115 	stw	r2,4(r4)
80082c80:	003f3e06 	br	8008297c <_malloc_r+0x460>
80082c84:	01003f84 	movi	r4,254
80082c88:	02001fc4 	movi	r8,127
80082c8c:	01c01f84 	movi	r7,126
80082c90:	003e4006 	br	80082594 <_malloc_r+0x78>
80082c94:	00a002b4 	movhi	r2,32778
80082c98:	1081c004 	addi	r2,r2,1792
80082c9c:	15000015 	stw	r20,0(r2)
80082ca0:	003f1106 	br	800828e8 <_malloc_r+0x3cc>
80082ca4:	00800044 	movi	r2,1
80082ca8:	002b883a 	mov	r21,zero
80082cac:	003f1f06 	br	8008292c <_malloc_r+0x410>
80082cb0:	81400204 	addi	r5,r16,8
80082cb4:	9009883a 	mov	r4,r18
80082cb8:	00890780 	call	80089078 <_free_r>
80082cbc:	00a002b4 	movhi	r2,32778
80082cc0:	1088ed04 	addi	r2,r2,9140
80082cc4:	10c00017 	ldw	r3,0(r2)
80082cc8:	003f2c06 	br	8008297c <_malloc_r+0x460>
80082ccc:	00c05504 	movi	r3,340
80082cd0:	18800536 	bltu	r3,r2,80082ce8 <_malloc_r+0x7cc>
80082cd4:	3804d3fa 	srli	r2,r7,15
80082cd8:	11401e04 	addi	r5,r2,120
80082cdc:	10c01dc4 	addi	r3,r2,119
80082ce0:	294b883a 	add	r5,r5,r5
80082ce4:	003f5606 	br	80082a40 <_malloc_r+0x524>
80082ce8:	00c15504 	movi	r3,1364
80082cec:	18800536 	bltu	r3,r2,80082d04 <_malloc_r+0x7e8>
80082cf0:	3804d4ba 	srli	r2,r7,18
80082cf4:	11401f44 	addi	r5,r2,125
80082cf8:	10c01f04 	addi	r3,r2,124
80082cfc:	294b883a 	add	r5,r5,r5
80082d00:	003f4f06 	br	80082a40 <_malloc_r+0x524>
80082d04:	01403f84 	movi	r5,254
80082d08:	00c01f84 	movi	r3,126
80082d0c:	003f4c06 	br	80082a40 <_malloc_r+0x524>
80082d10:	98800117 	ldw	r2,4(r19)
80082d14:	003fa006 	br	80082b98 <_malloc_r+0x67c>
80082d18:	8808d0fa 	srli	r4,r17,3
80082d1c:	20800044 	addi	r2,r4,1
80082d20:	1085883a 	add	r2,r2,r2
80082d24:	003e9006 	br	80082768 <_malloc_r+0x24c>

80082d28 <memcmp>:
80082d28:	01c000c4 	movi	r7,3
80082d2c:	3980192e 	bgeu	r7,r6,80082d94 <memcmp+0x6c>
80082d30:	2144b03a 	or	r2,r4,r5
80082d34:	11c4703a 	and	r2,r2,r7
80082d38:	10000f26 	beq	r2,zero,80082d78 <memcmp+0x50>
80082d3c:	20800003 	ldbu	r2,0(r4)
80082d40:	28c00003 	ldbu	r3,0(r5)
80082d44:	10c0151e 	bne	r2,r3,80082d9c <memcmp+0x74>
80082d48:	31bfff84 	addi	r6,r6,-2
80082d4c:	01ffffc4 	movi	r7,-1
80082d50:	00000406 	br	80082d64 <memcmp+0x3c>
80082d54:	20800003 	ldbu	r2,0(r4)
80082d58:	28c00003 	ldbu	r3,0(r5)
80082d5c:	31bfffc4 	addi	r6,r6,-1
80082d60:	10c00e1e 	bne	r2,r3,80082d9c <memcmp+0x74>
80082d64:	21000044 	addi	r4,r4,1
80082d68:	29400044 	addi	r5,r5,1
80082d6c:	31fff91e 	bne	r6,r7,80082d54 <memcmp+0x2c>
80082d70:	0005883a 	mov	r2,zero
80082d74:	f800283a 	ret
80082d78:	20c00017 	ldw	r3,0(r4)
80082d7c:	28800017 	ldw	r2,0(r5)
80082d80:	18bfee1e 	bne	r3,r2,80082d3c <memcmp+0x14>
80082d84:	31bfff04 	addi	r6,r6,-4
80082d88:	21000104 	addi	r4,r4,4
80082d8c:	29400104 	addi	r5,r5,4
80082d90:	39bff936 	bltu	r7,r6,80082d78 <memcmp+0x50>
80082d94:	303fe91e 	bne	r6,zero,80082d3c <memcmp+0x14>
80082d98:	003ff506 	br	80082d70 <memcmp+0x48>
80082d9c:	10c5c83a 	sub	r2,r2,r3
80082da0:	f800283a 	ret

80082da4 <memcpy>:
80082da4:	defffd04 	addi	sp,sp,-12
80082da8:	dfc00215 	stw	ra,8(sp)
80082dac:	dc400115 	stw	r17,4(sp)
80082db0:	dc000015 	stw	r16,0(sp)
80082db4:	00c003c4 	movi	r3,15
80082db8:	2005883a 	mov	r2,r4
80082dbc:	1980452e 	bgeu	r3,r6,80082ed4 <memcpy+0x130>
80082dc0:	2906b03a 	or	r3,r5,r4
80082dc4:	18c000cc 	andi	r3,r3,3
80082dc8:	1800441e 	bne	r3,zero,80082edc <memcpy+0x138>
80082dcc:	347ffc04 	addi	r17,r6,-16
80082dd0:	8822d13a 	srli	r17,r17,4
80082dd4:	28c00104 	addi	r3,r5,4
80082dd8:	23400104 	addi	r13,r4,4
80082ddc:	8820913a 	slli	r16,r17,4
80082de0:	2b000204 	addi	r12,r5,8
80082de4:	22c00204 	addi	r11,r4,8
80082de8:	84000504 	addi	r16,r16,20
80082dec:	2a800304 	addi	r10,r5,12
80082df0:	22400304 	addi	r9,r4,12
80082df4:	2c21883a 	add	r16,r5,r16
80082df8:	2811883a 	mov	r8,r5
80082dfc:	200f883a 	mov	r7,r4
80082e00:	41000017 	ldw	r4,0(r8)
80082e04:	1fc00017 	ldw	ra,0(r3)
80082e08:	63c00017 	ldw	r15,0(r12)
80082e0c:	39000015 	stw	r4,0(r7)
80082e10:	53800017 	ldw	r14,0(r10)
80082e14:	6fc00015 	stw	ra,0(r13)
80082e18:	5bc00015 	stw	r15,0(r11)
80082e1c:	4b800015 	stw	r14,0(r9)
80082e20:	18c00404 	addi	r3,r3,16
80082e24:	39c00404 	addi	r7,r7,16
80082e28:	42000404 	addi	r8,r8,16
80082e2c:	6b400404 	addi	r13,r13,16
80082e30:	63000404 	addi	r12,r12,16
80082e34:	5ac00404 	addi	r11,r11,16
80082e38:	52800404 	addi	r10,r10,16
80082e3c:	4a400404 	addi	r9,r9,16
80082e40:	1c3fef1e 	bne	r3,r16,80082e00 <memcpy+0x5c>
80082e44:	89c00044 	addi	r7,r17,1
80082e48:	380e913a 	slli	r7,r7,4
80082e4c:	310003cc 	andi	r4,r6,15
80082e50:	02c000c4 	movi	r11,3
80082e54:	11c7883a 	add	r3,r2,r7
80082e58:	29cb883a 	add	r5,r5,r7
80082e5c:	5900212e 	bgeu	r11,r4,80082ee4 <memcpy+0x140>
80082e60:	1813883a 	mov	r9,r3
80082e64:	2811883a 	mov	r8,r5
80082e68:	200f883a 	mov	r7,r4
80082e6c:	42800017 	ldw	r10,0(r8)
80082e70:	4a400104 	addi	r9,r9,4
80082e74:	39ffff04 	addi	r7,r7,-4
80082e78:	4abfff15 	stw	r10,-4(r9)
80082e7c:	42000104 	addi	r8,r8,4
80082e80:	59fffa36 	bltu	r11,r7,80082e6c <memcpy+0xc8>
80082e84:	213fff04 	addi	r4,r4,-4
80082e88:	2008d0ba 	srli	r4,r4,2
80082e8c:	318000cc 	andi	r6,r6,3
80082e90:	21000044 	addi	r4,r4,1
80082e94:	2109883a 	add	r4,r4,r4
80082e98:	2109883a 	add	r4,r4,r4
80082e9c:	1907883a 	add	r3,r3,r4
80082ea0:	290b883a 	add	r5,r5,r4
80082ea4:	30000626 	beq	r6,zero,80082ec0 <memcpy+0x11c>
80082ea8:	198d883a 	add	r6,r3,r6
80082eac:	29c00003 	ldbu	r7,0(r5)
80082eb0:	18c00044 	addi	r3,r3,1
80082eb4:	29400044 	addi	r5,r5,1
80082eb8:	19ffffc5 	stb	r7,-1(r3)
80082ebc:	19bffb1e 	bne	r3,r6,80082eac <memcpy+0x108>
80082ec0:	dfc00217 	ldw	ra,8(sp)
80082ec4:	dc400117 	ldw	r17,4(sp)
80082ec8:	dc000017 	ldw	r16,0(sp)
80082ecc:	dec00304 	addi	sp,sp,12
80082ed0:	f800283a 	ret
80082ed4:	2007883a 	mov	r3,r4
80082ed8:	003ff206 	br	80082ea4 <memcpy+0x100>
80082edc:	2007883a 	mov	r3,r4
80082ee0:	003ff106 	br	80082ea8 <memcpy+0x104>
80082ee4:	200d883a 	mov	r6,r4
80082ee8:	003fee06 	br	80082ea4 <memcpy+0x100>

80082eec <_printf_r>:
80082eec:	defffd04 	addi	sp,sp,-12
80082ef0:	2805883a 	mov	r2,r5
80082ef4:	dfc00015 	stw	ra,0(sp)
80082ef8:	d9800115 	stw	r6,4(sp)
80082efc:	d9c00215 	stw	r7,8(sp)
80082f00:	21400217 	ldw	r5,8(r4)
80082f04:	d9c00104 	addi	r7,sp,4
80082f08:	100d883a 	mov	r6,r2
80082f0c:	0084bac0 	call	80084bac <___vfprintf_internal_r>
80082f10:	dfc00017 	ldw	ra,0(sp)
80082f14:	dec00304 	addi	sp,sp,12
80082f18:	f800283a 	ret

80082f1c <printf>:
80082f1c:	defffc04 	addi	sp,sp,-16
80082f20:	dfc00015 	stw	ra,0(sp)
80082f24:	d9400115 	stw	r5,4(sp)
80082f28:	d9800215 	stw	r6,8(sp)
80082f2c:	d9c00315 	stw	r7,12(sp)
80082f30:	00a002b4 	movhi	r2,32778
80082f34:	1081bf04 	addi	r2,r2,1788
80082f38:	10800017 	ldw	r2,0(r2)
80082f3c:	200b883a 	mov	r5,r4
80082f40:	d9800104 	addi	r6,sp,4
80082f44:	11000217 	ldw	r4,8(r2)
80082f48:	0086da40 	call	80086da4 <__vfprintf_internal>
80082f4c:	dfc00017 	ldw	ra,0(sp)
80082f50:	dec00404 	addi	sp,sp,16
80082f54:	f800283a 	ret

80082f58 <_putchar_r>:
80082f58:	21800217 	ldw	r6,8(r4)
80082f5c:	008b27c1 	jmpi	8008b27c <_putc_r>

80082f60 <putchar>:
80082f60:	00a002b4 	movhi	r2,32778
80082f64:	1081bf04 	addi	r2,r2,1788
80082f68:	200b883a 	mov	r5,r4
80082f6c:	11000017 	ldw	r4,0(r2)
80082f70:	21800217 	ldw	r6,8(r4)
80082f74:	008b27c1 	jmpi	8008b27c <_putc_r>

80082f78 <_puts_r>:
80082f78:	defff604 	addi	sp,sp,-40
80082f7c:	dc000715 	stw	r16,28(sp)
80082f80:	2021883a 	mov	r16,r4
80082f84:	2809883a 	mov	r4,r5
80082f88:	dc400815 	stw	r17,32(sp)
80082f8c:	dfc00915 	stw	ra,36(sp)
80082f90:	2823883a 	mov	r17,r5
80082f94:	00833580 	call	80083358 <strlen>
80082f98:	10c00044 	addi	r3,r2,1
80082f9c:	d8800115 	stw	r2,4(sp)
80082fa0:	00a002b4 	movhi	r2,32778
80082fa4:	10b85404 	addi	r2,r2,-7856
80082fa8:	d8800215 	stw	r2,8(sp)
80082fac:	00800044 	movi	r2,1
80082fb0:	d8800315 	stw	r2,12(sp)
80082fb4:	00800084 	movi	r2,2
80082fb8:	dc400015 	stw	r17,0(sp)
80082fbc:	d8c00615 	stw	r3,24(sp)
80082fc0:	dec00415 	stw	sp,16(sp)
80082fc4:	d8800515 	stw	r2,20(sp)
80082fc8:	80000226 	beq	r16,zero,80082fd4 <_puts_r+0x5c>
80082fcc:	80800e17 	ldw	r2,56(r16)
80082fd0:	10001426 	beq	r2,zero,80083024 <_puts_r+0xac>
80082fd4:	81400217 	ldw	r5,8(r16)
80082fd8:	2880030b 	ldhu	r2,12(r5)
80082fdc:	10c8000c 	andi	r3,r2,8192
80082fe0:	1800061e 	bne	r3,zero,80082ffc <_puts_r+0x84>
80082fe4:	29001917 	ldw	r4,100(r5)
80082fe8:	00f7ffc4 	movi	r3,-8193
80082fec:	10880014 	ori	r2,r2,8192
80082ff0:	20c6703a 	and	r3,r4,r3
80082ff4:	2880030d 	sth	r2,12(r5)
80082ff8:	28c01915 	stw	r3,100(r5)
80082ffc:	d9800404 	addi	r6,sp,16
80083000:	8009883a 	mov	r4,r16
80083004:	00893880 	call	80089388 <__sfvwrite_r>
80083008:	1000091e 	bne	r2,zero,80083030 <_puts_r+0xb8>
8008300c:	00800284 	movi	r2,10
80083010:	dfc00917 	ldw	ra,36(sp)
80083014:	dc400817 	ldw	r17,32(sp)
80083018:	dc000717 	ldw	r16,28(sp)
8008301c:	dec00a04 	addi	sp,sp,40
80083020:	f800283a 	ret
80083024:	8009883a 	mov	r4,r16
80083028:	0088f040 	call	80088f04 <__sinit>
8008302c:	003fe906 	br	80082fd4 <_puts_r+0x5c>
80083030:	00bfffc4 	movi	r2,-1
80083034:	003ff606 	br	80083010 <_puts_r+0x98>

80083038 <puts>:
80083038:	00a002b4 	movhi	r2,32778
8008303c:	1081bf04 	addi	r2,r2,1788
80083040:	200b883a 	mov	r5,r4
80083044:	11000017 	ldw	r4,0(r2)
80083048:	0082f781 	jmpi	80082f78 <_puts_r>

8008304c <__srget_r>:
8008304c:	defffd04 	addi	sp,sp,-12
80083050:	dc400115 	stw	r17,4(sp)
80083054:	dc000015 	stw	r16,0(sp)
80083058:	dfc00215 	stw	ra,8(sp)
8008305c:	2023883a 	mov	r17,r4
80083060:	2821883a 	mov	r16,r5
80083064:	20000226 	beq	r4,zero,80083070 <__srget_r+0x24>
80083068:	20800e17 	ldw	r2,56(r4)
8008306c:	10001026 	beq	r2,zero,800830b0 <__srget_r+0x64>
80083070:	800b883a 	mov	r5,r16
80083074:	8809883a 	mov	r4,r17
80083078:	008b9c40 	call	8008b9c4 <__srefill_r>
8008307c:	10000e1e 	bne	r2,zero,800830b8 <__srget_r+0x6c>
80083080:	80c00017 	ldw	r3,0(r16)
80083084:	80800117 	ldw	r2,4(r16)
80083088:	19000044 	addi	r4,r3,1
8008308c:	10bfffc4 	addi	r2,r2,-1
80083090:	80800115 	stw	r2,4(r16)
80083094:	81000015 	stw	r4,0(r16)
80083098:	18800003 	ldbu	r2,0(r3)
8008309c:	dfc00217 	ldw	ra,8(sp)
800830a0:	dc400117 	ldw	r17,4(sp)
800830a4:	dc000017 	ldw	r16,0(sp)
800830a8:	dec00304 	addi	sp,sp,12
800830ac:	f800283a 	ret
800830b0:	0088f040 	call	80088f04 <__sinit>
800830b4:	003fee06 	br	80083070 <__srget_r+0x24>
800830b8:	00bfffc4 	movi	r2,-1
800830bc:	003ff706 	br	8008309c <__srget_r+0x50>

800830c0 <__srget>:
800830c0:	00a002b4 	movhi	r2,32778
800830c4:	1081bf04 	addi	r2,r2,1788
800830c8:	200b883a 	mov	r5,r4
800830cc:	11000017 	ldw	r4,0(r2)
800830d0:	008304c1 	jmpi	8008304c <__srget_r>

800830d4 <_sbrk_r>:
800830d4:	defffd04 	addi	sp,sp,-12
800830d8:	dc000015 	stw	r16,0(sp)
800830dc:	042002b4 	movhi	r16,32778
800830e0:	dc400115 	stw	r17,4(sp)
800830e4:	8408e204 	addi	r16,r16,9096
800830e8:	2023883a 	mov	r17,r4
800830ec:	2809883a 	mov	r4,r5
800830f0:	dfc00215 	stw	ra,8(sp)
800830f4:	80000015 	stw	zero,0(r16)
800830f8:	00993e00 	call	800993e0 <sbrk>
800830fc:	00ffffc4 	movi	r3,-1
80083100:	10c00526 	beq	r2,r3,80083118 <_sbrk_r+0x44>
80083104:	dfc00217 	ldw	ra,8(sp)
80083108:	dc400117 	ldw	r17,4(sp)
8008310c:	dc000017 	ldw	r16,0(sp)
80083110:	dec00304 	addi	sp,sp,12
80083114:	f800283a 	ret
80083118:	80c00017 	ldw	r3,0(r16)
8008311c:	183ff926 	beq	r3,zero,80083104 <_sbrk_r+0x30>
80083120:	88c00015 	stw	r3,0(r17)
80083124:	003ff706 	br	80083104 <_sbrk_r+0x30>

80083128 <sscanf>:
80083128:	deffe204 	addi	sp,sp,-120
8008312c:	dc001a15 	stw	r16,104(sp)
80083130:	2821883a 	mov	r16,r5
80083134:	dfc01b15 	stw	ra,108(sp)
80083138:	d9801c15 	stw	r6,112(sp)
8008313c:	d9c01d15 	stw	r7,116(sp)
80083140:	00c08104 	movi	r3,516
80083144:	d8c0030d 	sth	r3,12(sp)
80083148:	d9000015 	stw	r4,0(sp)
8008314c:	d9000415 	stw	r4,16(sp)
80083150:	00833580 	call	80083358 <strlen>
80083154:	00e002b4 	movhi	r3,32778
80083158:	18c1bf04 	addi	r3,r3,1788
8008315c:	d8800115 	stw	r2,4(sp)
80083160:	d8800515 	stw	r2,20(sp)
80083164:	19000017 	ldw	r4,0(r3)
80083168:	00a00234 	movhi	r2,32776
8008316c:	108c9c04 	addi	r2,r2,12912
80083170:	d8800815 	stw	r2,32(sp)
80083174:	d9c01c04 	addi	r7,sp,112
80083178:	800d883a 	mov	r6,r16
8008317c:	d80b883a 	mov	r5,sp
80083180:	00bfffc4 	movi	r2,-1
80083184:	d8000c15 	stw	zero,48(sp)
80083188:	d8001115 	stw	zero,68(sp)
8008318c:	d880038d 	sth	r2,14(sp)
80083190:	00833f00 	call	800833f0 <__ssvfscanf_r>
80083194:	dfc01b17 	ldw	ra,108(sp)
80083198:	dc001a17 	ldw	r16,104(sp)
8008319c:	dec01e04 	addi	sp,sp,120
800831a0:	f800283a 	ret

800831a4 <_sscanf_r>:
800831a4:	deffe204 	addi	sp,sp,-120
800831a8:	dc001b15 	stw	r16,108(sp)
800831ac:	2021883a 	mov	r16,r4
800831b0:	dfc01c15 	stw	ra,112(sp)
800831b4:	d9c01d15 	stw	r7,116(sp)
800831b8:	00808104 	movi	r2,516
800831bc:	2809883a 	mov	r4,r5
800831c0:	d9400015 	stw	r5,0(sp)
800831c4:	d9400415 	stw	r5,16(sp)
800831c8:	d9801a15 	stw	r6,104(sp)
800831cc:	d880030d 	sth	r2,12(sp)
800831d0:	00833580 	call	80083358 <strlen>
800831d4:	d8800115 	stw	r2,4(sp)
800831d8:	d8800515 	stw	r2,20(sp)
800831dc:	d9801a17 	ldw	r6,104(sp)
800831e0:	00a00234 	movhi	r2,32776
800831e4:	108c9c04 	addi	r2,r2,12912
800831e8:	d8800815 	stw	r2,32(sp)
800831ec:	d9c01d04 	addi	r7,sp,116
800831f0:	d80b883a 	mov	r5,sp
800831f4:	8009883a 	mov	r4,r16
800831f8:	00bfffc4 	movi	r2,-1
800831fc:	d8000c15 	stw	zero,48(sp)
80083200:	d8001115 	stw	zero,68(sp)
80083204:	d880038d 	sth	r2,14(sp)
80083208:	00833f00 	call	800833f0 <__ssvfscanf_r>
8008320c:	dfc01c17 	ldw	ra,112(sp)
80083210:	dc001b17 	ldw	r16,108(sp)
80083214:	dec01e04 	addi	sp,sp,120
80083218:	f800283a 	ret

8008321c <__sread>:
8008321c:	defffe04 	addi	sp,sp,-8
80083220:	dc000015 	stw	r16,0(sp)
80083224:	2821883a 	mov	r16,r5
80083228:	2940038f 	ldh	r5,14(r5)
8008322c:	dfc00115 	stw	ra,4(sp)
80083230:	008b3e40 	call	8008b3e4 <_read_r>
80083234:	10000716 	blt	r2,zero,80083254 <__sread+0x38>
80083238:	80c01417 	ldw	r3,80(r16)
8008323c:	1887883a 	add	r3,r3,r2
80083240:	80c01415 	stw	r3,80(r16)
80083244:	dfc00117 	ldw	ra,4(sp)
80083248:	dc000017 	ldw	r16,0(sp)
8008324c:	dec00204 	addi	sp,sp,8
80083250:	f800283a 	ret
80083254:	80c0030b 	ldhu	r3,12(r16)
80083258:	18fbffcc 	andi	r3,r3,61439
8008325c:	80c0030d 	sth	r3,12(r16)
80083260:	dfc00117 	ldw	ra,4(sp)
80083264:	dc000017 	ldw	r16,0(sp)
80083268:	dec00204 	addi	sp,sp,8
8008326c:	f800283a 	ret

80083270 <__seofread>:
80083270:	0005883a 	mov	r2,zero
80083274:	f800283a 	ret

80083278 <__swrite>:
80083278:	2880030b 	ldhu	r2,12(r5)
8008327c:	defffb04 	addi	sp,sp,-20
80083280:	dcc00315 	stw	r19,12(sp)
80083284:	dc800215 	stw	r18,8(sp)
80083288:	dc400115 	stw	r17,4(sp)
8008328c:	dc000015 	stw	r16,0(sp)
80083290:	dfc00415 	stw	ra,16(sp)
80083294:	10c0400c 	andi	r3,r2,256
80083298:	2821883a 	mov	r16,r5
8008329c:	2023883a 	mov	r17,r4
800832a0:	3025883a 	mov	r18,r6
800832a4:	3827883a 	mov	r19,r7
800832a8:	18000526 	beq	r3,zero,800832c0 <__swrite+0x48>
800832ac:	2940038f 	ldh	r5,14(r5)
800832b0:	01c00084 	movi	r7,2
800832b4:	000d883a 	mov	r6,zero
800832b8:	0089ad80 	call	80089ad8 <_lseek_r>
800832bc:	8080030b 	ldhu	r2,12(r16)
800832c0:	8140038f 	ldh	r5,14(r16)
800832c4:	10bbffcc 	andi	r2,r2,61439
800832c8:	980f883a 	mov	r7,r19
800832cc:	900d883a 	mov	r6,r18
800832d0:	8809883a 	mov	r4,r17
800832d4:	8080030d 	sth	r2,12(r16)
800832d8:	dfc00417 	ldw	ra,16(sp)
800832dc:	dcc00317 	ldw	r19,12(sp)
800832e0:	dc800217 	ldw	r18,8(sp)
800832e4:	dc400117 	ldw	r17,4(sp)
800832e8:	dc000017 	ldw	r16,0(sp)
800832ec:	dec00504 	addi	sp,sp,20
800832f0:	0086e7c1 	jmpi	80086e7c <_write_r>

800832f4 <__sseek>:
800832f4:	defffe04 	addi	sp,sp,-8
800832f8:	dc000015 	stw	r16,0(sp)
800832fc:	2821883a 	mov	r16,r5
80083300:	2940038f 	ldh	r5,14(r5)
80083304:	dfc00115 	stw	ra,4(sp)
80083308:	0089ad80 	call	80089ad8 <_lseek_r>
8008330c:	00ffffc4 	movi	r3,-1
80083310:	10c00826 	beq	r2,r3,80083334 <__sseek+0x40>
80083314:	80c0030b 	ldhu	r3,12(r16)
80083318:	80801415 	stw	r2,80(r16)
8008331c:	18c40014 	ori	r3,r3,4096
80083320:	80c0030d 	sth	r3,12(r16)
80083324:	dfc00117 	ldw	ra,4(sp)
80083328:	dc000017 	ldw	r16,0(sp)
8008332c:	dec00204 	addi	sp,sp,8
80083330:	f800283a 	ret
80083334:	80c0030b 	ldhu	r3,12(r16)
80083338:	18fbffcc 	andi	r3,r3,61439
8008333c:	80c0030d 	sth	r3,12(r16)
80083340:	dfc00117 	ldw	ra,4(sp)
80083344:	dc000017 	ldw	r16,0(sp)
80083348:	dec00204 	addi	sp,sp,8
8008334c:	f800283a 	ret

80083350 <__sclose>:
80083350:	2940038f 	ldh	r5,14(r5)
80083354:	00870301 	jmpi	80087030 <_close_r>

80083358 <strlen>:
80083358:	208000cc 	andi	r2,r4,3
8008335c:	10002026 	beq	r2,zero,800833e0 <strlen+0x88>
80083360:	20800007 	ldb	r2,0(r4)
80083364:	10002026 	beq	r2,zero,800833e8 <strlen+0x90>
80083368:	2005883a 	mov	r2,r4
8008336c:	00000206 	br	80083378 <strlen+0x20>
80083370:	10c00007 	ldb	r3,0(r2)
80083374:	18001826 	beq	r3,zero,800833d8 <strlen+0x80>
80083378:	10800044 	addi	r2,r2,1
8008337c:	10c000cc 	andi	r3,r2,3
80083380:	183ffb1e 	bne	r3,zero,80083370 <strlen+0x18>
80083384:	10c00017 	ldw	r3,0(r2)
80083388:	01ffbff4 	movhi	r7,65279
8008338c:	39ffbfc4 	addi	r7,r7,-257
80083390:	00ca303a 	nor	r5,zero,r3
80083394:	01a02074 	movhi	r6,32897
80083398:	19c7883a 	add	r3,r3,r7
8008339c:	31a02004 	addi	r6,r6,-32640
800833a0:	1946703a 	and	r3,r3,r5
800833a4:	1986703a 	and	r3,r3,r6
800833a8:	1800091e 	bne	r3,zero,800833d0 <strlen+0x78>
800833ac:	10800104 	addi	r2,r2,4
800833b0:	10c00017 	ldw	r3,0(r2)
800833b4:	19cb883a 	add	r5,r3,r7
800833b8:	00c6303a 	nor	r3,zero,r3
800833bc:	28c6703a 	and	r3,r5,r3
800833c0:	1986703a 	and	r3,r3,r6
800833c4:	183ff926 	beq	r3,zero,800833ac <strlen+0x54>
800833c8:	00000106 	br	800833d0 <strlen+0x78>
800833cc:	10800044 	addi	r2,r2,1
800833d0:	10c00007 	ldb	r3,0(r2)
800833d4:	183ffd1e 	bne	r3,zero,800833cc <strlen+0x74>
800833d8:	1105c83a 	sub	r2,r2,r4
800833dc:	f800283a 	ret
800833e0:	2005883a 	mov	r2,r4
800833e4:	003fe706 	br	80083384 <strlen+0x2c>
800833e8:	0005883a 	mov	r2,zero
800833ec:	f800283a 	ret

800833f0 <__ssvfscanf_r>:
800833f0:	2880030b 	ldhu	r2,12(r5)
800833f4:	deff4b04 	addi	sp,sp,-724
800833f8:	df00b315 	stw	fp,716(sp)
800833fc:	dd80b115 	stw	r22,708(sp)
80083400:	dfc0b415 	stw	ra,720(sp)
80083404:	ddc0b215 	stw	r23,712(sp)
80083408:	dd40b015 	stw	r21,704(sp)
8008340c:	dd00af15 	stw	r20,700(sp)
80083410:	dcc0ae15 	stw	r19,696(sp)
80083414:	dc80ad15 	stw	r18,692(sp)
80083418:	dc40ac15 	stw	r17,688(sp)
8008341c:	dc00ab15 	stw	r16,684(sp)
80083420:	10c8000c 	andi	r3,r2,8192
80083424:	d9c09c15 	stw	r7,624(sp)
80083428:	2839883a 	mov	fp,r5
8008342c:	202d883a 	mov	r22,r4
80083430:	1800061e 	bne	r3,zero,8008344c <__ssvfscanf_r+0x5c>
80083434:	29001917 	ldw	r4,100(r5)
80083438:	00f7ffc4 	movi	r3,-8193
8008343c:	10880014 	ori	r2,r2,8192
80083440:	20c6703a 	and	r3,r4,r3
80083444:	2880030d 	sth	r2,12(r5)
80083448:	28c01915 	stw	r3,100(r5)
8008344c:	30800003 	ldbu	r2,0(r6)
80083450:	0021883a 	mov	r16,zero
80083454:	05e002b4 	movhi	r23,32778
80083458:	d800a115 	stw	zero,644(sp)
8008345c:	d8009e15 	stw	zero,632(sp)
80083460:	d800a015 	stw	zero,640(sp)
80083464:	d8809b15 	stw	r2,620(sp)
80083468:	bdc1c204 	addi	r23,r23,1800
8008346c:	8025883a 	mov	r18,r16
80083470:	35000044 	addi	r20,r6,1
80083474:	10001e26 	beq	r2,zero,800834f0 <__ssvfscanf_r+0x100>
80083478:	b9c00017 	ldw	r7,0(r23)
8008347c:	3887883a 	add	r3,r7,r2
80083480:	18c00043 	ldbu	r3,1(r3)
80083484:	18c0020c 	andi	r3,r3,8
80083488:	18001b26 	beq	r3,zero,800834f8 <__ssvfscanf_r+0x108>
8008348c:	e0800117 	ldw	r2,4(fp)
80083490:	00800e0e 	bge	zero,r2,800834cc <__ssvfscanf_r+0xdc>
80083494:	e0c00017 	ldw	r3,0(fp)
80083498:	b9000017 	ldw	r4,0(r23)
8008349c:	18800003 	ldbu	r2,0(r3)
800834a0:	2085883a 	add	r2,r4,r2
800834a4:	10800043 	ldbu	r2,1(r2)
800834a8:	1080020c 	andi	r2,r2,8
800834ac:	10000b26 	beq	r2,zero,800834dc <__ssvfscanf_r+0xec>
800834b0:	e0800117 	ldw	r2,4(fp)
800834b4:	18c00044 	addi	r3,r3,1
800834b8:	e0c00015 	stw	r3,0(fp)
800834bc:	10bfffc4 	addi	r2,r2,-1
800834c0:	e0800115 	stw	r2,4(fp)
800834c4:	94800044 	addi	r18,r18,1
800834c8:	00bff216 	blt	zero,r2,80083494 <__ssvfscanf_r+0xa4>
800834cc:	e00b883a 	mov	r5,fp
800834d0:	b009883a 	mov	r4,r22
800834d4:	008e1740 	call	8008e174 <__ssrefill_r>
800834d8:	103fee26 	beq	r2,zero,80083494 <__ssvfscanf_r+0xa4>
800834dc:	a00d883a 	mov	r6,r20
800834e0:	30800003 	ldbu	r2,0(r6)
800834e4:	35000044 	addi	r20,r6,1
800834e8:	d8809b15 	stw	r2,620(sp)
800834ec:	103fe21e 	bne	r2,zero,80083478 <__ssvfscanf_r+0x88>
800834f0:	d880a017 	ldw	r2,640(sp)
800834f4:	00009906 	br	8008375c <__ssvfscanf_r+0x36c>
800834f8:	00c00944 	movi	r3,37
800834fc:	10c0881e 	bne	r2,r3,80083720 <__ssvfscanf_r+0x330>
80083500:	30c00043 	ldbu	r3,1(r6)
80083504:	0023883a 	mov	r17,zero
80083508:	0027883a 	mov	r19,zero
8008350c:	01001e04 	movi	r4,120
80083510:	01401b04 	movi	r5,108
80083514:	a1800044 	addi	r6,r20,1
80083518:	20c0a236 	bltu	r4,r3,800837a4 <__ssvfscanf_r+0x3b4>
8008351c:	180490ba 	slli	r2,r3,2
80083520:	02200234 	movhi	r8,32776
80083524:	420d4d04 	addi	r8,r8,13620
80083528:	1205883a 	add	r2,r2,r8
8008352c:	10800017 	ldw	r2,0(r2)
80083530:	1000683a 	jmp	r2
80083534:	80083758 	cmpnei	zero,r16,8413
80083538:	800837a4 	muli	zero,r16,8414
8008353c:	800837a4 	muli	zero,r16,8414
80083540:	800837a4 	muli	zero,r16,8414
80083544:	800837a4 	muli	zero,r16,8414
80083548:	800837a4 	muli	zero,r16,8414
8008354c:	800837a4 	muli	zero,r16,8414
80083550:	800837a4 	muli	zero,r16,8414
80083554:	800837a4 	muli	zero,r16,8414
80083558:	800837a4 	muli	zero,r16,8414
8008355c:	800837a4 	muli	zero,r16,8414
80083560:	800837a4 	muli	zero,r16,8414
80083564:	800837a4 	muli	zero,r16,8414
80083568:	800837a4 	muli	zero,r16,8414
8008356c:	800837a4 	muli	zero,r16,8414
80083570:	800837a4 	muli	zero,r16,8414
80083574:	800837a4 	muli	zero,r16,8414
80083578:	800837a4 	muli	zero,r16,8414
8008357c:	800837a4 	muli	zero,r16,8414
80083580:	800837a4 	muli	zero,r16,8414
80083584:	800837a4 	muli	zero,r16,8414
80083588:	800837a4 	muli	zero,r16,8414
8008358c:	800837a4 	muli	zero,r16,8414
80083590:	800837a4 	muli	zero,r16,8414
80083594:	800837a4 	muli	zero,r16,8414
80083598:	800837a4 	muli	zero,r16,8414
8008359c:	800837a4 	muli	zero,r16,8414
800835a0:	800837a4 	muli	zero,r16,8414
800835a4:	800837a4 	muli	zero,r16,8414
800835a8:	800837a4 	muli	zero,r16,8414
800835ac:	800837a4 	muli	zero,r16,8414
800835b0:	800837a4 	muli	zero,r16,8414
800835b4:	800837a4 	muli	zero,r16,8414
800835b8:	800837a4 	muli	zero,r16,8414
800835bc:	800837a4 	muli	zero,r16,8414
800835c0:	800837a4 	muli	zero,r16,8414
800835c4:	800837a4 	muli	zero,r16,8414
800835c8:	80083718 	cmpnei	zero,r16,8412
800835cc:	800837a4 	muli	zero,r16,8414
800835d0:	800837a4 	muli	zero,r16,8414
800835d4:	800837a4 	muli	zero,r16,8414
800835d8:	800837a4 	muli	zero,r16,8414
800835dc:	8008378c 	andi	zero,r16,8414
800835e0:	800837a4 	muli	zero,r16,8414
800835e4:	800837a4 	muli	zero,r16,8414
800835e8:	800837a4 	muli	zero,r16,8414
800835ec:	800837a4 	muli	zero,r16,8414
800835f0:	800837a4 	muli	zero,r16,8414
800835f4:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
800835f8:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
800835fc:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
80083600:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
80083604:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
80083608:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
8008360c:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
80083610:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
80083614:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
80083618:	800838c0 	call	8800838c <__alt_data_end+0x7f0b38c>
8008361c:	800837a4 	muli	zero,r16,8414
80083620:	800837a4 	muli	zero,r16,8414
80083624:	800837a4 	muli	zero,r16,8414
80083628:	800837a4 	muli	zero,r16,8414
8008362c:	800837a4 	muli	zero,r16,8414
80083630:	800837a4 	muli	zero,r16,8414
80083634:	800837a4 	muli	zero,r16,8414
80083638:	800837a4 	muli	zero,r16,8414
8008363c:	800837a4 	muli	zero,r16,8414
80083640:	800837a4 	muli	zero,r16,8414
80083644:	80083894 	ori	zero,r16,8418
80083648:	80083944 	addi	zero,r16,8421
8008364c:	800837a4 	muli	zero,r16,8414
80083650:	80083944 	addi	zero,r16,8421
80083654:	800837a4 	muli	zero,r16,8414
80083658:	800837a4 	muli	zero,r16,8414
8008365c:	800837a4 	muli	zero,r16,8414
80083660:	800837a4 	muli	zero,r16,8414
80083664:	80083930 	cmpltui	zero,r16,8420
80083668:	800837a4 	muli	zero,r16,8414
8008366c:	800837a4 	muli	zero,r16,8414
80083670:	80083904 	addi	zero,r16,8420
80083674:	800837a4 	muli	zero,r16,8414
80083678:	800837a4 	muli	zero,r16,8414
8008367c:	800837a4 	muli	zero,r16,8414
80083680:	800837a4 	muli	zero,r16,8414
80083684:	800837a4 	muli	zero,r16,8414
80083688:	800837a4 	muli	zero,r16,8414
8008368c:	800837a4 	muli	zero,r16,8414
80083690:	800837a4 	muli	zero,r16,8414
80083694:	800838dc 	xori	zero,r16,8419
80083698:	800837a4 	muli	zero,r16,8414
8008369c:	800837a4 	muli	zero,r16,8414
800836a0:	80083a78 	rdprs	zero,r16,8425
800836a4:	800837a4 	muli	zero,r16,8414
800836a8:	800837a4 	muli	zero,r16,8414
800836ac:	800837a4 	muli	zero,r16,8414
800836b0:	800837a4 	muli	zero,r16,8414
800836b4:	800837a4 	muli	zero,r16,8414
800836b8:	800837a4 	muli	zero,r16,8414
800836bc:	800837a4 	muli	zero,r16,8414
800836c0:	800839fc 	xorhi	zero,r16,8423
800836c4:	800839d4 	ori	zero,r16,8423
800836c8:	80083944 	addi	zero,r16,8421
800836cc:	80083944 	addi	zero,r16,8421
800836d0:	80083944 	addi	zero,r16,8421
800836d4:	800839c0 	call	8800839c <__alt_data_end+0x7f0b39c>
800836d8:	80083b04 	addi	zero,r16,8428
800836dc:	800837a4 	muli	zero,r16,8414
800836e0:	800837a4 	muli	zero,r16,8414
800836e4:	800839ac 	andhi	zero,r16,8422
800836e8:	800837a4 	muli	zero,r16,8414
800836ec:	8008397c 	xorhi	zero,r16,8421
800836f0:	80083958 	cmpnei	zero,r16,8421
800836f4:	80083868 	cmpgeui	zero,r16,8417
800836f8:	800837a4 	muli	zero,r16,8414
800836fc:	800837a4 	muli	zero,r16,8414
80083700:	80083854 	ori	zero,r16,8417
80083704:	800837a4 	muli	zero,r16,8414
80083708:	800837dc 	xori	zero,r16,8415
8008370c:	800837a4 	muli	zero,r16,8414
80083710:	800837a4 	muli	zero,r16,8414
80083714:	800838dc 	xori	zero,r16,8419
80083718:	d9809d15 	stw	r6,628(sp)
8008371c:	3029883a 	mov	r20,r6
80083720:	e0800117 	ldw	r2,4(fp)
80083724:	0081aa0e 	bge	zero,r2,80083dd0 <__ssvfscanf_r+0x9e0>
80083728:	e0800017 	ldw	r2,0(fp)
8008372c:	a0ffffc3 	ldbu	r3,-1(r20)
80083730:	11000003 	ldbu	r4,0(r2)
80083734:	20ff6e1e 	bne	r4,r3,800834f0 <__ssvfscanf_r+0x100>
80083738:	e0c00117 	ldw	r3,4(fp)
8008373c:	10800044 	addi	r2,r2,1
80083740:	e0800015 	stw	r2,0(fp)
80083744:	18bfffc4 	addi	r2,r3,-1
80083748:	e0800115 	stw	r2,4(fp)
8008374c:	94800044 	addi	r18,r18,1
80083750:	a00d883a 	mov	r6,r20
80083754:	003f6206 	br	800834e0 <__ssvfscanf_r+0xf0>
80083758:	00bfffc4 	movi	r2,-1
8008375c:	dfc0b417 	ldw	ra,720(sp)
80083760:	df00b317 	ldw	fp,716(sp)
80083764:	ddc0b217 	ldw	r23,712(sp)
80083768:	dd80b117 	ldw	r22,708(sp)
8008376c:	dd40b017 	ldw	r21,704(sp)
80083770:	dd00af17 	ldw	r20,700(sp)
80083774:	dcc0ae17 	ldw	r19,696(sp)
80083778:	dc80ad17 	ldw	r18,692(sp)
8008377c:	dc40ac17 	ldw	r17,688(sp)
80083780:	dc00ab17 	ldw	r16,684(sp)
80083784:	dec0b504 	addi	sp,sp,724
80083788:	f800283a 	ret
8008378c:	a0800043 	ldbu	r2,1(r20)
80083790:	3029883a 	mov	r20,r6
80083794:	8c400414 	ori	r17,r17,16
80083798:	10c03fcc 	andi	r3,r2,255
8008379c:	a1800044 	addi	r6,r20,1
800837a0:	20ff5e2e 	bgeu	r4,r3,8008351c <__ssvfscanf_r+0x12c>
800837a4:	38c7883a 	add	r3,r7,r3
800837a8:	18800043 	ldbu	r2,1(r3)
800837ac:	d9809d15 	stw	r6,628(sp)
800837b0:	00c00044 	movi	r3,1
800837b4:	108000cc 	andi	r2,r2,3
800837b8:	10c18f26 	beq	r2,r3,80083df8 <__ssvfscanf_r+0xa08>
800837bc:	e0800117 	ldw	r2,4(fp)
800837c0:	00808716 	blt	zero,r2,800839e0 <__ssvfscanf_r+0x5f0>
800837c4:	e00b883a 	mov	r5,fp
800837c8:	b009883a 	mov	r4,r22
800837cc:	008e1740 	call	8008e174 <__ssrefill_r>
800837d0:	1001431e 	bne	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
800837d4:	b9c00017 	ldw	r7,0(r23)
800837d8:	00008106 	br	800839e0 <__ssvfscanf_r+0x5f0>
800837dc:	e0800117 	ldw	r2,4(fp)
800837e0:	d9809d15 	stw	r6,628(sp)
800837e4:	0081a30e 	bge	zero,r2,80083e74 <__ssvfscanf_r+0xa84>
800837e8:	00a00274 	movhi	r2,32777
800837ec:	10b6cb04 	addi	r2,r2,-9428
800837f0:	02000284 	movi	r8,10
800837f4:	d880a115 	stw	r2,644(sp)
800837f8:	da009e15 	stw	r8,632(sp)
800837fc:	050000c4 	movi	r20,3
80083800:	e0c00017 	ldw	r3,0(fp)
80083804:	00000206 	br	80083810 <__ssvfscanf_r+0x420>
80083808:	18c00044 	addi	r3,r3,1
8008380c:	e0c00015 	stw	r3,0(fp)
80083810:	19000003 	ldbu	r4,0(r3)
80083814:	20803fcc 	andi	r2,r4,255
80083818:	3885883a 	add	r2,r7,r2
8008381c:	10800043 	ldbu	r2,1(r2)
80083820:	1140020c 	andi	r5,r2,8
80083824:	2801ab26 	beq	r5,zero,80083ed4 <__ssvfscanf_r+0xae4>
80083828:	e0800117 	ldw	r2,4(fp)
8008382c:	94800044 	addi	r18,r18,1
80083830:	10bfffc4 	addi	r2,r2,-1
80083834:	e0800115 	stw	r2,4(fp)
80083838:	00bff316 	blt	zero,r2,80083808 <__ssvfscanf_r+0x418>
8008383c:	e00b883a 	mov	r5,fp
80083840:	b009883a 	mov	r4,r22
80083844:	008e1740 	call	8008e174 <__ssrefill_r>
80083848:	1001251e 	bne	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
8008384c:	b9c00017 	ldw	r7,0(r23)
80083850:	003feb06 	br	80083800 <__ssvfscanf_r+0x410>
80083854:	e0800117 	ldw	r2,4(fp)
80083858:	d9809d15 	stw	r6,628(sp)
8008385c:	00818b0e 	bge	zero,r2,80083e8c <__ssvfscanf_r+0xa9c>
80083860:	05000084 	movi	r20,2
80083864:	003fe606 	br	80083800 <__ssvfscanf_r+0x410>
80083868:	e0800117 	ldw	r2,4(fp)
8008386c:	d9809d15 	stw	r6,628(sp)
80083870:	8c408814 	ori	r17,r17,544
80083874:	00801d0e 	bge	zero,r2,800838ec <__ssvfscanf_r+0x4fc>
80083878:	00a00274 	movhi	r2,32777
8008387c:	10b6cb04 	addi	r2,r2,-9428
80083880:	02000404 	movi	r8,16
80083884:	d880a115 	stw	r2,644(sp)
80083888:	da009e15 	stw	r8,632(sp)
8008388c:	050000c4 	movi	r20,3
80083890:	003fdb06 	br	80083800 <__ssvfscanf_r+0x410>
80083894:	e0800117 	ldw	r2,4(fp)
80083898:	d9809d15 	stw	r6,628(sp)
8008389c:	8c400054 	ori	r17,r17,1
800838a0:	00bfc80e 	bge	zero,r2,800837c4 <__ssvfscanf_r+0x3d4>
800838a4:	00e00274 	movhi	r3,32777
800838a8:	18f57e04 	addi	r3,r3,-10760
800838ac:	02000284 	movi	r8,10
800838b0:	d8c0a115 	stw	r3,644(sp)
800838b4:	da009e15 	stw	r8,632(sp)
800838b8:	050000c4 	movi	r20,3
800838bc:	003fd006 	br	80083800 <__ssvfscanf_r+0x410>
800838c0:	9cc002a4 	muli	r19,r19,10
800838c4:	a0800043 	ldbu	r2,1(r20)
800838c8:	3029883a 	mov	r20,r6
800838cc:	98e7883a 	add	r19,r19,r3
800838d0:	9cfff404 	addi	r19,r19,-48
800838d4:	10c03fcc 	andi	r3,r2,255
800838d8:	003f0e06 	br	80083514 <__ssvfscanf_r+0x124>
800838dc:	e0800117 	ldw	r2,4(fp)
800838e0:	d9809d15 	stw	r6,628(sp)
800838e4:	8c408014 	ori	r17,r17,512
800838e8:	00bfe316 	blt	zero,r2,80083878 <__ssvfscanf_r+0x488>
800838ec:	e00b883a 	mov	r5,fp
800838f0:	b009883a 	mov	r4,r22
800838f4:	008e1740 	call	8008e174 <__ssrefill_r>
800838f8:	1000f91e 	bne	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
800838fc:	b9c00017 	ldw	r7,0(r23)
80083900:	003fdd06 	br	80083878 <__ssvfscanf_r+0x488>
80083904:	e0800117 	ldw	r2,4(fp)
80083908:	d9809d15 	stw	r6,628(sp)
8008390c:	8c400054 	ori	r17,r17,1
80083910:	0080140e 	bge	zero,r2,80083964 <__ssvfscanf_r+0x574>
80083914:	00a00274 	movhi	r2,32777
80083918:	10b6cb04 	addi	r2,r2,-9428
8008391c:	02000204 	movi	r8,8
80083920:	d880a115 	stw	r2,644(sp)
80083924:	da009e15 	stw	r8,632(sp)
80083928:	050000c4 	movi	r20,3
8008392c:	003fb406 	br	80083800 <__ssvfscanf_r+0x410>
80083930:	a0800043 	ldbu	r2,1(r20)
80083934:	8c400094 	ori	r17,r17,2
80083938:	3029883a 	mov	r20,r6
8008393c:	10c03fcc 	andi	r3,r2,255
80083940:	003ef406 	br	80083514 <__ssvfscanf_r+0x124>
80083944:	e0800117 	ldw	r2,4(fp)
80083948:	d9809d15 	stw	r6,628(sp)
8008394c:	0081420e 	bge	zero,r2,80083e58 <__ssvfscanf_r+0xa68>
80083950:	05000104 	movi	r20,4
80083954:	003faa06 	br	80083800 <__ssvfscanf_r+0x410>
80083958:	e0800117 	ldw	r2,4(fp)
8008395c:	d9809d15 	stw	r6,628(sp)
80083960:	00bfec16 	blt	zero,r2,80083914 <__ssvfscanf_r+0x524>
80083964:	e00b883a 	mov	r5,fp
80083968:	b009883a 	mov	r4,r22
8008396c:	008e1740 	call	8008e174 <__ssrefill_r>
80083970:	1000db1e 	bne	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
80083974:	b9c00017 	ldw	r7,0(r23)
80083978:	003fe606 	br	80083914 <__ssvfscanf_r+0x524>
8008397c:	d9809d15 	stw	r6,628(sp)
80083980:	8880040c 	andi	r2,r17,16
80083984:	10009c1e 	bne	r2,zero,80083bf8 <__ssvfscanf_r+0x808>
80083988:	8880010c 	andi	r2,r17,4
8008398c:	10011e26 	beq	r2,zero,80083e08 <__ssvfscanf_r+0xa18>
80083990:	da009c17 	ldw	r8,624(sp)
80083994:	3029883a 	mov	r20,r6
80083998:	40800017 	ldw	r2,0(r8)
8008399c:	42000104 	addi	r8,r8,4
800839a0:	da009c15 	stw	r8,624(sp)
800839a4:	1480000d 	sth	r18,0(r2)
800839a8:	003ecc06 	br	800834dc <__ssvfscanf_r+0xec>
800839ac:	a0c00043 	ldbu	r3,1(r20)
800839b0:	19410c26 	beq	r3,r5,80083de4 <__ssvfscanf_r+0x9f4>
800839b4:	8c400054 	ori	r17,r17,1
800839b8:	3029883a 	mov	r20,r6
800839bc:	003ed506 	br	80083514 <__ssvfscanf_r+0x124>
800839c0:	a0800043 	ldbu	r2,1(r20)
800839c4:	8c400114 	ori	r17,r17,4
800839c8:	3029883a 	mov	r20,r6
800839cc:	10c03fcc 	andi	r3,r2,255
800839d0:	003ed006 	br	80083514 <__ssvfscanf_r+0x124>
800839d4:	e0800117 	ldw	r2,4(fp)
800839d8:	d9809d15 	stw	r6,628(sp)
800839dc:	00bf790e 	bge	zero,r2,800837c4 <__ssvfscanf_r+0x3d4>
800839e0:	00a00274 	movhi	r2,32777
800839e4:	10b57e04 	addi	r2,r2,-10760
800839e8:	02000284 	movi	r8,10
800839ec:	d880a115 	stw	r2,644(sp)
800839f0:	da009e15 	stw	r8,632(sp)
800839f4:	050000c4 	movi	r20,3
800839f8:	003f8106 	br	80083800 <__ssvfscanf_r+0x410>
800839fc:	e0800117 	ldw	r2,4(fp)
80083a00:	d9809d15 	stw	r6,628(sp)
80083a04:	0080c40e 	bge	zero,r2,80083d18 <__ssvfscanf_r+0x928>
80083a08:	9800011e 	bne	r19,zero,80083a10 <__ssvfscanf_r+0x620>
80083a0c:	04c00044 	movi	r19,1
80083a10:	8880004c 	andi	r2,r17,1
80083a14:	1000441e 	bne	r2,zero,80083b28 <__ssvfscanf_r+0x738>
80083a18:	8c40040c 	andi	r17,r17,16
80083a1c:	8800da26 	beq	r17,zero,80083d88 <__ssvfscanf_r+0x998>
80083a20:	0021883a 	mov	r16,zero
80083a24:	00000806 	br	80083a48 <__ssvfscanf_r+0x658>
80083a28:	1887883a 	add	r3,r3,r2
80083a2c:	e00b883a 	mov	r5,fp
80083a30:	b009883a 	mov	r4,r22
80083a34:	e0c00015 	stw	r3,0(fp)
80083a38:	80a1883a 	add	r16,r16,r2
80083a3c:	98a7c83a 	sub	r19,r19,r2
80083a40:	008e1740 	call	8008e174 <__ssrefill_r>
80083a44:	1000ca1e 	bne	r2,zero,80083d70 <__ssvfscanf_r+0x980>
80083a48:	e0800117 	ldw	r2,4(fp)
80083a4c:	e0c00017 	ldw	r3,0(fp)
80083a50:	14fff516 	blt	r2,r19,80083a28 <__ssvfscanf_r+0x638>
80083a54:	14c5c83a 	sub	r2,r2,r19
80083a58:	1cd5883a 	add	r10,r3,r19
80083a5c:	84e1883a 	add	r16,r16,r19
80083a60:	e0800115 	stw	r2,4(fp)
80083a64:	e2800015 	stw	r10,0(fp)
80083a68:	dd009d17 	ldw	r20,628(sp)
80083a6c:	9425883a 	add	r18,r18,r16
80083a70:	a00d883a 	mov	r6,r20
80083a74:	003e9a06 	br	800834e0 <__ssvfscanf_r+0xf0>
80083a78:	300b883a 	mov	r5,r6
80083a7c:	d9005884 	addi	r4,sp,354
80083a80:	d9809d15 	stw	r6,628(sp)
80083a84:	008bc0c0 	call	8008bc0c <__sccl>
80083a88:	1029883a 	mov	r20,r2
80083a8c:	e0800117 	ldw	r2,4(fp)
80083a90:	0081050e 	bge	zero,r2,80083ea8 <__ssvfscanf_r+0xab8>
80083a94:	e1000017 	ldw	r4,0(fp)
80083a98:	20800003 	ldbu	r2,0(r4)
80083a9c:	98005926 	beq	r19,zero,80083c04 <__ssvfscanf_r+0x814>
80083aa0:	8c40040c 	andi	r17,r17,16
80083aa4:	88005a26 	beq	r17,zero,80083c10 <__ssvfscanf_r+0x820>
80083aa8:	9823883a 	mov	r17,r19
80083aac:	0021883a 	mov	r16,zero
80083ab0:	00000106 	br	80083ab8 <__ssvfscanf_r+0x6c8>
80083ab4:	20800003 	ldbu	r2,0(r4)
80083ab8:	10803fcc 	andi	r2,r2,255
80083abc:	d8c05884 	addi	r3,sp,354
80083ac0:	1885883a 	add	r2,r3,r2
80083ac4:	10800007 	ldb	r2,0(r2)
80083ac8:	1000ad26 	beq	r2,zero,80083d80 <__ssvfscanf_r+0x990>
80083acc:	e0800117 	ldw	r2,4(fp)
80083ad0:	21000044 	addi	r4,r4,1
80083ad4:	84000044 	addi	r16,r16,1
80083ad8:	10bfffc4 	addi	r2,r2,-1
80083adc:	e0800115 	stw	r2,4(fp)
80083ae0:	e1000015 	stw	r4,0(fp)
80083ae4:	84c0a026 	beq	r16,r19,80083d68 <__ssvfscanf_r+0x978>
80083ae8:	00bff216 	blt	zero,r2,80083ab4 <__ssvfscanf_r+0x6c4>
80083aec:	e00b883a 	mov	r5,fp
80083af0:	b009883a 	mov	r4,r22
80083af4:	008e1740 	call	8008e174 <__ssrefill_r>
80083af8:	10009a1e 	bne	r2,zero,80083d64 <__ssvfscanf_r+0x974>
80083afc:	e1000017 	ldw	r4,0(fp)
80083b00:	003fec06 	br	80083ab4 <__ssvfscanf_r+0x6c4>
80083b04:	e0800117 	ldw	r2,4(fp)
80083b08:	d9809d15 	stw	r6,628(sp)
80083b0c:	0080eb0e 	bge	zero,r2,80083ebc <__ssvfscanf_r+0xacc>
80083b10:	00a00274 	movhi	r2,32777
80083b14:	10b57e04 	addi	r2,r2,-10760
80083b18:	d880a115 	stw	r2,644(sp)
80083b1c:	d8009e15 	stw	zero,632(sp)
80083b20:	050000c4 	movi	r20,3
80083b24:	003f3606 	br	80083800 <__ssvfscanf_r+0x410>
80083b28:	dd409904 	addi	r21,sp,612
80083b2c:	8c40040c 	andi	r17,r17,16
80083b30:	01800204 	movi	r6,8
80083b34:	000b883a 	mov	r5,zero
80083b38:	a809883a 	mov	r4,r21
80083b3c:	dc409f15 	stw	r17,636(sp)
80083b40:	008a1580 	call	8008a158 <memset>
80083b44:	dc409f17 	ldw	r17,636(sp)
80083b48:	88006e26 	beq	r17,zero,80083d04 <__ssvfscanf_r+0x914>
80083b4c:	0029883a 	mov	r20,zero
80083b50:	0023883a 	mov	r17,zero
80083b54:	0089a840 	call	80089a84 <__locale_mb_cur_max>
80083b58:	14406126 	beq	r2,r17,80083ce0 <__ssvfscanf_r+0x8f0>
80083b5c:	e0800017 	ldw	r2,0(fp)
80083b60:	e0c00117 	ldw	r3,4(fp)
80083b64:	d9000104 	addi	r4,sp,4
80083b68:	12000003 	ldbu	r8,0(r2)
80083b6c:	18ffffc4 	addi	r3,r3,-1
80083b70:	10800044 	addi	r2,r2,1
80083b74:	e0c00115 	stw	r3,4(fp)
80083b78:	e0800015 	stw	r2,0(fp)
80083b7c:	8c000044 	addi	r16,r17,1
80083b80:	dd400015 	stw	r21,0(sp)
80083b84:	2463883a 	add	r17,r4,r17
80083b88:	200d883a 	mov	r6,r4
80083b8c:	a00b883a 	mov	r5,r20
80083b90:	800f883a 	mov	r7,r16
80083b94:	b009883a 	mov	r4,r22
80083b98:	8a000005 	stb	r8,0(r17)
80083b9c:	0089cf40 	call	80089cf4 <_mbrtowc_r>
80083ba0:	017fffc4 	movi	r5,-1
80083ba4:	11404e26 	beq	r2,r5,80083ce0 <__ssvfscanf_r+0x8f0>
80083ba8:	1000601e 	bne	r2,zero,80083d2c <__ssvfscanf_r+0x93c>
80083bac:	da009f17 	ldw	r8,636(sp)
80083bb0:	4000641e 	bne	r8,zero,80083d44 <__ssvfscanf_r+0x954>
80083bb4:	a0000015 	stw	zero,0(r20)
80083bb8:	9425883a 	add	r18,r18,r16
80083bbc:	9967883a 	add	r19,r19,r5
80083bc0:	a5000104 	addi	r20,r20,4
80083bc4:	e0800117 	ldw	r2,4(fp)
80083bc8:	0023883a 	mov	r17,zero
80083bcc:	00804b16 	blt	zero,r2,80083cfc <__ssvfscanf_r+0x90c>
80083bd0:	e00b883a 	mov	r5,fp
80083bd4:	b009883a 	mov	r4,r22
80083bd8:	008e1740 	call	8008e174 <__ssrefill_r>
80083bdc:	10004726 	beq	r2,zero,80083cfc <__ssvfscanf_r+0x90c>
80083be0:	88003f1e 	bne	r17,zero,80083ce0 <__ssvfscanf_r+0x8f0>
80083be4:	d8c09f17 	ldw	r3,636(sp)
80083be8:	1800031e 	bne	r3,zero,80083bf8 <__ssvfscanf_r+0x808>
80083bec:	da00a017 	ldw	r8,640(sp)
80083bf0:	42000044 	addi	r8,r8,1
80083bf4:	da00a015 	stw	r8,640(sp)
80083bf8:	dd009d17 	ldw	r20,628(sp)
80083bfc:	a00d883a 	mov	r6,r20
80083c00:	003e3706 	br	800834e0 <__ssvfscanf_r+0xf0>
80083c04:	8c40040c 	andi	r17,r17,16
80083c08:	04ffffc4 	movi	r19,-1
80083c0c:	883fa61e 	bne	r17,zero,80083aa8 <__ssvfscanf_r+0x6b8>
80083c10:	da009c17 	ldw	r8,624(sp)
80083c14:	9abfffc4 	addi	r10,r19,-1
80083c18:	44000017 	ldw	r16,0(r8)
80083c1c:	44400104 	addi	r17,r8,4
80083c20:	8007883a 	mov	r3,r16
80083c24:	82ab883a 	add	r21,r16,r10
80083c28:	00000306 	br	80083c38 <__ssvfscanf_r+0x848>
80083c2c:	e1000017 	ldw	r4,0(fp)
80083c30:	9807883a 	mov	r3,r19
80083c34:	20800003 	ldbu	r2,0(r4)
80083c38:	10803fcc 	andi	r2,r2,255
80083c3c:	d9405884 	addi	r5,sp,354
80083c40:	2885883a 	add	r2,r5,r2
80083c44:	10800007 	ldb	r2,0(r2)
80083c48:	10004b26 	beq	r2,zero,80083d78 <__ssvfscanf_r+0x988>
80083c4c:	e0800117 	ldw	r2,4(fp)
80083c50:	21400044 	addi	r5,r4,1
80083c54:	e1400015 	stw	r5,0(fp)
80083c58:	10bfffc4 	addi	r2,r2,-1
80083c5c:	e0800115 	stw	r2,4(fp)
80083c60:	20800003 	ldbu	r2,0(r4)
80083c64:	1cc00044 	addi	r19,r3,1
80083c68:	18800005 	stb	r2,0(r3)
80083c6c:	1d400726 	beq	r3,r21,80083c8c <__ssvfscanf_r+0x89c>
80083c70:	e0800117 	ldw	r2,4(fp)
80083c74:	00bfed16 	blt	zero,r2,80083c2c <__ssvfscanf_r+0x83c>
80083c78:	e00b883a 	mov	r5,fp
80083c7c:	b009883a 	mov	r4,r22
80083c80:	008e1740 	call	8008e174 <__ssrefill_r>
80083c84:	103fe926 	beq	r2,zero,80083c2c <__ssvfscanf_r+0x83c>
80083c88:	84c01526 	beq	r16,r19,80083ce0 <__ssvfscanf_r+0x8f0>
80083c8c:	9c21c83a 	sub	r16,r19,r16
80083c90:	803e1726 	beq	r16,zero,800834f0 <__ssvfscanf_r+0x100>
80083c94:	da00a017 	ldw	r8,640(sp)
80083c98:	98000005 	stb	zero,0(r19)
80083c9c:	dc409c15 	stw	r17,624(sp)
80083ca0:	42000044 	addi	r8,r8,1
80083ca4:	da00a015 	stw	r8,640(sp)
80083ca8:	9425883a 	add	r18,r18,r16
80083cac:	a00d883a 	mov	r6,r20
80083cb0:	003e0b06 	br	800834e0 <__ssvfscanf_r+0xf0>
80083cb4:	017fff84 	movi	r5,-2
80083cb8:	11439b1e 	bne	r2,r5,80084b28 <__ssvfscanf_r+0x1738>
80083cbc:	8821883a 	mov	r16,r17
80083cc0:	e0800117 	ldw	r2,4(fp)
80083cc4:	0082e516 	blt	zero,r2,8008485c <__ssvfscanf_r+0x146c>
80083cc8:	e00b883a 	mov	r5,fp
80083ccc:	b009883a 	mov	r4,r22
80083cd0:	008e1740 	call	8008e174 <__ssrefill_r>
80083cd4:	1002e126 	beq	r2,zero,8008485c <__ssvfscanf_r+0x146c>
80083cd8:	dc409f17 	ldw	r17,636(sp)
80083cdc:	8002e826 	beq	r16,zero,80084880 <__ssvfscanf_r+0x1490>
80083ce0:	da00a017 	ldw	r8,640(sp)
80083ce4:	403e9c26 	beq	r8,zero,80083758 <__ssvfscanf_r+0x368>
80083ce8:	e080030b 	ldhu	r2,12(fp)
80083cec:	1080100c 	andi	r2,r2,64
80083cf0:	103e991e 	bne	r2,zero,80083758 <__ssvfscanf_r+0x368>
80083cf4:	4005883a 	mov	r2,r8
80083cf8:	003e9806 	br	8008375c <__ssvfscanf_r+0x36c>
80083cfc:	983f951e 	bne	r19,zero,80083b54 <__ssvfscanf_r+0x764>
80083d00:	003fb806 	br	80083be4 <__ssvfscanf_r+0x7f4>
80083d04:	da009c17 	ldw	r8,624(sp)
80083d08:	45000017 	ldw	r20,0(r8)
80083d0c:	42000104 	addi	r8,r8,4
80083d10:	da009c15 	stw	r8,624(sp)
80083d14:	003f8e06 	br	80083b50 <__ssvfscanf_r+0x760>
80083d18:	e00b883a 	mov	r5,fp
80083d1c:	b009883a 	mov	r4,r22
80083d20:	008e1740 	call	8008e174 <__ssrefill_r>
80083d24:	103f3826 	beq	r2,zero,80083a08 <__ssvfscanf_r+0x618>
80083d28:	003fed06 	br	80083ce0 <__ssvfscanf_r+0x8f0>
80083d2c:	00ffff84 	movi	r3,-2
80083d30:	10c0071e 	bne	r2,r3,80083d50 <__ssvfscanf_r+0x960>
80083d34:	e0800117 	ldw	r2,4(fp)
80083d38:	8023883a 	mov	r17,r16
80083d3c:	00bf8516 	blt	zero,r2,80083b54 <__ssvfscanf_r+0x764>
80083d40:	003fa306 	br	80083bd0 <__ssvfscanf_r+0x7e0>
80083d44:	9425883a 	add	r18,r18,r16
80083d48:	9cffffc4 	addi	r19,r19,-1
80083d4c:	003f9d06 	br	80083bc4 <__ssvfscanf_r+0x7d4>
80083d50:	da009f17 	ldw	r8,636(sp)
80083d54:	9425883a 	add	r18,r18,r16
80083d58:	9cffffc4 	addi	r19,r19,-1
80083d5c:	403f9826 	beq	r8,zero,80083bc0 <__ssvfscanf_r+0x7d0>
80083d60:	003f9806 	br	80083bc4 <__ssvfscanf_r+0x7d4>
80083d64:	8023883a 	mov	r17,r16
80083d68:	8821883a 	mov	r16,r17
80083d6c:	003fce06 	br	80083ca8 <__ssvfscanf_r+0x8b8>
80083d70:	803f3d1e 	bne	r16,zero,80083a68 <__ssvfscanf_r+0x678>
80083d74:	003fda06 	br	80083ce0 <__ssvfscanf_r+0x8f0>
80083d78:	1827883a 	mov	r19,r3
80083d7c:	003fc306 	br	80083c8c <__ssvfscanf_r+0x89c>
80083d80:	803fc91e 	bne	r16,zero,80083ca8 <__ssvfscanf_r+0x8b8>
80083d84:	003dda06 	br	800834f0 <__ssvfscanf_r+0x100>
80083d88:	da009c17 	ldw	r8,624(sp)
80083d8c:	df000015 	stw	fp,0(sp)
80083d90:	980f883a 	mov	r7,r19
80083d94:	41400017 	ldw	r5,0(r8)
80083d98:	01800044 	movi	r6,1
80083d9c:	b009883a 	mov	r4,r22
80083da0:	008e1e40 	call	8008e1e4 <_sfread_r>
80083da4:	da009c17 	ldw	r8,624(sp)
80083da8:	40c00104 	addi	r3,r8,4
80083dac:	103fcc26 	beq	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
80083db0:	da00a017 	ldw	r8,640(sp)
80083db4:	dd009d17 	ldw	r20,628(sp)
80083db8:	90a5883a 	add	r18,r18,r2
80083dbc:	42000044 	addi	r8,r8,1
80083dc0:	da00a015 	stw	r8,640(sp)
80083dc4:	d8c09c15 	stw	r3,624(sp)
80083dc8:	a00d883a 	mov	r6,r20
80083dcc:	003dc406 	br	800834e0 <__ssvfscanf_r+0xf0>
80083dd0:	e00b883a 	mov	r5,fp
80083dd4:	b009883a 	mov	r4,r22
80083dd8:	008e1740 	call	8008e174 <__ssrefill_r>
80083ddc:	103e5226 	beq	r2,zero,80083728 <__ssvfscanf_r+0x338>
80083de0:	003fbf06 	br	80083ce0 <__ssvfscanf_r+0x8f0>
80083de4:	a0800083 	ldbu	r2,2(r20)
80083de8:	8c400094 	ori	r17,r17,2
80083dec:	a5000084 	addi	r20,r20,2
80083df0:	10c03fcc 	andi	r3,r2,255
80083df4:	003dc706 	br	80083514 <__ssvfscanf_r+0x124>
80083df8:	e0800117 	ldw	r2,4(fp)
80083dfc:	88e2b03a 	or	r17,r17,r3
80083e00:	00bef716 	blt	zero,r2,800839e0 <__ssvfscanf_r+0x5f0>
80083e04:	003e6f06 	br	800837c4 <__ssvfscanf_r+0x3d4>
80083e08:	8880004c 	andi	r2,r17,1
80083e0c:	10000b1e 	bne	r2,zero,80083e3c <__ssvfscanf_r+0xa4c>
80083e10:	8c40008c 	andi	r17,r17,2
80083e14:	88000926 	beq	r17,zero,80083e3c <__ssvfscanf_r+0xa4c>
80083e18:	da009c17 	ldw	r8,624(sp)
80083e1c:	9007d7fa 	srai	r3,r18,31
80083e20:	dd009d17 	ldw	r20,628(sp)
80083e24:	40800017 	ldw	r2,0(r8)
80083e28:	42000104 	addi	r8,r8,4
80083e2c:	da009c15 	stw	r8,624(sp)
80083e30:	14800015 	stw	r18,0(r2)
80083e34:	10c00115 	stw	r3,4(r2)
80083e38:	003da806 	br	800834dc <__ssvfscanf_r+0xec>
80083e3c:	da009c17 	ldw	r8,624(sp)
80083e40:	dd009d17 	ldw	r20,628(sp)
80083e44:	40800017 	ldw	r2,0(r8)
80083e48:	42000104 	addi	r8,r8,4
80083e4c:	da009c15 	stw	r8,624(sp)
80083e50:	14800015 	stw	r18,0(r2)
80083e54:	003da106 	br	800834dc <__ssvfscanf_r+0xec>
80083e58:	e00b883a 	mov	r5,fp
80083e5c:	b009883a 	mov	r4,r22
80083e60:	008e1740 	call	8008e174 <__ssrefill_r>
80083e64:	103f9e1e 	bne	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
80083e68:	b9c00017 	ldw	r7,0(r23)
80083e6c:	05000104 	movi	r20,4
80083e70:	003e6306 	br	80083800 <__ssvfscanf_r+0x410>
80083e74:	e00b883a 	mov	r5,fp
80083e78:	b009883a 	mov	r4,r22
80083e7c:	008e1740 	call	8008e174 <__ssrefill_r>
80083e80:	103f971e 	bne	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
80083e84:	b9c00017 	ldw	r7,0(r23)
80083e88:	003e5706 	br	800837e8 <__ssvfscanf_r+0x3f8>
80083e8c:	e00b883a 	mov	r5,fp
80083e90:	b009883a 	mov	r4,r22
80083e94:	008e1740 	call	8008e174 <__ssrefill_r>
80083e98:	103f911e 	bne	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
80083e9c:	b9c00017 	ldw	r7,0(r23)
80083ea0:	05000084 	movi	r20,2
80083ea4:	003e5606 	br	80083800 <__ssvfscanf_r+0x410>
80083ea8:	e00b883a 	mov	r5,fp
80083eac:	b009883a 	mov	r4,r22
80083eb0:	008e1740 	call	8008e174 <__ssrefill_r>
80083eb4:	103ef726 	beq	r2,zero,80083a94 <__ssvfscanf_r+0x6a4>
80083eb8:	003f8906 	br	80083ce0 <__ssvfscanf_r+0x8f0>
80083ebc:	e00b883a 	mov	r5,fp
80083ec0:	b009883a 	mov	r4,r22
80083ec4:	008e1740 	call	8008e174 <__ssrefill_r>
80083ec8:	103f851e 	bne	r2,zero,80083ce0 <__ssvfscanf_r+0x8f0>
80083ecc:	b9c00017 	ldw	r7,0(r23)
80083ed0:	003f0f06 	br	80083b10 <__ssvfscanf_r+0x720>
80083ed4:	014000c4 	movi	r5,3
80083ed8:	a1414a26 	beq	r20,r5,80084404 <__ssvfscanf_r+0x1014>
80083edc:	01000104 	movi	r4,4
80083ee0:	a101f11e 	bne	r20,r4,800846a8 <__ssvfscanf_r+0x12b8>
80083ee4:	b009883a 	mov	r4,r22
80083ee8:	0089aa80 	call	80089aa8 <_localeconv_r>
80083eec:	10800017 	ldw	r2,0(r2)
80083ef0:	98ffffc4 	addi	r3,r19,-1
80083ef4:	d880a315 	stw	r2,652(sp)
80083ef8:	00805704 	movi	r2,348
80083efc:	10c21e2e 	bgeu	r2,r3,80084778 <__ssvfscanf_r+0x1388>
80083f00:	9cffa8c4 	addi	r19,r19,-349
80083f04:	dcc0a215 	stw	r19,648(sp)
80083f08:	04c05744 	movi	r19,349
80083f0c:	8d01e014 	ori	r20,r17,1920
80083f10:	0023883a 	mov	r17,zero
80083f14:	dc000104 	addi	r16,sp,4
80083f18:	8805883a 	mov	r2,r17
80083f1c:	0019883a 	mov	r12,zero
80083f20:	8023883a 	mov	r17,r16
80083f24:	b007883a 	mov	r3,r22
80083f28:	9821883a 	mov	r16,r19
80083f2c:	002b883a 	mov	r21,zero
80083f30:	d800a515 	stw	zero,660(sp)
80083f34:	d800a415 	stw	zero,656(sp)
80083f38:	d8009f15 	stw	zero,636(sp)
80083f3c:	01c01384 	movi	r7,78
80083f40:	602d883a 	mov	r22,r12
80083f44:	1027883a 	mov	r19,r2
80083f48:	e1000017 	ldw	r4,0(fp)
80083f4c:	21400003 	ldbu	r5,0(r4)
80083f50:	28bff544 	addi	r2,r5,-43
80083f54:	10803fcc 	andi	r2,r2,255
80083f58:	38810e36 	bltu	r7,r2,80084394 <__ssvfscanf_r+0xfa4>
80083f5c:	100490ba 	slli	r2,r2,2
80083f60:	01a00234 	movhi	r6,32776
80083f64:	318fdd04 	addi	r6,r6,16244
80083f68:	1185883a 	add	r2,r2,r6
80083f6c:	10800017 	ldw	r2,0(r2)
80083f70:	1000683a 	jmp	r2
80083f74:	8008426c 	andhi	zero,r16,8457
80083f78:	80084394 	ori	zero,r16,8462
80083f7c:	8008426c 	andhi	zero,r16,8457
80083f80:	80084394 	ori	zero,r16,8462
80083f84:	80084394 	ori	zero,r16,8462
80083f88:	80084240 	call	88008424 <__alt_data_end+0x7f0b424>
80083f8c:	800840b0 	cmpltui	zero,r16,8450
80083f90:	800840b0 	cmpltui	zero,r16,8450
80083f94:	800840b0 	cmpltui	zero,r16,8450
80083f98:	800840b0 	cmpltui	zero,r16,8450
80083f9c:	800840b0 	cmpltui	zero,r16,8450
80083fa0:	800840b0 	cmpltui	zero,r16,8450
80083fa4:	800840b0 	cmpltui	zero,r16,8450
80083fa8:	800840b0 	cmpltui	zero,r16,8450
80083fac:	800840b0 	cmpltui	zero,r16,8450
80083fb0:	80084394 	ori	zero,r16,8462
80083fb4:	80084394 	ori	zero,r16,8462
80083fb8:	80084394 	ori	zero,r16,8462
80083fbc:	80084394 	ori	zero,r16,8462
80083fc0:	80084394 	ori	zero,r16,8462
80083fc4:	80084394 	ori	zero,r16,8462
80083fc8:	80084394 	ori	zero,r16,8462
80083fcc:	80084384 	addi	zero,r16,8462
80083fd0:	80084394 	ori	zero,r16,8462
80083fd4:	80084394 	ori	zero,r16,8462
80083fd8:	80084394 	ori	zero,r16,8462
80083fdc:	80084340 	call	88008434 <__alt_data_end+0x7f0b434>
80083fe0:	80084324 	muli	zero,r16,8460
80083fe4:	80084394 	ori	zero,r16,8462
80083fe8:	80084394 	ori	zero,r16,8462
80083fec:	800842f0 	cmpltui	zero,r16,8459
80083ff0:	80084394 	ori	zero,r16,8462
80083ff4:	80084394 	ori	zero,r16,8462
80083ff8:	80084394 	ori	zero,r16,8462
80083ffc:	80084394 	ori	zero,r16,8462
80084000:	800842b8 	rdprs	zero,r16,8458
80084004:	80084394 	ori	zero,r16,8462
80084008:	80084394 	ori	zero,r16,8462
8008400c:	80084394 	ori	zero,r16,8462
80084010:	80084394 	ori	zero,r16,8462
80084014:	80084394 	ori	zero,r16,8462
80084018:	8008429c 	xori	zero,r16,8458
8008401c:	80084394 	ori	zero,r16,8462
80084020:	80084394 	ori	zero,r16,8462
80084024:	80084394 	ori	zero,r16,8462
80084028:	80084394 	ori	zero,r16,8462
8008402c:	80084280 	call	88008428 <__alt_data_end+0x7f0b428>
80084030:	80084394 	ori	zero,r16,8462
80084034:	80084394 	ori	zero,r16,8462
80084038:	80084394 	ori	zero,r16,8462
8008403c:	80084394 	ori	zero,r16,8462
80084040:	80084394 	ori	zero,r16,8462
80084044:	80084394 	ori	zero,r16,8462
80084048:	80084394 	ori	zero,r16,8462
8008404c:	80084384 	addi	zero,r16,8462
80084050:	80084394 	ori	zero,r16,8462
80084054:	80084394 	ori	zero,r16,8462
80084058:	80084394 	ori	zero,r16,8462
8008405c:	80084340 	call	88008434 <__alt_data_end+0x7f0b434>
80084060:	80084324 	muli	zero,r16,8460
80084064:	80084394 	ori	zero,r16,8462
80084068:	80084394 	ori	zero,r16,8462
8008406c:	800842f0 	cmpltui	zero,r16,8459
80084070:	80084394 	ori	zero,r16,8462
80084074:	80084394 	ori	zero,r16,8462
80084078:	80084394 	ori	zero,r16,8462
8008407c:	80084394 	ori	zero,r16,8462
80084080:	800842b8 	rdprs	zero,r16,8458
80084084:	80084394 	ori	zero,r16,8462
80084088:	80084394 	ori	zero,r16,8462
8008408c:	80084394 	ori	zero,r16,8462
80084090:	80084394 	ori	zero,r16,8462
80084094:	80084394 	ori	zero,r16,8462
80084098:	8008429c 	xori	zero,r16,8458
8008409c:	80084394 	ori	zero,r16,8462
800840a0:	80084394 	ori	zero,r16,8462
800840a4:	80084394 	ori	zero,r16,8462
800840a8:	80084394 	ori	zero,r16,8462
800840ac:	80084280 	call	88008428 <__alt_data_end+0x7f0b428>
800840b0:	a8803fcc 	andi	r2,r21,255
800840b4:	1080201c 	xori	r2,r2,128
800840b8:	10bfe004 	addi	r2,r2,-128
800840bc:	b085883a 	add	r2,r22,r2
800840c0:	10000d1e 	bne	r2,zero,800840f8 <__ssvfscanf_r+0xd08>
800840c4:	00bf9fc4 	movi	r2,-385
800840c8:	a0a8703a 	and	r20,r20,r2
800840cc:	89400005 	stb	r5,0(r17)
800840d0:	8c400044 	addi	r17,r17,1
800840d4:	e0800117 	ldw	r2,4(fp)
800840d8:	843fffc4 	addi	r16,r16,-1
800840dc:	94800044 	addi	r18,r18,1
800840e0:	10bfffc4 	addi	r2,r2,-1
800840e4:	e0800115 	stw	r2,4(fp)
800840e8:	0080b40e 	bge	zero,r2,800843bc <__ssvfscanf_r+0xfcc>
800840ec:	21000044 	addi	r4,r4,1
800840f0:	e1000015 	stw	r4,0(fp)
800840f4:	803f941e 	bne	r16,zero,80083f48 <__ssvfscanf_r+0xb58>
800840f8:	8821883a 	mov	r16,r17
800840fc:	b019883a 	mov	r12,r22
80084100:	9823883a 	mov	r17,r19
80084104:	182d883a 	mov	r22,r3
80084108:	9801961e 	bne	r19,zero,80084764 <__ssvfscanf_r+0x1374>
8008410c:	633fffc4 	addi	r12,r12,-1
80084110:	00800044 	movi	r2,1
80084114:	1302882e 	bgeu	r2,r12,80084b38 <__ssvfscanf_r+0x1748>
80084118:	a8803fcc 	andi	r2,r21,255
8008411c:	1080201c 	xori	r2,r2,128
80084120:	10bfe004 	addi	r2,r2,-128
80084124:	113fffc4 	addi	r4,r2,-1
80084128:	01400184 	movi	r5,6
8008412c:	29001136 	bltu	r5,r4,80084174 <__ssvfscanf_r+0xd84>
80084130:	01000084 	movi	r4,2
80084134:	2082900e 	bge	r4,r2,80084b78 <__ssvfscanf_r+0x1788>
80084138:	00c000c4 	movi	r3,3
8008413c:	10c00d26 	beq	r2,r3,80084174 <__ssvfscanf_r+0xd84>
80084140:	9425c83a 	sub	r18,r18,r16
80084144:	1827883a 	mov	r19,r3
80084148:	843fffc4 	addi	r16,r16,-1
8008414c:	81400007 	ldb	r5,0(r16)
80084150:	e00d883a 	mov	r6,fp
80084154:	b009883a 	mov	r4,r22
80084158:	008e06c0 	call	8008e06c <_sungetc_r>
8008415c:	a8bfffc4 	addi	r2,r21,-1
80084160:	10c03fcc 	andi	r3,r2,255
80084164:	8493883a 	add	r9,r16,r18
80084168:	102b883a 	mov	r21,r2
8008416c:	98fff636 	bltu	r19,r3,80084148 <__ssvfscanf_r+0xd58>
80084170:	4825883a 	mov	r18,r9
80084174:	a080400c 	andi	r2,r20,256
80084178:	10001426 	beq	r2,zero,800841cc <__ssvfscanf_r+0xddc>
8008417c:	a081000c 	andi	r2,r20,1024
80084180:	1002571e 	bne	r2,zero,80084ae0 <__ssvfscanf_r+0x16f0>
80084184:	817fffc7 	ldb	r5,-1(r16)
80084188:	00801944 	movi	r2,101
8008418c:	84ffffc4 	addi	r19,r16,-1
80084190:	957fffc4 	addi	r21,r18,-1
80084194:	28800826 	beq	r5,r2,800841b8 <__ssvfscanf_r+0xdc8>
80084198:	00801144 	movi	r2,69
8008419c:	28800626 	beq	r5,r2,800841b8 <__ssvfscanf_r+0xdc8>
800841a0:	e00d883a 	mov	r6,fp
800841a4:	b009883a 	mov	r4,r22
800841a8:	008e06c0 	call	8008e06c <_sungetc_r>
800841ac:	817fff87 	ldb	r5,-2(r16)
800841b0:	84ffff84 	addi	r19,r16,-2
800841b4:	957fff84 	addi	r21,r18,-2
800841b8:	e00d883a 	mov	r6,fp
800841bc:	b009883a 	mov	r4,r22
800841c0:	008e06c0 	call	8008e06c <_sungetc_r>
800841c4:	a825883a 	mov	r18,r21
800841c8:	9821883a 	mov	r16,r19
800841cc:	a080040c 	andi	r2,r20,16
800841d0:	103e891e 	bne	r2,zero,80083bf8 <__ssvfscanf_r+0x808>
800841d4:	80000005 	stb	zero,0(r16)
800841d8:	a081800c 	andi	r2,r20,1536
800841dc:	01010004 	movi	r4,1024
800841e0:	1101dd26 	beq	r2,r4,80084958 <__ssvfscanf_r+0x1568>
800841e4:	da00a417 	ldw	r8,656(sp)
800841e8:	4001e71e 	bne	r8,zero,80084988 <__ssvfscanf_r+0x1598>
800841ec:	000d883a 	mov	r6,zero
800841f0:	d9400104 	addi	r5,sp,4
800841f4:	b009883a 	mov	r4,r22
800841f8:	008bee80 	call	8008bee8 <_strtod_r>
800841fc:	1021883a 	mov	r16,r2
80084200:	a080004c 	andi	r2,r20,1
80084204:	1000021e 	bne	r2,zero,80084210 <__ssvfscanf_r+0xe20>
80084208:	a2c0008c 	andi	r11,r20,2
8008420c:	5801e826 	beq	r11,zero,800849b0 <__ssvfscanf_r+0x15c0>
80084210:	da009c17 	ldw	r8,624(sp)
80084214:	40800017 	ldw	r2,0(r8)
80084218:	42000104 	addi	r8,r8,4
8008421c:	da009c15 	stw	r8,624(sp)
80084220:	14000015 	stw	r16,0(r2)
80084224:	10c00115 	stw	r3,4(r2)
80084228:	da00a017 	ldw	r8,640(sp)
8008422c:	dd009d17 	ldw	r20,628(sp)
80084230:	42000044 	addi	r8,r8,1
80084234:	da00a015 	stw	r8,640(sp)
80084238:	a00d883a 	mov	r6,r20
8008423c:	003ca806 	br	800834e0 <__ssvfscanf_r+0xf0>
80084240:	a080400c 	andi	r2,r20,256
80084244:	103f9a26 	beq	r2,zero,800840b0 <__ssvfscanf_r+0xcc0>
80084248:	da00a217 	ldw	r8,648(sp)
8008424c:	00bfdfc4 	movi	r2,-129
80084250:	a0a8703a 	and	r20,r20,r2
80084254:	9cc00044 	addi	r19,r19,1
80084258:	403f9e26 	beq	r8,zero,800840d4 <__ssvfscanf_r+0xce4>
8008425c:	423fffc4 	addi	r8,r8,-1
80084260:	da00a215 	stw	r8,648(sp)
80084264:	84000044 	addi	r16,r16,1
80084268:	003f9a06 	br	800840d4 <__ssvfscanf_r+0xce4>
8008426c:	a080200c 	andi	r2,r20,128
80084270:	103fa126 	beq	r2,zero,800840f8 <__ssvfscanf_r+0xd08>
80084274:	00bfdfc4 	movi	r2,-129
80084278:	a0a8703a 	and	r20,r20,r2
8008427c:	003f9306 	br	800840cc <__ssvfscanf_r+0xcdc>
80084280:	a8803fcc 	andi	r2,r21,255
80084284:	1080201c 	xori	r2,r2,128
80084288:	10bfe004 	addi	r2,r2,-128
8008428c:	020001c4 	movi	r8,7
80084290:	123f991e 	bne	r2,r8,800840f8 <__ssvfscanf_r+0xd08>
80084294:	05400204 	movi	r21,8
80084298:	003f8c06 	br	800840cc <__ssvfscanf_r+0xcdc>
8008429c:	a8803fcc 	andi	r2,r21,255
800842a0:	1080201c 	xori	r2,r2,128
800842a4:	10bfe004 	addi	r2,r2,-128
800842a8:	01800184 	movi	r6,6
800842ac:	11bf921e 	bne	r2,r6,800840f8 <__ssvfscanf_r+0xd08>
800842b0:	054001c4 	movi	r21,7
800842b4:	003f8506 	br	800840cc <__ssvfscanf_r+0xcdc>
800842b8:	b000491e 	bne	r22,zero,800843e0 <__ssvfscanf_r+0xff0>
800842bc:	9800031e 	bne	r19,zero,800842cc <__ssvfscanf_r+0xedc>
800842c0:	a081c00c 	andi	r2,r20,1792
800842c4:	0181c004 	movi	r6,1792
800842c8:	11819f26 	beq	r2,r6,80084948 <__ssvfscanf_r+0x1558>
800842cc:	a8803fcc 	andi	r2,r21,255
800842d0:	1080201c 	xori	r2,r2,128
800842d4:	10bfe004 	addi	r2,r2,-128
800842d8:	01800044 	movi	r6,1
800842dc:	11800226 	beq	r2,r6,800842e8 <__ssvfscanf_r+0xef8>
800842e0:	01800104 	movi	r6,4
800842e4:	11bf841e 	bne	r2,r6,800840f8 <__ssvfscanf_r+0xd08>
800842e8:	ad400044 	addi	r21,r21,1
800842ec:	003f7706 	br	800840cc <__ssvfscanf_r+0xcdc>
800842f0:	a8803fcc 	andi	r2,r21,255
800842f4:	1080201c 	xori	r2,r2,128
800842f8:	10bfe004 	addi	r2,r2,-128
800842fc:	10003c1e 	bne	r2,zero,800843f0 <__ssvfscanf_r+0x1000>
80084300:	9801141e 	bne	r19,zero,80084754 <__ssvfscanf_r+0x1364>
80084304:	a081c00c 	andi	r2,r20,1792
80084308:	0181c004 	movi	r6,1792
8008430c:	11818226 	beq	r2,r6,80084918 <__ssvfscanf_r+0x1528>
80084310:	8821883a 	mov	r16,r17
80084314:	b019883a 	mov	r12,r22
80084318:	9823883a 	mov	r17,r19
8008431c:	182d883a 	mov	r22,r3
80084320:	003f7a06 	br	8008410c <__ssvfscanf_r+0xd1c>
80084324:	a8803fcc 	andi	r2,r21,255
80084328:	1080201c 	xori	r2,r2,128
8008432c:	10bfe004 	addi	r2,r2,-128
80084330:	01800084 	movi	r6,2
80084334:	11bf701e 	bne	r2,r6,800840f8 <__ssvfscanf_r+0xd08>
80084338:	054000c4 	movi	r21,3
8008433c:	003f6306 	br	800840cc <__ssvfscanf_r+0xcdc>
80084340:	a081400c 	andi	r2,r20,1280
80084344:	01810004 	movi	r6,1024
80084348:	11800326 	beq	r2,r6,80084358 <__ssvfscanf_r+0xf68>
8008434c:	a184703a 	and	r2,r20,r6
80084350:	103f6926 	beq	r2,zero,800840f8 <__ssvfscanf_r+0xd08>
80084354:	983fee26 	beq	r19,zero,80084310 <__ssvfscanf_r+0xf20>
80084358:	a080800c 	andi	r2,r20,512
8008435c:	1000041e 	bne	r2,zero,80084370 <__ssvfscanf_r+0xf80>
80084360:	da009f17 	ldw	r8,636(sp)
80084364:	dc40a515 	stw	r17,660(sp)
80084368:	9a27c83a 	sub	r19,r19,r8
8008436c:	dcc0a415 	stw	r19,656(sp)
80084370:	00be1fc4 	movi	r2,-1921
80084374:	a0a8703a 	and	r20,r20,r2
80084378:	a5006014 	ori	r20,r20,384
8008437c:	0027883a 	mov	r19,zero
80084380:	003f5206 	br	800840cc <__ssvfscanf_r+0xcdc>
80084384:	00800044 	movi	r2,1
80084388:	b0bf5b1e 	bne	r22,r2,800840f8 <__ssvfscanf_r+0xd08>
8008438c:	05800084 	movi	r22,2
80084390:	003f4e06 	br	800840cc <__ssvfscanf_r+0xcdc>
80084394:	d980a317 	ldw	r6,652(sp)
80084398:	30800003 	ldbu	r2,0(r6)
8008439c:	29803fcc 	andi	r6,r5,255
800843a0:	30bf551e 	bne	r6,r2,800840f8 <__ssvfscanf_r+0xd08>
800843a4:	a080800c 	andi	r2,r20,512
800843a8:	103f5326 	beq	r2,zero,800840f8 <__ssvfscanf_r+0xd08>
800843ac:	023f5fc4 	movi	r8,-641
800843b0:	a228703a 	and	r20,r20,r8
800843b4:	dcc09f15 	stw	r19,636(sp)
800843b8:	003f4406 	br	800840cc <__ssvfscanf_r+0xcdc>
800843bc:	1809883a 	mov	r4,r3
800843c0:	e00b883a 	mov	r5,fp
800843c4:	d8c0a615 	stw	r3,664(sp)
800843c8:	d9c0aa15 	stw	r7,680(sp)
800843cc:	008e1740 	call	8008e174 <__ssrefill_r>
800843d0:	d8c0a617 	ldw	r3,664(sp)
800843d4:	d9c0aa17 	ldw	r7,680(sp)
800843d8:	103f4626 	beq	r2,zero,800840f4 <__ssvfscanf_r+0xd04>
800843dc:	003f4606 	br	800840f8 <__ssvfscanf_r+0xd08>
800843e0:	00800084 	movi	r2,2
800843e4:	b0bfb91e 	bne	r22,r2,800842cc <__ssvfscanf_r+0xedc>
800843e8:	058000c4 	movi	r22,3
800843ec:	003f3706 	br	800840cc <__ssvfscanf_r+0xcdc>
800843f0:	018000c4 	movi	r6,3
800843f4:	11bfbc26 	beq	r2,r6,800842e8 <__ssvfscanf_r+0xef8>
800843f8:	01800144 	movi	r6,5
800843fc:	11bfba26 	beq	r2,r6,800842e8 <__ssvfscanf_r+0xef8>
80084400:	003f3d06 	br	800840f8 <__ssvfscanf_r+0xd08>
80084404:	98bfffc4 	addi	r2,r19,-1
80084408:	01405704 	movi	r5,348
8008440c:	2880d82e 	bgeu	r5,r2,80084770 <__ssvfscanf_r+0x1380>
80084410:	99ffa8c4 	addi	r7,r19,-349
80084414:	04c05744 	movi	r19,349
80084418:	8c436014 	ori	r17,r17,3456
8008441c:	9013883a 	mov	r9,r18
80084420:	8825883a 	mov	r18,r17
80084424:	dc409e17 	ldw	r17,632(sp)
80084428:	0029883a 	mov	r20,zero
8008442c:	dc000104 	addi	r16,sp,4
80084430:	05401344 	movi	r21,77
80084434:	02c08004 	movi	r11,512
80084438:	01bf7fc4 	movi	r6,-513
8008443c:	023fdfc4 	movi	r8,-129
80084440:	20bff544 	addi	r2,r4,-43
80084444:	10803fcc 	andi	r2,r2,255
80084448:	a8807236 	bltu	r21,r2,80084614 <__ssvfscanf_r+0x1224>
8008444c:	100490ba 	slli	r2,r2,2
80084450:	01600234 	movhi	r5,32776
80084454:	29511904 	addi	r5,r5,17508
80084458:	1145883a 	add	r2,r2,r5
8008445c:	10800017 	ldw	r2,0(r2)
80084460:	1000683a 	jmp	r2
80084464:	80084698 	cmpnei	zero,r16,8474
80084468:	80084614 	ori	zero,r16,8472
8008446c:	80084698 	cmpnei	zero,r16,8474
80084470:	80084614 	ori	zero,r16,8472
80084474:	80084614 	ori	zero,r16,8472
80084478:	80084670 	cmpltui	zero,r16,8473
8008447c:	80084650 	cmplti	zero,r16,8473
80084480:	80084650 	cmplti	zero,r16,8473
80084484:	80084650 	cmplti	zero,r16,8473
80084488:	80084650 	cmplti	zero,r16,8473
8008448c:	80084650 	cmplti	zero,r16,8473
80084490:	80084650 	cmplti	zero,r16,8473
80084494:	80084650 	cmplti	zero,r16,8473
80084498:	800845f8 	rdprs	zero,r16,8471
8008449c:	800845f8 	rdprs	zero,r16,8471
800844a0:	80084614 	ori	zero,r16,8472
800844a4:	80084614 	ori	zero,r16,8472
800844a8:	80084614 	ori	zero,r16,8472
800844ac:	80084614 	ori	zero,r16,8472
800844b0:	80084614 	ori	zero,r16,8472
800844b4:	80084614 	ori	zero,r16,8472
800844b8:	80084614 	ori	zero,r16,8472
800844bc:	800845e4 	muli	zero,r16,8471
800844c0:	800845e4 	muli	zero,r16,8471
800844c4:	800845e4 	muli	zero,r16,8471
800844c8:	800845e4 	muli	zero,r16,8471
800844cc:	800845e4 	muli	zero,r16,8471
800844d0:	800845e4 	muli	zero,r16,8471
800844d4:	80084614 	ori	zero,r16,8472
800844d8:	80084614 	ori	zero,r16,8472
800844dc:	80084614 	ori	zero,r16,8472
800844e0:	80084614 	ori	zero,r16,8472
800844e4:	80084614 	ori	zero,r16,8472
800844e8:	80084614 	ori	zero,r16,8472
800844ec:	80084614 	ori	zero,r16,8472
800844f0:	80084614 	ori	zero,r16,8472
800844f4:	80084614 	ori	zero,r16,8472
800844f8:	80084614 	ori	zero,r16,8472
800844fc:	80084614 	ori	zero,r16,8472
80084500:	80084614 	ori	zero,r16,8472
80084504:	80084614 	ori	zero,r16,8472
80084508:	80084614 	ori	zero,r16,8472
8008450c:	80084614 	ori	zero,r16,8472
80084510:	80084614 	ori	zero,r16,8472
80084514:	80084614 	ori	zero,r16,8472
80084518:	8008459c 	xori	zero,r16,8470
8008451c:	80084614 	ori	zero,r16,8472
80084520:	80084614 	ori	zero,r16,8472
80084524:	80084614 	ori	zero,r16,8472
80084528:	80084614 	ori	zero,r16,8472
8008452c:	80084614 	ori	zero,r16,8472
80084530:	80084614 	ori	zero,r16,8472
80084534:	80084614 	ori	zero,r16,8472
80084538:	80084614 	ori	zero,r16,8472
8008453c:	800845e4 	muli	zero,r16,8471
80084540:	800845e4 	muli	zero,r16,8471
80084544:	800845e4 	muli	zero,r16,8471
80084548:	800845e4 	muli	zero,r16,8471
8008454c:	800845e4 	muli	zero,r16,8471
80084550:	800845e4 	muli	zero,r16,8471
80084554:	80084614 	ori	zero,r16,8472
80084558:	80084614 	ori	zero,r16,8472
8008455c:	80084614 	ori	zero,r16,8472
80084560:	80084614 	ori	zero,r16,8472
80084564:	80084614 	ori	zero,r16,8472
80084568:	80084614 	ori	zero,r16,8472
8008456c:	80084614 	ori	zero,r16,8472
80084570:	80084614 	ori	zero,r16,8472
80084574:	80084614 	ori	zero,r16,8472
80084578:	80084614 	ori	zero,r16,8472
8008457c:	80084614 	ori	zero,r16,8472
80084580:	80084614 	ori	zero,r16,8472
80084584:	80084614 	ori	zero,r16,8472
80084588:	80084614 	ori	zero,r16,8472
8008458c:	80084614 	ori	zero,r16,8472
80084590:	80084614 	ori	zero,r16,8472
80084594:	80084614 	ori	zero,r16,8472
80084598:	8008459c 	xori	zero,r16,8470
8008459c:	9081800c 	andi	r2,r18,1536
800845a0:	12c01c1e 	bne	r2,r11,80084614 <__ssvfscanf_r+0x1224>
800845a4:	91a4703a 	and	r18,r18,r6
800845a8:	94814014 	ori	r18,r18,1280
800845ac:	04400404 	movi	r17,16
800845b0:	81000005 	stb	r4,0(r16)
800845b4:	84000044 	addi	r16,r16,1
800845b8:	e0800117 	ldw	r2,4(fp)
800845bc:	10bfffc4 	addi	r2,r2,-1
800845c0:	e0800115 	stw	r2,4(fp)
800845c4:	0080540e 	bge	zero,r2,80084718 <__ssvfscanf_r+0x1328>
800845c8:	18c00044 	addi	r3,r3,1
800845cc:	e0c00015 	stw	r3,0(fp)
800845d0:	9cffffc4 	addi	r19,r19,-1
800845d4:	98000f26 	beq	r19,zero,80084614 <__ssvfscanf_r+0x1224>
800845d8:	e0c00017 	ldw	r3,0(fp)
800845dc:	19000003 	ldbu	r4,0(r3)
800845e0:	003f9706 	br	80084440 <__ssvfscanf_r+0x1050>
800845e4:	00800284 	movi	r2,10
800845e8:	14400a0e 	bge	r2,r17,80084614 <__ssvfscanf_r+0x1224>
800845ec:	00bd1fc4 	movi	r2,-2945
800845f0:	90a4703a 	and	r18,r18,r2
800845f4:	003fee06 	br	800845b0 <__ssvfscanf_r+0x11c0>
800845f8:	016002b4 	movhi	r5,32778
800845fc:	8c63883a 	add	r17,r17,r17
80084600:	29785684 	addi	r5,r5,-7846
80084604:	2c45883a 	add	r2,r5,r17
80084608:	1440000f 	ldh	r17,0(r2)
8008460c:	00800204 	movi	r2,8
80084610:	147ff616 	blt	r2,r17,800845ec <__ssvfscanf_r+0x11fc>
80084614:	dc409e15 	stw	r17,632(sp)
80084618:	9023883a 	mov	r17,r18
8008461c:	8880400c 	andi	r2,r17,256
80084620:	4825883a 	mov	r18,r9
80084624:	10000426 	beq	r2,zero,80084638 <__ssvfscanf_r+0x1248>
80084628:	d9800104 	addi	r6,sp,4
8008462c:	3400be36 	bltu	r6,r16,80084928 <__ssvfscanf_r+0x1538>
80084630:	da000104 	addi	r8,sp,4
80084634:	443bae26 	beq	r8,r16,800834f0 <__ssvfscanf_r+0x100>
80084638:	8880040c 	andi	r2,r17,16
8008463c:	10009326 	beq	r2,zero,8008488c <__ssvfscanf_r+0x149c>
80084640:	d8800104 	addi	r2,sp,4
80084644:	80a1c83a 	sub	r16,r16,r2
80084648:	8521883a 	add	r16,r16,r20
8008464c:	003d0606 	br	80083a68 <__ssvfscanf_r+0x678>
80084650:	016002b4 	movhi	r5,32778
80084654:	8c63883a 	add	r17,r17,r17
80084658:	29785684 	addi	r5,r5,-7846
8008465c:	2c45883a 	add	r2,r5,r17
80084660:	1440000f 	ldh	r17,0(r2)
80084664:	00bd1fc4 	movi	r2,-2945
80084668:	90a4703a 	and	r18,r18,r2
8008466c:	003fd006 	br	800845b0 <__ssvfscanf_r+0x11c0>
80084670:	9082000c 	andi	r2,r18,2048
80084674:	103fce26 	beq	r2,zero,800845b0 <__ssvfscanf_r+0x11c0>
80084678:	8800021e 	bne	r17,zero,80084684 <__ssvfscanf_r+0x1294>
8008467c:	94808014 	ori	r18,r18,512
80084680:	04400204 	movi	r17,8
80084684:	9081000c 	andi	r2,r18,1024
80084688:	10009426 	beq	r2,zero,800848dc <__ssvfscanf_r+0x14ec>
8008468c:	00be9fc4 	movi	r2,-1409
80084690:	90a4703a 	and	r18,r18,r2
80084694:	003fc606 	br	800845b0 <__ssvfscanf_r+0x11c0>
80084698:	9080200c 	andi	r2,r18,128
8008469c:	103fdd26 	beq	r2,zero,80084614 <__ssvfscanf_r+0x1224>
800846a0:	9224703a 	and	r18,r18,r8
800846a4:	003fc206 	br	800845b0 <__ssvfscanf_r+0x11c0>
800846a8:	9800011e 	bne	r19,zero,800846b0 <__ssvfscanf_r+0x12c0>
800846ac:	04ffffc4 	movi	r19,-1
800846b0:	8900004c 	andi	r4,r17,1
800846b4:	20005b1e 	bne	r4,zero,80084824 <__ssvfscanf_r+0x1434>
800846b8:	8c40040c 	andi	r17,r17,16
800846bc:	88003026 	beq	r17,zero,80084780 <__ssvfscanf_r+0x1390>
800846c0:	0021883a 	mov	r16,zero
800846c4:	00000306 	br	800846d4 <__ssvfscanf_r+0x12e4>
800846c8:	18800003 	ldbu	r2,0(r3)
800846cc:	3885883a 	add	r2,r7,r2
800846d0:	10800043 	ldbu	r2,1(r2)
800846d4:	1080020c 	andi	r2,r2,8
800846d8:	103ce31e 	bne	r2,zero,80083a68 <__ssvfscanf_r+0x678>
800846dc:	e0800117 	ldw	r2,4(fp)
800846e0:	18c00044 	addi	r3,r3,1
800846e4:	84000044 	addi	r16,r16,1
800846e8:	10bfffc4 	addi	r2,r2,-1
800846ec:	e0800115 	stw	r2,4(fp)
800846f0:	e0c00015 	stw	r3,0(fp)
800846f4:	84fcdc26 	beq	r16,r19,80083a68 <__ssvfscanf_r+0x678>
800846f8:	00bff316 	blt	zero,r2,800846c8 <__ssvfscanf_r+0x12d8>
800846fc:	e00b883a 	mov	r5,fp
80084700:	b009883a 	mov	r4,r22
80084704:	008e1740 	call	8008e174 <__ssrefill_r>
80084708:	103cd71e 	bne	r2,zero,80083a68 <__ssvfscanf_r+0x678>
8008470c:	b9c00017 	ldw	r7,0(r23)
80084710:	e0c00017 	ldw	r3,0(fp)
80084714:	003fec06 	br	800846c8 <__ssvfscanf_r+0x12d8>
80084718:	e00b883a 	mov	r5,fp
8008471c:	b009883a 	mov	r4,r22
80084720:	d980a715 	stw	r6,668(sp)
80084724:	d9c0aa15 	stw	r7,680(sp)
80084728:	da00a815 	stw	r8,672(sp)
8008472c:	da40a915 	stw	r9,676(sp)
80084730:	dac0a615 	stw	r11,664(sp)
80084734:	008e1740 	call	8008e174 <__ssrefill_r>
80084738:	d980a717 	ldw	r6,668(sp)
8008473c:	d9c0aa17 	ldw	r7,680(sp)
80084740:	da00a817 	ldw	r8,672(sp)
80084744:	da40a917 	ldw	r9,676(sp)
80084748:	dac0a617 	ldw	r11,664(sp)
8008474c:	103fa026 	beq	r2,zero,800845d0 <__ssvfscanf_r+0x11e0>
80084750:	003fb006 	br	80084614 <__ssvfscanf_r+0x1224>
80084754:	8821883a 	mov	r16,r17
80084758:	b019883a 	mov	r12,r22
8008475c:	9823883a 	mov	r17,r19
80084760:	182d883a 	mov	r22,r3
80084764:	00bfbfc4 	movi	r2,-257
80084768:	a0a8703a 	and	r20,r20,r2
8008476c:	003e6706 	br	8008410c <__ssvfscanf_r+0xd1c>
80084770:	000f883a 	mov	r7,zero
80084774:	003f2806 	br	80084418 <__ssvfscanf_r+0x1028>
80084778:	d800a215 	stw	zero,648(sp)
8008477c:	003de306 	br	80083f0c <__ssvfscanf_r+0xb1c>
80084780:	da009c17 	ldw	r8,624(sp)
80084784:	9abfffc4 	addi	r10,r19,-1
80084788:	44400017 	ldw	r17,0(r8)
8008478c:	44000104 	addi	r16,r8,4
80084790:	880b883a 	mov	r5,r17
80084794:	8aa9883a 	add	r20,r17,r10
80084798:	00000606 	br	800847b4 <__ssvfscanf_r+0x13c4>
8008479c:	e0c00017 	ldw	r3,0(fp)
800847a0:	b9000017 	ldw	r4,0(r23)
800847a4:	a80b883a 	mov	r5,r21
800847a8:	18800003 	ldbu	r2,0(r3)
800847ac:	2085883a 	add	r2,r4,r2
800847b0:	10800043 	ldbu	r2,1(r2)
800847b4:	1080020c 	andi	r2,r2,8
800847b8:	1000551e 	bne	r2,zero,80084910 <__ssvfscanf_r+0x1520>
800847bc:	e0800117 	ldw	r2,4(fp)
800847c0:	19000044 	addi	r4,r3,1
800847c4:	e1000015 	stw	r4,0(fp)
800847c8:	10bfffc4 	addi	r2,r2,-1
800847cc:	e0800115 	stw	r2,4(fp)
800847d0:	18800003 	ldbu	r2,0(r3)
800847d4:	2d400044 	addi	r21,r5,1
800847d8:	a827883a 	mov	r19,r21
800847dc:	28800005 	stb	r2,0(r5)
800847e0:	2d000626 	beq	r5,r20,800847fc <__ssvfscanf_r+0x140c>
800847e4:	e0800117 	ldw	r2,4(fp)
800847e8:	00bfec16 	blt	zero,r2,8008479c <__ssvfscanf_r+0x13ac>
800847ec:	e00b883a 	mov	r5,fp
800847f0:	b009883a 	mov	r4,r22
800847f4:	008e1740 	call	8008e174 <__ssrefill_r>
800847f8:	103fe826 	beq	r2,zero,8008479c <__ssvfscanf_r+0x13ac>
800847fc:	da00a017 	ldw	r8,640(sp)
80084800:	dd009d17 	ldw	r20,628(sp)
80084804:	9c63c83a 	sub	r17,r19,r17
80084808:	42000044 	addi	r8,r8,1
8008480c:	98000005 	stb	zero,0(r19)
80084810:	9465883a 	add	r18,r18,r17
80084814:	da00a015 	stw	r8,640(sp)
80084818:	dc009c15 	stw	r16,624(sp)
8008481c:	a00d883a 	mov	r6,r20
80084820:	003b2f06 	br	800834e0 <__ssvfscanf_r+0xf0>
80084824:	dd409904 	addi	r21,sp,612
80084828:	8c40040c 	andi	r17,r17,16
8008482c:	01800204 	movi	r6,8
80084830:	000b883a 	mov	r5,zero
80084834:	a809883a 	mov	r4,r21
80084838:	008a1580 	call	8008a158 <memset>
8008483c:	8800401e 	bne	r17,zero,80084940 <__ssvfscanf_r+0x1550>
80084840:	da009c17 	ldw	r8,624(sp)
80084844:	45000017 	ldw	r20,0(r8)
80084848:	42000104 	addi	r8,r8,4
8008484c:	da009c15 	stw	r8,624(sp)
80084850:	000d883a 	mov	r6,zero
80084854:	3021883a 	mov	r16,r6
80084858:	dc409f15 	stw	r17,636(sp)
8008485c:	e0800017 	ldw	r2,0(fp)
80084860:	b8c00017 	ldw	r3,0(r23)
80084864:	10800003 	ldbu	r2,0(r2)
80084868:	1885883a 	add	r2,r3,r2
8008486c:	10800043 	ldbu	r2,1(r2)
80084870:	1080020c 	andi	r2,r2,8
80084874:	1000011e 	bne	r2,zero,8008487c <__ssvfscanf_r+0x148c>
80084878:	9800701e 	bne	r19,zero,80084a3c <__ssvfscanf_r+0x164c>
8008487c:	dc409f17 	ldw	r17,636(sp)
80084880:	883cdd1e 	bne	r17,zero,80083bf8 <__ssvfscanf_r+0x808>
80084884:	a0000015 	stw	zero,0(r20)
80084888:	003cd806 	br	80083bec <__ssvfscanf_r+0x7fc>
8008488c:	d9c09e17 	ldw	r7,632(sp)
80084890:	da00a117 	ldw	r8,644(sp)
80084894:	000d883a 	mov	r6,zero
80084898:	d9400104 	addi	r5,sp,4
8008489c:	b009883a 	mov	r4,r22
800848a0:	80000005 	stb	zero,0(r16)
800848a4:	403ee83a 	callr	r8
800848a8:	88c0080c 	andi	r3,r17,32
800848ac:	1800121e 	bne	r3,zero,800848f8 <__ssvfscanf_r+0x1508>
800848b0:	88c0010c 	andi	r3,r17,4
800848b4:	18004d26 	beq	r3,zero,800849ec <__ssvfscanf_r+0x15fc>
800848b8:	da009c17 	ldw	r8,624(sp)
800848bc:	40c00017 	ldw	r3,0(r8)
800848c0:	42000104 	addi	r8,r8,4
800848c4:	da009c15 	stw	r8,624(sp)
800848c8:	1880000d 	sth	r2,0(r3)
800848cc:	da00a017 	ldw	r8,640(sp)
800848d0:	42000044 	addi	r8,r8,1
800848d4:	da00a015 	stw	r8,640(sp)
800848d8:	003f5906 	br	80084640 <__ssvfscanf_r+0x1250>
800848dc:	00bf1fc4 	movi	r2,-897
800848e0:	90a4703a 	and	r18,r18,r2
800848e4:	38000226 	beq	r7,zero,800848f0 <__ssvfscanf_r+0x1500>
800848e8:	39ffffc4 	addi	r7,r7,-1
800848ec:	9cc00044 	addi	r19,r19,1
800848f0:	a5000044 	addi	r20,r20,1
800848f4:	003f3006 	br	800845b8 <__ssvfscanf_r+0x11c8>
800848f8:	da009c17 	ldw	r8,624(sp)
800848fc:	40c00017 	ldw	r3,0(r8)
80084900:	42000104 	addi	r8,r8,4
80084904:	da009c15 	stw	r8,624(sp)
80084908:	18800015 	stw	r2,0(r3)
8008490c:	003fef06 	br	800848cc <__ssvfscanf_r+0x14dc>
80084910:	2827883a 	mov	r19,r5
80084914:	003fb906 	br	800847fc <__ssvfscanf_r+0x140c>
80084918:	01be1fc4 	movi	r6,-1921
8008491c:	a1a8703a 	and	r20,r20,r6
80084920:	05400044 	movi	r21,1
80084924:	003de906 	br	800840cc <__ssvfscanf_r+0xcdc>
80084928:	817fffc7 	ldb	r5,-1(r16)
8008492c:	e00d883a 	mov	r6,fp
80084930:	b009883a 	mov	r4,r22
80084934:	843fffc4 	addi	r16,r16,-1
80084938:	008e06c0 	call	8008e06c <_sungetc_r>
8008493c:	003f3c06 	br	80084630 <__ssvfscanf_r+0x1240>
80084940:	dd009b04 	addi	r20,sp,620
80084944:	003fc206 	br	80084850 <__ssvfscanf_r+0x1460>
80084948:	00be1fc4 	movi	r2,-1921
8008494c:	a0a8703a 	and	r20,r20,r2
80084950:	05800044 	movi	r22,1
80084954:	003ddd06 	br	800840cc <__ssvfscanf_r+0xcdc>
80084958:	d8c09f17 	ldw	r3,636(sp)
8008495c:	88e3c83a 	sub	r17,r17,r3
80084960:	044dc83a 	sub	r6,zero,r17
80084964:	883e2126 	beq	r17,zero,800841ec <__ssvfscanf_r+0xdfc>
80084968:	d88055c4 	addi	r2,sp,343
8008496c:	80800136 	bltu	r16,r2,80084974 <__ssvfscanf_r+0x1584>
80084970:	dc005584 	addi	r16,sp,342
80084974:	016002b4 	movhi	r5,32778
80084978:	29785504 	addi	r5,r5,-7852
8008497c:	8009883a 	mov	r4,r16
80084980:	008bd3c0 	call	8008bd3c <sprintf>
80084984:	003e1906 	br	800841ec <__ssvfscanf_r+0xdfc>
80084988:	d8c0a517 	ldw	r3,660(sp)
8008498c:	000d883a 	mov	r6,zero
80084990:	01c00284 	movi	r7,10
80084994:	19400044 	addi	r5,r3,1
80084998:	b009883a 	mov	r4,r22
8008499c:	008d5f80 	call	8008d5f8 <_strtol_r>
800849a0:	da00a417 	ldw	r8,656(sp)
800849a4:	dc00a517 	ldw	r16,660(sp)
800849a8:	120dc83a 	sub	r6,r2,r8
800849ac:	003fee06 	br	80084968 <__ssvfscanf_r+0x1578>
800849b0:	da009c17 	ldw	r8,624(sp)
800849b4:	180b883a 	mov	r5,r3
800849b8:	8009883a 	mov	r4,r16
800849bc:	45000017 	ldw	r20,0(r8)
800849c0:	44400104 	addi	r17,r8,4
800849c4:	d8c0a615 	stw	r3,664(sp)
800849c8:	008bb980 	call	8008bb98 <__fpclassifyd>
800849cc:	d8c0a617 	ldw	r3,664(sp)
800849d0:	10006426 	beq	r2,zero,80084b64 <__ssvfscanf_r+0x1774>
800849d4:	8009883a 	mov	r4,r16
800849d8:	180b883a 	mov	r5,r3
800849dc:	00989b80 	call	800989b8 <__truncdfsf2>
800849e0:	a0800015 	stw	r2,0(r20)
800849e4:	dc409c15 	stw	r17,624(sp)
800849e8:	003e0f06 	br	80084228 <__ssvfscanf_r+0xe38>
800849ec:	88c0004c 	andi	r3,r17,1
800849f0:	183fc11e 	bne	r3,zero,800848f8 <__ssvfscanf_r+0x1508>
800849f4:	8c40008c 	andi	r17,r17,2
800849f8:	883fbf26 	beq	r17,zero,800848f8 <__ssvfscanf_r+0x1508>
800849fc:	da00a117 	ldw	r8,644(sp)
80084a00:	00a00274 	movhi	r2,32777
80084a04:	10b6cb04 	addi	r2,r2,-9428
80084a08:	d9c09e17 	ldw	r7,632(sp)
80084a0c:	000d883a 	mov	r6,zero
80084a10:	d9400104 	addi	r5,sp,4
80084a14:	b009883a 	mov	r4,r22
80084a18:	40806226 	beq	r8,r2,80084ba4 <__ssvfscanf_r+0x17b4>
80084a1c:	008d84c0 	call	8008d84c <_strtoll_r>
80084a20:	da009c17 	ldw	r8,624(sp)
80084a24:	41000017 	ldw	r4,0(r8)
80084a28:	42000104 	addi	r8,r8,4
80084a2c:	da009c15 	stw	r8,624(sp)
80084a30:	20800015 	stw	r2,0(r4)
80084a34:	20c00115 	stw	r3,4(r4)
80084a38:	003fa406 	br	800848cc <__ssvfscanf_r+0x14dc>
80084a3c:	0089a840 	call	80089a84 <__locale_mb_cur_max>
80084a40:	80bca726 	beq	r16,r2,80083ce0 <__ssvfscanf_r+0x8f0>
80084a44:	e0800017 	ldw	r2,0(fp)
80084a48:	e1000117 	ldw	r4,4(fp)
80084a4c:	d8c00104 	addi	r3,sp,4
80084a50:	12000003 	ldbu	r8,0(r2)
80084a54:	213fffc4 	addi	r4,r4,-1
80084a58:	10800044 	addi	r2,r2,1
80084a5c:	e1000115 	stw	r4,4(fp)
80084a60:	e0800015 	stw	r2,0(fp)
80084a64:	84400044 	addi	r17,r16,1
80084a68:	dd400015 	stw	r21,0(sp)
80084a6c:	1c21883a 	add	r16,r3,r16
80084a70:	b009883a 	mov	r4,r22
80084a74:	880f883a 	mov	r7,r17
80084a78:	180d883a 	mov	r6,r3
80084a7c:	a00b883a 	mov	r5,r20
80084a80:	82000005 	stb	r8,0(r16)
80084a84:	0089cf40 	call	80089cf4 <_mbrtowc_r>
80084a88:	013fffc4 	movi	r4,-1
80084a8c:	113c9426 	beq	r2,r4,80083ce0 <__ssvfscanf_r+0x8f0>
80084a90:	103c881e 	bne	r2,zero,80083cb4 <__ssvfscanf_r+0x8c4>
80084a94:	a0000015 	stw	zero,0(r20)
80084a98:	0009883a 	mov	r4,zero
80084a9c:	00899cc0 	call	800899cc <iswspace>
80084aa0:	10001a26 	beq	r2,zero,80084b0c <__ssvfscanf_r+0x171c>
80084aa4:	8821883a 	mov	r16,r17
80084aa8:	dc409f17 	ldw	r17,636(sp)
80084aac:	803f7426 	beq	r16,zero,80084880 <__ssvfscanf_r+0x1490>
80084ab0:	843fffc4 	addi	r16,r16,-1
80084ab4:	d9800104 	addi	r6,sp,4
80084ab8:	342b883a 	add	r21,r6,r16
80084abc:	00000106 	br	80084ac4 <__ssvfscanf_r+0x16d4>
80084ac0:	843fffc4 	addi	r16,r16,-1
80084ac4:	a9400003 	ldbu	r5,0(r21)
80084ac8:	e00d883a 	mov	r6,fp
80084acc:	b009883a 	mov	r4,r22
80084ad0:	008e06c0 	call	8008e06c <_sungetc_r>
80084ad4:	ad7fffc4 	addi	r21,r21,-1
80084ad8:	803ff91e 	bne	r16,zero,80084ac0 <__ssvfscanf_r+0x16d0>
80084adc:	003f6806 	br	80084880 <__ssvfscanf_r+0x1490>
80084ae0:	d9800104 	addi	r6,sp,4
80084ae4:	802b883a 	mov	r21,r16
80084ae8:	343a812e 	bgeu	r6,r16,800834f0 <__ssvfscanf_r+0x100>
80084aec:	ad7fffc4 	addi	r21,r21,-1
80084af0:	a9400007 	ldb	r5,0(r21)
80084af4:	e00d883a 	mov	r6,fp
80084af8:	b009883a 	mov	r4,r22
80084afc:	008e06c0 	call	8008e06c <_sungetc_r>
80084b00:	da000104 	addi	r8,sp,4
80084b04:	457ff91e 	bne	r8,r21,80084aec <__ssvfscanf_r+0x16fc>
80084b08:	003a7906 	br	800834f0 <__ssvfscanf_r+0x100>
80084b0c:	da009f17 	ldw	r8,636(sp)
80084b10:	9465883a 	add	r18,r18,r17
80084b14:	9cffffc4 	addi	r19,r19,-1
80084b18:	4000051e 	bne	r8,zero,80084b30 <__ssvfscanf_r+0x1740>
80084b1c:	a5000104 	addi	r20,r20,4
80084b20:	0021883a 	mov	r16,zero
80084b24:	003c6606 	br	80083cc0 <__ssvfscanf_r+0x8d0>
80084b28:	a1000017 	ldw	r4,0(r20)
80084b2c:	003fdb06 	br	80084a9c <__ssvfscanf_r+0x16ac>
80084b30:	0021883a 	mov	r16,zero
80084b34:	003c6206 	br	80083cc0 <__ssvfscanf_r+0x8d0>
80084b38:	d8800104 	addi	r2,sp,4
80084b3c:	802b883a 	mov	r21,r16
80084b40:	143a6b2e 	bgeu	r2,r16,800834f0 <__ssvfscanf_r+0x100>
80084b44:	ad7fffc4 	addi	r21,r21,-1
80084b48:	a9400007 	ldb	r5,0(r21)
80084b4c:	e00d883a 	mov	r6,fp
80084b50:	b009883a 	mov	r4,r22
80084b54:	008e06c0 	call	8008e06c <_sungetc_r>
80084b58:	d8c00104 	addi	r3,sp,4
80084b5c:	1d7ff91e 	bne	r3,r21,80084b44 <__ssvfscanf_r+0x1754>
80084b60:	003a6306 	br	800834f0 <__ssvfscanf_r+0x100>
80084b64:	0009883a 	mov	r4,zero
80084b68:	008bcdc0 	call	8008bcdc <nanf>
80084b6c:	a0800015 	stw	r2,0(r20)
80084b70:	dc409c15 	stw	r17,624(sp)
80084b74:	003dac06 	br	80084228 <__ssvfscanf_r+0xe38>
80084b78:	d9000104 	addi	r4,sp,4
80084b7c:	802b883a 	mov	r21,r16
80084b80:	243a5b2e 	bgeu	r4,r16,800834f0 <__ssvfscanf_r+0x100>
80084b84:	ad7fffc4 	addi	r21,r21,-1
80084b88:	a9400007 	ldb	r5,0(r21)
80084b8c:	e00d883a 	mov	r6,fp
80084b90:	b009883a 	mov	r4,r22
80084b94:	008e06c0 	call	8008e06c <_sungetc_r>
80084b98:	d9400104 	addi	r5,sp,4
80084b9c:	2d7ff91e 	bne	r5,r21,80084b84 <__ssvfscanf_r+0x1794>
80084ba0:	003a5306 	br	800834f0 <__ssvfscanf_r+0x100>
80084ba4:	008dd940 	call	8008dd94 <_strtoull_r>
80084ba8:	003f9d06 	br	80084a20 <__ssvfscanf_r+0x1630>

80084bac <___vfprintf_internal_r>:
80084bac:	deffb804 	addi	sp,sp,-288
80084bb0:	dfc04715 	stw	ra,284(sp)
80084bb4:	ddc04515 	stw	r23,276(sp)
80084bb8:	dd404315 	stw	r21,268(sp)
80084bbc:	d9002c15 	stw	r4,176(sp)
80084bc0:	282f883a 	mov	r23,r5
80084bc4:	302b883a 	mov	r21,r6
80084bc8:	d9c02d15 	stw	r7,180(sp)
80084bcc:	df004615 	stw	fp,280(sp)
80084bd0:	dd804415 	stw	r22,272(sp)
80084bd4:	dd004215 	stw	r20,264(sp)
80084bd8:	dcc04115 	stw	r19,260(sp)
80084bdc:	dc804015 	stw	r18,256(sp)
80084be0:	dc403f15 	stw	r17,252(sp)
80084be4:	dc003e15 	stw	r16,248(sp)
80084be8:	0089aa80 	call	80089aa8 <_localeconv_r>
80084bec:	10800017 	ldw	r2,0(r2)
80084bf0:	1009883a 	mov	r4,r2
80084bf4:	d8803415 	stw	r2,208(sp)
80084bf8:	00833580 	call	80083358 <strlen>
80084bfc:	d8803715 	stw	r2,220(sp)
80084c00:	d8802c17 	ldw	r2,176(sp)
80084c04:	10000226 	beq	r2,zero,80084c10 <___vfprintf_internal_r+0x64>
80084c08:	10800e17 	ldw	r2,56(r2)
80084c0c:	1000f926 	beq	r2,zero,80084ff4 <___vfprintf_internal_r+0x448>
80084c10:	b880030b 	ldhu	r2,12(r23)
80084c14:	10c8000c 	andi	r3,r2,8192
80084c18:	1800061e 	bne	r3,zero,80084c34 <___vfprintf_internal_r+0x88>
80084c1c:	b9001917 	ldw	r4,100(r23)
80084c20:	00f7ffc4 	movi	r3,-8193
80084c24:	10880014 	ori	r2,r2,8192
80084c28:	20c6703a 	and	r3,r4,r3
80084c2c:	b880030d 	sth	r2,12(r23)
80084c30:	b8c01915 	stw	r3,100(r23)
80084c34:	10c0020c 	andi	r3,r2,8
80084c38:	1800c126 	beq	r3,zero,80084f40 <___vfprintf_internal_r+0x394>
80084c3c:	b8c00417 	ldw	r3,16(r23)
80084c40:	1800bf26 	beq	r3,zero,80084f40 <___vfprintf_internal_r+0x394>
80084c44:	1080068c 	andi	r2,r2,26
80084c48:	00c00284 	movi	r3,10
80084c4c:	10c0c426 	beq	r2,r3,80084f60 <___vfprintf_internal_r+0x3b4>
80084c50:	d8c00404 	addi	r3,sp,16
80084c54:	052002b4 	movhi	r20,32778
80084c58:	d9001e04 	addi	r4,sp,120
80084c5c:	a5386f84 	addi	r20,r20,-7746
80084c60:	d8c01e15 	stw	r3,120(sp)
80084c64:	d8002015 	stw	zero,128(sp)
80084c68:	d8001f15 	stw	zero,124(sp)
80084c6c:	d8003315 	stw	zero,204(sp)
80084c70:	d8003615 	stw	zero,216(sp)
80084c74:	d8003815 	stw	zero,224(sp)
80084c78:	1811883a 	mov	r8,r3
80084c7c:	d8003915 	stw	zero,228(sp)
80084c80:	d8003a15 	stw	zero,232(sp)
80084c84:	d8002f15 	stw	zero,188(sp)
80084c88:	d9002815 	stw	r4,160(sp)
80084c8c:	a8800007 	ldb	r2,0(r21)
80084c90:	10027b26 	beq	r2,zero,80085680 <___vfprintf_internal_r+0xad4>
80084c94:	00c00944 	movi	r3,37
80084c98:	a821883a 	mov	r16,r21
80084c9c:	10c0021e 	bne	r2,r3,80084ca8 <___vfprintf_internal_r+0xfc>
80084ca0:	00001406 	br	80084cf4 <___vfprintf_internal_r+0x148>
80084ca4:	10c00326 	beq	r2,r3,80084cb4 <___vfprintf_internal_r+0x108>
80084ca8:	84000044 	addi	r16,r16,1
80084cac:	80800007 	ldb	r2,0(r16)
80084cb0:	103ffc1e 	bne	r2,zero,80084ca4 <___vfprintf_internal_r+0xf8>
80084cb4:	8563c83a 	sub	r17,r16,r21
80084cb8:	88000e26 	beq	r17,zero,80084cf4 <___vfprintf_internal_r+0x148>
80084cbc:	d8c02017 	ldw	r3,128(sp)
80084cc0:	d8801f17 	ldw	r2,124(sp)
80084cc4:	45400015 	stw	r21,0(r8)
80084cc8:	1c47883a 	add	r3,r3,r17
80084ccc:	10800044 	addi	r2,r2,1
80084cd0:	d8c02015 	stw	r3,128(sp)
80084cd4:	44400115 	stw	r17,4(r8)
80084cd8:	d8801f15 	stw	r2,124(sp)
80084cdc:	00c001c4 	movi	r3,7
80084ce0:	1880a716 	blt	r3,r2,80084f80 <___vfprintf_internal_r+0x3d4>
80084ce4:	42000204 	addi	r8,r8,8
80084ce8:	d9402f17 	ldw	r5,188(sp)
80084cec:	2c4b883a 	add	r5,r5,r17
80084cf0:	d9402f15 	stw	r5,188(sp)
80084cf4:	80800007 	ldb	r2,0(r16)
80084cf8:	1000a826 	beq	r2,zero,80084f9c <___vfprintf_internal_r+0x3f0>
80084cfc:	84400047 	ldb	r17,1(r16)
80084d00:	00bfffc4 	movi	r2,-1
80084d04:	85400044 	addi	r21,r16,1
80084d08:	d8002785 	stb	zero,158(sp)
80084d0c:	0007883a 	mov	r3,zero
80084d10:	000f883a 	mov	r7,zero
80084d14:	d8802915 	stw	r2,164(sp)
80084d18:	d8003115 	stw	zero,196(sp)
80084d1c:	0025883a 	mov	r18,zero
80084d20:	01401604 	movi	r5,88
80084d24:	01800244 	movi	r6,9
80084d28:	02800a84 	movi	r10,42
80084d2c:	02401b04 	movi	r9,108
80084d30:	ad400044 	addi	r21,r21,1
80084d34:	88bff804 	addi	r2,r17,-32
80084d38:	28830436 	bltu	r5,r2,8008594c <___vfprintf_internal_r+0xda0>
80084d3c:	100490ba 	slli	r2,r2,2
80084d40:	01200234 	movhi	r4,32776
80084d44:	21135504 	addi	r4,r4,19796
80084d48:	1105883a 	add	r2,r2,r4
80084d4c:	10800017 	ldw	r2,0(r2)
80084d50:	1000683a 	jmp	r2
80084d54:	8008586c 	andhi	zero,r16,8545
80084d58:	8008594c 	andi	zero,r16,8549
80084d5c:	8008594c 	andi	zero,r16,8549
80084d60:	8008588c 	andi	zero,r16,8546
80084d64:	8008594c 	andi	zero,r16,8549
80084d68:	8008594c 	andi	zero,r16,8549
80084d6c:	8008594c 	andi	zero,r16,8549
80084d70:	8008594c 	andi	zero,r16,8549
80084d74:	8008594c 	andi	zero,r16,8549
80084d78:	8008594c 	andi	zero,r16,8549
80084d7c:	80085000 	call	88008500 <__alt_data_end+0x7f0b500>
80084d80:	800857a8 	cmpgeui	zero,r16,8542
80084d84:	8008594c 	andi	zero,r16,8549
80084d88:	80084ec8 	cmpgei	zero,r16,8507
80084d8c:	80085028 	cmpgeui	zero,r16,8512
80084d90:	8008594c 	andi	zero,r16,8549
80084d94:	80085068 	cmpgeui	zero,r16,8513
80084d98:	80085074 	orhi	zero,r16,8513
80084d9c:	80085074 	orhi	zero,r16,8513
80084da0:	80085074 	orhi	zero,r16,8513
80084da4:	80085074 	orhi	zero,r16,8513
80084da8:	80085074 	orhi	zero,r16,8513
80084dac:	80085074 	orhi	zero,r16,8513
80084db0:	80085074 	orhi	zero,r16,8513
80084db4:	80085074 	orhi	zero,r16,8513
80084db8:	80085074 	orhi	zero,r16,8513
80084dbc:	8008594c 	andi	zero,r16,8549
80084dc0:	8008594c 	andi	zero,r16,8549
80084dc4:	8008594c 	andi	zero,r16,8549
80084dc8:	8008594c 	andi	zero,r16,8549
80084dcc:	8008594c 	andi	zero,r16,8549
80084dd0:	8008594c 	andi	zero,r16,8549
80084dd4:	8008594c 	andi	zero,r16,8549
80084dd8:	8008594c 	andi	zero,r16,8549
80084ddc:	8008594c 	andi	zero,r16,8549
80084de0:	8008594c 	andi	zero,r16,8549
80084de4:	800850a8 	cmpgeui	zero,r16,8514
80084de8:	80085164 	muli	zero,r16,8517
80084dec:	8008594c 	andi	zero,r16,8549
80084df0:	80085164 	muli	zero,r16,8517
80084df4:	8008594c 	andi	zero,r16,8549
80084df8:	8008594c 	andi	zero,r16,8549
80084dfc:	8008594c 	andi	zero,r16,8549
80084e00:	8008594c 	andi	zero,r16,8549
80084e04:	80085204 	addi	zero,r16,8520
80084e08:	8008594c 	andi	zero,r16,8549
80084e0c:	8008594c 	andi	zero,r16,8549
80084e10:	80085210 	cmplti	zero,r16,8520
80084e14:	8008594c 	andi	zero,r16,8549
80084e18:	8008594c 	andi	zero,r16,8549
80084e1c:	8008594c 	andi	zero,r16,8549
80084e20:	8008594c 	andi	zero,r16,8549
80084e24:	8008594c 	andi	zero,r16,8549
80084e28:	80085688 	cmpgei	zero,r16,8538
80084e2c:	8008594c 	andi	zero,r16,8549
80084e30:	8008594c 	andi	zero,r16,8549
80084e34:	800856e8 	cmpgeui	zero,r16,8539
80084e38:	8008594c 	andi	zero,r16,8549
80084e3c:	8008594c 	andi	zero,r16,8549
80084e40:	8008594c 	andi	zero,r16,8549
80084e44:	8008594c 	andi	zero,r16,8549
80084e48:	8008594c 	andi	zero,r16,8549
80084e4c:	8008594c 	andi	zero,r16,8549
80084e50:	8008594c 	andi	zero,r16,8549
80084e54:	8008594c 	andi	zero,r16,8549
80084e58:	8008594c 	andi	zero,r16,8549
80084e5c:	8008594c 	andi	zero,r16,8549
80084e60:	800858f8 	rdprs	zero,r16,8547
80084e64:	80085898 	cmpnei	zero,r16,8546
80084e68:	80085164 	muli	zero,r16,8517
80084e6c:	80085164 	muli	zero,r16,8517
80084e70:	80085164 	muli	zero,r16,8517
80084e74:	800858a8 	cmpgeui	zero,r16,8546
80084e78:	80085898 	cmpnei	zero,r16,8546
80084e7c:	8008594c 	andi	zero,r16,8549
80084e80:	8008594c 	andi	zero,r16,8549
80084e84:	800858b4 	orhi	zero,r16,8546
80084e88:	8008594c 	andi	zero,r16,8549
80084e8c:	800858c4 	addi	zero,r16,8547
80084e90:	80085798 	cmpnei	zero,r16,8542
80084e94:	80084ed4 	ori	zero,r16,8507
80084e98:	800857b8 	rdprs	zero,r16,8542
80084e9c:	8008594c 	andi	zero,r16,8549
80084ea0:	800857c4 	addi	zero,r16,8543
80084ea4:	8008594c 	andi	zero,r16,8549
80084ea8:	80085820 	cmpeqi	zero,r16,8544
80084eac:	8008594c 	andi	zero,r16,8549
80084eb0:	8008594c 	andi	zero,r16,8549
80084eb4:	80085830 	cmpltui	zero,r16,8544
80084eb8:	d9003117 	ldw	r4,196(sp)
80084ebc:	d8802d15 	stw	r2,180(sp)
80084ec0:	0109c83a 	sub	r4,zero,r4
80084ec4:	d9003115 	stw	r4,196(sp)
80084ec8:	94800114 	ori	r18,r18,4
80084ecc:	ac400007 	ldb	r17,0(r21)
80084ed0:	003f9706 	br	80084d30 <___vfprintf_internal_r+0x184>
80084ed4:	00800c04 	movi	r2,48
80084ed8:	d9002d17 	ldw	r4,180(sp)
80084edc:	d9402917 	ldw	r5,164(sp)
80084ee0:	d8802705 	stb	r2,156(sp)
80084ee4:	00801e04 	movi	r2,120
80084ee8:	d8802745 	stb	r2,157(sp)
80084eec:	d8002785 	stb	zero,158(sp)
80084ef0:	20c00104 	addi	r3,r4,4
80084ef4:	24c00017 	ldw	r19,0(r4)
80084ef8:	002d883a 	mov	r22,zero
80084efc:	90800094 	ori	r2,r18,2
80084f00:	28029a16 	blt	r5,zero,8008596c <___vfprintf_internal_r+0xdc0>
80084f04:	00bfdfc4 	movi	r2,-129
80084f08:	90a4703a 	and	r18,r18,r2
80084f0c:	d8c02d15 	stw	r3,180(sp)
80084f10:	94800094 	ori	r18,r18,2
80084f14:	9802871e 	bne	r19,zero,80085934 <___vfprintf_internal_r+0xd88>
80084f18:	00a002b4 	movhi	r2,32778
80084f1c:	10b86804 	addi	r2,r2,-7776
80084f20:	d8803915 	stw	r2,228(sp)
80084f24:	04401e04 	movi	r17,120
80084f28:	d8802917 	ldw	r2,164(sp)
80084f2c:	0039883a 	mov	fp,zero
80084f30:	1001e926 	beq	r2,zero,800856d8 <___vfprintf_internal_r+0xb2c>
80084f34:	0027883a 	mov	r19,zero
80084f38:	002d883a 	mov	r22,zero
80084f3c:	00020506 	br	80085754 <___vfprintf_internal_r+0xba8>
80084f40:	d9002c17 	ldw	r4,176(sp)
80084f44:	b80b883a 	mov	r5,r23
80084f48:	0086edc0 	call	80086edc <__swsetup_r>
80084f4c:	1005ac1e 	bne	r2,zero,80086600 <___vfprintf_internal_r+0x1a54>
80084f50:	b880030b 	ldhu	r2,12(r23)
80084f54:	00c00284 	movi	r3,10
80084f58:	1080068c 	andi	r2,r2,26
80084f5c:	10ff3c1e 	bne	r2,r3,80084c50 <___vfprintf_internal_r+0xa4>
80084f60:	b880038f 	ldh	r2,14(r23)
80084f64:	103f3a16 	blt	r2,zero,80084c50 <___vfprintf_internal_r+0xa4>
80084f68:	d9c02d17 	ldw	r7,180(sp)
80084f6c:	d9002c17 	ldw	r4,176(sp)
80084f70:	a80d883a 	mov	r6,r21
80084f74:	b80b883a 	mov	r5,r23
80084f78:	0086dc00 	call	80086dc0 <__sbprintf>
80084f7c:	00001106 	br	80084fc4 <___vfprintf_internal_r+0x418>
80084f80:	d9002c17 	ldw	r4,176(sp)
80084f84:	d9801e04 	addi	r6,sp,120
80084f88:	b80b883a 	mov	r5,r23
80084f8c:	00919200 	call	80091920 <__sprint_r>
80084f90:	1000081e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80084f94:	da000404 	addi	r8,sp,16
80084f98:	003f5306 	br	80084ce8 <___vfprintf_internal_r+0x13c>
80084f9c:	d8802017 	ldw	r2,128(sp)
80084fa0:	10000426 	beq	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80084fa4:	d9002c17 	ldw	r4,176(sp)
80084fa8:	d9801e04 	addi	r6,sp,120
80084fac:	b80b883a 	mov	r5,r23
80084fb0:	00919200 	call	80091920 <__sprint_r>
80084fb4:	b880030b 	ldhu	r2,12(r23)
80084fb8:	1080100c 	andi	r2,r2,64
80084fbc:	1005901e 	bne	r2,zero,80086600 <___vfprintf_internal_r+0x1a54>
80084fc0:	d8802f17 	ldw	r2,188(sp)
80084fc4:	dfc04717 	ldw	ra,284(sp)
80084fc8:	df004617 	ldw	fp,280(sp)
80084fcc:	ddc04517 	ldw	r23,276(sp)
80084fd0:	dd804417 	ldw	r22,272(sp)
80084fd4:	dd404317 	ldw	r21,268(sp)
80084fd8:	dd004217 	ldw	r20,264(sp)
80084fdc:	dcc04117 	ldw	r19,260(sp)
80084fe0:	dc804017 	ldw	r18,256(sp)
80084fe4:	dc403f17 	ldw	r17,252(sp)
80084fe8:	dc003e17 	ldw	r16,248(sp)
80084fec:	dec04804 	addi	sp,sp,288
80084ff0:	f800283a 	ret
80084ff4:	d9002c17 	ldw	r4,176(sp)
80084ff8:	0088f040 	call	80088f04 <__sinit>
80084ffc:	003f0406 	br	80084c10 <___vfprintf_internal_r+0x64>
80085000:	d8802d17 	ldw	r2,180(sp)
80085004:	d9002d17 	ldw	r4,180(sp)
80085008:	10800017 	ldw	r2,0(r2)
8008500c:	d8803115 	stw	r2,196(sp)
80085010:	20800104 	addi	r2,r4,4
80085014:	d9003117 	ldw	r4,196(sp)
80085018:	203fa716 	blt	r4,zero,80084eb8 <___vfprintf_internal_r+0x30c>
8008501c:	d8802d15 	stw	r2,180(sp)
80085020:	ac400007 	ldb	r17,0(r21)
80085024:	003f4206 	br	80084d30 <___vfprintf_internal_r+0x184>
80085028:	ac400007 	ldb	r17,0(r21)
8008502c:	aac00044 	addi	r11,r21,1
80085030:	8a872826 	beq	r17,r10,80086cd4 <___vfprintf_internal_r+0x2128>
80085034:	88bff404 	addi	r2,r17,-48
80085038:	0009883a 	mov	r4,zero
8008503c:	30867d36 	bltu	r6,r2,80086a34 <___vfprintf_internal_r+0x1e88>
80085040:	5c400007 	ldb	r17,0(r11)
80085044:	210002a4 	muli	r4,r4,10
80085048:	5d400044 	addi	r21,r11,1
8008504c:	a817883a 	mov	r11,r21
80085050:	2089883a 	add	r4,r4,r2
80085054:	88bff404 	addi	r2,r17,-48
80085058:	30bff92e 	bgeu	r6,r2,80085040 <___vfprintf_internal_r+0x494>
8008505c:	2005c916 	blt	r4,zero,80086784 <___vfprintf_internal_r+0x1bd8>
80085060:	d9002915 	stw	r4,164(sp)
80085064:	003f3306 	br	80084d34 <___vfprintf_internal_r+0x188>
80085068:	94802014 	ori	r18,r18,128
8008506c:	ac400007 	ldb	r17,0(r21)
80085070:	003f2f06 	br	80084d30 <___vfprintf_internal_r+0x184>
80085074:	a809883a 	mov	r4,r21
80085078:	d8003115 	stw	zero,196(sp)
8008507c:	88bff404 	addi	r2,r17,-48
80085080:	0017883a 	mov	r11,zero
80085084:	24400007 	ldb	r17,0(r4)
80085088:	5ac002a4 	muli	r11,r11,10
8008508c:	ad400044 	addi	r21,r21,1
80085090:	a809883a 	mov	r4,r21
80085094:	12d7883a 	add	r11,r2,r11
80085098:	88bff404 	addi	r2,r17,-48
8008509c:	30bff92e 	bgeu	r6,r2,80085084 <___vfprintf_internal_r+0x4d8>
800850a0:	dac03115 	stw	r11,196(sp)
800850a4:	003f2306 	br	80084d34 <___vfprintf_internal_r+0x188>
800850a8:	18c03fcc 	andi	r3,r3,255
800850ac:	18072b1e 	bne	r3,zero,80086d5c <___vfprintf_internal_r+0x21b0>
800850b0:	94800414 	ori	r18,r18,16
800850b4:	9080080c 	andi	r2,r18,32
800850b8:	10037b26 	beq	r2,zero,80085ea8 <___vfprintf_internal_r+0x12fc>
800850bc:	d9402d17 	ldw	r5,180(sp)
800850c0:	28800117 	ldw	r2,4(r5)
800850c4:	2cc00017 	ldw	r19,0(r5)
800850c8:	29400204 	addi	r5,r5,8
800850cc:	d9402d15 	stw	r5,180(sp)
800850d0:	102d883a 	mov	r22,r2
800850d4:	10044b16 	blt	r2,zero,80086204 <___vfprintf_internal_r+0x1658>
800850d8:	d9402917 	ldw	r5,164(sp)
800850dc:	df002783 	ldbu	fp,158(sp)
800850e0:	2803bc16 	blt	r5,zero,80085fd4 <___vfprintf_internal_r+0x1428>
800850e4:	00ffdfc4 	movi	r3,-129
800850e8:	9d84b03a 	or	r2,r19,r22
800850ec:	90e4703a 	and	r18,r18,r3
800850f0:	10017726 	beq	r2,zero,800856d0 <___vfprintf_internal_r+0xb24>
800850f4:	b0038326 	beq	r22,zero,80085f04 <___vfprintf_internal_r+0x1358>
800850f8:	dc402a15 	stw	r17,168(sp)
800850fc:	dc001e04 	addi	r16,sp,120
80085100:	b023883a 	mov	r17,r22
80085104:	402d883a 	mov	r22,r8
80085108:	9809883a 	mov	r4,r19
8008510c:	880b883a 	mov	r5,r17
80085110:	01800284 	movi	r6,10
80085114:	000f883a 	mov	r7,zero
80085118:	0095c800 	call	80095c80 <__umoddi3>
8008511c:	10800c04 	addi	r2,r2,48
80085120:	843fffc4 	addi	r16,r16,-1
80085124:	9809883a 	mov	r4,r19
80085128:	880b883a 	mov	r5,r17
8008512c:	80800005 	stb	r2,0(r16)
80085130:	01800284 	movi	r6,10
80085134:	000f883a 	mov	r7,zero
80085138:	00957080 	call	80095708 <__udivdi3>
8008513c:	1027883a 	mov	r19,r2
80085140:	10c4b03a 	or	r2,r2,r3
80085144:	1823883a 	mov	r17,r3
80085148:	103fef1e 	bne	r2,zero,80085108 <___vfprintf_internal_r+0x55c>
8008514c:	d8c02817 	ldw	r3,160(sp)
80085150:	dc402a17 	ldw	r17,168(sp)
80085154:	b011883a 	mov	r8,r22
80085158:	1c07c83a 	sub	r3,r3,r16
8008515c:	d8c02e15 	stw	r3,184(sp)
80085160:	00005906 	br	800852c8 <___vfprintf_internal_r+0x71c>
80085164:	18c03fcc 	andi	r3,r3,255
80085168:	1806fa1e 	bne	r3,zero,80086d54 <___vfprintf_internal_r+0x21a8>
8008516c:	9080020c 	andi	r2,r18,8
80085170:	10048a26 	beq	r2,zero,8008639c <___vfprintf_internal_r+0x17f0>
80085174:	d8c02d17 	ldw	r3,180(sp)
80085178:	d9002d17 	ldw	r4,180(sp)
8008517c:	d9402d17 	ldw	r5,180(sp)
80085180:	18c00017 	ldw	r3,0(r3)
80085184:	21000117 	ldw	r4,4(r4)
80085188:	29400204 	addi	r5,r5,8
8008518c:	d8c03615 	stw	r3,216(sp)
80085190:	d9003815 	stw	r4,224(sp)
80085194:	d9402d15 	stw	r5,180(sp)
80085198:	d9003617 	ldw	r4,216(sp)
8008519c:	d9403817 	ldw	r5,224(sp)
800851a0:	da003d15 	stw	r8,244(sp)
800851a4:	04000044 	movi	r16,1
800851a8:	008bb980 	call	8008bb98 <__fpclassifyd>
800851ac:	da003d17 	ldw	r8,244(sp)
800851b0:	14041f1e 	bne	r2,r16,80086230 <___vfprintf_internal_r+0x1684>
800851b4:	d9003617 	ldw	r4,216(sp)
800851b8:	d9403817 	ldw	r5,224(sp)
800851bc:	000d883a 	mov	r6,zero
800851c0:	000f883a 	mov	r7,zero
800851c4:	00976ac0 	call	800976ac <__ledf2>
800851c8:	da003d17 	ldw	r8,244(sp)
800851cc:	1005be16 	blt	r2,zero,800868c8 <___vfprintf_internal_r+0x1d1c>
800851d0:	df002783 	ldbu	fp,158(sp)
800851d4:	008011c4 	movi	r2,71
800851d8:	1445330e 	bge	r2,r17,800866a8 <___vfprintf_internal_r+0x1afc>
800851dc:	042002b4 	movhi	r16,32778
800851e0:	84386004 	addi	r16,r16,-7808
800851e4:	00c000c4 	movi	r3,3
800851e8:	00bfdfc4 	movi	r2,-129
800851ec:	d8c02a15 	stw	r3,168(sp)
800851f0:	90a4703a 	and	r18,r18,r2
800851f4:	d8c02e15 	stw	r3,184(sp)
800851f8:	d8002915 	stw	zero,164(sp)
800851fc:	d8003215 	stw	zero,200(sp)
80085200:	00003706 	br	800852e0 <___vfprintf_internal_r+0x734>
80085204:	94800214 	ori	r18,r18,8
80085208:	ac400007 	ldb	r17,0(r21)
8008520c:	003ec806 	br	80084d30 <___vfprintf_internal_r+0x184>
80085210:	18c03fcc 	andi	r3,r3,255
80085214:	1806db1e 	bne	r3,zero,80086d84 <___vfprintf_internal_r+0x21d8>
80085218:	94800414 	ori	r18,r18,16
8008521c:	9080080c 	andi	r2,r18,32
80085220:	1002d826 	beq	r2,zero,80085d84 <___vfprintf_internal_r+0x11d8>
80085224:	d9402d17 	ldw	r5,180(sp)
80085228:	d8c02917 	ldw	r3,164(sp)
8008522c:	d8002785 	stb	zero,158(sp)
80085230:	28800204 	addi	r2,r5,8
80085234:	2cc00017 	ldw	r19,0(r5)
80085238:	2d800117 	ldw	r22,4(r5)
8008523c:	18048f16 	blt	r3,zero,8008647c <___vfprintf_internal_r+0x18d0>
80085240:	013fdfc4 	movi	r4,-129
80085244:	9d86b03a 	or	r3,r19,r22
80085248:	d8802d15 	stw	r2,180(sp)
8008524c:	9124703a 	and	r18,r18,r4
80085250:	1802d91e 	bne	r3,zero,80085db8 <___vfprintf_internal_r+0x120c>
80085254:	d8c02917 	ldw	r3,164(sp)
80085258:	0039883a 	mov	fp,zero
8008525c:	1805c326 	beq	r3,zero,8008696c <___vfprintf_internal_r+0x1dc0>
80085260:	0027883a 	mov	r19,zero
80085264:	002d883a 	mov	r22,zero
80085268:	dc001e04 	addi	r16,sp,120
8008526c:	9806d0fa 	srli	r3,r19,3
80085270:	b008977a 	slli	r4,r22,29
80085274:	b02cd0fa 	srli	r22,r22,3
80085278:	9cc001cc 	andi	r19,r19,7
8008527c:	98800c04 	addi	r2,r19,48
80085280:	843fffc4 	addi	r16,r16,-1
80085284:	20e6b03a 	or	r19,r4,r3
80085288:	80800005 	stb	r2,0(r16)
8008528c:	9d86b03a 	or	r3,r19,r22
80085290:	183ff61e 	bne	r3,zero,8008526c <___vfprintf_internal_r+0x6c0>
80085294:	90c0004c 	andi	r3,r18,1
80085298:	18013b26 	beq	r3,zero,80085788 <___vfprintf_internal_r+0xbdc>
8008529c:	10803fcc 	andi	r2,r2,255
800852a0:	1080201c 	xori	r2,r2,128
800852a4:	10bfe004 	addi	r2,r2,-128
800852a8:	00c00c04 	movi	r3,48
800852ac:	10c13626 	beq	r2,r3,80085788 <___vfprintf_internal_r+0xbdc>
800852b0:	80ffffc5 	stb	r3,-1(r16)
800852b4:	d8c02817 	ldw	r3,160(sp)
800852b8:	80bfffc4 	addi	r2,r16,-1
800852bc:	1021883a 	mov	r16,r2
800852c0:	1887c83a 	sub	r3,r3,r2
800852c4:	d8c02e15 	stw	r3,184(sp)
800852c8:	d8802e17 	ldw	r2,184(sp)
800852cc:	d9002917 	ldw	r4,164(sp)
800852d0:	1100010e 	bge	r2,r4,800852d8 <___vfprintf_internal_r+0x72c>
800852d4:	2005883a 	mov	r2,r4
800852d8:	d8802a15 	stw	r2,168(sp)
800852dc:	d8003215 	stw	zero,200(sp)
800852e0:	e7003fcc 	andi	fp,fp,255
800852e4:	e700201c 	xori	fp,fp,128
800852e8:	e73fe004 	addi	fp,fp,-128
800852ec:	e0000326 	beq	fp,zero,800852fc <___vfprintf_internal_r+0x750>
800852f0:	d8c02a17 	ldw	r3,168(sp)
800852f4:	18c00044 	addi	r3,r3,1
800852f8:	d8c02a15 	stw	r3,168(sp)
800852fc:	90c0008c 	andi	r3,r18,2
80085300:	d8c02b15 	stw	r3,172(sp)
80085304:	18000326 	beq	r3,zero,80085314 <___vfprintf_internal_r+0x768>
80085308:	d8c02a17 	ldw	r3,168(sp)
8008530c:	18c00084 	addi	r3,r3,2
80085310:	d8c02a15 	stw	r3,168(sp)
80085314:	90c0210c 	andi	r3,r18,132
80085318:	d8c03015 	stw	r3,192(sp)
8008531c:	1801a31e 	bne	r3,zero,800859ac <___vfprintf_internal_r+0xe00>
80085320:	d9003117 	ldw	r4,196(sp)
80085324:	d8c02a17 	ldw	r3,168(sp)
80085328:	20e7c83a 	sub	r19,r4,r3
8008532c:	04c19f0e 	bge	zero,r19,800859ac <___vfprintf_internal_r+0xe00>
80085330:	02400404 	movi	r9,16
80085334:	d8c02017 	ldw	r3,128(sp)
80085338:	d8801f17 	ldw	r2,124(sp)
8008533c:	4cc50d0e 	bge	r9,r19,80086774 <___vfprintf_internal_r+0x1bc8>
80085340:	016002b4 	movhi	r5,32778
80085344:	29787384 	addi	r5,r5,-7730
80085348:	dc403b15 	stw	r17,236(sp)
8008534c:	d9403515 	stw	r5,212(sp)
80085350:	9823883a 	mov	r17,r19
80085354:	482d883a 	mov	r22,r9
80085358:	9027883a 	mov	r19,r18
8008535c:	070001c4 	movi	fp,7
80085360:	8025883a 	mov	r18,r16
80085364:	dc002c17 	ldw	r16,176(sp)
80085368:	00000306 	br	80085378 <___vfprintf_internal_r+0x7cc>
8008536c:	8c7ffc04 	addi	r17,r17,-16
80085370:	42000204 	addi	r8,r8,8
80085374:	b440130e 	bge	r22,r17,800853c4 <___vfprintf_internal_r+0x818>
80085378:	012002b4 	movhi	r4,32778
8008537c:	18c00404 	addi	r3,r3,16
80085380:	10800044 	addi	r2,r2,1
80085384:	21387384 	addi	r4,r4,-7730
80085388:	41000015 	stw	r4,0(r8)
8008538c:	45800115 	stw	r22,4(r8)
80085390:	d8c02015 	stw	r3,128(sp)
80085394:	d8801f15 	stw	r2,124(sp)
80085398:	e0bff40e 	bge	fp,r2,8008536c <___vfprintf_internal_r+0x7c0>
8008539c:	d9801e04 	addi	r6,sp,120
800853a0:	b80b883a 	mov	r5,r23
800853a4:	8009883a 	mov	r4,r16
800853a8:	00919200 	call	80091920 <__sprint_r>
800853ac:	103f011e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
800853b0:	8c7ffc04 	addi	r17,r17,-16
800853b4:	d8c02017 	ldw	r3,128(sp)
800853b8:	d8801f17 	ldw	r2,124(sp)
800853bc:	da000404 	addi	r8,sp,16
800853c0:	b47fed16 	blt	r22,r17,80085378 <___vfprintf_internal_r+0x7cc>
800853c4:	9021883a 	mov	r16,r18
800853c8:	9825883a 	mov	r18,r19
800853cc:	8827883a 	mov	r19,r17
800853d0:	dc403b17 	ldw	r17,236(sp)
800853d4:	d9403517 	ldw	r5,212(sp)
800853d8:	98c7883a 	add	r3,r19,r3
800853dc:	10800044 	addi	r2,r2,1
800853e0:	41400015 	stw	r5,0(r8)
800853e4:	44c00115 	stw	r19,4(r8)
800853e8:	d8c02015 	stw	r3,128(sp)
800853ec:	d8801f15 	stw	r2,124(sp)
800853f0:	010001c4 	movi	r4,7
800853f4:	2082a316 	blt	r4,r2,80085e84 <___vfprintf_internal_r+0x12d8>
800853f8:	df002787 	ldb	fp,158(sp)
800853fc:	42000204 	addi	r8,r8,8
80085400:	e0000c26 	beq	fp,zero,80085434 <___vfprintf_internal_r+0x888>
80085404:	d8801f17 	ldw	r2,124(sp)
80085408:	d9002784 	addi	r4,sp,158
8008540c:	18c00044 	addi	r3,r3,1
80085410:	10800044 	addi	r2,r2,1
80085414:	41000015 	stw	r4,0(r8)
80085418:	01000044 	movi	r4,1
8008541c:	41000115 	stw	r4,4(r8)
80085420:	d8c02015 	stw	r3,128(sp)
80085424:	d8801f15 	stw	r2,124(sp)
80085428:	010001c4 	movi	r4,7
8008542c:	20823c16 	blt	r4,r2,80085d20 <___vfprintf_internal_r+0x1174>
80085430:	42000204 	addi	r8,r8,8
80085434:	d8802b17 	ldw	r2,172(sp)
80085438:	10000c26 	beq	r2,zero,8008546c <___vfprintf_internal_r+0x8c0>
8008543c:	d8801f17 	ldw	r2,124(sp)
80085440:	d9002704 	addi	r4,sp,156
80085444:	18c00084 	addi	r3,r3,2
80085448:	10800044 	addi	r2,r2,1
8008544c:	41000015 	stw	r4,0(r8)
80085450:	01000084 	movi	r4,2
80085454:	41000115 	stw	r4,4(r8)
80085458:	d8c02015 	stw	r3,128(sp)
8008545c:	d8801f15 	stw	r2,124(sp)
80085460:	010001c4 	movi	r4,7
80085464:	20823616 	blt	r4,r2,80085d40 <___vfprintf_internal_r+0x1194>
80085468:	42000204 	addi	r8,r8,8
8008546c:	d9003017 	ldw	r4,192(sp)
80085470:	00802004 	movi	r2,128
80085474:	20819926 	beq	r4,r2,80085adc <___vfprintf_internal_r+0xf30>
80085478:	d9402917 	ldw	r5,164(sp)
8008547c:	d8802e17 	ldw	r2,184(sp)
80085480:	28adc83a 	sub	r22,r5,r2
80085484:	0580310e 	bge	zero,r22,8008554c <___vfprintf_internal_r+0x9a0>
80085488:	07000404 	movi	fp,16
8008548c:	d8801f17 	ldw	r2,124(sp)
80085490:	e584140e 	bge	fp,r22,800864e4 <___vfprintf_internal_r+0x1938>
80085494:	016002b4 	movhi	r5,32778
80085498:	29786f84 	addi	r5,r5,-7746
8008549c:	dc402915 	stw	r17,164(sp)
800854a0:	d9402b15 	stw	r5,172(sp)
800854a4:	b023883a 	mov	r17,r22
800854a8:	04c001c4 	movi	r19,7
800854ac:	a82d883a 	mov	r22,r21
800854b0:	902b883a 	mov	r21,r18
800854b4:	8025883a 	mov	r18,r16
800854b8:	dc002c17 	ldw	r16,176(sp)
800854bc:	00000306 	br	800854cc <___vfprintf_internal_r+0x920>
800854c0:	8c7ffc04 	addi	r17,r17,-16
800854c4:	42000204 	addi	r8,r8,8
800854c8:	e440110e 	bge	fp,r17,80085510 <___vfprintf_internal_r+0x964>
800854cc:	18c00404 	addi	r3,r3,16
800854d0:	10800044 	addi	r2,r2,1
800854d4:	45000015 	stw	r20,0(r8)
800854d8:	47000115 	stw	fp,4(r8)
800854dc:	d8c02015 	stw	r3,128(sp)
800854e0:	d8801f15 	stw	r2,124(sp)
800854e4:	98bff60e 	bge	r19,r2,800854c0 <___vfprintf_internal_r+0x914>
800854e8:	d9801e04 	addi	r6,sp,120
800854ec:	b80b883a 	mov	r5,r23
800854f0:	8009883a 	mov	r4,r16
800854f4:	00919200 	call	80091920 <__sprint_r>
800854f8:	103eae1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
800854fc:	8c7ffc04 	addi	r17,r17,-16
80085500:	d8c02017 	ldw	r3,128(sp)
80085504:	d8801f17 	ldw	r2,124(sp)
80085508:	da000404 	addi	r8,sp,16
8008550c:	e47fef16 	blt	fp,r17,800854cc <___vfprintf_internal_r+0x920>
80085510:	9021883a 	mov	r16,r18
80085514:	a825883a 	mov	r18,r21
80085518:	b02b883a 	mov	r21,r22
8008551c:	882d883a 	mov	r22,r17
80085520:	dc402917 	ldw	r17,164(sp)
80085524:	d9002b17 	ldw	r4,172(sp)
80085528:	1d87883a 	add	r3,r3,r22
8008552c:	10800044 	addi	r2,r2,1
80085530:	41000015 	stw	r4,0(r8)
80085534:	45800115 	stw	r22,4(r8)
80085538:	d8c02015 	stw	r3,128(sp)
8008553c:	d8801f15 	stw	r2,124(sp)
80085540:	010001c4 	movi	r4,7
80085544:	2081ee16 	blt	r4,r2,80085d00 <___vfprintf_internal_r+0x1154>
80085548:	42000204 	addi	r8,r8,8
8008554c:	9080400c 	andi	r2,r18,256
80085550:	1001181e 	bne	r2,zero,800859b4 <___vfprintf_internal_r+0xe08>
80085554:	d9402e17 	ldw	r5,184(sp)
80085558:	d8801f17 	ldw	r2,124(sp)
8008555c:	44000015 	stw	r16,0(r8)
80085560:	1947883a 	add	r3,r3,r5
80085564:	10800044 	addi	r2,r2,1
80085568:	41400115 	stw	r5,4(r8)
8008556c:	d8c02015 	stw	r3,128(sp)
80085570:	d8801f15 	stw	r2,124(sp)
80085574:	010001c4 	movi	r4,7
80085578:	2081d316 	blt	r4,r2,80085cc8 <___vfprintf_internal_r+0x111c>
8008557c:	42000204 	addi	r8,r8,8
80085580:	9480010c 	andi	r18,r18,4
80085584:	90003226 	beq	r18,zero,80085650 <___vfprintf_internal_r+0xaa4>
80085588:	d9403117 	ldw	r5,196(sp)
8008558c:	d8802a17 	ldw	r2,168(sp)
80085590:	28a1c83a 	sub	r16,r5,r2
80085594:	04002e0e 	bge	zero,r16,80085650 <___vfprintf_internal_r+0xaa4>
80085598:	04400404 	movi	r17,16
8008559c:	d8801f17 	ldw	r2,124(sp)
800855a0:	8c04a20e 	bge	r17,r16,8008682c <___vfprintf_internal_r+0x1c80>
800855a4:	016002b4 	movhi	r5,32778
800855a8:	29787384 	addi	r5,r5,-7730
800855ac:	d9403515 	stw	r5,212(sp)
800855b0:	048001c4 	movi	r18,7
800855b4:	dcc02c17 	ldw	r19,176(sp)
800855b8:	00000306 	br	800855c8 <___vfprintf_internal_r+0xa1c>
800855bc:	843ffc04 	addi	r16,r16,-16
800855c0:	42000204 	addi	r8,r8,8
800855c4:	8c00130e 	bge	r17,r16,80085614 <___vfprintf_internal_r+0xa68>
800855c8:	012002b4 	movhi	r4,32778
800855cc:	18c00404 	addi	r3,r3,16
800855d0:	10800044 	addi	r2,r2,1
800855d4:	21387384 	addi	r4,r4,-7730
800855d8:	41000015 	stw	r4,0(r8)
800855dc:	44400115 	stw	r17,4(r8)
800855e0:	d8c02015 	stw	r3,128(sp)
800855e4:	d8801f15 	stw	r2,124(sp)
800855e8:	90bff40e 	bge	r18,r2,800855bc <___vfprintf_internal_r+0xa10>
800855ec:	d9801e04 	addi	r6,sp,120
800855f0:	b80b883a 	mov	r5,r23
800855f4:	9809883a 	mov	r4,r19
800855f8:	00919200 	call	80091920 <__sprint_r>
800855fc:	103e6d1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085600:	843ffc04 	addi	r16,r16,-16
80085604:	d8c02017 	ldw	r3,128(sp)
80085608:	d8801f17 	ldw	r2,124(sp)
8008560c:	da000404 	addi	r8,sp,16
80085610:	8c3fed16 	blt	r17,r16,800855c8 <___vfprintf_internal_r+0xa1c>
80085614:	d9403517 	ldw	r5,212(sp)
80085618:	1c07883a 	add	r3,r3,r16
8008561c:	10800044 	addi	r2,r2,1
80085620:	41400015 	stw	r5,0(r8)
80085624:	44000115 	stw	r16,4(r8)
80085628:	d8c02015 	stw	r3,128(sp)
8008562c:	d8801f15 	stw	r2,124(sp)
80085630:	010001c4 	movi	r4,7
80085634:	2080060e 	bge	r4,r2,80085650 <___vfprintf_internal_r+0xaa4>
80085638:	d9002c17 	ldw	r4,176(sp)
8008563c:	d9801e04 	addi	r6,sp,120
80085640:	b80b883a 	mov	r5,r23
80085644:	00919200 	call	80091920 <__sprint_r>
80085648:	103e5a1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
8008564c:	d8c02017 	ldw	r3,128(sp)
80085650:	d8803117 	ldw	r2,196(sp)
80085654:	d9002a17 	ldw	r4,168(sp)
80085658:	1100010e 	bge	r2,r4,80085660 <___vfprintf_internal_r+0xab4>
8008565c:	2005883a 	mov	r2,r4
80085660:	d9402f17 	ldw	r5,188(sp)
80085664:	288b883a 	add	r5,r5,r2
80085668:	d9402f15 	stw	r5,188(sp)
8008566c:	18019e1e 	bne	r3,zero,80085ce8 <___vfprintf_internal_r+0x113c>
80085670:	a8800007 	ldb	r2,0(r21)
80085674:	d8001f15 	stw	zero,124(sp)
80085678:	da000404 	addi	r8,sp,16
8008567c:	103d851e 	bne	r2,zero,80084c94 <___vfprintf_internal_r+0xe8>
80085680:	a821883a 	mov	r16,r21
80085684:	003d9b06 	br	80084cf4 <___vfprintf_internal_r+0x148>
80085688:	18c03fcc 	andi	r3,r3,255
8008568c:	1805c11e 	bne	r3,zero,80086d94 <___vfprintf_internal_r+0x21e8>
80085690:	94800414 	ori	r18,r18,16
80085694:	9080080c 	andi	r2,r18,32
80085698:	10020c26 	beq	r2,zero,80085ecc <___vfprintf_internal_r+0x1320>
8008569c:	d8802d17 	ldw	r2,180(sp)
800856a0:	d9002917 	ldw	r4,164(sp)
800856a4:	d8002785 	stb	zero,158(sp)
800856a8:	10c00204 	addi	r3,r2,8
800856ac:	14c00017 	ldw	r19,0(r2)
800856b0:	15800117 	ldw	r22,4(r2)
800856b4:	20040f16 	blt	r4,zero,800866f4 <___vfprintf_internal_r+0x1b48>
800856b8:	013fdfc4 	movi	r4,-129
800856bc:	9d84b03a 	or	r2,r19,r22
800856c0:	d8c02d15 	stw	r3,180(sp)
800856c4:	9124703a 	and	r18,r18,r4
800856c8:	0039883a 	mov	fp,zero
800856cc:	103e891e 	bne	r2,zero,800850f4 <___vfprintf_internal_r+0x548>
800856d0:	d9002917 	ldw	r4,164(sp)
800856d4:	2002c11e 	bne	r4,zero,800861dc <___vfprintf_internal_r+0x1630>
800856d8:	d8002915 	stw	zero,164(sp)
800856dc:	d8002e15 	stw	zero,184(sp)
800856e0:	dc001e04 	addi	r16,sp,120
800856e4:	003ef806 	br	800852c8 <___vfprintf_internal_r+0x71c>
800856e8:	18c03fcc 	andi	r3,r3,255
800856ec:	18059d1e 	bne	r3,zero,80086d64 <___vfprintf_internal_r+0x21b8>
800856f0:	016002b4 	movhi	r5,32778
800856f4:	29786304 	addi	r5,r5,-7796
800856f8:	d9403915 	stw	r5,228(sp)
800856fc:	9080080c 	andi	r2,r18,32
80085700:	10005226 	beq	r2,zero,8008584c <___vfprintf_internal_r+0xca0>
80085704:	d8802d17 	ldw	r2,180(sp)
80085708:	14c00017 	ldw	r19,0(r2)
8008570c:	15800117 	ldw	r22,4(r2)
80085710:	10800204 	addi	r2,r2,8
80085714:	d8802d15 	stw	r2,180(sp)
80085718:	9080004c 	andi	r2,r18,1
8008571c:	10019026 	beq	r2,zero,80085d60 <___vfprintf_internal_r+0x11b4>
80085720:	9d84b03a 	or	r2,r19,r22
80085724:	10036926 	beq	r2,zero,800864cc <___vfprintf_internal_r+0x1920>
80085728:	d8c02917 	ldw	r3,164(sp)
8008572c:	00800c04 	movi	r2,48
80085730:	d8802705 	stb	r2,156(sp)
80085734:	dc402745 	stb	r17,157(sp)
80085738:	d8002785 	stb	zero,158(sp)
8008573c:	90800094 	ori	r2,r18,2
80085740:	18045d16 	blt	r3,zero,800868b8 <___vfprintf_internal_r+0x1d0c>
80085744:	00bfdfc4 	movi	r2,-129
80085748:	90a4703a 	and	r18,r18,r2
8008574c:	94800094 	ori	r18,r18,2
80085750:	0039883a 	mov	fp,zero
80085754:	d9003917 	ldw	r4,228(sp)
80085758:	dc001e04 	addi	r16,sp,120
8008575c:	988003cc 	andi	r2,r19,15
80085760:	b006973a 	slli	r3,r22,28
80085764:	2085883a 	add	r2,r4,r2
80085768:	9826d13a 	srli	r19,r19,4
8008576c:	10800003 	ldbu	r2,0(r2)
80085770:	b02cd13a 	srli	r22,r22,4
80085774:	843fffc4 	addi	r16,r16,-1
80085778:	1ce6b03a 	or	r19,r3,r19
8008577c:	80800005 	stb	r2,0(r16)
80085780:	9d84b03a 	or	r2,r19,r22
80085784:	103ff51e 	bne	r2,zero,8008575c <___vfprintf_internal_r+0xbb0>
80085788:	d8c02817 	ldw	r3,160(sp)
8008578c:	1c07c83a 	sub	r3,r3,r16
80085790:	d8c02e15 	stw	r3,184(sp)
80085794:	003ecc06 	br	800852c8 <___vfprintf_internal_r+0x71c>
80085798:	18c03fcc 	andi	r3,r3,255
8008579c:	183e9f26 	beq	r3,zero,8008521c <___vfprintf_internal_r+0x670>
800857a0:	d9c02785 	stb	r7,158(sp)
800857a4:	003e9d06 	br	8008521c <___vfprintf_internal_r+0x670>
800857a8:	00c00044 	movi	r3,1
800857ac:	01c00ac4 	movi	r7,43
800857b0:	ac400007 	ldb	r17,0(r21)
800857b4:	003d5e06 	br	80084d30 <___vfprintf_internal_r+0x184>
800857b8:	94800814 	ori	r18,r18,32
800857bc:	ac400007 	ldb	r17,0(r21)
800857c0:	003d5b06 	br	80084d30 <___vfprintf_internal_r+0x184>
800857c4:	d8c02d17 	ldw	r3,180(sp)
800857c8:	d8002785 	stb	zero,158(sp)
800857cc:	1c000017 	ldw	r16,0(r3)
800857d0:	1cc00104 	addi	r19,r3,4
800857d4:	80041926 	beq	r16,zero,8008683c <___vfprintf_internal_r+0x1c90>
800857d8:	d9002917 	ldw	r4,164(sp)
800857dc:	2003d016 	blt	r4,zero,80086720 <___vfprintf_internal_r+0x1b74>
800857e0:	200d883a 	mov	r6,r4
800857e4:	000b883a 	mov	r5,zero
800857e8:	8009883a 	mov	r4,r16
800857ec:	da003d15 	stw	r8,244(sp)
800857f0:	0089f180 	call	80089f18 <memchr>
800857f4:	da003d17 	ldw	r8,244(sp)
800857f8:	10045426 	beq	r2,zero,8008694c <___vfprintf_internal_r+0x1da0>
800857fc:	1405c83a 	sub	r2,r2,r16
80085800:	d8802e15 	stw	r2,184(sp)
80085804:	1003cc16 	blt	r2,zero,80086738 <___vfprintf_internal_r+0x1b8c>
80085808:	df002783 	ldbu	fp,158(sp)
8008580c:	d8802a15 	stw	r2,168(sp)
80085810:	dcc02d15 	stw	r19,180(sp)
80085814:	d8002915 	stw	zero,164(sp)
80085818:	d8003215 	stw	zero,200(sp)
8008581c:	003eb006 	br	800852e0 <___vfprintf_internal_r+0x734>
80085820:	18c03fcc 	andi	r3,r3,255
80085824:	183f9b26 	beq	r3,zero,80085694 <___vfprintf_internal_r+0xae8>
80085828:	d9c02785 	stb	r7,158(sp)
8008582c:	003f9906 	br	80085694 <___vfprintf_internal_r+0xae8>
80085830:	18c03fcc 	andi	r3,r3,255
80085834:	1805551e 	bne	r3,zero,80086d8c <___vfprintf_internal_r+0x21e0>
80085838:	016002b4 	movhi	r5,32778
8008583c:	29786804 	addi	r5,r5,-7776
80085840:	d9403915 	stw	r5,228(sp)
80085844:	9080080c 	andi	r2,r18,32
80085848:	103fae1e 	bne	r2,zero,80085704 <___vfprintf_internal_r+0xb58>
8008584c:	9080040c 	andi	r2,r18,16
80085850:	1002de26 	beq	r2,zero,800863cc <___vfprintf_internal_r+0x1820>
80085854:	d8c02d17 	ldw	r3,180(sp)
80085858:	002d883a 	mov	r22,zero
8008585c:	1cc00017 	ldw	r19,0(r3)
80085860:	18c00104 	addi	r3,r3,4
80085864:	d8c02d15 	stw	r3,180(sp)
80085868:	003fab06 	br	80085718 <___vfprintf_internal_r+0xb6c>
8008586c:	38803fcc 	andi	r2,r7,255
80085870:	1080201c 	xori	r2,r2,128
80085874:	10bfe004 	addi	r2,r2,-128
80085878:	1002d21e 	bne	r2,zero,800863c4 <___vfprintf_internal_r+0x1818>
8008587c:	00c00044 	movi	r3,1
80085880:	01c00804 	movi	r7,32
80085884:	ac400007 	ldb	r17,0(r21)
80085888:	003d2906 	br	80084d30 <___vfprintf_internal_r+0x184>
8008588c:	94800054 	ori	r18,r18,1
80085890:	ac400007 	ldb	r17,0(r21)
80085894:	003d2606 	br	80084d30 <___vfprintf_internal_r+0x184>
80085898:	18c03fcc 	andi	r3,r3,255
8008589c:	183e0526 	beq	r3,zero,800850b4 <___vfprintf_internal_r+0x508>
800858a0:	d9c02785 	stb	r7,158(sp)
800858a4:	003e0306 	br	800850b4 <___vfprintf_internal_r+0x508>
800858a8:	94801014 	ori	r18,r18,64
800858ac:	ac400007 	ldb	r17,0(r21)
800858b0:	003d1f06 	br	80084d30 <___vfprintf_internal_r+0x184>
800858b4:	ac400007 	ldb	r17,0(r21)
800858b8:	8a438726 	beq	r17,r9,800866d8 <___vfprintf_internal_r+0x1b2c>
800858bc:	94800414 	ori	r18,r18,16
800858c0:	003d1b06 	br	80084d30 <___vfprintf_internal_r+0x184>
800858c4:	18c03fcc 	andi	r3,r3,255
800858c8:	1805341e 	bne	r3,zero,80086d9c <___vfprintf_internal_r+0x21f0>
800858cc:	9080080c 	andi	r2,r18,32
800858d0:	1002cd26 	beq	r2,zero,80086408 <___vfprintf_internal_r+0x185c>
800858d4:	d9402d17 	ldw	r5,180(sp)
800858d8:	d9002f17 	ldw	r4,188(sp)
800858dc:	28800017 	ldw	r2,0(r5)
800858e0:	2007d7fa 	srai	r3,r4,31
800858e4:	29400104 	addi	r5,r5,4
800858e8:	d9402d15 	stw	r5,180(sp)
800858ec:	11000015 	stw	r4,0(r2)
800858f0:	10c00115 	stw	r3,4(r2)
800858f4:	003ce506 	br	80084c8c <___vfprintf_internal_r+0xe0>
800858f8:	d8c02d17 	ldw	r3,180(sp)
800858fc:	d9002d17 	ldw	r4,180(sp)
80085900:	d8002785 	stb	zero,158(sp)
80085904:	18800017 	ldw	r2,0(r3)
80085908:	21000104 	addi	r4,r4,4
8008590c:	00c00044 	movi	r3,1
80085910:	d8c02a15 	stw	r3,168(sp)
80085914:	d8801405 	stb	r2,80(sp)
80085918:	d9002d15 	stw	r4,180(sp)
8008591c:	d8c02e15 	stw	r3,184(sp)
80085920:	d8002915 	stw	zero,164(sp)
80085924:	d8003215 	stw	zero,200(sp)
80085928:	dc001404 	addi	r16,sp,80
8008592c:	0039883a 	mov	fp,zero
80085930:	003e7206 	br	800852fc <___vfprintf_internal_r+0x750>
80085934:	012002b4 	movhi	r4,32778
80085938:	21386804 	addi	r4,r4,-7776
8008593c:	0039883a 	mov	fp,zero
80085940:	d9003915 	stw	r4,228(sp)
80085944:	04401e04 	movi	r17,120
80085948:	003f8206 	br	80085754 <___vfprintf_internal_r+0xba8>
8008594c:	18c03fcc 	andi	r3,r3,255
80085950:	1805061e 	bne	r3,zero,80086d6c <___vfprintf_internal_r+0x21c0>
80085954:	883d9126 	beq	r17,zero,80084f9c <___vfprintf_internal_r+0x3f0>
80085958:	00c00044 	movi	r3,1
8008595c:	d8c02a15 	stw	r3,168(sp)
80085960:	dc401405 	stb	r17,80(sp)
80085964:	d8002785 	stb	zero,158(sp)
80085968:	003fec06 	br	8008591c <___vfprintf_internal_r+0xd70>
8008596c:	016002b4 	movhi	r5,32778
80085970:	29786804 	addi	r5,r5,-7776
80085974:	d9403915 	stw	r5,228(sp)
80085978:	d8c02d15 	stw	r3,180(sp)
8008597c:	1025883a 	mov	r18,r2
80085980:	04401e04 	movi	r17,120
80085984:	9d84b03a 	or	r2,r19,r22
80085988:	1000fc1e 	bne	r2,zero,80085d7c <___vfprintf_internal_r+0x11d0>
8008598c:	0039883a 	mov	fp,zero
80085990:	00800084 	movi	r2,2
80085994:	10803fcc 	andi	r2,r2,255
80085998:	00c00044 	movi	r3,1
8008599c:	10c20f26 	beq	r2,r3,800861dc <___vfprintf_internal_r+0x1630>
800859a0:	00c00084 	movi	r3,2
800859a4:	10fd6326 	beq	r2,r3,80084f34 <___vfprintf_internal_r+0x388>
800859a8:	003e2d06 	br	80085260 <___vfprintf_internal_r+0x6b4>
800859ac:	d8c02017 	ldw	r3,128(sp)
800859b0:	003e9306 	br	80085400 <___vfprintf_internal_r+0x854>
800859b4:	00801944 	movi	r2,101
800859b8:	14407e0e 	bge	r2,r17,80085bb4 <___vfprintf_internal_r+0x1008>
800859bc:	d9003617 	ldw	r4,216(sp)
800859c0:	d9403817 	ldw	r5,224(sp)
800859c4:	000d883a 	mov	r6,zero
800859c8:	000f883a 	mov	r7,zero
800859cc:	d8c03c15 	stw	r3,240(sp)
800859d0:	da003d15 	stw	r8,244(sp)
800859d4:	00975480 	call	80097548 <__eqdf2>
800859d8:	d8c03c17 	ldw	r3,240(sp)
800859dc:	da003d17 	ldw	r8,244(sp)
800859e0:	1000f71e 	bne	r2,zero,80085dc0 <___vfprintf_internal_r+0x1214>
800859e4:	d8801f17 	ldw	r2,124(sp)
800859e8:	012002b4 	movhi	r4,32778
800859ec:	21386f04 	addi	r4,r4,-7748
800859f0:	18c00044 	addi	r3,r3,1
800859f4:	10800044 	addi	r2,r2,1
800859f8:	41000015 	stw	r4,0(r8)
800859fc:	01000044 	movi	r4,1
80085a00:	41000115 	stw	r4,4(r8)
80085a04:	d8c02015 	stw	r3,128(sp)
80085a08:	d8801f15 	stw	r2,124(sp)
80085a0c:	010001c4 	movi	r4,7
80085a10:	2082b816 	blt	r4,r2,800864f4 <___vfprintf_internal_r+0x1948>
80085a14:	42000204 	addi	r8,r8,8
80085a18:	d8802617 	ldw	r2,152(sp)
80085a1c:	d9403317 	ldw	r5,204(sp)
80085a20:	11400216 	blt	r2,r5,80085a2c <___vfprintf_internal_r+0xe80>
80085a24:	9080004c 	andi	r2,r18,1
80085a28:	103ed526 	beq	r2,zero,80085580 <___vfprintf_internal_r+0x9d4>
80085a2c:	d8803717 	ldw	r2,220(sp)
80085a30:	d9003417 	ldw	r4,208(sp)
80085a34:	d9403717 	ldw	r5,220(sp)
80085a38:	1887883a 	add	r3,r3,r2
80085a3c:	d8801f17 	ldw	r2,124(sp)
80085a40:	41000015 	stw	r4,0(r8)
80085a44:	41400115 	stw	r5,4(r8)
80085a48:	10800044 	addi	r2,r2,1
80085a4c:	d8c02015 	stw	r3,128(sp)
80085a50:	d8801f15 	stw	r2,124(sp)
80085a54:	010001c4 	movi	r4,7
80085a58:	20832916 	blt	r4,r2,80086700 <___vfprintf_internal_r+0x1b54>
80085a5c:	42000204 	addi	r8,r8,8
80085a60:	d8803317 	ldw	r2,204(sp)
80085a64:	143fffc4 	addi	r16,r2,-1
80085a68:	043ec50e 	bge	zero,r16,80085580 <___vfprintf_internal_r+0x9d4>
80085a6c:	04400404 	movi	r17,16
80085a70:	d8801f17 	ldw	r2,124(sp)
80085a74:	8c00880e 	bge	r17,r16,80085c98 <___vfprintf_internal_r+0x10ec>
80085a78:	016002b4 	movhi	r5,32778
80085a7c:	29786f84 	addi	r5,r5,-7746
80085a80:	d9402b15 	stw	r5,172(sp)
80085a84:	058001c4 	movi	r22,7
80085a88:	dcc02c17 	ldw	r19,176(sp)
80085a8c:	00000306 	br	80085a9c <___vfprintf_internal_r+0xef0>
80085a90:	42000204 	addi	r8,r8,8
80085a94:	843ffc04 	addi	r16,r16,-16
80085a98:	8c00820e 	bge	r17,r16,80085ca4 <___vfprintf_internal_r+0x10f8>
80085a9c:	18c00404 	addi	r3,r3,16
80085aa0:	10800044 	addi	r2,r2,1
80085aa4:	45000015 	stw	r20,0(r8)
80085aa8:	44400115 	stw	r17,4(r8)
80085aac:	d8c02015 	stw	r3,128(sp)
80085ab0:	d8801f15 	stw	r2,124(sp)
80085ab4:	b0bff60e 	bge	r22,r2,80085a90 <___vfprintf_internal_r+0xee4>
80085ab8:	d9801e04 	addi	r6,sp,120
80085abc:	b80b883a 	mov	r5,r23
80085ac0:	9809883a 	mov	r4,r19
80085ac4:	00919200 	call	80091920 <__sprint_r>
80085ac8:	103d3a1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085acc:	d8c02017 	ldw	r3,128(sp)
80085ad0:	d8801f17 	ldw	r2,124(sp)
80085ad4:	da000404 	addi	r8,sp,16
80085ad8:	003fee06 	br	80085a94 <___vfprintf_internal_r+0xee8>
80085adc:	d9403117 	ldw	r5,196(sp)
80085ae0:	d8802a17 	ldw	r2,168(sp)
80085ae4:	28adc83a 	sub	r22,r5,r2
80085ae8:	05be630e 	bge	zero,r22,80085478 <___vfprintf_internal_r+0x8cc>
80085aec:	07000404 	movi	fp,16
80085af0:	d8801f17 	ldw	r2,124(sp)
80085af4:	e5838f0e 	bge	fp,r22,80086934 <___vfprintf_internal_r+0x1d88>
80085af8:	016002b4 	movhi	r5,32778
80085afc:	29786f84 	addi	r5,r5,-7746
80085b00:	dc403015 	stw	r17,192(sp)
80085b04:	d9402b15 	stw	r5,172(sp)
80085b08:	b023883a 	mov	r17,r22
80085b0c:	04c001c4 	movi	r19,7
80085b10:	a82d883a 	mov	r22,r21
80085b14:	902b883a 	mov	r21,r18
80085b18:	8025883a 	mov	r18,r16
80085b1c:	dc002c17 	ldw	r16,176(sp)
80085b20:	00000306 	br	80085b30 <___vfprintf_internal_r+0xf84>
80085b24:	8c7ffc04 	addi	r17,r17,-16
80085b28:	42000204 	addi	r8,r8,8
80085b2c:	e440110e 	bge	fp,r17,80085b74 <___vfprintf_internal_r+0xfc8>
80085b30:	18c00404 	addi	r3,r3,16
80085b34:	10800044 	addi	r2,r2,1
80085b38:	45000015 	stw	r20,0(r8)
80085b3c:	47000115 	stw	fp,4(r8)
80085b40:	d8c02015 	stw	r3,128(sp)
80085b44:	d8801f15 	stw	r2,124(sp)
80085b48:	98bff60e 	bge	r19,r2,80085b24 <___vfprintf_internal_r+0xf78>
80085b4c:	d9801e04 	addi	r6,sp,120
80085b50:	b80b883a 	mov	r5,r23
80085b54:	8009883a 	mov	r4,r16
80085b58:	00919200 	call	80091920 <__sprint_r>
80085b5c:	103d151e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085b60:	8c7ffc04 	addi	r17,r17,-16
80085b64:	d8c02017 	ldw	r3,128(sp)
80085b68:	d8801f17 	ldw	r2,124(sp)
80085b6c:	da000404 	addi	r8,sp,16
80085b70:	e47fef16 	blt	fp,r17,80085b30 <___vfprintf_internal_r+0xf84>
80085b74:	9021883a 	mov	r16,r18
80085b78:	a825883a 	mov	r18,r21
80085b7c:	b02b883a 	mov	r21,r22
80085b80:	882d883a 	mov	r22,r17
80085b84:	dc403017 	ldw	r17,192(sp)
80085b88:	d9002b17 	ldw	r4,172(sp)
80085b8c:	1d87883a 	add	r3,r3,r22
80085b90:	10800044 	addi	r2,r2,1
80085b94:	41000015 	stw	r4,0(r8)
80085b98:	45800115 	stw	r22,4(r8)
80085b9c:	d8c02015 	stw	r3,128(sp)
80085ba0:	d8801f15 	stw	r2,124(sp)
80085ba4:	010001c4 	movi	r4,7
80085ba8:	20818e16 	blt	r4,r2,800861e4 <___vfprintf_internal_r+0x1638>
80085bac:	42000204 	addi	r8,r8,8
80085bb0:	003e3106 	br	80085478 <___vfprintf_internal_r+0x8cc>
80085bb4:	d9403317 	ldw	r5,204(sp)
80085bb8:	00800044 	movi	r2,1
80085bbc:	18c00044 	addi	r3,r3,1
80085bc0:	1141530e 	bge	r2,r5,80086110 <___vfprintf_internal_r+0x1564>
80085bc4:	dc401f17 	ldw	r17,124(sp)
80085bc8:	00800044 	movi	r2,1
80085bcc:	40800115 	stw	r2,4(r8)
80085bd0:	8c400044 	addi	r17,r17,1
80085bd4:	44000015 	stw	r16,0(r8)
80085bd8:	d8c02015 	stw	r3,128(sp)
80085bdc:	dc401f15 	stw	r17,124(sp)
80085be0:	008001c4 	movi	r2,7
80085be4:	14416b16 	blt	r2,r17,80086194 <___vfprintf_internal_r+0x15e8>
80085be8:	42000204 	addi	r8,r8,8
80085bec:	d8803717 	ldw	r2,220(sp)
80085bf0:	d9003417 	ldw	r4,208(sp)
80085bf4:	8c400044 	addi	r17,r17,1
80085bf8:	10c7883a 	add	r3,r2,r3
80085bfc:	40800115 	stw	r2,4(r8)
80085c00:	41000015 	stw	r4,0(r8)
80085c04:	d8c02015 	stw	r3,128(sp)
80085c08:	dc401f15 	stw	r17,124(sp)
80085c0c:	008001c4 	movi	r2,7
80085c10:	14416916 	blt	r2,r17,800861b8 <___vfprintf_internal_r+0x160c>
80085c14:	45800204 	addi	r22,r8,8
80085c18:	d9003617 	ldw	r4,216(sp)
80085c1c:	d9403817 	ldw	r5,224(sp)
80085c20:	000d883a 	mov	r6,zero
80085c24:	000f883a 	mov	r7,zero
80085c28:	d8c03c15 	stw	r3,240(sp)
80085c2c:	00975480 	call	80097548 <__eqdf2>
80085c30:	d8c03c17 	ldw	r3,240(sp)
80085c34:	1000bc26 	beq	r2,zero,80085f28 <___vfprintf_internal_r+0x137c>
80085c38:	d9403317 	ldw	r5,204(sp)
80085c3c:	84000044 	addi	r16,r16,1
80085c40:	8c400044 	addi	r17,r17,1
80085c44:	28bfffc4 	addi	r2,r5,-1
80085c48:	1887883a 	add	r3,r3,r2
80085c4c:	b0800115 	stw	r2,4(r22)
80085c50:	b4000015 	stw	r16,0(r22)
80085c54:	d8c02015 	stw	r3,128(sp)
80085c58:	dc401f15 	stw	r17,124(sp)
80085c5c:	008001c4 	movi	r2,7
80085c60:	14414316 	blt	r2,r17,80086170 <___vfprintf_internal_r+0x15c4>
80085c64:	b5800204 	addi	r22,r22,8
80085c68:	d9003a17 	ldw	r4,232(sp)
80085c6c:	df0022c4 	addi	fp,sp,139
80085c70:	8c400044 	addi	r17,r17,1
80085c74:	20c7883a 	add	r3,r4,r3
80085c78:	b7000015 	stw	fp,0(r22)
80085c7c:	b1000115 	stw	r4,4(r22)
80085c80:	d8c02015 	stw	r3,128(sp)
80085c84:	dc401f15 	stw	r17,124(sp)
80085c88:	008001c4 	movi	r2,7
80085c8c:	14400e16 	blt	r2,r17,80085cc8 <___vfprintf_internal_r+0x111c>
80085c90:	b2000204 	addi	r8,r22,8
80085c94:	003e3a06 	br	80085580 <___vfprintf_internal_r+0x9d4>
80085c98:	012002b4 	movhi	r4,32778
80085c9c:	21386f84 	addi	r4,r4,-7746
80085ca0:	d9002b15 	stw	r4,172(sp)
80085ca4:	d9002b17 	ldw	r4,172(sp)
80085ca8:	1c07883a 	add	r3,r3,r16
80085cac:	44000115 	stw	r16,4(r8)
80085cb0:	41000015 	stw	r4,0(r8)
80085cb4:	10800044 	addi	r2,r2,1
80085cb8:	d8c02015 	stw	r3,128(sp)
80085cbc:	d8801f15 	stw	r2,124(sp)
80085cc0:	010001c4 	movi	r4,7
80085cc4:	20be2d0e 	bge	r4,r2,8008557c <___vfprintf_internal_r+0x9d0>
80085cc8:	d9002c17 	ldw	r4,176(sp)
80085ccc:	d9801e04 	addi	r6,sp,120
80085cd0:	b80b883a 	mov	r5,r23
80085cd4:	00919200 	call	80091920 <__sprint_r>
80085cd8:	103cb61e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085cdc:	d8c02017 	ldw	r3,128(sp)
80085ce0:	da000404 	addi	r8,sp,16
80085ce4:	003e2606 	br	80085580 <___vfprintf_internal_r+0x9d4>
80085ce8:	d9002c17 	ldw	r4,176(sp)
80085cec:	d9801e04 	addi	r6,sp,120
80085cf0:	b80b883a 	mov	r5,r23
80085cf4:	00919200 	call	80091920 <__sprint_r>
80085cf8:	103e5d26 	beq	r2,zero,80085670 <___vfprintf_internal_r+0xac4>
80085cfc:	003cad06 	br	80084fb4 <___vfprintf_internal_r+0x408>
80085d00:	d9002c17 	ldw	r4,176(sp)
80085d04:	d9801e04 	addi	r6,sp,120
80085d08:	b80b883a 	mov	r5,r23
80085d0c:	00919200 	call	80091920 <__sprint_r>
80085d10:	103ca81e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085d14:	d8c02017 	ldw	r3,128(sp)
80085d18:	da000404 	addi	r8,sp,16
80085d1c:	003e0b06 	br	8008554c <___vfprintf_internal_r+0x9a0>
80085d20:	d9002c17 	ldw	r4,176(sp)
80085d24:	d9801e04 	addi	r6,sp,120
80085d28:	b80b883a 	mov	r5,r23
80085d2c:	00919200 	call	80091920 <__sprint_r>
80085d30:	103ca01e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085d34:	d8c02017 	ldw	r3,128(sp)
80085d38:	da000404 	addi	r8,sp,16
80085d3c:	003dbd06 	br	80085434 <___vfprintf_internal_r+0x888>
80085d40:	d9002c17 	ldw	r4,176(sp)
80085d44:	d9801e04 	addi	r6,sp,120
80085d48:	b80b883a 	mov	r5,r23
80085d4c:	00919200 	call	80091920 <__sprint_r>
80085d50:	103c981e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085d54:	d8c02017 	ldw	r3,128(sp)
80085d58:	da000404 	addi	r8,sp,16
80085d5c:	003dc306 	br	8008546c <___vfprintf_internal_r+0x8c0>
80085d60:	d8802917 	ldw	r2,164(sp)
80085d64:	d8002785 	stb	zero,158(sp)
80085d68:	103f0616 	blt	r2,zero,80085984 <___vfprintf_internal_r+0xdd8>
80085d6c:	00ffdfc4 	movi	r3,-129
80085d70:	9d84b03a 	or	r2,r19,r22
80085d74:	90e4703a 	and	r18,r18,r3
80085d78:	103c6b26 	beq	r2,zero,80084f28 <___vfprintf_internal_r+0x37c>
80085d7c:	0039883a 	mov	fp,zero
80085d80:	003e7406 	br	80085754 <___vfprintf_internal_r+0xba8>
80085d84:	9080040c 	andi	r2,r18,16
80085d88:	1001b326 	beq	r2,zero,80086458 <___vfprintf_internal_r+0x18ac>
80085d8c:	d9002d17 	ldw	r4,180(sp)
80085d90:	d9402917 	ldw	r5,164(sp)
80085d94:	d8002785 	stb	zero,158(sp)
80085d98:	20800104 	addi	r2,r4,4
80085d9c:	24c00017 	ldw	r19,0(r4)
80085da0:	002d883a 	mov	r22,zero
80085da4:	2801b516 	blt	r5,zero,8008647c <___vfprintf_internal_r+0x18d0>
80085da8:	00ffdfc4 	movi	r3,-129
80085dac:	d8802d15 	stw	r2,180(sp)
80085db0:	90e4703a 	and	r18,r18,r3
80085db4:	983d2726 	beq	r19,zero,80085254 <___vfprintf_internal_r+0x6a8>
80085db8:	0039883a 	mov	fp,zero
80085dbc:	003d2a06 	br	80085268 <___vfprintf_internal_r+0x6bc>
80085dc0:	dc402617 	ldw	r17,152(sp)
80085dc4:	0441d30e 	bge	zero,r17,80086514 <___vfprintf_internal_r+0x1968>
80085dc8:	dc403217 	ldw	r17,200(sp)
80085dcc:	d8803317 	ldw	r2,204(sp)
80085dd0:	1440010e 	bge	r2,r17,80085dd8 <___vfprintf_internal_r+0x122c>
80085dd4:	1023883a 	mov	r17,r2
80085dd8:	04400a0e 	bge	zero,r17,80085e04 <___vfprintf_internal_r+0x1258>
80085ddc:	d8801f17 	ldw	r2,124(sp)
80085de0:	1c47883a 	add	r3,r3,r17
80085de4:	44000015 	stw	r16,0(r8)
80085de8:	10800044 	addi	r2,r2,1
80085dec:	44400115 	stw	r17,4(r8)
80085df0:	d8c02015 	stw	r3,128(sp)
80085df4:	d8801f15 	stw	r2,124(sp)
80085df8:	010001c4 	movi	r4,7
80085dfc:	20826516 	blt	r4,r2,80086794 <___vfprintf_internal_r+0x1be8>
80085e00:	42000204 	addi	r8,r8,8
80085e04:	88026116 	blt	r17,zero,8008678c <___vfprintf_internal_r+0x1be0>
80085e08:	d9003217 	ldw	r4,200(sp)
80085e0c:	2463c83a 	sub	r17,r4,r17
80085e10:	04407b0e 	bge	zero,r17,80086000 <___vfprintf_internal_r+0x1454>
80085e14:	05800404 	movi	r22,16
80085e18:	d8801f17 	ldw	r2,124(sp)
80085e1c:	b4419d0e 	bge	r22,r17,80086494 <___vfprintf_internal_r+0x18e8>
80085e20:	012002b4 	movhi	r4,32778
80085e24:	21386f84 	addi	r4,r4,-7746
80085e28:	d9002b15 	stw	r4,172(sp)
80085e2c:	070001c4 	movi	fp,7
80085e30:	dcc02c17 	ldw	r19,176(sp)
80085e34:	00000306 	br	80085e44 <___vfprintf_internal_r+0x1298>
80085e38:	42000204 	addi	r8,r8,8
80085e3c:	8c7ffc04 	addi	r17,r17,-16
80085e40:	b441970e 	bge	r22,r17,800864a0 <___vfprintf_internal_r+0x18f4>
80085e44:	18c00404 	addi	r3,r3,16
80085e48:	10800044 	addi	r2,r2,1
80085e4c:	45000015 	stw	r20,0(r8)
80085e50:	45800115 	stw	r22,4(r8)
80085e54:	d8c02015 	stw	r3,128(sp)
80085e58:	d8801f15 	stw	r2,124(sp)
80085e5c:	e0bff60e 	bge	fp,r2,80085e38 <___vfprintf_internal_r+0x128c>
80085e60:	d9801e04 	addi	r6,sp,120
80085e64:	b80b883a 	mov	r5,r23
80085e68:	9809883a 	mov	r4,r19
80085e6c:	00919200 	call	80091920 <__sprint_r>
80085e70:	103c501e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085e74:	d8c02017 	ldw	r3,128(sp)
80085e78:	d8801f17 	ldw	r2,124(sp)
80085e7c:	da000404 	addi	r8,sp,16
80085e80:	003fee06 	br	80085e3c <___vfprintf_internal_r+0x1290>
80085e84:	d9002c17 	ldw	r4,176(sp)
80085e88:	d9801e04 	addi	r6,sp,120
80085e8c:	b80b883a 	mov	r5,r23
80085e90:	00919200 	call	80091920 <__sprint_r>
80085e94:	103c471e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085e98:	d8c02017 	ldw	r3,128(sp)
80085e9c:	df002787 	ldb	fp,158(sp)
80085ea0:	da000404 	addi	r8,sp,16
80085ea4:	003d5606 	br	80085400 <___vfprintf_internal_r+0x854>
80085ea8:	9080040c 	andi	r2,r18,16
80085eac:	10016126 	beq	r2,zero,80086434 <___vfprintf_internal_r+0x1888>
80085eb0:	d8802d17 	ldw	r2,180(sp)
80085eb4:	14c00017 	ldw	r19,0(r2)
80085eb8:	10800104 	addi	r2,r2,4
80085ebc:	d8802d15 	stw	r2,180(sp)
80085ec0:	982dd7fa 	srai	r22,r19,31
80085ec4:	b005883a 	mov	r2,r22
80085ec8:	003c8206 	br	800850d4 <___vfprintf_internal_r+0x528>
80085ecc:	9080040c 	andi	r2,r18,16
80085ed0:	10003526 	beq	r2,zero,80085fa8 <___vfprintf_internal_r+0x13fc>
80085ed4:	d9402d17 	ldw	r5,180(sp)
80085ed8:	d8c02917 	ldw	r3,164(sp)
80085edc:	d8002785 	stb	zero,158(sp)
80085ee0:	28800104 	addi	r2,r5,4
80085ee4:	2cc00017 	ldw	r19,0(r5)
80085ee8:	002d883a 	mov	r22,zero
80085eec:	18003716 	blt	r3,zero,80085fcc <___vfprintf_internal_r+0x1420>
80085ef0:	00ffdfc4 	movi	r3,-129
80085ef4:	d8802d15 	stw	r2,180(sp)
80085ef8:	90e4703a 	and	r18,r18,r3
80085efc:	0039883a 	mov	fp,zero
80085f00:	983df326 	beq	r19,zero,800856d0 <___vfprintf_internal_r+0xb24>
80085f04:	00800244 	movi	r2,9
80085f08:	14fc7b36 	bltu	r2,r19,800850f8 <___vfprintf_internal_r+0x54c>
80085f0c:	d8c02817 	ldw	r3,160(sp)
80085f10:	dc001dc4 	addi	r16,sp,119
80085f14:	9cc00c04 	addi	r19,r19,48
80085f18:	1c07c83a 	sub	r3,r3,r16
80085f1c:	dcc01dc5 	stb	r19,119(sp)
80085f20:	d8c02e15 	stw	r3,184(sp)
80085f24:	003ce806 	br	800852c8 <___vfprintf_internal_r+0x71c>
80085f28:	d8803317 	ldw	r2,204(sp)
80085f2c:	143fffc4 	addi	r16,r2,-1
80085f30:	043f4d0e 	bge	zero,r16,80085c68 <___vfprintf_internal_r+0x10bc>
80085f34:	07000404 	movi	fp,16
80085f38:	e400810e 	bge	fp,r16,80086140 <___vfprintf_internal_r+0x1594>
80085f3c:	016002b4 	movhi	r5,32778
80085f40:	29786f84 	addi	r5,r5,-7746
80085f44:	d9402b15 	stw	r5,172(sp)
80085f48:	01c001c4 	movi	r7,7
80085f4c:	dcc02c17 	ldw	r19,176(sp)
80085f50:	00000306 	br	80085f60 <___vfprintf_internal_r+0x13b4>
80085f54:	b5800204 	addi	r22,r22,8
80085f58:	843ffc04 	addi	r16,r16,-16
80085f5c:	e4007b0e 	bge	fp,r16,8008614c <___vfprintf_internal_r+0x15a0>
80085f60:	18c00404 	addi	r3,r3,16
80085f64:	8c400044 	addi	r17,r17,1
80085f68:	b5000015 	stw	r20,0(r22)
80085f6c:	b7000115 	stw	fp,4(r22)
80085f70:	d8c02015 	stw	r3,128(sp)
80085f74:	dc401f15 	stw	r17,124(sp)
80085f78:	3c7ff60e 	bge	r7,r17,80085f54 <___vfprintf_internal_r+0x13a8>
80085f7c:	d9801e04 	addi	r6,sp,120
80085f80:	b80b883a 	mov	r5,r23
80085f84:	9809883a 	mov	r4,r19
80085f88:	d9c03c15 	stw	r7,240(sp)
80085f8c:	00919200 	call	80091920 <__sprint_r>
80085f90:	d9c03c17 	ldw	r7,240(sp)
80085f94:	103c071e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085f98:	d8c02017 	ldw	r3,128(sp)
80085f9c:	dc401f17 	ldw	r17,124(sp)
80085fa0:	dd800404 	addi	r22,sp,16
80085fa4:	003fec06 	br	80085f58 <___vfprintf_internal_r+0x13ac>
80085fa8:	9080100c 	andi	r2,r18,64
80085fac:	d8002785 	stb	zero,158(sp)
80085fb0:	10010e26 	beq	r2,zero,800863ec <___vfprintf_internal_r+0x1840>
80085fb4:	d9002d17 	ldw	r4,180(sp)
80085fb8:	d9402917 	ldw	r5,164(sp)
80085fbc:	002d883a 	mov	r22,zero
80085fc0:	20800104 	addi	r2,r4,4
80085fc4:	24c0000b 	ldhu	r19,0(r4)
80085fc8:	283fc90e 	bge	r5,zero,80085ef0 <___vfprintf_internal_r+0x1344>
80085fcc:	d8802d15 	stw	r2,180(sp)
80085fd0:	0039883a 	mov	fp,zero
80085fd4:	9d84b03a 	or	r2,r19,r22
80085fd8:	103c461e 	bne	r2,zero,800850f4 <___vfprintf_internal_r+0x548>
80085fdc:	00800044 	movi	r2,1
80085fe0:	003e6c06 	br	80085994 <___vfprintf_internal_r+0xde8>
80085fe4:	d9002c17 	ldw	r4,176(sp)
80085fe8:	d9801e04 	addi	r6,sp,120
80085fec:	b80b883a 	mov	r5,r23
80085ff0:	00919200 	call	80091920 <__sprint_r>
80085ff4:	103bef1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80085ff8:	d8c02017 	ldw	r3,128(sp)
80085ffc:	da000404 	addi	r8,sp,16
80086000:	d9003217 	ldw	r4,200(sp)
80086004:	d8802617 	ldw	r2,152(sp)
80086008:	d9403317 	ldw	r5,204(sp)
8008600c:	8123883a 	add	r17,r16,r4
80086010:	11400216 	blt	r2,r5,8008601c <___vfprintf_internal_r+0x1470>
80086014:	9100004c 	andi	r4,r18,1
80086018:	20000d26 	beq	r4,zero,80086050 <___vfprintf_internal_r+0x14a4>
8008601c:	d9003717 	ldw	r4,220(sp)
80086020:	d9403417 	ldw	r5,208(sp)
80086024:	1907883a 	add	r3,r3,r4
80086028:	d9001f17 	ldw	r4,124(sp)
8008602c:	41400015 	stw	r5,0(r8)
80086030:	d9403717 	ldw	r5,220(sp)
80086034:	21000044 	addi	r4,r4,1
80086038:	d8c02015 	stw	r3,128(sp)
8008603c:	41400115 	stw	r5,4(r8)
80086040:	d9001f15 	stw	r4,124(sp)
80086044:	014001c4 	movi	r5,7
80086048:	2901e816 	blt	r5,r4,800867ec <___vfprintf_internal_r+0x1c40>
8008604c:	42000204 	addi	r8,r8,8
80086050:	d9003317 	ldw	r4,204(sp)
80086054:	8121883a 	add	r16,r16,r4
80086058:	2085c83a 	sub	r2,r4,r2
8008605c:	8461c83a 	sub	r16,r16,r17
80086060:	1400010e 	bge	r2,r16,80086068 <___vfprintf_internal_r+0x14bc>
80086064:	1021883a 	mov	r16,r2
80086068:	04000a0e 	bge	zero,r16,80086094 <___vfprintf_internal_r+0x14e8>
8008606c:	d9001f17 	ldw	r4,124(sp)
80086070:	1c07883a 	add	r3,r3,r16
80086074:	44400015 	stw	r17,0(r8)
80086078:	21000044 	addi	r4,r4,1
8008607c:	44000115 	stw	r16,4(r8)
80086080:	d8c02015 	stw	r3,128(sp)
80086084:	d9001f15 	stw	r4,124(sp)
80086088:	014001c4 	movi	r5,7
8008608c:	2901fb16 	blt	r5,r4,8008687c <___vfprintf_internal_r+0x1cd0>
80086090:	42000204 	addi	r8,r8,8
80086094:	8001f716 	blt	r16,zero,80086874 <___vfprintf_internal_r+0x1cc8>
80086098:	1421c83a 	sub	r16,r2,r16
8008609c:	043d380e 	bge	zero,r16,80085580 <___vfprintf_internal_r+0x9d4>
800860a0:	04400404 	movi	r17,16
800860a4:	d8801f17 	ldw	r2,124(sp)
800860a8:	8c3efb0e 	bge	r17,r16,80085c98 <___vfprintf_internal_r+0x10ec>
800860ac:	016002b4 	movhi	r5,32778
800860b0:	29786f84 	addi	r5,r5,-7746
800860b4:	d9402b15 	stw	r5,172(sp)
800860b8:	058001c4 	movi	r22,7
800860bc:	dcc02c17 	ldw	r19,176(sp)
800860c0:	00000306 	br	800860d0 <___vfprintf_internal_r+0x1524>
800860c4:	42000204 	addi	r8,r8,8
800860c8:	843ffc04 	addi	r16,r16,-16
800860cc:	8c3ef50e 	bge	r17,r16,80085ca4 <___vfprintf_internal_r+0x10f8>
800860d0:	18c00404 	addi	r3,r3,16
800860d4:	10800044 	addi	r2,r2,1
800860d8:	45000015 	stw	r20,0(r8)
800860dc:	44400115 	stw	r17,4(r8)
800860e0:	d8c02015 	stw	r3,128(sp)
800860e4:	d8801f15 	stw	r2,124(sp)
800860e8:	b0bff60e 	bge	r22,r2,800860c4 <___vfprintf_internal_r+0x1518>
800860ec:	d9801e04 	addi	r6,sp,120
800860f0:	b80b883a 	mov	r5,r23
800860f4:	9809883a 	mov	r4,r19
800860f8:	00919200 	call	80091920 <__sprint_r>
800860fc:	103bad1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80086100:	d8c02017 	ldw	r3,128(sp)
80086104:	d8801f17 	ldw	r2,124(sp)
80086108:	da000404 	addi	r8,sp,16
8008610c:	003fee06 	br	800860c8 <___vfprintf_internal_r+0x151c>
80086110:	9088703a 	and	r4,r18,r2
80086114:	203eab1e 	bne	r4,zero,80085bc4 <___vfprintf_internal_r+0x1018>
80086118:	dc401f17 	ldw	r17,124(sp)
8008611c:	40800115 	stw	r2,4(r8)
80086120:	44000015 	stw	r16,0(r8)
80086124:	8c400044 	addi	r17,r17,1
80086128:	d8c02015 	stw	r3,128(sp)
8008612c:	dc401f15 	stw	r17,124(sp)
80086130:	008001c4 	movi	r2,7
80086134:	14400e16 	blt	r2,r17,80086170 <___vfprintf_internal_r+0x15c4>
80086138:	45800204 	addi	r22,r8,8
8008613c:	003eca06 	br	80085c68 <___vfprintf_internal_r+0x10bc>
80086140:	012002b4 	movhi	r4,32778
80086144:	21386f84 	addi	r4,r4,-7746
80086148:	d9002b15 	stw	r4,172(sp)
8008614c:	d8802b17 	ldw	r2,172(sp)
80086150:	1c07883a 	add	r3,r3,r16
80086154:	8c400044 	addi	r17,r17,1
80086158:	b0800015 	stw	r2,0(r22)
8008615c:	b4000115 	stw	r16,4(r22)
80086160:	d8c02015 	stw	r3,128(sp)
80086164:	dc401f15 	stw	r17,124(sp)
80086168:	008001c4 	movi	r2,7
8008616c:	147ebd0e 	bge	r2,r17,80085c64 <___vfprintf_internal_r+0x10b8>
80086170:	d9002c17 	ldw	r4,176(sp)
80086174:	d9801e04 	addi	r6,sp,120
80086178:	b80b883a 	mov	r5,r23
8008617c:	00919200 	call	80091920 <__sprint_r>
80086180:	103b8c1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80086184:	d8c02017 	ldw	r3,128(sp)
80086188:	dc401f17 	ldw	r17,124(sp)
8008618c:	dd800404 	addi	r22,sp,16
80086190:	003eb506 	br	80085c68 <___vfprintf_internal_r+0x10bc>
80086194:	d9002c17 	ldw	r4,176(sp)
80086198:	d9801e04 	addi	r6,sp,120
8008619c:	b80b883a 	mov	r5,r23
800861a0:	00919200 	call	80091920 <__sprint_r>
800861a4:	103b831e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
800861a8:	d8c02017 	ldw	r3,128(sp)
800861ac:	dc401f17 	ldw	r17,124(sp)
800861b0:	da000404 	addi	r8,sp,16
800861b4:	003e8d06 	br	80085bec <___vfprintf_internal_r+0x1040>
800861b8:	d9002c17 	ldw	r4,176(sp)
800861bc:	d9801e04 	addi	r6,sp,120
800861c0:	b80b883a 	mov	r5,r23
800861c4:	00919200 	call	80091920 <__sprint_r>
800861c8:	103b7a1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
800861cc:	d8c02017 	ldw	r3,128(sp)
800861d0:	dc401f17 	ldw	r17,124(sp)
800861d4:	dd800404 	addi	r22,sp,16
800861d8:	003e8f06 	br	80085c18 <___vfprintf_internal_r+0x106c>
800861dc:	0027883a 	mov	r19,zero
800861e0:	003f4a06 	br	80085f0c <___vfprintf_internal_r+0x1360>
800861e4:	d9002c17 	ldw	r4,176(sp)
800861e8:	d9801e04 	addi	r6,sp,120
800861ec:	b80b883a 	mov	r5,r23
800861f0:	00919200 	call	80091920 <__sprint_r>
800861f4:	103b6f1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
800861f8:	d8c02017 	ldw	r3,128(sp)
800861fc:	da000404 	addi	r8,sp,16
80086200:	003c9d06 	br	80085478 <___vfprintf_internal_r+0x8cc>
80086204:	04e7c83a 	sub	r19,zero,r19
80086208:	9804c03a 	cmpne	r2,r19,zero
8008620c:	05adc83a 	sub	r22,zero,r22
80086210:	b0adc83a 	sub	r22,r22,r2
80086214:	d8802917 	ldw	r2,164(sp)
80086218:	07000b44 	movi	fp,45
8008621c:	df002785 	stb	fp,158(sp)
80086220:	10017b16 	blt	r2,zero,80086810 <___vfprintf_internal_r+0x1c64>
80086224:	00bfdfc4 	movi	r2,-129
80086228:	90a4703a 	and	r18,r18,r2
8008622c:	003bb106 	br	800850f4 <___vfprintf_internal_r+0x548>
80086230:	d9003617 	ldw	r4,216(sp)
80086234:	d9403817 	ldw	r5,224(sp)
80086238:	da003d15 	stw	r8,244(sp)
8008623c:	008bb980 	call	8008bb98 <__fpclassifyd>
80086240:	da003d17 	ldw	r8,244(sp)
80086244:	1000f026 	beq	r2,zero,80086608 <___vfprintf_internal_r+0x1a5c>
80086248:	d9002917 	ldw	r4,164(sp)
8008624c:	05bff7c4 	movi	r22,-33
80086250:	00bfffc4 	movi	r2,-1
80086254:	8dac703a 	and	r22,r17,r22
80086258:	20820026 	beq	r4,r2,80086a5c <___vfprintf_internal_r+0x1eb0>
8008625c:	008011c4 	movi	r2,71
80086260:	b081f726 	beq	r22,r2,80086a40 <___vfprintf_internal_r+0x1e94>
80086264:	d9003817 	ldw	r4,224(sp)
80086268:	90c04014 	ori	r3,r18,256
8008626c:	d8c02b15 	stw	r3,172(sp)
80086270:	20021516 	blt	r4,zero,80086ac8 <___vfprintf_internal_r+0x1f1c>
80086274:	dcc03817 	ldw	r19,224(sp)
80086278:	d8002a05 	stb	zero,168(sp)
8008627c:	00801984 	movi	r2,102
80086280:	8881f926 	beq	r17,r2,80086a68 <___vfprintf_internal_r+0x1ebc>
80086284:	00801184 	movi	r2,70
80086288:	88821c26 	beq	r17,r2,80086afc <___vfprintf_internal_r+0x1f50>
8008628c:	00801144 	movi	r2,69
80086290:	b081ef26 	beq	r22,r2,80086a50 <___vfprintf_internal_r+0x1ea4>
80086294:	d8c02917 	ldw	r3,164(sp)
80086298:	d8802104 	addi	r2,sp,132
8008629c:	d8800315 	stw	r2,12(sp)
800862a0:	d9403617 	ldw	r5,216(sp)
800862a4:	d8802504 	addi	r2,sp,148
800862a8:	d9002c17 	ldw	r4,176(sp)
800862ac:	d8800215 	stw	r2,8(sp)
800862b0:	d8802604 	addi	r2,sp,152
800862b4:	d8c00015 	stw	r3,0(sp)
800862b8:	d8800115 	stw	r2,4(sp)
800862bc:	01c00084 	movi	r7,2
800862c0:	980d883a 	mov	r6,r19
800862c4:	d8c03c15 	stw	r3,240(sp)
800862c8:	da003d15 	stw	r8,244(sp)
800862cc:	00872840 	call	80087284 <_dtoa_r>
800862d0:	1021883a 	mov	r16,r2
800862d4:	008019c4 	movi	r2,103
800862d8:	d8c03c17 	ldw	r3,240(sp)
800862dc:	da003d17 	ldw	r8,244(sp)
800862e0:	88817126 	beq	r17,r2,800868a8 <___vfprintf_internal_r+0x1cfc>
800862e4:	008011c4 	movi	r2,71
800862e8:	88829226 	beq	r17,r2,80086d34 <___vfprintf_internal_r+0x2188>
800862ec:	80f9883a 	add	fp,r16,r3
800862f0:	d9003617 	ldw	r4,216(sp)
800862f4:	000d883a 	mov	r6,zero
800862f8:	000f883a 	mov	r7,zero
800862fc:	980b883a 	mov	r5,r19
80086300:	da003d15 	stw	r8,244(sp)
80086304:	00975480 	call	80097548 <__eqdf2>
80086308:	da003d17 	ldw	r8,244(sp)
8008630c:	10018d26 	beq	r2,zero,80086944 <___vfprintf_internal_r+0x1d98>
80086310:	d8802117 	ldw	r2,132(sp)
80086314:	1700062e 	bgeu	r2,fp,80086330 <___vfprintf_internal_r+0x1784>
80086318:	01000c04 	movi	r4,48
8008631c:	10c00044 	addi	r3,r2,1
80086320:	d8c02115 	stw	r3,132(sp)
80086324:	11000005 	stb	r4,0(r2)
80086328:	d8802117 	ldw	r2,132(sp)
8008632c:	173ffb36 	bltu	r2,fp,8008631c <___vfprintf_internal_r+0x1770>
80086330:	1405c83a 	sub	r2,r2,r16
80086334:	d8803315 	stw	r2,204(sp)
80086338:	008011c4 	movi	r2,71
8008633c:	b0817626 	beq	r22,r2,80086918 <___vfprintf_internal_r+0x1d6c>
80086340:	00801944 	movi	r2,101
80086344:	1442810e 	bge	r2,r17,80086d4c <___vfprintf_internal_r+0x21a0>
80086348:	d8c02617 	ldw	r3,152(sp)
8008634c:	00801984 	movi	r2,102
80086350:	d8c03215 	stw	r3,200(sp)
80086354:	8881fe26 	beq	r17,r2,80086b50 <___vfprintf_internal_r+0x1fa4>
80086358:	d8c03217 	ldw	r3,200(sp)
8008635c:	d9003317 	ldw	r4,204(sp)
80086360:	1901dd16 	blt	r3,r4,80086ad8 <___vfprintf_internal_r+0x1f2c>
80086364:	9480004c 	andi	r18,r18,1
80086368:	90022b1e 	bne	r18,zero,80086c18 <___vfprintf_internal_r+0x206c>
8008636c:	1805883a 	mov	r2,r3
80086370:	18028016 	blt	r3,zero,80086d74 <___vfprintf_internal_r+0x21c8>
80086374:	d8c03217 	ldw	r3,200(sp)
80086378:	044019c4 	movi	r17,103
8008637c:	d8c02e15 	stw	r3,184(sp)
80086380:	df002a07 	ldb	fp,168(sp)
80086384:	e001531e 	bne	fp,zero,800868d4 <___vfprintf_internal_r+0x1d28>
80086388:	df002783 	ldbu	fp,158(sp)
8008638c:	d8802a15 	stw	r2,168(sp)
80086390:	dc802b17 	ldw	r18,172(sp)
80086394:	d8002915 	stw	zero,164(sp)
80086398:	003bd106 	br	800852e0 <___vfprintf_internal_r+0x734>
8008639c:	d8802d17 	ldw	r2,180(sp)
800863a0:	d8c02d17 	ldw	r3,180(sp)
800863a4:	d9002d17 	ldw	r4,180(sp)
800863a8:	10800017 	ldw	r2,0(r2)
800863ac:	18c00117 	ldw	r3,4(r3)
800863b0:	21000204 	addi	r4,r4,8
800863b4:	d8803615 	stw	r2,216(sp)
800863b8:	d8c03815 	stw	r3,224(sp)
800863bc:	d9002d15 	stw	r4,180(sp)
800863c0:	003b7506 	br	80085198 <___vfprintf_internal_r+0x5ec>
800863c4:	ac400007 	ldb	r17,0(r21)
800863c8:	003a5906 	br	80084d30 <___vfprintf_internal_r+0x184>
800863cc:	9080100c 	andi	r2,r18,64
800863d0:	1000a826 	beq	r2,zero,80086674 <___vfprintf_internal_r+0x1ac8>
800863d4:	d9002d17 	ldw	r4,180(sp)
800863d8:	002d883a 	mov	r22,zero
800863dc:	24c0000b 	ldhu	r19,0(r4)
800863e0:	21000104 	addi	r4,r4,4
800863e4:	d9002d15 	stw	r4,180(sp)
800863e8:	003ccb06 	br	80085718 <___vfprintf_internal_r+0xb6c>
800863ec:	d8c02d17 	ldw	r3,180(sp)
800863f0:	d9002917 	ldw	r4,164(sp)
800863f4:	002d883a 	mov	r22,zero
800863f8:	18800104 	addi	r2,r3,4
800863fc:	1cc00017 	ldw	r19,0(r3)
80086400:	203ebb0e 	bge	r4,zero,80085ef0 <___vfprintf_internal_r+0x1344>
80086404:	003ef106 	br	80085fcc <___vfprintf_internal_r+0x1420>
80086408:	9080040c 	andi	r2,r18,16
8008640c:	1000921e 	bne	r2,zero,80086658 <___vfprintf_internal_r+0x1aac>
80086410:	9480100c 	andi	r18,r18,64
80086414:	90013926 	beq	r18,zero,800868fc <___vfprintf_internal_r+0x1d50>
80086418:	d9002d17 	ldw	r4,180(sp)
8008641c:	d9402f17 	ldw	r5,188(sp)
80086420:	20800017 	ldw	r2,0(r4)
80086424:	21000104 	addi	r4,r4,4
80086428:	d9002d15 	stw	r4,180(sp)
8008642c:	1140000d 	sth	r5,0(r2)
80086430:	003a1606 	br	80084c8c <___vfprintf_internal_r+0xe0>
80086434:	9080100c 	andi	r2,r18,64
80086438:	10008026 	beq	r2,zero,8008663c <___vfprintf_internal_r+0x1a90>
8008643c:	d8c02d17 	ldw	r3,180(sp)
80086440:	1cc0000f 	ldh	r19,0(r3)
80086444:	18c00104 	addi	r3,r3,4
80086448:	d8c02d15 	stw	r3,180(sp)
8008644c:	982dd7fa 	srai	r22,r19,31
80086450:	b005883a 	mov	r2,r22
80086454:	003b1f06 	br	800850d4 <___vfprintf_internal_r+0x528>
80086458:	9080100c 	andi	r2,r18,64
8008645c:	d8002785 	stb	zero,158(sp)
80086460:	10008a1e 	bne	r2,zero,8008668c <___vfprintf_internal_r+0x1ae0>
80086464:	d9402d17 	ldw	r5,180(sp)
80086468:	d8c02917 	ldw	r3,164(sp)
8008646c:	002d883a 	mov	r22,zero
80086470:	28800104 	addi	r2,r5,4
80086474:	2cc00017 	ldw	r19,0(r5)
80086478:	183e4b0e 	bge	r3,zero,80085da8 <___vfprintf_internal_r+0x11fc>
8008647c:	9d86b03a 	or	r3,r19,r22
80086480:	d8802d15 	stw	r2,180(sp)
80086484:	183e4c1e 	bne	r3,zero,80085db8 <___vfprintf_internal_r+0x120c>
80086488:	0039883a 	mov	fp,zero
8008648c:	0005883a 	mov	r2,zero
80086490:	003d4006 	br	80085994 <___vfprintf_internal_r+0xde8>
80086494:	016002b4 	movhi	r5,32778
80086498:	29786f84 	addi	r5,r5,-7746
8008649c:	d9402b15 	stw	r5,172(sp)
800864a0:	d9402b17 	ldw	r5,172(sp)
800864a4:	1c47883a 	add	r3,r3,r17
800864a8:	10800044 	addi	r2,r2,1
800864ac:	41400015 	stw	r5,0(r8)
800864b0:	44400115 	stw	r17,4(r8)
800864b4:	d8c02015 	stw	r3,128(sp)
800864b8:	d8801f15 	stw	r2,124(sp)
800864bc:	010001c4 	movi	r4,7
800864c0:	20bec816 	blt	r4,r2,80085fe4 <___vfprintf_internal_r+0x1438>
800864c4:	42000204 	addi	r8,r8,8
800864c8:	003ecd06 	br	80086000 <___vfprintf_internal_r+0x1454>
800864cc:	d9002917 	ldw	r4,164(sp)
800864d0:	d8002785 	stb	zero,158(sp)
800864d4:	203d2d16 	blt	r4,zero,8008598c <___vfprintf_internal_r+0xde0>
800864d8:	00bfdfc4 	movi	r2,-129
800864dc:	90a4703a 	and	r18,r18,r2
800864e0:	003a9106 	br	80084f28 <___vfprintf_internal_r+0x37c>
800864e4:	012002b4 	movhi	r4,32778
800864e8:	21386f84 	addi	r4,r4,-7746
800864ec:	d9002b15 	stw	r4,172(sp)
800864f0:	003c0c06 	br	80085524 <___vfprintf_internal_r+0x978>
800864f4:	d9002c17 	ldw	r4,176(sp)
800864f8:	d9801e04 	addi	r6,sp,120
800864fc:	b80b883a 	mov	r5,r23
80086500:	00919200 	call	80091920 <__sprint_r>
80086504:	103aab1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80086508:	d8c02017 	ldw	r3,128(sp)
8008650c:	da000404 	addi	r8,sp,16
80086510:	003d4106 	br	80085a18 <___vfprintf_internal_r+0xe6c>
80086514:	d8801f17 	ldw	r2,124(sp)
80086518:	016002b4 	movhi	r5,32778
8008651c:	01000044 	movi	r4,1
80086520:	18c00044 	addi	r3,r3,1
80086524:	10800044 	addi	r2,r2,1
80086528:	29786f04 	addi	r5,r5,-7748
8008652c:	41000115 	stw	r4,4(r8)
80086530:	41400015 	stw	r5,0(r8)
80086534:	d8c02015 	stw	r3,128(sp)
80086538:	d8801f15 	stw	r2,124(sp)
8008653c:	010001c4 	movi	r4,7
80086540:	20805c16 	blt	r4,r2,800866b4 <___vfprintf_internal_r+0x1b08>
80086544:	42000204 	addi	r8,r8,8
80086548:	8800041e 	bne	r17,zero,8008655c <___vfprintf_internal_r+0x19b0>
8008654c:	d8803317 	ldw	r2,204(sp)
80086550:	1000021e 	bne	r2,zero,8008655c <___vfprintf_internal_r+0x19b0>
80086554:	9080004c 	andi	r2,r18,1
80086558:	103c0926 	beq	r2,zero,80085580 <___vfprintf_internal_r+0x9d4>
8008655c:	d9003717 	ldw	r4,220(sp)
80086560:	d8801f17 	ldw	r2,124(sp)
80086564:	d9403417 	ldw	r5,208(sp)
80086568:	20c7883a 	add	r3,r4,r3
8008656c:	10800044 	addi	r2,r2,1
80086570:	41000115 	stw	r4,4(r8)
80086574:	41400015 	stw	r5,0(r8)
80086578:	d8c02015 	stw	r3,128(sp)
8008657c:	d8801f15 	stw	r2,124(sp)
80086580:	010001c4 	movi	r4,7
80086584:	20812116 	blt	r4,r2,80086a0c <___vfprintf_internal_r+0x1e60>
80086588:	42000204 	addi	r8,r8,8
8008658c:	0463c83a 	sub	r17,zero,r17
80086590:	0440730e 	bge	zero,r17,80086760 <___vfprintf_internal_r+0x1bb4>
80086594:	05800404 	movi	r22,16
80086598:	b440860e 	bge	r22,r17,800867b4 <___vfprintf_internal_r+0x1c08>
8008659c:	016002b4 	movhi	r5,32778
800865a0:	29786f84 	addi	r5,r5,-7746
800865a4:	d9402b15 	stw	r5,172(sp)
800865a8:	070001c4 	movi	fp,7
800865ac:	dcc02c17 	ldw	r19,176(sp)
800865b0:	00000306 	br	800865c0 <___vfprintf_internal_r+0x1a14>
800865b4:	42000204 	addi	r8,r8,8
800865b8:	8c7ffc04 	addi	r17,r17,-16
800865bc:	b440800e 	bge	r22,r17,800867c0 <___vfprintf_internal_r+0x1c14>
800865c0:	18c00404 	addi	r3,r3,16
800865c4:	10800044 	addi	r2,r2,1
800865c8:	45000015 	stw	r20,0(r8)
800865cc:	45800115 	stw	r22,4(r8)
800865d0:	d8c02015 	stw	r3,128(sp)
800865d4:	d8801f15 	stw	r2,124(sp)
800865d8:	e0bff60e 	bge	fp,r2,800865b4 <___vfprintf_internal_r+0x1a08>
800865dc:	d9801e04 	addi	r6,sp,120
800865e0:	b80b883a 	mov	r5,r23
800865e4:	9809883a 	mov	r4,r19
800865e8:	00919200 	call	80091920 <__sprint_r>
800865ec:	103a711e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
800865f0:	d8c02017 	ldw	r3,128(sp)
800865f4:	d8801f17 	ldw	r2,124(sp)
800865f8:	da000404 	addi	r8,sp,16
800865fc:	003fee06 	br	800865b8 <___vfprintf_internal_r+0x1a0c>
80086600:	00bfffc4 	movi	r2,-1
80086604:	003a6f06 	br	80084fc4 <___vfprintf_internal_r+0x418>
80086608:	008011c4 	movi	r2,71
8008660c:	1440b816 	blt	r2,r17,800868f0 <___vfprintf_internal_r+0x1d44>
80086610:	042002b4 	movhi	r16,32778
80086614:	84386104 	addi	r16,r16,-7804
80086618:	00c000c4 	movi	r3,3
8008661c:	00bfdfc4 	movi	r2,-129
80086620:	d8c02a15 	stw	r3,168(sp)
80086624:	90a4703a 	and	r18,r18,r2
80086628:	df002783 	ldbu	fp,158(sp)
8008662c:	d8c02e15 	stw	r3,184(sp)
80086630:	d8002915 	stw	zero,164(sp)
80086634:	d8003215 	stw	zero,200(sp)
80086638:	003b2906 	br	800852e0 <___vfprintf_internal_r+0x734>
8008663c:	d9002d17 	ldw	r4,180(sp)
80086640:	24c00017 	ldw	r19,0(r4)
80086644:	21000104 	addi	r4,r4,4
80086648:	d9002d15 	stw	r4,180(sp)
8008664c:	982dd7fa 	srai	r22,r19,31
80086650:	b005883a 	mov	r2,r22
80086654:	003a9f06 	br	800850d4 <___vfprintf_internal_r+0x528>
80086658:	d9402d17 	ldw	r5,180(sp)
8008665c:	d8c02f17 	ldw	r3,188(sp)
80086660:	28800017 	ldw	r2,0(r5)
80086664:	29400104 	addi	r5,r5,4
80086668:	d9402d15 	stw	r5,180(sp)
8008666c:	10c00015 	stw	r3,0(r2)
80086670:	00398606 	br	80084c8c <___vfprintf_internal_r+0xe0>
80086674:	d9402d17 	ldw	r5,180(sp)
80086678:	002d883a 	mov	r22,zero
8008667c:	2cc00017 	ldw	r19,0(r5)
80086680:	29400104 	addi	r5,r5,4
80086684:	d9402d15 	stw	r5,180(sp)
80086688:	003c2306 	br	80085718 <___vfprintf_internal_r+0xb6c>
8008668c:	d8c02d17 	ldw	r3,180(sp)
80086690:	d9002917 	ldw	r4,164(sp)
80086694:	002d883a 	mov	r22,zero
80086698:	18800104 	addi	r2,r3,4
8008669c:	1cc0000b 	ldhu	r19,0(r3)
800866a0:	203dc10e 	bge	r4,zero,80085da8 <___vfprintf_internal_r+0x11fc>
800866a4:	003f7506 	br	8008647c <___vfprintf_internal_r+0x18d0>
800866a8:	042002b4 	movhi	r16,32778
800866ac:	84385f04 	addi	r16,r16,-7812
800866b0:	003acc06 	br	800851e4 <___vfprintf_internal_r+0x638>
800866b4:	d9002c17 	ldw	r4,176(sp)
800866b8:	d9801e04 	addi	r6,sp,120
800866bc:	b80b883a 	mov	r5,r23
800866c0:	00919200 	call	80091920 <__sprint_r>
800866c4:	103a3b1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
800866c8:	dc402617 	ldw	r17,152(sp)
800866cc:	d8c02017 	ldw	r3,128(sp)
800866d0:	da000404 	addi	r8,sp,16
800866d4:	003f9c06 	br	80086548 <___vfprintf_internal_r+0x199c>
800866d8:	ac400043 	ldbu	r17,1(r21)
800866dc:	94800814 	ori	r18,r18,32
800866e0:	ad400044 	addi	r21,r21,1
800866e4:	8c403fcc 	andi	r17,r17,255
800866e8:	8c40201c 	xori	r17,r17,128
800866ec:	8c7fe004 	addi	r17,r17,-128
800866f0:	00398f06 	br	80084d30 <___vfprintf_internal_r+0x184>
800866f4:	d8c02d15 	stw	r3,180(sp)
800866f8:	0039883a 	mov	fp,zero
800866fc:	003e3506 	br	80085fd4 <___vfprintf_internal_r+0x1428>
80086700:	d9002c17 	ldw	r4,176(sp)
80086704:	d9801e04 	addi	r6,sp,120
80086708:	b80b883a 	mov	r5,r23
8008670c:	00919200 	call	80091920 <__sprint_r>
80086710:	103a281e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80086714:	d8c02017 	ldw	r3,128(sp)
80086718:	da000404 	addi	r8,sp,16
8008671c:	003cd006 	br	80085a60 <___vfprintf_internal_r+0xeb4>
80086720:	8009883a 	mov	r4,r16
80086724:	da003d15 	stw	r8,244(sp)
80086728:	00833580 	call	80083358 <strlen>
8008672c:	d8802e15 	stw	r2,184(sp)
80086730:	da003d17 	ldw	r8,244(sp)
80086734:	103c340e 	bge	r2,zero,80085808 <___vfprintf_internal_r+0xc5c>
80086738:	0005883a 	mov	r2,zero
8008673c:	003c3206 	br	80085808 <___vfprintf_internal_r+0xc5c>
80086740:	d9002c17 	ldw	r4,176(sp)
80086744:	d9801e04 	addi	r6,sp,120
80086748:	b80b883a 	mov	r5,r23
8008674c:	00919200 	call	80091920 <__sprint_r>
80086750:	103a181e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80086754:	d8c02017 	ldw	r3,128(sp)
80086758:	d8801f17 	ldw	r2,124(sp)
8008675c:	da000404 	addi	r8,sp,16
80086760:	d9403317 	ldw	r5,204(sp)
80086764:	10800044 	addi	r2,r2,1
80086768:	44000015 	stw	r16,0(r8)
8008676c:	28c7883a 	add	r3,r5,r3
80086770:	003b7d06 	br	80085568 <___vfprintf_internal_r+0x9bc>
80086774:	012002b4 	movhi	r4,32778
80086778:	21387384 	addi	r4,r4,-7730
8008677c:	d9003515 	stw	r4,212(sp)
80086780:	003b1406 	br	800853d4 <___vfprintf_internal_r+0x828>
80086784:	013fffc4 	movi	r4,-1
80086788:	003a3506 	br	80085060 <___vfprintf_internal_r+0x4b4>
8008678c:	0023883a 	mov	r17,zero
80086790:	003d9d06 	br	80085e08 <___vfprintf_internal_r+0x125c>
80086794:	d9002c17 	ldw	r4,176(sp)
80086798:	d9801e04 	addi	r6,sp,120
8008679c:	b80b883a 	mov	r5,r23
800867a0:	00919200 	call	80091920 <__sprint_r>
800867a4:	103a031e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
800867a8:	d8c02017 	ldw	r3,128(sp)
800867ac:	da000404 	addi	r8,sp,16
800867b0:	003d9406 	br	80085e04 <___vfprintf_internal_r+0x1258>
800867b4:	012002b4 	movhi	r4,32778
800867b8:	21386f84 	addi	r4,r4,-7746
800867bc:	d9002b15 	stw	r4,172(sp)
800867c0:	d9002b17 	ldw	r4,172(sp)
800867c4:	1c47883a 	add	r3,r3,r17
800867c8:	10800044 	addi	r2,r2,1
800867cc:	41000015 	stw	r4,0(r8)
800867d0:	44400115 	stw	r17,4(r8)
800867d4:	d8c02015 	stw	r3,128(sp)
800867d8:	d8801f15 	stw	r2,124(sp)
800867dc:	010001c4 	movi	r4,7
800867e0:	20bfd716 	blt	r4,r2,80086740 <___vfprintf_internal_r+0x1b94>
800867e4:	42000204 	addi	r8,r8,8
800867e8:	003fdd06 	br	80086760 <___vfprintf_internal_r+0x1bb4>
800867ec:	d9002c17 	ldw	r4,176(sp)
800867f0:	d9801e04 	addi	r6,sp,120
800867f4:	b80b883a 	mov	r5,r23
800867f8:	00919200 	call	80091920 <__sprint_r>
800867fc:	1039ed1e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80086800:	d8802617 	ldw	r2,152(sp)
80086804:	d8c02017 	ldw	r3,128(sp)
80086808:	da000404 	addi	r8,sp,16
8008680c:	003e1006 	br	80086050 <___vfprintf_internal_r+0x14a4>
80086810:	00800044 	movi	r2,1
80086814:	10803fcc 	andi	r2,r2,255
80086818:	00c00044 	movi	r3,1
8008681c:	10fa3526 	beq	r2,r3,800850f4 <___vfprintf_internal_r+0x548>
80086820:	00c00084 	movi	r3,2
80086824:	10fbcb26 	beq	r2,r3,80085754 <___vfprintf_internal_r+0xba8>
80086828:	003a8f06 	br	80085268 <___vfprintf_internal_r+0x6bc>
8008682c:	012002b4 	movhi	r4,32778
80086830:	21387384 	addi	r4,r4,-7730
80086834:	d9003515 	stw	r4,212(sp)
80086838:	003b7606 	br	80085614 <___vfprintf_internal_r+0xa68>
8008683c:	d8802917 	ldw	r2,164(sp)
80086840:	00c00184 	movi	r3,6
80086844:	1880012e 	bgeu	r3,r2,8008684c <___vfprintf_internal_r+0x1ca0>
80086848:	1805883a 	mov	r2,r3
8008684c:	d8802e15 	stw	r2,184(sp)
80086850:	1000ef16 	blt	r2,zero,80086c10 <___vfprintf_internal_r+0x2064>
80086854:	042002b4 	movhi	r16,32778
80086858:	d8802a15 	stw	r2,168(sp)
8008685c:	dcc02d15 	stw	r19,180(sp)
80086860:	d8002915 	stw	zero,164(sp)
80086864:	d8003215 	stw	zero,200(sp)
80086868:	84386d04 	addi	r16,r16,-7756
8008686c:	0039883a 	mov	fp,zero
80086870:	003aa206 	br	800852fc <___vfprintf_internal_r+0x750>
80086874:	0021883a 	mov	r16,zero
80086878:	003e0706 	br	80086098 <___vfprintf_internal_r+0x14ec>
8008687c:	d9002c17 	ldw	r4,176(sp)
80086880:	d9801e04 	addi	r6,sp,120
80086884:	b80b883a 	mov	r5,r23
80086888:	00919200 	call	80091920 <__sprint_r>
8008688c:	1039c91e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80086890:	d8802617 	ldw	r2,152(sp)
80086894:	d9403317 	ldw	r5,204(sp)
80086898:	d8c02017 	ldw	r3,128(sp)
8008689c:	da000404 	addi	r8,sp,16
800868a0:	2885c83a 	sub	r2,r5,r2
800868a4:	003dfb06 	br	80086094 <___vfprintf_internal_r+0x14e8>
800868a8:	9080004c 	andi	r2,r18,1
800868ac:	103e8f1e 	bne	r2,zero,800862ec <___vfprintf_internal_r+0x1740>
800868b0:	d8802117 	ldw	r2,132(sp)
800868b4:	003e9e06 	br	80086330 <___vfprintf_internal_r+0x1784>
800868b8:	1025883a 	mov	r18,r2
800868bc:	0039883a 	mov	fp,zero
800868c0:	00800084 	movi	r2,2
800868c4:	003fd306 	br	80086814 <___vfprintf_internal_r+0x1c68>
800868c8:	07000b44 	movi	fp,45
800868cc:	df002785 	stb	fp,158(sp)
800868d0:	003a4006 	br	800851d4 <___vfprintf_internal_r+0x628>
800868d4:	00c00b44 	movi	r3,45
800868d8:	d8c02785 	stb	r3,158(sp)
800868dc:	d8802a15 	stw	r2,168(sp)
800868e0:	dc802b17 	ldw	r18,172(sp)
800868e4:	d8002915 	stw	zero,164(sp)
800868e8:	07000b44 	movi	fp,45
800868ec:	003a8006 	br	800852f0 <___vfprintf_internal_r+0x744>
800868f0:	042002b4 	movhi	r16,32778
800868f4:	84386204 	addi	r16,r16,-7800
800868f8:	003f4706 	br	80086618 <___vfprintf_internal_r+0x1a6c>
800868fc:	d8c02d17 	ldw	r3,180(sp)
80086900:	d9002f17 	ldw	r4,188(sp)
80086904:	18800017 	ldw	r2,0(r3)
80086908:	18c00104 	addi	r3,r3,4
8008690c:	d8c02d15 	stw	r3,180(sp)
80086910:	11000015 	stw	r4,0(r2)
80086914:	0038dd06 	br	80084c8c <___vfprintf_internal_r+0xe0>
80086918:	dd802617 	ldw	r22,152(sp)
8008691c:	00bfff44 	movi	r2,-3
80086920:	b0801c16 	blt	r22,r2,80086994 <___vfprintf_internal_r+0x1de8>
80086924:	d9402917 	ldw	r5,164(sp)
80086928:	2d801a16 	blt	r5,r22,80086994 <___vfprintf_internal_r+0x1de8>
8008692c:	dd803215 	stw	r22,200(sp)
80086930:	003e8906 	br	80086358 <___vfprintf_internal_r+0x17ac>
80086934:	012002b4 	movhi	r4,32778
80086938:	21386f84 	addi	r4,r4,-7746
8008693c:	d9002b15 	stw	r4,172(sp)
80086940:	003c9106 	br	80085b88 <___vfprintf_internal_r+0xfdc>
80086944:	e005883a 	mov	r2,fp
80086948:	003e7906 	br	80086330 <___vfprintf_internal_r+0x1784>
8008694c:	d9402917 	ldw	r5,164(sp)
80086950:	df002783 	ldbu	fp,158(sp)
80086954:	dcc02d15 	stw	r19,180(sp)
80086958:	d9402a15 	stw	r5,168(sp)
8008695c:	d9402e15 	stw	r5,184(sp)
80086960:	d8002915 	stw	zero,164(sp)
80086964:	d8003215 	stw	zero,200(sp)
80086968:	003a5d06 	br	800852e0 <___vfprintf_internal_r+0x734>
8008696c:	9080004c 	andi	r2,r18,1
80086970:	0039883a 	mov	fp,zero
80086974:	10000426 	beq	r2,zero,80086988 <___vfprintf_internal_r+0x1ddc>
80086978:	00800c04 	movi	r2,48
8008697c:	dc001dc4 	addi	r16,sp,119
80086980:	d8801dc5 	stb	r2,119(sp)
80086984:	003b8006 	br	80085788 <___vfprintf_internal_r+0xbdc>
80086988:	d8002e15 	stw	zero,184(sp)
8008698c:	dc001e04 	addi	r16,sp,120
80086990:	003a4d06 	br	800852c8 <___vfprintf_internal_r+0x71c>
80086994:	8c7fff84 	addi	r17,r17,-2
80086998:	b5bfffc4 	addi	r22,r22,-1
8008699c:	dd802615 	stw	r22,152(sp)
800869a0:	dc4022c5 	stb	r17,139(sp)
800869a4:	b000bf16 	blt	r22,zero,80086ca4 <___vfprintf_internal_r+0x20f8>
800869a8:	00800ac4 	movi	r2,43
800869ac:	d8802305 	stb	r2,140(sp)
800869b0:	00800244 	movi	r2,9
800869b4:	15807016 	blt	r2,r22,80086b78 <___vfprintf_internal_r+0x1fcc>
800869b8:	00800c04 	movi	r2,48
800869bc:	b5800c04 	addi	r22,r22,48
800869c0:	d8802345 	stb	r2,141(sp)
800869c4:	dd802385 	stb	r22,142(sp)
800869c8:	d88023c4 	addi	r2,sp,143
800869cc:	df0022c4 	addi	fp,sp,139
800869d0:	d8c03317 	ldw	r3,204(sp)
800869d4:	1739c83a 	sub	fp,r2,fp
800869d8:	d9003317 	ldw	r4,204(sp)
800869dc:	e0c7883a 	add	r3,fp,r3
800869e0:	df003a15 	stw	fp,232(sp)
800869e4:	d8c02e15 	stw	r3,184(sp)
800869e8:	00800044 	movi	r2,1
800869ec:	1100b30e 	bge	r2,r4,80086cbc <___vfprintf_internal_r+0x2110>
800869f0:	d8c02e17 	ldw	r3,184(sp)
800869f4:	18c00044 	addi	r3,r3,1
800869f8:	d8c02e15 	stw	r3,184(sp)
800869fc:	1805883a 	mov	r2,r3
80086a00:	1800ac16 	blt	r3,zero,80086cb4 <___vfprintf_internal_r+0x2108>
80086a04:	d8003215 	stw	zero,200(sp)
80086a08:	003e5d06 	br	80086380 <___vfprintf_internal_r+0x17d4>
80086a0c:	d9002c17 	ldw	r4,176(sp)
80086a10:	d9801e04 	addi	r6,sp,120
80086a14:	b80b883a 	mov	r5,r23
80086a18:	00919200 	call	80091920 <__sprint_r>
80086a1c:	1039651e 	bne	r2,zero,80084fb4 <___vfprintf_internal_r+0x408>
80086a20:	dc402617 	ldw	r17,152(sp)
80086a24:	d8c02017 	ldw	r3,128(sp)
80086a28:	d8801f17 	ldw	r2,124(sp)
80086a2c:	da000404 	addi	r8,sp,16
80086a30:	003ed606 	br	8008658c <___vfprintf_internal_r+0x19e0>
80086a34:	582b883a 	mov	r21,r11
80086a38:	d8002915 	stw	zero,164(sp)
80086a3c:	0038bd06 	br	80084d34 <___vfprintf_internal_r+0x188>
80086a40:	d8802917 	ldw	r2,164(sp)
80086a44:	103e071e 	bne	r2,zero,80086264 <___vfprintf_internal_r+0x16b8>
80086a48:	dc002915 	stw	r16,164(sp)
80086a4c:	003e0506 	br	80086264 <___vfprintf_internal_r+0x16b8>
80086a50:	d9002917 	ldw	r4,164(sp)
80086a54:	20c00044 	addi	r3,r4,1
80086a58:	003e0f06 	br	80086298 <___vfprintf_internal_r+0x16ec>
80086a5c:	01400184 	movi	r5,6
80086a60:	d9402915 	stw	r5,164(sp)
80086a64:	003dff06 	br	80086264 <___vfprintf_internal_r+0x16b8>
80086a68:	d8802104 	addi	r2,sp,132
80086a6c:	d8800315 	stw	r2,12(sp)
80086a70:	d8802504 	addi	r2,sp,148
80086a74:	d8800215 	stw	r2,8(sp)
80086a78:	d8802604 	addi	r2,sp,152
80086a7c:	d8800115 	stw	r2,4(sp)
80086a80:	d8802917 	ldw	r2,164(sp)
80086a84:	d9403617 	ldw	r5,216(sp)
80086a88:	d9002c17 	ldw	r4,176(sp)
80086a8c:	d8800015 	stw	r2,0(sp)
80086a90:	01c000c4 	movi	r7,3
80086a94:	980d883a 	mov	r6,r19
80086a98:	da003d15 	stw	r8,244(sp)
80086a9c:	00872840 	call	80087284 <_dtoa_r>
80086aa0:	d8c02917 	ldw	r3,164(sp)
80086aa4:	da003d17 	ldw	r8,244(sp)
80086aa8:	1021883a 	mov	r16,r2
80086aac:	10f9883a 	add	fp,r2,r3
80086ab0:	81000007 	ldb	r4,0(r16)
80086ab4:	00800c04 	movi	r2,48
80086ab8:	20805e26 	beq	r4,r2,80086c34 <___vfprintf_internal_r+0x2088>
80086abc:	d8c02617 	ldw	r3,152(sp)
80086ac0:	e0f9883a 	add	fp,fp,r3
80086ac4:	003e0a06 	br	800862f0 <___vfprintf_internal_r+0x1744>
80086ac8:	00c00b44 	movi	r3,45
80086acc:	24e0003c 	xorhi	r19,r4,32768
80086ad0:	d8c02a05 	stb	r3,168(sp)
80086ad4:	003de906 	br	8008627c <___vfprintf_internal_r+0x16d0>
80086ad8:	d8c03217 	ldw	r3,200(sp)
80086adc:	00c07a0e 	bge	zero,r3,80086cc8 <___vfprintf_internal_r+0x211c>
80086ae0:	00800044 	movi	r2,1
80086ae4:	d9003317 	ldw	r4,204(sp)
80086ae8:	1105883a 	add	r2,r2,r4
80086aec:	d8802e15 	stw	r2,184(sp)
80086af0:	10004e16 	blt	r2,zero,80086c2c <___vfprintf_internal_r+0x2080>
80086af4:	044019c4 	movi	r17,103
80086af8:	003e2106 	br	80086380 <___vfprintf_internal_r+0x17d4>
80086afc:	d9002917 	ldw	r4,164(sp)
80086b00:	d8802104 	addi	r2,sp,132
80086b04:	d8800315 	stw	r2,12(sp)
80086b08:	d9000015 	stw	r4,0(sp)
80086b0c:	d8802504 	addi	r2,sp,148
80086b10:	d9403617 	ldw	r5,216(sp)
80086b14:	d9002c17 	ldw	r4,176(sp)
80086b18:	d8800215 	stw	r2,8(sp)
80086b1c:	d8802604 	addi	r2,sp,152
80086b20:	d8800115 	stw	r2,4(sp)
80086b24:	01c000c4 	movi	r7,3
80086b28:	980d883a 	mov	r6,r19
80086b2c:	da003d15 	stw	r8,244(sp)
80086b30:	00872840 	call	80087284 <_dtoa_r>
80086b34:	d8c02917 	ldw	r3,164(sp)
80086b38:	da003d17 	ldw	r8,244(sp)
80086b3c:	1021883a 	mov	r16,r2
80086b40:	00801184 	movi	r2,70
80086b44:	80f9883a 	add	fp,r16,r3
80086b48:	88bfd926 	beq	r17,r2,80086ab0 <___vfprintf_internal_r+0x1f04>
80086b4c:	003de806 	br	800862f0 <___vfprintf_internal_r+0x1744>
80086b50:	d9002917 	ldw	r4,164(sp)
80086b54:	00c04d0e 	bge	zero,r3,80086c8c <___vfprintf_internal_r+0x20e0>
80086b58:	2000441e 	bne	r4,zero,80086c6c <___vfprintf_internal_r+0x20c0>
80086b5c:	9480004c 	andi	r18,r18,1
80086b60:	9000421e 	bne	r18,zero,80086c6c <___vfprintf_internal_r+0x20c0>
80086b64:	1805883a 	mov	r2,r3
80086b68:	18007016 	blt	r3,zero,80086d2c <___vfprintf_internal_r+0x2180>
80086b6c:	d8c03217 	ldw	r3,200(sp)
80086b70:	d8c02e15 	stw	r3,184(sp)
80086b74:	003e0206 	br	80086380 <___vfprintf_internal_r+0x17d4>
80086b78:	df0022c4 	addi	fp,sp,139
80086b7c:	dc002915 	stw	r16,164(sp)
80086b80:	4027883a 	mov	r19,r8
80086b84:	e021883a 	mov	r16,fp
80086b88:	b009883a 	mov	r4,r22
80086b8c:	01400284 	movi	r5,10
80086b90:	00822cc0 	call	800822cc <__modsi3>
80086b94:	10800c04 	addi	r2,r2,48
80086b98:	843fffc4 	addi	r16,r16,-1
80086b9c:	b009883a 	mov	r4,r22
80086ba0:	01400284 	movi	r5,10
80086ba4:	80800005 	stb	r2,0(r16)
80086ba8:	00822480 	call	80082248 <__divsi3>
80086bac:	102d883a 	mov	r22,r2
80086bb0:	00800244 	movi	r2,9
80086bb4:	15bff416 	blt	r2,r22,80086b88 <___vfprintf_internal_r+0x1fdc>
80086bb8:	9811883a 	mov	r8,r19
80086bbc:	b0800c04 	addi	r2,r22,48
80086bc0:	8027883a 	mov	r19,r16
80086bc4:	997fffc4 	addi	r5,r19,-1
80086bc8:	98bfffc5 	stb	r2,-1(r19)
80086bcc:	dc002917 	ldw	r16,164(sp)
80086bd0:	2f006a2e 	bgeu	r5,fp,80086d7c <___vfprintf_internal_r+0x21d0>
80086bd4:	d9c02384 	addi	r7,sp,142
80086bd8:	3ccfc83a 	sub	r7,r7,r19
80086bdc:	d9002344 	addi	r4,sp,141
80086be0:	e1cf883a 	add	r7,fp,r7
80086be4:	00000106 	br	80086bec <___vfprintf_internal_r+0x2040>
80086be8:	28800003 	ldbu	r2,0(r5)
80086bec:	20800005 	stb	r2,0(r4)
80086bf0:	21000044 	addi	r4,r4,1
80086bf4:	29400044 	addi	r5,r5,1
80086bf8:	393ffb1e 	bne	r7,r4,80086be8 <___vfprintf_internal_r+0x203c>
80086bfc:	d8802304 	addi	r2,sp,140
80086c00:	14c5c83a 	sub	r2,r2,r19
80086c04:	d8c02344 	addi	r3,sp,141
80086c08:	1885883a 	add	r2,r3,r2
80086c0c:	003f7006 	br	800869d0 <___vfprintf_internal_r+0x1e24>
80086c10:	0005883a 	mov	r2,zero
80086c14:	003f0f06 	br	80086854 <___vfprintf_internal_r+0x1ca8>
80086c18:	d8c03217 	ldw	r3,200(sp)
80086c1c:	18c00044 	addi	r3,r3,1
80086c20:	d8c02e15 	stw	r3,184(sp)
80086c24:	1805883a 	mov	r2,r3
80086c28:	183fb20e 	bge	r3,zero,80086af4 <___vfprintf_internal_r+0x1f48>
80086c2c:	0005883a 	mov	r2,zero
80086c30:	003fb006 	br	80086af4 <___vfprintf_internal_r+0x1f48>
80086c34:	d9003617 	ldw	r4,216(sp)
80086c38:	000d883a 	mov	r6,zero
80086c3c:	000f883a 	mov	r7,zero
80086c40:	980b883a 	mov	r5,r19
80086c44:	d8c03c15 	stw	r3,240(sp)
80086c48:	da003d15 	stw	r8,244(sp)
80086c4c:	00975480 	call	80097548 <__eqdf2>
80086c50:	d8c03c17 	ldw	r3,240(sp)
80086c54:	da003d17 	ldw	r8,244(sp)
80086c58:	103f9826 	beq	r2,zero,80086abc <___vfprintf_internal_r+0x1f10>
80086c5c:	00800044 	movi	r2,1
80086c60:	10c7c83a 	sub	r3,r2,r3
80086c64:	d8c02615 	stw	r3,152(sp)
80086c68:	003f9506 	br	80086ac0 <___vfprintf_internal_r+0x1f14>
80086c6c:	d9002917 	ldw	r4,164(sp)
80086c70:	d8c03217 	ldw	r3,200(sp)
80086c74:	20800044 	addi	r2,r4,1
80086c78:	1885883a 	add	r2,r3,r2
80086c7c:	d8802e15 	stw	r2,184(sp)
80086c80:	103dbf0e 	bge	r2,zero,80086380 <___vfprintf_internal_r+0x17d4>
80086c84:	0005883a 	mov	r2,zero
80086c88:	003dbd06 	br	80086380 <___vfprintf_internal_r+0x17d4>
80086c8c:	2000211e 	bne	r4,zero,80086d14 <___vfprintf_internal_r+0x2168>
80086c90:	9480004c 	andi	r18,r18,1
80086c94:	90001f1e 	bne	r18,zero,80086d14 <___vfprintf_internal_r+0x2168>
80086c98:	00800044 	movi	r2,1
80086c9c:	d8802e15 	stw	r2,184(sp)
80086ca0:	003db706 	br	80086380 <___vfprintf_internal_r+0x17d4>
80086ca4:	00800b44 	movi	r2,45
80086ca8:	05adc83a 	sub	r22,zero,r22
80086cac:	d8802305 	stb	r2,140(sp)
80086cb0:	003f3f06 	br	800869b0 <___vfprintf_internal_r+0x1e04>
80086cb4:	0005883a 	mov	r2,zero
80086cb8:	003f5206 	br	80086a04 <___vfprintf_internal_r+0x1e58>
80086cbc:	90a4703a 	and	r18,r18,r2
80086cc0:	903f4e26 	beq	r18,zero,800869fc <___vfprintf_internal_r+0x1e50>
80086cc4:	003f4a06 	br	800869f0 <___vfprintf_internal_r+0x1e44>
80086cc8:	00800084 	movi	r2,2
80086ccc:	10c5c83a 	sub	r2,r2,r3
80086cd0:	003f8406 	br	80086ae4 <___vfprintf_internal_r+0x1f38>
80086cd4:	d8802d17 	ldw	r2,180(sp)
80086cd8:	d9002d17 	ldw	r4,180(sp)
80086cdc:	ac400043 	ldbu	r17,1(r21)
80086ce0:	10800017 	ldw	r2,0(r2)
80086ce4:	582b883a 	mov	r21,r11
80086ce8:	d8802915 	stw	r2,164(sp)
80086cec:	20800104 	addi	r2,r4,4
80086cf0:	d9002917 	ldw	r4,164(sp)
80086cf4:	d8802d15 	stw	r2,180(sp)
80086cf8:	203e7a0e 	bge	r4,zero,800866e4 <___vfprintf_internal_r+0x1b38>
80086cfc:	8c403fcc 	andi	r17,r17,255
80086d00:	00bfffc4 	movi	r2,-1
80086d04:	8c40201c 	xori	r17,r17,128
80086d08:	d8802915 	stw	r2,164(sp)
80086d0c:	8c7fe004 	addi	r17,r17,-128
80086d10:	00380706 	br	80084d30 <___vfprintf_internal_r+0x184>
80086d14:	d8c02917 	ldw	r3,164(sp)
80086d18:	18c00084 	addi	r3,r3,2
80086d1c:	d8c02e15 	stw	r3,184(sp)
80086d20:	1805883a 	mov	r2,r3
80086d24:	183d960e 	bge	r3,zero,80086380 <___vfprintf_internal_r+0x17d4>
80086d28:	003fd606 	br	80086c84 <___vfprintf_internal_r+0x20d8>
80086d2c:	0005883a 	mov	r2,zero
80086d30:	003f8e06 	br	80086b6c <___vfprintf_internal_r+0x1fc0>
80086d34:	9080004c 	andi	r2,r18,1
80086d38:	103f811e 	bne	r2,zero,80086b40 <___vfprintf_internal_r+0x1f94>
80086d3c:	d8802117 	ldw	r2,132(sp)
80086d40:	1405c83a 	sub	r2,r2,r16
80086d44:	d8803315 	stw	r2,204(sp)
80086d48:	b47ef326 	beq	r22,r17,80086918 <___vfprintf_internal_r+0x1d6c>
80086d4c:	dd802617 	ldw	r22,152(sp)
80086d50:	003f1106 	br	80086998 <___vfprintf_internal_r+0x1dec>
80086d54:	d9c02785 	stb	r7,158(sp)
80086d58:	00390406 	br	8008516c <___vfprintf_internal_r+0x5c0>
80086d5c:	d9c02785 	stb	r7,158(sp)
80086d60:	0038d306 	br	800850b0 <___vfprintf_internal_r+0x504>
80086d64:	d9c02785 	stb	r7,158(sp)
80086d68:	003a6106 	br	800856f0 <___vfprintf_internal_r+0xb44>
80086d6c:	d9c02785 	stb	r7,158(sp)
80086d70:	003af806 	br	80085954 <___vfprintf_internal_r+0xda8>
80086d74:	0005883a 	mov	r2,zero
80086d78:	003d7e06 	br	80086374 <___vfprintf_internal_r+0x17c8>
80086d7c:	d8802344 	addi	r2,sp,141
80086d80:	003f1306 	br	800869d0 <___vfprintf_internal_r+0x1e24>
80086d84:	d9c02785 	stb	r7,158(sp)
80086d88:	00392306 	br	80085218 <___vfprintf_internal_r+0x66c>
80086d8c:	d9c02785 	stb	r7,158(sp)
80086d90:	003aa906 	br	80085838 <___vfprintf_internal_r+0xc8c>
80086d94:	d9c02785 	stb	r7,158(sp)
80086d98:	003a3d06 	br	80085690 <___vfprintf_internal_r+0xae4>
80086d9c:	d9c02785 	stb	r7,158(sp)
80086da0:	003aca06 	br	800858cc <___vfprintf_internal_r+0xd20>

80086da4 <__vfprintf_internal>:
80086da4:	00a002b4 	movhi	r2,32778
80086da8:	1081bf04 	addi	r2,r2,1788
80086dac:	300f883a 	mov	r7,r6
80086db0:	280d883a 	mov	r6,r5
80086db4:	200b883a 	mov	r5,r4
80086db8:	11000017 	ldw	r4,0(r2)
80086dbc:	0084bac1 	jmpi	80084bac <___vfprintf_internal_r>

80086dc0 <__sbprintf>:
80086dc0:	2880030b 	ldhu	r2,12(r5)
80086dc4:	2ac01917 	ldw	r11,100(r5)
80086dc8:	2a80038b 	ldhu	r10,14(r5)
80086dcc:	2a400717 	ldw	r9,28(r5)
80086dd0:	2a000917 	ldw	r8,36(r5)
80086dd4:	defee204 	addi	sp,sp,-1144
80086dd8:	00c10004 	movi	r3,1024
80086ddc:	dc011a15 	stw	r16,1128(sp)
80086de0:	10bfff4c 	andi	r2,r2,65533
80086de4:	2821883a 	mov	r16,r5
80086de8:	d8cb883a 	add	r5,sp,r3
80086dec:	dc811c15 	stw	r18,1136(sp)
80086df0:	dc411b15 	stw	r17,1132(sp)
80086df4:	dfc11d15 	stw	ra,1140(sp)
80086df8:	2025883a 	mov	r18,r4
80086dfc:	d881030d 	sth	r2,1036(sp)
80086e00:	dac11915 	stw	r11,1124(sp)
80086e04:	da81038d 	sth	r10,1038(sp)
80086e08:	da410715 	stw	r9,1052(sp)
80086e0c:	da010915 	stw	r8,1060(sp)
80086e10:	dec10015 	stw	sp,1024(sp)
80086e14:	dec10415 	stw	sp,1040(sp)
80086e18:	d8c10215 	stw	r3,1032(sp)
80086e1c:	d8c10515 	stw	r3,1044(sp)
80086e20:	d8010615 	stw	zero,1048(sp)
80086e24:	0084bac0 	call	80084bac <___vfprintf_internal_r>
80086e28:	1023883a 	mov	r17,r2
80086e2c:	10000416 	blt	r2,zero,80086e40 <__sbprintf+0x80>
80086e30:	d9410004 	addi	r5,sp,1024
80086e34:	9009883a 	mov	r4,r18
80086e38:	0088b280 	call	80088b28 <_fflush_r>
80086e3c:	10000d1e 	bne	r2,zero,80086e74 <__sbprintf+0xb4>
80086e40:	d881030b 	ldhu	r2,1036(sp)
80086e44:	1080100c 	andi	r2,r2,64
80086e48:	10000326 	beq	r2,zero,80086e58 <__sbprintf+0x98>
80086e4c:	8080030b 	ldhu	r2,12(r16)
80086e50:	10801014 	ori	r2,r2,64
80086e54:	8080030d 	sth	r2,12(r16)
80086e58:	8805883a 	mov	r2,r17
80086e5c:	dfc11d17 	ldw	ra,1140(sp)
80086e60:	dc811c17 	ldw	r18,1136(sp)
80086e64:	dc411b17 	ldw	r17,1132(sp)
80086e68:	dc011a17 	ldw	r16,1128(sp)
80086e6c:	dec11e04 	addi	sp,sp,1144
80086e70:	f800283a 	ret
80086e74:	047fffc4 	movi	r17,-1
80086e78:	003ff106 	br	80086e40 <__sbprintf+0x80>

80086e7c <_write_r>:
80086e7c:	defffd04 	addi	sp,sp,-12
80086e80:	2805883a 	mov	r2,r5
80086e84:	dc000015 	stw	r16,0(sp)
80086e88:	042002b4 	movhi	r16,32778
80086e8c:	dc400115 	stw	r17,4(sp)
80086e90:	300b883a 	mov	r5,r6
80086e94:	8408e204 	addi	r16,r16,9096
80086e98:	2023883a 	mov	r17,r4
80086e9c:	380d883a 	mov	r6,r7
80086ea0:	1009883a 	mov	r4,r2
80086ea4:	dfc00215 	stw	ra,8(sp)
80086ea8:	80000015 	stw	zero,0(r16)
80086eac:	00994cc0 	call	800994cc <write>
80086eb0:	00ffffc4 	movi	r3,-1
80086eb4:	10c00526 	beq	r2,r3,80086ecc <_write_r+0x50>
80086eb8:	dfc00217 	ldw	ra,8(sp)
80086ebc:	dc400117 	ldw	r17,4(sp)
80086ec0:	dc000017 	ldw	r16,0(sp)
80086ec4:	dec00304 	addi	sp,sp,12
80086ec8:	f800283a 	ret
80086ecc:	80c00017 	ldw	r3,0(r16)
80086ed0:	183ff926 	beq	r3,zero,80086eb8 <_write_r+0x3c>
80086ed4:	88c00015 	stw	r3,0(r17)
80086ed8:	003ff706 	br	80086eb8 <_write_r+0x3c>

80086edc <__swsetup_r>:
80086edc:	00a002b4 	movhi	r2,32778
80086ee0:	defffd04 	addi	sp,sp,-12
80086ee4:	1081bf04 	addi	r2,r2,1788
80086ee8:	dc400115 	stw	r17,4(sp)
80086eec:	2023883a 	mov	r17,r4
80086ef0:	11000017 	ldw	r4,0(r2)
80086ef4:	dc000015 	stw	r16,0(sp)
80086ef8:	dfc00215 	stw	ra,8(sp)
80086efc:	2821883a 	mov	r16,r5
80086f00:	20000226 	beq	r4,zero,80086f0c <__swsetup_r+0x30>
80086f04:	20800e17 	ldw	r2,56(r4)
80086f08:	10003126 	beq	r2,zero,80086fd0 <__swsetup_r+0xf4>
80086f0c:	8080030b 	ldhu	r2,12(r16)
80086f10:	10c0020c 	andi	r3,r2,8
80086f14:	1009883a 	mov	r4,r2
80086f18:	18000f26 	beq	r3,zero,80086f58 <__swsetup_r+0x7c>
80086f1c:	80c00417 	ldw	r3,16(r16)
80086f20:	18001526 	beq	r3,zero,80086f78 <__swsetup_r+0x9c>
80086f24:	1100004c 	andi	r4,r2,1
80086f28:	20001c1e 	bne	r4,zero,80086f9c <__swsetup_r+0xc0>
80086f2c:	1080008c 	andi	r2,r2,2
80086f30:	1000291e 	bne	r2,zero,80086fd8 <__swsetup_r+0xfc>
80086f34:	80800517 	ldw	r2,20(r16)
80086f38:	80800215 	stw	r2,8(r16)
80086f3c:	18001c26 	beq	r3,zero,80086fb0 <__swsetup_r+0xd4>
80086f40:	0005883a 	mov	r2,zero
80086f44:	dfc00217 	ldw	ra,8(sp)
80086f48:	dc400117 	ldw	r17,4(sp)
80086f4c:	dc000017 	ldw	r16,0(sp)
80086f50:	dec00304 	addi	sp,sp,12
80086f54:	f800283a 	ret
80086f58:	2080040c 	andi	r2,r4,16
80086f5c:	10002e26 	beq	r2,zero,80087018 <__swsetup_r+0x13c>
80086f60:	2080010c 	andi	r2,r4,4
80086f64:	10001e1e 	bne	r2,zero,80086fe0 <__swsetup_r+0x104>
80086f68:	80c00417 	ldw	r3,16(r16)
80086f6c:	20800214 	ori	r2,r4,8
80086f70:	8080030d 	sth	r2,12(r16)
80086f74:	183feb1e 	bne	r3,zero,80086f24 <__swsetup_r+0x48>
80086f78:	1100a00c 	andi	r4,r2,640
80086f7c:	01408004 	movi	r5,512
80086f80:	217fe826 	beq	r4,r5,80086f24 <__swsetup_r+0x48>
80086f84:	800b883a 	mov	r5,r16
80086f88:	8809883a 	mov	r4,r17
80086f8c:	0089b380 	call	80089b38 <__smakebuf_r>
80086f90:	8080030b 	ldhu	r2,12(r16)
80086f94:	80c00417 	ldw	r3,16(r16)
80086f98:	003fe206 	br	80086f24 <__swsetup_r+0x48>
80086f9c:	80800517 	ldw	r2,20(r16)
80086fa0:	80000215 	stw	zero,8(r16)
80086fa4:	0085c83a 	sub	r2,zero,r2
80086fa8:	80800615 	stw	r2,24(r16)
80086fac:	183fe41e 	bne	r3,zero,80086f40 <__swsetup_r+0x64>
80086fb0:	80c0030b 	ldhu	r3,12(r16)
80086fb4:	0005883a 	mov	r2,zero
80086fb8:	1900200c 	andi	r4,r3,128
80086fbc:	203fe126 	beq	r4,zero,80086f44 <__swsetup_r+0x68>
80086fc0:	18c01014 	ori	r3,r3,64
80086fc4:	80c0030d 	sth	r3,12(r16)
80086fc8:	00bfffc4 	movi	r2,-1
80086fcc:	003fdd06 	br	80086f44 <__swsetup_r+0x68>
80086fd0:	0088f040 	call	80088f04 <__sinit>
80086fd4:	003fcd06 	br	80086f0c <__swsetup_r+0x30>
80086fd8:	0005883a 	mov	r2,zero
80086fdc:	003fd606 	br	80086f38 <__swsetup_r+0x5c>
80086fe0:	81400c17 	ldw	r5,48(r16)
80086fe4:	28000626 	beq	r5,zero,80087000 <__swsetup_r+0x124>
80086fe8:	80801004 	addi	r2,r16,64
80086fec:	28800326 	beq	r5,r2,80086ffc <__swsetup_r+0x120>
80086ff0:	8809883a 	mov	r4,r17
80086ff4:	00890780 	call	80089078 <_free_r>
80086ff8:	8100030b 	ldhu	r4,12(r16)
80086ffc:	80000c15 	stw	zero,48(r16)
80087000:	80c00417 	ldw	r3,16(r16)
80087004:	00bff6c4 	movi	r2,-37
80087008:	1108703a 	and	r4,r2,r4
8008700c:	80000115 	stw	zero,4(r16)
80087010:	80c00015 	stw	r3,0(r16)
80087014:	003fd506 	br	80086f6c <__swsetup_r+0x90>
80087018:	00800244 	movi	r2,9
8008701c:	88800015 	stw	r2,0(r17)
80087020:	20801014 	ori	r2,r4,64
80087024:	8080030d 	sth	r2,12(r16)
80087028:	00bfffc4 	movi	r2,-1
8008702c:	003fc506 	br	80086f44 <__swsetup_r+0x68>

80087030 <_close_r>:
80087030:	defffd04 	addi	sp,sp,-12
80087034:	dc000015 	stw	r16,0(sp)
80087038:	042002b4 	movhi	r16,32778
8008703c:	dc400115 	stw	r17,4(sp)
80087040:	8408e204 	addi	r16,r16,9096
80087044:	2023883a 	mov	r17,r4
80087048:	2809883a 	mov	r4,r5
8008704c:	dfc00215 	stw	ra,8(sp)
80087050:	80000015 	stw	zero,0(r16)
80087054:	0098c000 	call	80098c00 <close>
80087058:	00ffffc4 	movi	r3,-1
8008705c:	10c00526 	beq	r2,r3,80087074 <_close_r+0x44>
80087060:	dfc00217 	ldw	ra,8(sp)
80087064:	dc400117 	ldw	r17,4(sp)
80087068:	dc000017 	ldw	r16,0(sp)
8008706c:	dec00304 	addi	sp,sp,12
80087070:	f800283a 	ret
80087074:	80c00017 	ldw	r3,0(r16)
80087078:	183ff926 	beq	r3,zero,80087060 <_close_r+0x30>
8008707c:	88c00015 	stw	r3,0(r17)
80087080:	003ff706 	br	80087060 <_close_r+0x30>

80087084 <quorem>:
80087084:	defff704 	addi	sp,sp,-36
80087088:	dc800215 	stw	r18,8(sp)
8008708c:	20800417 	ldw	r2,16(r4)
80087090:	2c800417 	ldw	r18,16(r5)
80087094:	dfc00815 	stw	ra,32(sp)
80087098:	ddc00715 	stw	r23,28(sp)
8008709c:	dd800615 	stw	r22,24(sp)
800870a0:	dd400515 	stw	r21,20(sp)
800870a4:	dd000415 	stw	r20,16(sp)
800870a8:	dcc00315 	stw	r19,12(sp)
800870ac:	dc400115 	stw	r17,4(sp)
800870b0:	dc000015 	stw	r16,0(sp)
800870b4:	14807116 	blt	r2,r18,8008727c <quorem+0x1f8>
800870b8:	94bfffc4 	addi	r18,r18,-1
800870bc:	94ad883a 	add	r22,r18,r18
800870c0:	b5ad883a 	add	r22,r22,r22
800870c4:	2c400504 	addi	r17,r5,20
800870c8:	8da9883a 	add	r20,r17,r22
800870cc:	25400504 	addi	r21,r4,20
800870d0:	282f883a 	mov	r23,r5
800870d4:	adad883a 	add	r22,r21,r22
800870d8:	a1400017 	ldw	r5,0(r20)
800870dc:	2021883a 	mov	r16,r4
800870e0:	b1000017 	ldw	r4,0(r22)
800870e4:	29400044 	addi	r5,r5,1
800870e8:	00823400 	call	80082340 <__udivsi3>
800870ec:	1027883a 	mov	r19,r2
800870f0:	10002c26 	beq	r2,zero,800871a4 <quorem+0x120>
800870f4:	a813883a 	mov	r9,r21
800870f8:	880b883a 	mov	r5,r17
800870fc:	0009883a 	mov	r4,zero
80087100:	000d883a 	mov	r6,zero
80087104:	2a000017 	ldw	r8,0(r5)
80087108:	49c00017 	ldw	r7,0(r9)
8008710c:	29400104 	addi	r5,r5,4
80087110:	40bfffcc 	andi	r2,r8,65535
80087114:	14c5383a 	mul	r2,r2,r19
80087118:	4010d43a 	srli	r8,r8,16
8008711c:	38ffffcc 	andi	r3,r7,65535
80087120:	1105883a 	add	r2,r2,r4
80087124:	1008d43a 	srli	r4,r2,16
80087128:	44d1383a 	mul	r8,r8,r19
8008712c:	198d883a 	add	r6,r3,r6
80087130:	10ffffcc 	andi	r3,r2,65535
80087134:	30c7c83a 	sub	r3,r6,r3
80087138:	380ed43a 	srli	r7,r7,16
8008713c:	4105883a 	add	r2,r8,r4
80087140:	180dd43a 	srai	r6,r3,16
80087144:	113fffcc 	andi	r4,r2,65535
80087148:	390fc83a 	sub	r7,r7,r4
8008714c:	398d883a 	add	r6,r7,r6
80087150:	300e943a 	slli	r7,r6,16
80087154:	18ffffcc 	andi	r3,r3,65535
80087158:	1008d43a 	srli	r4,r2,16
8008715c:	38ceb03a 	or	r7,r7,r3
80087160:	49c00015 	stw	r7,0(r9)
80087164:	300dd43a 	srai	r6,r6,16
80087168:	4a400104 	addi	r9,r9,4
8008716c:	a17fe52e 	bgeu	r20,r5,80087104 <quorem+0x80>
80087170:	b0800017 	ldw	r2,0(r22)
80087174:	10000b1e 	bne	r2,zero,800871a4 <quorem+0x120>
80087178:	b0bfff04 	addi	r2,r22,-4
8008717c:	a880082e 	bgeu	r21,r2,800871a0 <quorem+0x11c>
80087180:	b0ffff17 	ldw	r3,-4(r22)
80087184:	18000326 	beq	r3,zero,80087194 <quorem+0x110>
80087188:	00000506 	br	800871a0 <quorem+0x11c>
8008718c:	10c00017 	ldw	r3,0(r2)
80087190:	1800031e 	bne	r3,zero,800871a0 <quorem+0x11c>
80087194:	10bfff04 	addi	r2,r2,-4
80087198:	94bfffc4 	addi	r18,r18,-1
8008719c:	a8bffb36 	bltu	r21,r2,8008718c <quorem+0x108>
800871a0:	84800415 	stw	r18,16(r16)
800871a4:	b80b883a 	mov	r5,r23
800871a8:	8009883a 	mov	r4,r16
800871ac:	008ab480 	call	8008ab48 <__mcmp>
800871b0:	10002616 	blt	r2,zero,8008724c <quorem+0x1c8>
800871b4:	9cc00044 	addi	r19,r19,1
800871b8:	a805883a 	mov	r2,r21
800871bc:	000b883a 	mov	r5,zero
800871c0:	11000017 	ldw	r4,0(r2)
800871c4:	89800017 	ldw	r6,0(r17)
800871c8:	10800104 	addi	r2,r2,4
800871cc:	20ffffcc 	andi	r3,r4,65535
800871d0:	194b883a 	add	r5,r3,r5
800871d4:	30ffffcc 	andi	r3,r6,65535
800871d8:	28c7c83a 	sub	r3,r5,r3
800871dc:	300cd43a 	srli	r6,r6,16
800871e0:	2008d43a 	srli	r4,r4,16
800871e4:	180bd43a 	srai	r5,r3,16
800871e8:	18ffffcc 	andi	r3,r3,65535
800871ec:	2189c83a 	sub	r4,r4,r6
800871f0:	2149883a 	add	r4,r4,r5
800871f4:	200c943a 	slli	r6,r4,16
800871f8:	8c400104 	addi	r17,r17,4
800871fc:	200bd43a 	srai	r5,r4,16
80087200:	30c6b03a 	or	r3,r6,r3
80087204:	10ffff15 	stw	r3,-4(r2)
80087208:	a47fed2e 	bgeu	r20,r17,800871c0 <quorem+0x13c>
8008720c:	9485883a 	add	r2,r18,r18
80087210:	1085883a 	add	r2,r2,r2
80087214:	a887883a 	add	r3,r21,r2
80087218:	18800017 	ldw	r2,0(r3)
8008721c:	10000b1e 	bne	r2,zero,8008724c <quorem+0x1c8>
80087220:	18bfff04 	addi	r2,r3,-4
80087224:	a880082e 	bgeu	r21,r2,80087248 <quorem+0x1c4>
80087228:	18ffff17 	ldw	r3,-4(r3)
8008722c:	18000326 	beq	r3,zero,8008723c <quorem+0x1b8>
80087230:	00000506 	br	80087248 <quorem+0x1c4>
80087234:	10c00017 	ldw	r3,0(r2)
80087238:	1800031e 	bne	r3,zero,80087248 <quorem+0x1c4>
8008723c:	10bfff04 	addi	r2,r2,-4
80087240:	94bfffc4 	addi	r18,r18,-1
80087244:	a8bffb36 	bltu	r21,r2,80087234 <quorem+0x1b0>
80087248:	84800415 	stw	r18,16(r16)
8008724c:	9805883a 	mov	r2,r19
80087250:	dfc00817 	ldw	ra,32(sp)
80087254:	ddc00717 	ldw	r23,28(sp)
80087258:	dd800617 	ldw	r22,24(sp)
8008725c:	dd400517 	ldw	r21,20(sp)
80087260:	dd000417 	ldw	r20,16(sp)
80087264:	dcc00317 	ldw	r19,12(sp)
80087268:	dc800217 	ldw	r18,8(sp)
8008726c:	dc400117 	ldw	r17,4(sp)
80087270:	dc000017 	ldw	r16,0(sp)
80087274:	dec00904 	addi	sp,sp,36
80087278:	f800283a 	ret
8008727c:	0005883a 	mov	r2,zero
80087280:	003ff306 	br	80087250 <quorem+0x1cc>

80087284 <_dtoa_r>:
80087284:	20801017 	ldw	r2,64(r4)
80087288:	deffde04 	addi	sp,sp,-136
8008728c:	df002015 	stw	fp,128(sp)
80087290:	dcc01b15 	stw	r19,108(sp)
80087294:	dc801a15 	stw	r18,104(sp)
80087298:	dc401915 	stw	r17,100(sp)
8008729c:	dc001815 	stw	r16,96(sp)
800872a0:	dfc02115 	stw	ra,132(sp)
800872a4:	ddc01f15 	stw	r23,124(sp)
800872a8:	dd801e15 	stw	r22,120(sp)
800872ac:	dd401d15 	stw	r21,116(sp)
800872b0:	dd001c15 	stw	r20,112(sp)
800872b4:	d9c00315 	stw	r7,12(sp)
800872b8:	2039883a 	mov	fp,r4
800872bc:	3023883a 	mov	r17,r6
800872c0:	2825883a 	mov	r18,r5
800872c4:	dc002417 	ldw	r16,144(sp)
800872c8:	3027883a 	mov	r19,r6
800872cc:	10000826 	beq	r2,zero,800872f0 <_dtoa_r+0x6c>
800872d0:	21801117 	ldw	r6,68(r4)
800872d4:	00c00044 	movi	r3,1
800872d8:	100b883a 	mov	r5,r2
800872dc:	1986983a 	sll	r3,r3,r6
800872e0:	11800115 	stw	r6,4(r2)
800872e4:	10c00215 	stw	r3,8(r2)
800872e8:	008a3280 	call	8008a328 <_Bfree>
800872ec:	e0001015 	stw	zero,64(fp)
800872f0:	88002e16 	blt	r17,zero,800873ac <_dtoa_r+0x128>
800872f4:	80000015 	stw	zero,0(r16)
800872f8:	889ffc2c 	andhi	r2,r17,32752
800872fc:	00dffc34 	movhi	r3,32752
80087300:	10c01c26 	beq	r2,r3,80087374 <_dtoa_r+0xf0>
80087304:	000d883a 	mov	r6,zero
80087308:	000f883a 	mov	r7,zero
8008730c:	9009883a 	mov	r4,r18
80087310:	980b883a 	mov	r5,r19
80087314:	00975480 	call	80097548 <__eqdf2>
80087318:	10002b1e 	bne	r2,zero,800873c8 <_dtoa_r+0x144>
8008731c:	d9c02317 	ldw	r7,140(sp)
80087320:	00800044 	movi	r2,1
80087324:	38800015 	stw	r2,0(r7)
80087328:	d8802517 	ldw	r2,148(sp)
8008732c:	10019e26 	beq	r2,zero,800879a8 <_dtoa_r+0x724>
80087330:	d8c02517 	ldw	r3,148(sp)
80087334:	00a002b4 	movhi	r2,32778
80087338:	10b86f44 	addi	r2,r2,-7747
8008733c:	18800015 	stw	r2,0(r3)
80087340:	10bfffc4 	addi	r2,r2,-1
80087344:	dfc02117 	ldw	ra,132(sp)
80087348:	df002017 	ldw	fp,128(sp)
8008734c:	ddc01f17 	ldw	r23,124(sp)
80087350:	dd801e17 	ldw	r22,120(sp)
80087354:	dd401d17 	ldw	r21,116(sp)
80087358:	dd001c17 	ldw	r20,112(sp)
8008735c:	dcc01b17 	ldw	r19,108(sp)
80087360:	dc801a17 	ldw	r18,104(sp)
80087364:	dc401917 	ldw	r17,100(sp)
80087368:	dc001817 	ldw	r16,96(sp)
8008736c:	dec02204 	addi	sp,sp,136
80087370:	f800283a 	ret
80087374:	d8c02317 	ldw	r3,140(sp)
80087378:	0089c3c4 	movi	r2,9999
8008737c:	18800015 	stw	r2,0(r3)
80087380:	90017726 	beq	r18,zero,80087960 <_dtoa_r+0x6dc>
80087384:	00a002b4 	movhi	r2,32778
80087388:	10b91b04 	addi	r2,r2,-7060
8008738c:	d9002517 	ldw	r4,148(sp)
80087390:	203fec26 	beq	r4,zero,80087344 <_dtoa_r+0xc0>
80087394:	10c000c7 	ldb	r3,3(r2)
80087398:	1801781e 	bne	r3,zero,8008797c <_dtoa_r+0x6f8>
8008739c:	10c000c4 	addi	r3,r2,3
800873a0:	d9802517 	ldw	r6,148(sp)
800873a4:	30c00015 	stw	r3,0(r6)
800873a8:	003fe606 	br	80087344 <_dtoa_r+0xc0>
800873ac:	04e00034 	movhi	r19,32768
800873b0:	9cffffc4 	addi	r19,r19,-1
800873b4:	00800044 	movi	r2,1
800873b8:	8ce6703a 	and	r19,r17,r19
800873bc:	80800015 	stw	r2,0(r16)
800873c0:	9823883a 	mov	r17,r19
800873c4:	003fcc06 	br	800872f8 <_dtoa_r+0x74>
800873c8:	d8800204 	addi	r2,sp,8
800873cc:	d8800015 	stw	r2,0(sp)
800873d0:	d9c00104 	addi	r7,sp,4
800873d4:	900b883a 	mov	r5,r18
800873d8:	980d883a 	mov	r6,r19
800873dc:	e009883a 	mov	r4,fp
800873e0:	8820d53a 	srli	r16,r17,20
800873e4:	008af140 	call	8008af14 <__d2b>
800873e8:	d8800915 	stw	r2,36(sp)
800873ec:	8001651e 	bne	r16,zero,80087984 <_dtoa_r+0x700>
800873f0:	dd800217 	ldw	r22,8(sp)
800873f4:	dc000117 	ldw	r16,4(sp)
800873f8:	00800804 	movi	r2,32
800873fc:	b421883a 	add	r16,r22,r16
80087400:	80c10c84 	addi	r3,r16,1074
80087404:	10c2d10e 	bge	r2,r3,80087f4c <_dtoa_r+0xcc8>
80087408:	00801004 	movi	r2,64
8008740c:	81010484 	addi	r4,r16,1042
80087410:	10c7c83a 	sub	r3,r2,r3
80087414:	9108d83a 	srl	r4,r18,r4
80087418:	88e2983a 	sll	r17,r17,r3
8008741c:	2448b03a 	or	r4,r4,r17
80087420:	00989100 	call	80098910 <__floatunsidf>
80087424:	017f8434 	movhi	r5,65040
80087428:	01800044 	movi	r6,1
8008742c:	1009883a 	mov	r4,r2
80087430:	194b883a 	add	r5,r3,r5
80087434:	843fffc4 	addi	r16,r16,-1
80087438:	d9801115 	stw	r6,68(sp)
8008743c:	000d883a 	mov	r6,zero
80087440:	01cffe34 	movhi	r7,16376
80087444:	0097eb80 	call	80097eb8 <__subdf3>
80087448:	0198dbf4 	movhi	r6,25455
8008744c:	01cff4f4 	movhi	r7,16339
80087450:	3190d844 	addi	r6,r6,17249
80087454:	39e1e9c4 	addi	r7,r7,-30809
80087458:	1009883a 	mov	r4,r2
8008745c:	180b883a 	mov	r5,r3
80087460:	00977a00 	call	800977a0 <__muldf3>
80087464:	01a2d874 	movhi	r6,35681
80087468:	01cff1f4 	movhi	r7,16327
8008746c:	31b22cc4 	addi	r6,r6,-14157
80087470:	39e28a04 	addi	r7,r7,-30168
80087474:	180b883a 	mov	r5,r3
80087478:	1009883a 	mov	r4,r2
8008747c:	00963b40 	call	800963b4 <__adddf3>
80087480:	8009883a 	mov	r4,r16
80087484:	1029883a 	mov	r20,r2
80087488:	1823883a 	mov	r17,r3
8008748c:	00988340 	call	80098834 <__floatsidf>
80087490:	019427f4 	movhi	r6,20639
80087494:	01cff4f4 	movhi	r7,16339
80087498:	319e7ec4 	addi	r6,r6,31227
8008749c:	39d104c4 	addi	r7,r7,17427
800874a0:	1009883a 	mov	r4,r2
800874a4:	180b883a 	mov	r5,r3
800874a8:	00977a00 	call	800977a0 <__muldf3>
800874ac:	100d883a 	mov	r6,r2
800874b0:	180f883a 	mov	r7,r3
800874b4:	a009883a 	mov	r4,r20
800874b8:	880b883a 	mov	r5,r17
800874bc:	00963b40 	call	800963b4 <__adddf3>
800874c0:	1009883a 	mov	r4,r2
800874c4:	180b883a 	mov	r5,r3
800874c8:	1029883a 	mov	r20,r2
800874cc:	1823883a 	mov	r17,r3
800874d0:	00987b40 	call	800987b4 <__fixdfsi>
800874d4:	000d883a 	mov	r6,zero
800874d8:	000f883a 	mov	r7,zero
800874dc:	a009883a 	mov	r4,r20
800874e0:	880b883a 	mov	r5,r17
800874e4:	d8800515 	stw	r2,20(sp)
800874e8:	00976ac0 	call	800976ac <__ledf2>
800874ec:	10028716 	blt	r2,zero,80087f0c <_dtoa_r+0xc88>
800874f0:	d8c00517 	ldw	r3,20(sp)
800874f4:	00800584 	movi	r2,22
800874f8:	10c27536 	bltu	r2,r3,80087ed0 <_dtoa_r+0xc4c>
800874fc:	180490fa 	slli	r2,r3,3
80087500:	00e002b4 	movhi	r3,32778
80087504:	18f93604 	addi	r3,r3,-6952
80087508:	1885883a 	add	r2,r3,r2
8008750c:	11000017 	ldw	r4,0(r2)
80087510:	11400117 	ldw	r5,4(r2)
80087514:	900d883a 	mov	r6,r18
80087518:	980f883a 	mov	r7,r19
8008751c:	00975d00 	call	800975d0 <__gedf2>
80087520:	00828d0e 	bge	zero,r2,80087f58 <_dtoa_r+0xcd4>
80087524:	d9000517 	ldw	r4,20(sp)
80087528:	d8000e15 	stw	zero,56(sp)
8008752c:	213fffc4 	addi	r4,r4,-1
80087530:	d9000515 	stw	r4,20(sp)
80087534:	b42dc83a 	sub	r22,r22,r16
80087538:	b5bfffc4 	addi	r22,r22,-1
8008753c:	b0026f16 	blt	r22,zero,80087efc <_dtoa_r+0xc78>
80087540:	d8000815 	stw	zero,32(sp)
80087544:	d9c00517 	ldw	r7,20(sp)
80087548:	38026416 	blt	r7,zero,80087edc <_dtoa_r+0xc58>
8008754c:	b1ed883a 	add	r22,r22,r7
80087550:	d9c00d15 	stw	r7,52(sp)
80087554:	d8000a15 	stw	zero,40(sp)
80087558:	d9800317 	ldw	r6,12(sp)
8008755c:	00800244 	movi	r2,9
80087560:	11811436 	bltu	r2,r6,800879b4 <_dtoa_r+0x730>
80087564:	00800144 	movi	r2,5
80087568:	1184e10e 	bge	r2,r6,800888f0 <_dtoa_r+0x166c>
8008756c:	31bfff04 	addi	r6,r6,-4
80087570:	d9800315 	stw	r6,12(sp)
80087574:	0023883a 	mov	r17,zero
80087578:	d9800317 	ldw	r6,12(sp)
8008757c:	008000c4 	movi	r2,3
80087580:	30836726 	beq	r6,r2,80088320 <_dtoa_r+0x109c>
80087584:	1183410e 	bge	r2,r6,8008828c <_dtoa_r+0x1008>
80087588:	d9c00317 	ldw	r7,12(sp)
8008758c:	00800104 	movi	r2,4
80087590:	38827c26 	beq	r7,r2,80087f84 <_dtoa_r+0xd00>
80087594:	00800144 	movi	r2,5
80087598:	3884c41e 	bne	r7,r2,800888ac <_dtoa_r+0x1628>
8008759c:	00800044 	movi	r2,1
800875a0:	d8800b15 	stw	r2,44(sp)
800875a4:	d8c00517 	ldw	r3,20(sp)
800875a8:	d9002217 	ldw	r4,136(sp)
800875ac:	1907883a 	add	r3,r3,r4
800875b0:	19800044 	addi	r6,r3,1
800875b4:	d8c00c15 	stw	r3,48(sp)
800875b8:	d9800615 	stw	r6,24(sp)
800875bc:	0183a40e 	bge	zero,r6,80088450 <_dtoa_r+0x11cc>
800875c0:	d9800617 	ldw	r6,24(sp)
800875c4:	3021883a 	mov	r16,r6
800875c8:	e0001115 	stw	zero,68(fp)
800875cc:	008005c4 	movi	r2,23
800875d0:	1184c92e 	bgeu	r2,r6,800888f8 <_dtoa_r+0x1674>
800875d4:	00c00044 	movi	r3,1
800875d8:	00800104 	movi	r2,4
800875dc:	1085883a 	add	r2,r2,r2
800875e0:	11000504 	addi	r4,r2,20
800875e4:	180b883a 	mov	r5,r3
800875e8:	18c00044 	addi	r3,r3,1
800875ec:	313ffb2e 	bgeu	r6,r4,800875dc <_dtoa_r+0x358>
800875f0:	e1401115 	stw	r5,68(fp)
800875f4:	e009883a 	mov	r4,fp
800875f8:	008a2800 	call	8008a280 <_Balloc>
800875fc:	d8800715 	stw	r2,28(sp)
80087600:	e0801015 	stw	r2,64(fp)
80087604:	00800384 	movi	r2,14
80087608:	1400f736 	bltu	r2,r16,800879e8 <_dtoa_r+0x764>
8008760c:	8800f626 	beq	r17,zero,800879e8 <_dtoa_r+0x764>
80087610:	d9c00517 	ldw	r7,20(sp)
80087614:	01c39a0e 	bge	zero,r7,80088480 <_dtoa_r+0x11fc>
80087618:	388003cc 	andi	r2,r7,15
8008761c:	100490fa 	slli	r2,r2,3
80087620:	382bd13a 	srai	r21,r7,4
80087624:	00e002b4 	movhi	r3,32778
80087628:	18f93604 	addi	r3,r3,-6952
8008762c:	1885883a 	add	r2,r3,r2
80087630:	a8c0040c 	andi	r3,r21,16
80087634:	12400017 	ldw	r9,0(r2)
80087638:	12000117 	ldw	r8,4(r2)
8008763c:	18037926 	beq	r3,zero,80088424 <_dtoa_r+0x11a0>
80087640:	00a002b4 	movhi	r2,32778
80087644:	10b92c04 	addi	r2,r2,-6992
80087648:	11800817 	ldw	r6,32(r2)
8008764c:	11c00917 	ldw	r7,36(r2)
80087650:	9009883a 	mov	r4,r18
80087654:	980b883a 	mov	r5,r19
80087658:	da001715 	stw	r8,92(sp)
8008765c:	da401615 	stw	r9,88(sp)
80087660:	0096c600 	call	80096c60 <__divdf3>
80087664:	da001717 	ldw	r8,92(sp)
80087668:	da401617 	ldw	r9,88(sp)
8008766c:	ad4003cc 	andi	r21,r21,15
80087670:	040000c4 	movi	r16,3
80087674:	1023883a 	mov	r17,r2
80087678:	1829883a 	mov	r20,r3
8008767c:	a8001126 	beq	r21,zero,800876c4 <_dtoa_r+0x440>
80087680:	05e002b4 	movhi	r23,32778
80087684:	bdf92c04 	addi	r23,r23,-6992
80087688:	4805883a 	mov	r2,r9
8008768c:	4007883a 	mov	r3,r8
80087690:	a980004c 	andi	r6,r21,1
80087694:	1009883a 	mov	r4,r2
80087698:	a82bd07a 	srai	r21,r21,1
8008769c:	180b883a 	mov	r5,r3
800876a0:	30000426 	beq	r6,zero,800876b4 <_dtoa_r+0x430>
800876a4:	b9800017 	ldw	r6,0(r23)
800876a8:	b9c00117 	ldw	r7,4(r23)
800876ac:	84000044 	addi	r16,r16,1
800876b0:	00977a00 	call	800977a0 <__muldf3>
800876b4:	bdc00204 	addi	r23,r23,8
800876b8:	a83ff51e 	bne	r21,zero,80087690 <_dtoa_r+0x40c>
800876bc:	1013883a 	mov	r9,r2
800876c0:	1811883a 	mov	r8,r3
800876c4:	480d883a 	mov	r6,r9
800876c8:	400f883a 	mov	r7,r8
800876cc:	8809883a 	mov	r4,r17
800876d0:	a00b883a 	mov	r5,r20
800876d4:	0096c600 	call	80096c60 <__divdf3>
800876d8:	d8800f15 	stw	r2,60(sp)
800876dc:	d8c01015 	stw	r3,64(sp)
800876e0:	d8c00e17 	ldw	r3,56(sp)
800876e4:	18000626 	beq	r3,zero,80087700 <_dtoa_r+0x47c>
800876e8:	d9000f17 	ldw	r4,60(sp)
800876ec:	d9401017 	ldw	r5,64(sp)
800876f0:	000d883a 	mov	r6,zero
800876f4:	01cffc34 	movhi	r7,16368
800876f8:	00976ac0 	call	800976ac <__ledf2>
800876fc:	10040b16 	blt	r2,zero,8008872c <_dtoa_r+0x14a8>
80087700:	8009883a 	mov	r4,r16
80087704:	00988340 	call	80098834 <__floatsidf>
80087708:	d9800f17 	ldw	r6,60(sp)
8008770c:	d9c01017 	ldw	r7,64(sp)
80087710:	1009883a 	mov	r4,r2
80087714:	180b883a 	mov	r5,r3
80087718:	00977a00 	call	800977a0 <__muldf3>
8008771c:	000d883a 	mov	r6,zero
80087720:	01d00734 	movhi	r7,16412
80087724:	1009883a 	mov	r4,r2
80087728:	180b883a 	mov	r5,r3
8008772c:	00963b40 	call	800963b4 <__adddf3>
80087730:	1021883a 	mov	r16,r2
80087734:	d8800617 	ldw	r2,24(sp)
80087738:	047f3034 	movhi	r17,64704
8008773c:	1c63883a 	add	r17,r3,r17
80087740:	10031826 	beq	r2,zero,800883a4 <_dtoa_r+0x1120>
80087744:	d8c00517 	ldw	r3,20(sp)
80087748:	db000617 	ldw	r12,24(sp)
8008774c:	d8c01315 	stw	r3,76(sp)
80087750:	d9000b17 	ldw	r4,44(sp)
80087754:	20038f26 	beq	r4,zero,80088594 <_dtoa_r+0x1310>
80087758:	60bfffc4 	addi	r2,r12,-1
8008775c:	100490fa 	slli	r2,r2,3
80087760:	00e002b4 	movhi	r3,32778
80087764:	18f93604 	addi	r3,r3,-6952
80087768:	1885883a 	add	r2,r3,r2
8008776c:	11800017 	ldw	r6,0(r2)
80087770:	11c00117 	ldw	r7,4(r2)
80087774:	d8800717 	ldw	r2,28(sp)
80087778:	0009883a 	mov	r4,zero
8008777c:	014ff834 	movhi	r5,16352
80087780:	db001615 	stw	r12,88(sp)
80087784:	15c00044 	addi	r23,r2,1
80087788:	0096c600 	call	80096c60 <__divdf3>
8008778c:	800d883a 	mov	r6,r16
80087790:	880f883a 	mov	r7,r17
80087794:	1009883a 	mov	r4,r2
80087798:	180b883a 	mov	r5,r3
8008779c:	0097eb80 	call	80097eb8 <__subdf3>
800877a0:	d9401017 	ldw	r5,64(sp)
800877a4:	d9000f17 	ldw	r4,60(sp)
800877a8:	102b883a 	mov	r21,r2
800877ac:	d8c01215 	stw	r3,72(sp)
800877b0:	00987b40 	call	800987b4 <__fixdfsi>
800877b4:	1009883a 	mov	r4,r2
800877b8:	1029883a 	mov	r20,r2
800877bc:	00988340 	call	80098834 <__floatsidf>
800877c0:	d9000f17 	ldw	r4,60(sp)
800877c4:	d9401017 	ldw	r5,64(sp)
800877c8:	100d883a 	mov	r6,r2
800877cc:	180f883a 	mov	r7,r3
800877d0:	0097eb80 	call	80097eb8 <__subdf3>
800877d4:	1823883a 	mov	r17,r3
800877d8:	d8c00717 	ldw	r3,28(sp)
800877dc:	d9401217 	ldw	r5,72(sp)
800877e0:	a2000c04 	addi	r8,r20,48
800877e4:	1021883a 	mov	r16,r2
800877e8:	1a000005 	stb	r8,0(r3)
800877ec:	800d883a 	mov	r6,r16
800877f0:	880f883a 	mov	r7,r17
800877f4:	a809883a 	mov	r4,r21
800877f8:	4029883a 	mov	r20,r8
800877fc:	00975d00 	call	800975d0 <__gedf2>
80087800:	00841d16 	blt	zero,r2,80088878 <_dtoa_r+0x15f4>
80087804:	800d883a 	mov	r6,r16
80087808:	880f883a 	mov	r7,r17
8008780c:	0009883a 	mov	r4,zero
80087810:	014ffc34 	movhi	r5,16368
80087814:	0097eb80 	call	80097eb8 <__subdf3>
80087818:	d9401217 	ldw	r5,72(sp)
8008781c:	100d883a 	mov	r6,r2
80087820:	180f883a 	mov	r7,r3
80087824:	a809883a 	mov	r4,r21
80087828:	00975d00 	call	800975d0 <__gedf2>
8008782c:	db001617 	ldw	r12,88(sp)
80087830:	00840e16 	blt	zero,r2,8008886c <_dtoa_r+0x15e8>
80087834:	00800044 	movi	r2,1
80087838:	13006b0e 	bge	r2,r12,800879e8 <_dtoa_r+0x764>
8008783c:	d9000717 	ldw	r4,28(sp)
80087840:	dd800f15 	stw	r22,60(sp)
80087844:	dcc01015 	stw	r19,64(sp)
80087848:	2319883a 	add	r12,r4,r12
8008784c:	dcc01217 	ldw	r19,72(sp)
80087850:	602d883a 	mov	r22,r12
80087854:	dc801215 	stw	r18,72(sp)
80087858:	b825883a 	mov	r18,r23
8008785c:	00000906 	br	80087884 <_dtoa_r+0x600>
80087860:	0097eb80 	call	80097eb8 <__subdf3>
80087864:	a80d883a 	mov	r6,r21
80087868:	980f883a 	mov	r7,r19
8008786c:	1009883a 	mov	r4,r2
80087870:	180b883a 	mov	r5,r3
80087874:	00976ac0 	call	800976ac <__ledf2>
80087878:	1003e816 	blt	r2,zero,8008881c <_dtoa_r+0x1598>
8008787c:	b825883a 	mov	r18,r23
80087880:	bd83e926 	beq	r23,r22,80088828 <_dtoa_r+0x15a4>
80087884:	a809883a 	mov	r4,r21
80087888:	980b883a 	mov	r5,r19
8008788c:	000d883a 	mov	r6,zero
80087890:	01d00934 	movhi	r7,16420
80087894:	00977a00 	call	800977a0 <__muldf3>
80087898:	000d883a 	mov	r6,zero
8008789c:	01d00934 	movhi	r7,16420
800878a0:	8009883a 	mov	r4,r16
800878a4:	880b883a 	mov	r5,r17
800878a8:	102b883a 	mov	r21,r2
800878ac:	1827883a 	mov	r19,r3
800878b0:	00977a00 	call	800977a0 <__muldf3>
800878b4:	180b883a 	mov	r5,r3
800878b8:	1009883a 	mov	r4,r2
800878bc:	1821883a 	mov	r16,r3
800878c0:	1023883a 	mov	r17,r2
800878c4:	00987b40 	call	800987b4 <__fixdfsi>
800878c8:	1009883a 	mov	r4,r2
800878cc:	1029883a 	mov	r20,r2
800878d0:	00988340 	call	80098834 <__floatsidf>
800878d4:	8809883a 	mov	r4,r17
800878d8:	800b883a 	mov	r5,r16
800878dc:	100d883a 	mov	r6,r2
800878e0:	180f883a 	mov	r7,r3
800878e4:	0097eb80 	call	80097eb8 <__subdf3>
800878e8:	a5000c04 	addi	r20,r20,48
800878ec:	a80d883a 	mov	r6,r21
800878f0:	980f883a 	mov	r7,r19
800878f4:	1009883a 	mov	r4,r2
800878f8:	180b883a 	mov	r5,r3
800878fc:	95000005 	stb	r20,0(r18)
80087900:	1021883a 	mov	r16,r2
80087904:	1823883a 	mov	r17,r3
80087908:	00976ac0 	call	800976ac <__ledf2>
8008790c:	bdc00044 	addi	r23,r23,1
80087910:	800d883a 	mov	r6,r16
80087914:	880f883a 	mov	r7,r17
80087918:	0009883a 	mov	r4,zero
8008791c:	014ffc34 	movhi	r5,16368
80087920:	103fcf0e 	bge	r2,zero,80087860 <_dtoa_r+0x5dc>
80087924:	d8c01317 	ldw	r3,76(sp)
80087928:	d8c00515 	stw	r3,20(sp)
8008792c:	d9400917 	ldw	r5,36(sp)
80087930:	e009883a 	mov	r4,fp
80087934:	008a3280 	call	8008a328 <_Bfree>
80087938:	d9000517 	ldw	r4,20(sp)
8008793c:	d9802317 	ldw	r6,140(sp)
80087940:	d9c02517 	ldw	r7,148(sp)
80087944:	b8000005 	stb	zero,0(r23)
80087948:	20800044 	addi	r2,r4,1
8008794c:	30800015 	stw	r2,0(r6)
80087950:	3802aa26 	beq	r7,zero,800883fc <_dtoa_r+0x1178>
80087954:	3dc00015 	stw	r23,0(r7)
80087958:	d8800717 	ldw	r2,28(sp)
8008795c:	003e7906 	br	80087344 <_dtoa_r+0xc0>
80087960:	00800434 	movhi	r2,16
80087964:	10bfffc4 	addi	r2,r2,-1
80087968:	88a2703a 	and	r17,r17,r2
8008796c:	883e851e 	bne	r17,zero,80087384 <_dtoa_r+0x100>
80087970:	00a002b4 	movhi	r2,32778
80087974:	10b91804 	addi	r2,r2,-7072
80087978:	003e8406 	br	8008738c <_dtoa_r+0x108>
8008797c:	10c00204 	addi	r3,r2,8
80087980:	003e8706 	br	800873a0 <_dtoa_r+0x11c>
80087984:	01400434 	movhi	r5,16
80087988:	297fffc4 	addi	r5,r5,-1
8008798c:	994a703a 	and	r5,r19,r5
80087990:	9009883a 	mov	r4,r18
80087994:	843f0044 	addi	r16,r16,-1023
80087998:	294ffc34 	orhi	r5,r5,16368
8008799c:	dd800217 	ldw	r22,8(sp)
800879a0:	d8001115 	stw	zero,68(sp)
800879a4:	003ea506 	br	8008743c <_dtoa_r+0x1b8>
800879a8:	00a002b4 	movhi	r2,32778
800879ac:	10b86f04 	addi	r2,r2,-7748
800879b0:	003e6406 	br	80087344 <_dtoa_r+0xc0>
800879b4:	e0001115 	stw	zero,68(fp)
800879b8:	000b883a 	mov	r5,zero
800879bc:	e009883a 	mov	r4,fp
800879c0:	008a2800 	call	8008a280 <_Balloc>
800879c4:	01bfffc4 	movi	r6,-1
800879c8:	01c00044 	movi	r7,1
800879cc:	d8800715 	stw	r2,28(sp)
800879d0:	d9800c15 	stw	r6,48(sp)
800879d4:	e0801015 	stw	r2,64(fp)
800879d8:	d8000315 	stw	zero,12(sp)
800879dc:	d9c00b15 	stw	r7,44(sp)
800879e0:	d9800615 	stw	r6,24(sp)
800879e4:	d8002215 	stw	zero,136(sp)
800879e8:	d8800117 	ldw	r2,4(sp)
800879ec:	10008916 	blt	r2,zero,80087c14 <_dtoa_r+0x990>
800879f0:	d9000517 	ldw	r4,20(sp)
800879f4:	00c00384 	movi	r3,14
800879f8:	19008616 	blt	r3,r4,80087c14 <_dtoa_r+0x990>
800879fc:	200490fa 	slli	r2,r4,3
80087a00:	00e002b4 	movhi	r3,32778
80087a04:	d9802217 	ldw	r6,136(sp)
80087a08:	18f93604 	addi	r3,r3,-6952
80087a0c:	1885883a 	add	r2,r3,r2
80087a10:	14000017 	ldw	r16,0(r2)
80087a14:	14400117 	ldw	r17,4(r2)
80087a18:	30016316 	blt	r6,zero,80087fa8 <_dtoa_r+0xd24>
80087a1c:	800d883a 	mov	r6,r16
80087a20:	880f883a 	mov	r7,r17
80087a24:	9009883a 	mov	r4,r18
80087a28:	980b883a 	mov	r5,r19
80087a2c:	0096c600 	call	80096c60 <__divdf3>
80087a30:	180b883a 	mov	r5,r3
80087a34:	1009883a 	mov	r4,r2
80087a38:	00987b40 	call	800987b4 <__fixdfsi>
80087a3c:	1009883a 	mov	r4,r2
80087a40:	102b883a 	mov	r21,r2
80087a44:	00988340 	call	80098834 <__floatsidf>
80087a48:	800d883a 	mov	r6,r16
80087a4c:	880f883a 	mov	r7,r17
80087a50:	1009883a 	mov	r4,r2
80087a54:	180b883a 	mov	r5,r3
80087a58:	00977a00 	call	800977a0 <__muldf3>
80087a5c:	100d883a 	mov	r6,r2
80087a60:	180f883a 	mov	r7,r3
80087a64:	9009883a 	mov	r4,r18
80087a68:	980b883a 	mov	r5,r19
80087a6c:	0097eb80 	call	80097eb8 <__subdf3>
80087a70:	d9c00717 	ldw	r7,28(sp)
80087a74:	1009883a 	mov	r4,r2
80087a78:	a8800c04 	addi	r2,r21,48
80087a7c:	38800005 	stb	r2,0(r7)
80087a80:	3dc00044 	addi	r23,r7,1
80087a84:	d9c00617 	ldw	r7,24(sp)
80087a88:	01800044 	movi	r6,1
80087a8c:	180b883a 	mov	r5,r3
80087a90:	2005883a 	mov	r2,r4
80087a94:	39803826 	beq	r7,r6,80087b78 <_dtoa_r+0x8f4>
80087a98:	000d883a 	mov	r6,zero
80087a9c:	01d00934 	movhi	r7,16420
80087aa0:	00977a00 	call	800977a0 <__muldf3>
80087aa4:	000d883a 	mov	r6,zero
80087aa8:	000f883a 	mov	r7,zero
80087aac:	1009883a 	mov	r4,r2
80087ab0:	180b883a 	mov	r5,r3
80087ab4:	1025883a 	mov	r18,r2
80087ab8:	1827883a 	mov	r19,r3
80087abc:	00975480 	call	80097548 <__eqdf2>
80087ac0:	103f9a26 	beq	r2,zero,8008792c <_dtoa_r+0x6a8>
80087ac4:	d9c00617 	ldw	r7,24(sp)
80087ac8:	d8c00717 	ldw	r3,28(sp)
80087acc:	b829883a 	mov	r20,r23
80087ad0:	38bfffc4 	addi	r2,r7,-1
80087ad4:	18ad883a 	add	r22,r3,r2
80087ad8:	00000a06 	br	80087b04 <_dtoa_r+0x880>
80087adc:	00977a00 	call	800977a0 <__muldf3>
80087ae0:	000d883a 	mov	r6,zero
80087ae4:	000f883a 	mov	r7,zero
80087ae8:	1009883a 	mov	r4,r2
80087aec:	180b883a 	mov	r5,r3
80087af0:	1025883a 	mov	r18,r2
80087af4:	1827883a 	mov	r19,r3
80087af8:	b829883a 	mov	r20,r23
80087afc:	00975480 	call	80097548 <__eqdf2>
80087b00:	103f8a26 	beq	r2,zero,8008792c <_dtoa_r+0x6a8>
80087b04:	800d883a 	mov	r6,r16
80087b08:	880f883a 	mov	r7,r17
80087b0c:	9009883a 	mov	r4,r18
80087b10:	980b883a 	mov	r5,r19
80087b14:	0096c600 	call	80096c60 <__divdf3>
80087b18:	180b883a 	mov	r5,r3
80087b1c:	1009883a 	mov	r4,r2
80087b20:	00987b40 	call	800987b4 <__fixdfsi>
80087b24:	1009883a 	mov	r4,r2
80087b28:	102b883a 	mov	r21,r2
80087b2c:	00988340 	call	80098834 <__floatsidf>
80087b30:	800d883a 	mov	r6,r16
80087b34:	880f883a 	mov	r7,r17
80087b38:	1009883a 	mov	r4,r2
80087b3c:	180b883a 	mov	r5,r3
80087b40:	00977a00 	call	800977a0 <__muldf3>
80087b44:	100d883a 	mov	r6,r2
80087b48:	180f883a 	mov	r7,r3
80087b4c:	9009883a 	mov	r4,r18
80087b50:	980b883a 	mov	r5,r19
80087b54:	0097eb80 	call	80097eb8 <__subdf3>
80087b58:	aa000c04 	addi	r8,r21,48
80087b5c:	a2000005 	stb	r8,0(r20)
80087b60:	000d883a 	mov	r6,zero
80087b64:	01d00934 	movhi	r7,16420
80087b68:	1009883a 	mov	r4,r2
80087b6c:	180b883a 	mov	r5,r3
80087b70:	a5c00044 	addi	r23,r20,1
80087b74:	b53fd91e 	bne	r22,r20,80087adc <_dtoa_r+0x858>
80087b78:	100d883a 	mov	r6,r2
80087b7c:	180f883a 	mov	r7,r3
80087b80:	1009883a 	mov	r4,r2
80087b84:	180b883a 	mov	r5,r3
80087b88:	00963b40 	call	800963b4 <__adddf3>
80087b8c:	100d883a 	mov	r6,r2
80087b90:	180f883a 	mov	r7,r3
80087b94:	8009883a 	mov	r4,r16
80087b98:	880b883a 	mov	r5,r17
80087b9c:	1027883a 	mov	r19,r2
80087ba0:	1825883a 	mov	r18,r3
80087ba4:	00976ac0 	call	800976ac <__ledf2>
80087ba8:	10000816 	blt	r2,zero,80087bcc <_dtoa_r+0x948>
80087bac:	980d883a 	mov	r6,r19
80087bb0:	900f883a 	mov	r7,r18
80087bb4:	8009883a 	mov	r4,r16
80087bb8:	880b883a 	mov	r5,r17
80087bbc:	00975480 	call	80097548 <__eqdf2>
80087bc0:	103f5a1e 	bne	r2,zero,8008792c <_dtoa_r+0x6a8>
80087bc4:	ad40004c 	andi	r21,r21,1
80087bc8:	a83f5826 	beq	r21,zero,8008792c <_dtoa_r+0x6a8>
80087bcc:	bd3fffc3 	ldbu	r20,-1(r23)
80087bd0:	b8bfffc4 	addi	r2,r23,-1
80087bd4:	1007883a 	mov	r3,r2
80087bd8:	01400e44 	movi	r5,57
80087bdc:	d9800717 	ldw	r6,28(sp)
80087be0:	00000506 	br	80087bf8 <_dtoa_r+0x974>
80087be4:	18ffffc4 	addi	r3,r3,-1
80087be8:	11824726 	beq	r2,r6,80088508 <_dtoa_r+0x1284>
80087bec:	1d000003 	ldbu	r20,0(r3)
80087bf0:	102f883a 	mov	r23,r2
80087bf4:	10bfffc4 	addi	r2,r2,-1
80087bf8:	a1003fcc 	andi	r4,r20,255
80087bfc:	2100201c 	xori	r4,r4,128
80087c00:	213fe004 	addi	r4,r4,-128
80087c04:	217ff726 	beq	r4,r5,80087be4 <_dtoa_r+0x960>
80087c08:	a2000044 	addi	r8,r20,1
80087c0c:	12000005 	stb	r8,0(r2)
80087c10:	003f4606 	br	8008792c <_dtoa_r+0x6a8>
80087c14:	d9000b17 	ldw	r4,44(sp)
80087c18:	2000c826 	beq	r4,zero,80087f3c <_dtoa_r+0xcb8>
80087c1c:	d9800317 	ldw	r6,12(sp)
80087c20:	00c00044 	movi	r3,1
80087c24:	1980f90e 	bge	r3,r6,8008800c <_dtoa_r+0xd88>
80087c28:	d8800617 	ldw	r2,24(sp)
80087c2c:	d8c00a17 	ldw	r3,40(sp)
80087c30:	157fffc4 	addi	r21,r2,-1
80087c34:	1d41f316 	blt	r3,r21,80088404 <_dtoa_r+0x1180>
80087c38:	1d6bc83a 	sub	r21,r3,r21
80087c3c:	d9c00617 	ldw	r7,24(sp)
80087c40:	3802aa16 	blt	r7,zero,800886ec <_dtoa_r+0x1468>
80087c44:	dd000817 	ldw	r20,32(sp)
80087c48:	d8800617 	ldw	r2,24(sp)
80087c4c:	d8c00817 	ldw	r3,32(sp)
80087c50:	01400044 	movi	r5,1
80087c54:	e009883a 	mov	r4,fp
80087c58:	1887883a 	add	r3,r3,r2
80087c5c:	d8c00815 	stw	r3,32(sp)
80087c60:	b0ad883a 	add	r22,r22,r2
80087c64:	008a68c0 	call	8008a68c <__i2b>
80087c68:	1023883a 	mov	r17,r2
80087c6c:	a0000826 	beq	r20,zero,80087c90 <_dtoa_r+0xa0c>
80087c70:	0580070e 	bge	zero,r22,80087c90 <_dtoa_r+0xa0c>
80087c74:	a005883a 	mov	r2,r20
80087c78:	b500b916 	blt	r22,r20,80087f60 <_dtoa_r+0xcdc>
80087c7c:	d9000817 	ldw	r4,32(sp)
80087c80:	a0a9c83a 	sub	r20,r20,r2
80087c84:	b0adc83a 	sub	r22,r22,r2
80087c88:	2089c83a 	sub	r4,r4,r2
80087c8c:	d9000815 	stw	r4,32(sp)
80087c90:	d9800a17 	ldw	r6,40(sp)
80087c94:	0181810e 	bge	zero,r6,8008829c <_dtoa_r+0x1018>
80087c98:	d9c00b17 	ldw	r7,44(sp)
80087c9c:	3800b326 	beq	r7,zero,80087f6c <_dtoa_r+0xce8>
80087ca0:	a800b226 	beq	r21,zero,80087f6c <_dtoa_r+0xce8>
80087ca4:	880b883a 	mov	r5,r17
80087ca8:	a80d883a 	mov	r6,r21
80087cac:	e009883a 	mov	r4,fp
80087cb0:	008a8c00 	call	8008a8c0 <__pow5mult>
80087cb4:	d9800917 	ldw	r6,36(sp)
80087cb8:	100b883a 	mov	r5,r2
80087cbc:	e009883a 	mov	r4,fp
80087cc0:	1023883a 	mov	r17,r2
80087cc4:	008a6c80 	call	8008a6c8 <__multiply>
80087cc8:	1021883a 	mov	r16,r2
80087ccc:	d8800a17 	ldw	r2,40(sp)
80087cd0:	d9400917 	ldw	r5,36(sp)
80087cd4:	e009883a 	mov	r4,fp
80087cd8:	1545c83a 	sub	r2,r2,r21
80087cdc:	d8800a15 	stw	r2,40(sp)
80087ce0:	008a3280 	call	8008a328 <_Bfree>
80087ce4:	d8c00a17 	ldw	r3,40(sp)
80087ce8:	18009f1e 	bne	r3,zero,80087f68 <_dtoa_r+0xce4>
80087cec:	05c00044 	movi	r23,1
80087cf0:	e009883a 	mov	r4,fp
80087cf4:	b80b883a 	mov	r5,r23
80087cf8:	008a68c0 	call	8008a68c <__i2b>
80087cfc:	d9000d17 	ldw	r4,52(sp)
80087d00:	102b883a 	mov	r21,r2
80087d04:	2000ce26 	beq	r4,zero,80088040 <_dtoa_r+0xdbc>
80087d08:	200d883a 	mov	r6,r4
80087d0c:	100b883a 	mov	r5,r2
80087d10:	e009883a 	mov	r4,fp
80087d14:	008a8c00 	call	8008a8c0 <__pow5mult>
80087d18:	d9800317 	ldw	r6,12(sp)
80087d1c:	102b883a 	mov	r21,r2
80087d20:	b981810e 	bge	r23,r6,80088328 <_dtoa_r+0x10a4>
80087d24:	0027883a 	mov	r19,zero
80087d28:	a8800417 	ldw	r2,16(r21)
80087d2c:	05c00804 	movi	r23,32
80087d30:	10800104 	addi	r2,r2,4
80087d34:	1085883a 	add	r2,r2,r2
80087d38:	1085883a 	add	r2,r2,r2
80087d3c:	a885883a 	add	r2,r21,r2
80087d40:	11000017 	ldw	r4,0(r2)
80087d44:	008a5740 	call	8008a574 <__hi0bits>
80087d48:	b885c83a 	sub	r2,r23,r2
80087d4c:	1585883a 	add	r2,r2,r22
80087d50:	108007cc 	andi	r2,r2,31
80087d54:	1000b326 	beq	r2,zero,80088024 <_dtoa_r+0xda0>
80087d58:	00c00804 	movi	r3,32
80087d5c:	1887c83a 	sub	r3,r3,r2
80087d60:	01000104 	movi	r4,4
80087d64:	20c2cd0e 	bge	r4,r3,8008889c <_dtoa_r+0x1618>
80087d68:	00c00704 	movi	r3,28
80087d6c:	1885c83a 	sub	r2,r3,r2
80087d70:	d8c00817 	ldw	r3,32(sp)
80087d74:	a0a9883a 	add	r20,r20,r2
80087d78:	b0ad883a 	add	r22,r22,r2
80087d7c:	1887883a 	add	r3,r3,r2
80087d80:	d8c00815 	stw	r3,32(sp)
80087d84:	d9800817 	ldw	r6,32(sp)
80087d88:	0180040e 	bge	zero,r6,80087d9c <_dtoa_r+0xb18>
80087d8c:	800b883a 	mov	r5,r16
80087d90:	e009883a 	mov	r4,fp
80087d94:	008aa000 	call	8008aa00 <__lshift>
80087d98:	1021883a 	mov	r16,r2
80087d9c:	0580050e 	bge	zero,r22,80087db4 <_dtoa_r+0xb30>
80087da0:	a80b883a 	mov	r5,r21
80087da4:	b00d883a 	mov	r6,r22
80087da8:	e009883a 	mov	r4,fp
80087dac:	008aa000 	call	8008aa00 <__lshift>
80087db0:	102b883a 	mov	r21,r2
80087db4:	d9c00e17 	ldw	r7,56(sp)
80087db8:	3801211e 	bne	r7,zero,80088240 <_dtoa_r+0xfbc>
80087dbc:	d9800617 	ldw	r6,24(sp)
80087dc0:	0181380e 	bge	zero,r6,800882a4 <_dtoa_r+0x1020>
80087dc4:	d8c00b17 	ldw	r3,44(sp)
80087dc8:	1800ab1e 	bne	r3,zero,80088078 <_dtoa_r+0xdf4>
80087dcc:	dc800717 	ldw	r18,28(sp)
80087dd0:	dcc00617 	ldw	r19,24(sp)
80087dd4:	9029883a 	mov	r20,r18
80087dd8:	00000206 	br	80087de4 <_dtoa_r+0xb60>
80087ddc:	008a3500 	call	8008a350 <__multadd>
80087de0:	1021883a 	mov	r16,r2
80087de4:	a80b883a 	mov	r5,r21
80087de8:	8009883a 	mov	r4,r16
80087dec:	00870840 	call	80087084 <quorem>
80087df0:	10800c04 	addi	r2,r2,48
80087df4:	90800005 	stb	r2,0(r18)
80087df8:	94800044 	addi	r18,r18,1
80087dfc:	9507c83a 	sub	r3,r18,r20
80087e00:	000f883a 	mov	r7,zero
80087e04:	01800284 	movi	r6,10
80087e08:	800b883a 	mov	r5,r16
80087e0c:	e009883a 	mov	r4,fp
80087e10:	1cfff216 	blt	r3,r19,80087ddc <_dtoa_r+0xb58>
80087e14:	1011883a 	mov	r8,r2
80087e18:	d8800617 	ldw	r2,24(sp)
80087e1c:	0082370e 	bge	zero,r2,800886fc <_dtoa_r+0x1478>
80087e20:	d9000717 	ldw	r4,28(sp)
80087e24:	0025883a 	mov	r18,zero
80087e28:	20af883a 	add	r23,r4,r2
80087e2c:	01800044 	movi	r6,1
80087e30:	800b883a 	mov	r5,r16
80087e34:	e009883a 	mov	r4,fp
80087e38:	da001715 	stw	r8,92(sp)
80087e3c:	008aa000 	call	8008aa00 <__lshift>
80087e40:	a80b883a 	mov	r5,r21
80087e44:	1009883a 	mov	r4,r2
80087e48:	d8800915 	stw	r2,36(sp)
80087e4c:	008ab480 	call	8008ab48 <__mcmp>
80087e50:	da001717 	ldw	r8,92(sp)
80087e54:	0081800e 	bge	zero,r2,80088458 <_dtoa_r+0x11d4>
80087e58:	b93fffc3 	ldbu	r4,-1(r23)
80087e5c:	b8bfffc4 	addi	r2,r23,-1
80087e60:	1007883a 	mov	r3,r2
80087e64:	01800e44 	movi	r6,57
80087e68:	d9c00717 	ldw	r7,28(sp)
80087e6c:	00000506 	br	80087e84 <_dtoa_r+0xc00>
80087e70:	18ffffc4 	addi	r3,r3,-1
80087e74:	11c12326 	beq	r2,r7,80088304 <_dtoa_r+0x1080>
80087e78:	19000003 	ldbu	r4,0(r3)
80087e7c:	102f883a 	mov	r23,r2
80087e80:	10bfffc4 	addi	r2,r2,-1
80087e84:	21403fcc 	andi	r5,r4,255
80087e88:	2940201c 	xori	r5,r5,128
80087e8c:	297fe004 	addi	r5,r5,-128
80087e90:	29bff726 	beq	r5,r6,80087e70 <_dtoa_r+0xbec>
80087e94:	21000044 	addi	r4,r4,1
80087e98:	11000005 	stb	r4,0(r2)
80087e9c:	a80b883a 	mov	r5,r21
80087ea0:	e009883a 	mov	r4,fp
80087ea4:	008a3280 	call	8008a328 <_Bfree>
80087ea8:	883ea026 	beq	r17,zero,8008792c <_dtoa_r+0x6a8>
80087eac:	90000426 	beq	r18,zero,80087ec0 <_dtoa_r+0xc3c>
80087eb0:	94400326 	beq	r18,r17,80087ec0 <_dtoa_r+0xc3c>
80087eb4:	900b883a 	mov	r5,r18
80087eb8:	e009883a 	mov	r4,fp
80087ebc:	008a3280 	call	8008a328 <_Bfree>
80087ec0:	880b883a 	mov	r5,r17
80087ec4:	e009883a 	mov	r4,fp
80087ec8:	008a3280 	call	8008a328 <_Bfree>
80087ecc:	003e9706 	br	8008792c <_dtoa_r+0x6a8>
80087ed0:	01800044 	movi	r6,1
80087ed4:	d9800e15 	stw	r6,56(sp)
80087ed8:	003d9606 	br	80087534 <_dtoa_r+0x2b0>
80087edc:	d8800817 	ldw	r2,32(sp)
80087ee0:	d8c00517 	ldw	r3,20(sp)
80087ee4:	d8000d15 	stw	zero,52(sp)
80087ee8:	10c5c83a 	sub	r2,r2,r3
80087eec:	00c9c83a 	sub	r4,zero,r3
80087ef0:	d8800815 	stw	r2,32(sp)
80087ef4:	d9000a15 	stw	r4,40(sp)
80087ef8:	003d9706 	br	80087558 <_dtoa_r+0x2d4>
80087efc:	05adc83a 	sub	r22,zero,r22
80087f00:	dd800815 	stw	r22,32(sp)
80087f04:	002d883a 	mov	r22,zero
80087f08:	003d8e06 	br	80087544 <_dtoa_r+0x2c0>
80087f0c:	d9000517 	ldw	r4,20(sp)
80087f10:	00988340 	call	80098834 <__floatsidf>
80087f14:	100d883a 	mov	r6,r2
80087f18:	180f883a 	mov	r7,r3
80087f1c:	a009883a 	mov	r4,r20
80087f20:	880b883a 	mov	r5,r17
80087f24:	00975480 	call	80097548 <__eqdf2>
80087f28:	103d7126 	beq	r2,zero,800874f0 <_dtoa_r+0x26c>
80087f2c:	d9c00517 	ldw	r7,20(sp)
80087f30:	39ffffc4 	addi	r7,r7,-1
80087f34:	d9c00515 	stw	r7,20(sp)
80087f38:	003d6d06 	br	800874f0 <_dtoa_r+0x26c>
80087f3c:	dd400a17 	ldw	r21,40(sp)
80087f40:	dd000817 	ldw	r20,32(sp)
80087f44:	0023883a 	mov	r17,zero
80087f48:	003f4806 	br	80087c6c <_dtoa_r+0x9e8>
80087f4c:	10e3c83a 	sub	r17,r2,r3
80087f50:	9448983a 	sll	r4,r18,r17
80087f54:	003d3206 	br	80087420 <_dtoa_r+0x19c>
80087f58:	d8000e15 	stw	zero,56(sp)
80087f5c:	003d7506 	br	80087534 <_dtoa_r+0x2b0>
80087f60:	b005883a 	mov	r2,r22
80087f64:	003f4506 	br	80087c7c <_dtoa_r+0x9f8>
80087f68:	dc000915 	stw	r16,36(sp)
80087f6c:	d9800a17 	ldw	r6,40(sp)
80087f70:	d9400917 	ldw	r5,36(sp)
80087f74:	e009883a 	mov	r4,fp
80087f78:	008a8c00 	call	8008a8c0 <__pow5mult>
80087f7c:	1021883a 	mov	r16,r2
80087f80:	003f5a06 	br	80087cec <_dtoa_r+0xa68>
80087f84:	01c00044 	movi	r7,1
80087f88:	d9c00b15 	stw	r7,44(sp)
80087f8c:	d8802217 	ldw	r2,136(sp)
80087f90:	0081280e 	bge	zero,r2,80088434 <_dtoa_r+0x11b0>
80087f94:	100d883a 	mov	r6,r2
80087f98:	1021883a 	mov	r16,r2
80087f9c:	d8800c15 	stw	r2,48(sp)
80087fa0:	d8800615 	stw	r2,24(sp)
80087fa4:	003d8806 	br	800875c8 <_dtoa_r+0x344>
80087fa8:	d8800617 	ldw	r2,24(sp)
80087fac:	00be9b16 	blt	zero,r2,80087a1c <_dtoa_r+0x798>
80087fb0:	10010f1e 	bne	r2,zero,800883f0 <_dtoa_r+0x116c>
80087fb4:	880b883a 	mov	r5,r17
80087fb8:	000d883a 	mov	r6,zero
80087fbc:	01d00534 	movhi	r7,16404
80087fc0:	8009883a 	mov	r4,r16
80087fc4:	00977a00 	call	800977a0 <__muldf3>
80087fc8:	900d883a 	mov	r6,r18
80087fcc:	980f883a 	mov	r7,r19
80087fd0:	1009883a 	mov	r4,r2
80087fd4:	180b883a 	mov	r5,r3
80087fd8:	00975d00 	call	800975d0 <__gedf2>
80087fdc:	002b883a 	mov	r21,zero
80087fe0:	0023883a 	mov	r17,zero
80087fe4:	1000bf16 	blt	r2,zero,800882e4 <_dtoa_r+0x1060>
80087fe8:	d9802217 	ldw	r6,136(sp)
80087fec:	ddc00717 	ldw	r23,28(sp)
80087ff0:	018c303a 	nor	r6,zero,r6
80087ff4:	d9800515 	stw	r6,20(sp)
80087ff8:	a80b883a 	mov	r5,r21
80087ffc:	e009883a 	mov	r4,fp
80088000:	008a3280 	call	8008a328 <_Bfree>
80088004:	883e4926 	beq	r17,zero,8008792c <_dtoa_r+0x6a8>
80088008:	003fad06 	br	80087ec0 <_dtoa_r+0xc3c>
8008800c:	d9c01117 	ldw	r7,68(sp)
80088010:	3801bc26 	beq	r7,zero,80088704 <_dtoa_r+0x1480>
80088014:	10810cc4 	addi	r2,r2,1075
80088018:	dd400a17 	ldw	r21,40(sp)
8008801c:	dd000817 	ldw	r20,32(sp)
80088020:	003f0a06 	br	80087c4c <_dtoa_r+0x9c8>
80088024:	00800704 	movi	r2,28
80088028:	d9000817 	ldw	r4,32(sp)
8008802c:	a0a9883a 	add	r20,r20,r2
80088030:	b0ad883a 	add	r22,r22,r2
80088034:	2089883a 	add	r4,r4,r2
80088038:	d9000815 	stw	r4,32(sp)
8008803c:	003f5106 	br	80087d84 <_dtoa_r+0xb00>
80088040:	d8c00317 	ldw	r3,12(sp)
80088044:	b8c1fc0e 	bge	r23,r3,80088838 <_dtoa_r+0x15b4>
80088048:	0027883a 	mov	r19,zero
8008804c:	b805883a 	mov	r2,r23
80088050:	003f3e06 	br	80087d4c <_dtoa_r+0xac8>
80088054:	880b883a 	mov	r5,r17
80088058:	e009883a 	mov	r4,fp
8008805c:	000f883a 	mov	r7,zero
80088060:	01800284 	movi	r6,10
80088064:	008a3500 	call	8008a350 <__multadd>
80088068:	d9000c17 	ldw	r4,48(sp)
8008806c:	1023883a 	mov	r17,r2
80088070:	0102040e 	bge	zero,r4,80088884 <_dtoa_r+0x1600>
80088074:	d9000615 	stw	r4,24(sp)
80088078:	0500050e 	bge	zero,r20,80088090 <_dtoa_r+0xe0c>
8008807c:	880b883a 	mov	r5,r17
80088080:	a00d883a 	mov	r6,r20
80088084:	e009883a 	mov	r4,fp
80088088:	008aa000 	call	8008aa00 <__lshift>
8008808c:	1023883a 	mov	r17,r2
80088090:	9801241e 	bne	r19,zero,80088524 <_dtoa_r+0x12a0>
80088094:	8829883a 	mov	r20,r17
80088098:	d9000617 	ldw	r4,24(sp)
8008809c:	dcc00717 	ldw	r19,28(sp)
800880a0:	9480004c 	andi	r18,r18,1
800880a4:	20bfffc4 	addi	r2,r4,-1
800880a8:	9885883a 	add	r2,r19,r2
800880ac:	d8800415 	stw	r2,16(sp)
800880b0:	dc800615 	stw	r18,24(sp)
800880b4:	a80b883a 	mov	r5,r21
800880b8:	8009883a 	mov	r4,r16
800880bc:	00870840 	call	80087084 <quorem>
800880c0:	880b883a 	mov	r5,r17
800880c4:	8009883a 	mov	r4,r16
800880c8:	102f883a 	mov	r23,r2
800880cc:	008ab480 	call	8008ab48 <__mcmp>
800880d0:	a80b883a 	mov	r5,r21
800880d4:	a00d883a 	mov	r6,r20
800880d8:	e009883a 	mov	r4,fp
800880dc:	102d883a 	mov	r22,r2
800880e0:	008aba80 	call	8008aba8 <__mdiff>
800880e4:	1007883a 	mov	r3,r2
800880e8:	10800317 	ldw	r2,12(r2)
800880ec:	bc800c04 	addi	r18,r23,48
800880f0:	180b883a 	mov	r5,r3
800880f4:	10004e1e 	bne	r2,zero,80088230 <_dtoa_r+0xfac>
800880f8:	8009883a 	mov	r4,r16
800880fc:	d8c01615 	stw	r3,88(sp)
80088100:	008ab480 	call	8008ab48 <__mcmp>
80088104:	d8c01617 	ldw	r3,88(sp)
80088108:	e009883a 	mov	r4,fp
8008810c:	d8801615 	stw	r2,88(sp)
80088110:	180b883a 	mov	r5,r3
80088114:	008a3280 	call	8008a328 <_Bfree>
80088118:	d8801617 	ldw	r2,88(sp)
8008811c:	1000041e 	bne	r2,zero,80088130 <_dtoa_r+0xeac>
80088120:	d9800317 	ldw	r6,12(sp)
80088124:	3000021e 	bne	r6,zero,80088130 <_dtoa_r+0xeac>
80088128:	d8c00617 	ldw	r3,24(sp)
8008812c:	18003726 	beq	r3,zero,8008820c <_dtoa_r+0xf88>
80088130:	b0002016 	blt	r22,zero,800881b4 <_dtoa_r+0xf30>
80088134:	b000041e 	bne	r22,zero,80088148 <_dtoa_r+0xec4>
80088138:	d9000317 	ldw	r4,12(sp)
8008813c:	2000021e 	bne	r4,zero,80088148 <_dtoa_r+0xec4>
80088140:	d8c00617 	ldw	r3,24(sp)
80088144:	18001b26 	beq	r3,zero,800881b4 <_dtoa_r+0xf30>
80088148:	00810716 	blt	zero,r2,80088568 <_dtoa_r+0x12e4>
8008814c:	d8c00417 	ldw	r3,16(sp)
80088150:	9d800044 	addi	r22,r19,1
80088154:	9c800005 	stb	r18,0(r19)
80088158:	b02f883a 	mov	r23,r22
8008815c:	98c10626 	beq	r19,r3,80088578 <_dtoa_r+0x12f4>
80088160:	800b883a 	mov	r5,r16
80088164:	000f883a 	mov	r7,zero
80088168:	01800284 	movi	r6,10
8008816c:	e009883a 	mov	r4,fp
80088170:	008a3500 	call	8008a350 <__multadd>
80088174:	1021883a 	mov	r16,r2
80088178:	000f883a 	mov	r7,zero
8008817c:	01800284 	movi	r6,10
80088180:	880b883a 	mov	r5,r17
80088184:	e009883a 	mov	r4,fp
80088188:	8d002526 	beq	r17,r20,80088220 <_dtoa_r+0xf9c>
8008818c:	008a3500 	call	8008a350 <__multadd>
80088190:	a00b883a 	mov	r5,r20
80088194:	000f883a 	mov	r7,zero
80088198:	01800284 	movi	r6,10
8008819c:	e009883a 	mov	r4,fp
800881a0:	1023883a 	mov	r17,r2
800881a4:	008a3500 	call	8008a350 <__multadd>
800881a8:	1029883a 	mov	r20,r2
800881ac:	b027883a 	mov	r19,r22
800881b0:	003fc006 	br	800880b4 <_dtoa_r+0xe30>
800881b4:	9011883a 	mov	r8,r18
800881b8:	00800e0e 	bge	zero,r2,800881f4 <_dtoa_r+0xf70>
800881bc:	800b883a 	mov	r5,r16
800881c0:	01800044 	movi	r6,1
800881c4:	e009883a 	mov	r4,fp
800881c8:	da001715 	stw	r8,92(sp)
800881cc:	008aa000 	call	8008aa00 <__lshift>
800881d0:	a80b883a 	mov	r5,r21
800881d4:	1009883a 	mov	r4,r2
800881d8:	1021883a 	mov	r16,r2
800881dc:	008ab480 	call	8008ab48 <__mcmp>
800881e0:	da001717 	ldw	r8,92(sp)
800881e4:	0081960e 	bge	zero,r2,80088840 <_dtoa_r+0x15bc>
800881e8:	00800e44 	movi	r2,57
800881ec:	40817026 	beq	r8,r2,800887b0 <_dtoa_r+0x152c>
800881f0:	ba000c44 	addi	r8,r23,49
800881f4:	8825883a 	mov	r18,r17
800881f8:	9dc00044 	addi	r23,r19,1
800881fc:	9a000005 	stb	r8,0(r19)
80088200:	a023883a 	mov	r17,r20
80088204:	dc000915 	stw	r16,36(sp)
80088208:	003f2406 	br	80087e9c <_dtoa_r+0xc18>
8008820c:	00800e44 	movi	r2,57
80088210:	9011883a 	mov	r8,r18
80088214:	90816626 	beq	r18,r2,800887b0 <_dtoa_r+0x152c>
80088218:	05bff516 	blt	zero,r22,800881f0 <_dtoa_r+0xf6c>
8008821c:	003ff506 	br	800881f4 <_dtoa_r+0xf70>
80088220:	008a3500 	call	8008a350 <__multadd>
80088224:	1023883a 	mov	r17,r2
80088228:	1029883a 	mov	r20,r2
8008822c:	003fdf06 	br	800881ac <_dtoa_r+0xf28>
80088230:	e009883a 	mov	r4,fp
80088234:	008a3280 	call	8008a328 <_Bfree>
80088238:	00800044 	movi	r2,1
8008823c:	003fbc06 	br	80088130 <_dtoa_r+0xeac>
80088240:	a80b883a 	mov	r5,r21
80088244:	8009883a 	mov	r4,r16
80088248:	008ab480 	call	8008ab48 <__mcmp>
8008824c:	103edb0e 	bge	r2,zero,80087dbc <_dtoa_r+0xb38>
80088250:	800b883a 	mov	r5,r16
80088254:	000f883a 	mov	r7,zero
80088258:	01800284 	movi	r6,10
8008825c:	e009883a 	mov	r4,fp
80088260:	008a3500 	call	8008a350 <__multadd>
80088264:	1021883a 	mov	r16,r2
80088268:	d8800517 	ldw	r2,20(sp)
8008826c:	d8c00b17 	ldw	r3,44(sp)
80088270:	10bfffc4 	addi	r2,r2,-1
80088274:	d8800515 	stw	r2,20(sp)
80088278:	183f761e 	bne	r3,zero,80088054 <_dtoa_r+0xdd0>
8008827c:	d9000c17 	ldw	r4,48(sp)
80088280:	0101730e 	bge	zero,r4,80088850 <_dtoa_r+0x15cc>
80088284:	d9000615 	stw	r4,24(sp)
80088288:	003ed006 	br	80087dcc <_dtoa_r+0xb48>
8008828c:	00800084 	movi	r2,2
80088290:	3081861e 	bne	r6,r2,800888ac <_dtoa_r+0x1628>
80088294:	d8000b15 	stw	zero,44(sp)
80088298:	003f3c06 	br	80087f8c <_dtoa_r+0xd08>
8008829c:	dc000917 	ldw	r16,36(sp)
800882a0:	003e9206 	br	80087cec <_dtoa_r+0xa68>
800882a4:	d9c00317 	ldw	r7,12(sp)
800882a8:	00800084 	movi	r2,2
800882ac:	11fec50e 	bge	r2,r7,80087dc4 <_dtoa_r+0xb40>
800882b0:	d9000617 	ldw	r4,24(sp)
800882b4:	20013c1e 	bne	r4,zero,800887a8 <_dtoa_r+0x1524>
800882b8:	a80b883a 	mov	r5,r21
800882bc:	000f883a 	mov	r7,zero
800882c0:	01800144 	movi	r6,5
800882c4:	e009883a 	mov	r4,fp
800882c8:	008a3500 	call	8008a350 <__multadd>
800882cc:	100b883a 	mov	r5,r2
800882d0:	8009883a 	mov	r4,r16
800882d4:	102b883a 	mov	r21,r2
800882d8:	008ab480 	call	8008ab48 <__mcmp>
800882dc:	dc000915 	stw	r16,36(sp)
800882e0:	00bf410e 	bge	zero,r2,80087fe8 <_dtoa_r+0xd64>
800882e4:	d9c00717 	ldw	r7,28(sp)
800882e8:	00800c44 	movi	r2,49
800882ec:	38800005 	stb	r2,0(r7)
800882f0:	d8800517 	ldw	r2,20(sp)
800882f4:	3dc00044 	addi	r23,r7,1
800882f8:	10800044 	addi	r2,r2,1
800882fc:	d8800515 	stw	r2,20(sp)
80088300:	003f3d06 	br	80087ff8 <_dtoa_r+0xd74>
80088304:	d9800517 	ldw	r6,20(sp)
80088308:	d9c00717 	ldw	r7,28(sp)
8008830c:	00800c44 	movi	r2,49
80088310:	31800044 	addi	r6,r6,1
80088314:	d9800515 	stw	r6,20(sp)
80088318:	38800005 	stb	r2,0(r7)
8008831c:	003edf06 	br	80087e9c <_dtoa_r+0xc18>
80088320:	d8000b15 	stw	zero,44(sp)
80088324:	003c9f06 	br	800875a4 <_dtoa_r+0x320>
80088328:	903e7e1e 	bne	r18,zero,80087d24 <_dtoa_r+0xaa0>
8008832c:	00800434 	movhi	r2,16
80088330:	10bfffc4 	addi	r2,r2,-1
80088334:	9884703a 	and	r2,r19,r2
80088338:	1000ea1e 	bne	r2,zero,800886e4 <_dtoa_r+0x1460>
8008833c:	9cdffc2c 	andhi	r19,r19,32752
80088340:	9800e826 	beq	r19,zero,800886e4 <_dtoa_r+0x1460>
80088344:	d9c00817 	ldw	r7,32(sp)
80088348:	b5800044 	addi	r22,r22,1
8008834c:	04c00044 	movi	r19,1
80088350:	39c00044 	addi	r7,r7,1
80088354:	d9c00815 	stw	r7,32(sp)
80088358:	d8800d17 	ldw	r2,52(sp)
8008835c:	103e721e 	bne	r2,zero,80087d28 <_dtoa_r+0xaa4>
80088360:	00800044 	movi	r2,1
80088364:	003e7906 	br	80087d4c <_dtoa_r+0xac8>
80088368:	8009883a 	mov	r4,r16
8008836c:	00988340 	call	80098834 <__floatsidf>
80088370:	d9800f17 	ldw	r6,60(sp)
80088374:	d9c01017 	ldw	r7,64(sp)
80088378:	1009883a 	mov	r4,r2
8008837c:	180b883a 	mov	r5,r3
80088380:	00977a00 	call	800977a0 <__muldf3>
80088384:	000d883a 	mov	r6,zero
80088388:	01d00734 	movhi	r7,16412
8008838c:	1009883a 	mov	r4,r2
80088390:	180b883a 	mov	r5,r3
80088394:	00963b40 	call	800963b4 <__adddf3>
80088398:	047f3034 	movhi	r17,64704
8008839c:	1021883a 	mov	r16,r2
800883a0:	1c63883a 	add	r17,r3,r17
800883a4:	d9000f17 	ldw	r4,60(sp)
800883a8:	d9401017 	ldw	r5,64(sp)
800883ac:	000d883a 	mov	r6,zero
800883b0:	01d00534 	movhi	r7,16404
800883b4:	0097eb80 	call	80097eb8 <__subdf3>
800883b8:	800d883a 	mov	r6,r16
800883bc:	880f883a 	mov	r7,r17
800883c0:	1009883a 	mov	r4,r2
800883c4:	180b883a 	mov	r5,r3
800883c8:	102b883a 	mov	r21,r2
800883cc:	1829883a 	mov	r20,r3
800883d0:	00975d00 	call	800975d0 <__gedf2>
800883d4:	00806c16 	blt	zero,r2,80088588 <_dtoa_r+0x1304>
800883d8:	89e0003c 	xorhi	r7,r17,32768
800883dc:	800d883a 	mov	r6,r16
800883e0:	a809883a 	mov	r4,r21
800883e4:	a00b883a 	mov	r5,r20
800883e8:	00976ac0 	call	800976ac <__ledf2>
800883ec:	103d7e0e 	bge	r2,zero,800879e8 <_dtoa_r+0x764>
800883f0:	002b883a 	mov	r21,zero
800883f4:	0023883a 	mov	r17,zero
800883f8:	003efb06 	br	80087fe8 <_dtoa_r+0xd64>
800883fc:	d8800717 	ldw	r2,28(sp)
80088400:	003bd006 	br	80087344 <_dtoa_r+0xc0>
80088404:	d9000a17 	ldw	r4,40(sp)
80088408:	d9800d17 	ldw	r6,52(sp)
8008840c:	dd400a15 	stw	r21,40(sp)
80088410:	a905c83a 	sub	r2,r21,r4
80088414:	308d883a 	add	r6,r6,r2
80088418:	d9800d15 	stw	r6,52(sp)
8008841c:	002b883a 	mov	r21,zero
80088420:	003e0606 	br	80087c3c <_dtoa_r+0x9b8>
80088424:	9023883a 	mov	r17,r18
80088428:	9829883a 	mov	r20,r19
8008842c:	04000084 	movi	r16,2
80088430:	003c9206 	br	8008767c <_dtoa_r+0x3f8>
80088434:	04000044 	movi	r16,1
80088438:	dc000c15 	stw	r16,48(sp)
8008843c:	dc000615 	stw	r16,24(sp)
80088440:	dc002215 	stw	r16,136(sp)
80088444:	e0001115 	stw	zero,68(fp)
80088448:	000b883a 	mov	r5,zero
8008844c:	003c6906 	br	800875f4 <_dtoa_r+0x370>
80088450:	3021883a 	mov	r16,r6
80088454:	003ffb06 	br	80088444 <_dtoa_r+0x11c0>
80088458:	1000021e 	bne	r2,zero,80088464 <_dtoa_r+0x11e0>
8008845c:	4200004c 	andi	r8,r8,1
80088460:	403e7d1e 	bne	r8,zero,80087e58 <_dtoa_r+0xbd4>
80088464:	01000c04 	movi	r4,48
80088468:	00000106 	br	80088470 <_dtoa_r+0x11ec>
8008846c:	102f883a 	mov	r23,r2
80088470:	b8bfffc4 	addi	r2,r23,-1
80088474:	10c00007 	ldb	r3,0(r2)
80088478:	193ffc26 	beq	r3,r4,8008846c <_dtoa_r+0x11e8>
8008847c:	003e8706 	br	80087e9c <_dtoa_r+0xc18>
80088480:	d8800517 	ldw	r2,20(sp)
80088484:	00a3c83a 	sub	r17,zero,r2
80088488:	8800a426 	beq	r17,zero,8008871c <_dtoa_r+0x1498>
8008848c:	888003cc 	andi	r2,r17,15
80088490:	100490fa 	slli	r2,r2,3
80088494:	00e002b4 	movhi	r3,32778
80088498:	18f93604 	addi	r3,r3,-6952
8008849c:	1885883a 	add	r2,r3,r2
800884a0:	11800017 	ldw	r6,0(r2)
800884a4:	11c00117 	ldw	r7,4(r2)
800884a8:	9009883a 	mov	r4,r18
800884ac:	980b883a 	mov	r5,r19
800884b0:	8823d13a 	srai	r17,r17,4
800884b4:	00977a00 	call	800977a0 <__muldf3>
800884b8:	d8800f15 	stw	r2,60(sp)
800884bc:	d8c01015 	stw	r3,64(sp)
800884c0:	8800e826 	beq	r17,zero,80088864 <_dtoa_r+0x15e0>
800884c4:	052002b4 	movhi	r20,32778
800884c8:	a5392c04 	addi	r20,r20,-6992
800884cc:	04000084 	movi	r16,2
800884d0:	8980004c 	andi	r6,r17,1
800884d4:	1009883a 	mov	r4,r2
800884d8:	8823d07a 	srai	r17,r17,1
800884dc:	180b883a 	mov	r5,r3
800884e0:	30000426 	beq	r6,zero,800884f4 <_dtoa_r+0x1270>
800884e4:	a1800017 	ldw	r6,0(r20)
800884e8:	a1c00117 	ldw	r7,4(r20)
800884ec:	84000044 	addi	r16,r16,1
800884f0:	00977a00 	call	800977a0 <__muldf3>
800884f4:	a5000204 	addi	r20,r20,8
800884f8:	883ff51e 	bne	r17,zero,800884d0 <_dtoa_r+0x124c>
800884fc:	d8800f15 	stw	r2,60(sp)
80088500:	d8c01015 	stw	r3,64(sp)
80088504:	003c7606 	br	800876e0 <_dtoa_r+0x45c>
80088508:	00c00c04 	movi	r3,48
8008850c:	10c00005 	stb	r3,0(r2)
80088510:	d8c00517 	ldw	r3,20(sp)
80088514:	bd3fffc3 	ldbu	r20,-1(r23)
80088518:	18c00044 	addi	r3,r3,1
8008851c:	d8c00515 	stw	r3,20(sp)
80088520:	003db906 	br	80087c08 <_dtoa_r+0x984>
80088524:	89400117 	ldw	r5,4(r17)
80088528:	e009883a 	mov	r4,fp
8008852c:	008a2800 	call	8008a280 <_Balloc>
80088530:	89800417 	ldw	r6,16(r17)
80088534:	89400304 	addi	r5,r17,12
80088538:	11000304 	addi	r4,r2,12
8008853c:	31800084 	addi	r6,r6,2
80088540:	318d883a 	add	r6,r6,r6
80088544:	318d883a 	add	r6,r6,r6
80088548:	1027883a 	mov	r19,r2
8008854c:	0082da40 	call	80082da4 <memcpy>
80088550:	01800044 	movi	r6,1
80088554:	980b883a 	mov	r5,r19
80088558:	e009883a 	mov	r4,fp
8008855c:	008aa000 	call	8008aa00 <__lshift>
80088560:	1029883a 	mov	r20,r2
80088564:	003ecc06 	br	80088098 <_dtoa_r+0xe14>
80088568:	00800e44 	movi	r2,57
8008856c:	90809026 	beq	r18,r2,800887b0 <_dtoa_r+0x152c>
80088570:	92000044 	addi	r8,r18,1
80088574:	003f1f06 	br	800881f4 <_dtoa_r+0xf70>
80088578:	9011883a 	mov	r8,r18
8008857c:	8825883a 	mov	r18,r17
80088580:	a023883a 	mov	r17,r20
80088584:	003e2906 	br	80087e2c <_dtoa_r+0xba8>
80088588:	002b883a 	mov	r21,zero
8008858c:	0023883a 	mov	r17,zero
80088590:	003f5406 	br	800882e4 <_dtoa_r+0x1060>
80088594:	61bfffc4 	addi	r6,r12,-1
80088598:	300490fa 	slli	r2,r6,3
8008859c:	00e002b4 	movhi	r3,32778
800885a0:	18f93604 	addi	r3,r3,-6952
800885a4:	1885883a 	add	r2,r3,r2
800885a8:	11000017 	ldw	r4,0(r2)
800885ac:	11400117 	ldw	r5,4(r2)
800885b0:	d8800717 	ldw	r2,28(sp)
800885b4:	880f883a 	mov	r7,r17
800885b8:	d9801215 	stw	r6,72(sp)
800885bc:	800d883a 	mov	r6,r16
800885c0:	db001615 	stw	r12,88(sp)
800885c4:	15c00044 	addi	r23,r2,1
800885c8:	00977a00 	call	800977a0 <__muldf3>
800885cc:	d9401017 	ldw	r5,64(sp)
800885d0:	d9000f17 	ldw	r4,60(sp)
800885d4:	d8c01515 	stw	r3,84(sp)
800885d8:	d8801415 	stw	r2,80(sp)
800885dc:	00987b40 	call	800987b4 <__fixdfsi>
800885e0:	1009883a 	mov	r4,r2
800885e4:	1021883a 	mov	r16,r2
800885e8:	00988340 	call	80098834 <__floatsidf>
800885ec:	d9000f17 	ldw	r4,60(sp)
800885f0:	d9401017 	ldw	r5,64(sp)
800885f4:	100d883a 	mov	r6,r2
800885f8:	180f883a 	mov	r7,r3
800885fc:	0097eb80 	call	80097eb8 <__subdf3>
80088600:	1829883a 	mov	r20,r3
80088604:	d8c00717 	ldw	r3,28(sp)
80088608:	84000c04 	addi	r16,r16,48
8008860c:	1023883a 	mov	r17,r2
80088610:	1c000005 	stb	r16,0(r3)
80088614:	db001617 	ldw	r12,88(sp)
80088618:	00800044 	movi	r2,1
8008861c:	60802226 	beq	r12,r2,800886a8 <_dtoa_r+0x1424>
80088620:	d9c00717 	ldw	r7,28(sp)
80088624:	8805883a 	mov	r2,r17
80088628:	b82b883a 	mov	r21,r23
8008862c:	3b19883a 	add	r12,r7,r12
80088630:	6023883a 	mov	r17,r12
80088634:	a007883a 	mov	r3,r20
80088638:	dc800f15 	stw	r18,60(sp)
8008863c:	000d883a 	mov	r6,zero
80088640:	01d00934 	movhi	r7,16420
80088644:	1009883a 	mov	r4,r2
80088648:	180b883a 	mov	r5,r3
8008864c:	00977a00 	call	800977a0 <__muldf3>
80088650:	180b883a 	mov	r5,r3
80088654:	1009883a 	mov	r4,r2
80088658:	1829883a 	mov	r20,r3
8008865c:	1025883a 	mov	r18,r2
80088660:	00987b40 	call	800987b4 <__fixdfsi>
80088664:	1009883a 	mov	r4,r2
80088668:	1021883a 	mov	r16,r2
8008866c:	00988340 	call	80098834 <__floatsidf>
80088670:	100d883a 	mov	r6,r2
80088674:	180f883a 	mov	r7,r3
80088678:	9009883a 	mov	r4,r18
8008867c:	a00b883a 	mov	r5,r20
80088680:	84000c04 	addi	r16,r16,48
80088684:	0097eb80 	call	80097eb8 <__subdf3>
80088688:	ad400044 	addi	r21,r21,1
8008868c:	ac3fffc5 	stb	r16,-1(r21)
80088690:	ac7fea1e 	bne	r21,r17,8008863c <_dtoa_r+0x13b8>
80088694:	1023883a 	mov	r17,r2
80088698:	d8801217 	ldw	r2,72(sp)
8008869c:	dc800f17 	ldw	r18,60(sp)
800886a0:	1829883a 	mov	r20,r3
800886a4:	b8af883a 	add	r23,r23,r2
800886a8:	d9001417 	ldw	r4,80(sp)
800886ac:	d9401517 	ldw	r5,84(sp)
800886b0:	000d883a 	mov	r6,zero
800886b4:	01cff834 	movhi	r7,16352
800886b8:	00963b40 	call	800963b4 <__adddf3>
800886bc:	880d883a 	mov	r6,r17
800886c0:	a00f883a 	mov	r7,r20
800886c4:	1009883a 	mov	r4,r2
800886c8:	180b883a 	mov	r5,r3
800886cc:	00976ac0 	call	800976ac <__ledf2>
800886d0:	10003e0e 	bge	r2,zero,800887cc <_dtoa_r+0x1548>
800886d4:	d9001317 	ldw	r4,76(sp)
800886d8:	bd3fffc3 	ldbu	r20,-1(r23)
800886dc:	d9000515 	stw	r4,20(sp)
800886e0:	003d3b06 	br	80087bd0 <_dtoa_r+0x94c>
800886e4:	0027883a 	mov	r19,zero
800886e8:	003f1b06 	br	80088358 <_dtoa_r+0x10d4>
800886ec:	d8800817 	ldw	r2,32(sp)
800886f0:	11e9c83a 	sub	r20,r2,r7
800886f4:	0005883a 	mov	r2,zero
800886f8:	003d5406 	br	80087c4c <_dtoa_r+0x9c8>
800886fc:	00800044 	movi	r2,1
80088700:	003dc706 	br	80087e20 <_dtoa_r+0xb9c>
80088704:	d8c00217 	ldw	r3,8(sp)
80088708:	00800d84 	movi	r2,54
8008870c:	dd400a17 	ldw	r21,40(sp)
80088710:	10c5c83a 	sub	r2,r2,r3
80088714:	dd000817 	ldw	r20,32(sp)
80088718:	003d4c06 	br	80087c4c <_dtoa_r+0x9c8>
8008871c:	dc800f15 	stw	r18,60(sp)
80088720:	dcc01015 	stw	r19,64(sp)
80088724:	04000084 	movi	r16,2
80088728:	003bed06 	br	800876e0 <_dtoa_r+0x45c>
8008872c:	d9000617 	ldw	r4,24(sp)
80088730:	203f0d26 	beq	r4,zero,80088368 <_dtoa_r+0x10e4>
80088734:	d9800c17 	ldw	r6,48(sp)
80088738:	01bcab0e 	bge	zero,r6,800879e8 <_dtoa_r+0x764>
8008873c:	d9401017 	ldw	r5,64(sp)
80088740:	d9000f17 	ldw	r4,60(sp)
80088744:	000d883a 	mov	r6,zero
80088748:	01d00934 	movhi	r7,16420
8008874c:	00977a00 	call	800977a0 <__muldf3>
80088750:	81000044 	addi	r4,r16,1
80088754:	d8800f15 	stw	r2,60(sp)
80088758:	d8c01015 	stw	r3,64(sp)
8008875c:	00988340 	call	80098834 <__floatsidf>
80088760:	d9800f17 	ldw	r6,60(sp)
80088764:	d9c01017 	ldw	r7,64(sp)
80088768:	1009883a 	mov	r4,r2
8008876c:	180b883a 	mov	r5,r3
80088770:	00977a00 	call	800977a0 <__muldf3>
80088774:	01d00734 	movhi	r7,16412
80088778:	000d883a 	mov	r6,zero
8008877c:	1009883a 	mov	r4,r2
80088780:	180b883a 	mov	r5,r3
80088784:	00963b40 	call	800963b4 <__adddf3>
80088788:	d9c00517 	ldw	r7,20(sp)
8008878c:	047f3034 	movhi	r17,64704
80088790:	1021883a 	mov	r16,r2
80088794:	39ffffc4 	addi	r7,r7,-1
80088798:	d9c01315 	stw	r7,76(sp)
8008879c:	1c63883a 	add	r17,r3,r17
800887a0:	db000c17 	ldw	r12,48(sp)
800887a4:	003bea06 	br	80087750 <_dtoa_r+0x4cc>
800887a8:	dc000915 	stw	r16,36(sp)
800887ac:	003e0e06 	br	80087fe8 <_dtoa_r+0xd64>
800887b0:	01000e44 	movi	r4,57
800887b4:	8825883a 	mov	r18,r17
800887b8:	9dc00044 	addi	r23,r19,1
800887bc:	99000005 	stb	r4,0(r19)
800887c0:	a023883a 	mov	r17,r20
800887c4:	dc000915 	stw	r16,36(sp)
800887c8:	003da406 	br	80087e5c <_dtoa_r+0xbd8>
800887cc:	d9801417 	ldw	r6,80(sp)
800887d0:	d9c01517 	ldw	r7,84(sp)
800887d4:	0009883a 	mov	r4,zero
800887d8:	014ff834 	movhi	r5,16352
800887dc:	0097eb80 	call	80097eb8 <__subdf3>
800887e0:	880d883a 	mov	r6,r17
800887e4:	a00f883a 	mov	r7,r20
800887e8:	1009883a 	mov	r4,r2
800887ec:	180b883a 	mov	r5,r3
800887f0:	00975d00 	call	800975d0 <__gedf2>
800887f4:	00bc7c0e 	bge	zero,r2,800879e8 <_dtoa_r+0x764>
800887f8:	01000c04 	movi	r4,48
800887fc:	00000106 	br	80088804 <_dtoa_r+0x1580>
80088800:	102f883a 	mov	r23,r2
80088804:	b8bfffc4 	addi	r2,r23,-1
80088808:	10c00007 	ldb	r3,0(r2)
8008880c:	193ffc26 	beq	r3,r4,80088800 <_dtoa_r+0x157c>
80088810:	d9801317 	ldw	r6,76(sp)
80088814:	d9800515 	stw	r6,20(sp)
80088818:	003c4406 	br	8008792c <_dtoa_r+0x6a8>
8008881c:	d9801317 	ldw	r6,76(sp)
80088820:	d9800515 	stw	r6,20(sp)
80088824:	003cea06 	br	80087bd0 <_dtoa_r+0x94c>
80088828:	dd800f17 	ldw	r22,60(sp)
8008882c:	dcc01017 	ldw	r19,64(sp)
80088830:	dc801217 	ldw	r18,72(sp)
80088834:	003c6c06 	br	800879e8 <_dtoa_r+0x764>
80088838:	903e031e 	bne	r18,zero,80088048 <_dtoa_r+0xdc4>
8008883c:	003ebb06 	br	8008832c <_dtoa_r+0x10a8>
80088840:	103e6c1e 	bne	r2,zero,800881f4 <_dtoa_r+0xf70>
80088844:	4080004c 	andi	r2,r8,1
80088848:	103e6a26 	beq	r2,zero,800881f4 <_dtoa_r+0xf70>
8008884c:	003e6606 	br	800881e8 <_dtoa_r+0xf64>
80088850:	d8c00317 	ldw	r3,12(sp)
80088854:	00800084 	movi	r2,2
80088858:	10c02916 	blt	r2,r3,80088900 <_dtoa_r+0x167c>
8008885c:	d9000c17 	ldw	r4,48(sp)
80088860:	003e8806 	br	80088284 <_dtoa_r+0x1000>
80088864:	04000084 	movi	r16,2
80088868:	003b9d06 	br	800876e0 <_dtoa_r+0x45c>
8008886c:	d9001317 	ldw	r4,76(sp)
80088870:	d9000515 	stw	r4,20(sp)
80088874:	003cd606 	br	80087bd0 <_dtoa_r+0x94c>
80088878:	d8801317 	ldw	r2,76(sp)
8008887c:	d8800515 	stw	r2,20(sp)
80088880:	003c2a06 	br	8008792c <_dtoa_r+0x6a8>
80088884:	d9800317 	ldw	r6,12(sp)
80088888:	00800084 	movi	r2,2
8008888c:	11801516 	blt	r2,r6,800888e4 <_dtoa_r+0x1660>
80088890:	d9c00c17 	ldw	r7,48(sp)
80088894:	d9c00615 	stw	r7,24(sp)
80088898:	003df706 	br	80088078 <_dtoa_r+0xdf4>
8008889c:	193d3926 	beq	r3,r4,80087d84 <_dtoa_r+0xb00>
800888a0:	00c00f04 	movi	r3,60
800888a4:	1885c83a 	sub	r2,r3,r2
800888a8:	003ddf06 	br	80088028 <_dtoa_r+0xda4>
800888ac:	e009883a 	mov	r4,fp
800888b0:	e0001115 	stw	zero,68(fp)
800888b4:	000b883a 	mov	r5,zero
800888b8:	008a2800 	call	8008a280 <_Balloc>
800888bc:	d8800715 	stw	r2,28(sp)
800888c0:	d8c00717 	ldw	r3,28(sp)
800888c4:	00bfffc4 	movi	r2,-1
800888c8:	01000044 	movi	r4,1
800888cc:	d8800c15 	stw	r2,48(sp)
800888d0:	e0c01015 	stw	r3,64(fp)
800888d4:	d9000b15 	stw	r4,44(sp)
800888d8:	d8800615 	stw	r2,24(sp)
800888dc:	d8002215 	stw	zero,136(sp)
800888e0:	003c4106 	br	800879e8 <_dtoa_r+0x764>
800888e4:	d8c00c17 	ldw	r3,48(sp)
800888e8:	d8c00615 	stw	r3,24(sp)
800888ec:	003e7006 	br	800882b0 <_dtoa_r+0x102c>
800888f0:	04400044 	movi	r17,1
800888f4:	003b2006 	br	80087578 <_dtoa_r+0x2f4>
800888f8:	000b883a 	mov	r5,zero
800888fc:	003b3d06 	br	800875f4 <_dtoa_r+0x370>
80088900:	d8800c17 	ldw	r2,48(sp)
80088904:	d8800615 	stw	r2,24(sp)
80088908:	003e6906 	br	800882b0 <_dtoa_r+0x102c>

8008890c <__sflush_r>:
8008890c:	2880030b 	ldhu	r2,12(r5)
80088910:	defffb04 	addi	sp,sp,-20
80088914:	dcc00315 	stw	r19,12(sp)
80088918:	dc400115 	stw	r17,4(sp)
8008891c:	dfc00415 	stw	ra,16(sp)
80088920:	dc800215 	stw	r18,8(sp)
80088924:	dc000015 	stw	r16,0(sp)
80088928:	10c0020c 	andi	r3,r2,8
8008892c:	2823883a 	mov	r17,r5
80088930:	2027883a 	mov	r19,r4
80088934:	1800311e 	bne	r3,zero,800889fc <__sflush_r+0xf0>
80088938:	28c00117 	ldw	r3,4(r5)
8008893c:	10820014 	ori	r2,r2,2048
80088940:	2880030d 	sth	r2,12(r5)
80088944:	00c04b0e 	bge	zero,r3,80088a74 <__sflush_r+0x168>
80088948:	8a000a17 	ldw	r8,40(r17)
8008894c:	40002326 	beq	r8,zero,800889dc <__sflush_r+0xd0>
80088950:	9c000017 	ldw	r16,0(r19)
80088954:	10c4000c 	andi	r3,r2,4096
80088958:	98000015 	stw	zero,0(r19)
8008895c:	18004826 	beq	r3,zero,80088a80 <__sflush_r+0x174>
80088960:	89801417 	ldw	r6,80(r17)
80088964:	10c0010c 	andi	r3,r2,4
80088968:	18000626 	beq	r3,zero,80088984 <__sflush_r+0x78>
8008896c:	88c00117 	ldw	r3,4(r17)
80088970:	88800c17 	ldw	r2,48(r17)
80088974:	30cdc83a 	sub	r6,r6,r3
80088978:	10000226 	beq	r2,zero,80088984 <__sflush_r+0x78>
8008897c:	88800f17 	ldw	r2,60(r17)
80088980:	308dc83a 	sub	r6,r6,r2
80088984:	89400717 	ldw	r5,28(r17)
80088988:	000f883a 	mov	r7,zero
8008898c:	9809883a 	mov	r4,r19
80088990:	403ee83a 	callr	r8
80088994:	00ffffc4 	movi	r3,-1
80088998:	10c04426 	beq	r2,r3,80088aac <__sflush_r+0x1a0>
8008899c:	88c0030b 	ldhu	r3,12(r17)
800889a0:	89000417 	ldw	r4,16(r17)
800889a4:	88000115 	stw	zero,4(r17)
800889a8:	197dffcc 	andi	r5,r3,63487
800889ac:	8940030d 	sth	r5,12(r17)
800889b0:	89000015 	stw	r4,0(r17)
800889b4:	18c4000c 	andi	r3,r3,4096
800889b8:	18002c1e 	bne	r3,zero,80088a6c <__sflush_r+0x160>
800889bc:	89400c17 	ldw	r5,48(r17)
800889c0:	9c000015 	stw	r16,0(r19)
800889c4:	28000526 	beq	r5,zero,800889dc <__sflush_r+0xd0>
800889c8:	88801004 	addi	r2,r17,64
800889cc:	28800226 	beq	r5,r2,800889d8 <__sflush_r+0xcc>
800889d0:	9809883a 	mov	r4,r19
800889d4:	00890780 	call	80089078 <_free_r>
800889d8:	88000c15 	stw	zero,48(r17)
800889dc:	0005883a 	mov	r2,zero
800889e0:	dfc00417 	ldw	ra,16(sp)
800889e4:	dcc00317 	ldw	r19,12(sp)
800889e8:	dc800217 	ldw	r18,8(sp)
800889ec:	dc400117 	ldw	r17,4(sp)
800889f0:	dc000017 	ldw	r16,0(sp)
800889f4:	dec00504 	addi	sp,sp,20
800889f8:	f800283a 	ret
800889fc:	2c800417 	ldw	r18,16(r5)
80088a00:	903ff626 	beq	r18,zero,800889dc <__sflush_r+0xd0>
80088a04:	2c000017 	ldw	r16,0(r5)
80088a08:	108000cc 	andi	r2,r2,3
80088a0c:	2c800015 	stw	r18,0(r5)
80088a10:	84a1c83a 	sub	r16,r16,r18
80088a14:	1000131e 	bne	r2,zero,80088a64 <__sflush_r+0x158>
80088a18:	28800517 	ldw	r2,20(r5)
80088a1c:	88800215 	stw	r2,8(r17)
80088a20:	04000316 	blt	zero,r16,80088a30 <__sflush_r+0x124>
80088a24:	003fed06 	br	800889dc <__sflush_r+0xd0>
80088a28:	90a5883a 	add	r18,r18,r2
80088a2c:	043feb0e 	bge	zero,r16,800889dc <__sflush_r+0xd0>
80088a30:	88800917 	ldw	r2,36(r17)
80088a34:	89400717 	ldw	r5,28(r17)
80088a38:	800f883a 	mov	r7,r16
80088a3c:	900d883a 	mov	r6,r18
80088a40:	9809883a 	mov	r4,r19
80088a44:	103ee83a 	callr	r2
80088a48:	80a1c83a 	sub	r16,r16,r2
80088a4c:	00bff616 	blt	zero,r2,80088a28 <__sflush_r+0x11c>
80088a50:	88c0030b 	ldhu	r3,12(r17)
80088a54:	00bfffc4 	movi	r2,-1
80088a58:	18c01014 	ori	r3,r3,64
80088a5c:	88c0030d 	sth	r3,12(r17)
80088a60:	003fdf06 	br	800889e0 <__sflush_r+0xd4>
80088a64:	0005883a 	mov	r2,zero
80088a68:	003fec06 	br	80088a1c <__sflush_r+0x110>
80088a6c:	88801415 	stw	r2,80(r17)
80088a70:	003fd206 	br	800889bc <__sflush_r+0xb0>
80088a74:	28c00f17 	ldw	r3,60(r5)
80088a78:	00ffb316 	blt	zero,r3,80088948 <__sflush_r+0x3c>
80088a7c:	003fd706 	br	800889dc <__sflush_r+0xd0>
80088a80:	89400717 	ldw	r5,28(r17)
80088a84:	000d883a 	mov	r6,zero
80088a88:	01c00044 	movi	r7,1
80088a8c:	9809883a 	mov	r4,r19
80088a90:	403ee83a 	callr	r8
80088a94:	100d883a 	mov	r6,r2
80088a98:	00bfffc4 	movi	r2,-1
80088a9c:	30801426 	beq	r6,r2,80088af0 <__sflush_r+0x1e4>
80088aa0:	8880030b 	ldhu	r2,12(r17)
80088aa4:	8a000a17 	ldw	r8,40(r17)
80088aa8:	003fae06 	br	80088964 <__sflush_r+0x58>
80088aac:	98c00017 	ldw	r3,0(r19)
80088ab0:	183fba26 	beq	r3,zero,8008899c <__sflush_r+0x90>
80088ab4:	01000744 	movi	r4,29
80088ab8:	19000626 	beq	r3,r4,80088ad4 <__sflush_r+0x1c8>
80088abc:	01000584 	movi	r4,22
80088ac0:	19000426 	beq	r3,r4,80088ad4 <__sflush_r+0x1c8>
80088ac4:	88c0030b 	ldhu	r3,12(r17)
80088ac8:	18c01014 	ori	r3,r3,64
80088acc:	88c0030d 	sth	r3,12(r17)
80088ad0:	003fc306 	br	800889e0 <__sflush_r+0xd4>
80088ad4:	8880030b 	ldhu	r2,12(r17)
80088ad8:	88c00417 	ldw	r3,16(r17)
80088adc:	88000115 	stw	zero,4(r17)
80088ae0:	10bdffcc 	andi	r2,r2,63487
80088ae4:	8880030d 	sth	r2,12(r17)
80088ae8:	88c00015 	stw	r3,0(r17)
80088aec:	003fb306 	br	800889bc <__sflush_r+0xb0>
80088af0:	98800017 	ldw	r2,0(r19)
80088af4:	103fea26 	beq	r2,zero,80088aa0 <__sflush_r+0x194>
80088af8:	00c00744 	movi	r3,29
80088afc:	10c00226 	beq	r2,r3,80088b08 <__sflush_r+0x1fc>
80088b00:	00c00584 	movi	r3,22
80088b04:	10c0031e 	bne	r2,r3,80088b14 <__sflush_r+0x208>
80088b08:	9c000015 	stw	r16,0(r19)
80088b0c:	0005883a 	mov	r2,zero
80088b10:	003fb306 	br	800889e0 <__sflush_r+0xd4>
80088b14:	88c0030b 	ldhu	r3,12(r17)
80088b18:	3005883a 	mov	r2,r6
80088b1c:	18c01014 	ori	r3,r3,64
80088b20:	88c0030d 	sth	r3,12(r17)
80088b24:	003fae06 	br	800889e0 <__sflush_r+0xd4>

80088b28 <_fflush_r>:
80088b28:	defffd04 	addi	sp,sp,-12
80088b2c:	dc000115 	stw	r16,4(sp)
80088b30:	dfc00215 	stw	ra,8(sp)
80088b34:	2021883a 	mov	r16,r4
80088b38:	20000226 	beq	r4,zero,80088b44 <_fflush_r+0x1c>
80088b3c:	20800e17 	ldw	r2,56(r4)
80088b40:	10000c26 	beq	r2,zero,80088b74 <_fflush_r+0x4c>
80088b44:	2880030f 	ldh	r2,12(r5)
80088b48:	1000051e 	bne	r2,zero,80088b60 <_fflush_r+0x38>
80088b4c:	0005883a 	mov	r2,zero
80088b50:	dfc00217 	ldw	ra,8(sp)
80088b54:	dc000117 	ldw	r16,4(sp)
80088b58:	dec00304 	addi	sp,sp,12
80088b5c:	f800283a 	ret
80088b60:	8009883a 	mov	r4,r16
80088b64:	dfc00217 	ldw	ra,8(sp)
80088b68:	dc000117 	ldw	r16,4(sp)
80088b6c:	dec00304 	addi	sp,sp,12
80088b70:	008890c1 	jmpi	8008890c <__sflush_r>
80088b74:	d9400015 	stw	r5,0(sp)
80088b78:	0088f040 	call	80088f04 <__sinit>
80088b7c:	d9400017 	ldw	r5,0(sp)
80088b80:	003ff006 	br	80088b44 <_fflush_r+0x1c>

80088b84 <fflush>:
80088b84:	20000526 	beq	r4,zero,80088b9c <fflush+0x18>
80088b88:	00a002b4 	movhi	r2,32778
80088b8c:	1081bf04 	addi	r2,r2,1788
80088b90:	200b883a 	mov	r5,r4
80088b94:	11000017 	ldw	r4,0(r2)
80088b98:	0088b281 	jmpi	80088b28 <_fflush_r>
80088b9c:	00a002b4 	movhi	r2,32778
80088ba0:	1081be04 	addi	r2,r2,1784
80088ba4:	11000017 	ldw	r4,0(r2)
80088ba8:	01600274 	movhi	r5,32777
80088bac:	2962ca04 	addi	r5,r5,-29912
80088bb0:	00899081 	jmpi	80089908 <_fwalk_reent>

80088bb4 <__fp_unlock>:
80088bb4:	0005883a 	mov	r2,zero
80088bb8:	f800283a 	ret

80088bbc <_cleanup_r>:
80088bbc:	01600274 	movhi	r5,32777
80088bc0:	294c2204 	addi	r5,r5,12424
80088bc4:	00899081 	jmpi	80089908 <_fwalk_reent>

80088bc8 <__sinit.part.1>:
80088bc8:	defff704 	addi	sp,sp,-36
80088bcc:	00e00274 	movhi	r3,32777
80088bd0:	dfc00815 	stw	ra,32(sp)
80088bd4:	ddc00715 	stw	r23,28(sp)
80088bd8:	dd800615 	stw	r22,24(sp)
80088bdc:	dd400515 	stw	r21,20(sp)
80088be0:	dd000415 	stw	r20,16(sp)
80088be4:	dcc00315 	stw	r19,12(sp)
80088be8:	dc800215 	stw	r18,8(sp)
80088bec:	dc400115 	stw	r17,4(sp)
80088bf0:	dc000015 	stw	r16,0(sp)
80088bf4:	18e2ef04 	addi	r3,r3,-29764
80088bf8:	24000117 	ldw	r16,4(r4)
80088bfc:	20c00f15 	stw	r3,60(r4)
80088c00:	2080bb04 	addi	r2,r4,748
80088c04:	00c000c4 	movi	r3,3
80088c08:	20c0b915 	stw	r3,740(r4)
80088c0c:	2080ba15 	stw	r2,744(r4)
80088c10:	2000b815 	stw	zero,736(r4)
80088c14:	05c00204 	movi	r23,8
80088c18:	00800104 	movi	r2,4
80088c1c:	2025883a 	mov	r18,r4
80088c20:	b80d883a 	mov	r6,r23
80088c24:	81001704 	addi	r4,r16,92
80088c28:	000b883a 	mov	r5,zero
80088c2c:	80000015 	stw	zero,0(r16)
80088c30:	80000115 	stw	zero,4(r16)
80088c34:	80000215 	stw	zero,8(r16)
80088c38:	8080030d 	sth	r2,12(r16)
80088c3c:	80001915 	stw	zero,100(r16)
80088c40:	8000038d 	sth	zero,14(r16)
80088c44:	80000415 	stw	zero,16(r16)
80088c48:	80000515 	stw	zero,20(r16)
80088c4c:	80000615 	stw	zero,24(r16)
80088c50:	008a1580 	call	8008a158 <memset>
80088c54:	05a00234 	movhi	r22,32776
80088c58:	94400217 	ldw	r17,8(r18)
80088c5c:	05600234 	movhi	r21,32776
80088c60:	05200234 	movhi	r20,32776
80088c64:	04e00234 	movhi	r19,32776
80088c68:	b58c8704 	addi	r22,r22,12828
80088c6c:	ad4c9e04 	addi	r21,r21,12920
80088c70:	a50cbd04 	addi	r20,r20,13044
80088c74:	9cccd404 	addi	r19,r19,13136
80088c78:	85800815 	stw	r22,32(r16)
80088c7c:	85400915 	stw	r21,36(r16)
80088c80:	85000a15 	stw	r20,40(r16)
80088c84:	84c00b15 	stw	r19,44(r16)
80088c88:	84000715 	stw	r16,28(r16)
80088c8c:	00800284 	movi	r2,10
80088c90:	8880030d 	sth	r2,12(r17)
80088c94:	00800044 	movi	r2,1
80088c98:	b80d883a 	mov	r6,r23
80088c9c:	89001704 	addi	r4,r17,92
80088ca0:	000b883a 	mov	r5,zero
80088ca4:	88000015 	stw	zero,0(r17)
80088ca8:	88000115 	stw	zero,4(r17)
80088cac:	88000215 	stw	zero,8(r17)
80088cb0:	88001915 	stw	zero,100(r17)
80088cb4:	8880038d 	sth	r2,14(r17)
80088cb8:	88000415 	stw	zero,16(r17)
80088cbc:	88000515 	stw	zero,20(r17)
80088cc0:	88000615 	stw	zero,24(r17)
80088cc4:	008a1580 	call	8008a158 <memset>
80088cc8:	94000317 	ldw	r16,12(r18)
80088ccc:	00800484 	movi	r2,18
80088cd0:	8c400715 	stw	r17,28(r17)
80088cd4:	8d800815 	stw	r22,32(r17)
80088cd8:	8d400915 	stw	r21,36(r17)
80088cdc:	8d000a15 	stw	r20,40(r17)
80088ce0:	8cc00b15 	stw	r19,44(r17)
80088ce4:	8080030d 	sth	r2,12(r16)
80088ce8:	00800084 	movi	r2,2
80088cec:	80000015 	stw	zero,0(r16)
80088cf0:	80000115 	stw	zero,4(r16)
80088cf4:	80000215 	stw	zero,8(r16)
80088cf8:	80001915 	stw	zero,100(r16)
80088cfc:	8080038d 	sth	r2,14(r16)
80088d00:	80000415 	stw	zero,16(r16)
80088d04:	80000515 	stw	zero,20(r16)
80088d08:	80000615 	stw	zero,24(r16)
80088d0c:	b80d883a 	mov	r6,r23
80088d10:	000b883a 	mov	r5,zero
80088d14:	81001704 	addi	r4,r16,92
80088d18:	008a1580 	call	8008a158 <memset>
80088d1c:	00800044 	movi	r2,1
80088d20:	84000715 	stw	r16,28(r16)
80088d24:	85800815 	stw	r22,32(r16)
80088d28:	85400915 	stw	r21,36(r16)
80088d2c:	85000a15 	stw	r20,40(r16)
80088d30:	84c00b15 	stw	r19,44(r16)
80088d34:	90800e15 	stw	r2,56(r18)
80088d38:	dfc00817 	ldw	ra,32(sp)
80088d3c:	ddc00717 	ldw	r23,28(sp)
80088d40:	dd800617 	ldw	r22,24(sp)
80088d44:	dd400517 	ldw	r21,20(sp)
80088d48:	dd000417 	ldw	r20,16(sp)
80088d4c:	dcc00317 	ldw	r19,12(sp)
80088d50:	dc800217 	ldw	r18,8(sp)
80088d54:	dc400117 	ldw	r17,4(sp)
80088d58:	dc000017 	ldw	r16,0(sp)
80088d5c:	dec00904 	addi	sp,sp,36
80088d60:	f800283a 	ret

80088d64 <__fp_lock>:
80088d64:	0005883a 	mov	r2,zero
80088d68:	f800283a 	ret

80088d6c <__sfmoreglue>:
80088d6c:	defffc04 	addi	sp,sp,-16
80088d70:	dc400115 	stw	r17,4(sp)
80088d74:	2c7fffc4 	addi	r17,r5,-1
80088d78:	8c401a24 	muli	r17,r17,104
80088d7c:	dc800215 	stw	r18,8(sp)
80088d80:	2825883a 	mov	r18,r5
80088d84:	89401d04 	addi	r5,r17,116
80088d88:	dc000015 	stw	r16,0(sp)
80088d8c:	dfc00315 	stw	ra,12(sp)
80088d90:	008251c0 	call	8008251c <_malloc_r>
80088d94:	1021883a 	mov	r16,r2
80088d98:	10000726 	beq	r2,zero,80088db8 <__sfmoreglue+0x4c>
80088d9c:	11000304 	addi	r4,r2,12
80088da0:	10000015 	stw	zero,0(r2)
80088da4:	14800115 	stw	r18,4(r2)
80088da8:	11000215 	stw	r4,8(r2)
80088dac:	89801a04 	addi	r6,r17,104
80088db0:	000b883a 	mov	r5,zero
80088db4:	008a1580 	call	8008a158 <memset>
80088db8:	8005883a 	mov	r2,r16
80088dbc:	dfc00317 	ldw	ra,12(sp)
80088dc0:	dc800217 	ldw	r18,8(sp)
80088dc4:	dc400117 	ldw	r17,4(sp)
80088dc8:	dc000017 	ldw	r16,0(sp)
80088dcc:	dec00404 	addi	sp,sp,16
80088dd0:	f800283a 	ret

80088dd4 <__sfp>:
80088dd4:	defffb04 	addi	sp,sp,-20
80088dd8:	dc000015 	stw	r16,0(sp)
80088ddc:	042002b4 	movhi	r16,32778
80088de0:	8401be04 	addi	r16,r16,1784
80088de4:	dcc00315 	stw	r19,12(sp)
80088de8:	2027883a 	mov	r19,r4
80088dec:	81000017 	ldw	r4,0(r16)
80088df0:	dfc00415 	stw	ra,16(sp)
80088df4:	dc800215 	stw	r18,8(sp)
80088df8:	20800e17 	ldw	r2,56(r4)
80088dfc:	dc400115 	stw	r17,4(sp)
80088e00:	1000021e 	bne	r2,zero,80088e0c <__sfp+0x38>
80088e04:	0088bc80 	call	80088bc8 <__sinit.part.1>
80088e08:	81000017 	ldw	r4,0(r16)
80088e0c:	2480b804 	addi	r18,r4,736
80088e10:	047fffc4 	movi	r17,-1
80088e14:	91000117 	ldw	r4,4(r18)
80088e18:	94000217 	ldw	r16,8(r18)
80088e1c:	213fffc4 	addi	r4,r4,-1
80088e20:	20000a16 	blt	r4,zero,80088e4c <__sfp+0x78>
80088e24:	8080030f 	ldh	r2,12(r16)
80088e28:	10000c26 	beq	r2,zero,80088e5c <__sfp+0x88>
80088e2c:	80c01d04 	addi	r3,r16,116
80088e30:	00000206 	br	80088e3c <__sfp+0x68>
80088e34:	18bfe60f 	ldh	r2,-104(r3)
80088e38:	10000826 	beq	r2,zero,80088e5c <__sfp+0x88>
80088e3c:	213fffc4 	addi	r4,r4,-1
80088e40:	1c3ffd04 	addi	r16,r3,-12
80088e44:	18c01a04 	addi	r3,r3,104
80088e48:	247ffa1e 	bne	r4,r17,80088e34 <__sfp+0x60>
80088e4c:	90800017 	ldw	r2,0(r18)
80088e50:	10001d26 	beq	r2,zero,80088ec8 <__sfp+0xf4>
80088e54:	1025883a 	mov	r18,r2
80088e58:	003fee06 	br	80088e14 <__sfp+0x40>
80088e5c:	00bfffc4 	movi	r2,-1
80088e60:	8080038d 	sth	r2,14(r16)
80088e64:	00800044 	movi	r2,1
80088e68:	8080030d 	sth	r2,12(r16)
80088e6c:	80001915 	stw	zero,100(r16)
80088e70:	80000015 	stw	zero,0(r16)
80088e74:	80000215 	stw	zero,8(r16)
80088e78:	80000115 	stw	zero,4(r16)
80088e7c:	80000415 	stw	zero,16(r16)
80088e80:	80000515 	stw	zero,20(r16)
80088e84:	80000615 	stw	zero,24(r16)
80088e88:	01800204 	movi	r6,8
80088e8c:	000b883a 	mov	r5,zero
80088e90:	81001704 	addi	r4,r16,92
80088e94:	008a1580 	call	8008a158 <memset>
80088e98:	8005883a 	mov	r2,r16
80088e9c:	80000c15 	stw	zero,48(r16)
80088ea0:	80000d15 	stw	zero,52(r16)
80088ea4:	80001115 	stw	zero,68(r16)
80088ea8:	80001215 	stw	zero,72(r16)
80088eac:	dfc00417 	ldw	ra,16(sp)
80088eb0:	dcc00317 	ldw	r19,12(sp)
80088eb4:	dc800217 	ldw	r18,8(sp)
80088eb8:	dc400117 	ldw	r17,4(sp)
80088ebc:	dc000017 	ldw	r16,0(sp)
80088ec0:	dec00504 	addi	sp,sp,20
80088ec4:	f800283a 	ret
80088ec8:	01400104 	movi	r5,4
80088ecc:	9809883a 	mov	r4,r19
80088ed0:	0088d6c0 	call	80088d6c <__sfmoreglue>
80088ed4:	90800015 	stw	r2,0(r18)
80088ed8:	103fde1e 	bne	r2,zero,80088e54 <__sfp+0x80>
80088edc:	00800304 	movi	r2,12
80088ee0:	98800015 	stw	r2,0(r19)
80088ee4:	0005883a 	mov	r2,zero
80088ee8:	003ff006 	br	80088eac <__sfp+0xd8>

80088eec <_cleanup>:
80088eec:	00a002b4 	movhi	r2,32778
80088ef0:	1081be04 	addi	r2,r2,1784
80088ef4:	11000017 	ldw	r4,0(r2)
80088ef8:	01600274 	movhi	r5,32777
80088efc:	294c2204 	addi	r5,r5,12424
80088f00:	00899081 	jmpi	80089908 <_fwalk_reent>

80088f04 <__sinit>:
80088f04:	20800e17 	ldw	r2,56(r4)
80088f08:	10000126 	beq	r2,zero,80088f10 <__sinit+0xc>
80088f0c:	f800283a 	ret
80088f10:	0088bc81 	jmpi	80088bc8 <__sinit.part.1>

80088f14 <__sfp_lock_acquire>:
80088f14:	f800283a 	ret

80088f18 <__sfp_lock_release>:
80088f18:	f800283a 	ret

80088f1c <__sinit_lock_acquire>:
80088f1c:	f800283a 	ret

80088f20 <__sinit_lock_release>:
80088f20:	f800283a 	ret

80088f24 <__fp_lock_all>:
80088f24:	00a002b4 	movhi	r2,32778
80088f28:	1081bf04 	addi	r2,r2,1788
80088f2c:	11000017 	ldw	r4,0(r2)
80088f30:	01600274 	movhi	r5,32777
80088f34:	29635904 	addi	r5,r5,-29340
80088f38:	00898441 	jmpi	80089844 <_fwalk>

80088f3c <__fp_unlock_all>:
80088f3c:	00a002b4 	movhi	r2,32778
80088f40:	1081bf04 	addi	r2,r2,1788
80088f44:	11000017 	ldw	r4,0(r2)
80088f48:	01600274 	movhi	r5,32777
80088f4c:	2962ed04 	addi	r5,r5,-29772
80088f50:	00898441 	jmpi	80089844 <_fwalk>

80088f54 <_malloc_trim_r>:
80088f54:	defffb04 	addi	sp,sp,-20
80088f58:	dcc00315 	stw	r19,12(sp)
80088f5c:	04e002b4 	movhi	r19,32778
80088f60:	dc800215 	stw	r18,8(sp)
80088f64:	dc400115 	stw	r17,4(sp)
80088f68:	dc000015 	stw	r16,0(sp)
80088f6c:	dfc00415 	stw	ra,16(sp)
80088f70:	2821883a 	mov	r16,r5
80088f74:	9cfbd404 	addi	r19,r19,-4272
80088f78:	2025883a 	mov	r18,r4
80088f7c:	00991fc0 	call	800991fc <__malloc_lock>
80088f80:	98800217 	ldw	r2,8(r19)
80088f84:	14400117 	ldw	r17,4(r2)
80088f88:	00bfff04 	movi	r2,-4
80088f8c:	88a2703a 	and	r17,r17,r2
80088f90:	8c21c83a 	sub	r16,r17,r16
80088f94:	8403fbc4 	addi	r16,r16,4079
80088f98:	8020d33a 	srli	r16,r16,12
80088f9c:	0083ffc4 	movi	r2,4095
80088fa0:	843fffc4 	addi	r16,r16,-1
80088fa4:	8020933a 	slli	r16,r16,12
80088fa8:	1400060e 	bge	r2,r16,80088fc4 <_malloc_trim_r+0x70>
80088fac:	000b883a 	mov	r5,zero
80088fb0:	9009883a 	mov	r4,r18
80088fb4:	00830d40 	call	800830d4 <_sbrk_r>
80088fb8:	98c00217 	ldw	r3,8(r19)
80088fbc:	1c47883a 	add	r3,r3,r17
80088fc0:	10c00a26 	beq	r2,r3,80088fec <_malloc_trim_r+0x98>
80088fc4:	9009883a 	mov	r4,r18
80088fc8:	00992200 	call	80099220 <__malloc_unlock>
80088fcc:	0005883a 	mov	r2,zero
80088fd0:	dfc00417 	ldw	ra,16(sp)
80088fd4:	dcc00317 	ldw	r19,12(sp)
80088fd8:	dc800217 	ldw	r18,8(sp)
80088fdc:	dc400117 	ldw	r17,4(sp)
80088fe0:	dc000017 	ldw	r16,0(sp)
80088fe4:	dec00504 	addi	sp,sp,20
80088fe8:	f800283a 	ret
80088fec:	040bc83a 	sub	r5,zero,r16
80088ff0:	9009883a 	mov	r4,r18
80088ff4:	00830d40 	call	800830d4 <_sbrk_r>
80088ff8:	00ffffc4 	movi	r3,-1
80088ffc:	10c00d26 	beq	r2,r3,80089034 <_malloc_trim_r+0xe0>
80089000:	00e002b4 	movhi	r3,32778
80089004:	18c8ed04 	addi	r3,r3,9140
80089008:	18800017 	ldw	r2,0(r3)
8008900c:	99000217 	ldw	r4,8(r19)
80089010:	8c23c83a 	sub	r17,r17,r16
80089014:	8c400054 	ori	r17,r17,1
80089018:	1421c83a 	sub	r16,r2,r16
8008901c:	24400115 	stw	r17,4(r4)
80089020:	9009883a 	mov	r4,r18
80089024:	1c000015 	stw	r16,0(r3)
80089028:	00992200 	call	80099220 <__malloc_unlock>
8008902c:	00800044 	movi	r2,1
80089030:	003fe706 	br	80088fd0 <_malloc_trim_r+0x7c>
80089034:	000b883a 	mov	r5,zero
80089038:	9009883a 	mov	r4,r18
8008903c:	00830d40 	call	800830d4 <_sbrk_r>
80089040:	99000217 	ldw	r4,8(r19)
80089044:	014003c4 	movi	r5,15
80089048:	1107c83a 	sub	r3,r2,r4
8008904c:	28ffdd0e 	bge	r5,r3,80088fc4 <_malloc_trim_r+0x70>
80089050:	016002b4 	movhi	r5,32778
80089054:	2941c004 	addi	r5,r5,1792
80089058:	29400017 	ldw	r5,0(r5)
8008905c:	18c00054 	ori	r3,r3,1
80089060:	20c00115 	stw	r3,4(r4)
80089064:	00e002b4 	movhi	r3,32778
80089068:	1145c83a 	sub	r2,r2,r5
8008906c:	18c8ed04 	addi	r3,r3,9140
80089070:	18800015 	stw	r2,0(r3)
80089074:	003fd306 	br	80088fc4 <_malloc_trim_r+0x70>

80089078 <_free_r>:
80089078:	28004126 	beq	r5,zero,80089180 <_free_r+0x108>
8008907c:	defffd04 	addi	sp,sp,-12
80089080:	dc400115 	stw	r17,4(sp)
80089084:	dc000015 	stw	r16,0(sp)
80089088:	2023883a 	mov	r17,r4
8008908c:	2821883a 	mov	r16,r5
80089090:	dfc00215 	stw	ra,8(sp)
80089094:	00991fc0 	call	800991fc <__malloc_lock>
80089098:	81ffff17 	ldw	r7,-4(r16)
8008909c:	00bfff84 	movi	r2,-2
800890a0:	012002b4 	movhi	r4,32778
800890a4:	81bffe04 	addi	r6,r16,-8
800890a8:	3884703a 	and	r2,r7,r2
800890ac:	213bd404 	addi	r4,r4,-4272
800890b0:	308b883a 	add	r5,r6,r2
800890b4:	2a400117 	ldw	r9,4(r5)
800890b8:	22000217 	ldw	r8,8(r4)
800890bc:	00ffff04 	movi	r3,-4
800890c0:	48c6703a 	and	r3,r9,r3
800890c4:	2a005726 	beq	r5,r8,80089224 <_free_r+0x1ac>
800890c8:	28c00115 	stw	r3,4(r5)
800890cc:	39c0004c 	andi	r7,r7,1
800890d0:	3800091e 	bne	r7,zero,800890f8 <_free_r+0x80>
800890d4:	823ffe17 	ldw	r8,-8(r16)
800890d8:	22400204 	addi	r9,r4,8
800890dc:	320dc83a 	sub	r6,r6,r8
800890e0:	31c00217 	ldw	r7,8(r6)
800890e4:	1205883a 	add	r2,r2,r8
800890e8:	3a406526 	beq	r7,r9,80089280 <_free_r+0x208>
800890ec:	32000317 	ldw	r8,12(r6)
800890f0:	3a000315 	stw	r8,12(r7)
800890f4:	41c00215 	stw	r7,8(r8)
800890f8:	28cf883a 	add	r7,r5,r3
800890fc:	39c00117 	ldw	r7,4(r7)
80089100:	39c0004c 	andi	r7,r7,1
80089104:	38003a26 	beq	r7,zero,800891f0 <_free_r+0x178>
80089108:	10c00054 	ori	r3,r2,1
8008910c:	30c00115 	stw	r3,4(r6)
80089110:	3087883a 	add	r3,r6,r2
80089114:	18800015 	stw	r2,0(r3)
80089118:	00c07fc4 	movi	r3,511
8008911c:	18801936 	bltu	r3,r2,80089184 <_free_r+0x10c>
80089120:	1004d0fa 	srli	r2,r2,3
80089124:	01c00044 	movi	r7,1
80089128:	21400117 	ldw	r5,4(r4)
8008912c:	10c00044 	addi	r3,r2,1
80089130:	18c7883a 	add	r3,r3,r3
80089134:	1005d0ba 	srai	r2,r2,2
80089138:	18c7883a 	add	r3,r3,r3
8008913c:	18c7883a 	add	r3,r3,r3
80089140:	1907883a 	add	r3,r3,r4
80089144:	3884983a 	sll	r2,r7,r2
80089148:	19c00017 	ldw	r7,0(r3)
8008914c:	1a3ffe04 	addi	r8,r3,-8
80089150:	1144b03a 	or	r2,r2,r5
80089154:	32000315 	stw	r8,12(r6)
80089158:	31c00215 	stw	r7,8(r6)
8008915c:	20800115 	stw	r2,4(r4)
80089160:	19800015 	stw	r6,0(r3)
80089164:	39800315 	stw	r6,12(r7)
80089168:	8809883a 	mov	r4,r17
8008916c:	dfc00217 	ldw	ra,8(sp)
80089170:	dc400117 	ldw	r17,4(sp)
80089174:	dc000017 	ldw	r16,0(sp)
80089178:	dec00304 	addi	sp,sp,12
8008917c:	00992201 	jmpi	80099220 <__malloc_unlock>
80089180:	f800283a 	ret
80089184:	100ad27a 	srli	r5,r2,9
80089188:	00c00104 	movi	r3,4
8008918c:	19404a36 	bltu	r3,r5,800892b8 <_free_r+0x240>
80089190:	100ad1ba 	srli	r5,r2,6
80089194:	28c00e44 	addi	r3,r5,57
80089198:	18c7883a 	add	r3,r3,r3
8008919c:	29400e04 	addi	r5,r5,56
800891a0:	18c7883a 	add	r3,r3,r3
800891a4:	18c7883a 	add	r3,r3,r3
800891a8:	1909883a 	add	r4,r3,r4
800891ac:	20c00017 	ldw	r3,0(r4)
800891b0:	01e002b4 	movhi	r7,32778
800891b4:	213ffe04 	addi	r4,r4,-8
800891b8:	39fbd404 	addi	r7,r7,-4272
800891bc:	20c04426 	beq	r4,r3,800892d0 <_free_r+0x258>
800891c0:	01ffff04 	movi	r7,-4
800891c4:	19400117 	ldw	r5,4(r3)
800891c8:	29ca703a 	and	r5,r5,r7
800891cc:	1140022e 	bgeu	r2,r5,800891d8 <_free_r+0x160>
800891d0:	18c00217 	ldw	r3,8(r3)
800891d4:	20fffb1e 	bne	r4,r3,800891c4 <_free_r+0x14c>
800891d8:	19000317 	ldw	r4,12(r3)
800891dc:	31000315 	stw	r4,12(r6)
800891e0:	30c00215 	stw	r3,8(r6)
800891e4:	21800215 	stw	r6,8(r4)
800891e8:	19800315 	stw	r6,12(r3)
800891ec:	003fde06 	br	80089168 <_free_r+0xf0>
800891f0:	29c00217 	ldw	r7,8(r5)
800891f4:	10c5883a 	add	r2,r2,r3
800891f8:	00e002b4 	movhi	r3,32778
800891fc:	18fbd604 	addi	r3,r3,-4264
80089200:	38c03b26 	beq	r7,r3,800892f0 <_free_r+0x278>
80089204:	2a000317 	ldw	r8,12(r5)
80089208:	11400054 	ori	r5,r2,1
8008920c:	3087883a 	add	r3,r6,r2
80089210:	3a000315 	stw	r8,12(r7)
80089214:	41c00215 	stw	r7,8(r8)
80089218:	31400115 	stw	r5,4(r6)
8008921c:	18800015 	stw	r2,0(r3)
80089220:	003fbd06 	br	80089118 <_free_r+0xa0>
80089224:	39c0004c 	andi	r7,r7,1
80089228:	10c5883a 	add	r2,r2,r3
8008922c:	3800071e 	bne	r7,zero,8008924c <_free_r+0x1d4>
80089230:	81fffe17 	ldw	r7,-8(r16)
80089234:	31cdc83a 	sub	r6,r6,r7
80089238:	30c00317 	ldw	r3,12(r6)
8008923c:	31400217 	ldw	r5,8(r6)
80089240:	11c5883a 	add	r2,r2,r7
80089244:	28c00315 	stw	r3,12(r5)
80089248:	19400215 	stw	r5,8(r3)
8008924c:	10c00054 	ori	r3,r2,1
80089250:	30c00115 	stw	r3,4(r6)
80089254:	00e002b4 	movhi	r3,32778
80089258:	18c1c104 	addi	r3,r3,1796
8008925c:	18c00017 	ldw	r3,0(r3)
80089260:	21800215 	stw	r6,8(r4)
80089264:	10ffc036 	bltu	r2,r3,80089168 <_free_r+0xf0>
80089268:	00a002b4 	movhi	r2,32778
8008926c:	1088e104 	addi	r2,r2,9092
80089270:	11400017 	ldw	r5,0(r2)
80089274:	8809883a 	mov	r4,r17
80089278:	0088f540 	call	80088f54 <_malloc_trim_r>
8008927c:	003fba06 	br	80089168 <_free_r+0xf0>
80089280:	28c9883a 	add	r4,r5,r3
80089284:	21000117 	ldw	r4,4(r4)
80089288:	2100004c 	andi	r4,r4,1
8008928c:	2000391e 	bne	r4,zero,80089374 <_free_r+0x2fc>
80089290:	29c00217 	ldw	r7,8(r5)
80089294:	29000317 	ldw	r4,12(r5)
80089298:	1885883a 	add	r2,r3,r2
8008929c:	10c00054 	ori	r3,r2,1
800892a0:	39000315 	stw	r4,12(r7)
800892a4:	21c00215 	stw	r7,8(r4)
800892a8:	30c00115 	stw	r3,4(r6)
800892ac:	308d883a 	add	r6,r6,r2
800892b0:	30800015 	stw	r2,0(r6)
800892b4:	003fac06 	br	80089168 <_free_r+0xf0>
800892b8:	00c00504 	movi	r3,20
800892bc:	19401536 	bltu	r3,r5,80089314 <_free_r+0x29c>
800892c0:	28c01704 	addi	r3,r5,92
800892c4:	18c7883a 	add	r3,r3,r3
800892c8:	294016c4 	addi	r5,r5,91
800892cc:	003fb406 	br	800891a0 <_free_r+0x128>
800892d0:	280bd0ba 	srai	r5,r5,2
800892d4:	00c00044 	movi	r3,1
800892d8:	38800117 	ldw	r2,4(r7)
800892dc:	194a983a 	sll	r5,r3,r5
800892e0:	2007883a 	mov	r3,r4
800892e4:	2884b03a 	or	r2,r5,r2
800892e8:	38800115 	stw	r2,4(r7)
800892ec:	003fbb06 	br	800891dc <_free_r+0x164>
800892f0:	21800515 	stw	r6,20(r4)
800892f4:	21800415 	stw	r6,16(r4)
800892f8:	10c00054 	ori	r3,r2,1
800892fc:	31c00315 	stw	r7,12(r6)
80089300:	31c00215 	stw	r7,8(r6)
80089304:	30c00115 	stw	r3,4(r6)
80089308:	308d883a 	add	r6,r6,r2
8008930c:	30800015 	stw	r2,0(r6)
80089310:	003f9506 	br	80089168 <_free_r+0xf0>
80089314:	00c01504 	movi	r3,84
80089318:	19400536 	bltu	r3,r5,80089330 <_free_r+0x2b8>
8008931c:	100ad33a 	srli	r5,r2,12
80089320:	28c01bc4 	addi	r3,r5,111
80089324:	18c7883a 	add	r3,r3,r3
80089328:	29401b84 	addi	r5,r5,110
8008932c:	003f9c06 	br	800891a0 <_free_r+0x128>
80089330:	00c05504 	movi	r3,340
80089334:	19400536 	bltu	r3,r5,8008934c <_free_r+0x2d4>
80089338:	100ad3fa 	srli	r5,r2,15
8008933c:	28c01e04 	addi	r3,r5,120
80089340:	18c7883a 	add	r3,r3,r3
80089344:	29401dc4 	addi	r5,r5,119
80089348:	003f9506 	br	800891a0 <_free_r+0x128>
8008934c:	00c15504 	movi	r3,1364
80089350:	19400536 	bltu	r3,r5,80089368 <_free_r+0x2f0>
80089354:	100ad4ba 	srli	r5,r2,18
80089358:	28c01f44 	addi	r3,r5,125
8008935c:	18c7883a 	add	r3,r3,r3
80089360:	29401f04 	addi	r5,r5,124
80089364:	003f8e06 	br	800891a0 <_free_r+0x128>
80089368:	00c03f84 	movi	r3,254
8008936c:	01401f84 	movi	r5,126
80089370:	003f8b06 	br	800891a0 <_free_r+0x128>
80089374:	10c00054 	ori	r3,r2,1
80089378:	30c00115 	stw	r3,4(r6)
8008937c:	308d883a 	add	r6,r6,r2
80089380:	30800015 	stw	r2,0(r6)
80089384:	003f7806 	br	80089168 <_free_r+0xf0>

80089388 <__sfvwrite_r>:
80089388:	30800217 	ldw	r2,8(r6)
8008938c:	10006726 	beq	r2,zero,8008952c <__sfvwrite_r+0x1a4>
80089390:	28c0030b 	ldhu	r3,12(r5)
80089394:	defff404 	addi	sp,sp,-48
80089398:	dd400715 	stw	r21,28(sp)
8008939c:	dd000615 	stw	r20,24(sp)
800893a0:	dc000215 	stw	r16,8(sp)
800893a4:	dfc00b15 	stw	ra,44(sp)
800893a8:	df000a15 	stw	fp,40(sp)
800893ac:	ddc00915 	stw	r23,36(sp)
800893b0:	dd800815 	stw	r22,32(sp)
800893b4:	dcc00515 	stw	r19,20(sp)
800893b8:	dc800415 	stw	r18,16(sp)
800893bc:	dc400315 	stw	r17,12(sp)
800893c0:	1880020c 	andi	r2,r3,8
800893c4:	2821883a 	mov	r16,r5
800893c8:	202b883a 	mov	r21,r4
800893cc:	3029883a 	mov	r20,r6
800893d0:	10002726 	beq	r2,zero,80089470 <__sfvwrite_r+0xe8>
800893d4:	28800417 	ldw	r2,16(r5)
800893d8:	10002526 	beq	r2,zero,80089470 <__sfvwrite_r+0xe8>
800893dc:	1880008c 	andi	r2,r3,2
800893e0:	a4400017 	ldw	r17,0(r20)
800893e4:	10002a26 	beq	r2,zero,80089490 <__sfvwrite_r+0x108>
800893e8:	05a00034 	movhi	r22,32768
800893ec:	0027883a 	mov	r19,zero
800893f0:	0025883a 	mov	r18,zero
800893f4:	b5bf0004 	addi	r22,r22,-1024
800893f8:	980d883a 	mov	r6,r19
800893fc:	a809883a 	mov	r4,r21
80089400:	90004626 	beq	r18,zero,8008951c <__sfvwrite_r+0x194>
80089404:	900f883a 	mov	r7,r18
80089408:	b480022e 	bgeu	r22,r18,80089414 <__sfvwrite_r+0x8c>
8008940c:	01e00034 	movhi	r7,32768
80089410:	39ff0004 	addi	r7,r7,-1024
80089414:	80800917 	ldw	r2,36(r16)
80089418:	81400717 	ldw	r5,28(r16)
8008941c:	103ee83a 	callr	r2
80089420:	0080570e 	bge	zero,r2,80089580 <__sfvwrite_r+0x1f8>
80089424:	a0c00217 	ldw	r3,8(r20)
80089428:	98a7883a 	add	r19,r19,r2
8008942c:	90a5c83a 	sub	r18,r18,r2
80089430:	1885c83a 	sub	r2,r3,r2
80089434:	a0800215 	stw	r2,8(r20)
80089438:	103fef1e 	bne	r2,zero,800893f8 <__sfvwrite_r+0x70>
8008943c:	0005883a 	mov	r2,zero
80089440:	dfc00b17 	ldw	ra,44(sp)
80089444:	df000a17 	ldw	fp,40(sp)
80089448:	ddc00917 	ldw	r23,36(sp)
8008944c:	dd800817 	ldw	r22,32(sp)
80089450:	dd400717 	ldw	r21,28(sp)
80089454:	dd000617 	ldw	r20,24(sp)
80089458:	dcc00517 	ldw	r19,20(sp)
8008945c:	dc800417 	ldw	r18,16(sp)
80089460:	dc400317 	ldw	r17,12(sp)
80089464:	dc000217 	ldw	r16,8(sp)
80089468:	dec00c04 	addi	sp,sp,48
8008946c:	f800283a 	ret
80089470:	800b883a 	mov	r5,r16
80089474:	a809883a 	mov	r4,r21
80089478:	0086edc0 	call	80086edc <__swsetup_r>
8008947c:	1000eb1e 	bne	r2,zero,8008982c <__sfvwrite_r+0x4a4>
80089480:	80c0030b 	ldhu	r3,12(r16)
80089484:	a4400017 	ldw	r17,0(r20)
80089488:	1880008c 	andi	r2,r3,2
8008948c:	103fd61e 	bne	r2,zero,800893e8 <__sfvwrite_r+0x60>
80089490:	1880004c 	andi	r2,r3,1
80089494:	10003f1e 	bne	r2,zero,80089594 <__sfvwrite_r+0x20c>
80089498:	0039883a 	mov	fp,zero
8008949c:	0025883a 	mov	r18,zero
800894a0:	90001a26 	beq	r18,zero,8008950c <__sfvwrite_r+0x184>
800894a4:	1880800c 	andi	r2,r3,512
800894a8:	84c00217 	ldw	r19,8(r16)
800894ac:	10002126 	beq	r2,zero,80089534 <__sfvwrite_r+0x1ac>
800894b0:	982f883a 	mov	r23,r19
800894b4:	94c09336 	bltu	r18,r19,80089704 <__sfvwrite_r+0x37c>
800894b8:	1881200c 	andi	r2,r3,1152
800894bc:	10009e1e 	bne	r2,zero,80089738 <__sfvwrite_r+0x3b0>
800894c0:	81000017 	ldw	r4,0(r16)
800894c4:	b80d883a 	mov	r6,r23
800894c8:	e00b883a 	mov	r5,fp
800894cc:	0089ffc0 	call	80089ffc <memmove>
800894d0:	80c00217 	ldw	r3,8(r16)
800894d4:	81000017 	ldw	r4,0(r16)
800894d8:	9005883a 	mov	r2,r18
800894dc:	1ce7c83a 	sub	r19,r3,r19
800894e0:	25cf883a 	add	r7,r4,r23
800894e4:	84c00215 	stw	r19,8(r16)
800894e8:	81c00015 	stw	r7,0(r16)
800894ec:	a0c00217 	ldw	r3,8(r20)
800894f0:	e0b9883a 	add	fp,fp,r2
800894f4:	90a5c83a 	sub	r18,r18,r2
800894f8:	18a7c83a 	sub	r19,r3,r2
800894fc:	a4c00215 	stw	r19,8(r20)
80089500:	983fce26 	beq	r19,zero,8008943c <__sfvwrite_r+0xb4>
80089504:	80c0030b 	ldhu	r3,12(r16)
80089508:	903fe61e 	bne	r18,zero,800894a4 <__sfvwrite_r+0x11c>
8008950c:	8f000017 	ldw	fp,0(r17)
80089510:	8c800117 	ldw	r18,4(r17)
80089514:	8c400204 	addi	r17,r17,8
80089518:	003fe106 	br	800894a0 <__sfvwrite_r+0x118>
8008951c:	8cc00017 	ldw	r19,0(r17)
80089520:	8c800117 	ldw	r18,4(r17)
80089524:	8c400204 	addi	r17,r17,8
80089528:	003fb306 	br	800893f8 <__sfvwrite_r+0x70>
8008952c:	0005883a 	mov	r2,zero
80089530:	f800283a 	ret
80089534:	81000017 	ldw	r4,0(r16)
80089538:	80800417 	ldw	r2,16(r16)
8008953c:	11005736 	bltu	r2,r4,8008969c <__sfvwrite_r+0x314>
80089540:	85c00517 	ldw	r23,20(r16)
80089544:	95c05536 	bltu	r18,r23,8008969c <__sfvwrite_r+0x314>
80089548:	00a00034 	movhi	r2,32768
8008954c:	10bfffc4 	addi	r2,r2,-1
80089550:	9009883a 	mov	r4,r18
80089554:	1480012e 	bgeu	r2,r18,8008955c <__sfvwrite_r+0x1d4>
80089558:	1009883a 	mov	r4,r2
8008955c:	b80b883a 	mov	r5,r23
80089560:	00822480 	call	80082248 <__divsi3>
80089564:	15cf383a 	mul	r7,r2,r23
80089568:	81400717 	ldw	r5,28(r16)
8008956c:	80800917 	ldw	r2,36(r16)
80089570:	e00d883a 	mov	r6,fp
80089574:	a809883a 	mov	r4,r21
80089578:	103ee83a 	callr	r2
8008957c:	00bfdb16 	blt	zero,r2,800894ec <__sfvwrite_r+0x164>
80089580:	8080030b 	ldhu	r2,12(r16)
80089584:	10801014 	ori	r2,r2,64
80089588:	8080030d 	sth	r2,12(r16)
8008958c:	00bfffc4 	movi	r2,-1
80089590:	003fab06 	br	80089440 <__sfvwrite_r+0xb8>
80089594:	0027883a 	mov	r19,zero
80089598:	0011883a 	mov	r8,zero
8008959c:	0039883a 	mov	fp,zero
800895a0:	0025883a 	mov	r18,zero
800895a4:	90001f26 	beq	r18,zero,80089624 <__sfvwrite_r+0x29c>
800895a8:	40005a26 	beq	r8,zero,80089714 <__sfvwrite_r+0x38c>
800895ac:	982d883a 	mov	r22,r19
800895b0:	94c0012e 	bgeu	r18,r19,800895b8 <__sfvwrite_r+0x230>
800895b4:	902d883a 	mov	r22,r18
800895b8:	81000017 	ldw	r4,0(r16)
800895bc:	80800417 	ldw	r2,16(r16)
800895c0:	b02f883a 	mov	r23,r22
800895c4:	81c00517 	ldw	r7,20(r16)
800895c8:	1100032e 	bgeu	r2,r4,800895d8 <__sfvwrite_r+0x250>
800895cc:	80c00217 	ldw	r3,8(r16)
800895d0:	38c7883a 	add	r3,r7,r3
800895d4:	1d801816 	blt	r3,r22,80089638 <__sfvwrite_r+0x2b0>
800895d8:	b1c03e16 	blt	r22,r7,800896d4 <__sfvwrite_r+0x34c>
800895dc:	80800917 	ldw	r2,36(r16)
800895e0:	81400717 	ldw	r5,28(r16)
800895e4:	e00d883a 	mov	r6,fp
800895e8:	da000115 	stw	r8,4(sp)
800895ec:	a809883a 	mov	r4,r21
800895f0:	103ee83a 	callr	r2
800895f4:	102f883a 	mov	r23,r2
800895f8:	da000117 	ldw	r8,4(sp)
800895fc:	00bfe00e 	bge	zero,r2,80089580 <__sfvwrite_r+0x1f8>
80089600:	9de7c83a 	sub	r19,r19,r23
80089604:	98001f26 	beq	r19,zero,80089684 <__sfvwrite_r+0x2fc>
80089608:	a0800217 	ldw	r2,8(r20)
8008960c:	e5f9883a 	add	fp,fp,r23
80089610:	95e5c83a 	sub	r18,r18,r23
80089614:	15efc83a 	sub	r23,r2,r23
80089618:	a5c00215 	stw	r23,8(r20)
8008961c:	b83f8726 	beq	r23,zero,8008943c <__sfvwrite_r+0xb4>
80089620:	903fe11e 	bne	r18,zero,800895a8 <__sfvwrite_r+0x220>
80089624:	8f000017 	ldw	fp,0(r17)
80089628:	8c800117 	ldw	r18,4(r17)
8008962c:	0011883a 	mov	r8,zero
80089630:	8c400204 	addi	r17,r17,8
80089634:	003fdb06 	br	800895a4 <__sfvwrite_r+0x21c>
80089638:	180d883a 	mov	r6,r3
8008963c:	e00b883a 	mov	r5,fp
80089640:	da000115 	stw	r8,4(sp)
80089644:	d8c00015 	stw	r3,0(sp)
80089648:	0089ffc0 	call	80089ffc <memmove>
8008964c:	d8c00017 	ldw	r3,0(sp)
80089650:	80800017 	ldw	r2,0(r16)
80089654:	800b883a 	mov	r5,r16
80089658:	a809883a 	mov	r4,r21
8008965c:	10c5883a 	add	r2,r2,r3
80089660:	80800015 	stw	r2,0(r16)
80089664:	d8c00015 	stw	r3,0(sp)
80089668:	0088b280 	call	80088b28 <_fflush_r>
8008966c:	d8c00017 	ldw	r3,0(sp)
80089670:	da000117 	ldw	r8,4(sp)
80089674:	103fc21e 	bne	r2,zero,80089580 <__sfvwrite_r+0x1f8>
80089678:	182f883a 	mov	r23,r3
8008967c:	9de7c83a 	sub	r19,r19,r23
80089680:	983fe11e 	bne	r19,zero,80089608 <__sfvwrite_r+0x280>
80089684:	800b883a 	mov	r5,r16
80089688:	a809883a 	mov	r4,r21
8008968c:	0088b280 	call	80088b28 <_fflush_r>
80089690:	103fbb1e 	bne	r2,zero,80089580 <__sfvwrite_r+0x1f8>
80089694:	0011883a 	mov	r8,zero
80089698:	003fdb06 	br	80089608 <__sfvwrite_r+0x280>
8008969c:	94c0012e 	bgeu	r18,r19,800896a4 <__sfvwrite_r+0x31c>
800896a0:	9027883a 	mov	r19,r18
800896a4:	980d883a 	mov	r6,r19
800896a8:	e00b883a 	mov	r5,fp
800896ac:	0089ffc0 	call	80089ffc <memmove>
800896b0:	80800217 	ldw	r2,8(r16)
800896b4:	80c00017 	ldw	r3,0(r16)
800896b8:	14c5c83a 	sub	r2,r2,r19
800896bc:	1cc7883a 	add	r3,r3,r19
800896c0:	80800215 	stw	r2,8(r16)
800896c4:	80c00015 	stw	r3,0(r16)
800896c8:	10004326 	beq	r2,zero,800897d8 <__sfvwrite_r+0x450>
800896cc:	9805883a 	mov	r2,r19
800896d0:	003f8606 	br	800894ec <__sfvwrite_r+0x164>
800896d4:	b00d883a 	mov	r6,r22
800896d8:	e00b883a 	mov	r5,fp
800896dc:	da000115 	stw	r8,4(sp)
800896e0:	0089ffc0 	call	80089ffc <memmove>
800896e4:	80800217 	ldw	r2,8(r16)
800896e8:	80c00017 	ldw	r3,0(r16)
800896ec:	da000117 	ldw	r8,4(sp)
800896f0:	1585c83a 	sub	r2,r2,r22
800896f4:	1dad883a 	add	r22,r3,r22
800896f8:	80800215 	stw	r2,8(r16)
800896fc:	85800015 	stw	r22,0(r16)
80089700:	003fbf06 	br	80089600 <__sfvwrite_r+0x278>
80089704:	81000017 	ldw	r4,0(r16)
80089708:	9027883a 	mov	r19,r18
8008970c:	902f883a 	mov	r23,r18
80089710:	003f6c06 	br	800894c4 <__sfvwrite_r+0x13c>
80089714:	900d883a 	mov	r6,r18
80089718:	01400284 	movi	r5,10
8008971c:	e009883a 	mov	r4,fp
80089720:	0089f180 	call	80089f18 <memchr>
80089724:	10003e26 	beq	r2,zero,80089820 <__sfvwrite_r+0x498>
80089728:	10800044 	addi	r2,r2,1
8008972c:	1727c83a 	sub	r19,r2,fp
80089730:	02000044 	movi	r8,1
80089734:	003f9d06 	br	800895ac <__sfvwrite_r+0x224>
80089738:	80800517 	ldw	r2,20(r16)
8008973c:	81400417 	ldw	r5,16(r16)
80089740:	81c00017 	ldw	r7,0(r16)
80089744:	10a7883a 	add	r19,r2,r2
80089748:	9885883a 	add	r2,r19,r2
8008974c:	1026d7fa 	srli	r19,r2,31
80089750:	396dc83a 	sub	r22,r7,r5
80089754:	b1000044 	addi	r4,r22,1
80089758:	9885883a 	add	r2,r19,r2
8008975c:	1027d07a 	srai	r19,r2,1
80089760:	2485883a 	add	r2,r4,r18
80089764:	980d883a 	mov	r6,r19
80089768:	9880022e 	bgeu	r19,r2,80089774 <__sfvwrite_r+0x3ec>
8008976c:	1027883a 	mov	r19,r2
80089770:	100d883a 	mov	r6,r2
80089774:	18c1000c 	andi	r3,r3,1024
80089778:	18001c26 	beq	r3,zero,800897ec <__sfvwrite_r+0x464>
8008977c:	300b883a 	mov	r5,r6
80089780:	a809883a 	mov	r4,r21
80089784:	008251c0 	call	8008251c <_malloc_r>
80089788:	102f883a 	mov	r23,r2
8008978c:	10002926 	beq	r2,zero,80089834 <__sfvwrite_r+0x4ac>
80089790:	81400417 	ldw	r5,16(r16)
80089794:	b00d883a 	mov	r6,r22
80089798:	1009883a 	mov	r4,r2
8008979c:	0082da40 	call	80082da4 <memcpy>
800897a0:	8080030b 	ldhu	r2,12(r16)
800897a4:	00fedfc4 	movi	r3,-1153
800897a8:	10c4703a 	and	r2,r2,r3
800897ac:	10802014 	ori	r2,r2,128
800897b0:	8080030d 	sth	r2,12(r16)
800897b4:	bd89883a 	add	r4,r23,r22
800897b8:	9d8fc83a 	sub	r7,r19,r22
800897bc:	85c00415 	stw	r23,16(r16)
800897c0:	84c00515 	stw	r19,20(r16)
800897c4:	81000015 	stw	r4,0(r16)
800897c8:	9027883a 	mov	r19,r18
800897cc:	81c00215 	stw	r7,8(r16)
800897d0:	902f883a 	mov	r23,r18
800897d4:	003f3b06 	br	800894c4 <__sfvwrite_r+0x13c>
800897d8:	800b883a 	mov	r5,r16
800897dc:	a809883a 	mov	r4,r21
800897e0:	0088b280 	call	80088b28 <_fflush_r>
800897e4:	103fb926 	beq	r2,zero,800896cc <__sfvwrite_r+0x344>
800897e8:	003f6506 	br	80089580 <__sfvwrite_r+0x1f8>
800897ec:	a809883a 	mov	r4,r21
800897f0:	008b4440 	call	8008b444 <_realloc_r>
800897f4:	102f883a 	mov	r23,r2
800897f8:	103fee1e 	bne	r2,zero,800897b4 <__sfvwrite_r+0x42c>
800897fc:	81400417 	ldw	r5,16(r16)
80089800:	a809883a 	mov	r4,r21
80089804:	00890780 	call	80089078 <_free_r>
80089808:	8080030b 	ldhu	r2,12(r16)
8008980c:	00ffdfc4 	movi	r3,-129
80089810:	1884703a 	and	r2,r3,r2
80089814:	00c00304 	movi	r3,12
80089818:	a8c00015 	stw	r3,0(r21)
8008981c:	003f5906 	br	80089584 <__sfvwrite_r+0x1fc>
80089820:	94c00044 	addi	r19,r18,1
80089824:	02000044 	movi	r8,1
80089828:	003f6006 	br	800895ac <__sfvwrite_r+0x224>
8008982c:	00bfffc4 	movi	r2,-1
80089830:	003f0306 	br	80089440 <__sfvwrite_r+0xb8>
80089834:	00800304 	movi	r2,12
80089838:	a8800015 	stw	r2,0(r21)
8008983c:	8080030b 	ldhu	r2,12(r16)
80089840:	003f5006 	br	80089584 <__sfvwrite_r+0x1fc>

80089844 <_fwalk>:
80089844:	defff704 	addi	sp,sp,-36
80089848:	dd000415 	stw	r20,16(sp)
8008984c:	dfc00815 	stw	ra,32(sp)
80089850:	ddc00715 	stw	r23,28(sp)
80089854:	dd800615 	stw	r22,24(sp)
80089858:	dd400515 	stw	r21,20(sp)
8008985c:	dcc00315 	stw	r19,12(sp)
80089860:	dc800215 	stw	r18,8(sp)
80089864:	dc400115 	stw	r17,4(sp)
80089868:	dc000015 	stw	r16,0(sp)
8008986c:	2500b804 	addi	r20,r4,736
80089870:	a0002326 	beq	r20,zero,80089900 <_fwalk+0xbc>
80089874:	282b883a 	mov	r21,r5
80089878:	002f883a 	mov	r23,zero
8008987c:	05800044 	movi	r22,1
80089880:	04ffffc4 	movi	r19,-1
80089884:	a4400117 	ldw	r17,4(r20)
80089888:	a4800217 	ldw	r18,8(r20)
8008988c:	8c7fffc4 	addi	r17,r17,-1
80089890:	88000d16 	blt	r17,zero,800898c8 <_fwalk+0x84>
80089894:	94000304 	addi	r16,r18,12
80089898:	94800384 	addi	r18,r18,14
8008989c:	8080000b 	ldhu	r2,0(r16)
800898a0:	8c7fffc4 	addi	r17,r17,-1
800898a4:	813ffd04 	addi	r4,r16,-12
800898a8:	b080042e 	bgeu	r22,r2,800898bc <_fwalk+0x78>
800898ac:	9080000f 	ldh	r2,0(r18)
800898b0:	14c00226 	beq	r2,r19,800898bc <_fwalk+0x78>
800898b4:	a83ee83a 	callr	r21
800898b8:	b8aeb03a 	or	r23,r23,r2
800898bc:	84001a04 	addi	r16,r16,104
800898c0:	94801a04 	addi	r18,r18,104
800898c4:	8cfff51e 	bne	r17,r19,8008989c <_fwalk+0x58>
800898c8:	a5000017 	ldw	r20,0(r20)
800898cc:	a03fed1e 	bne	r20,zero,80089884 <_fwalk+0x40>
800898d0:	b805883a 	mov	r2,r23
800898d4:	dfc00817 	ldw	ra,32(sp)
800898d8:	ddc00717 	ldw	r23,28(sp)
800898dc:	dd800617 	ldw	r22,24(sp)
800898e0:	dd400517 	ldw	r21,20(sp)
800898e4:	dd000417 	ldw	r20,16(sp)
800898e8:	dcc00317 	ldw	r19,12(sp)
800898ec:	dc800217 	ldw	r18,8(sp)
800898f0:	dc400117 	ldw	r17,4(sp)
800898f4:	dc000017 	ldw	r16,0(sp)
800898f8:	dec00904 	addi	sp,sp,36
800898fc:	f800283a 	ret
80089900:	002f883a 	mov	r23,zero
80089904:	003ff206 	br	800898d0 <_fwalk+0x8c>

80089908 <_fwalk_reent>:
80089908:	defff704 	addi	sp,sp,-36
8008990c:	dd000415 	stw	r20,16(sp)
80089910:	dfc00815 	stw	ra,32(sp)
80089914:	ddc00715 	stw	r23,28(sp)
80089918:	dd800615 	stw	r22,24(sp)
8008991c:	dd400515 	stw	r21,20(sp)
80089920:	dcc00315 	stw	r19,12(sp)
80089924:	dc800215 	stw	r18,8(sp)
80089928:	dc400115 	stw	r17,4(sp)
8008992c:	dc000015 	stw	r16,0(sp)
80089930:	2500b804 	addi	r20,r4,736
80089934:	a0002326 	beq	r20,zero,800899c4 <_fwalk_reent+0xbc>
80089938:	282b883a 	mov	r21,r5
8008993c:	2027883a 	mov	r19,r4
80089940:	002f883a 	mov	r23,zero
80089944:	05800044 	movi	r22,1
80089948:	04bfffc4 	movi	r18,-1
8008994c:	a4400117 	ldw	r17,4(r20)
80089950:	a4000217 	ldw	r16,8(r20)
80089954:	8c7fffc4 	addi	r17,r17,-1
80089958:	88000c16 	blt	r17,zero,8008998c <_fwalk_reent+0x84>
8008995c:	84000304 	addi	r16,r16,12
80089960:	8080000b 	ldhu	r2,0(r16)
80089964:	8c7fffc4 	addi	r17,r17,-1
80089968:	817ffd04 	addi	r5,r16,-12
8008996c:	b080052e 	bgeu	r22,r2,80089984 <_fwalk_reent+0x7c>
80089970:	8080008f 	ldh	r2,2(r16)
80089974:	9809883a 	mov	r4,r19
80089978:	14800226 	beq	r2,r18,80089984 <_fwalk_reent+0x7c>
8008997c:	a83ee83a 	callr	r21
80089980:	b8aeb03a 	or	r23,r23,r2
80089984:	84001a04 	addi	r16,r16,104
80089988:	8cbff51e 	bne	r17,r18,80089960 <_fwalk_reent+0x58>
8008998c:	a5000017 	ldw	r20,0(r20)
80089990:	a03fee1e 	bne	r20,zero,8008994c <_fwalk_reent+0x44>
80089994:	b805883a 	mov	r2,r23
80089998:	dfc00817 	ldw	ra,32(sp)
8008999c:	ddc00717 	ldw	r23,28(sp)
800899a0:	dd800617 	ldw	r22,24(sp)
800899a4:	dd400517 	ldw	r21,20(sp)
800899a8:	dd000417 	ldw	r20,16(sp)
800899ac:	dcc00317 	ldw	r19,12(sp)
800899b0:	dc800217 	ldw	r18,8(sp)
800899b4:	dc400117 	ldw	r17,4(sp)
800899b8:	dc000017 	ldw	r16,0(sp)
800899bc:	dec00904 	addi	sp,sp,36
800899c0:	f800283a 	ret
800899c4:	002f883a 	mov	r23,zero
800899c8:	003ff206 	br	80089994 <_fwalk_reent+0x8c>

800899cc <iswspace>:
800899cc:	00803fc4 	movi	r2,255
800899d0:	11000836 	bltu	r2,r4,800899f4 <iswspace+0x28>
800899d4:	00a002b4 	movhi	r2,32778
800899d8:	1081c204 	addi	r2,r2,1800
800899dc:	10800017 	ldw	r2,0(r2)
800899e0:	1109883a 	add	r4,r2,r4
800899e4:	20800043 	ldbu	r2,1(r4)
800899e8:	1080020c 	andi	r2,r2,8
800899ec:	10803fcc 	andi	r2,r2,255
800899f0:	f800283a 	ret
800899f4:	0005883a 	mov	r2,zero
800899f8:	f800283a 	ret

800899fc <_setlocale_r>:
800899fc:	30001b26 	beq	r6,zero,80089a6c <_setlocale_r+0x70>
80089a00:	016002b4 	movhi	r5,32778
80089a04:	defffe04 	addi	sp,sp,-8
80089a08:	29791c04 	addi	r5,r5,-7056
80089a0c:	3009883a 	mov	r4,r6
80089a10:	dc000015 	stw	r16,0(sp)
80089a14:	dfc00115 	stw	ra,4(sp)
80089a18:	3021883a 	mov	r16,r6
80089a1c:	008bda80 	call	8008bda8 <strcmp>
80089a20:	1000061e 	bne	r2,zero,80089a3c <_setlocale_r+0x40>
80089a24:	00a002b4 	movhi	r2,32778
80089a28:	10b85304 	addi	r2,r2,-7860
80089a2c:	dfc00117 	ldw	ra,4(sp)
80089a30:	dc000017 	ldw	r16,0(sp)
80089a34:	dec00204 	addi	sp,sp,8
80089a38:	f800283a 	ret
80089a3c:	016002b4 	movhi	r5,32778
80089a40:	29785304 	addi	r5,r5,-7860
80089a44:	8009883a 	mov	r4,r16
80089a48:	008bda80 	call	8008bda8 <strcmp>
80089a4c:	103ff526 	beq	r2,zero,80089a24 <_setlocale_r+0x28>
80089a50:	016002b4 	movhi	r5,32778
80089a54:	29786704 	addi	r5,r5,-7780
80089a58:	8009883a 	mov	r4,r16
80089a5c:	008bda80 	call	8008bda8 <strcmp>
80089a60:	103ff026 	beq	r2,zero,80089a24 <_setlocale_r+0x28>
80089a64:	0005883a 	mov	r2,zero
80089a68:	003ff006 	br	80089a2c <_setlocale_r+0x30>
80089a6c:	00a002b4 	movhi	r2,32778
80089a70:	10b85304 	addi	r2,r2,-7860
80089a74:	f800283a 	ret

80089a78 <__locale_charset>:
80089a78:	00a002b4 	movhi	r2,32778
80089a7c:	10bcde04 	addi	r2,r2,-3208
80089a80:	f800283a 	ret

80089a84 <__locale_mb_cur_max>:
80089a84:	00a002b4 	movhi	r2,32778
80089a88:	1081c304 	addi	r2,r2,1804
80089a8c:	10800017 	ldw	r2,0(r2)
80089a90:	f800283a 	ret

80089a94 <__locale_msgcharset>:
80089a94:	00a002b4 	movhi	r2,32778
80089a98:	10bcd604 	addi	r2,r2,-3240
80089a9c:	f800283a 	ret

80089aa0 <__locale_cjk_lang>:
80089aa0:	0005883a 	mov	r2,zero
80089aa4:	f800283a 	ret

80089aa8 <_localeconv_r>:
80089aa8:	00a002b4 	movhi	r2,32778
80089aac:	10bce604 	addi	r2,r2,-3176
80089ab0:	f800283a 	ret

80089ab4 <setlocale>:
80089ab4:	00a002b4 	movhi	r2,32778
80089ab8:	1081bf04 	addi	r2,r2,1788
80089abc:	280d883a 	mov	r6,r5
80089ac0:	200b883a 	mov	r5,r4
80089ac4:	11000017 	ldw	r4,0(r2)
80089ac8:	00899fc1 	jmpi	800899fc <_setlocale_r>

80089acc <localeconv>:
80089acc:	00a002b4 	movhi	r2,32778
80089ad0:	10bce604 	addi	r2,r2,-3176
80089ad4:	f800283a 	ret

80089ad8 <_lseek_r>:
80089ad8:	defffd04 	addi	sp,sp,-12
80089adc:	2805883a 	mov	r2,r5
80089ae0:	dc000015 	stw	r16,0(sp)
80089ae4:	042002b4 	movhi	r16,32778
80089ae8:	dc400115 	stw	r17,4(sp)
80089aec:	300b883a 	mov	r5,r6
80089af0:	8408e204 	addi	r16,r16,9096
80089af4:	2023883a 	mov	r17,r4
80089af8:	380d883a 	mov	r6,r7
80089afc:	1009883a 	mov	r4,r2
80089b00:	dfc00215 	stw	ra,8(sp)
80089b04:	80000015 	stw	zero,0(r16)
80089b08:	00990ac0 	call	800990ac <lseek>
80089b0c:	00ffffc4 	movi	r3,-1
80089b10:	10c00526 	beq	r2,r3,80089b28 <_lseek_r+0x50>
80089b14:	dfc00217 	ldw	ra,8(sp)
80089b18:	dc400117 	ldw	r17,4(sp)
80089b1c:	dc000017 	ldw	r16,0(sp)
80089b20:	dec00304 	addi	sp,sp,12
80089b24:	f800283a 	ret
80089b28:	80c00017 	ldw	r3,0(r16)
80089b2c:	183ff926 	beq	r3,zero,80089b14 <_lseek_r+0x3c>
80089b30:	88c00015 	stw	r3,0(r17)
80089b34:	003ff706 	br	80089b14 <_lseek_r+0x3c>

80089b38 <__smakebuf_r>:
80089b38:	2880030b 	ldhu	r2,12(r5)
80089b3c:	10c0008c 	andi	r3,r2,2
80089b40:	1800411e 	bne	r3,zero,80089c48 <__smakebuf_r+0x110>
80089b44:	deffec04 	addi	sp,sp,-80
80089b48:	dc000f15 	stw	r16,60(sp)
80089b4c:	2821883a 	mov	r16,r5
80089b50:	2940038f 	ldh	r5,14(r5)
80089b54:	dc401015 	stw	r17,64(sp)
80089b58:	dfc01315 	stw	ra,76(sp)
80089b5c:	dcc01215 	stw	r19,72(sp)
80089b60:	dc801115 	stw	r18,68(sp)
80089b64:	2023883a 	mov	r17,r4
80089b68:	28001c16 	blt	r5,zero,80089bdc <__smakebuf_r+0xa4>
80089b6c:	d80d883a 	mov	r6,sp
80089b70:	00933940 	call	80093394 <_fstat_r>
80089b74:	10001816 	blt	r2,zero,80089bd8 <__smakebuf_r+0xa0>
80089b78:	d8800117 	ldw	r2,4(sp)
80089b7c:	00e00014 	movui	r3,32768
80089b80:	10bc000c 	andi	r2,r2,61440
80089b84:	14c80020 	cmpeqi	r19,r2,8192
80089b88:	10c03726 	beq	r2,r3,80089c68 <__smakebuf_r+0x130>
80089b8c:	80c0030b 	ldhu	r3,12(r16)
80089b90:	18c20014 	ori	r3,r3,2048
80089b94:	80c0030d 	sth	r3,12(r16)
80089b98:	00c80004 	movi	r3,8192
80089b9c:	10c0521e 	bne	r2,r3,80089ce8 <__smakebuf_r+0x1b0>
80089ba0:	8140038f 	ldh	r5,14(r16)
80089ba4:	8809883a 	mov	r4,r17
80089ba8:	0093f7c0 	call	80093f7c <_isatty_r>
80089bac:	10004c26 	beq	r2,zero,80089ce0 <__smakebuf_r+0x1a8>
80089bb0:	8080030b 	ldhu	r2,12(r16)
80089bb4:	80c010c4 	addi	r3,r16,67
80089bb8:	80c00015 	stw	r3,0(r16)
80089bbc:	10800054 	ori	r2,r2,1
80089bc0:	8080030d 	sth	r2,12(r16)
80089bc4:	00800044 	movi	r2,1
80089bc8:	80c00415 	stw	r3,16(r16)
80089bcc:	80800515 	stw	r2,20(r16)
80089bd0:	04810004 	movi	r18,1024
80089bd4:	00000706 	br	80089bf4 <__smakebuf_r+0xbc>
80089bd8:	8080030b 	ldhu	r2,12(r16)
80089bdc:	10c0200c 	andi	r3,r2,128
80089be0:	18001f1e 	bne	r3,zero,80089c60 <__smakebuf_r+0x128>
80089be4:	04810004 	movi	r18,1024
80089be8:	10820014 	ori	r2,r2,2048
80089bec:	8080030d 	sth	r2,12(r16)
80089bf0:	0027883a 	mov	r19,zero
80089bf4:	900b883a 	mov	r5,r18
80089bf8:	8809883a 	mov	r4,r17
80089bfc:	008251c0 	call	8008251c <_malloc_r>
80089c00:	10002c26 	beq	r2,zero,80089cb4 <__smakebuf_r+0x17c>
80089c04:	80c0030b 	ldhu	r3,12(r16)
80089c08:	01200274 	movhi	r4,32777
80089c0c:	2122ef04 	addi	r4,r4,-29764
80089c10:	89000f15 	stw	r4,60(r17)
80089c14:	18c02014 	ori	r3,r3,128
80089c18:	80c0030d 	sth	r3,12(r16)
80089c1c:	80800015 	stw	r2,0(r16)
80089c20:	80800415 	stw	r2,16(r16)
80089c24:	84800515 	stw	r18,20(r16)
80089c28:	98001a1e 	bne	r19,zero,80089c94 <__smakebuf_r+0x15c>
80089c2c:	dfc01317 	ldw	ra,76(sp)
80089c30:	dcc01217 	ldw	r19,72(sp)
80089c34:	dc801117 	ldw	r18,68(sp)
80089c38:	dc401017 	ldw	r17,64(sp)
80089c3c:	dc000f17 	ldw	r16,60(sp)
80089c40:	dec01404 	addi	sp,sp,80
80089c44:	f800283a 	ret
80089c48:	288010c4 	addi	r2,r5,67
80089c4c:	28800015 	stw	r2,0(r5)
80089c50:	28800415 	stw	r2,16(r5)
80089c54:	00800044 	movi	r2,1
80089c58:	28800515 	stw	r2,20(r5)
80089c5c:	f800283a 	ret
80089c60:	04801004 	movi	r18,64
80089c64:	003fe006 	br	80089be8 <__smakebuf_r+0xb0>
80089c68:	81000a17 	ldw	r4,40(r16)
80089c6c:	00e00234 	movhi	r3,32776
80089c70:	18ccbd04 	addi	r3,r3,13044
80089c74:	20ffc51e 	bne	r4,r3,80089b8c <__smakebuf_r+0x54>
80089c78:	8080030b 	ldhu	r2,12(r16)
80089c7c:	04810004 	movi	r18,1024
80089c80:	84801315 	stw	r18,76(r16)
80089c84:	1484b03a 	or	r2,r2,r18
80089c88:	8080030d 	sth	r2,12(r16)
80089c8c:	0027883a 	mov	r19,zero
80089c90:	003fd806 	br	80089bf4 <__smakebuf_r+0xbc>
80089c94:	8140038f 	ldh	r5,14(r16)
80089c98:	8809883a 	mov	r4,r17
80089c9c:	0093f7c0 	call	80093f7c <_isatty_r>
80089ca0:	103fe226 	beq	r2,zero,80089c2c <__smakebuf_r+0xf4>
80089ca4:	8080030b 	ldhu	r2,12(r16)
80089ca8:	10800054 	ori	r2,r2,1
80089cac:	8080030d 	sth	r2,12(r16)
80089cb0:	003fde06 	br	80089c2c <__smakebuf_r+0xf4>
80089cb4:	8080030b 	ldhu	r2,12(r16)
80089cb8:	10c0800c 	andi	r3,r2,512
80089cbc:	183fdb1e 	bne	r3,zero,80089c2c <__smakebuf_r+0xf4>
80089cc0:	10800094 	ori	r2,r2,2
80089cc4:	80c010c4 	addi	r3,r16,67
80089cc8:	8080030d 	sth	r2,12(r16)
80089ccc:	00800044 	movi	r2,1
80089cd0:	80c00015 	stw	r3,0(r16)
80089cd4:	80c00415 	stw	r3,16(r16)
80089cd8:	80800515 	stw	r2,20(r16)
80089cdc:	003fd306 	br	80089c2c <__smakebuf_r+0xf4>
80089ce0:	04810004 	movi	r18,1024
80089ce4:	003fc306 	br	80089bf4 <__smakebuf_r+0xbc>
80089ce8:	0027883a 	mov	r19,zero
80089cec:	04810004 	movi	r18,1024
80089cf0:	003fc006 	br	80089bf4 <__smakebuf_r+0xbc>

80089cf4 <_mbrtowc_r>:
80089cf4:	defff704 	addi	sp,sp,-36
80089cf8:	00a002b4 	movhi	r2,32778
80089cfc:	dc800715 	stw	r18,28(sp)
80089d00:	dc400615 	stw	r17,24(sp)
80089d04:	dc000515 	stw	r16,20(sp)
80089d08:	1081c404 	addi	r2,r2,1808
80089d0c:	dfc00815 	stw	ra,32(sp)
80089d10:	2021883a 	mov	r16,r4
80089d14:	dc400917 	ldw	r17,36(sp)
80089d18:	14800017 	ldw	r18,0(r2)
80089d1c:	30001626 	beq	r6,zero,80089d78 <_mbrtowc_r+0x84>
80089d20:	d9400215 	stw	r5,8(sp)
80089d24:	d9800315 	stw	r6,12(sp)
80089d28:	d9c00415 	stw	r7,16(sp)
80089d2c:	0089a780 	call	80089a78 <__locale_charset>
80089d30:	d9c00417 	ldw	r7,16(sp)
80089d34:	d9800317 	ldw	r6,12(sp)
80089d38:	d9400217 	ldw	r5,8(sp)
80089d3c:	d8800015 	stw	r2,0(sp)
80089d40:	dc400115 	stw	r17,4(sp)
80089d44:	8009883a 	mov	r4,r16
80089d48:	903ee83a 	callr	r18
80089d4c:	00ffffc4 	movi	r3,-1
80089d50:	10c0031e 	bne	r2,r3,80089d60 <_mbrtowc_r+0x6c>
80089d54:	88000015 	stw	zero,0(r17)
80089d58:	00c02284 	movi	r3,138
80089d5c:	80c00015 	stw	r3,0(r16)
80089d60:	dfc00817 	ldw	ra,32(sp)
80089d64:	dc800717 	ldw	r18,28(sp)
80089d68:	dc400617 	ldw	r17,24(sp)
80089d6c:	dc000517 	ldw	r16,20(sp)
80089d70:	dec00904 	addi	sp,sp,36
80089d74:	f800283a 	ret
80089d78:	0089a780 	call	80089a78 <__locale_charset>
80089d7c:	01a002b4 	movhi	r6,32778
80089d80:	31b86704 	addi	r6,r6,-7780
80089d84:	dc400115 	stw	r17,4(sp)
80089d88:	d8800015 	stw	r2,0(sp)
80089d8c:	01c00044 	movi	r7,1
80089d90:	000b883a 	mov	r5,zero
80089d94:	8009883a 	mov	r4,r16
80089d98:	903ee83a 	callr	r18
80089d9c:	003feb06 	br	80089d4c <_mbrtowc_r+0x58>

80089da0 <mbrtowc>:
80089da0:	defff704 	addi	sp,sp,-36
80089da4:	00a002b4 	movhi	r2,32778
80089da8:	dc800415 	stw	r18,16(sp)
80089dac:	dc400315 	stw	r17,12(sp)
80089db0:	1081bf04 	addi	r2,r2,1788
80089db4:	dfc00815 	stw	ra,32(sp)
80089db8:	dd400715 	stw	r21,28(sp)
80089dbc:	dd000615 	stw	r20,24(sp)
80089dc0:	dcc00515 	stw	r19,20(sp)
80089dc4:	dc000215 	stw	r16,8(sp)
80089dc8:	3825883a 	mov	r18,r7
80089dcc:	14400017 	ldw	r17,0(r2)
80089dd0:	28001c26 	beq	r5,zero,80089e44 <mbrtowc+0xa4>
80089dd4:	00a002b4 	movhi	r2,32778
80089dd8:	1081c404 	addi	r2,r2,1808
80089ddc:	15400017 	ldw	r21,0(r2)
80089de0:	2821883a 	mov	r16,r5
80089de4:	2027883a 	mov	r19,r4
80089de8:	3029883a 	mov	r20,r6
80089dec:	0089a780 	call	80089a78 <__locale_charset>
80089df0:	d8800015 	stw	r2,0(sp)
80089df4:	dc800115 	stw	r18,4(sp)
80089df8:	a00f883a 	mov	r7,r20
80089dfc:	800d883a 	mov	r6,r16
80089e00:	980b883a 	mov	r5,r19
80089e04:	8809883a 	mov	r4,r17
80089e08:	a83ee83a 	callr	r21
80089e0c:	00ffffc4 	movi	r3,-1
80089e10:	10c0031e 	bne	r2,r3,80089e20 <mbrtowc+0x80>
80089e14:	90000015 	stw	zero,0(r18)
80089e18:	00c02284 	movi	r3,138
80089e1c:	88c00015 	stw	r3,0(r17)
80089e20:	dfc00817 	ldw	ra,32(sp)
80089e24:	dd400717 	ldw	r21,28(sp)
80089e28:	dd000617 	ldw	r20,24(sp)
80089e2c:	dcc00517 	ldw	r19,20(sp)
80089e30:	dc800417 	ldw	r18,16(sp)
80089e34:	dc400317 	ldw	r17,12(sp)
80089e38:	dc000217 	ldw	r16,8(sp)
80089e3c:	dec00904 	addi	sp,sp,36
80089e40:	f800283a 	ret
80089e44:	00a002b4 	movhi	r2,32778
80089e48:	1081c404 	addi	r2,r2,1808
80089e4c:	14000017 	ldw	r16,0(r2)
80089e50:	0089a780 	call	80089a78 <__locale_charset>
80089e54:	01a002b4 	movhi	r6,32778
80089e58:	31b86704 	addi	r6,r6,-7780
80089e5c:	dc800115 	stw	r18,4(sp)
80089e60:	d8800015 	stw	r2,0(sp)
80089e64:	01c00044 	movi	r7,1
80089e68:	000b883a 	mov	r5,zero
80089e6c:	8809883a 	mov	r4,r17
80089e70:	803ee83a 	callr	r16
80089e74:	003fe506 	br	80089e0c <mbrtowc+0x6c>

80089e78 <__ascii_mbtowc>:
80089e78:	deffff04 	addi	sp,sp,-4
80089e7c:	28000826 	beq	r5,zero,80089ea0 <__ascii_mbtowc+0x28>
80089e80:	30000926 	beq	r6,zero,80089ea8 <__ascii_mbtowc+0x30>
80089e84:	38000b26 	beq	r7,zero,80089eb4 <__ascii_mbtowc+0x3c>
80089e88:	30800003 	ldbu	r2,0(r6)
80089e8c:	28800015 	stw	r2,0(r5)
80089e90:	30800003 	ldbu	r2,0(r6)
80089e94:	1004c03a 	cmpne	r2,r2,zero
80089e98:	dec00104 	addi	sp,sp,4
80089e9c:	f800283a 	ret
80089ea0:	d80b883a 	mov	r5,sp
80089ea4:	303ff71e 	bne	r6,zero,80089e84 <__ascii_mbtowc+0xc>
80089ea8:	0005883a 	mov	r2,zero
80089eac:	dec00104 	addi	sp,sp,4
80089eb0:	f800283a 	ret
80089eb4:	00bfff84 	movi	r2,-2
80089eb8:	003ff706 	br	80089e98 <__ascii_mbtowc+0x20>

80089ebc <_mbtowc_r>:
80089ebc:	00a002b4 	movhi	r2,32778
80089ec0:	defff804 	addi	sp,sp,-32
80089ec4:	1081c404 	addi	r2,r2,1808
80089ec8:	dfc00715 	stw	ra,28(sp)
80089ecc:	dc000615 	stw	r16,24(sp)
80089ed0:	14000017 	ldw	r16,0(r2)
80089ed4:	d9000215 	stw	r4,8(sp)
80089ed8:	d9400315 	stw	r5,12(sp)
80089edc:	d9800415 	stw	r6,16(sp)
80089ee0:	d9c00515 	stw	r7,20(sp)
80089ee4:	0089a780 	call	80089a78 <__locale_charset>
80089ee8:	d8800015 	stw	r2,0(sp)
80089eec:	d8800817 	ldw	r2,32(sp)
80089ef0:	d9c00517 	ldw	r7,20(sp)
80089ef4:	d9800417 	ldw	r6,16(sp)
80089ef8:	d9400317 	ldw	r5,12(sp)
80089efc:	d9000217 	ldw	r4,8(sp)
80089f00:	d8800115 	stw	r2,4(sp)
80089f04:	803ee83a 	callr	r16
80089f08:	dfc00717 	ldw	ra,28(sp)
80089f0c:	dc000617 	ldw	r16,24(sp)
80089f10:	dec00804 	addi	sp,sp,32
80089f14:	f800283a 	ret

80089f18 <memchr>:
80089f18:	208000cc 	andi	r2,r4,3
80089f1c:	280f883a 	mov	r7,r5
80089f20:	10003426 	beq	r2,zero,80089ff4 <memchr+0xdc>
80089f24:	30bfffc4 	addi	r2,r6,-1
80089f28:	30001a26 	beq	r6,zero,80089f94 <memchr+0x7c>
80089f2c:	20c00003 	ldbu	r3,0(r4)
80089f30:	29803fcc 	andi	r6,r5,255
80089f34:	30c0051e 	bne	r6,r3,80089f4c <memchr+0x34>
80089f38:	00001806 	br	80089f9c <memchr+0x84>
80089f3c:	10001526 	beq	r2,zero,80089f94 <memchr+0x7c>
80089f40:	20c00003 	ldbu	r3,0(r4)
80089f44:	10bfffc4 	addi	r2,r2,-1
80089f48:	30c01426 	beq	r6,r3,80089f9c <memchr+0x84>
80089f4c:	21000044 	addi	r4,r4,1
80089f50:	20c000cc 	andi	r3,r4,3
80089f54:	183ff91e 	bne	r3,zero,80089f3c <memchr+0x24>
80089f58:	020000c4 	movi	r8,3
80089f5c:	40801136 	bltu	r8,r2,80089fa4 <memchr+0x8c>
80089f60:	10000c26 	beq	r2,zero,80089f94 <memchr+0x7c>
80089f64:	20c00003 	ldbu	r3,0(r4)
80089f68:	29403fcc 	andi	r5,r5,255
80089f6c:	28c00b26 	beq	r5,r3,80089f9c <memchr+0x84>
80089f70:	20c00044 	addi	r3,r4,1
80089f74:	39803fcc 	andi	r6,r7,255
80089f78:	2089883a 	add	r4,r4,r2
80089f7c:	00000306 	br	80089f8c <memchr+0x74>
80089f80:	18c00044 	addi	r3,r3,1
80089f84:	197fffc3 	ldbu	r5,-1(r3)
80089f88:	31400526 	beq	r6,r5,80089fa0 <memchr+0x88>
80089f8c:	1805883a 	mov	r2,r3
80089f90:	20fffb1e 	bne	r4,r3,80089f80 <memchr+0x68>
80089f94:	0005883a 	mov	r2,zero
80089f98:	f800283a 	ret
80089f9c:	2005883a 	mov	r2,r4
80089fa0:	f800283a 	ret
80089fa4:	28c03fcc 	andi	r3,r5,255
80089fa8:	1812923a 	slli	r9,r3,8
80089fac:	02ffbff4 	movhi	r11,65279
80089fb0:	02a02074 	movhi	r10,32897
80089fb4:	48d2b03a 	or	r9,r9,r3
80089fb8:	4806943a 	slli	r3,r9,16
80089fbc:	5affbfc4 	addi	r11,r11,-257
80089fc0:	52a02004 	addi	r10,r10,-32640
80089fc4:	48d2b03a 	or	r9,r9,r3
80089fc8:	20c00017 	ldw	r3,0(r4)
80089fcc:	48c6f03a 	xor	r3,r9,r3
80089fd0:	1acd883a 	add	r6,r3,r11
80089fd4:	00c6303a 	nor	r3,zero,r3
80089fd8:	30c6703a 	and	r3,r6,r3
80089fdc:	1a86703a 	and	r3,r3,r10
80089fe0:	183fe01e 	bne	r3,zero,80089f64 <memchr+0x4c>
80089fe4:	10bfff04 	addi	r2,r2,-4
80089fe8:	21000104 	addi	r4,r4,4
80089fec:	40bff636 	bltu	r8,r2,80089fc8 <memchr+0xb0>
80089ff0:	003fdb06 	br	80089f60 <memchr+0x48>
80089ff4:	3005883a 	mov	r2,r6
80089ff8:	003fd706 	br	80089f58 <memchr+0x40>

80089ffc <memmove>:
80089ffc:	2005883a 	mov	r2,r4
8008a000:	29000b2e 	bgeu	r5,r4,8008a030 <memmove+0x34>
8008a004:	298f883a 	add	r7,r5,r6
8008a008:	21c0092e 	bgeu	r4,r7,8008a030 <memmove+0x34>
8008a00c:	2187883a 	add	r3,r4,r6
8008a010:	198bc83a 	sub	r5,r3,r6
8008a014:	30004826 	beq	r6,zero,8008a138 <memmove+0x13c>
8008a018:	39ffffc4 	addi	r7,r7,-1
8008a01c:	39000003 	ldbu	r4,0(r7)
8008a020:	18ffffc4 	addi	r3,r3,-1
8008a024:	19000005 	stb	r4,0(r3)
8008a028:	28fffb1e 	bne	r5,r3,8008a018 <memmove+0x1c>
8008a02c:	f800283a 	ret
8008a030:	00c003c4 	movi	r3,15
8008a034:	1980412e 	bgeu	r3,r6,8008a13c <memmove+0x140>
8008a038:	2886b03a 	or	r3,r5,r2
8008a03c:	18c000cc 	andi	r3,r3,3
8008a040:	1800401e 	bne	r3,zero,8008a144 <memmove+0x148>
8008a044:	33fffc04 	addi	r15,r6,-16
8008a048:	781ed13a 	srli	r15,r15,4
8008a04c:	28c00104 	addi	r3,r5,4
8008a050:	13400104 	addi	r13,r2,4
8008a054:	781c913a 	slli	r14,r15,4
8008a058:	2b000204 	addi	r12,r5,8
8008a05c:	12c00204 	addi	r11,r2,8
8008a060:	73800504 	addi	r14,r14,20
8008a064:	2a800304 	addi	r10,r5,12
8008a068:	12400304 	addi	r9,r2,12
8008a06c:	2b9d883a 	add	r14,r5,r14
8008a070:	2811883a 	mov	r8,r5
8008a074:	100f883a 	mov	r7,r2
8008a078:	41000017 	ldw	r4,0(r8)
8008a07c:	39c00404 	addi	r7,r7,16
8008a080:	18c00404 	addi	r3,r3,16
8008a084:	393ffc15 	stw	r4,-16(r7)
8008a088:	193ffc17 	ldw	r4,-16(r3)
8008a08c:	6b400404 	addi	r13,r13,16
8008a090:	5ac00404 	addi	r11,r11,16
8008a094:	693ffc15 	stw	r4,-16(r13)
8008a098:	61000017 	ldw	r4,0(r12)
8008a09c:	4a400404 	addi	r9,r9,16
8008a0a0:	42000404 	addi	r8,r8,16
8008a0a4:	593ffc15 	stw	r4,-16(r11)
8008a0a8:	51000017 	ldw	r4,0(r10)
8008a0ac:	63000404 	addi	r12,r12,16
8008a0b0:	52800404 	addi	r10,r10,16
8008a0b4:	493ffc15 	stw	r4,-16(r9)
8008a0b8:	1bbfef1e 	bne	r3,r14,8008a078 <memmove+0x7c>
8008a0bc:	79000044 	addi	r4,r15,1
8008a0c0:	2008913a 	slli	r4,r4,4
8008a0c4:	328003cc 	andi	r10,r6,15
8008a0c8:	02c000c4 	movi	r11,3
8008a0cc:	1107883a 	add	r3,r2,r4
8008a0d0:	290b883a 	add	r5,r5,r4
8008a0d4:	5a801e2e 	bgeu	r11,r10,8008a150 <memmove+0x154>
8008a0d8:	1813883a 	mov	r9,r3
8008a0dc:	2811883a 	mov	r8,r5
8008a0e0:	500f883a 	mov	r7,r10
8008a0e4:	41000017 	ldw	r4,0(r8)
8008a0e8:	4a400104 	addi	r9,r9,4
8008a0ec:	39ffff04 	addi	r7,r7,-4
8008a0f0:	493fff15 	stw	r4,-4(r9)
8008a0f4:	42000104 	addi	r8,r8,4
8008a0f8:	59fffa36 	bltu	r11,r7,8008a0e4 <memmove+0xe8>
8008a0fc:	513fff04 	addi	r4,r10,-4
8008a100:	2008d0ba 	srli	r4,r4,2
8008a104:	318000cc 	andi	r6,r6,3
8008a108:	21000044 	addi	r4,r4,1
8008a10c:	2109883a 	add	r4,r4,r4
8008a110:	2109883a 	add	r4,r4,r4
8008a114:	1907883a 	add	r3,r3,r4
8008a118:	290b883a 	add	r5,r5,r4
8008a11c:	30000b26 	beq	r6,zero,8008a14c <memmove+0x150>
8008a120:	198d883a 	add	r6,r3,r6
8008a124:	29c00003 	ldbu	r7,0(r5)
8008a128:	18c00044 	addi	r3,r3,1
8008a12c:	29400044 	addi	r5,r5,1
8008a130:	19ffffc5 	stb	r7,-1(r3)
8008a134:	19bffb1e 	bne	r3,r6,8008a124 <memmove+0x128>
8008a138:	f800283a 	ret
8008a13c:	1007883a 	mov	r3,r2
8008a140:	003ff606 	br	8008a11c <memmove+0x120>
8008a144:	1007883a 	mov	r3,r2
8008a148:	003ff506 	br	8008a120 <memmove+0x124>
8008a14c:	f800283a 	ret
8008a150:	500d883a 	mov	r6,r10
8008a154:	003ff106 	br	8008a11c <memmove+0x120>

8008a158 <memset>:
8008a158:	20c000cc 	andi	r3,r4,3
8008a15c:	2005883a 	mov	r2,r4
8008a160:	18004426 	beq	r3,zero,8008a274 <memset+0x11c>
8008a164:	31ffffc4 	addi	r7,r6,-1
8008a168:	30004026 	beq	r6,zero,8008a26c <memset+0x114>
8008a16c:	2813883a 	mov	r9,r5
8008a170:	200d883a 	mov	r6,r4
8008a174:	2007883a 	mov	r3,r4
8008a178:	00000406 	br	8008a18c <memset+0x34>
8008a17c:	3a3fffc4 	addi	r8,r7,-1
8008a180:	31800044 	addi	r6,r6,1
8008a184:	38003926 	beq	r7,zero,8008a26c <memset+0x114>
8008a188:	400f883a 	mov	r7,r8
8008a18c:	18c00044 	addi	r3,r3,1
8008a190:	32400005 	stb	r9,0(r6)
8008a194:	1a0000cc 	andi	r8,r3,3
8008a198:	403ff81e 	bne	r8,zero,8008a17c <memset+0x24>
8008a19c:	010000c4 	movi	r4,3
8008a1a0:	21c02d2e 	bgeu	r4,r7,8008a258 <memset+0x100>
8008a1a4:	29003fcc 	andi	r4,r5,255
8008a1a8:	200c923a 	slli	r6,r4,8
8008a1ac:	3108b03a 	or	r4,r6,r4
8008a1b0:	200c943a 	slli	r6,r4,16
8008a1b4:	218cb03a 	or	r6,r4,r6
8008a1b8:	010003c4 	movi	r4,15
8008a1bc:	21c0182e 	bgeu	r4,r7,8008a220 <memset+0xc8>
8008a1c0:	3b3ffc04 	addi	r12,r7,-16
8008a1c4:	6018d13a 	srli	r12,r12,4
8008a1c8:	1a000104 	addi	r8,r3,4
8008a1cc:	1ac00204 	addi	r11,r3,8
8008a1d0:	6008913a 	slli	r4,r12,4
8008a1d4:	1a800304 	addi	r10,r3,12
8008a1d8:	1813883a 	mov	r9,r3
8008a1dc:	21000504 	addi	r4,r4,20
8008a1e0:	1909883a 	add	r4,r3,r4
8008a1e4:	49800015 	stw	r6,0(r9)
8008a1e8:	41800015 	stw	r6,0(r8)
8008a1ec:	59800015 	stw	r6,0(r11)
8008a1f0:	51800015 	stw	r6,0(r10)
8008a1f4:	42000404 	addi	r8,r8,16
8008a1f8:	4a400404 	addi	r9,r9,16
8008a1fc:	5ac00404 	addi	r11,r11,16
8008a200:	52800404 	addi	r10,r10,16
8008a204:	413ff71e 	bne	r8,r4,8008a1e4 <memset+0x8c>
8008a208:	63000044 	addi	r12,r12,1
8008a20c:	6018913a 	slli	r12,r12,4
8008a210:	39c003cc 	andi	r7,r7,15
8008a214:	010000c4 	movi	r4,3
8008a218:	1b07883a 	add	r3,r3,r12
8008a21c:	21c00e2e 	bgeu	r4,r7,8008a258 <memset+0x100>
8008a220:	1813883a 	mov	r9,r3
8008a224:	3811883a 	mov	r8,r7
8008a228:	010000c4 	movi	r4,3
8008a22c:	49800015 	stw	r6,0(r9)
8008a230:	423fff04 	addi	r8,r8,-4
8008a234:	4a400104 	addi	r9,r9,4
8008a238:	223ffc36 	bltu	r4,r8,8008a22c <memset+0xd4>
8008a23c:	393fff04 	addi	r4,r7,-4
8008a240:	2008d0ba 	srli	r4,r4,2
8008a244:	39c000cc 	andi	r7,r7,3
8008a248:	21000044 	addi	r4,r4,1
8008a24c:	2109883a 	add	r4,r4,r4
8008a250:	2109883a 	add	r4,r4,r4
8008a254:	1907883a 	add	r3,r3,r4
8008a258:	38000526 	beq	r7,zero,8008a270 <memset+0x118>
8008a25c:	19cf883a 	add	r7,r3,r7
8008a260:	19400005 	stb	r5,0(r3)
8008a264:	18c00044 	addi	r3,r3,1
8008a268:	38fffd1e 	bne	r7,r3,8008a260 <memset+0x108>
8008a26c:	f800283a 	ret
8008a270:	f800283a 	ret
8008a274:	2007883a 	mov	r3,r4
8008a278:	300f883a 	mov	r7,r6
8008a27c:	003fc706 	br	8008a19c <memset+0x44>

8008a280 <_Balloc>:
8008a280:	20801317 	ldw	r2,76(r4)
8008a284:	defffc04 	addi	sp,sp,-16
8008a288:	dc400115 	stw	r17,4(sp)
8008a28c:	dc000015 	stw	r16,0(sp)
8008a290:	dfc00315 	stw	ra,12(sp)
8008a294:	dc800215 	stw	r18,8(sp)
8008a298:	2023883a 	mov	r17,r4
8008a29c:	2821883a 	mov	r16,r5
8008a2a0:	10000f26 	beq	r2,zero,8008a2e0 <_Balloc+0x60>
8008a2a4:	8407883a 	add	r3,r16,r16
8008a2a8:	18c7883a 	add	r3,r3,r3
8008a2ac:	10c7883a 	add	r3,r2,r3
8008a2b0:	18800017 	ldw	r2,0(r3)
8008a2b4:	10001126 	beq	r2,zero,8008a2fc <_Balloc+0x7c>
8008a2b8:	11000017 	ldw	r4,0(r2)
8008a2bc:	19000015 	stw	r4,0(r3)
8008a2c0:	10000415 	stw	zero,16(r2)
8008a2c4:	10000315 	stw	zero,12(r2)
8008a2c8:	dfc00317 	ldw	ra,12(sp)
8008a2cc:	dc800217 	ldw	r18,8(sp)
8008a2d0:	dc400117 	ldw	r17,4(sp)
8008a2d4:	dc000017 	ldw	r16,0(sp)
8008a2d8:	dec00404 	addi	sp,sp,16
8008a2dc:	f800283a 	ret
8008a2e0:	01800844 	movi	r6,33
8008a2e4:	01400104 	movi	r5,4
8008a2e8:	0092fc40 	call	80092fc4 <_calloc_r>
8008a2ec:	88801315 	stw	r2,76(r17)
8008a2f0:	103fec1e 	bne	r2,zero,8008a2a4 <_Balloc+0x24>
8008a2f4:	0005883a 	mov	r2,zero
8008a2f8:	003ff306 	br	8008a2c8 <_Balloc+0x48>
8008a2fc:	01400044 	movi	r5,1
8008a300:	2c24983a 	sll	r18,r5,r16
8008a304:	8809883a 	mov	r4,r17
8008a308:	91800144 	addi	r6,r18,5
8008a30c:	318d883a 	add	r6,r6,r6
8008a310:	318d883a 	add	r6,r6,r6
8008a314:	0092fc40 	call	80092fc4 <_calloc_r>
8008a318:	103ff626 	beq	r2,zero,8008a2f4 <_Balloc+0x74>
8008a31c:	14000115 	stw	r16,4(r2)
8008a320:	14800215 	stw	r18,8(r2)
8008a324:	003fe606 	br	8008a2c0 <_Balloc+0x40>

8008a328 <_Bfree>:
8008a328:	28000826 	beq	r5,zero,8008a34c <_Bfree+0x24>
8008a32c:	28c00117 	ldw	r3,4(r5)
8008a330:	20801317 	ldw	r2,76(r4)
8008a334:	18c7883a 	add	r3,r3,r3
8008a338:	18c7883a 	add	r3,r3,r3
8008a33c:	10c5883a 	add	r2,r2,r3
8008a340:	10c00017 	ldw	r3,0(r2)
8008a344:	28c00015 	stw	r3,0(r5)
8008a348:	11400015 	stw	r5,0(r2)
8008a34c:	f800283a 	ret

8008a350 <__multadd>:
8008a350:	defffa04 	addi	sp,sp,-24
8008a354:	dc800315 	stw	r18,12(sp)
8008a358:	dc400215 	stw	r17,8(sp)
8008a35c:	dc000115 	stw	r16,4(sp)
8008a360:	2823883a 	mov	r17,r5
8008a364:	2c000417 	ldw	r16,16(r5)
8008a368:	dfc00515 	stw	ra,20(sp)
8008a36c:	dcc00415 	stw	r19,16(sp)
8008a370:	2025883a 	mov	r18,r4
8008a374:	29400504 	addi	r5,r5,20
8008a378:	0011883a 	mov	r8,zero
8008a37c:	28c00017 	ldw	r3,0(r5)
8008a380:	29400104 	addi	r5,r5,4
8008a384:	42000044 	addi	r8,r8,1
8008a388:	18bfffcc 	andi	r2,r3,65535
8008a38c:	1185383a 	mul	r2,r2,r6
8008a390:	1806d43a 	srli	r3,r3,16
8008a394:	11cf883a 	add	r7,r2,r7
8008a398:	3808d43a 	srli	r4,r7,16
8008a39c:	1987383a 	mul	r3,r3,r6
8008a3a0:	38bfffcc 	andi	r2,r7,65535
8008a3a4:	1907883a 	add	r3,r3,r4
8008a3a8:	1808943a 	slli	r4,r3,16
8008a3ac:	180ed43a 	srli	r7,r3,16
8008a3b0:	2085883a 	add	r2,r4,r2
8008a3b4:	28bfff15 	stw	r2,-4(r5)
8008a3b8:	443ff016 	blt	r8,r16,8008a37c <__multadd+0x2c>
8008a3bc:	38000926 	beq	r7,zero,8008a3e4 <__multadd+0x94>
8008a3c0:	88800217 	ldw	r2,8(r17)
8008a3c4:	80800f0e 	bge	r16,r2,8008a404 <__multadd+0xb4>
8008a3c8:	80800144 	addi	r2,r16,5
8008a3cc:	1085883a 	add	r2,r2,r2
8008a3d0:	1085883a 	add	r2,r2,r2
8008a3d4:	8885883a 	add	r2,r17,r2
8008a3d8:	11c00015 	stw	r7,0(r2)
8008a3dc:	84000044 	addi	r16,r16,1
8008a3e0:	8c000415 	stw	r16,16(r17)
8008a3e4:	8805883a 	mov	r2,r17
8008a3e8:	dfc00517 	ldw	ra,20(sp)
8008a3ec:	dcc00417 	ldw	r19,16(sp)
8008a3f0:	dc800317 	ldw	r18,12(sp)
8008a3f4:	dc400217 	ldw	r17,8(sp)
8008a3f8:	dc000117 	ldw	r16,4(sp)
8008a3fc:	dec00604 	addi	sp,sp,24
8008a400:	f800283a 	ret
8008a404:	89400117 	ldw	r5,4(r17)
8008a408:	9009883a 	mov	r4,r18
8008a40c:	d9c00015 	stw	r7,0(sp)
8008a410:	29400044 	addi	r5,r5,1
8008a414:	008a2800 	call	8008a280 <_Balloc>
8008a418:	89800417 	ldw	r6,16(r17)
8008a41c:	89400304 	addi	r5,r17,12
8008a420:	11000304 	addi	r4,r2,12
8008a424:	31800084 	addi	r6,r6,2
8008a428:	318d883a 	add	r6,r6,r6
8008a42c:	318d883a 	add	r6,r6,r6
8008a430:	1027883a 	mov	r19,r2
8008a434:	0082da40 	call	80082da4 <memcpy>
8008a438:	d9c00017 	ldw	r7,0(sp)
8008a43c:	88000a26 	beq	r17,zero,8008a468 <__multadd+0x118>
8008a440:	88c00117 	ldw	r3,4(r17)
8008a444:	90801317 	ldw	r2,76(r18)
8008a448:	18c7883a 	add	r3,r3,r3
8008a44c:	18c7883a 	add	r3,r3,r3
8008a450:	10c5883a 	add	r2,r2,r3
8008a454:	10c00017 	ldw	r3,0(r2)
8008a458:	88c00015 	stw	r3,0(r17)
8008a45c:	14400015 	stw	r17,0(r2)
8008a460:	9823883a 	mov	r17,r19
8008a464:	003fd806 	br	8008a3c8 <__multadd+0x78>
8008a468:	9823883a 	mov	r17,r19
8008a46c:	003fd606 	br	8008a3c8 <__multadd+0x78>

8008a470 <__s2b>:
8008a470:	defff904 	addi	sp,sp,-28
8008a474:	dc400115 	stw	r17,4(sp)
8008a478:	dc000015 	stw	r16,0(sp)
8008a47c:	2023883a 	mov	r17,r4
8008a480:	2821883a 	mov	r16,r5
8008a484:	39000204 	addi	r4,r7,8
8008a488:	01400244 	movi	r5,9
8008a48c:	dcc00315 	stw	r19,12(sp)
8008a490:	dc800215 	stw	r18,8(sp)
8008a494:	dfc00615 	stw	ra,24(sp)
8008a498:	dd400515 	stw	r21,20(sp)
8008a49c:	dd000415 	stw	r20,16(sp)
8008a4a0:	3825883a 	mov	r18,r7
8008a4a4:	3027883a 	mov	r19,r6
8008a4a8:	00822480 	call	80082248 <__divsi3>
8008a4ac:	00c00044 	movi	r3,1
8008a4b0:	000b883a 	mov	r5,zero
8008a4b4:	1880030e 	bge	r3,r2,8008a4c4 <__s2b+0x54>
8008a4b8:	18c7883a 	add	r3,r3,r3
8008a4bc:	29400044 	addi	r5,r5,1
8008a4c0:	18bffd16 	blt	r3,r2,8008a4b8 <__s2b+0x48>
8008a4c4:	8809883a 	mov	r4,r17
8008a4c8:	008a2800 	call	8008a280 <_Balloc>
8008a4cc:	d8c00717 	ldw	r3,28(sp)
8008a4d0:	10c00515 	stw	r3,20(r2)
8008a4d4:	00c00044 	movi	r3,1
8008a4d8:	10c00415 	stw	r3,16(r2)
8008a4dc:	00c00244 	movi	r3,9
8008a4e0:	1cc0210e 	bge	r3,r19,8008a568 <__s2b+0xf8>
8008a4e4:	80eb883a 	add	r21,r16,r3
8008a4e8:	a829883a 	mov	r20,r21
8008a4ec:	84e1883a 	add	r16,r16,r19
8008a4f0:	a1c00007 	ldb	r7,0(r20)
8008a4f4:	01800284 	movi	r6,10
8008a4f8:	a5000044 	addi	r20,r20,1
8008a4fc:	100b883a 	mov	r5,r2
8008a500:	39fff404 	addi	r7,r7,-48
8008a504:	8809883a 	mov	r4,r17
8008a508:	008a3500 	call	8008a350 <__multadd>
8008a50c:	a43ff81e 	bne	r20,r16,8008a4f0 <__s2b+0x80>
8008a510:	ace1883a 	add	r16,r21,r19
8008a514:	843ffe04 	addi	r16,r16,-8
8008a518:	9c800a0e 	bge	r19,r18,8008a544 <__s2b+0xd4>
8008a51c:	94e5c83a 	sub	r18,r18,r19
8008a520:	84a5883a 	add	r18,r16,r18
8008a524:	81c00007 	ldb	r7,0(r16)
8008a528:	01800284 	movi	r6,10
8008a52c:	84000044 	addi	r16,r16,1
8008a530:	100b883a 	mov	r5,r2
8008a534:	39fff404 	addi	r7,r7,-48
8008a538:	8809883a 	mov	r4,r17
8008a53c:	008a3500 	call	8008a350 <__multadd>
8008a540:	84bff81e 	bne	r16,r18,8008a524 <__s2b+0xb4>
8008a544:	dfc00617 	ldw	ra,24(sp)
8008a548:	dd400517 	ldw	r21,20(sp)
8008a54c:	dd000417 	ldw	r20,16(sp)
8008a550:	dcc00317 	ldw	r19,12(sp)
8008a554:	dc800217 	ldw	r18,8(sp)
8008a558:	dc400117 	ldw	r17,4(sp)
8008a55c:	dc000017 	ldw	r16,0(sp)
8008a560:	dec00704 	addi	sp,sp,28
8008a564:	f800283a 	ret
8008a568:	84000284 	addi	r16,r16,10
8008a56c:	1827883a 	mov	r19,r3
8008a570:	003fe906 	br	8008a518 <__s2b+0xa8>

8008a574 <__hi0bits>:
8008a574:	20bfffec 	andhi	r2,r4,65535
8008a578:	1000141e 	bne	r2,zero,8008a5cc <__hi0bits+0x58>
8008a57c:	2008943a 	slli	r4,r4,16
8008a580:	00800404 	movi	r2,16
8008a584:	20ffc02c 	andhi	r3,r4,65280
8008a588:	1800021e 	bne	r3,zero,8008a594 <__hi0bits+0x20>
8008a58c:	2008923a 	slli	r4,r4,8
8008a590:	10800204 	addi	r2,r2,8
8008a594:	20fc002c 	andhi	r3,r4,61440
8008a598:	1800021e 	bne	r3,zero,8008a5a4 <__hi0bits+0x30>
8008a59c:	2008913a 	slli	r4,r4,4
8008a5a0:	10800104 	addi	r2,r2,4
8008a5a4:	20f0002c 	andhi	r3,r4,49152
8008a5a8:	1800031e 	bne	r3,zero,8008a5b8 <__hi0bits+0x44>
8008a5ac:	2109883a 	add	r4,r4,r4
8008a5b0:	10800084 	addi	r2,r2,2
8008a5b4:	2109883a 	add	r4,r4,r4
8008a5b8:	20000316 	blt	r4,zero,8008a5c8 <__hi0bits+0x54>
8008a5bc:	2110002c 	andhi	r4,r4,16384
8008a5c0:	2000041e 	bne	r4,zero,8008a5d4 <__hi0bits+0x60>
8008a5c4:	00800804 	movi	r2,32
8008a5c8:	f800283a 	ret
8008a5cc:	0005883a 	mov	r2,zero
8008a5d0:	003fec06 	br	8008a584 <__hi0bits+0x10>
8008a5d4:	10800044 	addi	r2,r2,1
8008a5d8:	f800283a 	ret

8008a5dc <__lo0bits>:
8008a5dc:	20c00017 	ldw	r3,0(r4)
8008a5e0:	188001cc 	andi	r2,r3,7
8008a5e4:	10000826 	beq	r2,zero,8008a608 <__lo0bits+0x2c>
8008a5e8:	1880004c 	andi	r2,r3,1
8008a5ec:	1000211e 	bne	r2,zero,8008a674 <__lo0bits+0x98>
8008a5f0:	1880008c 	andi	r2,r3,2
8008a5f4:	1000211e 	bne	r2,zero,8008a67c <__lo0bits+0xa0>
8008a5f8:	1806d0ba 	srli	r3,r3,2
8008a5fc:	00800084 	movi	r2,2
8008a600:	20c00015 	stw	r3,0(r4)
8008a604:	f800283a 	ret
8008a608:	18bfffcc 	andi	r2,r3,65535
8008a60c:	10001326 	beq	r2,zero,8008a65c <__lo0bits+0x80>
8008a610:	0005883a 	mov	r2,zero
8008a614:	19403fcc 	andi	r5,r3,255
8008a618:	2800021e 	bne	r5,zero,8008a624 <__lo0bits+0x48>
8008a61c:	1806d23a 	srli	r3,r3,8
8008a620:	10800204 	addi	r2,r2,8
8008a624:	194003cc 	andi	r5,r3,15
8008a628:	2800021e 	bne	r5,zero,8008a634 <__lo0bits+0x58>
8008a62c:	1806d13a 	srli	r3,r3,4
8008a630:	10800104 	addi	r2,r2,4
8008a634:	194000cc 	andi	r5,r3,3
8008a638:	2800021e 	bne	r5,zero,8008a644 <__lo0bits+0x68>
8008a63c:	1806d0ba 	srli	r3,r3,2
8008a640:	10800084 	addi	r2,r2,2
8008a644:	1940004c 	andi	r5,r3,1
8008a648:	2800081e 	bne	r5,zero,8008a66c <__lo0bits+0x90>
8008a64c:	1806d07a 	srli	r3,r3,1
8008a650:	1800051e 	bne	r3,zero,8008a668 <__lo0bits+0x8c>
8008a654:	00800804 	movi	r2,32
8008a658:	f800283a 	ret
8008a65c:	1806d43a 	srli	r3,r3,16
8008a660:	00800404 	movi	r2,16
8008a664:	003feb06 	br	8008a614 <__lo0bits+0x38>
8008a668:	10800044 	addi	r2,r2,1
8008a66c:	20c00015 	stw	r3,0(r4)
8008a670:	f800283a 	ret
8008a674:	0005883a 	mov	r2,zero
8008a678:	f800283a 	ret
8008a67c:	1806d07a 	srli	r3,r3,1
8008a680:	00800044 	movi	r2,1
8008a684:	20c00015 	stw	r3,0(r4)
8008a688:	f800283a 	ret

8008a68c <__i2b>:
8008a68c:	defffd04 	addi	sp,sp,-12
8008a690:	dc000015 	stw	r16,0(sp)
8008a694:	04000044 	movi	r16,1
8008a698:	dc400115 	stw	r17,4(sp)
8008a69c:	2823883a 	mov	r17,r5
8008a6a0:	800b883a 	mov	r5,r16
8008a6a4:	dfc00215 	stw	ra,8(sp)
8008a6a8:	008a2800 	call	8008a280 <_Balloc>
8008a6ac:	14400515 	stw	r17,20(r2)
8008a6b0:	14000415 	stw	r16,16(r2)
8008a6b4:	dfc00217 	ldw	ra,8(sp)
8008a6b8:	dc400117 	ldw	r17,4(sp)
8008a6bc:	dc000017 	ldw	r16,0(sp)
8008a6c0:	dec00304 	addi	sp,sp,12
8008a6c4:	f800283a 	ret

8008a6c8 <__multiply>:
8008a6c8:	defffa04 	addi	sp,sp,-24
8008a6cc:	dcc00315 	stw	r19,12(sp)
8008a6d0:	dc800215 	stw	r18,8(sp)
8008a6d4:	34c00417 	ldw	r19,16(r6)
8008a6d8:	2c800417 	ldw	r18,16(r5)
8008a6dc:	dd000415 	stw	r20,16(sp)
8008a6e0:	dc400115 	stw	r17,4(sp)
8008a6e4:	dfc00515 	stw	ra,20(sp)
8008a6e8:	dc000015 	stw	r16,0(sp)
8008a6ec:	2829883a 	mov	r20,r5
8008a6f0:	3023883a 	mov	r17,r6
8008a6f4:	94c0050e 	bge	r18,r19,8008a70c <__multiply+0x44>
8008a6f8:	9007883a 	mov	r3,r18
8008a6fc:	3029883a 	mov	r20,r6
8008a700:	9825883a 	mov	r18,r19
8008a704:	2823883a 	mov	r17,r5
8008a708:	1827883a 	mov	r19,r3
8008a70c:	a0800217 	ldw	r2,8(r20)
8008a710:	94e1883a 	add	r16,r18,r19
8008a714:	a1400117 	ldw	r5,4(r20)
8008a718:	1400010e 	bge	r2,r16,8008a720 <__multiply+0x58>
8008a71c:	29400044 	addi	r5,r5,1
8008a720:	008a2800 	call	8008a280 <_Balloc>
8008a724:	8415883a 	add	r10,r16,r16
8008a728:	12c00504 	addi	r11,r2,20
8008a72c:	5295883a 	add	r10,r10,r10
8008a730:	5a95883a 	add	r10,r11,r10
8008a734:	5807883a 	mov	r3,r11
8008a738:	5a80032e 	bgeu	r11,r10,8008a748 <__multiply+0x80>
8008a73c:	18000015 	stw	zero,0(r3)
8008a740:	18c00104 	addi	r3,r3,4
8008a744:	1abffd36 	bltu	r3,r10,8008a73c <__multiply+0x74>
8008a748:	9ce7883a 	add	r19,r19,r19
8008a74c:	94a5883a 	add	r18,r18,r18
8008a750:	89800504 	addi	r6,r17,20
8008a754:	9ce7883a 	add	r19,r19,r19
8008a758:	a3400504 	addi	r13,r20,20
8008a75c:	94a5883a 	add	r18,r18,r18
8008a760:	34d9883a 	add	r12,r6,r19
8008a764:	6c93883a 	add	r9,r13,r18
8008a768:	3300422e 	bgeu	r6,r12,8008a874 <__multiply+0x1ac>
8008a76c:	37c00017 	ldw	ra,0(r6)
8008a770:	fbffffcc 	andi	r15,ra,65535
8008a774:	78001b26 	beq	r15,zero,8008a7e4 <__multiply+0x11c>
8008a778:	5811883a 	mov	r8,r11
8008a77c:	681d883a 	mov	r14,r13
8008a780:	000f883a 	mov	r7,zero
8008a784:	71000017 	ldw	r4,0(r14)
8008a788:	40c00017 	ldw	r3,0(r8)
8008a78c:	73800104 	addi	r14,r14,4
8008a790:	217fffcc 	andi	r5,r4,65535
8008a794:	2bcb383a 	mul	r5,r5,r15
8008a798:	2008d43a 	srli	r4,r4,16
8008a79c:	1c7fffcc 	andi	r17,r3,65535
8008a7a0:	2c4b883a 	add	r5,r5,r17
8008a7a4:	29cb883a 	add	r5,r5,r7
8008a7a8:	23c9383a 	mul	r4,r4,r15
8008a7ac:	1806d43a 	srli	r3,r3,16
8008a7b0:	280ed43a 	srli	r7,r5,16
8008a7b4:	297fffcc 	andi	r5,r5,65535
8008a7b8:	20c7883a 	add	r3,r4,r3
8008a7bc:	19c7883a 	add	r3,r3,r7
8008a7c0:	1808943a 	slli	r4,r3,16
8008a7c4:	4023883a 	mov	r17,r8
8008a7c8:	180ed43a 	srli	r7,r3,16
8008a7cc:	214ab03a 	or	r5,r4,r5
8008a7d0:	41400015 	stw	r5,0(r8)
8008a7d4:	42000104 	addi	r8,r8,4
8008a7d8:	727fea36 	bltu	r14,r9,8008a784 <__multiply+0xbc>
8008a7dc:	89c00115 	stw	r7,4(r17)
8008a7e0:	37c00017 	ldw	ra,0(r6)
8008a7e4:	f83ed43a 	srli	ra,ra,16
8008a7e8:	f8001f26 	beq	ra,zero,8008a868 <__multiply+0x1a0>
8008a7ec:	58c00017 	ldw	r3,0(r11)
8008a7f0:	681d883a 	mov	r14,r13
8008a7f4:	581f883a 	mov	r15,r11
8008a7f8:	1811883a 	mov	r8,r3
8008a7fc:	5825883a 	mov	r18,r11
8008a800:	000f883a 	mov	r7,zero
8008a804:	00000106 	br	8008a80c <__multiply+0x144>
8008a808:	8825883a 	mov	r18,r17
8008a80c:	7140000b 	ldhu	r5,0(r14)
8008a810:	4010d43a 	srli	r8,r8,16
8008a814:	193fffcc 	andi	r4,r3,65535
8008a818:	2fcb383a 	mul	r5,r5,ra
8008a81c:	7bc00104 	addi	r15,r15,4
8008a820:	73800104 	addi	r14,r14,4
8008a824:	2a0b883a 	add	r5,r5,r8
8008a828:	29cb883a 	add	r5,r5,r7
8008a82c:	2806943a 	slli	r3,r5,16
8008a830:	94400104 	addi	r17,r18,4
8008a834:	280ad43a 	srli	r5,r5,16
8008a838:	1908b03a 	or	r4,r3,r4
8008a83c:	793fff15 	stw	r4,-4(r15)
8008a840:	70ffff17 	ldw	r3,-4(r14)
8008a844:	8a000017 	ldw	r8,0(r17)
8008a848:	1806d43a 	srli	r3,r3,16
8008a84c:	413fffcc 	andi	r4,r8,65535
8008a850:	1fc7383a 	mul	r3,r3,ra
8008a854:	1907883a 	add	r3,r3,r4
8008a858:	1947883a 	add	r3,r3,r5
8008a85c:	180ed43a 	srli	r7,r3,16
8008a860:	727fe936 	bltu	r14,r9,8008a808 <__multiply+0x140>
8008a864:	90c00115 	stw	r3,4(r18)
8008a868:	31800104 	addi	r6,r6,4
8008a86c:	5ac00104 	addi	r11,r11,4
8008a870:	333fbe36 	bltu	r6,r12,8008a76c <__multiply+0xa4>
8008a874:	0400090e 	bge	zero,r16,8008a89c <__multiply+0x1d4>
8008a878:	50ffff17 	ldw	r3,-4(r10)
8008a87c:	52bfff04 	addi	r10,r10,-4
8008a880:	18000326 	beq	r3,zero,8008a890 <__multiply+0x1c8>
8008a884:	00000506 	br	8008a89c <__multiply+0x1d4>
8008a888:	50c00017 	ldw	r3,0(r10)
8008a88c:	1800031e 	bne	r3,zero,8008a89c <__multiply+0x1d4>
8008a890:	843fffc4 	addi	r16,r16,-1
8008a894:	52bfff04 	addi	r10,r10,-4
8008a898:	803ffb1e 	bne	r16,zero,8008a888 <__multiply+0x1c0>
8008a89c:	14000415 	stw	r16,16(r2)
8008a8a0:	dfc00517 	ldw	ra,20(sp)
8008a8a4:	dd000417 	ldw	r20,16(sp)
8008a8a8:	dcc00317 	ldw	r19,12(sp)
8008a8ac:	dc800217 	ldw	r18,8(sp)
8008a8b0:	dc400117 	ldw	r17,4(sp)
8008a8b4:	dc000017 	ldw	r16,0(sp)
8008a8b8:	dec00604 	addi	sp,sp,24
8008a8bc:	f800283a 	ret

8008a8c0 <__pow5mult>:
8008a8c0:	defffa04 	addi	sp,sp,-24
8008a8c4:	dcc00315 	stw	r19,12(sp)
8008a8c8:	dc000015 	stw	r16,0(sp)
8008a8cc:	dfc00515 	stw	ra,20(sp)
8008a8d0:	dd000415 	stw	r20,16(sp)
8008a8d4:	dc800215 	stw	r18,8(sp)
8008a8d8:	dc400115 	stw	r17,4(sp)
8008a8dc:	308000cc 	andi	r2,r6,3
8008a8e0:	3021883a 	mov	r16,r6
8008a8e4:	2027883a 	mov	r19,r4
8008a8e8:	10002f1e 	bne	r2,zero,8008a9a8 <__pow5mult+0xe8>
8008a8ec:	2825883a 	mov	r18,r5
8008a8f0:	8021d0ba 	srai	r16,r16,2
8008a8f4:	80001a26 	beq	r16,zero,8008a960 <__pow5mult+0xa0>
8008a8f8:	9c401217 	ldw	r17,72(r19)
8008a8fc:	8800061e 	bne	r17,zero,8008a918 <__pow5mult+0x58>
8008a900:	00003406 	br	8008a9d4 <__pow5mult+0x114>
8008a904:	8021d07a 	srai	r16,r16,1
8008a908:	80001526 	beq	r16,zero,8008a960 <__pow5mult+0xa0>
8008a90c:	88800017 	ldw	r2,0(r17)
8008a910:	10001c26 	beq	r2,zero,8008a984 <__pow5mult+0xc4>
8008a914:	1023883a 	mov	r17,r2
8008a918:	8080004c 	andi	r2,r16,1
8008a91c:	103ff926 	beq	r2,zero,8008a904 <__pow5mult+0x44>
8008a920:	880d883a 	mov	r6,r17
8008a924:	900b883a 	mov	r5,r18
8008a928:	9809883a 	mov	r4,r19
8008a92c:	008a6c80 	call	8008a6c8 <__multiply>
8008a930:	90001b26 	beq	r18,zero,8008a9a0 <__pow5mult+0xe0>
8008a934:	91000117 	ldw	r4,4(r18)
8008a938:	98c01317 	ldw	r3,76(r19)
8008a93c:	8021d07a 	srai	r16,r16,1
8008a940:	2109883a 	add	r4,r4,r4
8008a944:	2109883a 	add	r4,r4,r4
8008a948:	1907883a 	add	r3,r3,r4
8008a94c:	19000017 	ldw	r4,0(r3)
8008a950:	91000015 	stw	r4,0(r18)
8008a954:	1c800015 	stw	r18,0(r3)
8008a958:	1025883a 	mov	r18,r2
8008a95c:	803feb1e 	bne	r16,zero,8008a90c <__pow5mult+0x4c>
8008a960:	9005883a 	mov	r2,r18
8008a964:	dfc00517 	ldw	ra,20(sp)
8008a968:	dd000417 	ldw	r20,16(sp)
8008a96c:	dcc00317 	ldw	r19,12(sp)
8008a970:	dc800217 	ldw	r18,8(sp)
8008a974:	dc400117 	ldw	r17,4(sp)
8008a978:	dc000017 	ldw	r16,0(sp)
8008a97c:	dec00604 	addi	sp,sp,24
8008a980:	f800283a 	ret
8008a984:	880d883a 	mov	r6,r17
8008a988:	880b883a 	mov	r5,r17
8008a98c:	9809883a 	mov	r4,r19
8008a990:	008a6c80 	call	8008a6c8 <__multiply>
8008a994:	88800015 	stw	r2,0(r17)
8008a998:	10000015 	stw	zero,0(r2)
8008a99c:	003fdd06 	br	8008a914 <__pow5mult+0x54>
8008a9a0:	1025883a 	mov	r18,r2
8008a9a4:	003fd706 	br	8008a904 <__pow5mult+0x44>
8008a9a8:	10bfffc4 	addi	r2,r2,-1
8008a9ac:	1085883a 	add	r2,r2,r2
8008a9b0:	00e002b4 	movhi	r3,32778
8008a9b4:	18f91f04 	addi	r3,r3,-7044
8008a9b8:	1085883a 	add	r2,r2,r2
8008a9bc:	1885883a 	add	r2,r3,r2
8008a9c0:	11800017 	ldw	r6,0(r2)
8008a9c4:	000f883a 	mov	r7,zero
8008a9c8:	008a3500 	call	8008a350 <__multadd>
8008a9cc:	1025883a 	mov	r18,r2
8008a9d0:	003fc706 	br	8008a8f0 <__pow5mult+0x30>
8008a9d4:	05000044 	movi	r20,1
8008a9d8:	a00b883a 	mov	r5,r20
8008a9dc:	9809883a 	mov	r4,r19
8008a9e0:	008a2800 	call	8008a280 <_Balloc>
8008a9e4:	1023883a 	mov	r17,r2
8008a9e8:	00809c44 	movi	r2,625
8008a9ec:	88800515 	stw	r2,20(r17)
8008a9f0:	8d000415 	stw	r20,16(r17)
8008a9f4:	9c401215 	stw	r17,72(r19)
8008a9f8:	88000015 	stw	zero,0(r17)
8008a9fc:	003fc606 	br	8008a918 <__pow5mult+0x58>

8008aa00 <__lshift>:
8008aa00:	defff904 	addi	sp,sp,-28
8008aa04:	dd400515 	stw	r21,20(sp)
8008aa08:	dcc00315 	stw	r19,12(sp)
8008aa0c:	302bd17a 	srai	r21,r6,5
8008aa10:	2cc00417 	ldw	r19,16(r5)
8008aa14:	28800217 	ldw	r2,8(r5)
8008aa18:	dd000415 	stw	r20,16(sp)
8008aa1c:	ace7883a 	add	r19,r21,r19
8008aa20:	dc800215 	stw	r18,8(sp)
8008aa24:	dc400115 	stw	r17,4(sp)
8008aa28:	dc000015 	stw	r16,0(sp)
8008aa2c:	dfc00615 	stw	ra,24(sp)
8008aa30:	9c000044 	addi	r16,r19,1
8008aa34:	2823883a 	mov	r17,r5
8008aa38:	3029883a 	mov	r20,r6
8008aa3c:	2025883a 	mov	r18,r4
8008aa40:	29400117 	ldw	r5,4(r5)
8008aa44:	1400030e 	bge	r2,r16,8008aa54 <__lshift+0x54>
8008aa48:	1085883a 	add	r2,r2,r2
8008aa4c:	29400044 	addi	r5,r5,1
8008aa50:	143ffd16 	blt	r2,r16,8008aa48 <__lshift+0x48>
8008aa54:	9009883a 	mov	r4,r18
8008aa58:	008a2800 	call	8008a280 <_Balloc>
8008aa5c:	10c00504 	addi	r3,r2,20
8008aa60:	0540070e 	bge	zero,r21,8008aa80 <__lshift+0x80>
8008aa64:	ad6b883a 	add	r21,r21,r21
8008aa68:	ad6b883a 	add	r21,r21,r21
8008aa6c:	1809883a 	mov	r4,r3
8008aa70:	1d47883a 	add	r3,r3,r21
8008aa74:	20000015 	stw	zero,0(r4)
8008aa78:	21000104 	addi	r4,r4,4
8008aa7c:	193ffd1e 	bne	r3,r4,8008aa74 <__lshift+0x74>
8008aa80:	8a000417 	ldw	r8,16(r17)
8008aa84:	89000504 	addi	r4,r17,20
8008aa88:	a18007cc 	andi	r6,r20,31
8008aa8c:	4211883a 	add	r8,r8,r8
8008aa90:	4211883a 	add	r8,r8,r8
8008aa94:	2211883a 	add	r8,r4,r8
8008aa98:	30002326 	beq	r6,zero,8008ab28 <__lshift+0x128>
8008aa9c:	02400804 	movi	r9,32
8008aaa0:	4993c83a 	sub	r9,r9,r6
8008aaa4:	000b883a 	mov	r5,zero
8008aaa8:	21c00017 	ldw	r7,0(r4)
8008aaac:	1815883a 	mov	r10,r3
8008aab0:	18c00104 	addi	r3,r3,4
8008aab4:	398e983a 	sll	r7,r7,r6
8008aab8:	21000104 	addi	r4,r4,4
8008aabc:	394ab03a 	or	r5,r7,r5
8008aac0:	197fff15 	stw	r5,-4(r3)
8008aac4:	217fff17 	ldw	r5,-4(r4)
8008aac8:	2a4ad83a 	srl	r5,r5,r9
8008aacc:	223ff636 	bltu	r4,r8,8008aaa8 <__lshift+0xa8>
8008aad0:	51400115 	stw	r5,4(r10)
8008aad4:	28001a1e 	bne	r5,zero,8008ab40 <__lshift+0x140>
8008aad8:	843fffc4 	addi	r16,r16,-1
8008aadc:	14000415 	stw	r16,16(r2)
8008aae0:	88000826 	beq	r17,zero,8008ab04 <__lshift+0x104>
8008aae4:	89000117 	ldw	r4,4(r17)
8008aae8:	90c01317 	ldw	r3,76(r18)
8008aaec:	2109883a 	add	r4,r4,r4
8008aaf0:	2109883a 	add	r4,r4,r4
8008aaf4:	1907883a 	add	r3,r3,r4
8008aaf8:	19000017 	ldw	r4,0(r3)
8008aafc:	89000015 	stw	r4,0(r17)
8008ab00:	1c400015 	stw	r17,0(r3)
8008ab04:	dfc00617 	ldw	ra,24(sp)
8008ab08:	dd400517 	ldw	r21,20(sp)
8008ab0c:	dd000417 	ldw	r20,16(sp)
8008ab10:	dcc00317 	ldw	r19,12(sp)
8008ab14:	dc800217 	ldw	r18,8(sp)
8008ab18:	dc400117 	ldw	r17,4(sp)
8008ab1c:	dc000017 	ldw	r16,0(sp)
8008ab20:	dec00704 	addi	sp,sp,28
8008ab24:	f800283a 	ret
8008ab28:	21400017 	ldw	r5,0(r4)
8008ab2c:	18c00104 	addi	r3,r3,4
8008ab30:	21000104 	addi	r4,r4,4
8008ab34:	197fff15 	stw	r5,-4(r3)
8008ab38:	223ffb36 	bltu	r4,r8,8008ab28 <__lshift+0x128>
8008ab3c:	003fe606 	br	8008aad8 <__lshift+0xd8>
8008ab40:	9c000084 	addi	r16,r19,2
8008ab44:	003fe406 	br	8008aad8 <__lshift+0xd8>

8008ab48 <__mcmp>:
8008ab48:	20800417 	ldw	r2,16(r4)
8008ab4c:	28c00417 	ldw	r3,16(r5)
8008ab50:	10c5c83a 	sub	r2,r2,r3
8008ab54:	1000111e 	bne	r2,zero,8008ab9c <__mcmp+0x54>
8008ab58:	18c7883a 	add	r3,r3,r3
8008ab5c:	18c7883a 	add	r3,r3,r3
8008ab60:	21000504 	addi	r4,r4,20
8008ab64:	29400504 	addi	r5,r5,20
8008ab68:	20c5883a 	add	r2,r4,r3
8008ab6c:	28cb883a 	add	r5,r5,r3
8008ab70:	00000106 	br	8008ab78 <__mcmp+0x30>
8008ab74:	20800a2e 	bgeu	r4,r2,8008aba0 <__mcmp+0x58>
8008ab78:	10bfff04 	addi	r2,r2,-4
8008ab7c:	297fff04 	addi	r5,r5,-4
8008ab80:	11800017 	ldw	r6,0(r2)
8008ab84:	28c00017 	ldw	r3,0(r5)
8008ab88:	30fffa26 	beq	r6,r3,8008ab74 <__mcmp+0x2c>
8008ab8c:	30c00236 	bltu	r6,r3,8008ab98 <__mcmp+0x50>
8008ab90:	00800044 	movi	r2,1
8008ab94:	f800283a 	ret
8008ab98:	00bfffc4 	movi	r2,-1
8008ab9c:	f800283a 	ret
8008aba0:	0005883a 	mov	r2,zero
8008aba4:	f800283a 	ret

8008aba8 <__mdiff>:
8008aba8:	28c00417 	ldw	r3,16(r5)
8008abac:	30800417 	ldw	r2,16(r6)
8008abb0:	defffa04 	addi	sp,sp,-24
8008abb4:	dcc00315 	stw	r19,12(sp)
8008abb8:	dc800215 	stw	r18,8(sp)
8008abbc:	dfc00515 	stw	ra,20(sp)
8008abc0:	dd000415 	stw	r20,16(sp)
8008abc4:	dc400115 	stw	r17,4(sp)
8008abc8:	dc000015 	stw	r16,0(sp)
8008abcc:	1887c83a 	sub	r3,r3,r2
8008abd0:	2825883a 	mov	r18,r5
8008abd4:	3027883a 	mov	r19,r6
8008abd8:	1800141e 	bne	r3,zero,8008ac2c <__mdiff+0x84>
8008abdc:	1085883a 	add	r2,r2,r2
8008abe0:	1085883a 	add	r2,r2,r2
8008abe4:	2a000504 	addi	r8,r5,20
8008abe8:	34000504 	addi	r16,r6,20
8008abec:	4087883a 	add	r3,r8,r2
8008abf0:	8085883a 	add	r2,r16,r2
8008abf4:	00000106 	br	8008abfc <__mdiff+0x54>
8008abf8:	40c0592e 	bgeu	r8,r3,8008ad60 <__mdiff+0x1b8>
8008abfc:	18ffff04 	addi	r3,r3,-4
8008ac00:	10bfff04 	addi	r2,r2,-4
8008ac04:	19c00017 	ldw	r7,0(r3)
8008ac08:	11400017 	ldw	r5,0(r2)
8008ac0c:	397ffa26 	beq	r7,r5,8008abf8 <__mdiff+0x50>
8008ac10:	3940592e 	bgeu	r7,r5,8008ad78 <__mdiff+0x1d0>
8008ac14:	9005883a 	mov	r2,r18
8008ac18:	4023883a 	mov	r17,r8
8008ac1c:	9825883a 	mov	r18,r19
8008ac20:	05000044 	movi	r20,1
8008ac24:	1027883a 	mov	r19,r2
8008ac28:	00000406 	br	8008ac3c <__mdiff+0x94>
8008ac2c:	18005616 	blt	r3,zero,8008ad88 <__mdiff+0x1e0>
8008ac30:	34400504 	addi	r17,r6,20
8008ac34:	2c000504 	addi	r16,r5,20
8008ac38:	0029883a 	mov	r20,zero
8008ac3c:	91400117 	ldw	r5,4(r18)
8008ac40:	008a2800 	call	8008a280 <_Balloc>
8008ac44:	92400417 	ldw	r9,16(r18)
8008ac48:	9b000417 	ldw	r12,16(r19)
8008ac4c:	12c00504 	addi	r11,r2,20
8008ac50:	4a51883a 	add	r8,r9,r9
8008ac54:	6319883a 	add	r12,r12,r12
8008ac58:	4211883a 	add	r8,r8,r8
8008ac5c:	6319883a 	add	r12,r12,r12
8008ac60:	15000315 	stw	r20,12(r2)
8008ac64:	8211883a 	add	r8,r16,r8
8008ac68:	8b19883a 	add	r12,r17,r12
8008ac6c:	0007883a 	mov	r3,zero
8008ac70:	81400017 	ldw	r5,0(r16)
8008ac74:	89c00017 	ldw	r7,0(r17)
8008ac78:	59800104 	addi	r6,r11,4
8008ac7c:	293fffcc 	andi	r4,r5,65535
8008ac80:	20c7883a 	add	r3,r4,r3
8008ac84:	393fffcc 	andi	r4,r7,65535
8008ac88:	1909c83a 	sub	r4,r3,r4
8008ac8c:	280ad43a 	srli	r5,r5,16
8008ac90:	380ed43a 	srli	r7,r7,16
8008ac94:	2007d43a 	srai	r3,r4,16
8008ac98:	213fffcc 	andi	r4,r4,65535
8008ac9c:	29cbc83a 	sub	r5,r5,r7
8008aca0:	28c7883a 	add	r3,r5,r3
8008aca4:	180a943a 	slli	r5,r3,16
8008aca8:	8c400104 	addi	r17,r17,4
8008acac:	84000104 	addi	r16,r16,4
8008acb0:	2908b03a 	or	r4,r5,r4
8008acb4:	59000015 	stw	r4,0(r11)
8008acb8:	1807d43a 	srai	r3,r3,16
8008acbc:	3015883a 	mov	r10,r6
8008acc0:	3017883a 	mov	r11,r6
8008acc4:	8b3fea36 	bltu	r17,r12,8008ac70 <__mdiff+0xc8>
8008acc8:	8200162e 	bgeu	r16,r8,8008ad24 <__mdiff+0x17c>
8008accc:	8017883a 	mov	r11,r16
8008acd0:	59400017 	ldw	r5,0(r11)
8008acd4:	31800104 	addi	r6,r6,4
8008acd8:	5ac00104 	addi	r11,r11,4
8008acdc:	293fffcc 	andi	r4,r5,65535
8008ace0:	20c7883a 	add	r3,r4,r3
8008ace4:	280ed43a 	srli	r7,r5,16
8008ace8:	180bd43a 	srai	r5,r3,16
8008acec:	193fffcc 	andi	r4,r3,65535
8008acf0:	3947883a 	add	r3,r7,r5
8008acf4:	180a943a 	slli	r5,r3,16
8008acf8:	1807d43a 	srai	r3,r3,16
8008acfc:	2908b03a 	or	r4,r5,r4
8008ad00:	313fff15 	stw	r4,-4(r6)
8008ad04:	5a3ff236 	bltu	r11,r8,8008acd0 <__mdiff+0x128>
8008ad08:	0406303a 	nor	r3,zero,r16
8008ad0c:	1a07883a 	add	r3,r3,r8
8008ad10:	1806d0ba 	srli	r3,r3,2
8008ad14:	18c00044 	addi	r3,r3,1
8008ad18:	18c7883a 	add	r3,r3,r3
8008ad1c:	18c7883a 	add	r3,r3,r3
8008ad20:	50d5883a 	add	r10,r10,r3
8008ad24:	50ffff04 	addi	r3,r10,-4
8008ad28:	2000041e 	bne	r4,zero,8008ad3c <__mdiff+0x194>
8008ad2c:	18ffff04 	addi	r3,r3,-4
8008ad30:	19000017 	ldw	r4,0(r3)
8008ad34:	4a7fffc4 	addi	r9,r9,-1
8008ad38:	203ffc26 	beq	r4,zero,8008ad2c <__mdiff+0x184>
8008ad3c:	12400415 	stw	r9,16(r2)
8008ad40:	dfc00517 	ldw	ra,20(sp)
8008ad44:	dd000417 	ldw	r20,16(sp)
8008ad48:	dcc00317 	ldw	r19,12(sp)
8008ad4c:	dc800217 	ldw	r18,8(sp)
8008ad50:	dc400117 	ldw	r17,4(sp)
8008ad54:	dc000017 	ldw	r16,0(sp)
8008ad58:	dec00604 	addi	sp,sp,24
8008ad5c:	f800283a 	ret
8008ad60:	000b883a 	mov	r5,zero
8008ad64:	008a2800 	call	8008a280 <_Balloc>
8008ad68:	00c00044 	movi	r3,1
8008ad6c:	10c00415 	stw	r3,16(r2)
8008ad70:	10000515 	stw	zero,20(r2)
8008ad74:	003ff206 	br	8008ad40 <__mdiff+0x198>
8008ad78:	8023883a 	mov	r17,r16
8008ad7c:	0029883a 	mov	r20,zero
8008ad80:	4021883a 	mov	r16,r8
8008ad84:	003fad06 	br	8008ac3c <__mdiff+0x94>
8008ad88:	9005883a 	mov	r2,r18
8008ad8c:	94400504 	addi	r17,r18,20
8008ad90:	9c000504 	addi	r16,r19,20
8008ad94:	9825883a 	mov	r18,r19
8008ad98:	05000044 	movi	r20,1
8008ad9c:	1027883a 	mov	r19,r2
8008ada0:	003fa606 	br	8008ac3c <__mdiff+0x94>

8008ada4 <__ulp>:
8008ada4:	295ffc2c 	andhi	r5,r5,32752
8008ada8:	00bf3034 	movhi	r2,64704
8008adac:	2887883a 	add	r3,r5,r2
8008adb0:	00c0020e 	bge	zero,r3,8008adbc <__ulp+0x18>
8008adb4:	0005883a 	mov	r2,zero
8008adb8:	f800283a 	ret
8008adbc:	00c7c83a 	sub	r3,zero,r3
8008adc0:	1807d53a 	srai	r3,r3,20
8008adc4:	008004c4 	movi	r2,19
8008adc8:	10c00b0e 	bge	r2,r3,8008adf8 <__ulp+0x54>
8008adcc:	18bffb04 	addi	r2,r3,-20
8008add0:	01000784 	movi	r4,30
8008add4:	0007883a 	mov	r3,zero
8008add8:	20800516 	blt	r4,r2,8008adf0 <__ulp+0x4c>
8008addc:	010007c4 	movi	r4,31
8008ade0:	2089c83a 	sub	r4,r4,r2
8008ade4:	00800044 	movi	r2,1
8008ade8:	1104983a 	sll	r2,r2,r4
8008adec:	f800283a 	ret
8008adf0:	00800044 	movi	r2,1
8008adf4:	f800283a 	ret
8008adf8:	01400234 	movhi	r5,8
8008adfc:	28c7d83a 	sra	r3,r5,r3
8008ae00:	0005883a 	mov	r2,zero
8008ae04:	f800283a 	ret

8008ae08 <__b2d>:
8008ae08:	defffa04 	addi	sp,sp,-24
8008ae0c:	dc000015 	stw	r16,0(sp)
8008ae10:	24000417 	ldw	r16,16(r4)
8008ae14:	dc400115 	stw	r17,4(sp)
8008ae18:	24400504 	addi	r17,r4,20
8008ae1c:	8421883a 	add	r16,r16,r16
8008ae20:	8421883a 	add	r16,r16,r16
8008ae24:	8c21883a 	add	r16,r17,r16
8008ae28:	dc800215 	stw	r18,8(sp)
8008ae2c:	84bfff17 	ldw	r18,-4(r16)
8008ae30:	dd000415 	stw	r20,16(sp)
8008ae34:	dcc00315 	stw	r19,12(sp)
8008ae38:	9009883a 	mov	r4,r18
8008ae3c:	2829883a 	mov	r20,r5
8008ae40:	dfc00515 	stw	ra,20(sp)
8008ae44:	008a5740 	call	8008a574 <__hi0bits>
8008ae48:	00c00804 	movi	r3,32
8008ae4c:	1889c83a 	sub	r4,r3,r2
8008ae50:	a1000015 	stw	r4,0(r20)
8008ae54:	01000284 	movi	r4,10
8008ae58:	84ffff04 	addi	r19,r16,-4
8008ae5c:	20801216 	blt	r4,r2,8008aea8 <__b2d+0xa0>
8008ae60:	018002c4 	movi	r6,11
8008ae64:	308dc83a 	sub	r6,r6,r2
8008ae68:	9186d83a 	srl	r3,r18,r6
8008ae6c:	18cffc34 	orhi	r3,r3,16368
8008ae70:	8cc0212e 	bgeu	r17,r19,8008aef8 <__b2d+0xf0>
8008ae74:	813ffe17 	ldw	r4,-8(r16)
8008ae78:	218cd83a 	srl	r6,r4,r6
8008ae7c:	10800544 	addi	r2,r2,21
8008ae80:	9084983a 	sll	r2,r18,r2
8008ae84:	1184b03a 	or	r2,r2,r6
8008ae88:	dfc00517 	ldw	ra,20(sp)
8008ae8c:	dd000417 	ldw	r20,16(sp)
8008ae90:	dcc00317 	ldw	r19,12(sp)
8008ae94:	dc800217 	ldw	r18,8(sp)
8008ae98:	dc400117 	ldw	r17,4(sp)
8008ae9c:	dc000017 	ldw	r16,0(sp)
8008aea0:	dec00604 	addi	sp,sp,24
8008aea4:	f800283a 	ret
8008aea8:	8cc00f2e 	bgeu	r17,r19,8008aee8 <__b2d+0xe0>
8008aeac:	117ffd44 	addi	r5,r2,-11
8008aeb0:	80bffe17 	ldw	r2,-8(r16)
8008aeb4:	28000e26 	beq	r5,zero,8008aef0 <__b2d+0xe8>
8008aeb8:	1949c83a 	sub	r4,r3,r5
8008aebc:	9164983a 	sll	r18,r18,r5
8008aec0:	1106d83a 	srl	r3,r2,r4
8008aec4:	81bffe04 	addi	r6,r16,-8
8008aec8:	948ffc34 	orhi	r18,r18,16368
8008aecc:	90c6b03a 	or	r3,r18,r3
8008aed0:	89800e2e 	bgeu	r17,r6,8008af0c <__b2d+0x104>
8008aed4:	81bffd17 	ldw	r6,-12(r16)
8008aed8:	1144983a 	sll	r2,r2,r5
8008aedc:	310ad83a 	srl	r5,r6,r4
8008aee0:	2884b03a 	or	r2,r5,r2
8008aee4:	003fe806 	br	8008ae88 <__b2d+0x80>
8008aee8:	10bffd44 	addi	r2,r2,-11
8008aeec:	1000041e 	bne	r2,zero,8008af00 <__b2d+0xf8>
8008aef0:	90cffc34 	orhi	r3,r18,16368
8008aef4:	003fe406 	br	8008ae88 <__b2d+0x80>
8008aef8:	000d883a 	mov	r6,zero
8008aefc:	003fdf06 	br	8008ae7c <__b2d+0x74>
8008af00:	90a4983a 	sll	r18,r18,r2
8008af04:	0005883a 	mov	r2,zero
8008af08:	003ff906 	br	8008aef0 <__b2d+0xe8>
8008af0c:	1144983a 	sll	r2,r2,r5
8008af10:	003fdd06 	br	8008ae88 <__b2d+0x80>

8008af14 <__d2b>:
8008af14:	defff804 	addi	sp,sp,-32
8008af18:	dc000215 	stw	r16,8(sp)
8008af1c:	3021883a 	mov	r16,r6
8008af20:	dc400315 	stw	r17,12(sp)
8008af24:	8022907a 	slli	r17,r16,1
8008af28:	dd000615 	stw	r20,24(sp)
8008af2c:	2829883a 	mov	r20,r5
8008af30:	01400044 	movi	r5,1
8008af34:	dcc00515 	stw	r19,20(sp)
8008af38:	dc800415 	stw	r18,16(sp)
8008af3c:	dfc00715 	stw	ra,28(sp)
8008af40:	3825883a 	mov	r18,r7
8008af44:	8822d57a 	srli	r17,r17,21
8008af48:	008a2800 	call	8008a280 <_Balloc>
8008af4c:	1027883a 	mov	r19,r2
8008af50:	00800434 	movhi	r2,16
8008af54:	10bfffc4 	addi	r2,r2,-1
8008af58:	808c703a 	and	r6,r16,r2
8008af5c:	88000126 	beq	r17,zero,8008af64 <__d2b+0x50>
8008af60:	31800434 	orhi	r6,r6,16
8008af64:	d9800015 	stw	r6,0(sp)
8008af68:	a0002426 	beq	r20,zero,8008affc <__d2b+0xe8>
8008af6c:	d9000104 	addi	r4,sp,4
8008af70:	dd000115 	stw	r20,4(sp)
8008af74:	008a5dc0 	call	8008a5dc <__lo0bits>
8008af78:	d8c00017 	ldw	r3,0(sp)
8008af7c:	10002f1e 	bne	r2,zero,8008b03c <__d2b+0x128>
8008af80:	d9000117 	ldw	r4,4(sp)
8008af84:	99000515 	stw	r4,20(r19)
8008af88:	1821003a 	cmpeq	r16,r3,zero
8008af8c:	01000084 	movi	r4,2
8008af90:	2421c83a 	sub	r16,r4,r16
8008af94:	98c00615 	stw	r3,24(r19)
8008af98:	9c000415 	stw	r16,16(r19)
8008af9c:	88001f1e 	bne	r17,zero,8008b01c <__d2b+0x108>
8008afa0:	10bef384 	addi	r2,r2,-1074
8008afa4:	90800015 	stw	r2,0(r18)
8008afa8:	00900034 	movhi	r2,16384
8008afac:	10bfffc4 	addi	r2,r2,-1
8008afb0:	8085883a 	add	r2,r16,r2
8008afb4:	1085883a 	add	r2,r2,r2
8008afb8:	1085883a 	add	r2,r2,r2
8008afbc:	9885883a 	add	r2,r19,r2
8008afc0:	11000517 	ldw	r4,20(r2)
8008afc4:	8020917a 	slli	r16,r16,5
8008afc8:	008a5740 	call	8008a574 <__hi0bits>
8008afcc:	d8c00817 	ldw	r3,32(sp)
8008afd0:	8085c83a 	sub	r2,r16,r2
8008afd4:	18800015 	stw	r2,0(r3)
8008afd8:	9805883a 	mov	r2,r19
8008afdc:	dfc00717 	ldw	ra,28(sp)
8008afe0:	dd000617 	ldw	r20,24(sp)
8008afe4:	dcc00517 	ldw	r19,20(sp)
8008afe8:	dc800417 	ldw	r18,16(sp)
8008afec:	dc400317 	ldw	r17,12(sp)
8008aff0:	dc000217 	ldw	r16,8(sp)
8008aff4:	dec00804 	addi	sp,sp,32
8008aff8:	f800283a 	ret
8008affc:	d809883a 	mov	r4,sp
8008b000:	008a5dc0 	call	8008a5dc <__lo0bits>
8008b004:	d8c00017 	ldw	r3,0(sp)
8008b008:	04000044 	movi	r16,1
8008b00c:	9c000415 	stw	r16,16(r19)
8008b010:	98c00515 	stw	r3,20(r19)
8008b014:	10800804 	addi	r2,r2,32
8008b018:	883fe126 	beq	r17,zero,8008afa0 <__d2b+0x8c>
8008b01c:	00c00d44 	movi	r3,53
8008b020:	8c7ef344 	addi	r17,r17,-1075
8008b024:	88a3883a 	add	r17,r17,r2
8008b028:	1885c83a 	sub	r2,r3,r2
8008b02c:	d8c00817 	ldw	r3,32(sp)
8008b030:	94400015 	stw	r17,0(r18)
8008b034:	18800015 	stw	r2,0(r3)
8008b038:	003fe706 	br	8008afd8 <__d2b+0xc4>
8008b03c:	01000804 	movi	r4,32
8008b040:	2089c83a 	sub	r4,r4,r2
8008b044:	1908983a 	sll	r4,r3,r4
8008b048:	d9400117 	ldw	r5,4(sp)
8008b04c:	1886d83a 	srl	r3,r3,r2
8008b050:	2148b03a 	or	r4,r4,r5
8008b054:	99000515 	stw	r4,20(r19)
8008b058:	d8c00015 	stw	r3,0(sp)
8008b05c:	003fca06 	br	8008af88 <__d2b+0x74>

8008b060 <__ratio>:
8008b060:	defff904 	addi	sp,sp,-28
8008b064:	dc400315 	stw	r17,12(sp)
8008b068:	2823883a 	mov	r17,r5
8008b06c:	d9400104 	addi	r5,sp,4
8008b070:	dfc00615 	stw	ra,24(sp)
8008b074:	dcc00515 	stw	r19,20(sp)
8008b078:	dc800415 	stw	r18,16(sp)
8008b07c:	2027883a 	mov	r19,r4
8008b080:	dc000215 	stw	r16,8(sp)
8008b084:	008ae080 	call	8008ae08 <__b2d>
8008b088:	d80b883a 	mov	r5,sp
8008b08c:	8809883a 	mov	r4,r17
8008b090:	1025883a 	mov	r18,r2
8008b094:	1821883a 	mov	r16,r3
8008b098:	008ae080 	call	8008ae08 <__b2d>
8008b09c:	8a000417 	ldw	r8,16(r17)
8008b0a0:	99000417 	ldw	r4,16(r19)
8008b0a4:	d9400117 	ldw	r5,4(sp)
8008b0a8:	2209c83a 	sub	r4,r4,r8
8008b0ac:	2010917a 	slli	r8,r4,5
8008b0b0:	d9000017 	ldw	r4,0(sp)
8008b0b4:	2909c83a 	sub	r4,r5,r4
8008b0b8:	4109883a 	add	r4,r8,r4
8008b0bc:	01000e0e 	bge	zero,r4,8008b0f8 <__ratio+0x98>
8008b0c0:	2008953a 	slli	r4,r4,20
8008b0c4:	2421883a 	add	r16,r4,r16
8008b0c8:	100d883a 	mov	r6,r2
8008b0cc:	180f883a 	mov	r7,r3
8008b0d0:	9009883a 	mov	r4,r18
8008b0d4:	800b883a 	mov	r5,r16
8008b0d8:	0096c600 	call	80096c60 <__divdf3>
8008b0dc:	dfc00617 	ldw	ra,24(sp)
8008b0e0:	dcc00517 	ldw	r19,20(sp)
8008b0e4:	dc800417 	ldw	r18,16(sp)
8008b0e8:	dc400317 	ldw	r17,12(sp)
8008b0ec:	dc000217 	ldw	r16,8(sp)
8008b0f0:	dec00704 	addi	sp,sp,28
8008b0f4:	f800283a 	ret
8008b0f8:	2008953a 	slli	r4,r4,20
8008b0fc:	1907c83a 	sub	r3,r3,r4
8008b100:	003ff106 	br	8008b0c8 <__ratio+0x68>

8008b104 <_mprec_log10>:
8008b104:	defffe04 	addi	sp,sp,-8
8008b108:	dc000015 	stw	r16,0(sp)
8008b10c:	dfc00115 	stw	ra,4(sp)
8008b110:	008005c4 	movi	r2,23
8008b114:	2021883a 	mov	r16,r4
8008b118:	11000d0e 	bge	r2,r4,8008b150 <_mprec_log10+0x4c>
8008b11c:	0005883a 	mov	r2,zero
8008b120:	00cffc34 	movhi	r3,16368
8008b124:	843fffc4 	addi	r16,r16,-1
8008b128:	000d883a 	mov	r6,zero
8008b12c:	01d00934 	movhi	r7,16420
8008b130:	1009883a 	mov	r4,r2
8008b134:	180b883a 	mov	r5,r3
8008b138:	00977a00 	call	800977a0 <__muldf3>
8008b13c:	803ff91e 	bne	r16,zero,8008b124 <_mprec_log10+0x20>
8008b140:	dfc00117 	ldw	ra,4(sp)
8008b144:	dc000017 	ldw	r16,0(sp)
8008b148:	dec00204 	addi	sp,sp,8
8008b14c:	f800283a 	ret
8008b150:	202090fa 	slli	r16,r4,3
8008b154:	00a002b4 	movhi	r2,32778
8008b158:	10b93604 	addi	r2,r2,-6952
8008b15c:	1421883a 	add	r16,r2,r16
8008b160:	80800017 	ldw	r2,0(r16)
8008b164:	80c00117 	ldw	r3,4(r16)
8008b168:	dfc00117 	ldw	ra,4(sp)
8008b16c:	dc000017 	ldw	r16,0(sp)
8008b170:	dec00204 	addi	sp,sp,8
8008b174:	f800283a 	ret

8008b178 <__copybits>:
8008b178:	297fffc4 	addi	r5,r5,-1
8008b17c:	280fd17a 	srai	r7,r5,5
8008b180:	30c00417 	ldw	r3,16(r6)
8008b184:	30800504 	addi	r2,r6,20
8008b188:	39c00044 	addi	r7,r7,1
8008b18c:	18c7883a 	add	r3,r3,r3
8008b190:	39cf883a 	add	r7,r7,r7
8008b194:	18c7883a 	add	r3,r3,r3
8008b198:	39cf883a 	add	r7,r7,r7
8008b19c:	10c7883a 	add	r3,r2,r3
8008b1a0:	21cf883a 	add	r7,r4,r7
8008b1a4:	10c00d2e 	bgeu	r2,r3,8008b1dc <__copybits+0x64>
8008b1a8:	200b883a 	mov	r5,r4
8008b1ac:	12000017 	ldw	r8,0(r2)
8008b1b0:	29400104 	addi	r5,r5,4
8008b1b4:	10800104 	addi	r2,r2,4
8008b1b8:	2a3fff15 	stw	r8,-4(r5)
8008b1bc:	10fffb36 	bltu	r2,r3,8008b1ac <__copybits+0x34>
8008b1c0:	1985c83a 	sub	r2,r3,r6
8008b1c4:	10bffac4 	addi	r2,r2,-21
8008b1c8:	1004d0ba 	srli	r2,r2,2
8008b1cc:	10800044 	addi	r2,r2,1
8008b1d0:	1085883a 	add	r2,r2,r2
8008b1d4:	1085883a 	add	r2,r2,r2
8008b1d8:	2089883a 	add	r4,r4,r2
8008b1dc:	21c0032e 	bgeu	r4,r7,8008b1ec <__copybits+0x74>
8008b1e0:	20000015 	stw	zero,0(r4)
8008b1e4:	21000104 	addi	r4,r4,4
8008b1e8:	21fffd36 	bltu	r4,r7,8008b1e0 <__copybits+0x68>
8008b1ec:	f800283a 	ret

8008b1f0 <__any_on>:
8008b1f0:	20c00417 	ldw	r3,16(r4)
8008b1f4:	2805d17a 	srai	r2,r5,5
8008b1f8:	21000504 	addi	r4,r4,20
8008b1fc:	18800d0e 	bge	r3,r2,8008b234 <__any_on+0x44>
8008b200:	18c7883a 	add	r3,r3,r3
8008b204:	18c7883a 	add	r3,r3,r3
8008b208:	20c7883a 	add	r3,r4,r3
8008b20c:	20c0192e 	bgeu	r4,r3,8008b274 <__any_on+0x84>
8008b210:	18bfff17 	ldw	r2,-4(r3)
8008b214:	18ffff04 	addi	r3,r3,-4
8008b218:	1000041e 	bne	r2,zero,8008b22c <__any_on+0x3c>
8008b21c:	20c0142e 	bgeu	r4,r3,8008b270 <__any_on+0x80>
8008b220:	18ffff04 	addi	r3,r3,-4
8008b224:	19400017 	ldw	r5,0(r3)
8008b228:	283ffc26 	beq	r5,zero,8008b21c <__any_on+0x2c>
8008b22c:	00800044 	movi	r2,1
8008b230:	f800283a 	ret
8008b234:	10c00a0e 	bge	r2,r3,8008b260 <__any_on+0x70>
8008b238:	1085883a 	add	r2,r2,r2
8008b23c:	1085883a 	add	r2,r2,r2
8008b240:	294007cc 	andi	r5,r5,31
8008b244:	2087883a 	add	r3,r4,r2
8008b248:	283ff026 	beq	r5,zero,8008b20c <__any_on+0x1c>
8008b24c:	19800017 	ldw	r6,0(r3)
8008b250:	3144d83a 	srl	r2,r6,r5
8008b254:	114a983a 	sll	r5,r2,r5
8008b258:	317ff41e 	bne	r6,r5,8008b22c <__any_on+0x3c>
8008b25c:	003feb06 	br	8008b20c <__any_on+0x1c>
8008b260:	1085883a 	add	r2,r2,r2
8008b264:	1085883a 	add	r2,r2,r2
8008b268:	2087883a 	add	r3,r4,r2
8008b26c:	003fe706 	br	8008b20c <__any_on+0x1c>
8008b270:	f800283a 	ret
8008b274:	0005883a 	mov	r2,zero
8008b278:	f800283a 	ret

8008b27c <_putc_r>:
8008b27c:	defffc04 	addi	sp,sp,-16
8008b280:	dc000215 	stw	r16,8(sp)
8008b284:	dfc00315 	stw	ra,12(sp)
8008b288:	2021883a 	mov	r16,r4
8008b28c:	20000226 	beq	r4,zero,8008b298 <_putc_r+0x1c>
8008b290:	20800e17 	ldw	r2,56(r4)
8008b294:	10001b26 	beq	r2,zero,8008b304 <_putc_r+0x88>
8008b298:	30800217 	ldw	r2,8(r6)
8008b29c:	10bfffc4 	addi	r2,r2,-1
8008b2a0:	30800215 	stw	r2,8(r6)
8008b2a4:	10000a16 	blt	r2,zero,8008b2d0 <_putc_r+0x54>
8008b2a8:	30800017 	ldw	r2,0(r6)
8008b2ac:	11400005 	stb	r5,0(r2)
8008b2b0:	30800017 	ldw	r2,0(r6)
8008b2b4:	10c00044 	addi	r3,r2,1
8008b2b8:	30c00015 	stw	r3,0(r6)
8008b2bc:	10800003 	ldbu	r2,0(r2)
8008b2c0:	dfc00317 	ldw	ra,12(sp)
8008b2c4:	dc000217 	ldw	r16,8(sp)
8008b2c8:	dec00404 	addi	sp,sp,16
8008b2cc:	f800283a 	ret
8008b2d0:	30c00617 	ldw	r3,24(r6)
8008b2d4:	10c00616 	blt	r2,r3,8008b2f0 <_putc_r+0x74>
8008b2d8:	30800017 	ldw	r2,0(r6)
8008b2dc:	00c00284 	movi	r3,10
8008b2e0:	11400005 	stb	r5,0(r2)
8008b2e4:	30800017 	ldw	r2,0(r6)
8008b2e8:	11400003 	ldbu	r5,0(r2)
8008b2ec:	28fff11e 	bne	r5,r3,8008b2b4 <_putc_r+0x38>
8008b2f0:	8009883a 	mov	r4,r16
8008b2f4:	dfc00317 	ldw	ra,12(sp)
8008b2f8:	dc000217 	ldw	r16,8(sp)
8008b2fc:	dec00404 	addi	sp,sp,16
8008b300:	0092e6c1 	jmpi	80092e6c <__swbuf_r>
8008b304:	d9400015 	stw	r5,0(sp)
8008b308:	d9800115 	stw	r6,4(sp)
8008b30c:	0088f040 	call	80088f04 <__sinit>
8008b310:	d9800117 	ldw	r6,4(sp)
8008b314:	d9400017 	ldw	r5,0(sp)
8008b318:	003fdf06 	br	8008b298 <_putc_r+0x1c>

8008b31c <putc>:
8008b31c:	00a002b4 	movhi	r2,32778
8008b320:	defffc04 	addi	sp,sp,-16
8008b324:	1081bf04 	addi	r2,r2,1788
8008b328:	dc000115 	stw	r16,4(sp)
8008b32c:	14000017 	ldw	r16,0(r2)
8008b330:	dc400215 	stw	r17,8(sp)
8008b334:	dfc00315 	stw	ra,12(sp)
8008b338:	2023883a 	mov	r17,r4
8008b33c:	80000226 	beq	r16,zero,8008b348 <putc+0x2c>
8008b340:	80800e17 	ldw	r2,56(r16)
8008b344:	10001a26 	beq	r2,zero,8008b3b0 <putc+0x94>
8008b348:	28800217 	ldw	r2,8(r5)
8008b34c:	10bfffc4 	addi	r2,r2,-1
8008b350:	28800215 	stw	r2,8(r5)
8008b354:	10000b16 	blt	r2,zero,8008b384 <putc+0x68>
8008b358:	28800017 	ldw	r2,0(r5)
8008b35c:	14400005 	stb	r17,0(r2)
8008b360:	28800017 	ldw	r2,0(r5)
8008b364:	10c00044 	addi	r3,r2,1
8008b368:	28c00015 	stw	r3,0(r5)
8008b36c:	10800003 	ldbu	r2,0(r2)
8008b370:	dfc00317 	ldw	ra,12(sp)
8008b374:	dc400217 	ldw	r17,8(sp)
8008b378:	dc000117 	ldw	r16,4(sp)
8008b37c:	dec00404 	addi	sp,sp,16
8008b380:	f800283a 	ret
8008b384:	28c00617 	ldw	r3,24(r5)
8008b388:	10c00e16 	blt	r2,r3,8008b3c4 <putc+0xa8>
8008b38c:	28800017 	ldw	r2,0(r5)
8008b390:	01000284 	movi	r4,10
8008b394:	14400005 	stb	r17,0(r2)
8008b398:	28800017 	ldw	r2,0(r5)
8008b39c:	10c00003 	ldbu	r3,0(r2)
8008b3a0:	193ff01e 	bne	r3,r4,8008b364 <putc+0x48>
8008b3a4:	280d883a 	mov	r6,r5
8008b3a8:	180b883a 	mov	r5,r3
8008b3ac:	00000706 	br	8008b3cc <putc+0xb0>
8008b3b0:	8009883a 	mov	r4,r16
8008b3b4:	d9400015 	stw	r5,0(sp)
8008b3b8:	0088f040 	call	80088f04 <__sinit>
8008b3bc:	d9400017 	ldw	r5,0(sp)
8008b3c0:	003fe106 	br	8008b348 <putc+0x2c>
8008b3c4:	280d883a 	mov	r6,r5
8008b3c8:	880b883a 	mov	r5,r17
8008b3cc:	8009883a 	mov	r4,r16
8008b3d0:	dfc00317 	ldw	ra,12(sp)
8008b3d4:	dc400217 	ldw	r17,8(sp)
8008b3d8:	dc000117 	ldw	r16,4(sp)
8008b3dc:	dec00404 	addi	sp,sp,16
8008b3e0:	0092e6c1 	jmpi	80092e6c <__swbuf_r>

8008b3e4 <_read_r>:
8008b3e4:	defffd04 	addi	sp,sp,-12
8008b3e8:	2805883a 	mov	r2,r5
8008b3ec:	dc000015 	stw	r16,0(sp)
8008b3f0:	042002b4 	movhi	r16,32778
8008b3f4:	dc400115 	stw	r17,4(sp)
8008b3f8:	300b883a 	mov	r5,r6
8008b3fc:	8408e204 	addi	r16,r16,9096
8008b400:	2023883a 	mov	r17,r4
8008b404:	380d883a 	mov	r6,r7
8008b408:	1009883a 	mov	r4,r2
8008b40c:	dfc00215 	stw	ra,8(sp)
8008b410:	80000015 	stw	zero,0(r16)
8008b414:	00992800 	call	80099280 <read>
8008b418:	00ffffc4 	movi	r3,-1
8008b41c:	10c00526 	beq	r2,r3,8008b434 <_read_r+0x50>
8008b420:	dfc00217 	ldw	ra,8(sp)
8008b424:	dc400117 	ldw	r17,4(sp)
8008b428:	dc000017 	ldw	r16,0(sp)
8008b42c:	dec00304 	addi	sp,sp,12
8008b430:	f800283a 	ret
8008b434:	80c00017 	ldw	r3,0(r16)
8008b438:	183ff926 	beq	r3,zero,8008b420 <_read_r+0x3c>
8008b43c:	88c00015 	stw	r3,0(r17)
8008b440:	003ff706 	br	8008b420 <_read_r+0x3c>

8008b444 <_realloc_r>:
8008b444:	defff604 	addi	sp,sp,-40
8008b448:	dc800215 	stw	r18,8(sp)
8008b44c:	dfc00915 	stw	ra,36(sp)
8008b450:	df000815 	stw	fp,32(sp)
8008b454:	ddc00715 	stw	r23,28(sp)
8008b458:	dd800615 	stw	r22,24(sp)
8008b45c:	dd400515 	stw	r21,20(sp)
8008b460:	dd000415 	stw	r20,16(sp)
8008b464:	dcc00315 	stw	r19,12(sp)
8008b468:	dc400115 	stw	r17,4(sp)
8008b46c:	dc000015 	stw	r16,0(sp)
8008b470:	3025883a 	mov	r18,r6
8008b474:	2800b726 	beq	r5,zero,8008b754 <_realloc_r+0x310>
8008b478:	282b883a 	mov	r21,r5
8008b47c:	2029883a 	mov	r20,r4
8008b480:	00991fc0 	call	800991fc <__malloc_lock>
8008b484:	a8bfff17 	ldw	r2,-4(r21)
8008b488:	043fff04 	movi	r16,-4
8008b48c:	90c002c4 	addi	r3,r18,11
8008b490:	01000584 	movi	r4,22
8008b494:	acfffe04 	addi	r19,r21,-8
8008b498:	1420703a 	and	r16,r2,r16
8008b49c:	20c0332e 	bgeu	r4,r3,8008b56c <_realloc_r+0x128>
8008b4a0:	047ffe04 	movi	r17,-8
8008b4a4:	1c62703a 	and	r17,r3,r17
8008b4a8:	8807883a 	mov	r3,r17
8008b4ac:	88005816 	blt	r17,zero,8008b610 <_realloc_r+0x1cc>
8008b4b0:	8c805736 	bltu	r17,r18,8008b610 <_realloc_r+0x1cc>
8008b4b4:	80c0300e 	bge	r16,r3,8008b578 <_realloc_r+0x134>
8008b4b8:	072002b4 	movhi	fp,32778
8008b4bc:	e73bd404 	addi	fp,fp,-4272
8008b4c0:	e1c00217 	ldw	r7,8(fp)
8008b4c4:	9c09883a 	add	r4,r19,r16
8008b4c8:	22000117 	ldw	r8,4(r4)
8008b4cc:	21c06326 	beq	r4,r7,8008b65c <_realloc_r+0x218>
8008b4d0:	017fff84 	movi	r5,-2
8008b4d4:	414a703a 	and	r5,r8,r5
8008b4d8:	214b883a 	add	r5,r4,r5
8008b4dc:	29800117 	ldw	r6,4(r5)
8008b4e0:	3180004c 	andi	r6,r6,1
8008b4e4:	30003f26 	beq	r6,zero,8008b5e4 <_realloc_r+0x1a0>
8008b4e8:	1080004c 	andi	r2,r2,1
8008b4ec:	10008326 	beq	r2,zero,8008b6fc <_realloc_r+0x2b8>
8008b4f0:	900b883a 	mov	r5,r18
8008b4f4:	a009883a 	mov	r4,r20
8008b4f8:	008251c0 	call	8008251c <_malloc_r>
8008b4fc:	1025883a 	mov	r18,r2
8008b500:	10011e26 	beq	r2,zero,8008b97c <_realloc_r+0x538>
8008b504:	a93fff17 	ldw	r4,-4(r21)
8008b508:	10fffe04 	addi	r3,r2,-8
8008b50c:	00bfff84 	movi	r2,-2
8008b510:	2084703a 	and	r2,r4,r2
8008b514:	9885883a 	add	r2,r19,r2
8008b518:	1880ee26 	beq	r3,r2,8008b8d4 <_realloc_r+0x490>
8008b51c:	81bfff04 	addi	r6,r16,-4
8008b520:	00800904 	movi	r2,36
8008b524:	1180b836 	bltu	r2,r6,8008b808 <_realloc_r+0x3c4>
8008b528:	00c004c4 	movi	r3,19
8008b52c:	19809636 	bltu	r3,r6,8008b788 <_realloc_r+0x344>
8008b530:	9005883a 	mov	r2,r18
8008b534:	a807883a 	mov	r3,r21
8008b538:	19000017 	ldw	r4,0(r3)
8008b53c:	11000015 	stw	r4,0(r2)
8008b540:	19000117 	ldw	r4,4(r3)
8008b544:	11000115 	stw	r4,4(r2)
8008b548:	18c00217 	ldw	r3,8(r3)
8008b54c:	10c00215 	stw	r3,8(r2)
8008b550:	a80b883a 	mov	r5,r21
8008b554:	a009883a 	mov	r4,r20
8008b558:	00890780 	call	80089078 <_free_r>
8008b55c:	a009883a 	mov	r4,r20
8008b560:	00992200 	call	80099220 <__malloc_unlock>
8008b564:	9005883a 	mov	r2,r18
8008b568:	00001206 	br	8008b5b4 <_realloc_r+0x170>
8008b56c:	00c00404 	movi	r3,16
8008b570:	1823883a 	mov	r17,r3
8008b574:	003fce06 	br	8008b4b0 <_realloc_r+0x6c>
8008b578:	a825883a 	mov	r18,r21
8008b57c:	8445c83a 	sub	r2,r16,r17
8008b580:	00c003c4 	movi	r3,15
8008b584:	18802636 	bltu	r3,r2,8008b620 <_realloc_r+0x1dc>
8008b588:	99800117 	ldw	r6,4(r19)
8008b58c:	9c07883a 	add	r3,r19,r16
8008b590:	3180004c 	andi	r6,r6,1
8008b594:	3420b03a 	or	r16,r6,r16
8008b598:	9c000115 	stw	r16,4(r19)
8008b59c:	18800117 	ldw	r2,4(r3)
8008b5a0:	10800054 	ori	r2,r2,1
8008b5a4:	18800115 	stw	r2,4(r3)
8008b5a8:	a009883a 	mov	r4,r20
8008b5ac:	00992200 	call	80099220 <__malloc_unlock>
8008b5b0:	9005883a 	mov	r2,r18
8008b5b4:	dfc00917 	ldw	ra,36(sp)
8008b5b8:	df000817 	ldw	fp,32(sp)
8008b5bc:	ddc00717 	ldw	r23,28(sp)
8008b5c0:	dd800617 	ldw	r22,24(sp)
8008b5c4:	dd400517 	ldw	r21,20(sp)
8008b5c8:	dd000417 	ldw	r20,16(sp)
8008b5cc:	dcc00317 	ldw	r19,12(sp)
8008b5d0:	dc800217 	ldw	r18,8(sp)
8008b5d4:	dc400117 	ldw	r17,4(sp)
8008b5d8:	dc000017 	ldw	r16,0(sp)
8008b5dc:	dec00a04 	addi	sp,sp,40
8008b5e0:	f800283a 	ret
8008b5e4:	017fff04 	movi	r5,-4
8008b5e8:	414a703a 	and	r5,r8,r5
8008b5ec:	814d883a 	add	r6,r16,r5
8008b5f0:	30c01f16 	blt	r6,r3,8008b670 <_realloc_r+0x22c>
8008b5f4:	20800317 	ldw	r2,12(r4)
8008b5f8:	20c00217 	ldw	r3,8(r4)
8008b5fc:	a825883a 	mov	r18,r21
8008b600:	3021883a 	mov	r16,r6
8008b604:	18800315 	stw	r2,12(r3)
8008b608:	10c00215 	stw	r3,8(r2)
8008b60c:	003fdb06 	br	8008b57c <_realloc_r+0x138>
8008b610:	00800304 	movi	r2,12
8008b614:	a0800015 	stw	r2,0(r20)
8008b618:	0005883a 	mov	r2,zero
8008b61c:	003fe506 	br	8008b5b4 <_realloc_r+0x170>
8008b620:	98c00117 	ldw	r3,4(r19)
8008b624:	9c4b883a 	add	r5,r19,r17
8008b628:	11000054 	ori	r4,r2,1
8008b62c:	18c0004c 	andi	r3,r3,1
8008b630:	1c62b03a 	or	r17,r3,r17
8008b634:	9c400115 	stw	r17,4(r19)
8008b638:	29000115 	stw	r4,4(r5)
8008b63c:	2885883a 	add	r2,r5,r2
8008b640:	10c00117 	ldw	r3,4(r2)
8008b644:	29400204 	addi	r5,r5,8
8008b648:	a009883a 	mov	r4,r20
8008b64c:	18c00054 	ori	r3,r3,1
8008b650:	10c00115 	stw	r3,4(r2)
8008b654:	00890780 	call	80089078 <_free_r>
8008b658:	003fd306 	br	8008b5a8 <_realloc_r+0x164>
8008b65c:	017fff04 	movi	r5,-4
8008b660:	414a703a 	and	r5,r8,r5
8008b664:	89800404 	addi	r6,r17,16
8008b668:	8151883a 	add	r8,r16,r5
8008b66c:	4180590e 	bge	r8,r6,8008b7d4 <_realloc_r+0x390>
8008b670:	1080004c 	andi	r2,r2,1
8008b674:	103f9e1e 	bne	r2,zero,8008b4f0 <_realloc_r+0xac>
8008b678:	adbffe17 	ldw	r22,-8(r21)
8008b67c:	00bfff04 	movi	r2,-4
8008b680:	9dadc83a 	sub	r22,r19,r22
8008b684:	b1800117 	ldw	r6,4(r22)
8008b688:	3084703a 	and	r2,r6,r2
8008b68c:	20002026 	beq	r4,zero,8008b710 <_realloc_r+0x2cc>
8008b690:	80af883a 	add	r23,r16,r2
8008b694:	b96f883a 	add	r23,r23,r5
8008b698:	21c05f26 	beq	r4,r7,8008b818 <_realloc_r+0x3d4>
8008b69c:	b8c01c16 	blt	r23,r3,8008b710 <_realloc_r+0x2cc>
8008b6a0:	20800317 	ldw	r2,12(r4)
8008b6a4:	20c00217 	ldw	r3,8(r4)
8008b6a8:	81bfff04 	addi	r6,r16,-4
8008b6ac:	01000904 	movi	r4,36
8008b6b0:	18800315 	stw	r2,12(r3)
8008b6b4:	10c00215 	stw	r3,8(r2)
8008b6b8:	b0c00217 	ldw	r3,8(r22)
8008b6bc:	b0800317 	ldw	r2,12(r22)
8008b6c0:	b4800204 	addi	r18,r22,8
8008b6c4:	18800315 	stw	r2,12(r3)
8008b6c8:	10c00215 	stw	r3,8(r2)
8008b6cc:	21801b36 	bltu	r4,r6,8008b73c <_realloc_r+0x2f8>
8008b6d0:	008004c4 	movi	r2,19
8008b6d4:	1180352e 	bgeu	r2,r6,8008b7ac <_realloc_r+0x368>
8008b6d8:	a8800017 	ldw	r2,0(r21)
8008b6dc:	b0800215 	stw	r2,8(r22)
8008b6e0:	a8800117 	ldw	r2,4(r21)
8008b6e4:	b0800315 	stw	r2,12(r22)
8008b6e8:	008006c4 	movi	r2,27
8008b6ec:	11807f36 	bltu	r2,r6,8008b8ec <_realloc_r+0x4a8>
8008b6f0:	b0800404 	addi	r2,r22,16
8008b6f4:	ad400204 	addi	r21,r21,8
8008b6f8:	00002d06 	br	8008b7b0 <_realloc_r+0x36c>
8008b6fc:	adbffe17 	ldw	r22,-8(r21)
8008b700:	00bfff04 	movi	r2,-4
8008b704:	9dadc83a 	sub	r22,r19,r22
8008b708:	b1000117 	ldw	r4,4(r22)
8008b70c:	2084703a 	and	r2,r4,r2
8008b710:	b03f7726 	beq	r22,zero,8008b4f0 <_realloc_r+0xac>
8008b714:	80af883a 	add	r23,r16,r2
8008b718:	b8ff7516 	blt	r23,r3,8008b4f0 <_realloc_r+0xac>
8008b71c:	b0800317 	ldw	r2,12(r22)
8008b720:	b0c00217 	ldw	r3,8(r22)
8008b724:	81bfff04 	addi	r6,r16,-4
8008b728:	01000904 	movi	r4,36
8008b72c:	18800315 	stw	r2,12(r3)
8008b730:	10c00215 	stw	r3,8(r2)
8008b734:	b4800204 	addi	r18,r22,8
8008b738:	21bfe52e 	bgeu	r4,r6,8008b6d0 <_realloc_r+0x28c>
8008b73c:	a80b883a 	mov	r5,r21
8008b740:	9009883a 	mov	r4,r18
8008b744:	0089ffc0 	call	80089ffc <memmove>
8008b748:	b821883a 	mov	r16,r23
8008b74c:	b027883a 	mov	r19,r22
8008b750:	003f8a06 	br	8008b57c <_realloc_r+0x138>
8008b754:	300b883a 	mov	r5,r6
8008b758:	dfc00917 	ldw	ra,36(sp)
8008b75c:	df000817 	ldw	fp,32(sp)
8008b760:	ddc00717 	ldw	r23,28(sp)
8008b764:	dd800617 	ldw	r22,24(sp)
8008b768:	dd400517 	ldw	r21,20(sp)
8008b76c:	dd000417 	ldw	r20,16(sp)
8008b770:	dcc00317 	ldw	r19,12(sp)
8008b774:	dc800217 	ldw	r18,8(sp)
8008b778:	dc400117 	ldw	r17,4(sp)
8008b77c:	dc000017 	ldw	r16,0(sp)
8008b780:	dec00a04 	addi	sp,sp,40
8008b784:	008251c1 	jmpi	8008251c <_malloc_r>
8008b788:	a8c00017 	ldw	r3,0(r21)
8008b78c:	90c00015 	stw	r3,0(r18)
8008b790:	a8c00117 	ldw	r3,4(r21)
8008b794:	90c00115 	stw	r3,4(r18)
8008b798:	00c006c4 	movi	r3,27
8008b79c:	19804536 	bltu	r3,r6,8008b8b4 <_realloc_r+0x470>
8008b7a0:	90800204 	addi	r2,r18,8
8008b7a4:	a8c00204 	addi	r3,r21,8
8008b7a8:	003f6306 	br	8008b538 <_realloc_r+0xf4>
8008b7ac:	9005883a 	mov	r2,r18
8008b7b0:	a8c00017 	ldw	r3,0(r21)
8008b7b4:	b821883a 	mov	r16,r23
8008b7b8:	b027883a 	mov	r19,r22
8008b7bc:	10c00015 	stw	r3,0(r2)
8008b7c0:	a8c00117 	ldw	r3,4(r21)
8008b7c4:	10c00115 	stw	r3,4(r2)
8008b7c8:	a8c00217 	ldw	r3,8(r21)
8008b7cc:	10c00215 	stw	r3,8(r2)
8008b7d0:	003f6a06 	br	8008b57c <_realloc_r+0x138>
8008b7d4:	9c67883a 	add	r19,r19,r17
8008b7d8:	4445c83a 	sub	r2,r8,r17
8008b7dc:	e4c00215 	stw	r19,8(fp)
8008b7e0:	10800054 	ori	r2,r2,1
8008b7e4:	98800115 	stw	r2,4(r19)
8008b7e8:	a8bfff17 	ldw	r2,-4(r21)
8008b7ec:	a009883a 	mov	r4,r20
8008b7f0:	1080004c 	andi	r2,r2,1
8008b7f4:	1462b03a 	or	r17,r2,r17
8008b7f8:	ac7fff15 	stw	r17,-4(r21)
8008b7fc:	00992200 	call	80099220 <__malloc_unlock>
8008b800:	a805883a 	mov	r2,r21
8008b804:	003f6b06 	br	8008b5b4 <_realloc_r+0x170>
8008b808:	a80b883a 	mov	r5,r21
8008b80c:	9009883a 	mov	r4,r18
8008b810:	0089ffc0 	call	80089ffc <memmove>
8008b814:	003f4e06 	br	8008b550 <_realloc_r+0x10c>
8008b818:	89000404 	addi	r4,r17,16
8008b81c:	b93fbc16 	blt	r23,r4,8008b710 <_realloc_r+0x2cc>
8008b820:	b0800317 	ldw	r2,12(r22)
8008b824:	b0c00217 	ldw	r3,8(r22)
8008b828:	81bfff04 	addi	r6,r16,-4
8008b82c:	01000904 	movi	r4,36
8008b830:	18800315 	stw	r2,12(r3)
8008b834:	10c00215 	stw	r3,8(r2)
8008b838:	b4800204 	addi	r18,r22,8
8008b83c:	21804336 	bltu	r4,r6,8008b94c <_realloc_r+0x508>
8008b840:	008004c4 	movi	r2,19
8008b844:	11803f2e 	bgeu	r2,r6,8008b944 <_realloc_r+0x500>
8008b848:	a8800017 	ldw	r2,0(r21)
8008b84c:	b0800215 	stw	r2,8(r22)
8008b850:	a8800117 	ldw	r2,4(r21)
8008b854:	b0800315 	stw	r2,12(r22)
8008b858:	008006c4 	movi	r2,27
8008b85c:	11803f36 	bltu	r2,r6,8008b95c <_realloc_r+0x518>
8008b860:	b0800404 	addi	r2,r22,16
8008b864:	ad400204 	addi	r21,r21,8
8008b868:	a8c00017 	ldw	r3,0(r21)
8008b86c:	10c00015 	stw	r3,0(r2)
8008b870:	a8c00117 	ldw	r3,4(r21)
8008b874:	10c00115 	stw	r3,4(r2)
8008b878:	a8c00217 	ldw	r3,8(r21)
8008b87c:	10c00215 	stw	r3,8(r2)
8008b880:	b447883a 	add	r3,r22,r17
8008b884:	bc45c83a 	sub	r2,r23,r17
8008b888:	e0c00215 	stw	r3,8(fp)
8008b88c:	10800054 	ori	r2,r2,1
8008b890:	18800115 	stw	r2,4(r3)
8008b894:	b0800117 	ldw	r2,4(r22)
8008b898:	a009883a 	mov	r4,r20
8008b89c:	1080004c 	andi	r2,r2,1
8008b8a0:	1462b03a 	or	r17,r2,r17
8008b8a4:	b4400115 	stw	r17,4(r22)
8008b8a8:	00992200 	call	80099220 <__malloc_unlock>
8008b8ac:	9005883a 	mov	r2,r18
8008b8b0:	003f4006 	br	8008b5b4 <_realloc_r+0x170>
8008b8b4:	a8c00217 	ldw	r3,8(r21)
8008b8b8:	90c00215 	stw	r3,8(r18)
8008b8bc:	a8c00317 	ldw	r3,12(r21)
8008b8c0:	90c00315 	stw	r3,12(r18)
8008b8c4:	30801126 	beq	r6,r2,8008b90c <_realloc_r+0x4c8>
8008b8c8:	90800404 	addi	r2,r18,16
8008b8cc:	a8c00404 	addi	r3,r21,16
8008b8d0:	003f1906 	br	8008b538 <_realloc_r+0xf4>
8008b8d4:	90ffff17 	ldw	r3,-4(r18)
8008b8d8:	00bfff04 	movi	r2,-4
8008b8dc:	a825883a 	mov	r18,r21
8008b8e0:	1884703a 	and	r2,r3,r2
8008b8e4:	80a1883a 	add	r16,r16,r2
8008b8e8:	003f2406 	br	8008b57c <_realloc_r+0x138>
8008b8ec:	a8800217 	ldw	r2,8(r21)
8008b8f0:	b0800415 	stw	r2,16(r22)
8008b8f4:	a8800317 	ldw	r2,12(r21)
8008b8f8:	b0800515 	stw	r2,20(r22)
8008b8fc:	31000a26 	beq	r6,r4,8008b928 <_realloc_r+0x4e4>
8008b900:	b0800604 	addi	r2,r22,24
8008b904:	ad400404 	addi	r21,r21,16
8008b908:	003fa906 	br	8008b7b0 <_realloc_r+0x36c>
8008b90c:	a9000417 	ldw	r4,16(r21)
8008b910:	90800604 	addi	r2,r18,24
8008b914:	a8c00604 	addi	r3,r21,24
8008b918:	91000415 	stw	r4,16(r18)
8008b91c:	a9000517 	ldw	r4,20(r21)
8008b920:	91000515 	stw	r4,20(r18)
8008b924:	003f0406 	br	8008b538 <_realloc_r+0xf4>
8008b928:	a8c00417 	ldw	r3,16(r21)
8008b92c:	ad400604 	addi	r21,r21,24
8008b930:	b0800804 	addi	r2,r22,32
8008b934:	b0c00615 	stw	r3,24(r22)
8008b938:	a8ffff17 	ldw	r3,-4(r21)
8008b93c:	b0c00715 	stw	r3,28(r22)
8008b940:	003f9b06 	br	8008b7b0 <_realloc_r+0x36c>
8008b944:	9005883a 	mov	r2,r18
8008b948:	003fc706 	br	8008b868 <_realloc_r+0x424>
8008b94c:	a80b883a 	mov	r5,r21
8008b950:	9009883a 	mov	r4,r18
8008b954:	0089ffc0 	call	80089ffc <memmove>
8008b958:	003fc906 	br	8008b880 <_realloc_r+0x43c>
8008b95c:	a8800217 	ldw	r2,8(r21)
8008b960:	b0800415 	stw	r2,16(r22)
8008b964:	a8800317 	ldw	r2,12(r21)
8008b968:	b0800515 	stw	r2,20(r22)
8008b96c:	31000726 	beq	r6,r4,8008b98c <_realloc_r+0x548>
8008b970:	b0800604 	addi	r2,r22,24
8008b974:	ad400404 	addi	r21,r21,16
8008b978:	003fbb06 	br	8008b868 <_realloc_r+0x424>
8008b97c:	a009883a 	mov	r4,r20
8008b980:	00992200 	call	80099220 <__malloc_unlock>
8008b984:	0005883a 	mov	r2,zero
8008b988:	003f0a06 	br	8008b5b4 <_realloc_r+0x170>
8008b98c:	a8c00417 	ldw	r3,16(r21)
8008b990:	ad400604 	addi	r21,r21,24
8008b994:	b0800804 	addi	r2,r22,32
8008b998:	b0c00615 	stw	r3,24(r22)
8008b99c:	a8ffff17 	ldw	r3,-4(r21)
8008b9a0:	b0c00715 	stw	r3,28(r22)
8008b9a4:	003fb006 	br	8008b868 <_realloc_r+0x424>

8008b9a8 <lflush>:
8008b9a8:	2080030b 	ldhu	r2,12(r4)
8008b9ac:	00c00244 	movi	r3,9
8008b9b0:	1080024c 	andi	r2,r2,9
8008b9b4:	10c00226 	beq	r2,r3,8008b9c0 <lflush+0x18>
8008b9b8:	0005883a 	mov	r2,zero
8008b9bc:	f800283a 	ret
8008b9c0:	0088b841 	jmpi	80088b84 <fflush>

8008b9c4 <__srefill_r>:
8008b9c4:	defffc04 	addi	sp,sp,-16
8008b9c8:	dc400115 	stw	r17,4(sp)
8008b9cc:	dc000015 	stw	r16,0(sp)
8008b9d0:	dfc00315 	stw	ra,12(sp)
8008b9d4:	dc800215 	stw	r18,8(sp)
8008b9d8:	2023883a 	mov	r17,r4
8008b9dc:	2821883a 	mov	r16,r5
8008b9e0:	20000226 	beq	r4,zero,8008b9ec <__srefill_r+0x28>
8008b9e4:	20800e17 	ldw	r2,56(r4)
8008b9e8:	10003c26 	beq	r2,zero,8008badc <__srefill_r+0x118>
8008b9ec:	80c0030b 	ldhu	r3,12(r16)
8008b9f0:	1908000c 	andi	r4,r3,8192
8008b9f4:	1805883a 	mov	r2,r3
8008b9f8:	2000071e 	bne	r4,zero,8008ba18 <__srefill_r+0x54>
8008b9fc:	81001917 	ldw	r4,100(r16)
8008ba00:	18880014 	ori	r2,r3,8192
8008ba04:	00f7ffc4 	movi	r3,-8193
8008ba08:	20c8703a 	and	r4,r4,r3
8008ba0c:	8080030d 	sth	r2,12(r16)
8008ba10:	1007883a 	mov	r3,r2
8008ba14:	81001915 	stw	r4,100(r16)
8008ba18:	80000115 	stw	zero,4(r16)
8008ba1c:	1100080c 	andi	r4,r2,32
8008ba20:	2000571e 	bne	r4,zero,8008bb80 <__srefill_r+0x1bc>
8008ba24:	1100010c 	andi	r4,r2,4
8008ba28:	20001f26 	beq	r4,zero,8008baa8 <__srefill_r+0xe4>
8008ba2c:	81400c17 	ldw	r5,48(r16)
8008ba30:	28000826 	beq	r5,zero,8008ba54 <__srefill_r+0x90>
8008ba34:	80801004 	addi	r2,r16,64
8008ba38:	28800226 	beq	r5,r2,8008ba44 <__srefill_r+0x80>
8008ba3c:	8809883a 	mov	r4,r17
8008ba40:	00890780 	call	80089078 <_free_r>
8008ba44:	80800f17 	ldw	r2,60(r16)
8008ba48:	80000c15 	stw	zero,48(r16)
8008ba4c:	80800115 	stw	r2,4(r16)
8008ba50:	1000391e 	bne	r2,zero,8008bb38 <__srefill_r+0x174>
8008ba54:	80800417 	ldw	r2,16(r16)
8008ba58:	10004b26 	beq	r2,zero,8008bb88 <__srefill_r+0x1c4>
8008ba5c:	8480030b 	ldhu	r18,12(r16)
8008ba60:	908000cc 	andi	r2,r18,3
8008ba64:	10001f1e 	bne	r2,zero,8008bae4 <__srefill_r+0x120>
8008ba68:	81800417 	ldw	r6,16(r16)
8008ba6c:	80800817 	ldw	r2,32(r16)
8008ba70:	81c00517 	ldw	r7,20(r16)
8008ba74:	81400717 	ldw	r5,28(r16)
8008ba78:	81800015 	stw	r6,0(r16)
8008ba7c:	8809883a 	mov	r4,r17
8008ba80:	103ee83a 	callr	r2
8008ba84:	80800115 	stw	r2,4(r16)
8008ba88:	00800e0e 	bge	zero,r2,8008bac4 <__srefill_r+0x100>
8008ba8c:	0005883a 	mov	r2,zero
8008ba90:	dfc00317 	ldw	ra,12(sp)
8008ba94:	dc800217 	ldw	r18,8(sp)
8008ba98:	dc400117 	ldw	r17,4(sp)
8008ba9c:	dc000017 	ldw	r16,0(sp)
8008baa0:	dec00404 	addi	sp,sp,16
8008baa4:	f800283a 	ret
8008baa8:	1100040c 	andi	r4,r2,16
8008baac:	20003026 	beq	r4,zero,8008bb70 <__srefill_r+0x1ac>
8008bab0:	1080020c 	andi	r2,r2,8
8008bab4:	1000241e 	bne	r2,zero,8008bb48 <__srefill_r+0x184>
8008bab8:	18c00114 	ori	r3,r3,4
8008babc:	80c0030d 	sth	r3,12(r16)
8008bac0:	003fe406 	br	8008ba54 <__srefill_r+0x90>
8008bac4:	80c0030b 	ldhu	r3,12(r16)
8008bac8:	1000161e 	bne	r2,zero,8008bb24 <__srefill_r+0x160>
8008bacc:	18c00814 	ori	r3,r3,32
8008bad0:	00bfffc4 	movi	r2,-1
8008bad4:	80c0030d 	sth	r3,12(r16)
8008bad8:	003fed06 	br	8008ba90 <__srefill_r+0xcc>
8008badc:	0088f040 	call	80088f04 <__sinit>
8008bae0:	003fc206 	br	8008b9ec <__srefill_r+0x28>
8008bae4:	00a002b4 	movhi	r2,32778
8008bae8:	1081be04 	addi	r2,r2,1784
8008baec:	11000017 	ldw	r4,0(r2)
8008baf0:	01600274 	movhi	r5,32777
8008baf4:	00800044 	movi	r2,1
8008baf8:	296e6a04 	addi	r5,r5,-18008
8008bafc:	8080030d 	sth	r2,12(r16)
8008bb00:	00898440 	call	80089844 <_fwalk>
8008bb04:	00800244 	movi	r2,9
8008bb08:	8480030d 	sth	r18,12(r16)
8008bb0c:	9480024c 	andi	r18,r18,9
8008bb10:	90bfd51e 	bne	r18,r2,8008ba68 <__srefill_r+0xa4>
8008bb14:	800b883a 	mov	r5,r16
8008bb18:	8809883a 	mov	r4,r17
8008bb1c:	008890c0 	call	8008890c <__sflush_r>
8008bb20:	003fd106 	br	8008ba68 <__srefill_r+0xa4>
8008bb24:	18c01014 	ori	r3,r3,64
8008bb28:	80000115 	stw	zero,4(r16)
8008bb2c:	00bfffc4 	movi	r2,-1
8008bb30:	80c0030d 	sth	r3,12(r16)
8008bb34:	003fd606 	br	8008ba90 <__srefill_r+0xcc>
8008bb38:	80c00e17 	ldw	r3,56(r16)
8008bb3c:	0005883a 	mov	r2,zero
8008bb40:	80c00015 	stw	r3,0(r16)
8008bb44:	003fd206 	br	8008ba90 <__srefill_r+0xcc>
8008bb48:	800b883a 	mov	r5,r16
8008bb4c:	8809883a 	mov	r4,r17
8008bb50:	0088b280 	call	80088b28 <_fflush_r>
8008bb54:	10000a1e 	bne	r2,zero,8008bb80 <__srefill_r+0x1bc>
8008bb58:	8080030b 	ldhu	r2,12(r16)
8008bb5c:	00fffdc4 	movi	r3,-9
8008bb60:	80000215 	stw	zero,8(r16)
8008bb64:	1886703a 	and	r3,r3,r2
8008bb68:	80000615 	stw	zero,24(r16)
8008bb6c:	003fd206 	br	8008bab8 <__srefill_r+0xf4>
8008bb70:	00800244 	movi	r2,9
8008bb74:	88800015 	stw	r2,0(r17)
8008bb78:	18c01014 	ori	r3,r3,64
8008bb7c:	80c0030d 	sth	r3,12(r16)
8008bb80:	00bfffc4 	movi	r2,-1
8008bb84:	003fc206 	br	8008ba90 <__srefill_r+0xcc>
8008bb88:	800b883a 	mov	r5,r16
8008bb8c:	8809883a 	mov	r4,r17
8008bb90:	0089b380 	call	80089b38 <__smakebuf_r>
8008bb94:	003fb106 	br	8008ba5c <__srefill_r+0x98>

8008bb98 <__fpclassifyd>:
8008bb98:	00a00034 	movhi	r2,32768
8008bb9c:	10bfffc4 	addi	r2,r2,-1
8008bba0:	2884703a 	and	r2,r5,r2
8008bba4:	10000726 	beq	r2,zero,8008bbc4 <__fpclassifyd+0x2c>
8008bba8:	00fffc34 	movhi	r3,65520
8008bbac:	019ff834 	movhi	r6,32736
8008bbb0:	28c7883a 	add	r3,r5,r3
8008bbb4:	31bfffc4 	addi	r6,r6,-1
8008bbb8:	30c00536 	bltu	r6,r3,8008bbd0 <__fpclassifyd+0x38>
8008bbbc:	00800104 	movi	r2,4
8008bbc0:	f800283a 	ret
8008bbc4:	2000021e 	bne	r4,zero,8008bbd0 <__fpclassifyd+0x38>
8008bbc8:	00800084 	movi	r2,2
8008bbcc:	f800283a 	ret
8008bbd0:	00dffc34 	movhi	r3,32752
8008bbd4:	019ff834 	movhi	r6,32736
8008bbd8:	28cb883a 	add	r5,r5,r3
8008bbdc:	31bfffc4 	addi	r6,r6,-1
8008bbe0:	317ff62e 	bgeu	r6,r5,8008bbbc <__fpclassifyd+0x24>
8008bbe4:	01400434 	movhi	r5,16
8008bbe8:	297fffc4 	addi	r5,r5,-1
8008bbec:	28800236 	bltu	r5,r2,8008bbf8 <__fpclassifyd+0x60>
8008bbf0:	008000c4 	movi	r2,3
8008bbf4:	f800283a 	ret
8008bbf8:	10c00226 	beq	r2,r3,8008bc04 <__fpclassifyd+0x6c>
8008bbfc:	0005883a 	mov	r2,zero
8008bc00:	f800283a 	ret
8008bc04:	2005003a 	cmpeq	r2,r4,zero
8008bc08:	f800283a 	ret

8008bc0c <__sccl>:
8008bc0c:	2a000003 	ldbu	r8,0(r5)
8008bc10:	00801784 	movi	r2,94
8008bc14:	40802a26 	beq	r8,r2,8008bcc0 <__sccl+0xb4>
8008bc18:	29400044 	addi	r5,r5,1
8008bc1c:	000f883a 	mov	r7,zero
8008bc20:	0013883a 	mov	r9,zero
8008bc24:	2007883a 	mov	r3,r4
8008bc28:	21804004 	addi	r6,r4,256
8008bc2c:	19c00005 	stb	r7,0(r3)
8008bc30:	18c00044 	addi	r3,r3,1
8008bc34:	19bffd1e 	bne	r3,r6,8008bc2c <__sccl+0x20>
8008bc38:	40001126 	beq	r8,zero,8008bc80 <__sccl+0x74>
8008bc3c:	00800044 	movi	r2,1
8008bc40:	124fc83a 	sub	r7,r2,r9
8008bc44:	02800b44 	movi	r10,45
8008bc48:	02c01744 	movi	r11,93
8008bc4c:	2205883a 	add	r2,r4,r8
8008bc50:	11c00005 	stb	r7,0(r2)
8008bc54:	28800044 	addi	r2,r5,1
8008bc58:	28c00003 	ldbu	r3,0(r5)
8008bc5c:	1a800a26 	beq	r3,r10,8008bc88 <__sccl+0x7c>
8008bc60:	1ac00426 	beq	r3,r11,8008bc74 <__sccl+0x68>
8008bc64:	18000426 	beq	r3,zero,8008bc78 <__sccl+0x6c>
8008bc68:	1811883a 	mov	r8,r3
8008bc6c:	100b883a 	mov	r5,r2
8008bc70:	003ff606 	br	8008bc4c <__sccl+0x40>
8008bc74:	f800283a 	ret
8008bc78:	2805883a 	mov	r2,r5
8008bc7c:	f800283a 	ret
8008bc80:	28bfffc4 	addi	r2,r5,-1
8008bc84:	f800283a 	ret
8008bc88:	12400003 	ldbu	r9,0(r2)
8008bc8c:	4ac01126 	beq	r9,r11,8008bcd4 <__sccl+0xc8>
8008bc90:	4a001016 	blt	r9,r8,8008bcd4 <__sccl+0xc8>
8008bc94:	41800044 	addi	r6,r8,1
8008bc98:	29400084 	addi	r5,r5,2
8008bc9c:	2187883a 	add	r3,r4,r6
8008bca0:	00000106 	br	8008bca8 <__sccl+0x9c>
8008bca4:	31800044 	addi	r6,r6,1
8008bca8:	19c00005 	stb	r7,0(r3)
8008bcac:	3011883a 	mov	r8,r6
8008bcb0:	18c00044 	addi	r3,r3,1
8008bcb4:	327ffb16 	blt	r6,r9,8008bca4 <__sccl+0x98>
8008bcb8:	10800084 	addi	r2,r2,2
8008bcbc:	003fe606 	br	8008bc58 <__sccl+0x4c>
8008bcc0:	2a000043 	ldbu	r8,1(r5)
8008bcc4:	01c00044 	movi	r7,1
8008bcc8:	29400084 	addi	r5,r5,2
8008bccc:	02400044 	movi	r9,1
8008bcd0:	003fd406 	br	8008bc24 <__sccl+0x18>
8008bcd4:	5011883a 	mov	r8,r10
8008bcd8:	003fe406 	br	8008bc6c <__sccl+0x60>

8008bcdc <nanf>:
8008bcdc:	009ff034 	movhi	r2,32704
8008bce0:	f800283a 	ret

8008bce4 <_sprintf_r>:
8008bce4:	deffe404 	addi	sp,sp,-112
8008bce8:	2807883a 	mov	r3,r5
8008bcec:	dfc01a15 	stw	ra,104(sp)
8008bcf0:	d9c01b15 	stw	r7,108(sp)
8008bcf4:	00a00034 	movhi	r2,32768
8008bcf8:	10bfffc4 	addi	r2,r2,-1
8008bcfc:	02008204 	movi	r8,520
8008bd00:	d8800215 	stw	r2,8(sp)
8008bd04:	d8800515 	stw	r2,20(sp)
8008bd08:	d9c01b04 	addi	r7,sp,108
8008bd0c:	d80b883a 	mov	r5,sp
8008bd10:	00bfffc4 	movi	r2,-1
8008bd14:	d8c00015 	stw	r3,0(sp)
8008bd18:	d8c00415 	stw	r3,16(sp)
8008bd1c:	da00030d 	sth	r8,12(sp)
8008bd20:	d880038d 	sth	r2,14(sp)
8008bd24:	008f3cc0 	call	8008f3cc <___svfprintf_internal_r>
8008bd28:	d8c00017 	ldw	r3,0(sp)
8008bd2c:	18000005 	stb	zero,0(r3)
8008bd30:	dfc01a17 	ldw	ra,104(sp)
8008bd34:	dec01c04 	addi	sp,sp,112
8008bd38:	f800283a 	ret

8008bd3c <sprintf>:
8008bd3c:	deffe304 	addi	sp,sp,-116
8008bd40:	2007883a 	mov	r3,r4
8008bd44:	dfc01a15 	stw	ra,104(sp)
8008bd48:	d9801b15 	stw	r6,108(sp)
8008bd4c:	d9c01c15 	stw	r7,112(sp)
8008bd50:	012002b4 	movhi	r4,32778
8008bd54:	2101bf04 	addi	r4,r4,1788
8008bd58:	21000017 	ldw	r4,0(r4)
8008bd5c:	00a00034 	movhi	r2,32768
8008bd60:	10bfffc4 	addi	r2,r2,-1
8008bd64:	280d883a 	mov	r6,r5
8008bd68:	02008204 	movi	r8,520
8008bd6c:	d8800215 	stw	r2,8(sp)
8008bd70:	d8800515 	stw	r2,20(sp)
8008bd74:	d9c01b04 	addi	r7,sp,108
8008bd78:	d80b883a 	mov	r5,sp
8008bd7c:	00bfffc4 	movi	r2,-1
8008bd80:	d8c00015 	stw	r3,0(sp)
8008bd84:	d8c00415 	stw	r3,16(sp)
8008bd88:	da00030d 	sth	r8,12(sp)
8008bd8c:	d880038d 	sth	r2,14(sp)
8008bd90:	008f3cc0 	call	8008f3cc <___svfprintf_internal_r>
8008bd94:	d8c00017 	ldw	r3,0(sp)
8008bd98:	18000005 	stb	zero,0(r3)
8008bd9c:	dfc01a17 	ldw	ra,104(sp)
8008bda0:	dec01d04 	addi	sp,sp,116
8008bda4:	f800283a 	ret

8008bda8 <strcmp>:
8008bda8:	2144b03a 	or	r2,r4,r5
8008bdac:	108000cc 	andi	r2,r2,3
8008bdb0:	1000171e 	bne	r2,zero,8008be10 <strcmp+0x68>
8008bdb4:	20800017 	ldw	r2,0(r4)
8008bdb8:	28c00017 	ldw	r3,0(r5)
8008bdbc:	10c0141e 	bne	r2,r3,8008be10 <strcmp+0x68>
8008bdc0:	027fbff4 	movhi	r9,65279
8008bdc4:	4a7fbfc4 	addi	r9,r9,-257
8008bdc8:	0086303a 	nor	r3,zero,r2
8008bdcc:	02202074 	movhi	r8,32897
8008bdd0:	1245883a 	add	r2,r2,r9
8008bdd4:	42202004 	addi	r8,r8,-32640
8008bdd8:	10c4703a 	and	r2,r2,r3
8008bddc:	1204703a 	and	r2,r2,r8
8008bde0:	10000226 	beq	r2,zero,8008bdec <strcmp+0x44>
8008bde4:	00002306 	br	8008be74 <strcmp+0xcc>
8008bde8:	1000221e 	bne	r2,zero,8008be74 <strcmp+0xcc>
8008bdec:	21000104 	addi	r4,r4,4
8008bdf0:	20c00017 	ldw	r3,0(r4)
8008bdf4:	29400104 	addi	r5,r5,4
8008bdf8:	29800017 	ldw	r6,0(r5)
8008bdfc:	1a4f883a 	add	r7,r3,r9
8008be00:	00c4303a 	nor	r2,zero,r3
8008be04:	3884703a 	and	r2,r7,r2
8008be08:	1204703a 	and	r2,r2,r8
8008be0c:	19bff626 	beq	r3,r6,8008bde8 <strcmp+0x40>
8008be10:	20800003 	ldbu	r2,0(r4)
8008be14:	10c03fcc 	andi	r3,r2,255
8008be18:	18c0201c 	xori	r3,r3,128
8008be1c:	18ffe004 	addi	r3,r3,-128
8008be20:	18000c26 	beq	r3,zero,8008be54 <strcmp+0xac>
8008be24:	29800007 	ldb	r6,0(r5)
8008be28:	19800326 	beq	r3,r6,8008be38 <strcmp+0x90>
8008be2c:	00001306 	br	8008be7c <strcmp+0xd4>
8008be30:	29800007 	ldb	r6,0(r5)
8008be34:	11800b1e 	bne	r2,r6,8008be64 <strcmp+0xbc>
8008be38:	21000044 	addi	r4,r4,1
8008be3c:	20c00003 	ldbu	r3,0(r4)
8008be40:	29400044 	addi	r5,r5,1
8008be44:	18803fcc 	andi	r2,r3,255
8008be48:	1080201c 	xori	r2,r2,128
8008be4c:	10bfe004 	addi	r2,r2,-128
8008be50:	103ff71e 	bne	r2,zero,8008be30 <strcmp+0x88>
8008be54:	0007883a 	mov	r3,zero
8008be58:	28800003 	ldbu	r2,0(r5)
8008be5c:	1885c83a 	sub	r2,r3,r2
8008be60:	f800283a 	ret
8008be64:	28800003 	ldbu	r2,0(r5)
8008be68:	18c03fcc 	andi	r3,r3,255
8008be6c:	1885c83a 	sub	r2,r3,r2
8008be70:	f800283a 	ret
8008be74:	0005883a 	mov	r2,zero
8008be78:	f800283a 	ret
8008be7c:	10c03fcc 	andi	r3,r2,255
8008be80:	003ff506 	br	8008be58 <strcmp+0xb0>

8008be84 <sulp>:
8008be84:	defffd04 	addi	sp,sp,-12
8008be88:	dc400115 	stw	r17,4(sp)
8008be8c:	3023883a 	mov	r17,r6
8008be90:	dc000015 	stw	r16,0(sp)
8008be94:	dfc00215 	stw	ra,8(sp)
8008be98:	2821883a 	mov	r16,r5
8008be9c:	008ada40 	call	8008ada4 <__ulp>
8008bea0:	88000c26 	beq	r17,zero,8008bed4 <sulp+0x50>
8008bea4:	841ffc2c 	andhi	r16,r16,32752
8008bea8:	8020d53a 	srli	r16,r16,20
8008beac:	01c01ac4 	movi	r7,107
8008beb0:	3c21c83a 	sub	r16,r7,r16
8008beb4:	0400070e 	bge	zero,r16,8008bed4 <sulp+0x50>
8008beb8:	8020953a 	slli	r16,r16,20
8008bebc:	01cffc34 	movhi	r7,16368
8008bec0:	000d883a 	mov	r6,zero
8008bec4:	81cf883a 	add	r7,r16,r7
8008bec8:	1009883a 	mov	r4,r2
8008becc:	180b883a 	mov	r5,r3
8008bed0:	00977a00 	call	800977a0 <__muldf3>
8008bed4:	dfc00217 	ldw	ra,8(sp)
8008bed8:	dc400117 	ldw	r17,4(sp)
8008bedc:	dc000017 	ldw	r16,0(sp)
8008bee0:	dec00304 	addi	sp,sp,12
8008bee4:	f800283a 	ret

8008bee8 <_strtod_r>:
8008bee8:	deffe204 	addi	sp,sp,-120
8008beec:	ddc01b15 	stw	r23,108(sp)
8008bef0:	dd001815 	stw	r20,96(sp)
8008bef4:	dc801615 	stw	r18,88(sp)
8008bef8:	dc401515 	stw	r17,84(sp)
8008befc:	dc001415 	stw	r16,80(sp)
8008bf00:	d9400615 	stw	r5,24(sp)
8008bf04:	dfc01d15 	stw	ra,116(sp)
8008bf08:	df001c15 	stw	fp,112(sp)
8008bf0c:	dd801a15 	stw	r22,104(sp)
8008bf10:	dd401915 	stw	r21,100(sp)
8008bf14:	dcc01715 	stw	r19,92(sp)
8008bf18:	2021883a 	mov	r16,r4
8008bf1c:	d8000515 	stw	zero,20(sp)
8008bf20:	2809883a 	mov	r4,r5
8008bf24:	20800003 	ldbu	r2,0(r4)
8008bf28:	01e00274 	movhi	r7,32777
8008bf2c:	282f883a 	mov	r23,r5
8008bf30:	10c03fcc 	andi	r3,r2,255
8008bf34:	01400b44 	movi	r5,45
8008bf38:	39efd704 	addi	r7,r7,-16548
8008bf3c:	3029883a 	mov	r20,r6
8008bf40:	0025883a 	mov	r18,zero
8008bf44:	0023883a 	mov	r17,zero
8008bf48:	28c0ba36 	bltu	r5,r3,8008c234 <_strtod_r+0x34c>
8008bf4c:	180690ba 	slli	r3,r3,2
8008bf50:	19c7883a 	add	r3,r3,r7
8008bf54:	18c00017 	ldw	r3,0(r3)
8008bf58:	1800683a 	jmp	r3
8008bf5c:	8008c01c 	xori	zero,r16,8960
8008bf60:	8008c234 	orhi	zero,r16,8968
8008bf64:	8008c234 	orhi	zero,r16,8968
8008bf68:	8008c234 	orhi	zero,r16,8968
8008bf6c:	8008c234 	orhi	zero,r16,8968
8008bf70:	8008c234 	orhi	zero,r16,8968
8008bf74:	8008c234 	orhi	zero,r16,8968
8008bf78:	8008c234 	orhi	zero,r16,8968
8008bf7c:	8008c234 	orhi	zero,r16,8968
8008bf80:	8008c220 	cmpeqi	zero,r16,8968
8008bf84:	8008c220 	cmpeqi	zero,r16,8968
8008bf88:	8008c220 	cmpeqi	zero,r16,8968
8008bf8c:	8008c220 	cmpeqi	zero,r16,8968
8008bf90:	8008c220 	cmpeqi	zero,r16,8968
8008bf94:	8008c234 	orhi	zero,r16,8968
8008bf98:	8008c234 	orhi	zero,r16,8968
8008bf9c:	8008c234 	orhi	zero,r16,8968
8008bfa0:	8008c234 	orhi	zero,r16,8968
8008bfa4:	8008c234 	orhi	zero,r16,8968
8008bfa8:	8008c234 	orhi	zero,r16,8968
8008bfac:	8008c234 	orhi	zero,r16,8968
8008bfb0:	8008c234 	orhi	zero,r16,8968
8008bfb4:	8008c234 	orhi	zero,r16,8968
8008bfb8:	8008c234 	orhi	zero,r16,8968
8008bfbc:	8008c234 	orhi	zero,r16,8968
8008bfc0:	8008c234 	orhi	zero,r16,8968
8008bfc4:	8008c234 	orhi	zero,r16,8968
8008bfc8:	8008c234 	orhi	zero,r16,8968
8008bfcc:	8008c234 	orhi	zero,r16,8968
8008bfd0:	8008c234 	orhi	zero,r16,8968
8008bfd4:	8008c234 	orhi	zero,r16,8968
8008bfd8:	8008c234 	orhi	zero,r16,8968
8008bfdc:	8008c220 	cmpeqi	zero,r16,8968
8008bfe0:	8008c234 	orhi	zero,r16,8968
8008bfe4:	8008c234 	orhi	zero,r16,8968
8008bfe8:	8008c234 	orhi	zero,r16,8968
8008bfec:	8008c234 	orhi	zero,r16,8968
8008bff0:	8008c234 	orhi	zero,r16,8968
8008bff4:	8008c234 	orhi	zero,r16,8968
8008bff8:	8008c234 	orhi	zero,r16,8968
8008bffc:	8008c234 	orhi	zero,r16,8968
8008c000:	8008c234 	orhi	zero,r16,8968
8008c004:	8008c234 	orhi	zero,r16,8968
8008c008:	8008c074 	orhi	zero,r16,8961
8008c00c:	8008c234 	orhi	zero,r16,8968
8008c010:	8008c214 	ori	zero,r16,8968
8008c014:	00801244 	movi	r2,73
8008c018:	88843526 	beq	r17,r2,8008d0f0 <_strtod_r+0x1208>
8008c01c:	002b883a 	mov	r21,zero
8008c020:	002d883a 	mov	r22,zero
8008c024:	a0000526 	beq	r20,zero,8008c03c <_strtod_r+0x154>
8008c028:	d8000715 	stw	zero,28(sp)
8008c02c:	a5c00015 	stw	r23,0(r20)
8008c030:	d9000717 	ldw	r4,28(sp)
8008c034:	20000126 	beq	r4,zero,8008c03c <_strtod_r+0x154>
8008c038:	b5a0003c 	xorhi	r22,r22,32768
8008c03c:	a805883a 	mov	r2,r21
8008c040:	b007883a 	mov	r3,r22
8008c044:	dfc01d17 	ldw	ra,116(sp)
8008c048:	df001c17 	ldw	fp,112(sp)
8008c04c:	ddc01b17 	ldw	r23,108(sp)
8008c050:	dd801a17 	ldw	r22,104(sp)
8008c054:	dd401917 	ldw	r21,100(sp)
8008c058:	dd001817 	ldw	r20,96(sp)
8008c05c:	dcc01717 	ldw	r19,92(sp)
8008c060:	dc801617 	ldw	r18,88(sp)
8008c064:	dc401517 	ldw	r17,84(sp)
8008c068:	dc001417 	ldw	r16,80(sp)
8008c06c:	dec01e04 	addi	sp,sp,120
8008c070:	f800283a 	ret
8008c074:	d8000715 	stw	zero,28(sp)
8008c078:	24c00044 	addi	r19,r4,1
8008c07c:	dcc00615 	stw	r19,24(sp)
8008c080:	20800043 	ldbu	r2,1(r4)
8008c084:	10c03fcc 	andi	r3,r2,255
8008c088:	18c0201c 	xori	r3,r3,128
8008c08c:	18ffe004 	addi	r3,r3,-128
8008c090:	183fe226 	beq	r3,zero,8008c01c <_strtod_r+0x134>
8008c094:	11403fcc 	andi	r5,r2,255
8008c098:	2940201c 	xori	r5,r5,128
8008c09c:	297fe004 	addi	r5,r5,-128
8008c0a0:	00c00c04 	movi	r3,48
8008c0a4:	28c0e526 	beq	r5,r3,8008c43c <_strtod_r+0x554>
8008c0a8:	dcc00815 	stw	r19,32(sp)
8008c0ac:	0025883a 	mov	r18,zero
8008c0b0:	10fff404 	addi	r3,r2,-48
8008c0b4:	18c03fcc 	andi	r3,r3,255
8008c0b8:	01000244 	movi	r4,9
8008c0bc:	20c37536 	bltu	r4,r3,8008ce94 <_strtod_r+0xfac>
8008c0c0:	dd400817 	ldw	r21,32(sp)
8008c0c4:	0027883a 	mov	r19,zero
8008c0c8:	0039883a 	mov	fp,zero
8008c0cc:	002d883a 	mov	r22,zero
8008c0d0:	01400204 	movi	r5,8
8008c0d4:	2d805a16 	blt	r5,r22,8008c240 <_strtod_r+0x358>
8008c0d8:	e70002a4 	muli	fp,fp,10
8008c0dc:	10c03fcc 	andi	r3,r2,255
8008c0e0:	18c0201c 	xori	r3,r3,128
8008c0e4:	18ffe004 	addi	r3,r3,-128
8008c0e8:	e0f9883a 	add	fp,fp,r3
8008c0ec:	e73ff404 	addi	fp,fp,-48
8008c0f0:	ad400044 	addi	r21,r21,1
8008c0f4:	dd400615 	stw	r21,24(sp)
8008c0f8:	a8800003 	ldbu	r2,0(r21)
8008c0fc:	b5800044 	addi	r22,r22,1
8008c100:	10fff404 	addi	r3,r2,-48
8008c104:	18c03fcc 	andi	r3,r3,255
8008c108:	20fff22e 	bgeu	r4,r3,8008c0d4 <_strtod_r+0x1ec>
8008c10c:	14403fcc 	andi	r17,r2,255
8008c110:	8c40201c 	xori	r17,r17,128
8008c114:	8c7fe004 	addi	r17,r17,-128
8008c118:	8009883a 	mov	r4,r16
8008c11c:	0089aa80 	call	80089aa8 <_localeconv_r>
8008c120:	11400017 	ldw	r5,0(r2)
8008c124:	8009883a 	mov	r4,r16
8008c128:	d9401315 	stw	r5,76(sp)
8008c12c:	0089aa80 	call	80089aa8 <_localeconv_r>
8008c130:	11000017 	ldw	r4,0(r2)
8008c134:	00833580 	call	80083358 <strlen>
8008c138:	d9401317 	ldw	r5,76(sp)
8008c13c:	100d883a 	mov	r6,r2
8008c140:	a809883a 	mov	r4,r21
8008c144:	0093fd00 	call	80093fd0 <strncmp>
8008c148:	1000ce26 	beq	r2,zero,8008c484 <_strtod_r+0x59c>
8008c14c:	b013883a 	mov	r9,r22
8008c150:	000b883a 	mov	r5,zero
8008c154:	0015883a 	mov	r10,zero
8008c158:	0017883a 	mov	r11,zero
8008c15c:	00801944 	movi	r2,101
8008c160:	88807826 	beq	r17,r2,8008c344 <_strtod_r+0x45c>
8008c164:	00801144 	movi	r2,69
8008c168:	88807626 	beq	r17,r2,8008c344 <_strtod_r+0x45c>
8008c16c:	002b883a 	mov	r21,zero
8008c170:	48003d1e 	bne	r9,zero,8008c268 <_strtod_r+0x380>
8008c174:	2800391e 	bne	r5,zero,8008c25c <_strtod_r+0x374>
8008c178:	9000381e 	bne	r18,zero,8008c25c <_strtod_r+0x374>
8008c17c:	583fa71e 	bne	r11,zero,8008c01c <_strtod_r+0x134>
8008c180:	00801384 	movi	r2,78
8008c184:	88800526 	beq	r17,r2,8008c19c <_strtod_r+0x2b4>
8008c188:	147fa20e 	bge	r2,r17,8008c014 <_strtod_r+0x12c>
8008c18c:	00801a44 	movi	r2,105
8008c190:	8883d726 	beq	r17,r2,8008d0f0 <_strtod_r+0x1208>
8008c194:	00801b84 	movi	r2,110
8008c198:	88bfa01e 	bne	r17,r2,8008c01c <_strtod_r+0x134>
8008c19c:	016002b4 	movhi	r5,32778
8008c1a0:	d9000617 	ldw	r4,24(sp)
8008c1a4:	29796b04 	addi	r5,r5,-6740
8008c1a8:	01c00644 	movi	r7,25
8008c1ac:	00000b06 	br	8008c1dc <_strtod_r+0x2f4>
8008c1b0:	21000044 	addi	r4,r4,1
8008c1b4:	20800003 	ldbu	r2,0(r4)
8008c1b8:	10ffefc4 	addi	r3,r2,-65
8008c1bc:	10803fcc 	andi	r2,r2,255
8008c1c0:	1080201c 	xori	r2,r2,128
8008c1c4:	18c03fcc 	andi	r3,r3,255
8008c1c8:	10bfe004 	addi	r2,r2,-128
8008c1cc:	38c00136 	bltu	r7,r3,8008c1d4 <_strtod_r+0x2ec>
8008c1d0:	10800804 	addi	r2,r2,32
8008c1d4:	29400044 	addi	r5,r5,1
8008c1d8:	11bf901e 	bne	r2,r6,8008c01c <_strtod_r+0x134>
8008c1dc:	29800007 	ldb	r6,0(r5)
8008c1e0:	303ff31e 	bne	r6,zero,8008c1b0 <_strtod_r+0x2c8>
8008c1e4:	20800044 	addi	r2,r4,1
8008c1e8:	d8800615 	stw	r2,24(sp)
8008c1ec:	20c00047 	ldb	r3,1(r4)
8008c1f0:	00800a04 	movi	r2,40
8008c1f4:	18849d26 	beq	r3,r2,8008d46c <_strtod_r+0x1584>
8008c1f8:	047ffe34 	movhi	r17,65528
8008c1fc:	0025883a 	mov	r18,zero
8008c200:	902b883a 	mov	r21,r18
8008c204:	882d883a 	mov	r22,r17
8008c208:	a03f8926 	beq	r20,zero,8008c030 <_strtod_r+0x148>
8008c20c:	ddc00617 	ldw	r23,24(sp)
8008c210:	003f8606 	br	8008c02c <_strtod_r+0x144>
8008c214:	00800044 	movi	r2,1
8008c218:	d8800715 	stw	r2,28(sp)
8008c21c:	003f9606 	br	8008c078 <_strtod_r+0x190>
8008c220:	21000044 	addi	r4,r4,1
8008c224:	d9000615 	stw	r4,24(sp)
8008c228:	20800003 	ldbu	r2,0(r4)
8008c22c:	10c03fcc 	andi	r3,r2,255
8008c230:	28ff462e 	bgeu	r5,r3,8008bf4c <_strtod_r+0x64>
8008c234:	2027883a 	mov	r19,r4
8008c238:	d8000715 	stw	zero,28(sp)
8008c23c:	003f9506 	br	8008c094 <_strtod_r+0x1ac>
8008c240:	9cc002a4 	muli	r19,r19,10
8008c244:	10803fcc 	andi	r2,r2,255
8008c248:	1080201c 	xori	r2,r2,128
8008c24c:	10bfe004 	addi	r2,r2,-128
8008c250:	9885883a 	add	r2,r19,r2
8008c254:	14fff404 	addi	r19,r2,-48
8008c258:	003fa506 	br	8008c0f0 <_strtod_r+0x208>
8008c25c:	002b883a 	mov	r21,zero
8008c260:	002d883a 	mov	r22,zero
8008c264:	003fe806 	br	8008c208 <_strtod_r+0x320>
8008c268:	aaabc83a 	sub	r21,r21,r10
8008c26c:	b000011e 	bne	r22,zero,8008c274 <_strtod_r+0x38c>
8008c270:	482d883a 	mov	r22,r9
8008c274:	00800404 	movi	r2,16
8008c278:	482f883a 	mov	r23,r9
8008c27c:	1240010e 	bge	r2,r9,8008c284 <_strtod_r+0x39c>
8008c280:	102f883a 	mov	r23,r2
8008c284:	e009883a 	mov	r4,fp
8008c288:	da401315 	stw	r9,76(sp)
8008c28c:	00989100 	call	80098910 <__floatunsidf>
8008c290:	1025883a 	mov	r18,r2
8008c294:	00800244 	movi	r2,9
8008c298:	1823883a 	mov	r17,r3
8008c29c:	da401317 	ldw	r9,76(sp)
8008c2a0:	15c0160e 	bge	r2,r23,8008c2fc <_strtod_r+0x414>
8008c2a4:	b8bffdc4 	addi	r2,r23,-9
8008c2a8:	100490fa 	slli	r2,r2,3
8008c2ac:	180b883a 	mov	r5,r3
8008c2b0:	00e002b4 	movhi	r3,32778
8008c2b4:	18f93604 	addi	r3,r3,-6952
8008c2b8:	1885883a 	add	r2,r3,r2
8008c2bc:	11800017 	ldw	r6,0(r2)
8008c2c0:	11c00117 	ldw	r7,4(r2)
8008c2c4:	9009883a 	mov	r4,r18
8008c2c8:	00977a00 	call	800977a0 <__muldf3>
8008c2cc:	9809883a 	mov	r4,r19
8008c2d0:	1025883a 	mov	r18,r2
8008c2d4:	1823883a 	mov	r17,r3
8008c2d8:	00989100 	call	80098910 <__floatunsidf>
8008c2dc:	9009883a 	mov	r4,r18
8008c2e0:	880b883a 	mov	r5,r17
8008c2e4:	100d883a 	mov	r6,r2
8008c2e8:	180f883a 	mov	r7,r3
8008c2ec:	00963b40 	call	800963b4 <__adddf3>
8008c2f0:	da401317 	ldw	r9,76(sp)
8008c2f4:	1025883a 	mov	r18,r2
8008c2f8:	1823883a 	mov	r17,r3
8008c2fc:	008003c4 	movi	r2,15
8008c300:	12407b16 	blt	r2,r9,8008c4f0 <_strtod_r+0x608>
8008c304:	a83fbe26 	beq	r21,zero,8008c200 <_strtod_r+0x318>
8008c308:	0543670e 	bge	zero,r21,8008d0a8 <_strtod_r+0x11c0>
8008c30c:	00c00584 	movi	r3,22
8008c310:	1d42e816 	blt	r3,r21,8008ceb4 <_strtod_r+0xfcc>
8008c314:	a82a90fa 	slli	r21,r21,3
8008c318:	00a002b4 	movhi	r2,32778
8008c31c:	10b93604 	addi	r2,r2,-6952
8008c320:	1545883a 	add	r2,r2,r21
8008c324:	11000017 	ldw	r4,0(r2)
8008c328:	11400117 	ldw	r5,4(r2)
8008c32c:	900d883a 	mov	r6,r18
8008c330:	880f883a 	mov	r7,r17
8008c334:	00977a00 	call	800977a0 <__muldf3>
8008c338:	102b883a 	mov	r21,r2
8008c33c:	182d883a 	mov	r22,r3
8008c340:	003fb106 	br	8008c208 <_strtod_r+0x320>
8008c344:	4801b526 	beq	r9,zero,8008ca1c <_strtod_r+0xb34>
8008c348:	ddc00617 	ldw	r23,24(sp)
8008c34c:	00c00ac4 	movi	r3,43
8008c350:	b8800044 	addi	r2,r23,1
8008c354:	d8800615 	stw	r2,24(sp)
8008c358:	b8800047 	ldb	r2,1(r23)
8008c35c:	10c1e926 	beq	r2,r3,8008cb04 <_strtod_r+0xc1c>
8008c360:	00c00b44 	movi	r3,45
8008c364:	10c1ec26 	beq	r2,r3,8008cb18 <_strtod_r+0xc30>
8008c368:	1023883a 	mov	r17,r2
8008c36c:	0019883a 	mov	r12,zero
8008c370:	88bff404 	addi	r2,r17,-48
8008c374:	00c00244 	movi	r3,9
8008c378:	1881b736 	bltu	r3,r2,8008ca58 <_strtod_r+0xb70>
8008c37c:	00800c04 	movi	r2,48
8008c380:	8880071e 	bne	r17,r2,8008c3a0 <_strtod_r+0x4b8>
8008c384:	d8800617 	ldw	r2,24(sp)
8008c388:	8807883a 	mov	r3,r17
8008c38c:	10800044 	addi	r2,r2,1
8008c390:	d8800615 	stw	r2,24(sp)
8008c394:	14400007 	ldb	r17,0(r2)
8008c398:	10800044 	addi	r2,r2,1
8008c39c:	88fffc26 	beq	r17,r3,8008c390 <_strtod_r+0x4a8>
8008c3a0:	88bff3c4 	addi	r2,r17,-49
8008c3a4:	00c00204 	movi	r3,8
8008c3a8:	18bf7036 	bltu	r3,r2,8008c16c <_strtod_r+0x284>
8008c3ac:	db800617 	ldw	r14,24(sp)
8008c3b0:	88bff404 	addi	r2,r17,-48
8008c3b4:	03400244 	movi	r13,9
8008c3b8:	71c00044 	addi	r7,r14,1
8008c3bc:	d9c00615 	stw	r7,24(sp)
8008c3c0:	74400043 	ldbu	r17,1(r14)
8008c3c4:	88fff404 	addi	r3,r17,-48
8008c3c8:	8c403fcc 	andi	r17,r17,255
8008c3cc:	8c40201c 	xori	r17,r17,128
8008c3d0:	18c03fcc 	andi	r3,r3,255
8008c3d4:	8c7fe004 	addi	r17,r17,-128
8008c3d8:	68c00e36 	bltu	r13,r3,8008c414 <_strtod_r+0x52c>
8008c3dc:	71000084 	addi	r4,r14,2
8008c3e0:	d9000615 	stw	r4,24(sp)
8008c3e4:	108002a4 	muli	r2,r2,10
8008c3e8:	21800003 	ldbu	r6,0(r4)
8008c3ec:	200f883a 	mov	r7,r4
8008c3f0:	1463883a 	add	r17,r2,r17
8008c3f4:	30fff404 	addi	r3,r6,-48
8008c3f8:	88bff404 	addi	r2,r17,-48
8008c3fc:	34403fcc 	andi	r17,r6,255
8008c400:	8c40201c 	xori	r17,r17,128
8008c404:	18c03fcc 	andi	r3,r3,255
8008c408:	8c7fe004 	addi	r17,r17,-128
8008c40c:	21000044 	addi	r4,r4,1
8008c410:	68fff32e 	bgeu	r13,r3,8008c3e0 <_strtod_r+0x4f8>
8008c414:	3b8fc83a 	sub	r7,r7,r14
8008c418:	00c00204 	movi	r3,8
8008c41c:	19c29716 	blt	r3,r7,8008ce7c <_strtod_r+0xf94>
8008c420:	102b883a 	mov	r21,r2
8008c424:	009387c4 	movi	r2,19999
8008c428:	1540010e 	bge	r2,r21,8008c430 <_strtod_r+0x548>
8008c42c:	102b883a 	mov	r21,r2
8008c430:	603f4f26 	beq	r12,zero,8008c170 <_strtod_r+0x288>
8008c434:	056bc83a 	sub	r21,zero,r21
8008c438:	003f4d06 	br	8008c170 <_strtod_r+0x288>
8008c43c:	98800047 	ldb	r2,1(r19)
8008c440:	00c01604 	movi	r3,88
8008c444:	10c1de26 	beq	r2,r3,8008cbc0 <_strtod_r+0xcd8>
8008c448:	00c01e04 	movi	r3,120
8008c44c:	10c1dc26 	beq	r2,r3,8008cbc0 <_strtod_r+0xcd8>
8008c450:	98c00044 	addi	r3,r19,1
8008c454:	1827883a 	mov	r19,r3
8008c458:	d8c00615 	stw	r3,24(sp)
8008c45c:	18c00044 	addi	r3,r3,1
8008c460:	18bfffc3 	ldbu	r2,-1(r3)
8008c464:	11003fcc 	andi	r4,r2,255
8008c468:	2100201c 	xori	r4,r4,128
8008c46c:	213fe004 	addi	r4,r4,-128
8008c470:	217ff826 	beq	r4,r5,8008c454 <_strtod_r+0x56c>
8008c474:	203f7926 	beq	r4,zero,8008c25c <_strtod_r+0x374>
8008c478:	dcc00815 	stw	r19,32(sp)
8008c47c:	04800044 	movi	r18,1
8008c480:	003f0b06 	br	8008c0b0 <_strtod_r+0x1c8>
8008c484:	8009883a 	mov	r4,r16
8008c488:	0089aa80 	call	80089aa8 <_localeconv_r>
8008c48c:	11000017 	ldw	r4,0(r2)
8008c490:	00833580 	call	80083358 <strlen>
8008c494:	d8c00617 	ldw	r3,24(sp)
8008c498:	1885883a 	add	r2,r3,r2
8008c49c:	d8800615 	stw	r2,24(sp)
8008c4a0:	14400007 	ldb	r17,0(r2)
8008c4a4:	b001881e 	bne	r22,zero,8008cac8 <_strtod_r+0xbe0>
8008c4a8:	00c00c04 	movi	r3,48
8008c4ac:	88c3391e 	bne	r17,r3,8008d194 <_strtod_r+0x12ac>
8008c4b0:	10c00044 	addi	r3,r2,1
8008c4b4:	8809883a 	mov	r4,r17
8008c4b8:	d8c00615 	stw	r3,24(sp)
8008c4bc:	1c400007 	ldb	r17,0(r3)
8008c4c0:	188bc83a 	sub	r5,r3,r2
8008c4c4:	18c00044 	addi	r3,r3,1
8008c4c8:	893ffb26 	beq	r17,r4,8008c4b8 <_strtod_r+0x5d0>
8008c4cc:	88bff3c4 	addi	r2,r17,-49
8008c4d0:	00c00204 	movi	r3,8
8008c4d4:	1882e72e 	bgeu	r3,r2,8008d074 <_strtod_r+0x118c>
8008c4d8:	00801944 	movi	r2,101
8008c4dc:	88814d26 	beq	r17,r2,8008ca14 <_strtod_r+0xb2c>
8008c4e0:	0013883a 	mov	r9,zero
8008c4e4:	0015883a 	mov	r10,zero
8008c4e8:	02c00044 	movi	r11,1
8008c4ec:	003f1d06 	br	8008c164 <_strtod_r+0x27c>
8008c4f0:	4defc83a 	sub	r23,r9,r23
8008c4f4:	bd6f883a 	add	r23,r23,r21
8008c4f8:	05c21e0e 	bge	zero,r23,8008cd74 <_strtod_r+0xe8c>
8008c4fc:	b88003cc 	andi	r2,r23,15
8008c500:	10000d26 	beq	r2,zero,8008c538 <_strtod_r+0x650>
8008c504:	100490fa 	slli	r2,r2,3
8008c508:	00e002b4 	movhi	r3,32778
8008c50c:	18f93604 	addi	r3,r3,-6952
8008c510:	1885883a 	add	r2,r3,r2
8008c514:	11000017 	ldw	r4,0(r2)
8008c518:	11400117 	ldw	r5,4(r2)
8008c51c:	900d883a 	mov	r6,r18
8008c520:	880f883a 	mov	r7,r17
8008c524:	da401315 	stw	r9,76(sp)
8008c528:	00977a00 	call	800977a0 <__muldf3>
8008c52c:	da401317 	ldw	r9,76(sp)
8008c530:	1025883a 	mov	r18,r2
8008c534:	1823883a 	mov	r17,r3
8008c538:	023ffc04 	movi	r8,-16
8008c53c:	ba10703a 	and	r8,r23,r8
8008c540:	40003c26 	beq	r8,zero,8008c634 <_strtod_r+0x74c>
8008c544:	00804d04 	movi	r2,308
8008c548:	1201cd16 	blt	r2,r8,8008cc80 <_strtod_r+0xd98>
8008c54c:	4011d13a 	srai	r8,r8,4
8008c550:	03000044 	movi	r12,1
8008c554:	62037c0e 	bge	r12,r8,8008d348 <_strtod_r+0x1460>
8008c558:	012002b4 	movhi	r4,32778
8008c55c:	21392c04 	addi	r4,r4,-6992
8008c560:	2015883a 	mov	r10,r4
8008c564:	0027883a 	mov	r19,zero
8008c568:	d9000915 	stw	r4,36(sp)
8008c56c:	9005883a 	mov	r2,r18
8008c570:	8807883a 	mov	r3,r17
8008c574:	dc000c15 	stw	r16,48(sp)
8008c578:	dc800e15 	stw	r18,56(sp)
8008c57c:	9821883a 	mov	r16,r19
8008c580:	0009883a 	mov	r4,zero
8008c584:	8827883a 	mov	r19,r17
8008c588:	602f883a 	mov	r23,r12
8008c58c:	da400a15 	stw	r9,40(sp)
8008c590:	5025883a 	mov	r18,r10
8008c594:	4023883a 	mov	r17,r8
8008c598:	8980004c 	andi	r6,r17,1
8008c59c:	30000626 	beq	r6,zero,8008c5b8 <_strtod_r+0x6d0>
8008c5a0:	91800017 	ldw	r6,0(r18)
8008c5a4:	91c00117 	ldw	r7,4(r18)
8008c5a8:	1009883a 	mov	r4,r2
8008c5ac:	180b883a 	mov	r5,r3
8008c5b0:	00977a00 	call	800977a0 <__muldf3>
8008c5b4:	01000044 	movi	r4,1
8008c5b8:	8823d07a 	srai	r17,r17,1
8008c5bc:	84000044 	addi	r16,r16,1
8008c5c0:	94800204 	addi	r18,r18,8
8008c5c4:	8dfff41e 	bne	r17,r23,8008c598 <_strtod_r+0x6b0>
8008c5c8:	21003fcc 	andi	r4,r4,255
8008c5cc:	9823883a 	mov	r17,r19
8008c5d0:	da400a17 	ldw	r9,40(sp)
8008c5d4:	8027883a 	mov	r19,r16
8008c5d8:	dc800e17 	ldw	r18,56(sp)
8008c5dc:	dc000c17 	ldw	r16,48(sp)
8008c5e0:	2003b11e 	bne	r4,zero,8008d4a8 <_strtod_r+0x15c0>
8008c5e4:	981690fa 	slli	r11,r19,3
8008c5e8:	d8800917 	ldw	r2,36(sp)
8008c5ec:	01ff2c34 	movhi	r7,64688
8008c5f0:	900d883a 	mov	r6,r18
8008c5f4:	12ef883a 	add	r23,r2,r11
8008c5f8:	b9000017 	ldw	r4,0(r23)
8008c5fc:	b9400117 	ldw	r5,4(r23)
8008c600:	89cf883a 	add	r7,r17,r7
8008c604:	da401315 	stw	r9,76(sp)
8008c608:	00977a00 	call	800977a0 <__muldf3>
8008c60c:	1025883a 	mov	r18,r2
8008c610:	011f2834 	movhi	r4,31904
8008c614:	189ffc2c 	andhi	r2,r3,32752
8008c618:	da401317 	ldw	r9,76(sp)
8008c61c:	20819836 	bltu	r4,r2,8008cc80 <_strtod_r+0xd98>
8008c620:	011f2434 	movhi	r4,31888
8008c624:	2083382e 	bgeu	r4,r2,8008d308 <_strtod_r+0x1420>
8008c628:	045ffc34 	movhi	r17,32752
8008c62c:	8c7fffc4 	addi	r17,r17,-1
8008c630:	04bfffc4 	movi	r18,-1
8008c634:	d8000915 	stw	zero,36(sp)
8008c638:	d9400817 	ldw	r5,32(sp)
8008c63c:	df000015 	stw	fp,0(sp)
8008c640:	480f883a 	mov	r7,r9
8008c644:	b00d883a 	mov	r6,r22
8008c648:	8009883a 	mov	r4,r16
8008c64c:	008a4700 	call	8008a470 <__s2b>
8008c650:	d8800815 	stw	r2,32(sp)
8008c654:	10018a26 	beq	r2,zero,8008cc80 <_strtod_r+0xd98>
8008c658:	a807d7fa 	srai	r3,r21,31
8008c65c:	0545c83a 	sub	r2,zero,r21
8008c660:	dd400a15 	stw	r21,40(sp)
8008c664:	1886703a 	and	r3,r3,r2
8008c668:	d8c00c15 	stw	r3,48(sp)
8008c66c:	a8013516 	blt	r21,zero,8008cb44 <_strtod_r+0xc5c>
8008c670:	d9400817 	ldw	r5,32(sp)
8008c674:	0011883a 	mov	r8,zero
8008c678:	0027883a 	mov	r19,zero
8008c67c:	29400304 	addi	r5,r5,12
8008c680:	d9400f15 	stw	r5,60(sp)
8008c684:	402b883a 	mov	r21,r8
8008c688:	dd001215 	stw	r20,72(sp)
8008c68c:	d8800817 	ldw	r2,32(sp)
8008c690:	8009883a 	mov	r4,r16
8008c694:	11400117 	ldw	r5,4(r2)
8008c698:	008a2800 	call	8008a280 <_Balloc>
8008c69c:	1029883a 	mov	r20,r2
8008c6a0:	10012d26 	beq	r2,zero,8008cb58 <_strtod_r+0xc70>
8008c6a4:	d8c00817 	ldw	r3,32(sp)
8008c6a8:	d9400f17 	ldw	r5,60(sp)
8008c6ac:	11000304 	addi	r4,r2,12
8008c6b0:	19800417 	ldw	r6,16(r3)
8008c6b4:	31800084 	addi	r6,r6,2
8008c6b8:	318d883a 	add	r6,r6,r6
8008c6bc:	318d883a 	add	r6,r6,r6
8008c6c0:	0082da40 	call	80082da4 <memcpy>
8008c6c4:	d9000204 	addi	r4,sp,8
8008c6c8:	d9000015 	stw	r4,0(sp)
8008c6cc:	d9c00404 	addi	r7,sp,16
8008c6d0:	900b883a 	mov	r5,r18
8008c6d4:	880d883a 	mov	r6,r17
8008c6d8:	8009883a 	mov	r4,r16
8008c6dc:	008af140 	call	8008af14 <__d2b>
8008c6e0:	d8800515 	stw	r2,20(sp)
8008c6e4:	dc801115 	stw	r18,68(sp)
8008c6e8:	dc401015 	stw	r17,64(sp)
8008c6ec:	10027c26 	beq	r2,zero,8008d0e0 <_strtod_r+0x11f8>
8008c6f0:	01400044 	movi	r5,1
8008c6f4:	8009883a 	mov	r4,r16
8008c6f8:	008a68c0 	call	8008a68c <__i2b>
8008c6fc:	1027883a 	mov	r19,r2
8008c700:	10011526 	beq	r2,zero,8008cb58 <_strtod_r+0xc70>
8008c704:	d8800417 	ldw	r2,16(sp)
8008c708:	1000c816 	blt	r2,zero,8008ca2c <_strtod_r+0xb44>
8008c70c:	d9400c17 	ldw	r5,48(sp)
8008c710:	d9000a17 	ldw	r4,40(sp)
8008c714:	28ad883a 	add	r22,r5,r2
8008c718:	d9400917 	ldw	r5,36(sp)
8008c71c:	df000217 	ldw	fp,8(sp)
8008c720:	05ff0084 	movi	r23,-1022
8008c724:	1147c83a 	sub	r3,r2,r5
8008c728:	1f07883a 	add	r3,r3,fp
8008c72c:	00800d84 	movi	r2,54
8008c730:	18ffffc4 	addi	r3,r3,-1
8008c734:	1739c83a 	sub	fp,r2,fp
8008c738:	1dc0a50e 	bge	r3,r23,8008c9d0 <_strtod_r+0xae8>
8008c73c:	b8efc83a 	sub	r23,r23,r3
8008c740:	008007c4 	movi	r2,31
8008c744:	e5f9c83a 	sub	fp,fp,r23
8008c748:	15c0bc16 	blt	r2,r23,8008ca3c <_strtod_r+0xb54>
8008c74c:	00800044 	movi	r2,1
8008c750:	15c4983a 	sll	r2,r2,r23
8008c754:	d8000b15 	stw	zero,44(sp)
8008c758:	d8800d15 	stw	r2,52(sp)
8008c75c:	2707883a 	add	r3,r4,fp
8008c760:	d9000917 	ldw	r4,36(sp)
8008c764:	b739883a 	add	fp,r22,fp
8008c768:	20ef883a 	add	r23,r4,r3
8008c76c:	b009883a 	mov	r4,r22
8008c770:	e580010e 	bge	fp,r22,8008c778 <_strtod_r+0x890>
8008c774:	e009883a 	mov	r4,fp
8008c778:	b805883a 	mov	r2,r23
8008c77c:	25c0010e 	bge	r4,r23,8008c784 <_strtod_r+0x89c>
8008c780:	2005883a 	mov	r2,r4
8008c784:	0080030e 	bge	zero,r2,8008c794 <_strtod_r+0x8ac>
8008c788:	e0b9c83a 	sub	fp,fp,r2
8008c78c:	b8afc83a 	sub	r23,r23,r2
8008c790:	b0adc83a 	sub	r22,r22,r2
8008c794:	d9400c17 	ldw	r5,48(sp)
8008c798:	28001126 	beq	r5,zero,8008c7e0 <_strtod_r+0x8f8>
8008c79c:	280d883a 	mov	r6,r5
8008c7a0:	8009883a 	mov	r4,r16
8008c7a4:	980b883a 	mov	r5,r19
8008c7a8:	008a8c00 	call	8008a8c0 <__pow5mult>
8008c7ac:	1027883a 	mov	r19,r2
8008c7b0:	1000e926 	beq	r2,zero,8008cb58 <_strtod_r+0xc70>
8008c7b4:	d9800517 	ldw	r6,20(sp)
8008c7b8:	100b883a 	mov	r5,r2
8008c7bc:	8009883a 	mov	r4,r16
8008c7c0:	008a6c80 	call	8008a6c8 <__multiply>
8008c7c4:	1000e426 	beq	r2,zero,8008cb58 <_strtod_r+0xc70>
8008c7c8:	d9400517 	ldw	r5,20(sp)
8008c7cc:	8009883a 	mov	r4,r16
8008c7d0:	d8801315 	stw	r2,76(sp)
8008c7d4:	008a3280 	call	8008a328 <_Bfree>
8008c7d8:	d8801317 	ldw	r2,76(sp)
8008c7dc:	d8800515 	stw	r2,20(sp)
8008c7e0:	0700060e 	bge	zero,fp,8008c7fc <_strtod_r+0x914>
8008c7e4:	d9400517 	ldw	r5,20(sp)
8008c7e8:	e00d883a 	mov	r6,fp
8008c7ec:	8009883a 	mov	r4,r16
8008c7f0:	008aa000 	call	8008aa00 <__lshift>
8008c7f4:	d8800515 	stw	r2,20(sp)
8008c7f8:	10023926 	beq	r2,zero,8008d0e0 <_strtod_r+0x11f8>
8008c7fc:	d8800a17 	ldw	r2,40(sp)
8008c800:	10000626 	beq	r2,zero,8008c81c <_strtod_r+0x934>
8008c804:	d9800a17 	ldw	r6,40(sp)
8008c808:	a00b883a 	mov	r5,r20
8008c80c:	8009883a 	mov	r4,r16
8008c810:	008a8c00 	call	8008a8c0 <__pow5mult>
8008c814:	1029883a 	mov	r20,r2
8008c818:	1000cf26 	beq	r2,zero,8008cb58 <_strtod_r+0xc70>
8008c81c:	05c0060e 	bge	zero,r23,8008c838 <_strtod_r+0x950>
8008c820:	a00b883a 	mov	r5,r20
8008c824:	b80d883a 	mov	r6,r23
8008c828:	8009883a 	mov	r4,r16
8008c82c:	008aa000 	call	8008aa00 <__lshift>
8008c830:	1029883a 	mov	r20,r2
8008c834:	1000c826 	beq	r2,zero,8008cb58 <_strtod_r+0xc70>
8008c838:	0580060e 	bge	zero,r22,8008c854 <_strtod_r+0x96c>
8008c83c:	980b883a 	mov	r5,r19
8008c840:	b00d883a 	mov	r6,r22
8008c844:	8009883a 	mov	r4,r16
8008c848:	008aa000 	call	8008aa00 <__lshift>
8008c84c:	1027883a 	mov	r19,r2
8008c850:	1000c126 	beq	r2,zero,8008cb58 <_strtod_r+0xc70>
8008c854:	d9400517 	ldw	r5,20(sp)
8008c858:	a00d883a 	mov	r6,r20
8008c85c:	8009883a 	mov	r4,r16
8008c860:	008aba80 	call	8008aba8 <__mdiff>
8008c864:	102b883a 	mov	r21,r2
8008c868:	1000bb26 	beq	r2,zero,8008cb58 <_strtod_r+0xc70>
8008c86c:	10c00317 	ldw	r3,12(r2)
8008c870:	980b883a 	mov	r5,r19
8008c874:	10000315 	stw	zero,12(r2)
8008c878:	1009883a 	mov	r4,r2
8008c87c:	d8c00e15 	stw	r3,56(sp)
8008c880:	008ab480 	call	8008ab48 <__mcmp>
8008c884:	10027616 	blt	r2,zero,8008d260 <_strtod_r+0x1378>
8008c888:	10024426 	beq	r2,zero,8008d19c <_strtod_r+0x12b4>
8008c88c:	980b883a 	mov	r5,r19
8008c890:	a809883a 	mov	r4,r21
8008c894:	008b0600 	call	8008b060 <__ratio>
8008c898:	000d883a 	mov	r6,zero
8008c89c:	01d00034 	movhi	r7,16384
8008c8a0:	1009883a 	mov	r4,r2
8008c8a4:	180b883a 	mov	r5,r3
8008c8a8:	102f883a 	mov	r23,r2
8008c8ac:	182d883a 	mov	r22,r3
8008c8b0:	00976ac0 	call	800976ac <__ledf2>
8008c8b4:	00804a16 	blt	zero,r2,8008c9e0 <_strtod_r+0xaf8>
8008c8b8:	d9400e17 	ldw	r5,56(sp)
8008c8bc:	28006b26 	beq	r5,zero,8008ca6c <_strtod_r+0xb84>
8008c8c0:	058ffc34 	movhi	r22,16368
8008c8c4:	d8000b15 	stw	zero,44(sp)
8008c8c8:	d8000d15 	stw	zero,52(sp)
8008c8cc:	b02f883a 	mov	r23,r22
8008c8d0:	8f1ffc2c 	andhi	fp,r17,32752
8008c8d4:	009ff834 	movhi	r2,32736
8008c8d8:	e080cd26 	beq	fp,r2,8008cc10 <_strtod_r+0xd28>
8008c8dc:	d9400917 	ldw	r5,36(sp)
8008c8e0:	28001a26 	beq	r5,zero,8008c94c <_strtod_r+0xa64>
8008c8e4:	0081a834 	movhi	r2,1696
8008c8e8:	17001836 	bltu	r2,fp,8008c94c <_strtod_r+0xa64>
8008c8ec:	d9000d17 	ldw	r4,52(sp)
8008c8f0:	01d07834 	movhi	r7,16864
8008c8f4:	39ffffc4 	addi	r7,r7,-1
8008c8f8:	01bff034 	movhi	r6,65472
8008c8fc:	b80b883a 	mov	r5,r23
8008c900:	00976ac0 	call	800976ac <__ledf2>
8008c904:	00800e16 	blt	zero,r2,8008c940 <_strtod_r+0xa58>
8008c908:	d9000d17 	ldw	r4,52(sp)
8008c90c:	b80b883a 	mov	r5,r23
8008c910:	00956940 	call	80095694 <__fixunsdfsi>
8008c914:	10018126 	beq	r2,zero,8008cf1c <_strtod_r+0x1034>
8008c918:	1009883a 	mov	r4,r2
8008c91c:	00989100 	call	80098910 <__floatunsidf>
8008c920:	d8800d15 	stw	r2,52(sp)
8008c924:	182f883a 	mov	r23,r3
8008c928:	d8800e17 	ldw	r2,56(sp)
8008c92c:	1001791e 	bne	r2,zero,8008cf14 <_strtod_r+0x102c>
8008c930:	ba20003c 	xorhi	r8,r23,32768
8008c934:	d8c00d17 	ldw	r3,52(sp)
8008c938:	402d883a 	mov	r22,r8
8008c93c:	d8c00b15 	stw	r3,44(sp)
8008c940:	0081ac34 	movhi	r2,1712
8008c944:	b091883a 	add	r8,r22,r2
8008c948:	472dc83a 	sub	r22,r8,fp
8008c94c:	9009883a 	mov	r4,r18
8008c950:	880b883a 	mov	r5,r17
8008c954:	008ada40 	call	8008ada4 <__ulp>
8008c958:	d9000b17 	ldw	r4,44(sp)
8008c95c:	b00b883a 	mov	r5,r22
8008c960:	100d883a 	mov	r6,r2
8008c964:	180f883a 	mov	r7,r3
8008c968:	00977a00 	call	800977a0 <__muldf3>
8008c96c:	900d883a 	mov	r6,r18
8008c970:	880f883a 	mov	r7,r17
8008c974:	1009883a 	mov	r4,r2
8008c978:	180b883a 	mov	r5,r3
8008c97c:	00963b40 	call	800963b4 <__adddf3>
8008c980:	1025883a 	mov	r18,r2
8008c984:	1823883a 	mov	r17,r3
8008c988:	182d883a 	mov	r22,r3
8008c98c:	d9000917 	ldw	r4,36(sp)
8008c990:	2000021e 	bne	r4,zero,8008c99c <_strtod_r+0xab4>
8008c994:	b09ffc2c 	andhi	r2,r22,32752
8008c998:	e080be26 	beq	fp,r2,8008cc94 <_strtod_r+0xdac>
8008c99c:	d9400517 	ldw	r5,20(sp)
8008c9a0:	8009883a 	mov	r4,r16
8008c9a4:	008a3280 	call	8008a328 <_Bfree>
8008c9a8:	a00b883a 	mov	r5,r20
8008c9ac:	8009883a 	mov	r4,r16
8008c9b0:	008a3280 	call	8008a328 <_Bfree>
8008c9b4:	980b883a 	mov	r5,r19
8008c9b8:	8009883a 	mov	r4,r16
8008c9bc:	008a3280 	call	8008a328 <_Bfree>
8008c9c0:	a80b883a 	mov	r5,r21
8008c9c4:	8009883a 	mov	r4,r16
8008c9c8:	008a3280 	call	8008a328 <_Bfree>
8008c9cc:	003f2f06 	br	8008c68c <_strtod_r+0x7a4>
8008c9d0:	00c00044 	movi	r3,1
8008c9d4:	d8000b15 	stw	zero,44(sp)
8008c9d8:	d8c00d15 	stw	r3,52(sp)
8008c9dc:	003f5f06 	br	8008c75c <_strtod_r+0x874>
8008c9e0:	b809883a 	mov	r4,r23
8008c9e4:	000d883a 	mov	r6,zero
8008c9e8:	01cff834 	movhi	r7,16352
8008c9ec:	b00b883a 	mov	r5,r22
8008c9f0:	00977a00 	call	800977a0 <__muldf3>
8008c9f4:	d9000e17 	ldw	r4,56(sp)
8008c9f8:	d8800d15 	stw	r2,52(sp)
8008c9fc:	182f883a 	mov	r23,r3
8008ca00:	2000181e 	bne	r4,zero,8008ca64 <_strtod_r+0xb7c>
8008ca04:	1a20003c 	xorhi	r8,r3,32768
8008ca08:	d8800b15 	stw	r2,44(sp)
8008ca0c:	402d883a 	mov	r22,r8
8008ca10:	003faf06 	br	8008c8d0 <_strtod_r+0x9e8>
8008ca14:	0015883a 	mov	r10,zero
8008ca18:	02c00044 	movi	r11,1
8008ca1c:	2800011e 	bne	r5,zero,8008ca24 <_strtod_r+0xb3c>
8008ca20:	903d7e26 	beq	r18,zero,8008c01c <_strtod_r+0x134>
8008ca24:	0013883a 	mov	r9,zero
8008ca28:	003e4706 	br	8008c348 <_strtod_r+0x460>
8008ca2c:	d8c00a17 	ldw	r3,40(sp)
8008ca30:	dd800c17 	ldw	r22,48(sp)
8008ca34:	1889c83a 	sub	r4,r3,r2
8008ca38:	003f3706 	br	8008c718 <_strtod_r+0x830>
8008ca3c:	00bef884 	movi	r2,-1054
8008ca40:	05c00044 	movi	r23,1
8008ca44:	10c5c83a 	sub	r2,r2,r3
8008ca48:	b884983a 	sll	r2,r23,r2
8008ca4c:	ddc00d15 	stw	r23,52(sp)
8008ca50:	d8800b15 	stw	r2,44(sp)
8008ca54:	003f4106 	br	8008c75c <_strtod_r+0x874>
8008ca58:	ddc00615 	stw	r23,24(sp)
8008ca5c:	002b883a 	mov	r21,zero
8008ca60:	003dc306 	br	8008c170 <_strtod_r+0x288>
8008ca64:	1811883a 	mov	r8,r3
8008ca68:	003fe706 	br	8008ca08 <_strtod_r+0xb20>
8008ca6c:	90002e1e 	bne	r18,zero,8008cb28 <_strtod_r+0xc40>
8008ca70:	00c00434 	movhi	r3,16
8008ca74:	18ffffc4 	addi	r3,r3,-1
8008ca78:	88c4703a 	and	r2,r17,r3
8008ca7c:	10002c1e 	bne	r2,zero,8008cb30 <_strtod_r+0xc48>
8008ca80:	000d883a 	mov	r6,zero
8008ca84:	01cffc34 	movhi	r7,16368
8008ca88:	b809883a 	mov	r4,r23
8008ca8c:	b00b883a 	mov	r5,r22
8008ca90:	00976ac0 	call	800976ac <__ledf2>
8008ca94:	10021716 	blt	r2,zero,8008d2f4 <_strtod_r+0x140c>
8008ca98:	b809883a 	mov	r4,r23
8008ca9c:	b00b883a 	mov	r5,r22
8008caa0:	000d883a 	mov	r6,zero
8008caa4:	01cff834 	movhi	r7,16352
8008caa8:	00977a00 	call	800977a0 <__muldf3>
8008caac:	d8800d15 	stw	r2,52(sp)
8008cab0:	182f883a 	mov	r23,r3
8008cab4:	102d883a 	mov	r22,r2
8008cab8:	1a20003c 	xorhi	r8,r3,32768
8008cabc:	dd800b15 	stw	r22,44(sp)
8008cac0:	402d883a 	mov	r22,r8
8008cac4:	003f8206 	br	8008c8d0 <_strtod_r+0x9e8>
8008cac8:	b013883a 	mov	r9,r22
8008cacc:	000b883a 	mov	r5,zero
8008cad0:	0015883a 	mov	r10,zero
8008cad4:	893ff404 	addi	r4,r17,-48
8008cad8:	00800244 	movi	r2,9
8008cadc:	11001036 	bltu	r2,r4,8008cb20 <_strtod_r+0xc38>
8008cae0:	28c00044 	addi	r3,r5,1
8008cae4:	2023883a 	mov	r17,r4
8008cae8:	20014d1e 	bne	r4,zero,8008d020 <_strtod_r+0x1138>
8008caec:	d9800617 	ldw	r6,24(sp)
8008caf0:	180b883a 	mov	r5,r3
8008caf4:	30800044 	addi	r2,r6,1
8008caf8:	d8800615 	stw	r2,24(sp)
8008cafc:	34400047 	ldb	r17,1(r6)
8008cb00:	003ff406 	br	8008cad4 <_strtod_r+0xbec>
8008cb04:	0019883a 	mov	r12,zero
8008cb08:	b8800084 	addi	r2,r23,2
8008cb0c:	d8800615 	stw	r2,24(sp)
8008cb10:	bc400087 	ldb	r17,2(r23)
8008cb14:	003e1606 	br	8008c370 <_strtod_r+0x488>
8008cb18:	03000044 	movi	r12,1
8008cb1c:	003ffa06 	br	8008cb08 <_strtod_r+0xc20>
8008cb20:	02c00044 	movi	r11,1
8008cb24:	003d8d06 	br	8008c15c <_strtod_r+0x274>
8008cb28:	00800044 	movi	r2,1
8008cb2c:	9080fe26 	beq	r18,r2,8008cf28 <_strtod_r+0x1040>
8008cb30:	d8000b15 	stw	zero,44(sp)
8008cb34:	05affc34 	movhi	r22,49136
8008cb38:	d8000d15 	stw	zero,52(sp)
8008cb3c:	05cffc34 	movhi	r23,16368
8008cb40:	003f6306 	br	8008c8d0 <_strtod_r+0x9e8>
8008cb44:	d8000a15 	stw	zero,40(sp)
8008cb48:	003ec906 	br	8008c670 <_strtod_r+0x788>
8008cb4c:	d9001117 	ldw	r4,68(sp)
8008cb50:	00bfffc4 	movi	r2,-1
8008cb54:	2080461e 	bne	r4,r2,8008cc70 <_strtod_r+0xd88>
8008cb58:	dd000a15 	stw	r20,40(sp)
8008cb5c:	dd001217 	ldw	r20,72(sp)
8008cb60:	a811883a 	mov	r8,r21
8008cb64:	d8800517 	ldw	r2,20(sp)
8008cb68:	00c00884 	movi	r3,34
8008cb6c:	80c00015 	stw	r3,0(r16)
8008cb70:	002b883a 	mov	r21,zero
8008cb74:	059ffc34 	movhi	r22,32752
8008cb78:	100b883a 	mov	r5,r2
8008cb7c:	8009883a 	mov	r4,r16
8008cb80:	da001315 	stw	r8,76(sp)
8008cb84:	008a3280 	call	8008a328 <_Bfree>
8008cb88:	d9400a17 	ldw	r5,40(sp)
8008cb8c:	8009883a 	mov	r4,r16
8008cb90:	008a3280 	call	8008a328 <_Bfree>
8008cb94:	980b883a 	mov	r5,r19
8008cb98:	8009883a 	mov	r4,r16
8008cb9c:	008a3280 	call	8008a328 <_Bfree>
8008cba0:	d9400817 	ldw	r5,32(sp)
8008cba4:	8009883a 	mov	r4,r16
8008cba8:	008a3280 	call	8008a328 <_Bfree>
8008cbac:	da001317 	ldw	r8,76(sp)
8008cbb0:	8009883a 	mov	r4,r16
8008cbb4:	400b883a 	mov	r5,r8
8008cbb8:	008a3280 	call	8008a328 <_Bfree>
8008cbbc:	003d9206 	br	8008c208 <_strtod_r+0x320>
8008cbc0:	d8c00717 	ldw	r3,28(sp)
8008cbc4:	d8800504 	addi	r2,sp,20
8008cbc8:	01a002b4 	movhi	r6,32778
8008cbcc:	31b97104 	addi	r6,r6,-6716
8008cbd0:	d8c00115 	stw	r3,4(sp)
8008cbd4:	d8800015 	stw	r2,0(sp)
8008cbd8:	d9c00404 	addi	r7,sp,16
8008cbdc:	d9400604 	addi	r5,sp,24
8008cbe0:	8009883a 	mov	r4,r16
8008cbe4:	00934f00 	call	800934f0 <__gethex>
8008cbe8:	154001cc 	andi	r21,r2,7
8008cbec:	a83d9b26 	beq	r21,zero,8008c25c <_strtod_r+0x374>
8008cbf0:	00c00184 	movi	r3,6
8008cbf4:	a8c0d61e 	bne	r21,r3,8008cf50 <_strtod_r+0x1068>
8008cbf8:	9cc00044 	addi	r19,r19,1
8008cbfc:	dcc00615 	stw	r19,24(sp)
8008cc00:	002b883a 	mov	r21,zero
8008cc04:	002d883a 	mov	r22,zero
8008cc08:	d8000715 	stw	zero,28(sp)
8008cc0c:	003d7e06 	br	8008c208 <_strtod_r+0x320>
8008cc10:	00bf2c34 	movhi	r2,64688
8008cc14:	88a3883a 	add	r17,r17,r2
8008cc18:	9009883a 	mov	r4,r18
8008cc1c:	880b883a 	mov	r5,r17
8008cc20:	008ada40 	call	8008ada4 <__ulp>
8008cc24:	d9000b17 	ldw	r4,44(sp)
8008cc28:	100d883a 	mov	r6,r2
8008cc2c:	180f883a 	mov	r7,r3
8008cc30:	b00b883a 	mov	r5,r22
8008cc34:	00977a00 	call	800977a0 <__muldf3>
8008cc38:	900d883a 	mov	r6,r18
8008cc3c:	180b883a 	mov	r5,r3
8008cc40:	880f883a 	mov	r7,r17
8008cc44:	1009883a 	mov	r4,r2
8008cc48:	00963b40 	call	800963b4 <__adddf3>
8008cc4c:	015f2834 	movhi	r5,31904
8008cc50:	1025883a 	mov	r18,r2
8008cc54:	297fffc4 	addi	r5,r5,-1
8008cc58:	189ffc2c 	andhi	r2,r3,32752
8008cc5c:	2880892e 	bgeu	r5,r2,8008ce84 <_strtod_r+0xf9c>
8008cc60:	d8801017 	ldw	r2,64(sp)
8008cc64:	00dffc34 	movhi	r3,32752
8008cc68:	18ffffc4 	addi	r3,r3,-1
8008cc6c:	10ffb726 	beq	r2,r3,8008cb4c <_strtod_r+0xc64>
8008cc70:	045ffc34 	movhi	r17,32752
8008cc74:	8c7fffc4 	addi	r17,r17,-1
8008cc78:	04bfffc4 	movi	r18,-1
8008cc7c:	003f4706 	br	8008c99c <_strtod_r+0xab4>
8008cc80:	00800884 	movi	r2,34
8008cc84:	80800015 	stw	r2,0(r16)
8008cc88:	002b883a 	mov	r21,zero
8008cc8c:	059ffc34 	movhi	r22,32752
8008cc90:	003d5d06 	br	8008c208 <_strtod_r+0x320>
8008cc94:	d9000d17 	ldw	r4,52(sp)
8008cc98:	b80b883a 	mov	r5,r23
8008cc9c:	00987b40 	call	800987b4 <__fixdfsi>
8008cca0:	1009883a 	mov	r4,r2
8008cca4:	00988340 	call	80098834 <__floatsidf>
8008cca8:	d9000d17 	ldw	r4,52(sp)
8008ccac:	b80b883a 	mov	r5,r23
8008ccb0:	100d883a 	mov	r6,r2
8008ccb4:	180f883a 	mov	r7,r3
8008ccb8:	0097eb80 	call	80097eb8 <__subdf3>
8008ccbc:	d9400e17 	ldw	r5,56(sp)
8008ccc0:	1039883a 	mov	fp,r2
8008ccc4:	182f883a 	mov	r23,r3
8008ccc8:	2800141e 	bne	r5,zero,8008cd1c <_strtod_r+0xe34>
8008cccc:	9000131e 	bne	r18,zero,8008cd1c <_strtod_r+0xe34>
8008ccd0:	00800434 	movhi	r2,16
8008ccd4:	10bfffc4 	addi	r2,r2,-1
8008ccd8:	b0ac703a 	and	r22,r22,r2
8008ccdc:	b0000f1e 	bne	r22,zero,8008cd1c <_strtod_r+0xe34>
8008cce0:	01a52834 	movhi	r6,38048
8008cce4:	01cff434 	movhi	r7,16336
8008cce8:	318d6544 	addi	r6,r6,13717
8008ccec:	39ffffc4 	addi	r7,r7,-1
8008ccf0:	e009883a 	mov	r4,fp
8008ccf4:	180b883a 	mov	r5,r3
8008ccf8:	00976ac0 	call	800976ac <__ledf2>
8008ccfc:	103f270e 	bge	r2,zero,8008c99c <_strtod_r+0xab4>
8008cd00:	dd000a15 	stw	r20,40(sp)
8008cd04:	a811883a 	mov	r8,r21
8008cd08:	dd001217 	ldw	r20,72(sp)
8008cd0c:	d8800517 	ldw	r2,20(sp)
8008cd10:	002b883a 	mov	r21,zero
8008cd14:	882d883a 	mov	r22,r17
8008cd18:	003f9706 	br	8008cb78 <_strtod_r+0xc90>
8008cd1c:	01a52834 	movhi	r6,38048
8008cd20:	01cff834 	movhi	r7,16352
8008cd24:	318d6544 	addi	r6,r6,13717
8008cd28:	39ffffc4 	addi	r7,r7,-1
8008cd2c:	e009883a 	mov	r4,fp
8008cd30:	b80b883a 	mov	r5,r23
8008cd34:	00976ac0 	call	800976ac <__ledf2>
8008cd38:	10000716 	blt	r2,zero,8008cd58 <_strtod_r+0xe70>
8008cd3c:	018d6c34 	movhi	r6,13744
8008cd40:	31b94d44 	addi	r6,r6,-6859
8008cd44:	01cff834 	movhi	r7,16352
8008cd48:	e009883a 	mov	r4,fp
8008cd4c:	b80b883a 	mov	r5,r23
8008cd50:	00975d00 	call	800975d0 <__gedf2>
8008cd54:	00bf110e 	bge	zero,r2,8008c99c <_strtod_r+0xab4>
8008cd58:	dd000a15 	stw	r20,40(sp)
8008cd5c:	a811883a 	mov	r8,r21
8008cd60:	dd001217 	ldw	r20,72(sp)
8008cd64:	d8800517 	ldw	r2,20(sp)
8008cd68:	902b883a 	mov	r21,r18
8008cd6c:	882d883a 	mov	r22,r17
8008cd70:	003f8106 	br	8008cb78 <_strtod_r+0xc90>
8008cd74:	b83e2f26 	beq	r23,zero,8008c634 <_strtod_r+0x74c>
8008cd78:	05efc83a 	sub	r23,zero,r23
8008cd7c:	b88003cc 	andi	r2,r23,15
8008cd80:	10000d26 	beq	r2,zero,8008cdb8 <_strtod_r+0xed0>
8008cd84:	100490fa 	slli	r2,r2,3
8008cd88:	00e002b4 	movhi	r3,32778
8008cd8c:	18f93604 	addi	r3,r3,-6952
8008cd90:	1885883a 	add	r2,r3,r2
8008cd94:	11800017 	ldw	r6,0(r2)
8008cd98:	11c00117 	ldw	r7,4(r2)
8008cd9c:	9009883a 	mov	r4,r18
8008cda0:	880b883a 	mov	r5,r17
8008cda4:	da401315 	stw	r9,76(sp)
8008cda8:	0096c600 	call	80096c60 <__divdf3>
8008cdac:	da401317 	ldw	r9,76(sp)
8008cdb0:	1025883a 	mov	r18,r2
8008cdb4:	1823883a 	mov	r17,r3
8008cdb8:	b82fd13a 	srai	r23,r23,4
8008cdbc:	b83e1d26 	beq	r23,zero,8008c634 <_strtod_r+0x74c>
8008cdc0:	008007c4 	movi	r2,31
8008cdc4:	15c02816 	blt	r2,r23,8008ce68 <_strtod_r+0xf80>
8008cdc8:	b880040c 	andi	r2,r23,16
8008cdcc:	10019726 	beq	r2,zero,8008d42c <_strtod_r+0x1544>
8008cdd0:	05c1880e 	bge	zero,r23,8008d3f4 <_strtod_r+0x150c>
8008cdd4:	00c01a84 	movi	r3,106
8008cdd8:	d8c00915 	stw	r3,36(sp)
8008cddc:	04e002b4 	movhi	r19,32778
8008cde0:	9cf97604 	addi	r19,r19,-6696
8008cde4:	8807883a 	mov	r3,r17
8008cde8:	9005883a 	mov	r2,r18
8008cdec:	8023883a 	mov	r17,r16
8008cdf0:	0009883a 	mov	r4,zero
8008cdf4:	9821883a 	mov	r16,r19
8008cdf8:	da400a15 	stw	r9,40(sp)
8008cdfc:	1827883a 	mov	r19,r3
8008ce00:	b980004c 	andi	r6,r23,1
8008ce04:	30000626 	beq	r6,zero,8008ce20 <_strtod_r+0xf38>
8008ce08:	81800017 	ldw	r6,0(r16)
8008ce0c:	81c00117 	ldw	r7,4(r16)
8008ce10:	1009883a 	mov	r4,r2
8008ce14:	180b883a 	mov	r5,r3
8008ce18:	00977a00 	call	800977a0 <__muldf3>
8008ce1c:	01000044 	movi	r4,1
8008ce20:	b82fd07a 	srai	r23,r23,1
8008ce24:	84000204 	addi	r16,r16,8
8008ce28:	b83ff51e 	bne	r23,zero,8008ce00 <_strtod_r+0xf18>
8008ce2c:	21003fcc 	andi	r4,r4,255
8008ce30:	8821883a 	mov	r16,r17
8008ce34:	da400a17 	ldw	r9,40(sp)
8008ce38:	9823883a 	mov	r17,r19
8008ce3c:	2001a51e 	bne	r4,zero,8008d4d4 <_strtod_r+0x15ec>
8008ce40:	d9000917 	ldw	r4,36(sp)
8008ce44:	20016d1e 	bne	r4,zero,8008d3fc <_strtod_r+0x1514>
8008ce48:	000d883a 	mov	r6,zero
8008ce4c:	000f883a 	mov	r7,zero
8008ce50:	9009883a 	mov	r4,r18
8008ce54:	880b883a 	mov	r5,r17
8008ce58:	da401315 	stw	r9,76(sp)
8008ce5c:	00975480 	call	80097548 <__eqdf2>
8008ce60:	da401317 	ldw	r9,76(sp)
8008ce64:	103df41e 	bne	r2,zero,8008c638 <_strtod_r+0x750>
8008ce68:	00800884 	movi	r2,34
8008ce6c:	80800015 	stw	r2,0(r16)
8008ce70:	002b883a 	mov	r21,zero
8008ce74:	002d883a 	mov	r22,zero
8008ce78:	003ce306 	br	8008c208 <_strtod_r+0x320>
8008ce7c:	055387c4 	movi	r21,19999
8008ce80:	003d6b06 	br	8008c430 <_strtod_r+0x548>
8008ce84:	0440d434 	movhi	r17,848
8008ce88:	1c63883a 	add	r17,r3,r17
8008ce8c:	882d883a 	mov	r22,r17
8008ce90:	003ebe06 	br	8008c98c <_strtod_r+0xaa4>
8008ce94:	14403fcc 	andi	r17,r2,255
8008ce98:	8c40201c 	xori	r17,r17,128
8008ce9c:	8c7fe004 	addi	r17,r17,-128
8008cea0:	dd400817 	ldw	r21,32(sp)
8008cea4:	0027883a 	mov	r19,zero
8008cea8:	0039883a 	mov	fp,zero
8008ceac:	002d883a 	mov	r22,zero
8008ceb0:	003c9906 	br	8008c118 <_strtod_r+0x230>
8008ceb4:	00c00944 	movi	r3,37
8008ceb8:	1a47c83a 	sub	r3,r3,r9
8008cebc:	1d7d8c16 	blt	r3,r21,8008c4f0 <_strtod_r+0x608>
8008cec0:	1261c83a 	sub	r16,r2,r9
8008cec4:	800490fa 	slli	r2,r16,3
8008cec8:	04e002b4 	movhi	r19,32778
8008cecc:	9cf93604 	addi	r19,r19,-6952
8008ced0:	9885883a 	add	r2,r19,r2
8008ced4:	11000017 	ldw	r4,0(r2)
8008ced8:	11400117 	ldw	r5,4(r2)
8008cedc:	900d883a 	mov	r6,r18
8008cee0:	880f883a 	mov	r7,r17
8008cee4:	00977a00 	call	800977a0 <__muldf3>
8008cee8:	ac0dc83a 	sub	r6,r21,r16
8008ceec:	300c90fa 	slli	r6,r6,3
8008cef0:	1009883a 	mov	r4,r2
8008cef4:	180b883a 	mov	r5,r3
8008cef8:	9985883a 	add	r2,r19,r6
8008cefc:	11800017 	ldw	r6,0(r2)
8008cf00:	11c00117 	ldw	r7,4(r2)
8008cf04:	00977a00 	call	800977a0 <__muldf3>
8008cf08:	102b883a 	mov	r21,r2
8008cf0c:	182d883a 	mov	r22,r3
8008cf10:	003cbd06 	br	8008c208 <_strtod_r+0x320>
8008cf14:	b811883a 	mov	r8,r23
8008cf18:	003e8606 	br	8008c934 <_strtod_r+0xa4c>
8008cf1c:	d8000d15 	stw	zero,52(sp)
8008cf20:	05cffc34 	movhi	r23,16368
8008cf24:	003e8006 	br	8008c928 <_strtod_r+0xa40>
8008cf28:	883f011e 	bne	r17,zero,8008cb30 <_strtod_r+0xc48>
8008cf2c:	dd000a15 	stw	r20,40(sp)
8008cf30:	dd001217 	ldw	r20,72(sp)
8008cf34:	a811883a 	mov	r8,r21
8008cf38:	00800884 	movi	r2,34
8008cf3c:	80800015 	stw	r2,0(r16)
8008cf40:	002b883a 	mov	r21,zero
8008cf44:	d8800517 	ldw	r2,20(sp)
8008cf48:	002d883a 	mov	r22,zero
8008cf4c:	003f0a06 	br	8008cb78 <_strtod_r+0xc90>
8008cf50:	d9800517 	ldw	r6,20(sp)
8008cf54:	30000826 	beq	r6,zero,8008cf78 <_strtod_r+0x1090>
8008cf58:	01400d44 	movi	r5,53
8008cf5c:	d9000204 	addi	r4,sp,8
8008cf60:	d8801315 	stw	r2,76(sp)
8008cf64:	008b1780 	call	8008b178 <__copybits>
8008cf68:	d9400517 	ldw	r5,20(sp)
8008cf6c:	8009883a 	mov	r4,r16
8008cf70:	008a3280 	call	8008a328 <_Bfree>
8008cf74:	d8801317 	ldw	r2,76(sp)
8008cf78:	00c00184 	movi	r3,6
8008cf7c:	1d400f36 	bltu	r3,r21,8008cfbc <_strtod_r+0x10d4>
8008cf80:	a82a90ba 	slli	r21,r21,2
8008cf84:	00e00274 	movhi	r3,32777
8008cf88:	18f3e604 	addi	r3,r3,-12392
8008cf8c:	a8eb883a 	add	r21,r21,r3
8008cf90:	a8c00017 	ldw	r3,0(r21)
8008cf94:	1800683a 	jmp	r3
8008cf98:	8008d014 	ori	zero,r16,9024
8008cf9c:	8008cfec 	andhi	zero,r16,9023
8008cfa0:	8008cfd0 	cmplti	zero,r16,9023
8008cfa4:	8008cfb4 	orhi	zero,r16,9022
8008cfa8:	8008cfdc 	xori	zero,r16,9023
8008cfac:	8008cfec 	andhi	zero,r16,9023
8008cfb0:	8008d014 	ori	zero,r16,9024
8008cfb4:	045ffc34 	movhi	r17,32752
8008cfb8:	0025883a 	mov	r18,zero
8008cfbc:	1080020c 	andi	r2,r2,8
8008cfc0:	902b883a 	mov	r21,r18
8008cfc4:	103c8f26 	beq	r2,zero,8008c204 <_strtod_r+0x31c>
8008cfc8:	8da00034 	orhi	r22,r17,32768
8008cfcc:	003c8e06 	br	8008c208 <_strtod_r+0x320>
8008cfd0:	dc800217 	ldw	r18,8(sp)
8008cfd4:	dc400317 	ldw	r17,12(sp)
8008cfd8:	003ff806 	br	8008cfbc <_strtod_r+0x10d4>
8008cfdc:	04600034 	movhi	r17,32768
8008cfe0:	8c7fffc4 	addi	r17,r17,-1
8008cfe4:	04bfffc4 	movi	r18,-1
8008cfe8:	003ff406 	br	8008cfbc <_strtod_r+0x10d4>
8008cfec:	d8c00417 	ldw	r3,16(sp)
8008cff0:	dc400317 	ldw	r17,12(sp)
8008cff4:	013ffc34 	movhi	r4,65520
8008cff8:	18c10cc4 	addi	r3,r3,1075
8008cffc:	1806953a 	slli	r3,r3,20
8008d000:	213fffc4 	addi	r4,r4,-1
8008d004:	8922703a 	and	r17,r17,r4
8008d008:	dc800217 	ldw	r18,8(sp)
8008d00c:	88e2b03a 	or	r17,r17,r3
8008d010:	003fea06 	br	8008cfbc <_strtod_r+0x10d4>
8008d014:	0023883a 	mov	r17,zero
8008d018:	0025883a 	mov	r18,zero
8008d01c:	003fe706 	br	8008cfbc <_strtod_r+0x10d4>
8008d020:	01800044 	movi	r6,1
8008d024:	50d5883a 	add	r10,r10,r3
8008d028:	2a4b883a 	add	r5,r5,r9
8008d02c:	19811a26 	beq	r3,r6,8008d498 <_strtod_r+0x15b0>
8008d030:	01800204 	movi	r6,8
8008d034:	01c00404 	movi	r7,16
8008d038:	4a400044 	addi	r9,r9,1
8008d03c:	48bfffc4 	addi	r2,r9,-1
8008d040:	30801616 	blt	r6,r2,8008d09c <_strtod_r+0x11b4>
8008d044:	e70002a4 	muli	fp,fp,10
8008d048:	497ffb1e 	bne	r9,r5,8008d038 <_strtod_r+0x1150>
8008d04c:	d9800617 	ldw	r6,24(sp)
8008d050:	4a400044 	addi	r9,r9,1
8008d054:	00c00204 	movi	r3,8
8008d058:	19400c0e 	bge	r3,r5,8008d08c <_strtod_r+0x11a4>
8008d05c:	00800404 	movi	r2,16
8008d060:	000b883a 	mov	r5,zero
8008d064:	127ea316 	blt	r2,r9,8008caf4 <_strtod_r+0xc0c>
8008d068:	988002a4 	muli	r2,r19,10
8008d06c:	20a7883a 	add	r19,r4,r2
8008d070:	003ea006 	br	8008caf4 <_strtod_r+0xc0c>
8008d074:	d8800617 	ldw	r2,24(sp)
8008d078:	8c7ff404 	addi	r17,r17,-48
8008d07c:	2a800044 	addi	r10,r5,1
8008d080:	d8800815 	stw	r2,32(sp)
8008d084:	100d883a 	mov	r6,r2
8008d088:	02400044 	movi	r9,1
8008d08c:	e08002a4 	muli	r2,fp,10
8008d090:	000b883a 	mov	r5,zero
8008d094:	88b9883a 	add	fp,r17,r2
8008d098:	003e9606 	br	8008caf4 <_strtod_r+0xc0c>
8008d09c:	3a7fea16 	blt	r7,r9,8008d048 <_strtod_r+0x1160>
8008d0a0:	9cc002a4 	muli	r19,r19,10
8008d0a4:	003fe806 	br	8008d048 <_strtod_r+0x1160>
8008d0a8:	00bffa84 	movi	r2,-22
8008d0ac:	a8bd1016 	blt	r21,r2,8008c4f0 <_strtod_r+0x608>
8008d0b0:	a82a90fa 	slli	r21,r21,3
8008d0b4:	00a002b4 	movhi	r2,32778
8008d0b8:	10b93604 	addi	r2,r2,-6952
8008d0bc:	1545c83a 	sub	r2,r2,r21
8008d0c0:	11800017 	ldw	r6,0(r2)
8008d0c4:	11c00117 	ldw	r7,4(r2)
8008d0c8:	9009883a 	mov	r4,r18
8008d0cc:	880b883a 	mov	r5,r17
8008d0d0:	0096c600 	call	80096c60 <__divdf3>
8008d0d4:	102b883a 	mov	r21,r2
8008d0d8:	182d883a 	mov	r22,r3
8008d0dc:	003c4a06 	br	8008c208 <_strtod_r+0x320>
8008d0e0:	dd000a15 	stw	r20,40(sp)
8008d0e4:	a811883a 	mov	r8,r21
8008d0e8:	dd001217 	ldw	r20,72(sp)
8008d0ec:	003e9e06 	br	8008cb68 <_strtod_r+0xc80>
8008d0f0:	016002b4 	movhi	r5,32778
8008d0f4:	d9000617 	ldw	r4,24(sp)
8008d0f8:	29796804 	addi	r5,r5,-6752
8008d0fc:	01c00644 	movi	r7,25
8008d100:	00000b06 	br	8008d130 <_strtod_r+0x1248>
8008d104:	21000044 	addi	r4,r4,1
8008d108:	20800003 	ldbu	r2,0(r4)
8008d10c:	10ffefc4 	addi	r3,r2,-65
8008d110:	10803fcc 	andi	r2,r2,255
8008d114:	1080201c 	xori	r2,r2,128
8008d118:	18c03fcc 	andi	r3,r3,255
8008d11c:	10bfe004 	addi	r2,r2,-128
8008d120:	38c00136 	bltu	r7,r3,8008d128 <_strtod_r+0x1240>
8008d124:	10800804 	addi	r2,r2,32
8008d128:	29400044 	addi	r5,r5,1
8008d12c:	11bbbb1e 	bne	r2,r6,8008c01c <_strtod_r+0x134>
8008d130:	29800007 	ldb	r6,0(r5)
8008d134:	303ff31e 	bne	r6,zero,8008d104 <_strtod_r+0x121c>
8008d138:	01a002b4 	movhi	r6,32778
8008d13c:	d9000615 	stw	r4,24(sp)
8008d140:	31b96904 	addi	r6,r6,-6748
8008d144:	200b883a 	mov	r5,r4
8008d148:	02000644 	movi	r8,25
8008d14c:	00000a06 	br	8008d178 <_strtod_r+0x1290>
8008d150:	28800003 	ldbu	r2,0(r5)
8008d154:	10ffefc4 	addi	r3,r2,-65
8008d158:	10803fcc 	andi	r2,r2,255
8008d15c:	1080201c 	xori	r2,r2,128
8008d160:	18c03fcc 	andi	r3,r3,255
8008d164:	10bfe004 	addi	r2,r2,-128
8008d168:	40c00136 	bltu	r8,r3,8008d170 <_strtod_r+0x1288>
8008d16c:	10800804 	addi	r2,r2,32
8008d170:	31800044 	addi	r6,r6,1
8008d174:	11c0711e 	bne	r2,r7,8008d33c <_strtod_r+0x1454>
8008d178:	31c00007 	ldb	r7,0(r6)
8008d17c:	29400044 	addi	r5,r5,1
8008d180:	383ff31e 	bne	r7,zero,8008d150 <_strtod_r+0x1268>
8008d184:	d9400615 	stw	r5,24(sp)
8008d188:	045ffc34 	movhi	r17,32752
8008d18c:	0025883a 	mov	r18,zero
8008d190:	003c1b06 	br	8008c200 <_strtod_r+0x318>
8008d194:	000b883a 	mov	r5,zero
8008d198:	003ccc06 	br	8008c4cc <_strtod_r+0x5e4>
8008d19c:	d9400e17 	ldw	r5,56(sp)
8008d1a0:	dd000a15 	stw	r20,40(sp)
8008d1a4:	00800434 	movhi	r2,16
8008d1a8:	a811883a 	mov	r8,r21
8008d1ac:	dd001217 	ldw	r20,72(sp)
8008d1b0:	dd401117 	ldw	r21,68(sp)
8008d1b4:	dd801017 	ldw	r22,64(sp)
8008d1b8:	10bfffc4 	addi	r2,r2,-1
8008d1bc:	28005626 	beq	r5,zero,8008d318 <_strtod_r+0x1430>
8008d1c0:	8886703a 	and	r3,r17,r2
8008d1c4:	18807826 	beq	r3,r2,8008d3a8 <_strtod_r+0x14c0>
8008d1c8:	d8c00b17 	ldw	r3,44(sp)
8008d1cc:	18005726 	beq	r3,zero,8008d32c <_strtod_r+0x1444>
8008d1d0:	1c44703a 	and	r2,r3,r17
8008d1d4:	10000f26 	beq	r2,zero,8008d214 <_strtod_r+0x132c>
8008d1d8:	d9000e17 	ldw	r4,56(sp)
8008d1dc:	d9800917 	ldw	r6,36(sp)
8008d1e0:	20005e26 	beq	r4,zero,8008d35c <_strtod_r+0x1474>
8008d1e4:	9009883a 	mov	r4,r18
8008d1e8:	880b883a 	mov	r5,r17
8008d1ec:	da001315 	stw	r8,76(sp)
8008d1f0:	008be840 	call	8008be84 <sulp>
8008d1f4:	100d883a 	mov	r6,r2
8008d1f8:	180f883a 	mov	r7,r3
8008d1fc:	9009883a 	mov	r4,r18
8008d200:	880b883a 	mov	r5,r17
8008d204:	00963b40 	call	800963b4 <__adddf3>
8008d208:	da001317 	ldw	r8,76(sp)
8008d20c:	102b883a 	mov	r21,r2
8008d210:	182d883a 	mov	r22,r3
8008d214:	d8c00917 	ldw	r3,36(sp)
8008d218:	18000f26 	beq	r3,zero,8008d258 <_strtod_r+0x1370>
8008d21c:	a809883a 	mov	r4,r21
8008d220:	b00b883a 	mov	r5,r22
8008d224:	000d883a 	mov	r6,zero
8008d228:	01ce5434 	movhi	r7,14672
8008d22c:	da001315 	stw	r8,76(sp)
8008d230:	00977a00 	call	800977a0 <__muldf3>
8008d234:	102b883a 	mov	r21,r2
8008d238:	182d883a 	mov	r22,r3
8008d23c:	da001317 	ldw	r8,76(sp)
8008d240:	1800051e 	bne	r3,zero,8008d258 <_strtod_r+0x1370>
8008d244:	d8800517 	ldw	r2,20(sp)
8008d248:	a83e4b1e 	bne	r21,zero,8008cb78 <_strtod_r+0xc90>
8008d24c:	00c00884 	movi	r3,34
8008d250:	80c00015 	stw	r3,0(r16)
8008d254:	003e4806 	br	8008cb78 <_strtod_r+0xc90>
8008d258:	d8800517 	ldw	r2,20(sp)
8008d25c:	003e4606 	br	8008cb78 <_strtod_r+0xc90>
8008d260:	d9000e17 	ldw	r4,56(sp)
8008d264:	dd000a15 	stw	r20,40(sp)
8008d268:	a811883a 	mov	r8,r21
8008d26c:	dd001217 	ldw	r20,72(sp)
8008d270:	dd401117 	ldw	r21,68(sp)
8008d274:	dd801017 	ldw	r22,64(sp)
8008d278:	203fe61e 	bne	r4,zero,8008d214 <_strtod_r+0x132c>
8008d27c:	903fe51e 	bne	r18,zero,8008d214 <_strtod_r+0x132c>
8008d280:	00800434 	movhi	r2,16
8008d284:	10bfffc4 	addi	r2,r2,-1
8008d288:	8884703a 	and	r2,r17,r2
8008d28c:	103fe11e 	bne	r2,zero,8008d214 <_strtod_r+0x132c>
8008d290:	8ddffc2c 	andhi	r23,r17,32752
8008d294:	0081ac34 	movhi	r2,1712
8008d298:	15ffde2e 	bgeu	r2,r23,8008d214 <_strtod_r+0x132c>
8008d29c:	40800517 	ldw	r2,20(r8)
8008d2a0:	1000031e 	bne	r2,zero,8008d2b0 <_strtod_r+0x13c8>
8008d2a4:	40800417 	ldw	r2,16(r8)
8008d2a8:	00c00044 	movi	r3,1
8008d2ac:	18bfd90e 	bge	r3,r2,8008d214 <_strtod_r+0x132c>
8008d2b0:	400b883a 	mov	r5,r8
8008d2b4:	01800044 	movi	r6,1
8008d2b8:	8009883a 	mov	r4,r16
8008d2bc:	008aa000 	call	8008aa00 <__lshift>
8008d2c0:	980b883a 	mov	r5,r19
8008d2c4:	1009883a 	mov	r4,r2
8008d2c8:	d8801315 	stw	r2,76(sp)
8008d2cc:	008ab480 	call	8008ab48 <__mcmp>
8008d2d0:	da001317 	ldw	r8,76(sp)
8008d2d4:	00bfcf0e 	bge	zero,r2,8008d214 <_strtod_r+0x132c>
8008d2d8:	d8c00917 	ldw	r3,36(sp)
8008d2dc:	18005c26 	beq	r3,zero,8008d450 <_strtod_r+0x1568>
8008d2e0:	0081ac34 	movhi	r2,1712
8008d2e4:	15c05a16 	blt	r2,r23,8008d450 <_strtod_r+0x1568>
8008d2e8:	0080dc34 	movhi	r2,880
8008d2ec:	15ffcb16 	blt	r2,r23,8008d21c <_strtod_r+0x1334>
8008d2f0:	003f1106 	br	8008cf38 <_strtod_r+0x1050>
8008d2f4:	002d883a 	mov	r22,zero
8008d2f8:	022ff834 	movhi	r8,49120
8008d2fc:	d8000d15 	stw	zero,52(sp)
8008d300:	05cff834 	movhi	r23,16352
8008d304:	003ded06 	br	8008cabc <_strtod_r+0xbd4>
8008d308:	0440d434 	movhi	r17,848
8008d30c:	1c63883a 	add	r17,r3,r17
8008d310:	d8000915 	stw	zero,36(sp)
8008d314:	003cc806 	br	8008c638 <_strtod_r+0x750>
8008d318:	8884703a 	and	r2,r17,r2
8008d31c:	103faa1e 	bne	r2,zero,8008d1c8 <_strtod_r+0x12e0>
8008d320:	903fa91e 	bne	r18,zero,8008d1c8 <_strtod_r+0x12e0>
8008d324:	8ddffc2c 	andhi	r23,r17,32752
8008d328:	003feb06 	br	8008d2d8 <_strtod_r+0x13f0>
8008d32c:	d8c00d17 	ldw	r3,52(sp)
8008d330:	1cae703a 	and	r23,r3,r18
8008d334:	b83fb726 	beq	r23,zero,8008d214 <_strtod_r+0x132c>
8008d338:	003fa706 	br	8008d1d8 <_strtod_r+0x12f0>
8008d33c:	21000044 	addi	r4,r4,1
8008d340:	d9000615 	stw	r4,24(sp)
8008d344:	003f9006 	br	8008d188 <_strtod_r+0x12a0>
8008d348:	016002b4 	movhi	r5,32778
8008d34c:	29792c04 	addi	r5,r5,-6992
8008d350:	d9400915 	stw	r5,36(sp)
8008d354:	0027883a 	mov	r19,zero
8008d358:	003ca206 	br	8008c5e4 <_strtod_r+0x6fc>
8008d35c:	9009883a 	mov	r4,r18
8008d360:	880b883a 	mov	r5,r17
8008d364:	da001315 	stw	r8,76(sp)
8008d368:	008be840 	call	8008be84 <sulp>
8008d36c:	100d883a 	mov	r6,r2
8008d370:	180f883a 	mov	r7,r3
8008d374:	9009883a 	mov	r4,r18
8008d378:	880b883a 	mov	r5,r17
8008d37c:	0097eb80 	call	80097eb8 <__subdf3>
8008d380:	000d883a 	mov	r6,zero
8008d384:	000f883a 	mov	r7,zero
8008d388:	1009883a 	mov	r4,r2
8008d38c:	180b883a 	mov	r5,r3
8008d390:	102b883a 	mov	r21,r2
8008d394:	182d883a 	mov	r22,r3
8008d398:	00975480 	call	80097548 <__eqdf2>
8008d39c:	da001317 	ldw	r8,76(sp)
8008d3a0:	103ee526 	beq	r2,zero,8008cf38 <_strtod_r+0x1050>
8008d3a4:	003f9b06 	br	8008d214 <_strtod_r+0x132c>
8008d3a8:	d8800917 	ldw	r2,36(sp)
8008d3ac:	10002226 	beq	r2,zero,8008d438 <_strtod_r+0x1550>
8008d3b0:	889ffc2c 	andhi	r2,r17,32752
8008d3b4:	00c1a834 	movhi	r3,1696
8008d3b8:	18801f36 	bltu	r3,r2,8008d438 <_strtod_r+0x1550>
8008d3bc:	1004d53a 	srli	r2,r2,20
8008d3c0:	00c01ac4 	movi	r3,107
8008d3c4:	1887c83a 	sub	r3,r3,r2
8008d3c8:	00bfffc4 	movi	r2,-1
8008d3cc:	10c4983a 	sll	r2,r2,r3
8008d3d0:	14bf7d1e 	bne	r2,r18,8008d1c8 <_strtod_r+0x12e0>
8008d3d4:	00dffc34 	movhi	r3,32752
8008d3d8:	18ffffc4 	addi	r3,r3,-1
8008d3dc:	88c03526 	beq	r17,r3,8008d4b4 <_strtod_r+0x15cc>
8008d3e0:	8c5ffc2c 	andhi	r17,r17,32752
8008d3e4:	00800434 	movhi	r2,16
8008d3e8:	002b883a 	mov	r21,zero
8008d3ec:	88ad883a 	add	r22,r17,r2
8008d3f0:	003f8806 	br	8008d214 <_strtod_r+0x132c>
8008d3f4:	01401a84 	movi	r5,106
8008d3f8:	d9400915 	stw	r5,36(sp)
8008d3fc:	8ddffc2c 	andhi	r23,r17,32752
8008d400:	b82ed53a 	srli	r23,r23,20
8008d404:	00801ac4 	movi	r2,107
8008d408:	15c5c83a 	sub	r2,r2,r23
8008d40c:	00be8e0e 	bge	zero,r2,8008ce48 <_strtod_r+0xf60>
8008d410:	00c007c4 	movi	r3,31
8008d414:	18800a0e 	bge	r3,r2,8008d440 <_strtod_r+0x1558>
8008d418:	00c00d04 	movi	r3,52
8008d41c:	0025883a 	mov	r18,zero
8008d420:	1880270e 	bge	r3,r2,8008d4c0 <_strtod_r+0x15d8>
8008d424:	0440dc34 	movhi	r17,880
8008d428:	003e8706 	br	8008ce48 <_strtod_r+0xf60>
8008d42c:	d8000915 	stw	zero,36(sp)
8008d430:	05fe6a16 	blt	zero,r23,8008cddc <_strtod_r+0xef4>
8008d434:	003e8406 	br	8008ce48 <_strtod_r+0xf60>
8008d438:	00bfffc4 	movi	r2,-1
8008d43c:	003fe406 	br	8008d3d0 <_strtod_r+0x14e8>
8008d440:	00ffffc4 	movi	r3,-1
8008d444:	1884983a 	sll	r2,r3,r2
8008d448:	14a4703a 	and	r18,r2,r18
8008d44c:	003e7e06 	br	8008ce48 <_strtod_r+0xf60>
8008d450:	00bffc34 	movhi	r2,65520
8008d454:	b8af883a 	add	r23,r23,r2
8008d458:	057fffc4 	movi	r21,-1
8008d45c:	00800434 	movhi	r2,16
8008d460:	1545883a 	add	r2,r2,r21
8008d464:	b8acb03a 	or	r22,r23,r2
8008d468:	003f6a06 	br	8008d214 <_strtod_r+0x132c>
8008d46c:	016002b4 	movhi	r5,32778
8008d470:	29796c04 	addi	r5,r5,-6736
8008d474:	d9800204 	addi	r6,sp,8
8008d478:	d9000604 	addi	r4,sp,24
8008d47c:	0093d200 	call	80093d20 <__hexnan>
8008d480:	00c00144 	movi	r3,5
8008d484:	10fb5c1e 	bne	r2,r3,8008c1f8 <_strtod_r+0x310>
8008d488:	dc400317 	ldw	r17,12(sp)
8008d48c:	dc800217 	ldw	r18,8(sp)
8008d490:	8c5ffc34 	orhi	r17,r17,32752
8008d494:	003b5a06 	br	8008c200 <_strtod_r+0x318>
8008d498:	480b883a 	mov	r5,r9
8008d49c:	d9800617 	ldw	r6,24(sp)
8008d4a0:	4a400044 	addi	r9,r9,1
8008d4a4:	003eeb06 	br	8008d054 <_strtod_r+0x116c>
8008d4a8:	1025883a 	mov	r18,r2
8008d4ac:	1823883a 	mov	r17,r3
8008d4b0:	003c4c06 	br	8008c5e4 <_strtod_r+0x6fc>
8008d4b4:	00ffffc4 	movi	r3,-1
8008d4b8:	10ffc91e 	bne	r2,r3,8008d3e0 <_strtod_r+0x14f8>
8008d4bc:	003da906 	br	8008cb64 <_strtod_r+0xc7c>
8008d4c0:	10bff804 	addi	r2,r2,-32
8008d4c4:	00ffffc4 	movi	r3,-1
8008d4c8:	1884983a 	sll	r2,r3,r2
8008d4cc:	1462703a 	and	r17,r2,r17
8008d4d0:	003e5d06 	br	8008ce48 <_strtod_r+0xf60>
8008d4d4:	1025883a 	mov	r18,r2
8008d4d8:	1823883a 	mov	r17,r3
8008d4dc:	003e5806 	br	8008ce40 <_strtod_r+0xf58>

8008d4e0 <strtod>:
8008d4e0:	00a002b4 	movhi	r2,32778
8008d4e4:	1081bf04 	addi	r2,r2,1788
8008d4e8:	280d883a 	mov	r6,r5
8008d4ec:	200b883a 	mov	r5,r4
8008d4f0:	11000017 	ldw	r4,0(r2)
8008d4f4:	008bee81 	jmpi	8008bee8 <_strtod_r>

8008d4f8 <strtof>:
8008d4f8:	defffb04 	addi	sp,sp,-20
8008d4fc:	dcc00315 	stw	r19,12(sp)
8008d500:	04e002b4 	movhi	r19,32778
8008d504:	9cc1bf04 	addi	r19,r19,1788
8008d508:	280d883a 	mov	r6,r5
8008d50c:	200b883a 	mov	r5,r4
8008d510:	99000017 	ldw	r4,0(r19)
8008d514:	dfc00415 	stw	ra,16(sp)
8008d518:	dc800215 	stw	r18,8(sp)
8008d51c:	dc400115 	stw	r17,4(sp)
8008d520:	dc000015 	stw	r16,0(sp)
8008d524:	008bee80 	call	8008bee8 <_strtod_r>
8008d528:	1009883a 	mov	r4,r2
8008d52c:	180b883a 	mov	r5,r3
8008d530:	1025883a 	mov	r18,r2
8008d534:	1823883a 	mov	r17,r3
8008d538:	00989b80 	call	800989b8 <__truncdfsf2>
8008d53c:	000b883a 	mov	r5,zero
8008d540:	1009883a 	mov	r4,r2
8008d544:	1021883a 	mov	r16,r2
8008d548:	00961b80 	call	800961b8 <__eqsf2>
8008d54c:	1000111e 	bne	r2,zero,8008d594 <strtof+0x9c>
8008d550:	000d883a 	mov	r6,zero
8008d554:	000f883a 	mov	r7,zero
8008d558:	9009883a 	mov	r4,r18
8008d55c:	880b883a 	mov	r5,r17
8008d560:	00975480 	call	80097548 <__eqdf2>
8008d564:	10000b26 	beq	r2,zero,8008d594 <strtof+0x9c>
8008d568:	98800017 	ldw	r2,0(r19)
8008d56c:	00c00884 	movi	r3,34
8008d570:	10c00015 	stw	r3,0(r2)
8008d574:	8005883a 	mov	r2,r16
8008d578:	dfc00417 	ldw	ra,16(sp)
8008d57c:	dcc00317 	ldw	r19,12(sp)
8008d580:	dc800217 	ldw	r18,8(sp)
8008d584:	dc400117 	ldw	r17,4(sp)
8008d588:	dc000017 	ldw	r16,0(sp)
8008d58c:	dec00504 	addi	sp,sp,20
8008d590:	f800283a 	ret
8008d594:	015fe034 	movhi	r5,32640
8008d598:	297fffc4 	addi	r5,r5,-1
8008d59c:	8009883a 	mov	r4,r16
8008d5a0:	00962300 	call	80096230 <__gesf2>
8008d5a4:	0080070e 	bge	zero,r2,8008d5c4 <strtof+0xcc>
8008d5a8:	01dffc34 	movhi	r7,32752
8008d5ac:	39ffffc4 	addi	r7,r7,-1
8008d5b0:	01bfffc4 	movi	r6,-1
8008d5b4:	9009883a 	mov	r4,r18
8008d5b8:	880b883a 	mov	r5,r17
8008d5bc:	00975d00 	call	800975d0 <__gedf2>
8008d5c0:	00bfe90e 	bge	zero,r2,8008d568 <strtof+0x70>
8008d5c4:	017fe034 	movhi	r5,65408
8008d5c8:	297fffc4 	addi	r5,r5,-1
8008d5cc:	8009883a 	mov	r4,r16
8008d5d0:	00962ec0 	call	800962ec <__lesf2>
8008d5d4:	103fe70e 	bge	r2,zero,8008d574 <strtof+0x7c>
8008d5d8:	01fffc34 	movhi	r7,65520
8008d5dc:	39ffffc4 	addi	r7,r7,-1
8008d5e0:	01bfffc4 	movi	r6,-1
8008d5e4:	9009883a 	mov	r4,r18
8008d5e8:	880b883a 	mov	r5,r17
8008d5ec:	00976ac0 	call	800976ac <__ledf2>
8008d5f0:	103fdd0e 	bge	r2,zero,8008d568 <strtof+0x70>
8008d5f4:	003fdf06 	br	8008d574 <strtof+0x7c>

8008d5f8 <_strtol_r>:
8008d5f8:	00a002b4 	movhi	r2,32778
8008d5fc:	defff404 	addi	sp,sp,-48
8008d600:	1081c204 	addi	r2,r2,1800
8008d604:	dd400715 	stw	r21,28(sp)
8008d608:	15400017 	ldw	r21,0(r2)
8008d60c:	dd800815 	stw	r22,32(sp)
8008d610:	dd000615 	stw	r20,24(sp)
8008d614:	dcc00515 	stw	r19,20(sp)
8008d618:	d9000015 	stw	r4,0(sp)
8008d61c:	dfc00b15 	stw	ra,44(sp)
8008d620:	df000a15 	stw	fp,40(sp)
8008d624:	ddc00915 	stw	r23,36(sp)
8008d628:	dc800415 	stw	r18,16(sp)
8008d62c:	dc400315 	stw	r17,12(sp)
8008d630:	dc000215 	stw	r16,8(sp)
8008d634:	2829883a 	mov	r20,r5
8008d638:	3027883a 	mov	r19,r6
8008d63c:	382d883a 	mov	r22,r7
8008d640:	2809883a 	mov	r4,r5
8008d644:	24000003 	ldbu	r16,0(r4)
8008d648:	24400044 	addi	r17,r4,1
8008d64c:	2007883a 	mov	r3,r4
8008d650:	ac05883a 	add	r2,r21,r16
8008d654:	10800043 	ldbu	r2,1(r2)
8008d658:	8809883a 	mov	r4,r17
8008d65c:	1080020c 	andi	r2,r2,8
8008d660:	103ff81e 	bne	r2,zero,8008d644 <_strtol_r+0x4c>
8008d664:	00800b44 	movi	r2,45
8008d668:	80805826 	beq	r16,r2,8008d7cc <_strtol_r+0x1d4>
8008d66c:	00800ac4 	movi	r2,43
8008d670:	80805a26 	beq	r16,r2,8008d7dc <_strtol_r+0x1e4>
8008d674:	0039883a 	mov	fp,zero
8008d678:	b0004426 	beq	r22,zero,8008d78c <_strtol_r+0x194>
8008d67c:	00800404 	movi	r2,16
8008d680:	b0806026 	beq	r22,r2,8008d804 <_strtol_r+0x20c>
8008d684:	b02f883a 	mov	r23,r22
8008d688:	00a00034 	movhi	r2,32768
8008d68c:	e025003a 	cmpeq	r18,fp,zero
8008d690:	14a5c83a 	sub	r18,r2,r18
8008d694:	b80b883a 	mov	r5,r23
8008d698:	9009883a 	mov	r4,r18
8008d69c:	00823a40 	call	800823a4 <__umodsi3>
8008d6a0:	b80b883a 	mov	r5,r23
8008d6a4:	9009883a 	mov	r4,r18
8008d6a8:	d8800115 	stw	r2,4(sp)
8008d6ac:	00823400 	call	80082340 <__udivsi3>
8008d6b0:	ac07883a 	add	r3,r21,r16
8008d6b4:	18c00043 	ldbu	r3,1(r3)
8008d6b8:	880b883a 	mov	r5,r17
8008d6bc:	000d883a 	mov	r6,zero
8008d6c0:	1a00010c 	andi	r8,r3,4
8008d6c4:	0009883a 	mov	r4,zero
8008d6c8:	02800044 	movi	r10,1
8008d6cc:	027fffc4 	movi	r9,-1
8008d6d0:	d9c00117 	ldw	r7,4(sp)
8008d6d4:	40000e26 	beq	r8,zero,8008d710 <_strtol_r+0x118>
8008d6d8:	843ff404 	addi	r16,r16,-48
8008d6dc:	8580120e 	bge	r16,r22,8008d728 <_strtol_r+0x130>
8008d6e0:	32400526 	beq	r6,r9,8008d6f8 <_strtol_r+0x100>
8008d6e4:	11002536 	bltu	r2,r4,8008d77c <_strtol_r+0x184>
8008d6e8:	20802326 	beq	r4,r2,8008d778 <_strtol_r+0x180>
8008d6ec:	25c9383a 	mul	r4,r4,r23
8008d6f0:	01800044 	movi	r6,1
8008d6f4:	8109883a 	add	r4,r16,r4
8008d6f8:	2c000003 	ldbu	r16,0(r5)
8008d6fc:	29400044 	addi	r5,r5,1
8008d700:	ac07883a 	add	r3,r21,r16
8008d704:	18c00043 	ldbu	r3,1(r3)
8008d708:	1a00010c 	andi	r8,r3,4
8008d70c:	403ff21e 	bne	r8,zero,8008d6d8 <_strtol_r+0xe0>
8008d710:	18c000cc 	andi	r3,r3,3
8008d714:	18000426 	beq	r3,zero,8008d728 <_strtol_r+0x130>
8008d718:	1a801a26 	beq	r3,r10,8008d784 <_strtol_r+0x18c>
8008d71c:	00c015c4 	movi	r3,87
8008d720:	80e1c83a 	sub	r16,r16,r3
8008d724:	85bfee16 	blt	r16,r22,8008d6e0 <_strtol_r+0xe8>
8008d728:	00bfffc4 	movi	r2,-1
8008d72c:	30801e26 	beq	r6,r2,8008d7a8 <_strtol_r+0x1b0>
8008d730:	e0001b1e 	bne	fp,zero,8008d7a0 <_strtol_r+0x1a8>
8008d734:	2005883a 	mov	r2,r4
8008d738:	98000326 	beq	r19,zero,8008d748 <_strtol_r+0x150>
8008d73c:	3000211e 	bne	r6,zero,8008d7c4 <_strtol_r+0x1cc>
8008d740:	a00b883a 	mov	r5,r20
8008d744:	99400015 	stw	r5,0(r19)
8008d748:	dfc00b17 	ldw	ra,44(sp)
8008d74c:	df000a17 	ldw	fp,40(sp)
8008d750:	ddc00917 	ldw	r23,36(sp)
8008d754:	dd800817 	ldw	r22,32(sp)
8008d758:	dd400717 	ldw	r21,28(sp)
8008d75c:	dd000617 	ldw	r20,24(sp)
8008d760:	dcc00517 	ldw	r19,20(sp)
8008d764:	dc800417 	ldw	r18,16(sp)
8008d768:	dc400317 	ldw	r17,12(sp)
8008d76c:	dc000217 	ldw	r16,8(sp)
8008d770:	dec00c04 	addi	sp,sp,48
8008d774:	f800283a 	ret
8008d778:	3c3fdc0e 	bge	r7,r16,8008d6ec <_strtol_r+0xf4>
8008d77c:	01bfffc4 	movi	r6,-1
8008d780:	003fdd06 	br	8008d6f8 <_strtol_r+0x100>
8008d784:	00c00dc4 	movi	r3,55
8008d788:	003fe506 	br	8008d720 <_strtol_r+0x128>
8008d78c:	00800c04 	movi	r2,48
8008d790:	80801626 	beq	r16,r2,8008d7ec <_strtol_r+0x1f4>
8008d794:	05800284 	movi	r22,10
8008d798:	b02f883a 	mov	r23,r22
8008d79c:	003fba06 	br	8008d688 <_strtol_r+0x90>
8008d7a0:	0109c83a 	sub	r4,zero,r4
8008d7a4:	003fe306 	br	8008d734 <_strtol_r+0x13c>
8008d7a8:	d9000017 	ldw	r4,0(sp)
8008d7ac:	00c00884 	movi	r3,34
8008d7b0:	e005003a 	cmpeq	r2,fp,zero
8008d7b4:	20c00015 	stw	r3,0(r4)
8008d7b8:	00e00034 	movhi	r3,32768
8008d7bc:	1885c83a 	sub	r2,r3,r2
8008d7c0:	983fe126 	beq	r19,zero,8008d748 <_strtol_r+0x150>
8008d7c4:	297fffc4 	addi	r5,r5,-1
8008d7c8:	003fde06 	br	8008d744 <_strtol_r+0x14c>
8008d7cc:	1c400084 	addi	r17,r3,2
8008d7d0:	1c000043 	ldbu	r16,1(r3)
8008d7d4:	07000044 	movi	fp,1
8008d7d8:	003fa706 	br	8008d678 <_strtol_r+0x80>
8008d7dc:	1c400084 	addi	r17,r3,2
8008d7e0:	1c000043 	ldbu	r16,1(r3)
8008d7e4:	0039883a 	mov	fp,zero
8008d7e8:	003fa306 	br	8008d678 <_strtol_r+0x80>
8008d7ec:	88800003 	ldbu	r2,0(r17)
8008d7f0:	00c01604 	movi	r3,88
8008d7f4:	108037cc 	andi	r2,r2,223
8008d7f8:	10c00826 	beq	r2,r3,8008d81c <_strtol_r+0x224>
8008d7fc:	05800204 	movi	r22,8
8008d800:	003fa006 	br	8008d684 <_strtol_r+0x8c>
8008d804:	00800c04 	movi	r2,48
8008d808:	80bf9e1e 	bne	r16,r2,8008d684 <_strtol_r+0x8c>
8008d80c:	88800003 	ldbu	r2,0(r17)
8008d810:	00c01604 	movi	r3,88
8008d814:	108037cc 	andi	r2,r2,223
8008d818:	10ff9a1e 	bne	r2,r3,8008d684 <_strtol_r+0x8c>
8008d81c:	05c00404 	movi	r23,16
8008d820:	8c000043 	ldbu	r16,1(r17)
8008d824:	b82d883a 	mov	r22,r23
8008d828:	8c400084 	addi	r17,r17,2
8008d82c:	003f9606 	br	8008d688 <_strtol_r+0x90>

8008d830 <strtol>:
8008d830:	00a002b4 	movhi	r2,32778
8008d834:	1081bf04 	addi	r2,r2,1788
8008d838:	300f883a 	mov	r7,r6
8008d83c:	280d883a 	mov	r6,r5
8008d840:	200b883a 	mov	r5,r4
8008d844:	11000017 	ldw	r4,0(r2)
8008d848:	008d5f81 	jmpi	8008d5f8 <_strtol_r>

8008d84c <_strtoll_r>:
8008d84c:	00a002b4 	movhi	r2,32778
8008d850:	defff304 	addi	sp,sp,-52
8008d854:	1081c204 	addi	r2,r2,1800
8008d858:	dc800515 	stw	r18,20(sp)
8008d85c:	14800017 	ldw	r18,0(r2)
8008d860:	dd800915 	stw	r22,36(sp)
8008d864:	dd400815 	stw	r21,32(sp)
8008d868:	dcc00615 	stw	r19,24(sp)
8008d86c:	d9000015 	stw	r4,0(sp)
8008d870:	dfc00c15 	stw	ra,48(sp)
8008d874:	df000b15 	stw	fp,44(sp)
8008d878:	ddc00a15 	stw	r23,40(sp)
8008d87c:	dd000715 	stw	r20,28(sp)
8008d880:	dc400415 	stw	r17,16(sp)
8008d884:	dc000315 	stw	r16,12(sp)
8008d888:	282d883a 	mov	r22,r5
8008d88c:	302b883a 	mov	r21,r6
8008d890:	3827883a 	mov	r19,r7
8008d894:	2809883a 	mov	r4,r5
8008d898:	24000003 	ldbu	r16,0(r4)
8008d89c:	24400044 	addi	r17,r4,1
8008d8a0:	2007883a 	mov	r3,r4
8008d8a4:	9405883a 	add	r2,r18,r16
8008d8a8:	10800043 	ldbu	r2,1(r2)
8008d8ac:	8809883a 	mov	r4,r17
8008d8b0:	1080020c 	andi	r2,r2,8
8008d8b4:	103ff81e 	bne	r2,zero,8008d898 <_strtoll_r+0x4c>
8008d8b8:	00800b44 	movi	r2,45
8008d8bc:	80807826 	beq	r16,r2,8008daa0 <_strtoll_r+0x254>
8008d8c0:	00800ac4 	movi	r2,43
8008d8c4:	80807a26 	beq	r16,r2,8008dab0 <_strtoll_r+0x264>
8008d8c8:	0039883a 	mov	fp,zero
8008d8cc:	98004e26 	beq	r19,zero,8008da08 <_strtoll_r+0x1bc>
8008d8d0:	00800404 	movi	r2,16
8008d8d4:	98808226 	beq	r19,r2,8008dae0 <_strtoll_r+0x294>
8008d8d8:	982fd7fa 	srai	r23,r19,31
8008d8dc:	9829883a 	mov	r20,r19
8008d8e0:	e0004f26 	beq	fp,zero,8008da20 <_strtoll_r+0x1d4>
8008d8e4:	0017883a 	mov	r11,zero
8008d8e8:	02a00034 	movhi	r10,32768
8008d8ec:	5809883a 	mov	r4,r11
8008d8f0:	500b883a 	mov	r5,r10
8008d8f4:	a00d883a 	mov	r6,r20
8008d8f8:	b80f883a 	mov	r7,r23
8008d8fc:	da800215 	stw	r10,8(sp)
8008d900:	dac00115 	stw	r11,4(sp)
8008d904:	0095c800 	call	80095c80 <__umoddi3>
8008d908:	dac00117 	ldw	r11,4(sp)
8008d90c:	da800217 	ldw	r10,8(sp)
8008d910:	a00d883a 	mov	r6,r20
8008d914:	5809883a 	mov	r4,r11
8008d918:	500b883a 	mov	r5,r10
8008d91c:	b80f883a 	mov	r7,r23
8008d920:	d8800115 	stw	r2,4(sp)
8008d924:	00957080 	call	80095708 <__udivdi3>
8008d928:	9409883a 	add	r4,r18,r16
8008d92c:	21000043 	ldbu	r4,1(r4)
8008d930:	1019883a 	mov	r12,r2
8008d934:	880b883a 	mov	r5,r17
8008d938:	2240010c 	andi	r9,r4,4
8008d93c:	0015883a 	mov	r10,zero
8008d940:	000d883a 	mov	r6,zero
8008d944:	000f883a 	mov	r7,zero
8008d948:	03400044 	movi	r13,1
8008d94c:	02ffffc4 	movi	r11,-1
8008d950:	da000117 	ldw	r8,4(sp)
8008d954:	48000d26 	beq	r9,zero,8008d98c <_strtoll_r+0x140>
8008d958:	843ff404 	addi	r16,r16,-48
8008d95c:	84c0110e 	bge	r16,r19,8008d9a4 <_strtoll_r+0x158>
8008d960:	52c00426 	beq	r10,r11,8008d974 <_strtoll_r+0x128>
8008d964:	19c00236 	bltu	r3,r7,8008d970 <_strtoll_r+0x124>
8008d968:	38c0311e 	bne	r7,r3,8008da30 <_strtoll_r+0x1e4>
8008d96c:	6180302e 	bgeu	r12,r6,8008da30 <_strtoll_r+0x1e4>
8008d970:	02bfffc4 	movi	r10,-1
8008d974:	2c000003 	ldbu	r16,0(r5)
8008d978:	29400044 	addi	r5,r5,1
8008d97c:	9409883a 	add	r4,r18,r16
8008d980:	21000043 	ldbu	r4,1(r4)
8008d984:	2240010c 	andi	r9,r4,4
8008d988:	483ff31e 	bne	r9,zero,8008d958 <_strtoll_r+0x10c>
8008d98c:	210000cc 	andi	r4,r4,3
8008d990:	20000426 	beq	r4,zero,8008d9a4 <_strtoll_r+0x158>
8008d994:	23403426 	beq	r4,r13,8008da68 <_strtoll_r+0x21c>
8008d998:	008015c4 	movi	r2,87
8008d99c:	80a1c83a 	sub	r16,r16,r2
8008d9a0:	84ffef16 	blt	r16,r19,8008d960 <_strtoll_r+0x114>
8008d9a4:	00bfffc4 	movi	r2,-1
8008d9a8:	50803426 	beq	r10,r2,8008da7c <_strtoll_r+0x230>
8008d9ac:	e0000426 	beq	fp,zero,8008d9c0 <_strtoll_r+0x174>
8008d9b0:	018dc83a 	sub	r6,zero,r6
8008d9b4:	3004c03a 	cmpne	r2,r6,zero
8008d9b8:	01e1c83a 	sub	r16,zero,r7
8008d9bc:	808fc83a 	sub	r7,r16,r2
8008d9c0:	3005883a 	mov	r2,r6
8008d9c4:	3807883a 	mov	r3,r7
8008d9c8:	a8000326 	beq	r21,zero,8008d9d8 <_strtoll_r+0x18c>
8008d9cc:	5000321e 	bne	r10,zero,8008da98 <_strtoll_r+0x24c>
8008d9d0:	b00b883a 	mov	r5,r22
8008d9d4:	a9400015 	stw	r5,0(r21)
8008d9d8:	dfc00c17 	ldw	ra,48(sp)
8008d9dc:	df000b17 	ldw	fp,44(sp)
8008d9e0:	ddc00a17 	ldw	r23,40(sp)
8008d9e4:	dd800917 	ldw	r22,36(sp)
8008d9e8:	dd400817 	ldw	r21,32(sp)
8008d9ec:	dd000717 	ldw	r20,28(sp)
8008d9f0:	dcc00617 	ldw	r19,24(sp)
8008d9f4:	dc800517 	ldw	r18,20(sp)
8008d9f8:	dc400417 	ldw	r17,16(sp)
8008d9fc:	dc000317 	ldw	r16,12(sp)
8008da00:	dec00d04 	addi	sp,sp,52
8008da04:	f800283a 	ret
8008da08:	00800c04 	movi	r2,48
8008da0c:	80802c26 	beq	r16,r2,8008dac0 <_strtoll_r+0x274>
8008da10:	05000284 	movi	r20,10
8008da14:	002f883a 	mov	r23,zero
8008da18:	a027883a 	mov	r19,r20
8008da1c:	e03fb11e 	bne	fp,zero,8008d8e4 <_strtoll_r+0x98>
8008da20:	02a00034 	movhi	r10,32768
8008da24:	52bfffc4 	addi	r10,r10,-1
8008da28:	02ffffc4 	movi	r11,-1
8008da2c:	003faf06 	br	8008d8ec <_strtoll_r+0xa0>
8008da30:	33000f26 	beq	r6,r12,8008da70 <_strtoll_r+0x224>
8008da34:	b985383a 	mul	r2,r23,r6
8008da38:	3d0f383a 	mul	r7,r7,r20
8008da3c:	3508383a 	mulxuu	r4,r6,r20
8008da40:	350d383a 	mul	r6,r6,r20
8008da44:	8013d7fa 	srai	r9,r16,31
8008da48:	388f883a 	add	r7,r7,r2
8008da4c:	818d883a 	add	r6,r16,r6
8008da50:	390f883a 	add	r7,r7,r4
8008da54:	3421803a 	cmpltu	r16,r6,r16
8008da58:	49cf883a 	add	r7,r9,r7
8008da5c:	81cf883a 	add	r7,r16,r7
8008da60:	02800044 	movi	r10,1
8008da64:	003fc306 	br	8008d974 <_strtoll_r+0x128>
8008da68:	00800dc4 	movi	r2,55
8008da6c:	003fcb06 	br	8008d99c <_strtoll_r+0x150>
8008da70:	38fff01e 	bne	r7,r3,8008da34 <_strtoll_r+0x1e8>
8008da74:	443fbe16 	blt	r8,r16,8008d970 <_strtoll_r+0x124>
8008da78:	003fee06 	br	8008da34 <_strtoll_r+0x1e8>
8008da7c:	e0002426 	beq	fp,zero,8008db10 <_strtoll_r+0x2c4>
8008da80:	0005883a 	mov	r2,zero
8008da84:	00e00034 	movhi	r3,32768
8008da88:	d9800017 	ldw	r6,0(sp)
8008da8c:	01000884 	movi	r4,34
8008da90:	31000015 	stw	r4,0(r6)
8008da94:	a83fd026 	beq	r21,zero,8008d9d8 <_strtoll_r+0x18c>
8008da98:	297fffc4 	addi	r5,r5,-1
8008da9c:	003fcd06 	br	8008d9d4 <_strtoll_r+0x188>
8008daa0:	1c400084 	addi	r17,r3,2
8008daa4:	1c000043 	ldbu	r16,1(r3)
8008daa8:	07000044 	movi	fp,1
8008daac:	003f8706 	br	8008d8cc <_strtoll_r+0x80>
8008dab0:	1c400084 	addi	r17,r3,2
8008dab4:	1c000043 	ldbu	r16,1(r3)
8008dab8:	0039883a 	mov	fp,zero
8008dabc:	003f8306 	br	8008d8cc <_strtoll_r+0x80>
8008dac0:	88800003 	ldbu	r2,0(r17)
8008dac4:	00c01604 	movi	r3,88
8008dac8:	108037cc 	andi	r2,r2,223
8008dacc:	10c00a26 	beq	r2,r3,8008daf8 <_strtoll_r+0x2ac>
8008dad0:	05000204 	movi	r20,8
8008dad4:	002f883a 	mov	r23,zero
8008dad8:	a027883a 	mov	r19,r20
8008dadc:	003f8006 	br	8008d8e0 <_strtoll_r+0x94>
8008dae0:	00800c04 	movi	r2,48
8008dae4:	80800e1e 	bne	r16,r2,8008db20 <_strtoll_r+0x2d4>
8008dae8:	88800003 	ldbu	r2,0(r17)
8008daec:	00c01604 	movi	r3,88
8008daf0:	108037cc 	andi	r2,r2,223
8008daf4:	10c00a1e 	bne	r2,r3,8008db20 <_strtoll_r+0x2d4>
8008daf8:	05000404 	movi	r20,16
8008dafc:	8c000043 	ldbu	r16,1(r17)
8008db00:	002f883a 	mov	r23,zero
8008db04:	8c400084 	addi	r17,r17,2
8008db08:	a027883a 	mov	r19,r20
8008db0c:	003f7406 	br	8008d8e0 <_strtoll_r+0x94>
8008db10:	00e00034 	movhi	r3,32768
8008db14:	18ffffc4 	addi	r3,r3,-1
8008db18:	5005883a 	mov	r2,r10
8008db1c:	003fda06 	br	8008da88 <_strtoll_r+0x23c>
8008db20:	9829883a 	mov	r20,r19
8008db24:	002f883a 	mov	r23,zero
8008db28:	003f6d06 	br	8008d8e0 <_strtoll_r+0x94>

8008db2c <_strtoul_r>:
8008db2c:	00a002b4 	movhi	r2,32778
8008db30:	defff604 	addi	sp,sp,-40
8008db34:	1081c204 	addi	r2,r2,1800
8008db38:	dc800315 	stw	r18,12(sp)
8008db3c:	14800017 	ldw	r18,0(r2)
8008db40:	dd400615 	stw	r21,24(sp)
8008db44:	dd000515 	stw	r20,20(sp)
8008db48:	dcc00415 	stw	r19,16(sp)
8008db4c:	2029883a 	mov	r20,r4
8008db50:	dfc00915 	stw	ra,36(sp)
8008db54:	ddc00815 	stw	r23,32(sp)
8008db58:	dd800715 	stw	r22,28(sp)
8008db5c:	dc400215 	stw	r17,8(sp)
8008db60:	dc000115 	stw	r16,4(sp)
8008db64:	2827883a 	mov	r19,r5
8008db68:	382b883a 	mov	r21,r7
8008db6c:	2809883a 	mov	r4,r5
8008db70:	24000003 	ldbu	r16,0(r4)
8008db74:	24400044 	addi	r17,r4,1
8008db78:	2007883a 	mov	r3,r4
8008db7c:	9405883a 	add	r2,r18,r16
8008db80:	10800043 	ldbu	r2,1(r2)
8008db84:	8809883a 	mov	r4,r17
8008db88:	1080020c 	andi	r2,r2,8
8008db8c:	103ff81e 	bne	r2,zero,8008db70 <_strtoul_r+0x44>
8008db90:	00800b44 	movi	r2,45
8008db94:	80805326 	beq	r16,r2,8008dce4 <_strtoul_r+0x1b8>
8008db98:	00800ac4 	movi	r2,43
8008db9c:	80805526 	beq	r16,r2,8008dcf4 <_strtoul_r+0x1c8>
8008dba0:	002f883a 	mov	r23,zero
8008dba4:	a8000f26 	beq	r21,zero,8008dbe4 <_strtoul_r+0xb8>
8008dba8:	00800404 	movi	r2,16
8008dbac:	a8805f26 	beq	r21,r2,8008dd2c <_strtoul_r+0x200>
8008dbb0:	013fffc4 	movi	r4,-1
8008dbb4:	a80b883a 	mov	r5,r21
8008dbb8:	d9800015 	stw	r6,0(sp)
8008dbbc:	00823400 	call	80082340 <__udivsi3>
8008dbc0:	a80b883a 	mov	r5,r21
8008dbc4:	013fffc4 	movi	r4,-1
8008dbc8:	102d883a 	mov	r22,r2
8008dbcc:	00823a40 	call	800823a4 <__umodsi3>
8008dbd0:	d9800017 	ldw	r6,0(sp)
8008dbd4:	1019883a 	mov	r12,r2
8008dbd8:	a817883a 	mov	r11,r21
8008dbdc:	b00f883a 	mov	r7,r22
8008dbe0:	00000706 	br	8008dc00 <_strtoul_r+0xd4>
8008dbe4:	00800c04 	movi	r2,48
8008dbe8:	80804626 	beq	r16,r2,8008dd04 <_strtoul_r+0x1d8>
8008dbec:	05400284 	movi	r21,10
8008dbf0:	01c666b4 	movhi	r7,6554
8008dbf4:	03000144 	movi	r12,5
8008dbf8:	39e66644 	addi	r7,r7,-26215
8008dbfc:	a817883a 	mov	r11,r21
8008dc00:	9407883a 	add	r3,r18,r16
8008dc04:	18c00043 	ldbu	r3,1(r3)
8008dc08:	8809883a 	mov	r4,r17
8008dc0c:	0011883a 	mov	r8,zero
8008dc10:	1940010c 	andi	r5,r3,4
8008dc14:	0005883a 	mov	r2,zero
8008dc18:	02800044 	movi	r10,1
8008dc1c:	027fffc4 	movi	r9,-1
8008dc20:	28000e26 	beq	r5,zero,8008dc5c <_strtoul_r+0x130>
8008dc24:	843ff404 	addi	r16,r16,-48
8008dc28:	8540120e 	bge	r16,r21,8008dc74 <_strtoul_r+0x148>
8008dc2c:	42400526 	beq	r8,r9,8008dc44 <_strtoul_r+0x118>
8008dc30:	38802236 	bltu	r7,r2,8008dcbc <_strtoul_r+0x190>
8008dc34:	11c02026 	beq	r2,r7,8008dcb8 <_strtoul_r+0x18c>
8008dc38:	12c5383a 	mul	r2,r2,r11
8008dc3c:	02000044 	movi	r8,1
8008dc40:	8085883a 	add	r2,r16,r2
8008dc44:	24000003 	ldbu	r16,0(r4)
8008dc48:	21000044 	addi	r4,r4,1
8008dc4c:	9407883a 	add	r3,r18,r16
8008dc50:	18c00043 	ldbu	r3,1(r3)
8008dc54:	1940010c 	andi	r5,r3,4
8008dc58:	283ff21e 	bne	r5,zero,8008dc24 <_strtoul_r+0xf8>
8008dc5c:	18c000cc 	andi	r3,r3,3
8008dc60:	18000426 	beq	r3,zero,8008dc74 <_strtoul_r+0x148>
8008dc64:	1a801726 	beq	r3,r10,8008dcc4 <_strtoul_r+0x198>
8008dc68:	00c015c4 	movi	r3,87
8008dc6c:	80e1c83a 	sub	r16,r16,r3
8008dc70:	857fee16 	blt	r16,r21,8008dc2c <_strtoul_r+0x100>
8008dc74:	40001516 	blt	r8,zero,8008dccc <_strtoul_r+0x1a0>
8008dc78:	b8000126 	beq	r23,zero,8008dc80 <_strtoul_r+0x154>
8008dc7c:	0085c83a 	sub	r2,zero,r2
8008dc80:	30000226 	beq	r6,zero,8008dc8c <_strtoul_r+0x160>
8008dc84:	4000151e 	bne	r8,zero,8008dcdc <_strtoul_r+0x1b0>
8008dc88:	34c00015 	stw	r19,0(r6)
8008dc8c:	dfc00917 	ldw	ra,36(sp)
8008dc90:	ddc00817 	ldw	r23,32(sp)
8008dc94:	dd800717 	ldw	r22,28(sp)
8008dc98:	dd400617 	ldw	r21,24(sp)
8008dc9c:	dd000517 	ldw	r20,20(sp)
8008dca0:	dcc00417 	ldw	r19,16(sp)
8008dca4:	dc800317 	ldw	r18,12(sp)
8008dca8:	dc400217 	ldw	r17,8(sp)
8008dcac:	dc000117 	ldw	r16,4(sp)
8008dcb0:	dec00a04 	addi	sp,sp,40
8008dcb4:	f800283a 	ret
8008dcb8:	643fdf0e 	bge	r12,r16,8008dc38 <_strtoul_r+0x10c>
8008dcbc:	023fffc4 	movi	r8,-1
8008dcc0:	003fe006 	br	8008dc44 <_strtoul_r+0x118>
8008dcc4:	00c00dc4 	movi	r3,55
8008dcc8:	003fe806 	br	8008dc6c <_strtoul_r+0x140>
8008dccc:	00800884 	movi	r2,34
8008dcd0:	a0800015 	stw	r2,0(r20)
8008dcd4:	00bfffc4 	movi	r2,-1
8008dcd8:	303fec26 	beq	r6,zero,8008dc8c <_strtoul_r+0x160>
8008dcdc:	24ffffc4 	addi	r19,r4,-1
8008dce0:	003fe906 	br	8008dc88 <_strtoul_r+0x15c>
8008dce4:	1c400084 	addi	r17,r3,2
8008dce8:	1c000043 	ldbu	r16,1(r3)
8008dcec:	05c00044 	movi	r23,1
8008dcf0:	003fac06 	br	8008dba4 <_strtoul_r+0x78>
8008dcf4:	1c400084 	addi	r17,r3,2
8008dcf8:	1c000043 	ldbu	r16,1(r3)
8008dcfc:	002f883a 	mov	r23,zero
8008dd00:	003fa806 	br	8008dba4 <_strtoul_r+0x78>
8008dd04:	88800003 	ldbu	r2,0(r17)
8008dd08:	00c01604 	movi	r3,88
8008dd0c:	108037cc 	andi	r2,r2,223
8008dd10:	10c00c26 	beq	r2,r3,8008dd44 <_strtoul_r+0x218>
8008dd14:	05400204 	movi	r21,8
8008dd18:	01c80034 	movhi	r7,8192
8008dd1c:	030001c4 	movi	r12,7
8008dd20:	39ffffc4 	addi	r7,r7,-1
8008dd24:	a817883a 	mov	r11,r21
8008dd28:	003fb506 	br	8008dc00 <_strtoul_r+0xd4>
8008dd2c:	00800c04 	movi	r2,48
8008dd30:	80800c1e 	bne	r16,r2,8008dd64 <_strtoul_r+0x238>
8008dd34:	88800003 	ldbu	r2,0(r17)
8008dd38:	00c01604 	movi	r3,88
8008dd3c:	108037cc 	andi	r2,r2,223
8008dd40:	10c0081e 	bne	r2,r3,8008dd64 <_strtoul_r+0x238>
8008dd44:	02c00404 	movi	r11,16
8008dd48:	05840034 	movhi	r22,4096
8008dd4c:	8c000043 	ldbu	r16,1(r17)
8008dd50:	030003c4 	movi	r12,15
8008dd54:	8c400084 	addi	r17,r17,2
8008dd58:	b5bfffc4 	addi	r22,r22,-1
8008dd5c:	582b883a 	mov	r21,r11
8008dd60:	003f9e06 	br	8008dbdc <_strtoul_r+0xb0>
8008dd64:	01c40034 	movhi	r7,4096
8008dd68:	030003c4 	movi	r12,15
8008dd6c:	39ffffc4 	addi	r7,r7,-1
8008dd70:	a817883a 	mov	r11,r21
8008dd74:	003fa206 	br	8008dc00 <_strtoul_r+0xd4>

8008dd78 <strtoul>:
8008dd78:	00a002b4 	movhi	r2,32778
8008dd7c:	1081bf04 	addi	r2,r2,1788
8008dd80:	300f883a 	mov	r7,r6
8008dd84:	280d883a 	mov	r6,r5
8008dd88:	200b883a 	mov	r5,r4
8008dd8c:	11000017 	ldw	r4,0(r2)
8008dd90:	008db2c1 	jmpi	8008db2c <_strtoul_r>

8008dd94 <_strtoull_r>:
8008dd94:	00a002b4 	movhi	r2,32778
8008dd98:	defff404 	addi	sp,sp,-48
8008dd9c:	1081c204 	addi	r2,r2,1800
8008dda0:	dc400315 	stw	r17,12(sp)
8008dda4:	14400017 	ldw	r17,0(r2)
8008dda8:	dd400715 	stw	r21,28(sp)
8008ddac:	dd000615 	stw	r20,24(sp)
8008ddb0:	dcc00515 	stw	r19,20(sp)
8008ddb4:	dc800415 	stw	r18,16(sp)
8008ddb8:	dfc00b15 	stw	ra,44(sp)
8008ddbc:	df000a15 	stw	fp,40(sp)
8008ddc0:	ddc00915 	stw	r23,36(sp)
8008ddc4:	dd800815 	stw	r22,32(sp)
8008ddc8:	dc000215 	stw	r16,8(sp)
8008ddcc:	2827883a 	mov	r19,r5
8008ddd0:	202b883a 	mov	r21,r4
8008ddd4:	3029883a 	mov	r20,r6
8008ddd8:	3825883a 	mov	r18,r7
8008dddc:	2807883a 	mov	r3,r5
8008dde0:	1c000003 	ldbu	r16,0(r3)
8008dde4:	1f000044 	addi	fp,r3,1
8008dde8:	1809883a 	mov	r4,r3
8008ddec:	8c05883a 	add	r2,r17,r16
8008ddf0:	10800043 	ldbu	r2,1(r2)
8008ddf4:	e007883a 	mov	r3,fp
8008ddf8:	1080020c 	andi	r2,r2,8
8008ddfc:	103ff81e 	bne	r2,zero,8008dde0 <_strtoull_r+0x4c>
8008de00:	00800b44 	movi	r2,45
8008de04:	80806e26 	beq	r16,r2,8008dfc0 <_strtoull_r+0x22c>
8008de08:	00800ac4 	movi	r2,43
8008de0c:	80807026 	beq	r16,r2,8008dfd0 <_strtoull_r+0x23c>
8008de10:	002f883a 	mov	r23,zero
8008de14:	90001426 	beq	r18,zero,8008de68 <_strtoull_r+0xd4>
8008de18:	00800404 	movi	r2,16
8008de1c:	90807c26 	beq	r18,r2,8008e010 <_strtoull_r+0x27c>
8008de20:	902dd7fa 	srai	r22,r18,31
8008de24:	013fffc4 	movi	r4,-1
8008de28:	200b883a 	mov	r5,r4
8008de2c:	900d883a 	mov	r6,r18
8008de30:	b00f883a 	mov	r7,r22
8008de34:	00957080 	call	80095708 <__udivdi3>
8008de38:	013fffc4 	movi	r4,-1
8008de3c:	900d883a 	mov	r6,r18
8008de40:	b00f883a 	mov	r7,r22
8008de44:	200b883a 	mov	r5,r4
8008de48:	d8c00115 	stw	r3,4(sp)
8008de4c:	d8800015 	stw	r2,0(sp)
8008de50:	0095c800 	call	80095c80 <__umoddi3>
8008de54:	101b883a 	mov	r13,r2
8008de58:	9015883a 	mov	r10,r18
8008de5c:	dac00017 	ldw	r11,0(sp)
8008de60:	da000117 	ldw	r8,4(sp)
8008de64:	00000a06 	br	8008de90 <_strtoull_r+0xfc>
8008de68:	00800c04 	movi	r2,48
8008de6c:	80805c26 	beq	r16,r2,8008dfe0 <_strtoull_r+0x24c>
8008de70:	02800284 	movi	r10,10
8008de74:	02e666b4 	movhi	r11,39322
8008de78:	020666b4 	movhi	r8,6554
8008de7c:	03400144 	movi	r13,5
8008de80:	5ae66644 	addi	r11,r11,-26215
8008de84:	42266644 	addi	r8,r8,-26215
8008de88:	002d883a 	mov	r22,zero
8008de8c:	5025883a 	mov	r18,r10
8008de90:	8c0b883a 	add	r5,r17,r16
8008de94:	29400043 	ldbu	r5,1(r5)
8008de98:	e009883a 	mov	r4,fp
8008de9c:	000f883a 	mov	r7,zero
8008dea0:	2980010c 	andi	r6,r5,4
8008dea4:	0005883a 	mov	r2,zero
8008dea8:	0007883a 	mov	r3,zero
8008deac:	03000044 	movi	r12,1
8008deb0:	027fffc4 	movi	r9,-1
8008deb4:	30000d26 	beq	r6,zero,8008deec <_strtoull_r+0x158>
8008deb8:	843ff404 	addi	r16,r16,-48
8008debc:	8480110e 	bge	r16,r18,8008df04 <_strtoull_r+0x170>
8008dec0:	3a400426 	beq	r7,r9,8008ded4 <_strtoull_r+0x140>
8008dec4:	40c00236 	bltu	r8,r3,8008ded0 <_strtoull_r+0x13c>
8008dec8:	1a00231e 	bne	r3,r8,8008df58 <_strtoull_r+0x1c4>
8008decc:	5880222e 	bgeu	r11,r2,8008df58 <_strtoull_r+0x1c4>
8008ded0:	01ffffc4 	movi	r7,-1
8008ded4:	24000003 	ldbu	r16,0(r4)
8008ded8:	21000044 	addi	r4,r4,1
8008dedc:	8c0b883a 	add	r5,r17,r16
8008dee0:	29400043 	ldbu	r5,1(r5)
8008dee4:	2980010c 	andi	r6,r5,4
8008dee8:	303ff31e 	bne	r6,zero,8008deb8 <_strtoull_r+0x124>
8008deec:	294000cc 	andi	r5,r5,3
8008def0:	28000426 	beq	r5,zero,8008df04 <_strtoull_r+0x170>
8008def4:	2b002626 	beq	r5,r12,8008df90 <_strtoull_r+0x1fc>
8008def8:	014015c4 	movi	r5,87
8008defc:	8161c83a 	sub	r16,r16,r5
8008df00:	84bfef16 	blt	r16,r18,8008dec0 <_strtoull_r+0x12c>
8008df04:	38002716 	blt	r7,zero,8008dfa4 <_strtoull_r+0x210>
8008df08:	b8000426 	beq	r23,zero,8008df1c <_strtoull_r+0x188>
8008df0c:	0085c83a 	sub	r2,zero,r2
8008df10:	100ac03a 	cmpne	r5,r2,zero
8008df14:	00e1c83a 	sub	r16,zero,r3
8008df18:	8147c83a 	sub	r3,r16,r5
8008df1c:	a0000226 	beq	r20,zero,8008df28 <_strtoull_r+0x194>
8008df20:	3800251e 	bne	r7,zero,8008dfb8 <_strtoull_r+0x224>
8008df24:	a4c00015 	stw	r19,0(r20)
8008df28:	dfc00b17 	ldw	ra,44(sp)
8008df2c:	df000a17 	ldw	fp,40(sp)
8008df30:	ddc00917 	ldw	r23,36(sp)
8008df34:	dd800817 	ldw	r22,32(sp)
8008df38:	dd400717 	ldw	r21,28(sp)
8008df3c:	dd000617 	ldw	r20,24(sp)
8008df40:	dcc00517 	ldw	r19,20(sp)
8008df44:	dc800417 	ldw	r18,16(sp)
8008df48:	dc400317 	ldw	r17,12(sp)
8008df4c:	dc000217 	ldw	r16,8(sp)
8008df50:	dec00c04 	addi	sp,sp,48
8008df54:	f800283a 	ret
8008df58:	12c00f26 	beq	r2,r11,8008df98 <_strtoull_r+0x204>
8008df5c:	b08d383a 	mul	r6,r22,r2
8008df60:	1a87383a 	mul	r3,r3,r10
8008df64:	128a383a 	mulxuu	r5,r2,r10
8008df68:	1285383a 	mul	r2,r2,r10
8008df6c:	800fd7fa 	srai	r7,r16,31
8008df70:	1987883a 	add	r3,r3,r6
8008df74:	8085883a 	add	r2,r16,r2
8008df78:	1947883a 	add	r3,r3,r5
8008df7c:	38c7883a 	add	r3,r7,r3
8008df80:	1421803a 	cmpltu	r16,r2,r16
8008df84:	80c7883a 	add	r3,r16,r3
8008df88:	01c00044 	movi	r7,1
8008df8c:	003fd106 	br	8008ded4 <_strtoull_r+0x140>
8008df90:	01400dc4 	movi	r5,55
8008df94:	003fd906 	br	8008defc <_strtoull_r+0x168>
8008df98:	1a3ff01e 	bne	r3,r8,8008df5c <_strtoull_r+0x1c8>
8008df9c:	6c3fcc16 	blt	r13,r16,8008ded0 <_strtoull_r+0x13c>
8008dfa0:	003fee06 	br	8008df5c <_strtoull_r+0x1c8>
8008dfa4:	00800884 	movi	r2,34
8008dfa8:	a8800015 	stw	r2,0(r21)
8008dfac:	00bfffc4 	movi	r2,-1
8008dfb0:	1007883a 	mov	r3,r2
8008dfb4:	a03fdc26 	beq	r20,zero,8008df28 <_strtoull_r+0x194>
8008dfb8:	24ffffc4 	addi	r19,r4,-1
8008dfbc:	003fd906 	br	8008df24 <_strtoull_r+0x190>
8008dfc0:	27000084 	addi	fp,r4,2
8008dfc4:	24000043 	ldbu	r16,1(r4)
8008dfc8:	05c00044 	movi	r23,1
8008dfcc:	003f9106 	br	8008de14 <_strtoull_r+0x80>
8008dfd0:	27000084 	addi	fp,r4,2
8008dfd4:	24000043 	ldbu	r16,1(r4)
8008dfd8:	002f883a 	mov	r23,zero
8008dfdc:	003f8d06 	br	8008de14 <_strtoull_r+0x80>
8008dfe0:	e0800003 	ldbu	r2,0(fp)
8008dfe4:	00c01604 	movi	r3,88
8008dfe8:	108037cc 	andi	r2,r2,223
8008dfec:	10c00e26 	beq	r2,r3,8008e028 <_strtoull_r+0x294>
8008dff0:	02800204 	movi	r10,8
8008dff4:	02ffffc4 	movi	r11,-1
8008dff8:	02080034 	movhi	r8,8192
8008dffc:	034001c4 	movi	r13,7
8008e000:	42d1883a 	add	r8,r8,r11
8008e004:	002d883a 	mov	r22,zero
8008e008:	5025883a 	mov	r18,r10
8008e00c:	003fa006 	br	8008de90 <_strtoull_r+0xfc>
8008e010:	00800c04 	movi	r2,48
8008e014:	80800e1e 	bne	r16,r2,8008e050 <_strtoull_r+0x2bc>
8008e018:	e0800003 	ldbu	r2,0(fp)
8008e01c:	00c01604 	movi	r3,88
8008e020:	108037cc 	andi	r2,r2,223
8008e024:	10c00a1e 	bne	r2,r3,8008e050 <_strtoull_r+0x2bc>
8008e028:	02800404 	movi	r10,16
8008e02c:	02ffffc4 	movi	r11,-1
8008e030:	02040034 	movhi	r8,4096
8008e034:	e4000043 	ldbu	r16,1(fp)
8008e038:	034003c4 	movi	r13,15
8008e03c:	e7000084 	addi	fp,fp,2
8008e040:	42d1883a 	add	r8,r8,r11
8008e044:	002d883a 	mov	r22,zero
8008e048:	5025883a 	mov	r18,r10
8008e04c:	003f9006 	br	8008de90 <_strtoull_r+0xfc>
8008e050:	02ffffc4 	movi	r11,-1
8008e054:	02040034 	movhi	r8,4096
8008e058:	034003c4 	movi	r13,15
8008e05c:	42d1883a 	add	r8,r8,r11
8008e060:	9015883a 	mov	r10,r18
8008e064:	002d883a 	mov	r22,zero
8008e068:	003f8906 	br	8008de90 <_strtoull_r+0xfc>

8008e06c <_sungetc_r>:
8008e06c:	00bfffc4 	movi	r2,-1
8008e070:	28803726 	beq	r5,r2,8008e150 <_sungetc_r+0xe4>
8008e074:	3080030b 	ldhu	r2,12(r6)
8008e078:	30c00c17 	ldw	r3,48(r6)
8008e07c:	defffc04 	addi	sp,sp,-16
8008e080:	10bff7cc 	andi	r2,r2,65503
8008e084:	dc800215 	stw	r18,8(sp)
8008e088:	dfc00315 	stw	ra,12(sp)
8008e08c:	dc400115 	stw	r17,4(sp)
8008e090:	dc000015 	stw	r16,0(sp)
8008e094:	3080030d 	sth	r2,12(r6)
8008e098:	2c803fcc 	andi	r18,r5,255
8008e09c:	18001826 	beq	r3,zero,8008e100 <_sungetc_r+0x94>
8008e0a0:	30c00117 	ldw	r3,4(r6)
8008e0a4:	30800d17 	ldw	r2,52(r6)
8008e0a8:	3021883a 	mov	r16,r6
8008e0ac:	2823883a 	mov	r17,r5
8008e0b0:	18800e0e 	bge	r3,r2,8008e0ec <_sungetc_r+0x80>
8008e0b4:	80c00017 	ldw	r3,0(r16)
8008e0b8:	9005883a 	mov	r2,r18
8008e0bc:	193fffc4 	addi	r4,r3,-1
8008e0c0:	81000015 	stw	r4,0(r16)
8008e0c4:	1c7fffc5 	stb	r17,-1(r3)
8008e0c8:	80c00117 	ldw	r3,4(r16)
8008e0cc:	18c00044 	addi	r3,r3,1
8008e0d0:	80c00115 	stw	r3,4(r16)
8008e0d4:	dfc00317 	ldw	ra,12(sp)
8008e0d8:	dc800217 	ldw	r18,8(sp)
8008e0dc:	dc400117 	ldw	r17,4(sp)
8008e0e0:	dc000017 	ldw	r16,0(sp)
8008e0e4:	dec00404 	addi	sp,sp,16
8008e0e8:	f800283a 	ret
8008e0ec:	300b883a 	mov	r5,r6
8008e0f0:	00915a40 	call	800915a4 <__submore>
8008e0f4:	103fef26 	beq	r2,zero,8008e0b4 <_sungetc_r+0x48>
8008e0f8:	00bfffc4 	movi	r2,-1
8008e0fc:	003ff506 	br	8008e0d4 <_sungetc_r+0x68>
8008e100:	30c00417 	ldw	r3,16(r6)
8008e104:	30800017 	ldw	r2,0(r6)
8008e108:	18000326 	beq	r3,zero,8008e118 <_sungetc_r+0xac>
8008e10c:	1880022e 	bgeu	r3,r2,8008e118 <_sungetc_r+0xac>
8008e110:	10ffffc3 	ldbu	r3,-1(r2)
8008e114:	90c01026 	beq	r18,r3,8008e158 <_sungetc_r+0xec>
8008e118:	31c00117 	ldw	r7,4(r6)
8008e11c:	30800e15 	stw	r2,56(r6)
8008e120:	008000c4 	movi	r2,3
8008e124:	31001004 	addi	r4,r6,64
8008e128:	30c01084 	addi	r3,r6,66
8008e12c:	30800d15 	stw	r2,52(r6)
8008e130:	00800044 	movi	r2,1
8008e134:	30800115 	stw	r2,4(r6)
8008e138:	31c00f15 	stw	r7,60(r6)
8008e13c:	31000c15 	stw	r4,48(r6)
8008e140:	31401085 	stb	r5,66(r6)
8008e144:	30c00015 	stw	r3,0(r6)
8008e148:	9005883a 	mov	r2,r18
8008e14c:	003fe106 	br	8008e0d4 <_sungetc_r+0x68>
8008e150:	00bfffc4 	movi	r2,-1
8008e154:	f800283a 	ret
8008e158:	30c00117 	ldw	r3,4(r6)
8008e15c:	10bfffc4 	addi	r2,r2,-1
8008e160:	30800015 	stw	r2,0(r6)
8008e164:	18800044 	addi	r2,r3,1
8008e168:	30800115 	stw	r2,4(r6)
8008e16c:	9005883a 	mov	r2,r18
8008e170:	003fd806 	br	8008e0d4 <_sungetc_r+0x68>

8008e174 <__ssrefill_r>:
8008e174:	defffe04 	addi	sp,sp,-8
8008e178:	dc000015 	stw	r16,0(sp)
8008e17c:	2821883a 	mov	r16,r5
8008e180:	29400c17 	ldw	r5,48(r5)
8008e184:	dfc00115 	stw	ra,4(sp)
8008e188:	28000e26 	beq	r5,zero,8008e1c4 <__ssrefill_r+0x50>
8008e18c:	80801004 	addi	r2,r16,64
8008e190:	28800126 	beq	r5,r2,8008e198 <__ssrefill_r+0x24>
8008e194:	00890780 	call	80089078 <_free_r>
8008e198:	80800f17 	ldw	r2,60(r16)
8008e19c:	80000c15 	stw	zero,48(r16)
8008e1a0:	80800115 	stw	r2,4(r16)
8008e1a4:	10000726 	beq	r2,zero,8008e1c4 <__ssrefill_r+0x50>
8008e1a8:	80c00e17 	ldw	r3,56(r16)
8008e1ac:	0005883a 	mov	r2,zero
8008e1b0:	80c00015 	stw	r3,0(r16)
8008e1b4:	dfc00117 	ldw	ra,4(sp)
8008e1b8:	dc000017 	ldw	r16,0(sp)
8008e1bc:	dec00204 	addi	sp,sp,8
8008e1c0:	f800283a 	ret
8008e1c4:	8080030b 	ldhu	r2,12(r16)
8008e1c8:	80c00417 	ldw	r3,16(r16)
8008e1cc:	80000115 	stw	zero,4(r16)
8008e1d0:	10800814 	ori	r2,r2,32
8008e1d4:	8080030d 	sth	r2,12(r16)
8008e1d8:	80c00015 	stw	r3,0(r16)
8008e1dc:	00bfffc4 	movi	r2,-1
8008e1e0:	003ff406 	br	8008e1b4 <__ssrefill_r+0x40>

8008e1e4 <_sfread_r>:
8008e1e4:	defff704 	addi	sp,sp,-36
8008e1e8:	dd800615 	stw	r22,24(sp)
8008e1ec:	39ad383a 	mul	r22,r7,r6
8008e1f0:	dc400115 	stw	r17,4(sp)
8008e1f4:	dfc00815 	stw	ra,32(sp)
8008e1f8:	ddc00715 	stw	r23,28(sp)
8008e1fc:	dd400515 	stw	r21,20(sp)
8008e200:	dd000415 	stw	r20,16(sp)
8008e204:	dcc00315 	stw	r19,12(sp)
8008e208:	dc800215 	stw	r18,8(sp)
8008e20c:	dc000015 	stw	r16,0(sp)
8008e210:	dc400917 	ldw	r17,36(sp)
8008e214:	b0002a26 	beq	r22,zero,8008e2c0 <_sfread_r+0xdc>
8008e218:	302f883a 	mov	r23,r6
8008e21c:	382b883a 	mov	r21,r7
8008e220:	2029883a 	mov	r20,r4
8008e224:	2827883a 	mov	r19,r5
8008e228:	b025883a 	mov	r18,r22
8008e22c:	00000b06 	br	8008e25c <_sfread_r+0x78>
8008e230:	0082da40 	call	80082da4 <memcpy>
8008e234:	88800017 	ldw	r2,0(r17)
8008e238:	9c27883a 	add	r19,r19,r16
8008e23c:	9425c83a 	sub	r18,r18,r16
8008e240:	1421883a 	add	r16,r2,r16
8008e244:	88000115 	stw	zero,4(r17)
8008e248:	880b883a 	mov	r5,r17
8008e24c:	8c000015 	stw	r16,0(r17)
8008e250:	a009883a 	mov	r4,r20
8008e254:	008e1740 	call	8008e174 <__ssrefill_r>
8008e258:	10001b1e 	bne	r2,zero,8008e2c8 <_sfread_r+0xe4>
8008e25c:	8c000117 	ldw	r16,4(r17)
8008e260:	9809883a 	mov	r4,r19
8008e264:	89400017 	ldw	r5,0(r17)
8008e268:	800d883a 	mov	r6,r16
8008e26c:	84bff036 	bltu	r16,r18,8008e230 <_sfread_r+0x4c>
8008e270:	900d883a 	mov	r6,r18
8008e274:	0082da40 	call	80082da4 <memcpy>
8008e278:	88c00117 	ldw	r3,4(r17)
8008e27c:	89000017 	ldw	r4,0(r17)
8008e280:	a805883a 	mov	r2,r21
8008e284:	1c87c83a 	sub	r3,r3,r18
8008e288:	24a5883a 	add	r18,r4,r18
8008e28c:	88c00115 	stw	r3,4(r17)
8008e290:	8c800015 	stw	r18,0(r17)
8008e294:	dfc00817 	ldw	ra,32(sp)
8008e298:	ddc00717 	ldw	r23,28(sp)
8008e29c:	dd800617 	ldw	r22,24(sp)
8008e2a0:	dd400517 	ldw	r21,20(sp)
8008e2a4:	dd000417 	ldw	r20,16(sp)
8008e2a8:	dcc00317 	ldw	r19,12(sp)
8008e2ac:	dc800217 	ldw	r18,8(sp)
8008e2b0:	dc400117 	ldw	r17,4(sp)
8008e2b4:	dc000017 	ldw	r16,0(sp)
8008e2b8:	dec00904 	addi	sp,sp,36
8008e2bc:	f800283a 	ret
8008e2c0:	0005883a 	mov	r2,zero
8008e2c4:	003ff306 	br	8008e294 <_sfread_r+0xb0>
8008e2c8:	b80b883a 	mov	r5,r23
8008e2cc:	b489c83a 	sub	r4,r22,r18
8008e2d0:	00823400 	call	80082340 <__udivsi3>
8008e2d4:	003fef06 	br	8008e294 <_sfread_r+0xb0>

8008e2d8 <__ssvfiscanf_r>:
8008e2d8:	2880030b 	ldhu	r2,12(r5)
8008e2dc:	deff9b04 	addi	sp,sp,-404
8008e2e0:	df006315 	stw	fp,396(sp)
8008e2e4:	dc405c15 	stw	r17,368(sp)
8008e2e8:	dfc06415 	stw	ra,400(sp)
8008e2ec:	ddc06215 	stw	r23,392(sp)
8008e2f0:	dd806115 	stw	r22,388(sp)
8008e2f4:	dd406015 	stw	r21,384(sp)
8008e2f8:	dd005f15 	stw	r20,380(sp)
8008e2fc:	dcc05e15 	stw	r19,376(sp)
8008e300:	dc805d15 	stw	r18,372(sp)
8008e304:	dc005b15 	stw	r16,364(sp)
8008e308:	10c8000c 	andi	r3,r2,8192
8008e30c:	d9c04f15 	stw	r7,316(sp)
8008e310:	2839883a 	mov	fp,r5
8008e314:	2023883a 	mov	r17,r4
8008e318:	1800061e 	bne	r3,zero,8008e334 <__ssvfiscanf_r+0x5c>
8008e31c:	29001917 	ldw	r4,100(r5)
8008e320:	00f7ffc4 	movi	r3,-8193
8008e324:	10880014 	ori	r2,r2,8192
8008e328:	20c6703a 	and	r3,r4,r3
8008e32c:	2880030d 	sth	r2,12(r5)
8008e330:	28c01915 	stw	r3,100(r5)
8008e334:	30800003 	ldbu	r2,0(r6)
8008e338:	dac04104 	addi	r11,sp,260
8008e33c:	0025883a 	mov	r18,zero
8008e340:	052002b4 	movhi	r20,32778
8008e344:	d8005215 	stw	zero,328(sp)
8008e348:	d8005015 	stw	zero,320(sp)
8008e34c:	d8005115 	stw	zero,324(sp)
8008e350:	dac04e15 	stw	r11,312(sp)
8008e354:	d8804d15 	stw	r2,308(sp)
8008e358:	e027883a 	mov	r19,fp
8008e35c:	a501c204 	addi	r20,r20,1800
8008e360:	9039883a 	mov	fp,r18
8008e364:	34800044 	addi	r18,r6,1
8008e368:	10001e26 	beq	r2,zero,8008e3e4 <__ssvfiscanf_r+0x10c>
8008e36c:	a1c00017 	ldw	r7,0(r20)
8008e370:	3887883a 	add	r3,r7,r2
8008e374:	18c00043 	ldbu	r3,1(r3)
8008e378:	18c0020c 	andi	r3,r3,8
8008e37c:	18001b26 	beq	r3,zero,8008e3ec <__ssvfiscanf_r+0x114>
8008e380:	98800117 	ldw	r2,4(r19)
8008e384:	00800e0e 	bge	zero,r2,8008e3c0 <__ssvfiscanf_r+0xe8>
8008e388:	98c00017 	ldw	r3,0(r19)
8008e38c:	a1000017 	ldw	r4,0(r20)
8008e390:	18800003 	ldbu	r2,0(r3)
8008e394:	2085883a 	add	r2,r4,r2
8008e398:	10800043 	ldbu	r2,1(r2)
8008e39c:	1080020c 	andi	r2,r2,8
8008e3a0:	10000b26 	beq	r2,zero,8008e3d0 <__ssvfiscanf_r+0xf8>
8008e3a4:	98800117 	ldw	r2,4(r19)
8008e3a8:	18c00044 	addi	r3,r3,1
8008e3ac:	98c00015 	stw	r3,0(r19)
8008e3b0:	10bfffc4 	addi	r2,r2,-1
8008e3b4:	98800115 	stw	r2,4(r19)
8008e3b8:	e7000044 	addi	fp,fp,1
8008e3bc:	00bff216 	blt	zero,r2,8008e388 <__ssvfiscanf_r+0xb0>
8008e3c0:	980b883a 	mov	r5,r19
8008e3c4:	8809883a 	mov	r4,r17
8008e3c8:	008e1740 	call	8008e174 <__ssrefill_r>
8008e3cc:	103fee26 	beq	r2,zero,8008e388 <__ssvfiscanf_r+0xb0>
8008e3d0:	900d883a 	mov	r6,r18
8008e3d4:	30800003 	ldbu	r2,0(r6)
8008e3d8:	34800044 	addi	r18,r6,1
8008e3dc:	d8804d15 	stw	r2,308(sp)
8008e3e0:	103fe21e 	bne	r2,zero,8008e36c <__ssvfiscanf_r+0x94>
8008e3e4:	d8805117 	ldw	r2,324(sp)
8008e3e8:	00009806 	br	8008e64c <__ssvfiscanf_r+0x374>
8008e3ec:	00c00944 	movi	r3,37
8008e3f0:	10c0871e 	bne	r2,r3,8008e610 <__ssvfiscanf_r+0x338>
8008e3f4:	30c00043 	ldbu	r3,1(r6)
8008e3f8:	0021883a 	mov	r16,zero
8008e3fc:	002f883a 	mov	r23,zero
8008e400:	01001e04 	movi	r4,120
8008e404:	01401b04 	movi	r5,108
8008e408:	95400044 	addi	r21,r18,1
8008e40c:	20c0e036 	bltu	r4,r3,8008e790 <__ssvfiscanf_r+0x4b8>
8008e410:	180490ba 	slli	r2,r3,2
8008e414:	01a00274 	movhi	r6,32777
8008e418:	31b90a04 	addi	r6,r6,-7128
8008e41c:	1185883a 	add	r2,r2,r6
8008e420:	10800017 	ldw	r2,0(r2)
8008e424:	1000683a 	jmp	r2
8008e428:	8008e648 	cmpgei	zero,r16,9113
8008e42c:	8008e790 	cmplti	zero,r16,9118
8008e430:	8008e790 	cmplti	zero,r16,9118
8008e434:	8008e790 	cmplti	zero,r16,9118
8008e438:	8008e790 	cmplti	zero,r16,9118
8008e43c:	8008e790 	cmplti	zero,r16,9118
8008e440:	8008e790 	cmplti	zero,r16,9118
8008e444:	8008e790 	cmplti	zero,r16,9118
8008e448:	8008e790 	cmplti	zero,r16,9118
8008e44c:	8008e790 	cmplti	zero,r16,9118
8008e450:	8008e790 	cmplti	zero,r16,9118
8008e454:	8008e790 	cmplti	zero,r16,9118
8008e458:	8008e790 	cmplti	zero,r16,9118
8008e45c:	8008e790 	cmplti	zero,r16,9118
8008e460:	8008e790 	cmplti	zero,r16,9118
8008e464:	8008e790 	cmplti	zero,r16,9118
8008e468:	8008e790 	cmplti	zero,r16,9118
8008e46c:	8008e790 	cmplti	zero,r16,9118
8008e470:	8008e790 	cmplti	zero,r16,9118
8008e474:	8008e790 	cmplti	zero,r16,9118
8008e478:	8008e790 	cmplti	zero,r16,9118
8008e47c:	8008e790 	cmplti	zero,r16,9118
8008e480:	8008e790 	cmplti	zero,r16,9118
8008e484:	8008e790 	cmplti	zero,r16,9118
8008e488:	8008e790 	cmplti	zero,r16,9118
8008e48c:	8008e790 	cmplti	zero,r16,9118
8008e490:	8008e790 	cmplti	zero,r16,9118
8008e494:	8008e790 	cmplti	zero,r16,9118
8008e498:	8008e790 	cmplti	zero,r16,9118
8008e49c:	8008e790 	cmplti	zero,r16,9118
8008e4a0:	8008e790 	cmplti	zero,r16,9118
8008e4a4:	8008e790 	cmplti	zero,r16,9118
8008e4a8:	8008e790 	cmplti	zero,r16,9118
8008e4ac:	8008e790 	cmplti	zero,r16,9118
8008e4b0:	8008e790 	cmplti	zero,r16,9118
8008e4b4:	8008e790 	cmplti	zero,r16,9118
8008e4b8:	8008e790 	cmplti	zero,r16,9118
8008e4bc:	8008e60c 	andi	zero,r16,9112
8008e4c0:	8008e790 	cmplti	zero,r16,9118
8008e4c4:	8008e790 	cmplti	zero,r16,9118
8008e4c8:	8008e790 	cmplti	zero,r16,9118
8008e4cc:	8008e790 	cmplti	zero,r16,9118
8008e4d0:	8008e9a0 	cmpeqi	zero,r16,9126
8008e4d4:	8008e790 	cmplti	zero,r16,9118
8008e4d8:	8008e790 	cmplti	zero,r16,9118
8008e4dc:	8008e790 	cmplti	zero,r16,9118
8008e4e0:	8008e790 	cmplti	zero,r16,9118
8008e4e4:	8008e790 	cmplti	zero,r16,9118
8008e4e8:	8008e928 	cmpgeui	zero,r16,9124
8008e4ec:	8008e928 	cmpgeui	zero,r16,9124
8008e4f0:	8008e928 	cmpgeui	zero,r16,9124
8008e4f4:	8008e928 	cmpgeui	zero,r16,9124
8008e4f8:	8008e928 	cmpgeui	zero,r16,9124
8008e4fc:	8008e928 	cmpgeui	zero,r16,9124
8008e500:	8008e928 	cmpgeui	zero,r16,9124
8008e504:	8008e928 	cmpgeui	zero,r16,9124
8008e508:	8008e928 	cmpgeui	zero,r16,9124
8008e50c:	8008e928 	cmpgeui	zero,r16,9124
8008e510:	8008e790 	cmplti	zero,r16,9118
8008e514:	8008e790 	cmplti	zero,r16,9118
8008e518:	8008e790 	cmplti	zero,r16,9118
8008e51c:	8008e790 	cmplti	zero,r16,9118
8008e520:	8008e790 	cmplti	zero,r16,9118
8008e524:	8008e790 	cmplti	zero,r16,9118
8008e528:	8008e790 	cmplti	zero,r16,9118
8008e52c:	8008e790 	cmplti	zero,r16,9118
8008e530:	8008e790 	cmplti	zero,r16,9118
8008e534:	8008e790 	cmplti	zero,r16,9118
8008e538:	8008e900 	call	88008e90 <__alt_data_end+0x7f0be90>
8008e53c:	8008e790 	cmplti	zero,r16,9118
8008e540:	8008e790 	cmplti	zero,r16,9118
8008e544:	8008e790 	cmplti	zero,r16,9118
8008e548:	8008e790 	cmplti	zero,r16,9118
8008e54c:	8008e790 	cmplti	zero,r16,9118
8008e550:	8008e790 	cmplti	zero,r16,9118
8008e554:	8008e790 	cmplti	zero,r16,9118
8008e558:	8008e968 	cmpgeui	zero,r16,9125
8008e55c:	8008e790 	cmplti	zero,r16,9118
8008e560:	8008e790 	cmplti	zero,r16,9118
8008e564:	8008e944 	addi	zero,r16,9125
8008e568:	8008e790 	cmplti	zero,r16,9118
8008e56c:	8008e790 	cmplti	zero,r16,9118
8008e570:	8008e790 	cmplti	zero,r16,9118
8008e574:	8008e790 	cmplti	zero,r16,9118
8008e578:	8008e790 	cmplti	zero,r16,9118
8008e57c:	8008e790 	cmplti	zero,r16,9118
8008e580:	8008e790 	cmplti	zero,r16,9118
8008e584:	8008e790 	cmplti	zero,r16,9118
8008e588:	8008e97c 	xorhi	zero,r16,9125
8008e58c:	8008e790 	cmplti	zero,r16,9118
8008e590:	8008e790 	cmplti	zero,r16,9118
8008e594:	8008e878 	rdprs	zero,r16,9121
8008e598:	8008e790 	cmplti	zero,r16,9118
8008e59c:	8008e790 	cmplti	zero,r16,9118
8008e5a0:	8008e790 	cmplti	zero,r16,9118
8008e5a4:	8008e790 	cmplti	zero,r16,9118
8008e5a8:	8008e790 	cmplti	zero,r16,9118
8008e5ac:	8008e790 	cmplti	zero,r16,9118
8008e5b0:	8008e790 	cmplti	zero,r16,9118
8008e5b4:	8008e800 	call	88008e80 <__alt_data_end+0x7f0be80>
8008e5b8:	8008e7dc 	xori	zero,r16,9119
8008e5bc:	8008e790 	cmplti	zero,r16,9118
8008e5c0:	8008e790 	cmplti	zero,r16,9118
8008e5c4:	8008e790 	cmplti	zero,r16,9118
8008e5c8:	8008e7c8 	cmpgei	zero,r16,9119
8008e5cc:	8008e9b4 	orhi	zero,r16,9126
8008e5d0:	8008e790 	cmplti	zero,r16,9118
8008e5d4:	8008e790 	cmplti	zero,r16,9118
8008e5d8:	8008e778 	rdprs	zero,r16,9117
8008e5dc:	8008e790 	cmplti	zero,r16,9118
8008e5e0:	8008e74c 	andi	zero,r16,9117
8008e5e4:	8008e728 	cmpgeui	zero,r16,9116
8008e5e8:	8008e700 	call	88008e70 <__alt_data_end+0x7f0be70>
8008e5ec:	8008e790 	cmplti	zero,r16,9118
8008e5f0:	8008e790 	cmplti	zero,r16,9118
8008e5f4:	8008e6f0 	cmpltui	zero,r16,9115
8008e5f8:	8008e790 	cmplti	zero,r16,9118
8008e5fc:	8008e67c 	xorhi	zero,r16,9113
8008e600:	8008e790 	cmplti	zero,r16,9118
8008e604:	8008e790 	cmplti	zero,r16,9118
8008e608:	8008e97c 	xorhi	zero,r16,9125
8008e60c:	a825883a 	mov	r18,r21
8008e610:	98800117 	ldw	r2,4(r19)
8008e614:	0081d20e 	bge	zero,r2,8008ed60 <__ssvfiscanf_r+0xa88>
8008e618:	98800017 	ldw	r2,0(r19)
8008e61c:	90ffffc3 	ldbu	r3,-1(r18)
8008e620:	11000003 	ldbu	r4,0(r2)
8008e624:	20ff6f1e 	bne	r4,r3,8008e3e4 <__ssvfiscanf_r+0x10c>
8008e628:	98c00117 	ldw	r3,4(r19)
8008e62c:	10800044 	addi	r2,r2,1
8008e630:	98800015 	stw	r2,0(r19)
8008e634:	18bfffc4 	addi	r2,r3,-1
8008e638:	98800115 	stw	r2,4(r19)
8008e63c:	e7000044 	addi	fp,fp,1
8008e640:	900d883a 	mov	r6,r18
8008e644:	003f6306 	br	8008e3d4 <__ssvfiscanf_r+0xfc>
8008e648:	00bfffc4 	movi	r2,-1
8008e64c:	dfc06417 	ldw	ra,400(sp)
8008e650:	df006317 	ldw	fp,396(sp)
8008e654:	ddc06217 	ldw	r23,392(sp)
8008e658:	dd806117 	ldw	r22,388(sp)
8008e65c:	dd406017 	ldw	r21,384(sp)
8008e660:	dd005f17 	ldw	r20,380(sp)
8008e664:	dcc05e17 	ldw	r19,376(sp)
8008e668:	dc805d17 	ldw	r18,372(sp)
8008e66c:	dc405c17 	ldw	r17,368(sp)
8008e670:	dc005b17 	ldw	r16,364(sp)
8008e674:	dec06504 	addi	sp,sp,404
8008e678:	f800283a 	ret
8008e67c:	98800117 	ldw	r2,4(r19)
8008e680:	0081e10e 	bge	zero,r2,8008ee08 <__ssvfiscanf_r+0xb30>
8008e684:	00a00274 	movhi	r2,32777
8008e688:	10b6cb04 	addi	r2,r2,-9428
8008e68c:	02c00284 	movi	r11,10
8008e690:	d8805215 	stw	r2,328(sp)
8008e694:	dac05015 	stw	r11,320(sp)
8008e698:	058000c4 	movi	r22,3
8008e69c:	98800017 	ldw	r2,0(r19)
8008e6a0:	00000206 	br	8008e6ac <__ssvfiscanf_r+0x3d4>
8008e6a4:	10800044 	addi	r2,r2,1
8008e6a8:	98800015 	stw	r2,0(r19)
8008e6ac:	11000003 	ldbu	r4,0(r2)
8008e6b0:	20c03fcc 	andi	r3,r4,255
8008e6b4:	38c7883a 	add	r3,r7,r3
8008e6b8:	18c00043 	ldbu	r3,1(r3)
8008e6bc:	1940020c 	andi	r5,r3,8
8008e6c0:	2801dd26 	beq	r5,zero,8008ee38 <__ssvfiscanf_r+0xb60>
8008e6c4:	98c00117 	ldw	r3,4(r19)
8008e6c8:	e7000044 	addi	fp,fp,1
8008e6cc:	18ffffc4 	addi	r3,r3,-1
8008e6d0:	98c00115 	stw	r3,4(r19)
8008e6d4:	00fff316 	blt	zero,r3,8008e6a4 <__ssvfiscanf_r+0x3cc>
8008e6d8:	980b883a 	mov	r5,r19
8008e6dc:	8809883a 	mov	r4,r17
8008e6e0:	008e1740 	call	8008e174 <__ssrefill_r>
8008e6e4:	1001591e 	bne	r2,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008e6e8:	a1c00017 	ldw	r7,0(r20)
8008e6ec:	003feb06 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008e6f0:	98800117 	ldw	r2,4(r19)
8008e6f4:	0081b80e 	bge	zero,r2,8008edd8 <__ssvfiscanf_r+0xb00>
8008e6f8:	05800084 	movi	r22,2
8008e6fc:	003fe706 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008e700:	98800117 	ldw	r2,4(r19)
8008e704:	84008814 	ori	r16,r16,544
8008e708:	00809f0e 	bge	zero,r2,8008e988 <__ssvfiscanf_r+0x6b0>
8008e70c:	00a00274 	movhi	r2,32777
8008e710:	10b6cb04 	addi	r2,r2,-9428
8008e714:	02c00404 	movi	r11,16
8008e718:	d8805215 	stw	r2,328(sp)
8008e71c:	dac05015 	stw	r11,320(sp)
8008e720:	058000c4 	movi	r22,3
8008e724:	003fdd06 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008e728:	98800117 	ldw	r2,4(r19)
8008e72c:	0080880e 	bge	zero,r2,8008e950 <__ssvfiscanf_r+0x678>
8008e730:	00a00274 	movhi	r2,32777
8008e734:	10b6cb04 	addi	r2,r2,-9428
8008e738:	02c00204 	movi	r11,8
8008e73c:	d8805215 	stw	r2,328(sp)
8008e740:	dac05015 	stw	r11,320(sp)
8008e744:	058000c4 	movi	r22,3
8008e748:	003fd406 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008e74c:	8080040c 	andi	r2,r16,16
8008e750:	1000d61e 	bne	r2,zero,8008eaac <__ssvfiscanf_r+0x7d4>
8008e754:	8080010c 	andi	r2,r16,4
8008e758:	10018b26 	beq	r2,zero,8008ed88 <__ssvfiscanf_r+0xab0>
8008e75c:	dac04f17 	ldw	r11,316(sp)
8008e760:	a825883a 	mov	r18,r21
8008e764:	58800017 	ldw	r2,0(r11)
8008e768:	5ac00104 	addi	r11,r11,4
8008e76c:	dac04f15 	stw	r11,316(sp)
8008e770:	1700000d 	sth	fp,0(r2)
8008e774:	003f1606 	br	8008e3d0 <__ssvfiscanf_r+0xf8>
8008e778:	90c00043 	ldbu	r3,1(r18)
8008e77c:	19417d26 	beq	r3,r5,8008ed74 <__ssvfiscanf_r+0xa9c>
8008e780:	a825883a 	mov	r18,r21
8008e784:	84000054 	ori	r16,r16,1
8008e788:	95400044 	addi	r21,r18,1
8008e78c:	20ff202e 	bgeu	r4,r3,8008e410 <__ssvfiscanf_r+0x138>
8008e790:	38c7883a 	add	r3,r7,r3
8008e794:	18800043 	ldbu	r2,1(r3)
8008e798:	00c00044 	movi	r3,1
8008e79c:	108000cc 	andi	r2,r2,3
8008e7a0:	10c16626 	beq	r2,r3,8008ed3c <__ssvfiscanf_r+0xa64>
8008e7a4:	98800117 	ldw	r2,4(r19)
8008e7a8:	0081670e 	bge	zero,r2,8008ed48 <__ssvfiscanf_r+0xa70>
8008e7ac:	00a00274 	movhi	r2,32777
8008e7b0:	10b57e04 	addi	r2,r2,-10760
8008e7b4:	02c00284 	movi	r11,10
8008e7b8:	d8805215 	stw	r2,328(sp)
8008e7bc:	dac05015 	stw	r11,320(sp)
8008e7c0:	058000c4 	movi	r22,3
8008e7c4:	003fb506 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008e7c8:	90800043 	ldbu	r2,1(r18)
8008e7cc:	84000114 	ori	r16,r16,4
8008e7d0:	a825883a 	mov	r18,r21
8008e7d4:	10c03fcc 	andi	r3,r2,255
8008e7d8:	003f0b06 	br	8008e408 <__ssvfiscanf_r+0x130>
8008e7dc:	98800117 	ldw	r2,4(r19)
8008e7e0:	0081590e 	bge	zero,r2,8008ed48 <__ssvfiscanf_r+0xa70>
8008e7e4:	02e00274 	movhi	r11,32777
8008e7e8:	5af57e04 	addi	r11,r11,-10760
8008e7ec:	dac05215 	stw	r11,328(sp)
8008e7f0:	02c00284 	movi	r11,10
8008e7f4:	dac05015 	stw	r11,320(sp)
8008e7f8:	058000c4 	movi	r22,3
8008e7fc:	003fa706 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008e800:	98800117 	ldw	r2,4(r19)
8008e804:	0081220e 	bge	zero,r2,8008ec90 <__ssvfiscanf_r+0x9b8>
8008e808:	b800011e 	bne	r23,zero,8008e810 <__ssvfiscanf_r+0x538>
8008e80c:	05c00044 	movi	r23,1
8008e810:	8080004c 	andi	r2,r16,1
8008e814:	10006f1e 	bne	r2,zero,8008e9d4 <__ssvfiscanf_r+0x6fc>
8008e818:	8400040c 	andi	r16,r16,16
8008e81c:	80013526 	beq	r16,zero,8008ecf4 <__ssvfiscanf_r+0xa1c>
8008e820:	0021883a 	mov	r16,zero
8008e824:	00000806 	br	8008e848 <__ssvfiscanf_r+0x570>
8008e828:	1887883a 	add	r3,r3,r2
8008e82c:	980b883a 	mov	r5,r19
8008e830:	8809883a 	mov	r4,r17
8008e834:	98c00015 	stw	r3,0(r19)
8008e838:	80a1883a 	add	r16,r16,r2
8008e83c:	b8afc83a 	sub	r23,r23,r2
8008e840:	008e1740 	call	8008e174 <__ssrefill_r>
8008e844:	1001291e 	bne	r2,zero,8008ecec <__ssvfiscanf_r+0xa14>
8008e848:	98800117 	ldw	r2,4(r19)
8008e84c:	98c00017 	ldw	r3,0(r19)
8008e850:	15fff516 	blt	r2,r23,8008e828 <__ssvfiscanf_r+0x550>
8008e854:	15c5c83a 	sub	r2,r2,r23
8008e858:	1dd5883a 	add	r10,r3,r23
8008e85c:	85e1883a 	add	r16,r16,r23
8008e860:	98800115 	stw	r2,4(r19)
8008e864:	9a800015 	stw	r10,0(r19)
8008e868:	a825883a 	mov	r18,r21
8008e86c:	e439883a 	add	fp,fp,r16
8008e870:	900d883a 	mov	r6,r18
8008e874:	003ed706 	br	8008e3d4 <__ssvfiscanf_r+0xfc>
8008e878:	a80b883a 	mov	r5,r21
8008e87c:	d9000104 	addi	r4,sp,4
8008e880:	008bc0c0 	call	8008bc0c <__sccl>
8008e884:	1025883a 	mov	r18,r2
8008e888:	98800117 	ldw	r2,4(r19)
8008e88c:	0081590e 	bge	zero,r2,8008edf4 <__ssvfiscanf_r+0xb1c>
8008e890:	99000017 	ldw	r4,0(r19)
8008e894:	20800003 	ldbu	r2,0(r4)
8008e898:	b8008726 	beq	r23,zero,8008eab8 <__ssvfiscanf_r+0x7e0>
8008e89c:	8400040c 	andi	r16,r16,16
8008e8a0:	80008826 	beq	r16,zero,8008eac4 <__ssvfiscanf_r+0x7ec>
8008e8a4:	b821883a 	mov	r16,r23
8008e8a8:	002b883a 	mov	r21,zero
8008e8ac:	00000106 	br	8008e8b4 <__ssvfiscanf_r+0x5dc>
8008e8b0:	20800003 	ldbu	r2,0(r4)
8008e8b4:	10803fcc 	andi	r2,r2,255
8008e8b8:	d8c00104 	addi	r3,sp,4
8008e8bc:	1885883a 	add	r2,r3,r2
8008e8c0:	10800007 	ldb	r2,0(r2)
8008e8c4:	10010726 	beq	r2,zero,8008ece4 <__ssvfiscanf_r+0xa0c>
8008e8c8:	98800117 	ldw	r2,4(r19)
8008e8cc:	21000044 	addi	r4,r4,1
8008e8d0:	ad400044 	addi	r21,r21,1
8008e8d4:	10bfffc4 	addi	r2,r2,-1
8008e8d8:	98800115 	stw	r2,4(r19)
8008e8dc:	99000015 	stw	r4,0(r19)
8008e8e0:	adc0e226 	beq	r21,r23,8008ec6c <__ssvfiscanf_r+0x994>
8008e8e4:	00bff216 	blt	zero,r2,8008e8b0 <__ssvfiscanf_r+0x5d8>
8008e8e8:	980b883a 	mov	r5,r19
8008e8ec:	8809883a 	mov	r4,r17
8008e8f0:	008e1740 	call	8008e174 <__ssrefill_r>
8008e8f4:	1000dc1e 	bne	r2,zero,8008ec68 <__ssvfiscanf_r+0x990>
8008e8f8:	99000017 	ldw	r4,0(r19)
8008e8fc:	003fec06 	br	8008e8b0 <__ssvfiscanf_r+0x5d8>
8008e900:	98800117 	ldw	r2,4(r19)
8008e904:	84000054 	ori	r16,r16,1
8008e908:	00810f0e 	bge	zero,r2,8008ed48 <__ssvfiscanf_r+0xa70>
8008e90c:	00e00274 	movhi	r3,32777
8008e910:	18f57e04 	addi	r3,r3,-10760
8008e914:	02c00284 	movi	r11,10
8008e918:	d8c05215 	stw	r3,328(sp)
8008e91c:	dac05015 	stw	r11,320(sp)
8008e920:	058000c4 	movi	r22,3
8008e924:	003f5d06 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008e928:	bdc002a4 	muli	r23,r23,10
8008e92c:	90800043 	ldbu	r2,1(r18)
8008e930:	a825883a 	mov	r18,r21
8008e934:	b8ef883a 	add	r23,r23,r3
8008e938:	bdfff404 	addi	r23,r23,-48
8008e93c:	10c03fcc 	andi	r3,r2,255
8008e940:	003eb106 	br	8008e408 <__ssvfiscanf_r+0x130>
8008e944:	98800117 	ldw	r2,4(r19)
8008e948:	84000054 	ori	r16,r16,1
8008e94c:	00bf7816 	blt	zero,r2,8008e730 <__ssvfiscanf_r+0x458>
8008e950:	980b883a 	mov	r5,r19
8008e954:	8809883a 	mov	r4,r17
8008e958:	008e1740 	call	8008e174 <__ssrefill_r>
8008e95c:	1000bb1e 	bne	r2,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008e960:	a1c00017 	ldw	r7,0(r20)
8008e964:	003f7206 	br	8008e730 <__ssvfiscanf_r+0x458>
8008e968:	90800043 	ldbu	r2,1(r18)
8008e96c:	84000094 	ori	r16,r16,2
8008e970:	a825883a 	mov	r18,r21
8008e974:	10c03fcc 	andi	r3,r2,255
8008e978:	003ea306 	br	8008e408 <__ssvfiscanf_r+0x130>
8008e97c:	98800117 	ldw	r2,4(r19)
8008e980:	84008014 	ori	r16,r16,512
8008e984:	00bf6116 	blt	zero,r2,8008e70c <__ssvfiscanf_r+0x434>
8008e988:	980b883a 	mov	r5,r19
8008e98c:	8809883a 	mov	r4,r17
8008e990:	008e1740 	call	8008e174 <__ssrefill_r>
8008e994:	1000ad1e 	bne	r2,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008e998:	a1c00017 	ldw	r7,0(r20)
8008e99c:	003f5b06 	br	8008e70c <__ssvfiscanf_r+0x434>
8008e9a0:	90800043 	ldbu	r2,1(r18)
8008e9a4:	84000414 	ori	r16,r16,16
8008e9a8:	a825883a 	mov	r18,r21
8008e9ac:	10c03fcc 	andi	r3,r2,255
8008e9b0:	003e9506 	br	8008e408 <__ssvfiscanf_r+0x130>
8008e9b4:	98800117 	ldw	r2,4(r19)
8008e9b8:	0081190e 	bge	zero,r2,8008ee20 <__ssvfiscanf_r+0xb48>
8008e9bc:	00a00274 	movhi	r2,32777
8008e9c0:	10b57e04 	addi	r2,r2,-10760
8008e9c4:	d8805215 	stw	r2,328(sp)
8008e9c8:	d8005015 	stw	zero,320(sp)
8008e9cc:	058000c4 	movi	r22,3
8008e9d0:	003f3206 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008e9d4:	d8c04b04 	addi	r3,sp,300
8008e9d8:	8400040c 	andi	r16,r16,16
8008e9dc:	01800204 	movi	r6,8
8008e9e0:	000b883a 	mov	r5,zero
8008e9e4:	1809883a 	mov	r4,r3
8008e9e8:	dc005415 	stw	r16,336(sp)
8008e9ec:	d8c05315 	stw	r3,332(sp)
8008e9f0:	008a1580 	call	8008a158 <memset>
8008e9f4:	dc005417 	ldw	r16,336(sp)
8008e9f8:	8000a026 	beq	r16,zero,8008ec7c <__ssvfiscanf_r+0x9a4>
8008e9fc:	002d883a 	mov	r22,zero
8008ea00:	0021883a 	mov	r16,zero
8008ea04:	0089a840 	call	80089a84 <__locale_mb_cur_max>
8008ea08:	14009026 	beq	r2,r16,8008ec4c <__ssvfiscanf_r+0x974>
8008ea0c:	98800017 	ldw	r2,0(r19)
8008ea10:	98c00117 	ldw	r3,4(r19)
8008ea14:	dac05317 	ldw	r11,332(sp)
8008ea18:	12000003 	ldbu	r8,0(r2)
8008ea1c:	18ffffc4 	addi	r3,r3,-1
8008ea20:	10800044 	addi	r2,r2,1
8008ea24:	d9004104 	addi	r4,sp,260
8008ea28:	98c00115 	stw	r3,4(r19)
8008ea2c:	98800015 	stw	r2,0(r19)
8008ea30:	84800044 	addi	r18,r16,1
8008ea34:	dac00015 	stw	r11,0(sp)
8008ea38:	2421883a 	add	r16,r4,r16
8008ea3c:	200d883a 	mov	r6,r4
8008ea40:	900f883a 	mov	r7,r18
8008ea44:	b00b883a 	mov	r5,r22
8008ea48:	8809883a 	mov	r4,r17
8008ea4c:	82000005 	stb	r8,0(r16)
8008ea50:	0089cf40 	call	80089cf4 <_mbrtowc_r>
8008ea54:	00ffffc4 	movi	r3,-1
8008ea58:	10c07c26 	beq	r2,r3,8008ec4c <__ssvfiscanf_r+0x974>
8008ea5c:	1000911e 	bne	r2,zero,8008eca4 <__ssvfiscanf_r+0x9cc>
8008ea60:	dac05417 	ldw	r11,336(sp)
8008ea64:	5800951e 	bne	r11,zero,8008ecbc <__ssvfiscanf_r+0x9e4>
8008ea68:	b0000015 	stw	zero,0(r22)
8008ea6c:	e4b9883a 	add	fp,fp,r18
8008ea70:	b8ef883a 	add	r23,r23,r3
8008ea74:	b5800104 	addi	r22,r22,4
8008ea78:	98800117 	ldw	r2,4(r19)
8008ea7c:	0021883a 	mov	r16,zero
8008ea80:	00807c16 	blt	zero,r2,8008ec74 <__ssvfiscanf_r+0x99c>
8008ea84:	980b883a 	mov	r5,r19
8008ea88:	8809883a 	mov	r4,r17
8008ea8c:	008e1740 	call	8008e174 <__ssrefill_r>
8008ea90:	10007826 	beq	r2,zero,8008ec74 <__ssvfiscanf_r+0x99c>
8008ea94:	80006d1e 	bne	r16,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008ea98:	d8c05417 	ldw	r3,336(sp)
8008ea9c:	1800031e 	bne	r3,zero,8008eaac <__ssvfiscanf_r+0x7d4>
8008eaa0:	dac05117 	ldw	r11,324(sp)
8008eaa4:	5ac00044 	addi	r11,r11,1
8008eaa8:	dac05115 	stw	r11,324(sp)
8008eaac:	a825883a 	mov	r18,r21
8008eab0:	900d883a 	mov	r6,r18
8008eab4:	003e4706 	br	8008e3d4 <__ssvfiscanf_r+0xfc>
8008eab8:	8400040c 	andi	r16,r16,16
8008eabc:	05ffffc4 	movi	r23,-1
8008eac0:	803f781e 	bne	r16,zero,8008e8a4 <__ssvfiscanf_r+0x5cc>
8008eac4:	dac04f17 	ldw	r11,316(sp)
8008eac8:	babfffc4 	addi	r10,r23,-1
8008eacc:	5d400017 	ldw	r21,0(r11)
8008ead0:	5c000104 	addi	r16,r11,4
8008ead4:	a807883a 	mov	r3,r21
8008ead8:	aaaf883a 	add	r23,r21,r10
8008eadc:	00000306 	br	8008eaec <__ssvfiscanf_r+0x814>
8008eae0:	99000017 	ldw	r4,0(r19)
8008eae4:	b007883a 	mov	r3,r22
8008eae8:	20800003 	ldbu	r2,0(r4)
8008eaec:	10803fcc 	andi	r2,r2,255
8008eaf0:	d9400104 	addi	r5,sp,4
8008eaf4:	2885883a 	add	r2,r5,r2
8008eaf8:	10800007 	ldb	r2,0(r2)
8008eafc:	10007726 	beq	r2,zero,8008ecdc <__ssvfiscanf_r+0xa04>
8008eb00:	98800117 	ldw	r2,4(r19)
8008eb04:	21400044 	addi	r5,r4,1
8008eb08:	99400015 	stw	r5,0(r19)
8008eb0c:	10bfffc4 	addi	r2,r2,-1
8008eb10:	98800115 	stw	r2,4(r19)
8008eb14:	20800003 	ldbu	r2,0(r4)
8008eb18:	1d800044 	addi	r22,r3,1
8008eb1c:	18800005 	stb	r2,0(r3)
8008eb20:	1dc00726 	beq	r3,r23,8008eb40 <__ssvfiscanf_r+0x868>
8008eb24:	98800117 	ldw	r2,4(r19)
8008eb28:	00bfed16 	blt	zero,r2,8008eae0 <__ssvfiscanf_r+0x808>
8008eb2c:	980b883a 	mov	r5,r19
8008eb30:	8809883a 	mov	r4,r17
8008eb34:	008e1740 	call	8008e174 <__ssrefill_r>
8008eb38:	103fe926 	beq	r2,zero,8008eae0 <__ssvfiscanf_r+0x808>
8008eb3c:	ad804326 	beq	r21,r22,8008ec4c <__ssvfiscanf_r+0x974>
8008eb40:	b56bc83a 	sub	r21,r22,r21
8008eb44:	a83e2726 	beq	r21,zero,8008e3e4 <__ssvfiscanf_r+0x10c>
8008eb48:	dac05117 	ldw	r11,324(sp)
8008eb4c:	b0000005 	stb	zero,0(r22)
8008eb50:	dc004f15 	stw	r16,316(sp)
8008eb54:	5ac00044 	addi	r11,r11,1
8008eb58:	dac05115 	stw	r11,324(sp)
8008eb5c:	e579883a 	add	fp,fp,r21
8008eb60:	900d883a 	mov	r6,r18
8008eb64:	003e1b06 	br	8008e3d4 <__ssvfiscanf_r+0xfc>
8008eb68:	d8c04b04 	addi	r3,sp,300
8008eb6c:	8400040c 	andi	r16,r16,16
8008eb70:	01800204 	movi	r6,8
8008eb74:	000b883a 	mov	r5,zero
8008eb78:	1809883a 	mov	r4,r3
8008eb7c:	d8c05315 	stw	r3,332(sp)
8008eb80:	008a1580 	call	8008a158 <memset>
8008eb84:	8001e91e 	bne	r16,zero,8008f32c <__ssvfiscanf_r+0x1054>
8008eb88:	dac04f17 	ldw	r11,316(sp)
8008eb8c:	5d800017 	ldw	r22,0(r11)
8008eb90:	5ac00104 	addi	r11,r11,4
8008eb94:	dac04f15 	stw	r11,316(sp)
8008eb98:	000d883a 	mov	r6,zero
8008eb9c:	3025883a 	mov	r18,r6
8008eba0:	98800017 	ldw	r2,0(r19)
8008eba4:	a0c00017 	ldw	r3,0(r20)
8008eba8:	10800003 	ldbu	r2,0(r2)
8008ebac:	1885883a 	add	r2,r3,r2
8008ebb0:	10800043 	ldbu	r2,1(r2)
8008ebb4:	1080020c 	andi	r2,r2,8
8008ebb8:	1001cc1e 	bne	r2,zero,8008f2ec <__ssvfiscanf_r+0x1014>
8008ebbc:	b801cb26 	beq	r23,zero,8008f2ec <__ssvfiscanf_r+0x1014>
8008ebc0:	0089a840 	call	80089a84 <__locale_mb_cur_max>
8008ebc4:	90802126 	beq	r18,r2,8008ec4c <__ssvfiscanf_r+0x974>
8008ebc8:	98800017 	ldw	r2,0(r19)
8008ebcc:	99000117 	ldw	r4,4(r19)
8008ebd0:	dac05317 	ldw	r11,332(sp)
8008ebd4:	12000003 	ldbu	r8,0(r2)
8008ebd8:	213fffc4 	addi	r4,r4,-1
8008ebdc:	10800044 	addi	r2,r2,1
8008ebe0:	99000115 	stw	r4,4(r19)
8008ebe4:	d9404104 	addi	r5,sp,260
8008ebe8:	98800015 	stw	r2,0(r19)
8008ebec:	90c00044 	addi	r3,r18,1
8008ebf0:	dac00015 	stw	r11,0(sp)
8008ebf4:	2ca5883a 	add	r18,r5,r18
8008ebf8:	180f883a 	mov	r7,r3
8008ebfc:	280d883a 	mov	r6,r5
8008ec00:	8809883a 	mov	r4,r17
8008ec04:	92000005 	stb	r8,0(r18)
8008ec08:	b00b883a 	mov	r5,r22
8008ec0c:	d8c05a15 	stw	r3,360(sp)
8008ec10:	0089cf40 	call	80089cf4 <_mbrtowc_r>
8008ec14:	013fffc4 	movi	r4,-1
8008ec18:	d8c05a17 	ldw	r3,360(sp)
8008ec1c:	11000b26 	beq	r2,r4,8008ec4c <__ssvfiscanf_r+0x974>
8008ec20:	1001a026 	beq	r2,zero,8008f2a4 <__ssvfiscanf_r+0xfcc>
8008ec24:	017fff84 	movi	r5,-2
8008ec28:	1825883a 	mov	r18,r3
8008ec2c:	1141e31e 	bne	r2,r5,8008f3bc <__ssvfiscanf_r+0x10e4>
8008ec30:	98800117 	ldw	r2,4(r19)
8008ec34:	00bfda16 	blt	zero,r2,8008eba0 <__ssvfiscanf_r+0x8c8>
8008ec38:	980b883a 	mov	r5,r19
8008ec3c:	8809883a 	mov	r4,r17
8008ec40:	008e1740 	call	8008e174 <__ssrefill_r>
8008ec44:	103fd626 	beq	r2,zero,8008eba0 <__ssvfiscanf_r+0x8c8>
8008ec48:	9001a826 	beq	r18,zero,8008f2ec <__ssvfiscanf_r+0x1014>
8008ec4c:	dac05117 	ldw	r11,324(sp)
8008ec50:	583e7d26 	beq	r11,zero,8008e648 <__ssvfiscanf_r+0x370>
8008ec54:	9880030b 	ldhu	r2,12(r19)
8008ec58:	1080100c 	andi	r2,r2,64
8008ec5c:	103e7a1e 	bne	r2,zero,8008e648 <__ssvfiscanf_r+0x370>
8008ec60:	5805883a 	mov	r2,r11
8008ec64:	003e7906 	br	8008e64c <__ssvfiscanf_r+0x374>
8008ec68:	a821883a 	mov	r16,r21
8008ec6c:	802b883a 	mov	r21,r16
8008ec70:	003fba06 	br	8008eb5c <__ssvfiscanf_r+0x884>
8008ec74:	b83f631e 	bne	r23,zero,8008ea04 <__ssvfiscanf_r+0x72c>
8008ec78:	003f8706 	br	8008ea98 <__ssvfiscanf_r+0x7c0>
8008ec7c:	dac04f17 	ldw	r11,316(sp)
8008ec80:	5d800017 	ldw	r22,0(r11)
8008ec84:	5ac00104 	addi	r11,r11,4
8008ec88:	dac04f15 	stw	r11,316(sp)
8008ec8c:	003f5c06 	br	8008ea00 <__ssvfiscanf_r+0x728>
8008ec90:	980b883a 	mov	r5,r19
8008ec94:	8809883a 	mov	r4,r17
8008ec98:	008e1740 	call	8008e174 <__ssrefill_r>
8008ec9c:	103eda26 	beq	r2,zero,8008e808 <__ssvfiscanf_r+0x530>
8008eca0:	003fea06 	br	8008ec4c <__ssvfiscanf_r+0x974>
8008eca4:	00ffff84 	movi	r3,-2
8008eca8:	10c0071e 	bne	r2,r3,8008ecc8 <__ssvfiscanf_r+0x9f0>
8008ecac:	98800117 	ldw	r2,4(r19)
8008ecb0:	9021883a 	mov	r16,r18
8008ecb4:	00bf5316 	blt	zero,r2,8008ea04 <__ssvfiscanf_r+0x72c>
8008ecb8:	003f7206 	br	8008ea84 <__ssvfiscanf_r+0x7ac>
8008ecbc:	e4b9883a 	add	fp,fp,r18
8008ecc0:	bdffffc4 	addi	r23,r23,-1
8008ecc4:	003f6c06 	br	8008ea78 <__ssvfiscanf_r+0x7a0>
8008ecc8:	dac05417 	ldw	r11,336(sp)
8008eccc:	e4b9883a 	add	fp,fp,r18
8008ecd0:	bdffffc4 	addi	r23,r23,-1
8008ecd4:	583f6726 	beq	r11,zero,8008ea74 <__ssvfiscanf_r+0x79c>
8008ecd8:	003f6706 	br	8008ea78 <__ssvfiscanf_r+0x7a0>
8008ecdc:	182d883a 	mov	r22,r3
8008ece0:	003f9706 	br	8008eb40 <__ssvfiscanf_r+0x868>
8008ece4:	a83f9d1e 	bne	r21,zero,8008eb5c <__ssvfiscanf_r+0x884>
8008ece8:	003dbe06 	br	8008e3e4 <__ssvfiscanf_r+0x10c>
8008ecec:	803ede1e 	bne	r16,zero,8008e868 <__ssvfiscanf_r+0x590>
8008ecf0:	003fd606 	br	8008ec4c <__ssvfiscanf_r+0x974>
8008ecf4:	dac04f17 	ldw	r11,316(sp)
8008ecf8:	dcc00015 	stw	r19,0(sp)
8008ecfc:	b80f883a 	mov	r7,r23
8008ed00:	59400017 	ldw	r5,0(r11)
8008ed04:	01800044 	movi	r6,1
8008ed08:	8809883a 	mov	r4,r17
8008ed0c:	008e1e40 	call	8008e1e4 <_sfread_r>
8008ed10:	dac04f17 	ldw	r11,316(sp)
8008ed14:	58c00104 	addi	r3,r11,4
8008ed18:	103fcc26 	beq	r2,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008ed1c:	dac05117 	ldw	r11,324(sp)
8008ed20:	a825883a 	mov	r18,r21
8008ed24:	e0b9883a 	add	fp,fp,r2
8008ed28:	5ac00044 	addi	r11,r11,1
8008ed2c:	dac05115 	stw	r11,324(sp)
8008ed30:	d8c04f15 	stw	r3,316(sp)
8008ed34:	900d883a 	mov	r6,r18
8008ed38:	003da606 	br	8008e3d4 <__ssvfiscanf_r+0xfc>
8008ed3c:	98800117 	ldw	r2,4(r19)
8008ed40:	80e0b03a 	or	r16,r16,r3
8008ed44:	00be9916 	blt	zero,r2,8008e7ac <__ssvfiscanf_r+0x4d4>
8008ed48:	980b883a 	mov	r5,r19
8008ed4c:	8809883a 	mov	r4,r17
8008ed50:	008e1740 	call	8008e174 <__ssrefill_r>
8008ed54:	103fbd1e 	bne	r2,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008ed58:	a1c00017 	ldw	r7,0(r20)
8008ed5c:	003e9306 	br	8008e7ac <__ssvfiscanf_r+0x4d4>
8008ed60:	980b883a 	mov	r5,r19
8008ed64:	8809883a 	mov	r4,r17
8008ed68:	008e1740 	call	8008e174 <__ssrefill_r>
8008ed6c:	103e2a26 	beq	r2,zero,8008e618 <__ssvfiscanf_r+0x340>
8008ed70:	003fb606 	br	8008ec4c <__ssvfiscanf_r+0x974>
8008ed74:	90800083 	ldbu	r2,2(r18)
8008ed78:	84000094 	ori	r16,r16,2
8008ed7c:	94800084 	addi	r18,r18,2
8008ed80:	10c03fcc 	andi	r3,r2,255
8008ed84:	003da006 	br	8008e408 <__ssvfiscanf_r+0x130>
8008ed88:	8080004c 	andi	r2,r16,1
8008ed8c:	10000b1e 	bne	r2,zero,8008edbc <__ssvfiscanf_r+0xae4>
8008ed90:	8400008c 	andi	r16,r16,2
8008ed94:	80000926 	beq	r16,zero,8008edbc <__ssvfiscanf_r+0xae4>
8008ed98:	dac04f17 	ldw	r11,316(sp)
8008ed9c:	e007d7fa 	srai	r3,fp,31
8008eda0:	a825883a 	mov	r18,r21
8008eda4:	58800017 	ldw	r2,0(r11)
8008eda8:	5ac00104 	addi	r11,r11,4
8008edac:	dac04f15 	stw	r11,316(sp)
8008edb0:	17000015 	stw	fp,0(r2)
8008edb4:	10c00115 	stw	r3,4(r2)
8008edb8:	003d8506 	br	8008e3d0 <__ssvfiscanf_r+0xf8>
8008edbc:	dac04f17 	ldw	r11,316(sp)
8008edc0:	a825883a 	mov	r18,r21
8008edc4:	58800017 	ldw	r2,0(r11)
8008edc8:	5ac00104 	addi	r11,r11,4
8008edcc:	dac04f15 	stw	r11,316(sp)
8008edd0:	17000015 	stw	fp,0(r2)
8008edd4:	003d7e06 	br	8008e3d0 <__ssvfiscanf_r+0xf8>
8008edd8:	980b883a 	mov	r5,r19
8008eddc:	8809883a 	mov	r4,r17
8008ede0:	008e1740 	call	8008e174 <__ssrefill_r>
8008ede4:	103f991e 	bne	r2,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008ede8:	a1c00017 	ldw	r7,0(r20)
8008edec:	05800084 	movi	r22,2
8008edf0:	003e2a06 	br	8008e69c <__ssvfiscanf_r+0x3c4>
8008edf4:	980b883a 	mov	r5,r19
8008edf8:	8809883a 	mov	r4,r17
8008edfc:	008e1740 	call	8008e174 <__ssrefill_r>
8008ee00:	103ea326 	beq	r2,zero,8008e890 <__ssvfiscanf_r+0x5b8>
8008ee04:	003f9106 	br	8008ec4c <__ssvfiscanf_r+0x974>
8008ee08:	980b883a 	mov	r5,r19
8008ee0c:	8809883a 	mov	r4,r17
8008ee10:	008e1740 	call	8008e174 <__ssrefill_r>
8008ee14:	103f8d1e 	bne	r2,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008ee18:	a1c00017 	ldw	r7,0(r20)
8008ee1c:	003e1906 	br	8008e684 <__ssvfiscanf_r+0x3ac>
8008ee20:	980b883a 	mov	r5,r19
8008ee24:	8809883a 	mov	r4,r17
8008ee28:	008e1740 	call	8008e174 <__ssrefill_r>
8008ee2c:	103f871e 	bne	r2,zero,8008ec4c <__ssvfiscanf_r+0x974>
8008ee30:	a1c00017 	ldw	r7,0(r20)
8008ee34:	003ee106 	br	8008e9bc <__ssvfiscanf_r+0x6e4>
8008ee38:	014000c4 	movi	r5,3
8008ee3c:	b140ac1e 	bne	r22,r5,8008f0f0 <__ssvfiscanf_r+0xe18>
8008ee40:	b8ffffc4 	addi	r3,r23,-1
8008ee44:	01400984 	movi	r5,38
8008ee48:	28c0d62e 	bgeu	r5,r3,8008f1a4 <__ssvfiscanf_r+0xecc>
8008ee4c:	b9bff644 	addi	r6,r23,-39
8008ee50:	05c009c4 	movi	r23,39
8008ee54:	85836014 	ori	r22,r16,3456
8008ee58:	0021883a 	mov	r16,zero
8008ee5c:	a815883a 	mov	r10,r21
8008ee60:	802b883a 	mov	r21,r16
8008ee64:	dc005017 	ldw	r16,320(sp)
8008ee68:	dc804104 	addi	r18,sp,260
8008ee6c:	02401344 	movi	r9,77
8008ee70:	01c08004 	movi	r7,512
8008ee74:	00ff7fc4 	movi	r3,-513
8008ee78:	023fdfc4 	movi	r8,-129
8008ee7c:	217ff544 	addi	r5,r4,-43
8008ee80:	29403fcc 	andi	r5,r5,255
8008ee84:	49408836 	bltu	r9,r5,8008f0a8 <__ssvfiscanf_r+0xdd0>
8008ee88:	280a90ba 	slli	r5,r5,2
8008ee8c:	02e00274 	movhi	r11,32777
8008ee90:	5afba804 	addi	r11,r11,-4448
8008ee94:	2acb883a 	add	r5,r5,r11
8008ee98:	29400017 	ldw	r5,0(r5)
8008ee9c:	2800683a 	jmp	r5
8008eea0:	8008f034 	orhi	zero,r16,9152
8008eea4:	8008f0a8 	cmpgeui	zero,r16,9154
8008eea8:	8008f034 	orhi	zero,r16,9152
8008eeac:	8008f0a8 	cmpgeui	zero,r16,9154
8008eeb0:	8008f0a8 	cmpgeui	zero,r16,9154
8008eeb4:	8008f064 	muli	zero,r16,9153
8008eeb8:	8008f044 	addi	zero,r16,9153
8008eebc:	8008f044 	addi	zero,r16,9153
8008eec0:	8008f044 	addi	zero,r16,9153
8008eec4:	8008f044 	addi	zero,r16,9153
8008eec8:	8008f044 	addi	zero,r16,9153
8008eecc:	8008f044 	addi	zero,r16,9153
8008eed0:	8008f044 	addi	zero,r16,9153
8008eed4:	8008f08c 	andi	zero,r16,9154
8008eed8:	8008f08c 	andi	zero,r16,9154
8008eedc:	8008f0a8 	cmpgeui	zero,r16,9154
8008eee0:	8008f0a8 	cmpgeui	zero,r16,9154
8008eee4:	8008f0a8 	cmpgeui	zero,r16,9154
8008eee8:	8008f0a8 	cmpgeui	zero,r16,9154
8008eeec:	8008f0a8 	cmpgeui	zero,r16,9154
8008eef0:	8008f0a8 	cmpgeui	zero,r16,9154
8008eef4:	8008f0a8 	cmpgeui	zero,r16,9154
8008eef8:	8008f020 	cmpeqi	zero,r16,9152
8008eefc:	8008f020 	cmpeqi	zero,r16,9152
8008ef00:	8008f020 	cmpeqi	zero,r16,9152
8008ef04:	8008f020 	cmpeqi	zero,r16,9152
8008ef08:	8008f020 	cmpeqi	zero,r16,9152
8008ef0c:	8008f020 	cmpeqi	zero,r16,9152
8008ef10:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef14:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef18:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef1c:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef20:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef24:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef28:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef2c:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef30:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef34:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef38:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef3c:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef40:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef44:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef48:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef4c:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef50:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef54:	8008efd8 	cmpnei	zero,r16,9151
8008ef58:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef5c:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef60:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef64:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef68:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef6c:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef70:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef74:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef78:	8008f020 	cmpeqi	zero,r16,9152
8008ef7c:	8008f020 	cmpeqi	zero,r16,9152
8008ef80:	8008f020 	cmpeqi	zero,r16,9152
8008ef84:	8008f020 	cmpeqi	zero,r16,9152
8008ef88:	8008f020 	cmpeqi	zero,r16,9152
8008ef8c:	8008f020 	cmpeqi	zero,r16,9152
8008ef90:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef94:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef98:	8008f0a8 	cmpgeui	zero,r16,9154
8008ef9c:	8008f0a8 	cmpgeui	zero,r16,9154
8008efa0:	8008f0a8 	cmpgeui	zero,r16,9154
8008efa4:	8008f0a8 	cmpgeui	zero,r16,9154
8008efa8:	8008f0a8 	cmpgeui	zero,r16,9154
8008efac:	8008f0a8 	cmpgeui	zero,r16,9154
8008efb0:	8008f0a8 	cmpgeui	zero,r16,9154
8008efb4:	8008f0a8 	cmpgeui	zero,r16,9154
8008efb8:	8008f0a8 	cmpgeui	zero,r16,9154
8008efbc:	8008f0a8 	cmpgeui	zero,r16,9154
8008efc0:	8008f0a8 	cmpgeui	zero,r16,9154
8008efc4:	8008f0a8 	cmpgeui	zero,r16,9154
8008efc8:	8008f0a8 	cmpgeui	zero,r16,9154
8008efcc:	8008f0a8 	cmpgeui	zero,r16,9154
8008efd0:	8008f0a8 	cmpgeui	zero,r16,9154
8008efd4:	8008efd8 	cmpnei	zero,r16,9151
8008efd8:	b141800c 	andi	r5,r22,1536
8008efdc:	29c0321e 	bne	r5,r7,8008f0a8 <__ssvfiscanf_r+0xdd0>
8008efe0:	b0ec703a 	and	r22,r22,r3
8008efe4:	b5814014 	ori	r22,r22,1280
8008efe8:	04000404 	movi	r16,16
8008efec:	91000005 	stb	r4,0(r18)
8008eff0:	94800044 	addi	r18,r18,1
8008eff4:	99000117 	ldw	r4,4(r19)
8008eff8:	213fffc4 	addi	r4,r4,-1
8008effc:	99000115 	stw	r4,4(r19)
8008f000:	0100570e 	bge	zero,r4,8008f160 <__ssvfiscanf_r+0xe88>
8008f004:	10800044 	addi	r2,r2,1
8008f008:	98800015 	stw	r2,0(r19)
8008f00c:	bdffffc4 	addi	r23,r23,-1
8008f010:	b8002526 	beq	r23,zero,8008f0a8 <__ssvfiscanf_r+0xdd0>
8008f014:	98800017 	ldw	r2,0(r19)
8008f018:	11000003 	ldbu	r4,0(r2)
8008f01c:	003f9706 	br	8008ee7c <__ssvfiscanf_r+0xba4>
8008f020:	01400284 	movi	r5,10
8008f024:	2c00200e 	bge	r5,r16,8008f0a8 <__ssvfiscanf_r+0xdd0>
8008f028:	017d1fc4 	movi	r5,-2945
8008f02c:	b16c703a 	and	r22,r22,r5
8008f030:	003fee06 	br	8008efec <__ssvfiscanf_r+0xd14>
8008f034:	b140200c 	andi	r5,r22,128
8008f038:	28001b26 	beq	r5,zero,8008f0a8 <__ssvfiscanf_r+0xdd0>
8008f03c:	b22c703a 	and	r22,r22,r8
8008f040:	003fea06 	br	8008efec <__ssvfiscanf_r+0xd14>
8008f044:	02e002b4 	movhi	r11,32778
8008f048:	8421883a 	add	r16,r16,r16
8008f04c:	5af98004 	addi	r11,r11,-6656
8008f050:	5c0b883a 	add	r5,r11,r16
8008f054:	2c00000f 	ldh	r16,0(r5)
8008f058:	017d1fc4 	movi	r5,-2945
8008f05c:	b16c703a 	and	r22,r22,r5
8008f060:	003fe206 	br	8008efec <__ssvfiscanf_r+0xd14>
8008f064:	b142000c 	andi	r5,r22,2048
8008f068:	283fe026 	beq	r5,zero,8008efec <__ssvfiscanf_r+0xd14>
8008f06c:	8000021e 	bne	r16,zero,8008f078 <__ssvfiscanf_r+0xda0>
8008f070:	b5808014 	ori	r22,r22,512
8008f074:	04000204 	movi	r16,8
8008f078:	b141000c 	andi	r5,r22,1024
8008f07c:	28009e26 	beq	r5,zero,8008f2f8 <__ssvfiscanf_r+0x1020>
8008f080:	017e9fc4 	movi	r5,-1409
8008f084:	b16c703a 	and	r22,r22,r5
8008f088:	003fd806 	br	8008efec <__ssvfiscanf_r+0xd14>
8008f08c:	02e002b4 	movhi	r11,32778
8008f090:	8421883a 	add	r16,r16,r16
8008f094:	5af98004 	addi	r11,r11,-6656
8008f098:	5c0b883a 	add	r5,r11,r16
8008f09c:	2c00000f 	ldh	r16,0(r5)
8008f0a0:	01400204 	movi	r5,8
8008f0a4:	2c3fe016 	blt	r5,r16,8008f028 <__ssvfiscanf_r+0xd50>
8008f0a8:	dc005015 	stw	r16,320(sp)
8008f0ac:	b080400c 	andi	r2,r22,256
8008f0b0:	a821883a 	mov	r16,r21
8008f0b4:	502b883a 	mov	r21,r10
8008f0b8:	10000426 	beq	r2,zero,8008f0cc <__ssvfiscanf_r+0xdf4>
8008f0bc:	dac04e17 	ldw	r11,312(sp)
8008f0c0:	5c809c36 	bltu	r11,r18,8008f334 <__ssvfiscanf_r+0x105c>
8008f0c4:	dac04e17 	ldw	r11,312(sp)
8008f0c8:	92fcc626 	beq	r18,r11,8008e3e4 <__ssvfiscanf_r+0x10c>
8008f0cc:	b080040c 	andi	r2,r22,16
8008f0d0:	10006026 	beq	r2,zero,8008f254 <__ssvfiscanf_r+0xf7c>
8008f0d4:	dac04e17 	ldw	r11,312(sp)
8008f0d8:	92e5c83a 	sub	r18,r18,r11
8008f0dc:	9425883a 	add	r18,r18,r16
8008f0e0:	e4b9883a 	add	fp,fp,r18
8008f0e4:	a825883a 	mov	r18,r21
8008f0e8:	900d883a 	mov	r6,r18
8008f0ec:	003cb906 	br	8008e3d4 <__ssvfiscanf_r+0xfc>
8008f0f0:	b800011e 	bne	r23,zero,8008f0f8 <__ssvfiscanf_r+0xe20>
8008f0f4:	05ffffc4 	movi	r23,-1
8008f0f8:	8100004c 	andi	r4,r16,1
8008f0fc:	203e9a1e 	bne	r4,zero,8008eb68 <__ssvfiscanf_r+0x890>
8008f100:	8400040c 	andi	r16,r16,16
8008f104:	80002926 	beq	r16,zero,8008f1ac <__ssvfiscanf_r+0xed4>
8008f108:	0021883a 	mov	r16,zero
8008f10c:	00000306 	br	8008f11c <__ssvfiscanf_r+0xe44>
8008f110:	10c00003 	ldbu	r3,0(r2)
8008f114:	38c7883a 	add	r3,r7,r3
8008f118:	18c00043 	ldbu	r3,1(r3)
8008f11c:	18c0020c 	andi	r3,r3,8
8008f120:	183dd11e 	bne	r3,zero,8008e868 <__ssvfiscanf_r+0x590>
8008f124:	98c00117 	ldw	r3,4(r19)
8008f128:	10800044 	addi	r2,r2,1
8008f12c:	84000044 	addi	r16,r16,1
8008f130:	18ffffc4 	addi	r3,r3,-1
8008f134:	98c00115 	stw	r3,4(r19)
8008f138:	98800015 	stw	r2,0(r19)
8008f13c:	85fdca26 	beq	r16,r23,8008e868 <__ssvfiscanf_r+0x590>
8008f140:	00fff316 	blt	zero,r3,8008f110 <__ssvfiscanf_r+0xe38>
8008f144:	980b883a 	mov	r5,r19
8008f148:	8809883a 	mov	r4,r17
8008f14c:	008e1740 	call	8008e174 <__ssrefill_r>
8008f150:	103dc51e 	bne	r2,zero,8008e868 <__ssvfiscanf_r+0x590>
8008f154:	a1c00017 	ldw	r7,0(r20)
8008f158:	98800017 	ldw	r2,0(r19)
8008f15c:	003fec06 	br	8008f110 <__ssvfiscanf_r+0xe38>
8008f160:	980b883a 	mov	r5,r19
8008f164:	8809883a 	mov	r4,r17
8008f168:	d8c05a15 	stw	r3,360(sp)
8008f16c:	d9805815 	stw	r6,352(sp)
8008f170:	d9c05615 	stw	r7,344(sp)
8008f174:	da005715 	stw	r8,348(sp)
8008f178:	da405515 	stw	r9,340(sp)
8008f17c:	da805915 	stw	r10,356(sp)
8008f180:	008e1740 	call	8008e174 <__ssrefill_r>
8008f184:	d8c05a17 	ldw	r3,360(sp)
8008f188:	d9805817 	ldw	r6,352(sp)
8008f18c:	d9c05617 	ldw	r7,344(sp)
8008f190:	da005717 	ldw	r8,348(sp)
8008f194:	da405517 	ldw	r9,340(sp)
8008f198:	da805917 	ldw	r10,356(sp)
8008f19c:	103f9b26 	beq	r2,zero,8008f00c <__ssvfiscanf_r+0xd34>
8008f1a0:	003fc106 	br	8008f0a8 <__ssvfiscanf_r+0xdd0>
8008f1a4:	000d883a 	mov	r6,zero
8008f1a8:	003f2a06 	br	8008ee54 <__ssvfiscanf_r+0xb7c>
8008f1ac:	dac04f17 	ldw	r11,316(sp)
8008f1b0:	babfffc4 	addi	r10,r23,-1
8008f1b4:	5c800017 	ldw	r18,0(r11)
8008f1b8:	5c000104 	addi	r16,r11,4
8008f1bc:	900b883a 	mov	r5,r18
8008f1c0:	92ad883a 	add	r22,r18,r10
8008f1c4:	00000606 	br	8008f1e0 <__ssvfiscanf_r+0xf08>
8008f1c8:	98800017 	ldw	r2,0(r19)
8008f1cc:	a1000017 	ldw	r4,0(r20)
8008f1d0:	b80b883a 	mov	r5,r23
8008f1d4:	10c00003 	ldbu	r3,0(r2)
8008f1d8:	20c7883a 	add	r3,r4,r3
8008f1dc:	18c00043 	ldbu	r3,1(r3)
8008f1e0:	18c0020c 	andi	r3,r3,8
8008f1e4:	2809883a 	mov	r4,r5
8008f1e8:	1800101e 	bne	r3,zero,8008f22c <__ssvfiscanf_r+0xf54>
8008f1ec:	98c00117 	ldw	r3,4(r19)
8008f1f0:	11800044 	addi	r6,r2,1
8008f1f4:	99800015 	stw	r6,0(r19)
8008f1f8:	18ffffc4 	addi	r3,r3,-1
8008f1fc:	98c00115 	stw	r3,4(r19)
8008f200:	10800003 	ldbu	r2,0(r2)
8008f204:	25c00044 	addi	r23,r4,1
8008f208:	28800005 	stb	r2,0(r5)
8008f20c:	25800626 	beq	r4,r22,8008f228 <__ssvfiscanf_r+0xf50>
8008f210:	98800117 	ldw	r2,4(r19)
8008f214:	00bfec16 	blt	zero,r2,8008f1c8 <__ssvfiscanf_r+0xef0>
8008f218:	980b883a 	mov	r5,r19
8008f21c:	8809883a 	mov	r4,r17
8008f220:	008e1740 	call	8008e174 <__ssrefill_r>
8008f224:	103fe826 	beq	r2,zero,8008f1c8 <__ssvfiscanf_r+0xef0>
8008f228:	b809883a 	mov	r4,r23
8008f22c:	dac05117 	ldw	r11,324(sp)
8008f230:	24a5c83a 	sub	r18,r4,r18
8008f234:	e4b9883a 	add	fp,fp,r18
8008f238:	5ac00044 	addi	r11,r11,1
8008f23c:	a825883a 	mov	r18,r21
8008f240:	20000005 	stb	zero,0(r4)
8008f244:	dac05115 	stw	r11,324(sp)
8008f248:	dc004f15 	stw	r16,316(sp)
8008f24c:	900d883a 	mov	r6,r18
8008f250:	003c6006 	br	8008e3d4 <__ssvfiscanf_r+0xfc>
8008f254:	d9c05017 	ldw	r7,320(sp)
8008f258:	dac05217 	ldw	r11,328(sp)
8008f25c:	000d883a 	mov	r6,zero
8008f260:	d9404104 	addi	r5,sp,260
8008f264:	8809883a 	mov	r4,r17
8008f268:	90000005 	stb	zero,0(r18)
8008f26c:	583ee83a 	callr	r11
8008f270:	b0c0080c 	andi	r3,r22,32
8008f274:	1800271e 	bne	r3,zero,8008f314 <__ssvfiscanf_r+0x103c>
8008f278:	b0c0010c 	andi	r3,r22,4
8008f27c:	18003326 	beq	r3,zero,8008f34c <__ssvfiscanf_r+0x1074>
8008f280:	dac04f17 	ldw	r11,316(sp)
8008f284:	58c00017 	ldw	r3,0(r11)
8008f288:	5ac00104 	addi	r11,r11,4
8008f28c:	dac04f15 	stw	r11,316(sp)
8008f290:	1880000d 	sth	r2,0(r3)
8008f294:	dac05117 	ldw	r11,324(sp)
8008f298:	5ac00044 	addi	r11,r11,1
8008f29c:	dac05115 	stw	r11,324(sp)
8008f2a0:	003f8c06 	br	8008f0d4 <__ssvfiscanf_r+0xdfc>
8008f2a4:	b0000015 	stw	zero,0(r22)
8008f2a8:	0009883a 	mov	r4,zero
8008f2ac:	d8c05a15 	stw	r3,360(sp)
8008f2b0:	00899cc0 	call	800899cc <iswspace>
8008f2b4:	d8c05a17 	ldw	r3,360(sp)
8008f2b8:	10003826 	beq	r2,zero,8008f39c <__ssvfiscanf_r+0x10c4>
8008f2bc:	18000b26 	beq	r3,zero,8008f2ec <__ssvfiscanf_r+0x1014>
8008f2c0:	1cbfffc4 	addi	r18,r3,-1
8008f2c4:	d9804104 	addi	r6,sp,260
8008f2c8:	34af883a 	add	r23,r6,r18
8008f2cc:	00000106 	br	8008f2d4 <__ssvfiscanf_r+0xffc>
8008f2d0:	94bfffc4 	addi	r18,r18,-1
8008f2d4:	b9400003 	ldbu	r5,0(r23)
8008f2d8:	980d883a 	mov	r6,r19
8008f2dc:	8809883a 	mov	r4,r17
8008f2e0:	008e06c0 	call	8008e06c <_sungetc_r>
8008f2e4:	bdffffc4 	addi	r23,r23,-1
8008f2e8:	903ff91e 	bne	r18,zero,8008f2d0 <__ssvfiscanf_r+0xff8>
8008f2ec:	803def1e 	bne	r16,zero,8008eaac <__ssvfiscanf_r+0x7d4>
8008f2f0:	b0000015 	stw	zero,0(r22)
8008f2f4:	003dea06 	br	8008eaa0 <__ssvfiscanf_r+0x7c8>
8008f2f8:	013f1fc4 	movi	r4,-897
8008f2fc:	b12c703a 	and	r22,r22,r4
8008f300:	30000226 	beq	r6,zero,8008f30c <__ssvfiscanf_r+0x1034>
8008f304:	31bfffc4 	addi	r6,r6,-1
8008f308:	bdc00044 	addi	r23,r23,1
8008f30c:	ad400044 	addi	r21,r21,1
8008f310:	003f3806 	br	8008eff4 <__ssvfiscanf_r+0xd1c>
8008f314:	dac04f17 	ldw	r11,316(sp)
8008f318:	58c00017 	ldw	r3,0(r11)
8008f31c:	5ac00104 	addi	r11,r11,4
8008f320:	dac04f15 	stw	r11,316(sp)
8008f324:	18800015 	stw	r2,0(r3)
8008f328:	003fda06 	br	8008f294 <__ssvfiscanf_r+0xfbc>
8008f32c:	dd804d04 	addi	r22,sp,308
8008f330:	003e1906 	br	8008eb98 <__ssvfiscanf_r+0x8c0>
8008f334:	917fffc7 	ldb	r5,-1(r18)
8008f338:	980d883a 	mov	r6,r19
8008f33c:	8809883a 	mov	r4,r17
8008f340:	94bfffc4 	addi	r18,r18,-1
8008f344:	008e06c0 	call	8008e06c <_sungetc_r>
8008f348:	003f5e06 	br	8008f0c4 <__ssvfiscanf_r+0xdec>
8008f34c:	b0c0004c 	andi	r3,r22,1
8008f350:	183ff01e 	bne	r3,zero,8008f314 <__ssvfiscanf_r+0x103c>
8008f354:	b580008c 	andi	r22,r22,2
8008f358:	b03fee26 	beq	r22,zero,8008f314 <__ssvfiscanf_r+0x103c>
8008f35c:	dac05217 	ldw	r11,328(sp)
8008f360:	00a00274 	movhi	r2,32777
8008f364:	10b6cb04 	addi	r2,r2,-9428
8008f368:	d9c05017 	ldw	r7,320(sp)
8008f36c:	000d883a 	mov	r6,zero
8008f370:	d9404104 	addi	r5,sp,260
8008f374:	8809883a 	mov	r4,r17
8008f378:	58801226 	beq	r11,r2,8008f3c4 <__ssvfiscanf_r+0x10ec>
8008f37c:	008d84c0 	call	8008d84c <_strtoll_r>
8008f380:	dac04f17 	ldw	r11,316(sp)
8008f384:	59000017 	ldw	r4,0(r11)
8008f388:	5ac00104 	addi	r11,r11,4
8008f38c:	dac04f15 	stw	r11,316(sp)
8008f390:	20800015 	stw	r2,0(r4)
8008f394:	20c00115 	stw	r3,4(r4)
8008f398:	003fbe06 	br	8008f294 <__ssvfiscanf_r+0xfbc>
8008f39c:	e0f9883a 	add	fp,fp,r3
8008f3a0:	bdffffc4 	addi	r23,r23,-1
8008f3a4:	8000031e 	bne	r16,zero,8008f3b4 <__ssvfiscanf_r+0x10dc>
8008f3a8:	b5800104 	addi	r22,r22,4
8008f3ac:	0025883a 	mov	r18,zero
8008f3b0:	003e1f06 	br	8008ec30 <__ssvfiscanf_r+0x958>
8008f3b4:	0025883a 	mov	r18,zero
8008f3b8:	003e1d06 	br	8008ec30 <__ssvfiscanf_r+0x958>
8008f3bc:	b1000017 	ldw	r4,0(r22)
8008f3c0:	003fba06 	br	8008f2ac <__ssvfiscanf_r+0xfd4>
8008f3c4:	008dd940 	call	8008dd94 <_strtoull_r>
8008f3c8:	003fed06 	br	8008f380 <__ssvfiscanf_r+0x10a8>

8008f3cc <___svfprintf_internal_r>:
8008f3cc:	deffb704 	addi	sp,sp,-292
8008f3d0:	dfc04815 	stw	ra,288(sp)
8008f3d4:	ddc04615 	stw	r23,280(sp)
8008f3d8:	d9402c15 	stw	r5,176(sp)
8008f3dc:	d9003915 	stw	r4,228(sp)
8008f3e0:	302f883a 	mov	r23,r6
8008f3e4:	d9c02d15 	stw	r7,180(sp)
8008f3e8:	df004715 	stw	fp,284(sp)
8008f3ec:	dd804515 	stw	r22,276(sp)
8008f3f0:	dd404415 	stw	r21,272(sp)
8008f3f4:	dd004315 	stw	r20,268(sp)
8008f3f8:	dcc04215 	stw	r19,264(sp)
8008f3fc:	dc804115 	stw	r18,260(sp)
8008f400:	dc404015 	stw	r17,256(sp)
8008f404:	dc003f15 	stw	r16,252(sp)
8008f408:	0089aa80 	call	80089aa8 <_localeconv_r>
8008f40c:	10800017 	ldw	r2,0(r2)
8008f410:	1009883a 	mov	r4,r2
8008f414:	d8803415 	stw	r2,208(sp)
8008f418:	00833580 	call	80083358 <strlen>
8008f41c:	d8c02c17 	ldw	r3,176(sp)
8008f420:	d8803815 	stw	r2,224(sp)
8008f424:	1880030b 	ldhu	r2,12(r3)
8008f428:	1080200c 	andi	r2,r2,128
8008f42c:	10000226 	beq	r2,zero,8008f438 <___svfprintf_internal_r+0x6c>
8008f430:	18800417 	ldw	r2,16(r3)
8008f434:	10067f26 	beq	r2,zero,80090e34 <___svfprintf_internal_r+0x1a68>
8008f438:	dcc03917 	ldw	r19,228(sp)
8008f43c:	d8c00404 	addi	r3,sp,16
8008f440:	056002b4 	movhi	r21,32778
8008f444:	d9001e04 	addi	r4,sp,120
8008f448:	ad798884 	addi	r21,r21,-6622
8008f44c:	d8c01e15 	stw	r3,120(sp)
8008f450:	d8002015 	stw	zero,128(sp)
8008f454:	d8001f15 	stw	zero,124(sp)
8008f458:	d8003315 	stw	zero,204(sp)
8008f45c:	d8003615 	stw	zero,216(sp)
8008f460:	d8003715 	stw	zero,220(sp)
8008f464:	1811883a 	mov	r8,r3
8008f468:	d8003a15 	stw	zero,232(sp)
8008f46c:	d8003b15 	stw	zero,236(sp)
8008f470:	d8002f15 	stw	zero,188(sp)
8008f474:	d9002815 	stw	r4,160(sp)
8008f478:	b8800007 	ldb	r2,0(r23)
8008f47c:	10026726 	beq	r2,zero,8008fe1c <___svfprintf_internal_r+0xa50>
8008f480:	00c00944 	movi	r3,37
8008f484:	b821883a 	mov	r16,r23
8008f488:	10c0021e 	bne	r2,r3,8008f494 <___svfprintf_internal_r+0xc8>
8008f48c:	00001406 	br	8008f4e0 <___svfprintf_internal_r+0x114>
8008f490:	10c00326 	beq	r2,r3,8008f4a0 <___svfprintf_internal_r+0xd4>
8008f494:	84000044 	addi	r16,r16,1
8008f498:	80800007 	ldb	r2,0(r16)
8008f49c:	103ffc1e 	bne	r2,zero,8008f490 <___svfprintf_internal_r+0xc4>
8008f4a0:	85e3c83a 	sub	r17,r16,r23
8008f4a4:	88000e26 	beq	r17,zero,8008f4e0 <___svfprintf_internal_r+0x114>
8008f4a8:	d8c02017 	ldw	r3,128(sp)
8008f4ac:	d8801f17 	ldw	r2,124(sp)
8008f4b0:	45c00015 	stw	r23,0(r8)
8008f4b4:	1c47883a 	add	r3,r3,r17
8008f4b8:	10800044 	addi	r2,r2,1
8008f4bc:	d8c02015 	stw	r3,128(sp)
8008f4c0:	44400115 	stw	r17,4(r8)
8008f4c4:	d8801f15 	stw	r2,124(sp)
8008f4c8:	00c001c4 	movi	r3,7
8008f4cc:	18809716 	blt	r3,r2,8008f72c <___svfprintf_internal_r+0x360>
8008f4d0:	42000204 	addi	r8,r8,8
8008f4d4:	d9402f17 	ldw	r5,188(sp)
8008f4d8:	2c4b883a 	add	r5,r5,r17
8008f4dc:	d9402f15 	stw	r5,188(sp)
8008f4e0:	80800007 	ldb	r2,0(r16)
8008f4e4:	10009826 	beq	r2,zero,8008f748 <___svfprintf_internal_r+0x37c>
8008f4e8:	84400047 	ldb	r17,1(r16)
8008f4ec:	00bfffc4 	movi	r2,-1
8008f4f0:	85c00044 	addi	r23,r16,1
8008f4f4:	d8002785 	stb	zero,158(sp)
8008f4f8:	0007883a 	mov	r3,zero
8008f4fc:	000f883a 	mov	r7,zero
8008f500:	d8802915 	stw	r2,164(sp)
8008f504:	d8003115 	stw	zero,196(sp)
8008f508:	0025883a 	mov	r18,zero
8008f50c:	01401604 	movi	r5,88
8008f510:	01800244 	movi	r6,9
8008f514:	02800a84 	movi	r10,42
8008f518:	02401b04 	movi	r9,108
8008f51c:	bdc00044 	addi	r23,r23,1
8008f520:	88bff804 	addi	r2,r17,-32
8008f524:	2882f036 	bltu	r5,r2,800900e8 <___svfprintf_internal_r+0xd1c>
8008f528:	100490ba 	slli	r2,r2,2
8008f52c:	01200274 	movhi	r4,32777
8008f530:	213d5004 	addi	r4,r4,-2752
8008f534:	1105883a 	add	r2,r2,r4
8008f538:	10800017 	ldw	r2,0(r2)
8008f53c:	1000683a 	jmp	r2
8008f540:	80090050 	cmplti	zero,r16,9217
8008f544:	800900e8 	cmpgeui	zero,r16,9219
8008f548:	800900e8 	cmpgeui	zero,r16,9219
8008f54c:	80090044 	addi	zero,r16,9217
8008f550:	800900e8 	cmpgeui	zero,r16,9219
8008f554:	800900e8 	cmpgeui	zero,r16,9219
8008f558:	800900e8 	cmpgeui	zero,r16,9219
8008f55c:	800900e8 	cmpgeui	zero,r16,9219
8008f560:	800900e8 	cmpgeui	zero,r16,9219
8008f564:	800900e8 	cmpgeui	zero,r16,9219
8008f568:	8008f7a4 	muli	zero,r16,9182
8008f56c:	8008ff80 	call	88008ff8 <__alt_data_end+0x7f0bff8>
8008f570:	800900e8 	cmpgeui	zero,r16,9219
8008f574:	8008f6b4 	orhi	zero,r16,9178
8008f578:	8008f7cc 	andi	zero,r16,9183
8008f57c:	800900e8 	cmpgeui	zero,r16,9219
8008f580:	8008f840 	call	88008f84 <__alt_data_end+0x7f0bf84>
8008f584:	8008f80c 	andi	zero,r16,9184
8008f588:	8008f80c 	andi	zero,r16,9184
8008f58c:	8008f80c 	andi	zero,r16,9184
8008f590:	8008f80c 	andi	zero,r16,9184
8008f594:	8008f80c 	andi	zero,r16,9184
8008f598:	8008f80c 	andi	zero,r16,9184
8008f59c:	8008f80c 	andi	zero,r16,9184
8008f5a0:	8008f80c 	andi	zero,r16,9184
8008f5a4:	8008f80c 	andi	zero,r16,9184
8008f5a8:	800900e8 	cmpgeui	zero,r16,9219
8008f5ac:	800900e8 	cmpgeui	zero,r16,9219
8008f5b0:	800900e8 	cmpgeui	zero,r16,9219
8008f5b4:	800900e8 	cmpgeui	zero,r16,9219
8008f5b8:	800900e8 	cmpgeui	zero,r16,9219
8008f5bc:	800900e8 	cmpgeui	zero,r16,9219
8008f5c0:	800900e8 	cmpgeui	zero,r16,9219
8008f5c4:	800900e8 	cmpgeui	zero,r16,9219
8008f5c8:	800900e8 	cmpgeui	zero,r16,9219
8008f5cc:	800900e8 	cmpgeui	zero,r16,9219
8008f5d0:	8008f8f8 	rdprs	zero,r16,9187
8008f5d4:	8008f84c 	andi	zero,r16,9185
8008f5d8:	800900e8 	cmpgeui	zero,r16,9219
8008f5dc:	8008f84c 	andi	zero,r16,9185
8008f5e0:	800900e8 	cmpgeui	zero,r16,9219
8008f5e4:	800900e8 	cmpgeui	zero,r16,9219
8008f5e8:	800900e8 	cmpgeui	zero,r16,9219
8008f5ec:	800900e8 	cmpgeui	zero,r16,9219
8008f5f0:	8008f8ec 	andhi	zero,r16,9187
8008f5f4:	800900e8 	cmpgeui	zero,r16,9219
8008f5f8:	800900e8 	cmpgeui	zero,r16,9219
8008f5fc:	8008f9b4 	orhi	zero,r16,9190
8008f600:	800900e8 	cmpgeui	zero,r16,9219
8008f604:	800900e8 	cmpgeui	zero,r16,9219
8008f608:	800900e8 	cmpgeui	zero,r16,9219
8008f60c:	800900e8 	cmpgeui	zero,r16,9219
8008f610:	800900e8 	cmpgeui	zero,r16,9219
8008f614:	8008fe24 	muli	zero,r16,9208
8008f618:	800900e8 	cmpgeui	zero,r16,9219
8008f61c:	800900e8 	cmpgeui	zero,r16,9219
8008f620:	8008fe84 	addi	zero,r16,9210
8008f624:	800900e8 	cmpgeui	zero,r16,9219
8008f628:	800900e8 	cmpgeui	zero,r16,9219
8008f62c:	800900e8 	cmpgeui	zero,r16,9219
8008f630:	800900e8 	cmpgeui	zero,r16,9219
8008f634:	800900e8 	cmpgeui	zero,r16,9219
8008f638:	800900e8 	cmpgeui	zero,r16,9219
8008f63c:	800900e8 	cmpgeui	zero,r16,9219
8008f640:	800900e8 	cmpgeui	zero,r16,9219
8008f644:	800900e8 	cmpgeui	zero,r16,9219
8008f648:	800900e8 	cmpgeui	zero,r16,9219
8008f64c:	8008ff34 	orhi	zero,r16,9212
8008f650:	80090070 	cmpltui	zero,r16,9217
8008f654:	8008f84c 	andi	zero,r16,9185
8008f658:	8008f84c 	andi	zero,r16,9185
8008f65c:	8008f84c 	andi	zero,r16,9185
8008f660:	800900c4 	addi	zero,r16,9219
8008f664:	80090070 	cmpltui	zero,r16,9217
8008f668:	800900e8 	cmpgeui	zero,r16,9219
8008f66c:	800900e8 	cmpgeui	zero,r16,9219
8008f670:	80090080 	call	88009008 <__alt_data_end+0x7f0c008>
8008f674:	800900e8 	cmpgeui	zero,r16,9219
8008f678:	80090090 	cmplti	zero,r16,9218
8008f67c:	8008ff70 	cmpltui	zero,r16,9213
8008f680:	8008f6c0 	call	88008f6c <__alt_data_end+0x7f0bf6c>
8008f684:	8008ff90 	cmplti	zero,r16,9214
8008f688:	800900e8 	cmpgeui	zero,r16,9219
8008f68c:	8008ff9c 	xori	zero,r16,9214
8008f690:	800900e8 	cmpgeui	zero,r16,9219
8008f694:	8008fff8 	rdprs	zero,r16,9215
8008f698:	800900e8 	cmpgeui	zero,r16,9219
8008f69c:	800900e8 	cmpgeui	zero,r16,9219
8008f6a0:	80090008 	cmpgei	zero,r16,9216
8008f6a4:	d9003117 	ldw	r4,196(sp)
8008f6a8:	d8802d15 	stw	r2,180(sp)
8008f6ac:	0109c83a 	sub	r4,zero,r4
8008f6b0:	d9003115 	stw	r4,196(sp)
8008f6b4:	94800114 	ori	r18,r18,4
8008f6b8:	bc400007 	ldb	r17,0(r23)
8008f6bc:	003f9706 	br	8008f51c <___svfprintf_internal_r+0x150>
8008f6c0:	00800c04 	movi	r2,48
8008f6c4:	d9002d17 	ldw	r4,180(sp)
8008f6c8:	d9402917 	ldw	r5,164(sp)
8008f6cc:	d8802705 	stb	r2,156(sp)
8008f6d0:	00801e04 	movi	r2,120
8008f6d4:	d8802745 	stb	r2,157(sp)
8008f6d8:	d8002785 	stb	zero,158(sp)
8008f6dc:	20c00104 	addi	r3,r4,4
8008f6e0:	25000017 	ldw	r20,0(r4)
8008f6e4:	002d883a 	mov	r22,zero
8008f6e8:	90800094 	ori	r2,r18,2
8008f6ec:	28028616 	blt	r5,zero,80090108 <___svfprintf_internal_r+0xd3c>
8008f6f0:	00bfdfc4 	movi	r2,-129
8008f6f4:	90a4703a 	and	r18,r18,r2
8008f6f8:	d8c02d15 	stw	r3,180(sp)
8008f6fc:	94800094 	ori	r18,r18,2
8008f700:	a002731e 	bne	r20,zero,800900d0 <___svfprintf_internal_r+0xd04>
8008f704:	00a002b4 	movhi	r2,32778
8008f708:	10b86804 	addi	r2,r2,-7776
8008f70c:	d8803a15 	stw	r2,232(sp)
8008f710:	04401e04 	movi	r17,120
8008f714:	d8c02917 	ldw	r3,164(sp)
8008f718:	0039883a 	mov	fp,zero
8008f71c:	1801d526 	beq	r3,zero,8008fe74 <___svfprintf_internal_r+0xaa8>
8008f720:	0029883a 	mov	r20,zero
8008f724:	002d883a 	mov	r22,zero
8008f728:	0001f106 	br	8008fef0 <___svfprintf_internal_r+0xb24>
8008f72c:	d9402c17 	ldw	r5,176(sp)
8008f730:	d9801e04 	addi	r6,sp,120
8008f734:	9809883a 	mov	r4,r19
8008f738:	00940a00 	call	800940a0 <__ssprint_r>
8008f73c:	1000081e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
8008f740:	da000404 	addi	r8,sp,16
8008f744:	003f6306 	br	8008f4d4 <___svfprintf_internal_r+0x108>
8008f748:	d8802017 	ldw	r2,128(sp)
8008f74c:	10000426 	beq	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
8008f750:	d9402c17 	ldw	r5,176(sp)
8008f754:	d9003917 	ldw	r4,228(sp)
8008f758:	d9801e04 	addi	r6,sp,120
8008f75c:	00940a00 	call	800940a0 <__ssprint_r>
8008f760:	d8802c17 	ldw	r2,176(sp)
8008f764:	10c0030b 	ldhu	r3,12(r2)
8008f768:	d8802f17 	ldw	r2,188(sp)
8008f76c:	18c0100c 	andi	r3,r3,64
8008f770:	1805f51e 	bne	r3,zero,80090f48 <___svfprintf_internal_r+0x1b7c>
8008f774:	dfc04817 	ldw	ra,288(sp)
8008f778:	df004717 	ldw	fp,284(sp)
8008f77c:	ddc04617 	ldw	r23,280(sp)
8008f780:	dd804517 	ldw	r22,276(sp)
8008f784:	dd404417 	ldw	r21,272(sp)
8008f788:	dd004317 	ldw	r20,268(sp)
8008f78c:	dcc04217 	ldw	r19,264(sp)
8008f790:	dc804117 	ldw	r18,260(sp)
8008f794:	dc404017 	ldw	r17,256(sp)
8008f798:	dc003f17 	ldw	r16,252(sp)
8008f79c:	dec04904 	addi	sp,sp,292
8008f7a0:	f800283a 	ret
8008f7a4:	d8802d17 	ldw	r2,180(sp)
8008f7a8:	d9002d17 	ldw	r4,180(sp)
8008f7ac:	10800017 	ldw	r2,0(r2)
8008f7b0:	d8803115 	stw	r2,196(sp)
8008f7b4:	20800104 	addi	r2,r4,4
8008f7b8:	d9003117 	ldw	r4,196(sp)
8008f7bc:	203fb916 	blt	r4,zero,8008f6a4 <___svfprintf_internal_r+0x2d8>
8008f7c0:	d8802d15 	stw	r2,180(sp)
8008f7c4:	bc400007 	ldb	r17,0(r23)
8008f7c8:	003f5406 	br	8008f51c <___svfprintf_internal_r+0x150>
8008f7cc:	bc400007 	ldb	r17,0(r23)
8008f7d0:	bac00044 	addi	r11,r23,1
8008f7d4:	8a873926 	beq	r17,r10,800914bc <___svfprintf_internal_r+0x20f0>
8008f7d8:	88bff404 	addi	r2,r17,-48
8008f7dc:	0009883a 	mov	r4,zero
8008f7e0:	30868836 	bltu	r6,r2,80091204 <___svfprintf_internal_r+0x1e38>
8008f7e4:	5c400007 	ldb	r17,0(r11)
8008f7e8:	210002a4 	muli	r4,r4,10
8008f7ec:	5dc00044 	addi	r23,r11,1
8008f7f0:	b817883a 	mov	r11,r23
8008f7f4:	2089883a 	add	r4,r4,r2
8008f7f8:	88bff404 	addi	r2,r17,-48
8008f7fc:	30bff92e 	bgeu	r6,r2,8008f7e4 <___svfprintf_internal_r+0x418>
8008f800:	2005d716 	blt	r4,zero,80090f60 <___svfprintf_internal_r+0x1b94>
8008f804:	d9002915 	stw	r4,164(sp)
8008f808:	003f4506 	br	8008f520 <___svfprintf_internal_r+0x154>
8008f80c:	b809883a 	mov	r4,r23
8008f810:	d8003115 	stw	zero,196(sp)
8008f814:	88bff404 	addi	r2,r17,-48
8008f818:	0017883a 	mov	r11,zero
8008f81c:	24400007 	ldb	r17,0(r4)
8008f820:	5ac002a4 	muli	r11,r11,10
8008f824:	bdc00044 	addi	r23,r23,1
8008f828:	b809883a 	mov	r4,r23
8008f82c:	12d7883a 	add	r11,r2,r11
8008f830:	88bff404 	addi	r2,r17,-48
8008f834:	30bff92e 	bgeu	r6,r2,8008f81c <___svfprintf_internal_r+0x450>
8008f838:	dac03115 	stw	r11,196(sp)
8008f83c:	003f3806 	br	8008f520 <___svfprintf_internal_r+0x154>
8008f840:	94802014 	ori	r18,r18,128
8008f844:	bc400007 	ldb	r17,0(r23)
8008f848:	003f3406 	br	8008f51c <___svfprintf_internal_r+0x150>
8008f84c:	18c03fcc 	andi	r3,r3,255
8008f850:	1807471e 	bne	r3,zero,80091570 <___svfprintf_internal_r+0x21a4>
8008f854:	9080020c 	andi	r2,r18,8
8008f858:	10047d26 	beq	r2,zero,80090a50 <___svfprintf_internal_r+0x1684>
8008f85c:	d8c02d17 	ldw	r3,180(sp)
8008f860:	d9002d17 	ldw	r4,180(sp)
8008f864:	d9402d17 	ldw	r5,180(sp)
8008f868:	18c00017 	ldw	r3,0(r3)
8008f86c:	21000117 	ldw	r4,4(r4)
8008f870:	29400204 	addi	r5,r5,8
8008f874:	d8c03615 	stw	r3,216(sp)
8008f878:	d9003715 	stw	r4,220(sp)
8008f87c:	d9402d15 	stw	r5,180(sp)
8008f880:	d9003617 	ldw	r4,216(sp)
8008f884:	d9403717 	ldw	r5,220(sp)
8008f888:	da003e15 	stw	r8,248(sp)
8008f88c:	04000044 	movi	r16,1
8008f890:	008bb980 	call	8008bb98 <__fpclassifyd>
8008f894:	da003e17 	ldw	r8,248(sp)
8008f898:	14044b1e 	bne	r2,r16,800909c8 <___svfprintf_internal_r+0x15fc>
8008f89c:	d9003617 	ldw	r4,216(sp)
8008f8a0:	d9403717 	ldw	r5,220(sp)
8008f8a4:	000d883a 	mov	r6,zero
8008f8a8:	000f883a 	mov	r7,zero
8008f8ac:	00976ac0 	call	800976ac <__ledf2>
8008f8b0:	da003e17 	ldw	r8,248(sp)
8008f8b4:	1005f316 	blt	r2,zero,80091084 <___svfprintf_internal_r+0x1cb8>
8008f8b8:	df002783 	ldbu	fp,158(sp)
8008f8bc:	008011c4 	movi	r2,71
8008f8c0:	1445590e 	bge	r2,r17,80090e28 <___svfprintf_internal_r+0x1a5c>
8008f8c4:	042002b4 	movhi	r16,32778
8008f8c8:	84386004 	addi	r16,r16,-7808
8008f8cc:	00c000c4 	movi	r3,3
8008f8d0:	00bfdfc4 	movi	r2,-129
8008f8d4:	d8c02a15 	stw	r3,168(sp)
8008f8d8:	90a4703a 	and	r18,r18,r2
8008f8dc:	d8c02e15 	stw	r3,184(sp)
8008f8e0:	d8002915 	stw	zero,164(sp)
8008f8e4:	d8003215 	stw	zero,200(sp)
8008f8e8:	00006606 	br	8008fa84 <___svfprintf_internal_r+0x6b8>
8008f8ec:	94800214 	ori	r18,r18,8
8008f8f0:	bc400007 	ldb	r17,0(r23)
8008f8f4:	003f0906 	br	8008f51c <___svfprintf_internal_r+0x150>
8008f8f8:	18c03fcc 	andi	r3,r3,255
8008f8fc:	1807181e 	bne	r3,zero,80091560 <___svfprintf_internal_r+0x2194>
8008f900:	94800414 	ori	r18,r18,16
8008f904:	9080080c 	andi	r2,r18,32
8008f908:	10039626 	beq	r2,zero,80090764 <___svfprintf_internal_r+0x1398>
8008f90c:	d9402d17 	ldw	r5,180(sp)
8008f910:	28800117 	ldw	r2,4(r5)
8008f914:	2d000017 	ldw	r20,0(r5)
8008f918:	29400204 	addi	r5,r5,8
8008f91c:	d9402d15 	stw	r5,180(sp)
8008f920:	102d883a 	mov	r22,r2
8008f924:	10039816 	blt	r2,zero,80090788 <___svfprintf_internal_r+0x13bc>
8008f928:	d9402917 	ldw	r5,164(sp)
8008f92c:	df002783 	ldbu	fp,158(sp)
8008f930:	2803ab16 	blt	r5,zero,800907e0 <___svfprintf_internal_r+0x1414>
8008f934:	00ffdfc4 	movi	r3,-129
8008f938:	a584b03a 	or	r2,r20,r22
8008f93c:	90e4703a 	and	r18,r18,r3
8008f940:	10014a26 	beq	r2,zero,8008fe6c <___svfprintf_internal_r+0xaa0>
8008f944:	b0034b26 	beq	r22,zero,80090674 <___svfprintf_internal_r+0x12a8>
8008f948:	dc402a15 	stw	r17,168(sp)
8008f94c:	dc001e04 	addi	r16,sp,120
8008f950:	b023883a 	mov	r17,r22
8008f954:	402d883a 	mov	r22,r8
8008f958:	a009883a 	mov	r4,r20
8008f95c:	880b883a 	mov	r5,r17
8008f960:	01800284 	movi	r6,10
8008f964:	000f883a 	mov	r7,zero
8008f968:	0095c800 	call	80095c80 <__umoddi3>
8008f96c:	10800c04 	addi	r2,r2,48
8008f970:	843fffc4 	addi	r16,r16,-1
8008f974:	a009883a 	mov	r4,r20
8008f978:	880b883a 	mov	r5,r17
8008f97c:	80800005 	stb	r2,0(r16)
8008f980:	01800284 	movi	r6,10
8008f984:	000f883a 	mov	r7,zero
8008f988:	00957080 	call	80095708 <__udivdi3>
8008f98c:	1029883a 	mov	r20,r2
8008f990:	10c4b03a 	or	r2,r2,r3
8008f994:	1823883a 	mov	r17,r3
8008f998:	103fef1e 	bne	r2,zero,8008f958 <___svfprintf_internal_r+0x58c>
8008f99c:	d8c02817 	ldw	r3,160(sp)
8008f9a0:	dc402a17 	ldw	r17,168(sp)
8008f9a4:	b011883a 	mov	r8,r22
8008f9a8:	1c07c83a 	sub	r3,r3,r16
8008f9ac:	d8c02e15 	stw	r3,184(sp)
8008f9b0:	00002e06 	br	8008fa6c <___svfprintf_internal_r+0x6a0>
8008f9b4:	18c03fcc 	andi	r3,r3,255
8008f9b8:	1806e71e 	bne	r3,zero,80091558 <___svfprintf_internal_r+0x218c>
8008f9bc:	94800414 	ori	r18,r18,16
8008f9c0:	9080080c 	andi	r2,r18,32
8008f9c4:	1002d426 	beq	r2,zero,80090518 <___svfprintf_internal_r+0x114c>
8008f9c8:	d9402d17 	ldw	r5,180(sp)
8008f9cc:	d8c02917 	ldw	r3,164(sp)
8008f9d0:	d8002785 	stb	zero,158(sp)
8008f9d4:	28800204 	addi	r2,r5,8
8008f9d8:	2d000017 	ldw	r20,0(r5)
8008f9dc:	2d800117 	ldw	r22,4(r5)
8008f9e0:	18041516 	blt	r3,zero,80090a38 <___svfprintf_internal_r+0x166c>
8008f9e4:	013fdfc4 	movi	r4,-129
8008f9e8:	a586b03a 	or	r3,r20,r22
8008f9ec:	d8802d15 	stw	r2,180(sp)
8008f9f0:	9124703a 	and	r18,r18,r4
8008f9f4:	1802d51e 	bne	r3,zero,8009054c <___svfprintf_internal_r+0x1180>
8008f9f8:	d9402917 	ldw	r5,164(sp)
8008f9fc:	0039883a 	mov	fp,zero
8008fa00:	2806be26 	beq	r5,zero,800914fc <___svfprintf_internal_r+0x2130>
8008fa04:	0029883a 	mov	r20,zero
8008fa08:	002d883a 	mov	r22,zero
8008fa0c:	dc001e04 	addi	r16,sp,120
8008fa10:	a006d0fa 	srli	r3,r20,3
8008fa14:	b008977a 	slli	r4,r22,29
8008fa18:	b02cd0fa 	srli	r22,r22,3
8008fa1c:	a50001cc 	andi	r20,r20,7
8008fa20:	a0800c04 	addi	r2,r20,48
8008fa24:	843fffc4 	addi	r16,r16,-1
8008fa28:	20e8b03a 	or	r20,r4,r3
8008fa2c:	80800005 	stb	r2,0(r16)
8008fa30:	a586b03a 	or	r3,r20,r22
8008fa34:	183ff61e 	bne	r3,zero,8008fa10 <___svfprintf_internal_r+0x644>
8008fa38:	90c0004c 	andi	r3,r18,1
8008fa3c:	18013926 	beq	r3,zero,8008ff24 <___svfprintf_internal_r+0xb58>
8008fa40:	10803fcc 	andi	r2,r2,255
8008fa44:	1080201c 	xori	r2,r2,128
8008fa48:	10bfe004 	addi	r2,r2,-128
8008fa4c:	00c00c04 	movi	r3,48
8008fa50:	10c13426 	beq	r2,r3,8008ff24 <___svfprintf_internal_r+0xb58>
8008fa54:	80ffffc5 	stb	r3,-1(r16)
8008fa58:	d8c02817 	ldw	r3,160(sp)
8008fa5c:	80bfffc4 	addi	r2,r16,-1
8008fa60:	1021883a 	mov	r16,r2
8008fa64:	1887c83a 	sub	r3,r3,r2
8008fa68:	d8c02e15 	stw	r3,184(sp)
8008fa6c:	d8802e17 	ldw	r2,184(sp)
8008fa70:	d9002917 	ldw	r4,164(sp)
8008fa74:	1100010e 	bge	r2,r4,8008fa7c <___svfprintf_internal_r+0x6b0>
8008fa78:	2005883a 	mov	r2,r4
8008fa7c:	d8802a15 	stw	r2,168(sp)
8008fa80:	d8003215 	stw	zero,200(sp)
8008fa84:	e7003fcc 	andi	fp,fp,255
8008fa88:	e700201c 	xori	fp,fp,128
8008fa8c:	e73fe004 	addi	fp,fp,-128
8008fa90:	e0000326 	beq	fp,zero,8008faa0 <___svfprintf_internal_r+0x6d4>
8008fa94:	d8c02a17 	ldw	r3,168(sp)
8008fa98:	18c00044 	addi	r3,r3,1
8008fa9c:	d8c02a15 	stw	r3,168(sp)
8008faa0:	90c0008c 	andi	r3,r18,2
8008faa4:	d8c02b15 	stw	r3,172(sp)
8008faa8:	18000326 	beq	r3,zero,8008fab8 <___svfprintf_internal_r+0x6ec>
8008faac:	d8c02a17 	ldw	r3,168(sp)
8008fab0:	18c00084 	addi	r3,r3,2
8008fab4:	d8c02a15 	stw	r3,168(sp)
8008fab8:	90c0210c 	andi	r3,r18,132
8008fabc:	d8c03015 	stw	r3,192(sp)
8008fac0:	1801a11e 	bne	r3,zero,80090148 <___svfprintf_internal_r+0xd7c>
8008fac4:	d9003117 	ldw	r4,196(sp)
8008fac8:	d8c02a17 	ldw	r3,168(sp)
8008facc:	20e9c83a 	sub	r20,r4,r3
8008fad0:	05019d0e 	bge	zero,r20,80090148 <___svfprintf_internal_r+0xd7c>
8008fad4:	02400404 	movi	r9,16
8008fad8:	d8c02017 	ldw	r3,128(sp)
8008fadc:	d8801f17 	ldw	r2,124(sp)
8008fae0:	4d051b0e 	bge	r9,r20,80090f50 <___svfprintf_internal_r+0x1b84>
8008fae4:	016002b4 	movhi	r5,32778
8008fae8:	29798c84 	addi	r5,r5,-6606
8008faec:	dc403c15 	stw	r17,240(sp)
8008faf0:	d9403515 	stw	r5,212(sp)
8008faf4:	a023883a 	mov	r17,r20
8008faf8:	482d883a 	mov	r22,r9
8008fafc:	9029883a 	mov	r20,r18
8008fb00:	070001c4 	movi	fp,7
8008fb04:	8025883a 	mov	r18,r16
8008fb08:	dc002c17 	ldw	r16,176(sp)
8008fb0c:	00000306 	br	8008fb1c <___svfprintf_internal_r+0x750>
8008fb10:	8c7ffc04 	addi	r17,r17,-16
8008fb14:	42000204 	addi	r8,r8,8
8008fb18:	b440130e 	bge	r22,r17,8008fb68 <___svfprintf_internal_r+0x79c>
8008fb1c:	012002b4 	movhi	r4,32778
8008fb20:	18c00404 	addi	r3,r3,16
8008fb24:	10800044 	addi	r2,r2,1
8008fb28:	21398c84 	addi	r4,r4,-6606
8008fb2c:	41000015 	stw	r4,0(r8)
8008fb30:	45800115 	stw	r22,4(r8)
8008fb34:	d8c02015 	stw	r3,128(sp)
8008fb38:	d8801f15 	stw	r2,124(sp)
8008fb3c:	e0bff40e 	bge	fp,r2,8008fb10 <___svfprintf_internal_r+0x744>
8008fb40:	d9801e04 	addi	r6,sp,120
8008fb44:	800b883a 	mov	r5,r16
8008fb48:	9809883a 	mov	r4,r19
8008fb4c:	00940a00 	call	800940a0 <__ssprint_r>
8008fb50:	103f031e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
8008fb54:	8c7ffc04 	addi	r17,r17,-16
8008fb58:	d8c02017 	ldw	r3,128(sp)
8008fb5c:	d8801f17 	ldw	r2,124(sp)
8008fb60:	da000404 	addi	r8,sp,16
8008fb64:	b47fed16 	blt	r22,r17,8008fb1c <___svfprintf_internal_r+0x750>
8008fb68:	9021883a 	mov	r16,r18
8008fb6c:	a025883a 	mov	r18,r20
8008fb70:	8829883a 	mov	r20,r17
8008fb74:	dc403c17 	ldw	r17,240(sp)
8008fb78:	d9403517 	ldw	r5,212(sp)
8008fb7c:	a0c7883a 	add	r3,r20,r3
8008fb80:	10800044 	addi	r2,r2,1
8008fb84:	41400015 	stw	r5,0(r8)
8008fb88:	45000115 	stw	r20,4(r8)
8008fb8c:	d8c02015 	stw	r3,128(sp)
8008fb90:	d8801f15 	stw	r2,124(sp)
8008fb94:	010001c4 	movi	r4,7
8008fb98:	20829f16 	blt	r4,r2,80090618 <___svfprintf_internal_r+0x124c>
8008fb9c:	df002787 	ldb	fp,158(sp)
8008fba0:	42000204 	addi	r8,r8,8
8008fba4:	e0000c26 	beq	fp,zero,8008fbd8 <___svfprintf_internal_r+0x80c>
8008fba8:	d8801f17 	ldw	r2,124(sp)
8008fbac:	d9002784 	addi	r4,sp,158
8008fbb0:	18c00044 	addi	r3,r3,1
8008fbb4:	10800044 	addi	r2,r2,1
8008fbb8:	41000015 	stw	r4,0(r8)
8008fbbc:	01000044 	movi	r4,1
8008fbc0:	41000115 	stw	r4,4(r8)
8008fbc4:	d8c02015 	stw	r3,128(sp)
8008fbc8:	d8801f15 	stw	r2,124(sp)
8008fbcc:	010001c4 	movi	r4,7
8008fbd0:	20823816 	blt	r4,r2,800904b4 <___svfprintf_internal_r+0x10e8>
8008fbd4:	42000204 	addi	r8,r8,8
8008fbd8:	d8802b17 	ldw	r2,172(sp)
8008fbdc:	10000c26 	beq	r2,zero,8008fc10 <___svfprintf_internal_r+0x844>
8008fbe0:	d8801f17 	ldw	r2,124(sp)
8008fbe4:	d9002704 	addi	r4,sp,156
8008fbe8:	18c00084 	addi	r3,r3,2
8008fbec:	10800044 	addi	r2,r2,1
8008fbf0:	41000015 	stw	r4,0(r8)
8008fbf4:	01000084 	movi	r4,2
8008fbf8:	41000115 	stw	r4,4(r8)
8008fbfc:	d8c02015 	stw	r3,128(sp)
8008fc00:	d8801f15 	stw	r2,124(sp)
8008fc04:	010001c4 	movi	r4,7
8008fc08:	20823216 	blt	r4,r2,800904d4 <___svfprintf_internal_r+0x1108>
8008fc0c:	42000204 	addi	r8,r8,8
8008fc10:	d9003017 	ldw	r4,192(sp)
8008fc14:	00802004 	movi	r2,128
8008fc18:	20819726 	beq	r4,r2,80090278 <___svfprintf_internal_r+0xeac>
8008fc1c:	d9402917 	ldw	r5,164(sp)
8008fc20:	d8802e17 	ldw	r2,184(sp)
8008fc24:	28adc83a 	sub	r22,r5,r2
8008fc28:	05802f0e 	bge	zero,r22,8008fce8 <___svfprintf_internal_r+0x91c>
8008fc2c:	07000404 	movi	fp,16
8008fc30:	d8801f17 	ldw	r2,124(sp)
8008fc34:	e583c00e 	bge	fp,r22,80090b38 <___svfprintf_internal_r+0x176c>
8008fc38:	016002b4 	movhi	r5,32778
8008fc3c:	29798884 	addi	r5,r5,-6622
8008fc40:	dc402915 	stw	r17,164(sp)
8008fc44:	d9402b15 	stw	r5,172(sp)
8008fc48:	b023883a 	mov	r17,r22
8008fc4c:	050001c4 	movi	r20,7
8008fc50:	902d883a 	mov	r22,r18
8008fc54:	8025883a 	mov	r18,r16
8008fc58:	dc002c17 	ldw	r16,176(sp)
8008fc5c:	00000306 	br	8008fc6c <___svfprintf_internal_r+0x8a0>
8008fc60:	8c7ffc04 	addi	r17,r17,-16
8008fc64:	42000204 	addi	r8,r8,8
8008fc68:	e440110e 	bge	fp,r17,8008fcb0 <___svfprintf_internal_r+0x8e4>
8008fc6c:	18c00404 	addi	r3,r3,16
8008fc70:	10800044 	addi	r2,r2,1
8008fc74:	45400015 	stw	r21,0(r8)
8008fc78:	47000115 	stw	fp,4(r8)
8008fc7c:	d8c02015 	stw	r3,128(sp)
8008fc80:	d8801f15 	stw	r2,124(sp)
8008fc84:	a0bff60e 	bge	r20,r2,8008fc60 <___svfprintf_internal_r+0x894>
8008fc88:	d9801e04 	addi	r6,sp,120
8008fc8c:	800b883a 	mov	r5,r16
8008fc90:	9809883a 	mov	r4,r19
8008fc94:	00940a00 	call	800940a0 <__ssprint_r>
8008fc98:	103eb11e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
8008fc9c:	8c7ffc04 	addi	r17,r17,-16
8008fca0:	d8c02017 	ldw	r3,128(sp)
8008fca4:	d8801f17 	ldw	r2,124(sp)
8008fca8:	da000404 	addi	r8,sp,16
8008fcac:	e47fef16 	blt	fp,r17,8008fc6c <___svfprintf_internal_r+0x8a0>
8008fcb0:	9021883a 	mov	r16,r18
8008fcb4:	b025883a 	mov	r18,r22
8008fcb8:	882d883a 	mov	r22,r17
8008fcbc:	dc402917 	ldw	r17,164(sp)
8008fcc0:	d9002b17 	ldw	r4,172(sp)
8008fcc4:	1d87883a 	add	r3,r3,r22
8008fcc8:	10800044 	addi	r2,r2,1
8008fccc:	41000015 	stw	r4,0(r8)
8008fcd0:	45800115 	stw	r22,4(r8)
8008fcd4:	d8c02015 	stw	r3,128(sp)
8008fcd8:	d8801f15 	stw	r2,124(sp)
8008fcdc:	010001c4 	movi	r4,7
8008fce0:	2081ec16 	blt	r4,r2,80090494 <___svfprintf_internal_r+0x10c8>
8008fce4:	42000204 	addi	r8,r8,8
8008fce8:	9080400c 	andi	r2,r18,256
8008fcec:	1001181e 	bne	r2,zero,80090150 <___svfprintf_internal_r+0xd84>
8008fcf0:	d9402e17 	ldw	r5,184(sp)
8008fcf4:	d8801f17 	ldw	r2,124(sp)
8008fcf8:	44000015 	stw	r16,0(r8)
8008fcfc:	1947883a 	add	r3,r3,r5
8008fd00:	10800044 	addi	r2,r2,1
8008fd04:	41400115 	stw	r5,4(r8)
8008fd08:	d8c02015 	stw	r3,128(sp)
8008fd0c:	d8801f15 	stw	r2,124(sp)
8008fd10:	010001c4 	movi	r4,7
8008fd14:	2081d116 	blt	r4,r2,8009045c <___svfprintf_internal_r+0x1090>
8008fd18:	42000204 	addi	r8,r8,8
8008fd1c:	9480010c 	andi	r18,r18,4
8008fd20:	90003226 	beq	r18,zero,8008fdec <___svfprintf_internal_r+0xa20>
8008fd24:	d9403117 	ldw	r5,196(sp)
8008fd28:	d8802a17 	ldw	r2,168(sp)
8008fd2c:	28a1c83a 	sub	r16,r5,r2
8008fd30:	04002e0e 	bge	zero,r16,8008fdec <___svfprintf_internal_r+0xa20>
8008fd34:	04400404 	movi	r17,16
8008fd38:	d8801f17 	ldw	r2,124(sp)
8008fd3c:	8c04b90e 	bge	r17,r16,80091024 <___svfprintf_internal_r+0x1c58>
8008fd40:	016002b4 	movhi	r5,32778
8008fd44:	29798c84 	addi	r5,r5,-6606
8008fd48:	d9403515 	stw	r5,212(sp)
8008fd4c:	048001c4 	movi	r18,7
8008fd50:	dd002c17 	ldw	r20,176(sp)
8008fd54:	00000306 	br	8008fd64 <___svfprintf_internal_r+0x998>
8008fd58:	843ffc04 	addi	r16,r16,-16
8008fd5c:	42000204 	addi	r8,r8,8
8008fd60:	8c00130e 	bge	r17,r16,8008fdb0 <___svfprintf_internal_r+0x9e4>
8008fd64:	012002b4 	movhi	r4,32778
8008fd68:	18c00404 	addi	r3,r3,16
8008fd6c:	10800044 	addi	r2,r2,1
8008fd70:	21398c84 	addi	r4,r4,-6606
8008fd74:	41000015 	stw	r4,0(r8)
8008fd78:	44400115 	stw	r17,4(r8)
8008fd7c:	d8c02015 	stw	r3,128(sp)
8008fd80:	d8801f15 	stw	r2,124(sp)
8008fd84:	90bff40e 	bge	r18,r2,8008fd58 <___svfprintf_internal_r+0x98c>
8008fd88:	d9801e04 	addi	r6,sp,120
8008fd8c:	a00b883a 	mov	r5,r20
8008fd90:	9809883a 	mov	r4,r19
8008fd94:	00940a00 	call	800940a0 <__ssprint_r>
8008fd98:	103e711e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
8008fd9c:	843ffc04 	addi	r16,r16,-16
8008fda0:	d8c02017 	ldw	r3,128(sp)
8008fda4:	d8801f17 	ldw	r2,124(sp)
8008fda8:	da000404 	addi	r8,sp,16
8008fdac:	8c3fed16 	blt	r17,r16,8008fd64 <___svfprintf_internal_r+0x998>
8008fdb0:	d9403517 	ldw	r5,212(sp)
8008fdb4:	1c07883a 	add	r3,r3,r16
8008fdb8:	10800044 	addi	r2,r2,1
8008fdbc:	41400015 	stw	r5,0(r8)
8008fdc0:	44000115 	stw	r16,4(r8)
8008fdc4:	d8c02015 	stw	r3,128(sp)
8008fdc8:	d8801f15 	stw	r2,124(sp)
8008fdcc:	010001c4 	movi	r4,7
8008fdd0:	2080060e 	bge	r4,r2,8008fdec <___svfprintf_internal_r+0xa20>
8008fdd4:	d9402c17 	ldw	r5,176(sp)
8008fdd8:	d9801e04 	addi	r6,sp,120
8008fddc:	9809883a 	mov	r4,r19
8008fde0:	00940a00 	call	800940a0 <__ssprint_r>
8008fde4:	103e5e1e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
8008fde8:	d8c02017 	ldw	r3,128(sp)
8008fdec:	d8803117 	ldw	r2,196(sp)
8008fdf0:	d9002a17 	ldw	r4,168(sp)
8008fdf4:	1100010e 	bge	r2,r4,8008fdfc <___svfprintf_internal_r+0xa30>
8008fdf8:	2005883a 	mov	r2,r4
8008fdfc:	d9402f17 	ldw	r5,188(sp)
8008fe00:	288b883a 	add	r5,r5,r2
8008fe04:	d9402f15 	stw	r5,188(sp)
8008fe08:	18019c1e 	bne	r3,zero,8009047c <___svfprintf_internal_r+0x10b0>
8008fe0c:	b8800007 	ldb	r2,0(r23)
8008fe10:	d8001f15 	stw	zero,124(sp)
8008fe14:	da000404 	addi	r8,sp,16
8008fe18:	103d991e 	bne	r2,zero,8008f480 <___svfprintf_internal_r+0xb4>
8008fe1c:	b821883a 	mov	r16,r23
8008fe20:	003daf06 	br	8008f4e0 <___svfprintf_internal_r+0x114>
8008fe24:	18c03fcc 	andi	r3,r3,255
8008fe28:	1805c71e 	bne	r3,zero,80091548 <___svfprintf_internal_r+0x217c>
8008fe2c:	94800414 	ori	r18,r18,16
8008fe30:	9080080c 	andi	r2,r18,32
8008fe34:	10020126 	beq	r2,zero,8009063c <___svfprintf_internal_r+0x1270>
8008fe38:	d8802d17 	ldw	r2,180(sp)
8008fe3c:	d9002917 	ldw	r4,164(sp)
8008fe40:	d8002785 	stb	zero,158(sp)
8008fe44:	10c00204 	addi	r3,r2,8
8008fe48:	15000017 	ldw	r20,0(r2)
8008fe4c:	15800117 	ldw	r22,4(r2)
8008fe50:	20038e16 	blt	r4,zero,80090c8c <___svfprintf_internal_r+0x18c0>
8008fe54:	013fdfc4 	movi	r4,-129
8008fe58:	a584b03a 	or	r2,r20,r22
8008fe5c:	d8c02d15 	stw	r3,180(sp)
8008fe60:	9124703a 	and	r18,r18,r4
8008fe64:	0039883a 	mov	fp,zero
8008fe68:	103eb61e 	bne	r2,zero,8008f944 <___svfprintf_internal_r+0x578>
8008fe6c:	d8802917 	ldw	r2,164(sp)
8008fe70:	1002c81e 	bne	r2,zero,80090994 <___svfprintf_internal_r+0x15c8>
8008fe74:	d8002915 	stw	zero,164(sp)
8008fe78:	d8002e15 	stw	zero,184(sp)
8008fe7c:	dc001e04 	addi	r16,sp,120
8008fe80:	003efa06 	br	8008fa6c <___svfprintf_internal_r+0x6a0>
8008fe84:	18c03fcc 	andi	r3,r3,255
8008fe88:	1805ad1e 	bne	r3,zero,80091540 <___svfprintf_internal_r+0x2174>
8008fe8c:	016002b4 	movhi	r5,32778
8008fe90:	29786304 	addi	r5,r5,-7796
8008fe94:	d9403a15 	stw	r5,232(sp)
8008fe98:	9080080c 	andi	r2,r18,32
8008fe9c:	10006126 	beq	r2,zero,80090024 <___svfprintf_internal_r+0xc58>
8008fea0:	d8802d17 	ldw	r2,180(sp)
8008fea4:	15000017 	ldw	r20,0(r2)
8008fea8:	15800117 	ldw	r22,4(r2)
8008feac:	10800204 	addi	r2,r2,8
8008feb0:	d8802d15 	stw	r2,180(sp)
8008feb4:	9080004c 	andi	r2,r18,1
8008feb8:	10018e26 	beq	r2,zero,800904f4 <___svfprintf_internal_r+0x1128>
8008febc:	a584b03a 	or	r2,r20,r22
8008fec0:	10030926 	beq	r2,zero,80090ae8 <___svfprintf_internal_r+0x171c>
8008fec4:	d8c02917 	ldw	r3,164(sp)
8008fec8:	00800c04 	movi	r2,48
8008fecc:	d8802705 	stb	r2,156(sp)
8008fed0:	dc402745 	stb	r17,157(sp)
8008fed4:	d8002785 	stb	zero,158(sp)
8008fed8:	90800094 	ori	r2,r18,2
8008fedc:	18048716 	blt	r3,zero,800910fc <___svfprintf_internal_r+0x1d30>
8008fee0:	00bfdfc4 	movi	r2,-129
8008fee4:	90a4703a 	and	r18,r18,r2
8008fee8:	94800094 	ori	r18,r18,2
8008feec:	0039883a 	mov	fp,zero
8008fef0:	d9003a17 	ldw	r4,232(sp)
8008fef4:	dc001e04 	addi	r16,sp,120
8008fef8:	a08003cc 	andi	r2,r20,15
8008fefc:	b006973a 	slli	r3,r22,28
8008ff00:	2085883a 	add	r2,r4,r2
8008ff04:	a028d13a 	srli	r20,r20,4
8008ff08:	10800003 	ldbu	r2,0(r2)
8008ff0c:	b02cd13a 	srli	r22,r22,4
8008ff10:	843fffc4 	addi	r16,r16,-1
8008ff14:	1d28b03a 	or	r20,r3,r20
8008ff18:	80800005 	stb	r2,0(r16)
8008ff1c:	a584b03a 	or	r2,r20,r22
8008ff20:	103ff51e 	bne	r2,zero,8008fef8 <___svfprintf_internal_r+0xb2c>
8008ff24:	d8c02817 	ldw	r3,160(sp)
8008ff28:	1c07c83a 	sub	r3,r3,r16
8008ff2c:	d8c02e15 	stw	r3,184(sp)
8008ff30:	003ece06 	br	8008fa6c <___svfprintf_internal_r+0x6a0>
8008ff34:	d8c02d17 	ldw	r3,180(sp)
8008ff38:	d9002d17 	ldw	r4,180(sp)
8008ff3c:	d8002785 	stb	zero,158(sp)
8008ff40:	18800017 	ldw	r2,0(r3)
8008ff44:	21000104 	addi	r4,r4,4
8008ff48:	00c00044 	movi	r3,1
8008ff4c:	d8c02a15 	stw	r3,168(sp)
8008ff50:	d8801405 	stb	r2,80(sp)
8008ff54:	d9002d15 	stw	r4,180(sp)
8008ff58:	d8c02e15 	stw	r3,184(sp)
8008ff5c:	d8002915 	stw	zero,164(sp)
8008ff60:	d8003215 	stw	zero,200(sp)
8008ff64:	dc001404 	addi	r16,sp,80
8008ff68:	0039883a 	mov	fp,zero
8008ff6c:	003ecc06 	br	8008faa0 <___svfprintf_internal_r+0x6d4>
8008ff70:	18c03fcc 	andi	r3,r3,255
8008ff74:	183e9226 	beq	r3,zero,8008f9c0 <___svfprintf_internal_r+0x5f4>
8008ff78:	d9c02785 	stb	r7,158(sp)
8008ff7c:	003e9006 	br	8008f9c0 <___svfprintf_internal_r+0x5f4>
8008ff80:	00c00044 	movi	r3,1
8008ff84:	01c00ac4 	movi	r7,43
8008ff88:	bc400007 	ldb	r17,0(r23)
8008ff8c:	003d6306 	br	8008f51c <___svfprintf_internal_r+0x150>
8008ff90:	94800814 	ori	r18,r18,32
8008ff94:	bc400007 	ldb	r17,0(r23)
8008ff98:	003d6006 	br	8008f51c <___svfprintf_internal_r+0x150>
8008ff9c:	d8c02d17 	ldw	r3,180(sp)
8008ffa0:	d8002785 	stb	zero,158(sp)
8008ffa4:	1c000017 	ldw	r16,0(r3)
8008ffa8:	1d000104 	addi	r20,r3,4
8008ffac:	80040f26 	beq	r16,zero,80090fec <___svfprintf_internal_r+0x1c20>
8008ffb0:	d9002917 	ldw	r4,164(sp)
8008ffb4:	2003dc16 	blt	r4,zero,80090f28 <___svfprintf_internal_r+0x1b5c>
8008ffb8:	200d883a 	mov	r6,r4
8008ffbc:	000b883a 	mov	r5,zero
8008ffc0:	8009883a 	mov	r4,r16
8008ffc4:	da003e15 	stw	r8,248(sp)
8008ffc8:	0089f180 	call	80089f18 <memchr>
8008ffcc:	da003e17 	ldw	r8,248(sp)
8008ffd0:	10045826 	beq	r2,zero,80091134 <___svfprintf_internal_r+0x1d68>
8008ffd4:	1405c83a 	sub	r2,r2,r16
8008ffd8:	d8802e15 	stw	r2,184(sp)
8008ffdc:	1003d816 	blt	r2,zero,80090f40 <___svfprintf_internal_r+0x1b74>
8008ffe0:	df002783 	ldbu	fp,158(sp)
8008ffe4:	d8802a15 	stw	r2,168(sp)
8008ffe8:	dd002d15 	stw	r20,180(sp)
8008ffec:	d8002915 	stw	zero,164(sp)
8008fff0:	d8003215 	stw	zero,200(sp)
8008fff4:	003ea306 	br	8008fa84 <___svfprintf_internal_r+0x6b8>
8008fff8:	18c03fcc 	andi	r3,r3,255
8008fffc:	183f8c26 	beq	r3,zero,8008fe30 <___svfprintf_internal_r+0xa64>
80090000:	d9c02785 	stb	r7,158(sp)
80090004:	003f8a06 	br	8008fe30 <___svfprintf_internal_r+0xa64>
80090008:	18c03fcc 	andi	r3,r3,255
8009000c:	1805631e 	bne	r3,zero,8009159c <___svfprintf_internal_r+0x21d0>
80090010:	016002b4 	movhi	r5,32778
80090014:	29786804 	addi	r5,r5,-7776
80090018:	d9403a15 	stw	r5,232(sp)
8009001c:	9080080c 	andi	r2,r18,32
80090020:	103f9f1e 	bne	r2,zero,8008fea0 <___svfprintf_internal_r+0xad4>
80090024:	9080040c 	andi	r2,r18,16
80090028:	10029c26 	beq	r2,zero,80090a9c <___svfprintf_internal_r+0x16d0>
8009002c:	d8c02d17 	ldw	r3,180(sp)
80090030:	002d883a 	mov	r22,zero
80090034:	1d000017 	ldw	r20,0(r3)
80090038:	18c00104 	addi	r3,r3,4
8009003c:	d8c02d15 	stw	r3,180(sp)
80090040:	003f9c06 	br	8008feb4 <___svfprintf_internal_r+0xae8>
80090044:	94800054 	ori	r18,r18,1
80090048:	bc400007 	ldb	r17,0(r23)
8009004c:	003d3306 	br	8008f51c <___svfprintf_internal_r+0x150>
80090050:	38803fcc 	andi	r2,r7,255
80090054:	1080201c 	xori	r2,r2,128
80090058:	10bfe004 	addi	r2,r2,-128
8009005c:	1002971e 	bne	r2,zero,80090abc <___svfprintf_internal_r+0x16f0>
80090060:	00c00044 	movi	r3,1
80090064:	01c00804 	movi	r7,32
80090068:	bc400007 	ldb	r17,0(r23)
8009006c:	003d2b06 	br	8008f51c <___svfprintf_internal_r+0x150>
80090070:	18c03fcc 	andi	r3,r3,255
80090074:	183e2326 	beq	r3,zero,8008f904 <___svfprintf_internal_r+0x538>
80090078:	d9c02785 	stb	r7,158(sp)
8009007c:	003e2106 	br	8008f904 <___svfprintf_internal_r+0x538>
80090080:	bc400007 	ldb	r17,0(r23)
80090084:	8a430426 	beq	r17,r9,80090c98 <___svfprintf_internal_r+0x18cc>
80090088:	94800414 	ori	r18,r18,16
8009008c:	003d2306 	br	8008f51c <___svfprintf_internal_r+0x150>
80090090:	18c03fcc 	andi	r3,r3,255
80090094:	18053f1e 	bne	r3,zero,80091594 <___svfprintf_internal_r+0x21c8>
80090098:	9080080c 	andi	r2,r18,32
8009009c:	10028926 	beq	r2,zero,80090ac4 <___svfprintf_internal_r+0x16f8>
800900a0:	d9402d17 	ldw	r5,180(sp)
800900a4:	d9002f17 	ldw	r4,188(sp)
800900a8:	28800017 	ldw	r2,0(r5)
800900ac:	2007d7fa 	srai	r3,r4,31
800900b0:	29400104 	addi	r5,r5,4
800900b4:	d9402d15 	stw	r5,180(sp)
800900b8:	11000015 	stw	r4,0(r2)
800900bc:	10c00115 	stw	r3,4(r2)
800900c0:	003ced06 	br	8008f478 <___svfprintf_internal_r+0xac>
800900c4:	94801014 	ori	r18,r18,64
800900c8:	bc400007 	ldb	r17,0(r23)
800900cc:	003d1306 	br	8008f51c <___svfprintf_internal_r+0x150>
800900d0:	012002b4 	movhi	r4,32778
800900d4:	21386804 	addi	r4,r4,-7776
800900d8:	0039883a 	mov	fp,zero
800900dc:	d9003a15 	stw	r4,232(sp)
800900e0:	04401e04 	movi	r17,120
800900e4:	003f8206 	br	8008fef0 <___svfprintf_internal_r+0xb24>
800900e8:	18c03fcc 	andi	r3,r3,255
800900ec:	1805221e 	bne	r3,zero,80091578 <___svfprintf_internal_r+0x21ac>
800900f0:	883d9526 	beq	r17,zero,8008f748 <___svfprintf_internal_r+0x37c>
800900f4:	00c00044 	movi	r3,1
800900f8:	d8c02a15 	stw	r3,168(sp)
800900fc:	dc401405 	stb	r17,80(sp)
80090100:	d8002785 	stb	zero,158(sp)
80090104:	003f9406 	br	8008ff58 <___svfprintf_internal_r+0xb8c>
80090108:	012002b4 	movhi	r4,32778
8009010c:	21386804 	addi	r4,r4,-7776
80090110:	d9003a15 	stw	r4,232(sp)
80090114:	d8c02d15 	stw	r3,180(sp)
80090118:	1025883a 	mov	r18,r2
8009011c:	04401e04 	movi	r17,120
80090120:	a584b03a 	or	r2,r20,r22
80090124:	1000fa1e 	bne	r2,zero,80090510 <___svfprintf_internal_r+0x1144>
80090128:	0039883a 	mov	fp,zero
8009012c:	00800084 	movi	r2,2
80090130:	10803fcc 	andi	r2,r2,255
80090134:	00c00044 	movi	r3,1
80090138:	10c21626 	beq	r2,r3,80090994 <___svfprintf_internal_r+0x15c8>
8009013c:	00c00084 	movi	r3,2
80090140:	10fe301e 	bne	r2,r3,8008fa04 <___svfprintf_internal_r+0x638>
80090144:	003d7606 	br	8008f720 <___svfprintf_internal_r+0x354>
80090148:	d8c02017 	ldw	r3,128(sp)
8009014c:	003e9506 	br	8008fba4 <___svfprintf_internal_r+0x7d8>
80090150:	00801944 	movi	r2,101
80090154:	14407c0e 	bge	r2,r17,80090348 <___svfprintf_internal_r+0xf7c>
80090158:	d9003617 	ldw	r4,216(sp)
8009015c:	d9403717 	ldw	r5,220(sp)
80090160:	000d883a 	mov	r6,zero
80090164:	000f883a 	mov	r7,zero
80090168:	d8c03d15 	stw	r3,244(sp)
8009016c:	da003e15 	stw	r8,248(sp)
80090170:	00975480 	call	80097548 <__eqdf2>
80090174:	d8c03d17 	ldw	r3,244(sp)
80090178:	da003e17 	ldw	r8,248(sp)
8009017c:	1000f51e 	bne	r2,zero,80090554 <___svfprintf_internal_r+0x1188>
80090180:	d8801f17 	ldw	r2,124(sp)
80090184:	012002b4 	movhi	r4,32778
80090188:	21386f04 	addi	r4,r4,-7748
8009018c:	18c00044 	addi	r3,r3,1
80090190:	10800044 	addi	r2,r2,1
80090194:	41000015 	stw	r4,0(r8)
80090198:	01000044 	movi	r4,1
8009019c:	41000115 	stw	r4,4(r8)
800901a0:	d8c02015 	stw	r3,128(sp)
800901a4:	d8801f15 	stw	r2,124(sp)
800901a8:	010001c4 	movi	r4,7
800901ac:	20826616 	blt	r4,r2,80090b48 <___svfprintf_internal_r+0x177c>
800901b0:	42000204 	addi	r8,r8,8
800901b4:	d8802617 	ldw	r2,152(sp)
800901b8:	d9403317 	ldw	r5,204(sp)
800901bc:	11400216 	blt	r2,r5,800901c8 <___svfprintf_internal_r+0xdfc>
800901c0:	9080004c 	andi	r2,r18,1
800901c4:	103ed526 	beq	r2,zero,8008fd1c <___svfprintf_internal_r+0x950>
800901c8:	d8803817 	ldw	r2,224(sp)
800901cc:	d9003417 	ldw	r4,208(sp)
800901d0:	d9403817 	ldw	r5,224(sp)
800901d4:	1887883a 	add	r3,r3,r2
800901d8:	d8801f17 	ldw	r2,124(sp)
800901dc:	41000015 	stw	r4,0(r8)
800901e0:	41400115 	stw	r5,4(r8)
800901e4:	10800044 	addi	r2,r2,1
800901e8:	d8c02015 	stw	r3,128(sp)
800901ec:	d8801f15 	stw	r2,124(sp)
800901f0:	010001c4 	movi	r4,7
800901f4:	2082af16 	blt	r4,r2,80090cb4 <___svfprintf_internal_r+0x18e8>
800901f8:	42000204 	addi	r8,r8,8
800901fc:	d8803317 	ldw	r2,204(sp)
80090200:	143fffc4 	addi	r16,r2,-1
80090204:	043ec50e 	bge	zero,r16,8008fd1c <___svfprintf_internal_r+0x950>
80090208:	04400404 	movi	r17,16
8009020c:	d8801f17 	ldw	r2,124(sp)
80090210:	8c00860e 	bge	r17,r16,8009042c <___svfprintf_internal_r+0x1060>
80090214:	016002b4 	movhi	r5,32778
80090218:	29798884 	addi	r5,r5,-6622
8009021c:	d9402b15 	stw	r5,172(sp)
80090220:	058001c4 	movi	r22,7
80090224:	dd002c17 	ldw	r20,176(sp)
80090228:	00000306 	br	80090238 <___svfprintf_internal_r+0xe6c>
8009022c:	42000204 	addi	r8,r8,8
80090230:	843ffc04 	addi	r16,r16,-16
80090234:	8c00800e 	bge	r17,r16,80090438 <___svfprintf_internal_r+0x106c>
80090238:	18c00404 	addi	r3,r3,16
8009023c:	10800044 	addi	r2,r2,1
80090240:	45400015 	stw	r21,0(r8)
80090244:	44400115 	stw	r17,4(r8)
80090248:	d8c02015 	stw	r3,128(sp)
8009024c:	d8801f15 	stw	r2,124(sp)
80090250:	b0bff60e 	bge	r22,r2,8009022c <___svfprintf_internal_r+0xe60>
80090254:	d9801e04 	addi	r6,sp,120
80090258:	a00b883a 	mov	r5,r20
8009025c:	9809883a 	mov	r4,r19
80090260:	00940a00 	call	800940a0 <__ssprint_r>
80090264:	103d3e1e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090268:	d8c02017 	ldw	r3,128(sp)
8009026c:	d8801f17 	ldw	r2,124(sp)
80090270:	da000404 	addi	r8,sp,16
80090274:	003fee06 	br	80090230 <___svfprintf_internal_r+0xe64>
80090278:	d9403117 	ldw	r5,196(sp)
8009027c:	d8802a17 	ldw	r2,168(sp)
80090280:	28adc83a 	sub	r22,r5,r2
80090284:	05be650e 	bge	zero,r22,8008fc1c <___svfprintf_internal_r+0x850>
80090288:	07000404 	movi	fp,16
8009028c:	d8801f17 	ldw	r2,124(sp)
80090290:	e583a20e 	bge	fp,r22,8009111c <___svfprintf_internal_r+0x1d50>
80090294:	016002b4 	movhi	r5,32778
80090298:	29798884 	addi	r5,r5,-6622
8009029c:	dc403015 	stw	r17,192(sp)
800902a0:	d9402b15 	stw	r5,172(sp)
800902a4:	b023883a 	mov	r17,r22
800902a8:	050001c4 	movi	r20,7
800902ac:	902d883a 	mov	r22,r18
800902b0:	8025883a 	mov	r18,r16
800902b4:	dc002c17 	ldw	r16,176(sp)
800902b8:	00000306 	br	800902c8 <___svfprintf_internal_r+0xefc>
800902bc:	8c7ffc04 	addi	r17,r17,-16
800902c0:	42000204 	addi	r8,r8,8
800902c4:	e440110e 	bge	fp,r17,8009030c <___svfprintf_internal_r+0xf40>
800902c8:	18c00404 	addi	r3,r3,16
800902cc:	10800044 	addi	r2,r2,1
800902d0:	45400015 	stw	r21,0(r8)
800902d4:	47000115 	stw	fp,4(r8)
800902d8:	d8c02015 	stw	r3,128(sp)
800902dc:	d8801f15 	stw	r2,124(sp)
800902e0:	a0bff60e 	bge	r20,r2,800902bc <___svfprintf_internal_r+0xef0>
800902e4:	d9801e04 	addi	r6,sp,120
800902e8:	800b883a 	mov	r5,r16
800902ec:	9809883a 	mov	r4,r19
800902f0:	00940a00 	call	800940a0 <__ssprint_r>
800902f4:	103d1a1e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
800902f8:	8c7ffc04 	addi	r17,r17,-16
800902fc:	d8c02017 	ldw	r3,128(sp)
80090300:	d8801f17 	ldw	r2,124(sp)
80090304:	da000404 	addi	r8,sp,16
80090308:	e47fef16 	blt	fp,r17,800902c8 <___svfprintf_internal_r+0xefc>
8009030c:	9021883a 	mov	r16,r18
80090310:	b025883a 	mov	r18,r22
80090314:	882d883a 	mov	r22,r17
80090318:	dc403017 	ldw	r17,192(sp)
8009031c:	d9002b17 	ldw	r4,172(sp)
80090320:	1d87883a 	add	r3,r3,r22
80090324:	10800044 	addi	r2,r2,1
80090328:	41000015 	stw	r4,0(r8)
8009032c:	45800115 	stw	r22,4(r8)
80090330:	d8c02015 	stw	r3,128(sp)
80090334:	d8801f15 	stw	r2,124(sp)
80090338:	010001c4 	movi	r4,7
8009033c:	20819a16 	blt	r4,r2,800909a8 <___svfprintf_internal_r+0x15dc>
80090340:	42000204 	addi	r8,r8,8
80090344:	003e3506 	br	8008fc1c <___svfprintf_internal_r+0x850>
80090348:	d9403317 	ldw	r5,204(sp)
8009034c:	00800044 	movi	r2,1
80090350:	18c00044 	addi	r3,r3,1
80090354:	1141710e 	bge	r2,r5,8009091c <___svfprintf_internal_r+0x1550>
80090358:	dc401f17 	ldw	r17,124(sp)
8009035c:	00800044 	movi	r2,1
80090360:	40800115 	stw	r2,4(r8)
80090364:	8c400044 	addi	r17,r17,1
80090368:	44000015 	stw	r16,0(r8)
8009036c:	d8c02015 	stw	r3,128(sp)
80090370:	dc401f15 	stw	r17,124(sp)
80090374:	008001c4 	movi	r2,7
80090378:	14417416 	blt	r2,r17,8009094c <___svfprintf_internal_r+0x1580>
8009037c:	42000204 	addi	r8,r8,8
80090380:	d8803817 	ldw	r2,224(sp)
80090384:	d9003417 	ldw	r4,208(sp)
80090388:	8c400044 	addi	r17,r17,1
8009038c:	10c7883a 	add	r3,r2,r3
80090390:	40800115 	stw	r2,4(r8)
80090394:	41000015 	stw	r4,0(r8)
80090398:	d8c02015 	stw	r3,128(sp)
8009039c:	dc401f15 	stw	r17,124(sp)
800903a0:	008001c4 	movi	r2,7
800903a4:	14417216 	blt	r2,r17,80090970 <___svfprintf_internal_r+0x15a4>
800903a8:	45800204 	addi	r22,r8,8
800903ac:	d9003617 	ldw	r4,216(sp)
800903b0:	d9403717 	ldw	r5,220(sp)
800903b4:	000d883a 	mov	r6,zero
800903b8:	000f883a 	mov	r7,zero
800903bc:	d8c03d15 	stw	r3,244(sp)
800903c0:	00975480 	call	80097548 <__eqdf2>
800903c4:	d8c03d17 	ldw	r3,244(sp)
800903c8:	1000b326 	beq	r2,zero,80090698 <___svfprintf_internal_r+0x12cc>
800903cc:	d9403317 	ldw	r5,204(sp)
800903d0:	84000044 	addi	r16,r16,1
800903d4:	8c400044 	addi	r17,r17,1
800903d8:	28bfffc4 	addi	r2,r5,-1
800903dc:	1887883a 	add	r3,r3,r2
800903e0:	b0800115 	stw	r2,4(r22)
800903e4:	b4000015 	stw	r16,0(r22)
800903e8:	d8c02015 	stw	r3,128(sp)
800903ec:	dc401f15 	stw	r17,124(sp)
800903f0:	008001c4 	movi	r2,7
800903f4:	1440d216 	blt	r2,r17,80090740 <___svfprintf_internal_r+0x1374>
800903f8:	b5800204 	addi	r22,r22,8
800903fc:	d9003b17 	ldw	r4,236(sp)
80090400:	df0022c4 	addi	fp,sp,139
80090404:	8c400044 	addi	r17,r17,1
80090408:	20c7883a 	add	r3,r4,r3
8009040c:	b7000015 	stw	fp,0(r22)
80090410:	b1000115 	stw	r4,4(r22)
80090414:	d8c02015 	stw	r3,128(sp)
80090418:	dc401f15 	stw	r17,124(sp)
8009041c:	008001c4 	movi	r2,7
80090420:	14400e16 	blt	r2,r17,8009045c <___svfprintf_internal_r+0x1090>
80090424:	b2000204 	addi	r8,r22,8
80090428:	003e3c06 	br	8008fd1c <___svfprintf_internal_r+0x950>
8009042c:	012002b4 	movhi	r4,32778
80090430:	21398884 	addi	r4,r4,-6622
80090434:	d9002b15 	stw	r4,172(sp)
80090438:	d9002b17 	ldw	r4,172(sp)
8009043c:	1c07883a 	add	r3,r3,r16
80090440:	44000115 	stw	r16,4(r8)
80090444:	41000015 	stw	r4,0(r8)
80090448:	10800044 	addi	r2,r2,1
8009044c:	d8c02015 	stw	r3,128(sp)
80090450:	d8801f15 	stw	r2,124(sp)
80090454:	010001c4 	movi	r4,7
80090458:	20be2f0e 	bge	r4,r2,8008fd18 <___svfprintf_internal_r+0x94c>
8009045c:	d9402c17 	ldw	r5,176(sp)
80090460:	d9801e04 	addi	r6,sp,120
80090464:	9809883a 	mov	r4,r19
80090468:	00940a00 	call	800940a0 <__ssprint_r>
8009046c:	103cbc1e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090470:	d8c02017 	ldw	r3,128(sp)
80090474:	da000404 	addi	r8,sp,16
80090478:	003e2806 	br	8008fd1c <___svfprintf_internal_r+0x950>
8009047c:	d9402c17 	ldw	r5,176(sp)
80090480:	d9801e04 	addi	r6,sp,120
80090484:	9809883a 	mov	r4,r19
80090488:	00940a00 	call	800940a0 <__ssprint_r>
8009048c:	103e5f26 	beq	r2,zero,8008fe0c <___svfprintf_internal_r+0xa40>
80090490:	003cb306 	br	8008f760 <___svfprintf_internal_r+0x394>
80090494:	d9402c17 	ldw	r5,176(sp)
80090498:	d9801e04 	addi	r6,sp,120
8009049c:	9809883a 	mov	r4,r19
800904a0:	00940a00 	call	800940a0 <__ssprint_r>
800904a4:	103cae1e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
800904a8:	d8c02017 	ldw	r3,128(sp)
800904ac:	da000404 	addi	r8,sp,16
800904b0:	003e0d06 	br	8008fce8 <___svfprintf_internal_r+0x91c>
800904b4:	d9402c17 	ldw	r5,176(sp)
800904b8:	d9801e04 	addi	r6,sp,120
800904bc:	9809883a 	mov	r4,r19
800904c0:	00940a00 	call	800940a0 <__ssprint_r>
800904c4:	103ca61e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
800904c8:	d8c02017 	ldw	r3,128(sp)
800904cc:	da000404 	addi	r8,sp,16
800904d0:	003dc106 	br	8008fbd8 <___svfprintf_internal_r+0x80c>
800904d4:	d9402c17 	ldw	r5,176(sp)
800904d8:	d9801e04 	addi	r6,sp,120
800904dc:	9809883a 	mov	r4,r19
800904e0:	00940a00 	call	800940a0 <__ssprint_r>
800904e4:	103c9e1e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
800904e8:	d8c02017 	ldw	r3,128(sp)
800904ec:	da000404 	addi	r8,sp,16
800904f0:	003dc706 	br	8008fc10 <___svfprintf_internal_r+0x844>
800904f4:	d8802917 	ldw	r2,164(sp)
800904f8:	d8002785 	stb	zero,158(sp)
800904fc:	103f0816 	blt	r2,zero,80090120 <___svfprintf_internal_r+0xd54>
80090500:	00ffdfc4 	movi	r3,-129
80090504:	a584b03a 	or	r2,r20,r22
80090508:	90e4703a 	and	r18,r18,r3
8009050c:	103c8126 	beq	r2,zero,8008f714 <___svfprintf_internal_r+0x348>
80090510:	0039883a 	mov	fp,zero
80090514:	003e7606 	br	8008fef0 <___svfprintf_internal_r+0xb24>
80090518:	9080040c 	andi	r2,r18,16
8009051c:	10013d26 	beq	r2,zero,80090a14 <___svfprintf_internal_r+0x1648>
80090520:	d9002d17 	ldw	r4,180(sp)
80090524:	d9402917 	ldw	r5,164(sp)
80090528:	d8002785 	stb	zero,158(sp)
8009052c:	20800104 	addi	r2,r4,4
80090530:	25000017 	ldw	r20,0(r4)
80090534:	002d883a 	mov	r22,zero
80090538:	28013f16 	blt	r5,zero,80090a38 <___svfprintf_internal_r+0x166c>
8009053c:	00ffdfc4 	movi	r3,-129
80090540:	d8802d15 	stw	r2,180(sp)
80090544:	90e4703a 	and	r18,r18,r3
80090548:	a03d2b26 	beq	r20,zero,8008f9f8 <___svfprintf_internal_r+0x62c>
8009054c:	0039883a 	mov	fp,zero
80090550:	003d2e06 	br	8008fa0c <___svfprintf_internal_r+0x640>
80090554:	dc402617 	ldw	r17,152(sp)
80090558:	0441830e 	bge	zero,r17,80090b68 <___svfprintf_internal_r+0x179c>
8009055c:	dc403217 	ldw	r17,200(sp)
80090560:	d8803317 	ldw	r2,204(sp)
80090564:	1440010e 	bge	r2,r17,8009056c <___svfprintf_internal_r+0x11a0>
80090568:	1023883a 	mov	r17,r2
8009056c:	04400a0e 	bge	zero,r17,80090598 <___svfprintf_internal_r+0x11cc>
80090570:	d8801f17 	ldw	r2,124(sp)
80090574:	1c47883a 	add	r3,r3,r17
80090578:	44000015 	stw	r16,0(r8)
8009057c:	10800044 	addi	r2,r2,1
80090580:	44400115 	stw	r17,4(r8)
80090584:	d8c02015 	stw	r3,128(sp)
80090588:	d8801f15 	stw	r2,124(sp)
8009058c:	010001c4 	movi	r4,7
80090590:	20827516 	blt	r4,r2,80090f68 <___svfprintf_internal_r+0x1b9c>
80090594:	42000204 	addi	r8,r8,8
80090598:	88027b16 	blt	r17,zero,80090f88 <___svfprintf_internal_r+0x1bbc>
8009059c:	d9003217 	ldw	r4,200(sp)
800905a0:	2463c83a 	sub	r17,r4,r17
800905a4:	0440990e 	bge	zero,r17,8009080c <___svfprintf_internal_r+0x1440>
800905a8:	05800404 	movi	r22,16
800905ac:	d8801f17 	ldw	r2,124(sp)
800905b0:	b441530e 	bge	r22,r17,80090b00 <___svfprintf_internal_r+0x1734>
800905b4:	012002b4 	movhi	r4,32778
800905b8:	21398884 	addi	r4,r4,-6622
800905bc:	d9002b15 	stw	r4,172(sp)
800905c0:	070001c4 	movi	fp,7
800905c4:	dd002c17 	ldw	r20,176(sp)
800905c8:	00000306 	br	800905d8 <___svfprintf_internal_r+0x120c>
800905cc:	42000204 	addi	r8,r8,8
800905d0:	8c7ffc04 	addi	r17,r17,-16
800905d4:	b4414d0e 	bge	r22,r17,80090b0c <___svfprintf_internal_r+0x1740>
800905d8:	18c00404 	addi	r3,r3,16
800905dc:	10800044 	addi	r2,r2,1
800905e0:	45400015 	stw	r21,0(r8)
800905e4:	45800115 	stw	r22,4(r8)
800905e8:	d8c02015 	stw	r3,128(sp)
800905ec:	d8801f15 	stw	r2,124(sp)
800905f0:	e0bff60e 	bge	fp,r2,800905cc <___svfprintf_internal_r+0x1200>
800905f4:	d9801e04 	addi	r6,sp,120
800905f8:	a00b883a 	mov	r5,r20
800905fc:	9809883a 	mov	r4,r19
80090600:	00940a00 	call	800940a0 <__ssprint_r>
80090604:	103c561e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090608:	d8c02017 	ldw	r3,128(sp)
8009060c:	d8801f17 	ldw	r2,124(sp)
80090610:	da000404 	addi	r8,sp,16
80090614:	003fee06 	br	800905d0 <___svfprintf_internal_r+0x1204>
80090618:	d9402c17 	ldw	r5,176(sp)
8009061c:	d9801e04 	addi	r6,sp,120
80090620:	9809883a 	mov	r4,r19
80090624:	00940a00 	call	800940a0 <__ssprint_r>
80090628:	103c4d1e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
8009062c:	d8c02017 	ldw	r3,128(sp)
80090630:	df002787 	ldb	fp,158(sp)
80090634:	da000404 	addi	r8,sp,16
80090638:	003d5a06 	br	8008fba4 <___svfprintf_internal_r+0x7d8>
8009063c:	9080040c 	andi	r2,r18,16
80090640:	10005c26 	beq	r2,zero,800907b4 <___svfprintf_internal_r+0x13e8>
80090644:	d9402d17 	ldw	r5,180(sp)
80090648:	d8c02917 	ldw	r3,164(sp)
8009064c:	d8002785 	stb	zero,158(sp)
80090650:	28800104 	addi	r2,r5,4
80090654:	2d000017 	ldw	r20,0(r5)
80090658:	002d883a 	mov	r22,zero
8009065c:	18005e16 	blt	r3,zero,800907d8 <___svfprintf_internal_r+0x140c>
80090660:	00ffdfc4 	movi	r3,-129
80090664:	d8802d15 	stw	r2,180(sp)
80090668:	90e4703a 	and	r18,r18,r3
8009066c:	0039883a 	mov	fp,zero
80090670:	a03dfe26 	beq	r20,zero,8008fe6c <___svfprintf_internal_r+0xaa0>
80090674:	00800244 	movi	r2,9
80090678:	153cb336 	bltu	r2,r20,8008f948 <___svfprintf_internal_r+0x57c>
8009067c:	a5000c04 	addi	r20,r20,48
80090680:	dc001dc4 	addi	r16,sp,119
80090684:	dd001dc5 	stb	r20,119(sp)
80090688:	d8c02817 	ldw	r3,160(sp)
8009068c:	1c07c83a 	sub	r3,r3,r16
80090690:	d8c02e15 	stw	r3,184(sp)
80090694:	003cf506 	br	8008fa6c <___svfprintf_internal_r+0x6a0>
80090698:	d8803317 	ldw	r2,204(sp)
8009069c:	143fffc4 	addi	r16,r2,-1
800906a0:	043f560e 	bge	zero,r16,800903fc <___svfprintf_internal_r+0x1030>
800906a4:	07000404 	movi	fp,16
800906a8:	e403530e 	bge	fp,r16,800913f8 <___svfprintf_internal_r+0x202c>
800906ac:	016002b4 	movhi	r5,32778
800906b0:	29798884 	addi	r5,r5,-6622
800906b4:	d9402b15 	stw	r5,172(sp)
800906b8:	01c001c4 	movi	r7,7
800906bc:	dd002c17 	ldw	r20,176(sp)
800906c0:	00000306 	br	800906d0 <___svfprintf_internal_r+0x1304>
800906c4:	843ffc04 	addi	r16,r16,-16
800906c8:	b5800204 	addi	r22,r22,8
800906cc:	e400130e 	bge	fp,r16,8009071c <___svfprintf_internal_r+0x1350>
800906d0:	18c00404 	addi	r3,r3,16
800906d4:	8c400044 	addi	r17,r17,1
800906d8:	b5400015 	stw	r21,0(r22)
800906dc:	b7000115 	stw	fp,4(r22)
800906e0:	d8c02015 	stw	r3,128(sp)
800906e4:	dc401f15 	stw	r17,124(sp)
800906e8:	3c7ff60e 	bge	r7,r17,800906c4 <___svfprintf_internal_r+0x12f8>
800906ec:	d9801e04 	addi	r6,sp,120
800906f0:	a00b883a 	mov	r5,r20
800906f4:	9809883a 	mov	r4,r19
800906f8:	d9c03d15 	stw	r7,244(sp)
800906fc:	00940a00 	call	800940a0 <__ssprint_r>
80090700:	d9c03d17 	ldw	r7,244(sp)
80090704:	103c161e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090708:	843ffc04 	addi	r16,r16,-16
8009070c:	d8c02017 	ldw	r3,128(sp)
80090710:	dc401f17 	ldw	r17,124(sp)
80090714:	dd800404 	addi	r22,sp,16
80090718:	e43fed16 	blt	fp,r16,800906d0 <___svfprintf_internal_r+0x1304>
8009071c:	d8802b17 	ldw	r2,172(sp)
80090720:	1c07883a 	add	r3,r3,r16
80090724:	8c400044 	addi	r17,r17,1
80090728:	b0800015 	stw	r2,0(r22)
8009072c:	b4000115 	stw	r16,4(r22)
80090730:	d8c02015 	stw	r3,128(sp)
80090734:	dc401f15 	stw	r17,124(sp)
80090738:	008001c4 	movi	r2,7
8009073c:	147f2e0e 	bge	r2,r17,800903f8 <___svfprintf_internal_r+0x102c>
80090740:	d9402c17 	ldw	r5,176(sp)
80090744:	d9801e04 	addi	r6,sp,120
80090748:	9809883a 	mov	r4,r19
8009074c:	00940a00 	call	800940a0 <__ssprint_r>
80090750:	103c031e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090754:	d8c02017 	ldw	r3,128(sp)
80090758:	dc401f17 	ldw	r17,124(sp)
8009075c:	dd800404 	addi	r22,sp,16
80090760:	003f2606 	br	800903fc <___svfprintf_internal_r+0x1030>
80090764:	9080040c 	andi	r2,r18,16
80090768:	1000c326 	beq	r2,zero,80090a78 <___svfprintf_internal_r+0x16ac>
8009076c:	d8802d17 	ldw	r2,180(sp)
80090770:	15000017 	ldw	r20,0(r2)
80090774:	10800104 	addi	r2,r2,4
80090778:	d8802d15 	stw	r2,180(sp)
8009077c:	a02dd7fa 	srai	r22,r20,31
80090780:	b005883a 	mov	r2,r22
80090784:	103c680e 	bge	r2,zero,8008f928 <___svfprintf_internal_r+0x55c>
80090788:	0529c83a 	sub	r20,zero,r20
8009078c:	a004c03a 	cmpne	r2,r20,zero
80090790:	05adc83a 	sub	r22,zero,r22
80090794:	b0adc83a 	sub	r22,r22,r2
80090798:	d8802917 	ldw	r2,164(sp)
8009079c:	07000b44 	movi	fp,45
800907a0:	df002785 	stb	fp,158(sp)
800907a4:	10022e16 	blt	r2,zero,80091060 <___svfprintf_internal_r+0x1c94>
800907a8:	00bfdfc4 	movi	r2,-129
800907ac:	90a4703a 	and	r18,r18,r2
800907b0:	003c6406 	br	8008f944 <___svfprintf_internal_r+0x578>
800907b4:	9080100c 	andi	r2,r18,64
800907b8:	d8002785 	stb	zero,158(sp)
800907bc:	10012526 	beq	r2,zero,80090c54 <___svfprintf_internal_r+0x1888>
800907c0:	d9002d17 	ldw	r4,180(sp)
800907c4:	d9402917 	ldw	r5,164(sp)
800907c8:	002d883a 	mov	r22,zero
800907cc:	20800104 	addi	r2,r4,4
800907d0:	2500000b 	ldhu	r20,0(r4)
800907d4:	283fa20e 	bge	r5,zero,80090660 <___svfprintf_internal_r+0x1294>
800907d8:	d8802d15 	stw	r2,180(sp)
800907dc:	0039883a 	mov	fp,zero
800907e0:	a584b03a 	or	r2,r20,r22
800907e4:	103c571e 	bne	r2,zero,8008f944 <___svfprintf_internal_r+0x578>
800907e8:	00800044 	movi	r2,1
800907ec:	003e5006 	br	80090130 <___svfprintf_internal_r+0xd64>
800907f0:	d9402c17 	ldw	r5,176(sp)
800907f4:	d9801e04 	addi	r6,sp,120
800907f8:	9809883a 	mov	r4,r19
800907fc:	00940a00 	call	800940a0 <__ssprint_r>
80090800:	103bd71e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090804:	d8c02017 	ldw	r3,128(sp)
80090808:	da000404 	addi	r8,sp,16
8009080c:	d9003217 	ldw	r4,200(sp)
80090810:	d8802617 	ldw	r2,152(sp)
80090814:	d9403317 	ldw	r5,204(sp)
80090818:	8123883a 	add	r17,r16,r4
8009081c:	11400216 	blt	r2,r5,80090828 <___svfprintf_internal_r+0x145c>
80090820:	9100004c 	andi	r4,r18,1
80090824:	20000d26 	beq	r4,zero,8009085c <___svfprintf_internal_r+0x1490>
80090828:	d9003817 	ldw	r4,224(sp)
8009082c:	d9403417 	ldw	r5,208(sp)
80090830:	1907883a 	add	r3,r3,r4
80090834:	d9001f17 	ldw	r4,124(sp)
80090838:	41400015 	stw	r5,0(r8)
8009083c:	d9403817 	ldw	r5,224(sp)
80090840:	21000044 	addi	r4,r4,1
80090844:	d8c02015 	stw	r3,128(sp)
80090848:	41400115 	stw	r5,4(r8)
8009084c:	d9001f15 	stw	r4,124(sp)
80090850:	014001c4 	movi	r5,7
80090854:	2901dc16 	blt	r5,r4,80090fc8 <___svfprintf_internal_r+0x1bfc>
80090858:	42000204 	addi	r8,r8,8
8009085c:	d9003317 	ldw	r4,204(sp)
80090860:	8121883a 	add	r16,r16,r4
80090864:	2085c83a 	sub	r2,r4,r2
80090868:	8461c83a 	sub	r16,r16,r17
8009086c:	1400010e 	bge	r2,r16,80090874 <___svfprintf_internal_r+0x14a8>
80090870:	1021883a 	mov	r16,r2
80090874:	04000a0e 	bge	zero,r16,800908a0 <___svfprintf_internal_r+0x14d4>
80090878:	d9001f17 	ldw	r4,124(sp)
8009087c:	1c07883a 	add	r3,r3,r16
80090880:	44400015 	stw	r17,0(r8)
80090884:	21000044 	addi	r4,r4,1
80090888:	44000115 	stw	r16,4(r8)
8009088c:	d8c02015 	stw	r3,128(sp)
80090890:	d9001f15 	stw	r4,124(sp)
80090894:	014001c4 	movi	r5,7
80090898:	2901e616 	blt	r5,r4,80091034 <___svfprintf_internal_r+0x1c68>
8009089c:	42000204 	addi	r8,r8,8
800908a0:	8001f616 	blt	r16,zero,8009107c <___svfprintf_internal_r+0x1cb0>
800908a4:	1421c83a 	sub	r16,r2,r16
800908a8:	043d1c0e 	bge	zero,r16,8008fd1c <___svfprintf_internal_r+0x950>
800908ac:	04400404 	movi	r17,16
800908b0:	d8801f17 	ldw	r2,124(sp)
800908b4:	8c3edd0e 	bge	r17,r16,8009042c <___svfprintf_internal_r+0x1060>
800908b8:	016002b4 	movhi	r5,32778
800908bc:	29798884 	addi	r5,r5,-6622
800908c0:	d9402b15 	stw	r5,172(sp)
800908c4:	058001c4 	movi	r22,7
800908c8:	dd002c17 	ldw	r20,176(sp)
800908cc:	00000306 	br	800908dc <___svfprintf_internal_r+0x1510>
800908d0:	42000204 	addi	r8,r8,8
800908d4:	843ffc04 	addi	r16,r16,-16
800908d8:	8c3ed70e 	bge	r17,r16,80090438 <___svfprintf_internal_r+0x106c>
800908dc:	18c00404 	addi	r3,r3,16
800908e0:	10800044 	addi	r2,r2,1
800908e4:	45400015 	stw	r21,0(r8)
800908e8:	44400115 	stw	r17,4(r8)
800908ec:	d8c02015 	stw	r3,128(sp)
800908f0:	d8801f15 	stw	r2,124(sp)
800908f4:	b0bff60e 	bge	r22,r2,800908d0 <___svfprintf_internal_r+0x1504>
800908f8:	d9801e04 	addi	r6,sp,120
800908fc:	a00b883a 	mov	r5,r20
80090900:	9809883a 	mov	r4,r19
80090904:	00940a00 	call	800940a0 <__ssprint_r>
80090908:	103b951e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
8009090c:	d8c02017 	ldw	r3,128(sp)
80090910:	d8801f17 	ldw	r2,124(sp)
80090914:	da000404 	addi	r8,sp,16
80090918:	003fee06 	br	800908d4 <___svfprintf_internal_r+0x1508>
8009091c:	9088703a 	and	r4,r18,r2
80090920:	203e8d1e 	bne	r4,zero,80090358 <___svfprintf_internal_r+0xf8c>
80090924:	dc401f17 	ldw	r17,124(sp)
80090928:	40800115 	stw	r2,4(r8)
8009092c:	44000015 	stw	r16,0(r8)
80090930:	8c400044 	addi	r17,r17,1
80090934:	d8c02015 	stw	r3,128(sp)
80090938:	dc401f15 	stw	r17,124(sp)
8009093c:	008001c4 	movi	r2,7
80090940:	147f7f16 	blt	r2,r17,80090740 <___svfprintf_internal_r+0x1374>
80090944:	45800204 	addi	r22,r8,8
80090948:	003eac06 	br	800903fc <___svfprintf_internal_r+0x1030>
8009094c:	d9402c17 	ldw	r5,176(sp)
80090950:	d9801e04 	addi	r6,sp,120
80090954:	9809883a 	mov	r4,r19
80090958:	00940a00 	call	800940a0 <__ssprint_r>
8009095c:	103b801e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090960:	d8c02017 	ldw	r3,128(sp)
80090964:	dc401f17 	ldw	r17,124(sp)
80090968:	da000404 	addi	r8,sp,16
8009096c:	003e8406 	br	80090380 <___svfprintf_internal_r+0xfb4>
80090970:	d9402c17 	ldw	r5,176(sp)
80090974:	d9801e04 	addi	r6,sp,120
80090978:	9809883a 	mov	r4,r19
8009097c:	00940a00 	call	800940a0 <__ssprint_r>
80090980:	103b771e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090984:	d8c02017 	ldw	r3,128(sp)
80090988:	dc401f17 	ldw	r17,124(sp)
8009098c:	dd800404 	addi	r22,sp,16
80090990:	003e8606 	br	800903ac <___svfprintf_internal_r+0xfe0>
80090994:	0029883a 	mov	r20,zero
80090998:	a5000c04 	addi	r20,r20,48
8009099c:	dc001dc4 	addi	r16,sp,119
800909a0:	dd001dc5 	stb	r20,119(sp)
800909a4:	003f3806 	br	80090688 <___svfprintf_internal_r+0x12bc>
800909a8:	d9402c17 	ldw	r5,176(sp)
800909ac:	d9801e04 	addi	r6,sp,120
800909b0:	9809883a 	mov	r4,r19
800909b4:	00940a00 	call	800940a0 <__ssprint_r>
800909b8:	103b691e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
800909bc:	d8c02017 	ldw	r3,128(sp)
800909c0:	da000404 	addi	r8,sp,16
800909c4:	003c9506 	br	8008fc1c <___svfprintf_internal_r+0x850>
800909c8:	d9003617 	ldw	r4,216(sp)
800909cc:	d9403717 	ldw	r5,220(sp)
800909d0:	da003e15 	stw	r8,248(sp)
800909d4:	008bb980 	call	8008bb98 <__fpclassifyd>
800909d8:	da003e17 	ldw	r8,248(sp)
800909dc:	1000bd1e 	bne	r2,zero,80090cd4 <___svfprintf_internal_r+0x1908>
800909e0:	008011c4 	movi	r2,71
800909e4:	14411e0e 	bge	r2,r17,80090e60 <___svfprintf_internal_r+0x1a94>
800909e8:	042002b4 	movhi	r16,32778
800909ec:	84386204 	addi	r16,r16,-7800
800909f0:	00c000c4 	movi	r3,3
800909f4:	00bfdfc4 	movi	r2,-129
800909f8:	d8c02a15 	stw	r3,168(sp)
800909fc:	90a4703a 	and	r18,r18,r2
80090a00:	df002783 	ldbu	fp,158(sp)
80090a04:	d8c02e15 	stw	r3,184(sp)
80090a08:	d8002915 	stw	zero,164(sp)
80090a0c:	d8003215 	stw	zero,200(sp)
80090a10:	003c1c06 	br	8008fa84 <___svfprintf_internal_r+0x6b8>
80090a14:	9080100c 	andi	r2,r18,64
80090a18:	d8002785 	stb	zero,158(sp)
80090a1c:	10009426 	beq	r2,zero,80090c70 <___svfprintf_internal_r+0x18a4>
80090a20:	d8c02d17 	ldw	r3,180(sp)
80090a24:	d9002917 	ldw	r4,164(sp)
80090a28:	002d883a 	mov	r22,zero
80090a2c:	18800104 	addi	r2,r3,4
80090a30:	1d00000b 	ldhu	r20,0(r3)
80090a34:	203ec10e 	bge	r4,zero,8009053c <___svfprintf_internal_r+0x1170>
80090a38:	a586b03a 	or	r3,r20,r22
80090a3c:	d8802d15 	stw	r2,180(sp)
80090a40:	183ec21e 	bne	r3,zero,8009054c <___svfprintf_internal_r+0x1180>
80090a44:	0039883a 	mov	fp,zero
80090a48:	0005883a 	mov	r2,zero
80090a4c:	003db806 	br	80090130 <___svfprintf_internal_r+0xd64>
80090a50:	d8802d17 	ldw	r2,180(sp)
80090a54:	d8c02d17 	ldw	r3,180(sp)
80090a58:	d9002d17 	ldw	r4,180(sp)
80090a5c:	10800017 	ldw	r2,0(r2)
80090a60:	18c00117 	ldw	r3,4(r3)
80090a64:	21000204 	addi	r4,r4,8
80090a68:	d8803615 	stw	r2,216(sp)
80090a6c:	d8c03715 	stw	r3,220(sp)
80090a70:	d9002d15 	stw	r4,180(sp)
80090a74:	003b8206 	br	8008f880 <___svfprintf_internal_r+0x4b4>
80090a78:	9080100c 	andi	r2,r18,64
80090a7c:	10010726 	beq	r2,zero,80090e9c <___svfprintf_internal_r+0x1ad0>
80090a80:	d8c02d17 	ldw	r3,180(sp)
80090a84:	1d00000f 	ldh	r20,0(r3)
80090a88:	18c00104 	addi	r3,r3,4
80090a8c:	d8c02d15 	stw	r3,180(sp)
80090a90:	a02dd7fa 	srai	r22,r20,31
80090a94:	b005883a 	mov	r2,r22
80090a98:	003ba206 	br	8008f924 <___svfprintf_internal_r+0x558>
80090a9c:	9080100c 	andi	r2,r18,64
80090aa0:	10010526 	beq	r2,zero,80090eb8 <___svfprintf_internal_r+0x1aec>
80090aa4:	d9002d17 	ldw	r4,180(sp)
80090aa8:	002d883a 	mov	r22,zero
80090aac:	2500000b 	ldhu	r20,0(r4)
80090ab0:	21000104 	addi	r4,r4,4
80090ab4:	d9002d15 	stw	r4,180(sp)
80090ab8:	003cfe06 	br	8008feb4 <___svfprintf_internal_r+0xae8>
80090abc:	bc400007 	ldb	r17,0(r23)
80090ac0:	003a9606 	br	8008f51c <___svfprintf_internal_r+0x150>
80090ac4:	9080040c 	andi	r2,r18,16
80090ac8:	10010126 	beq	r2,zero,80090ed0 <___svfprintf_internal_r+0x1b04>
80090acc:	d9402d17 	ldw	r5,180(sp)
80090ad0:	d8c02f17 	ldw	r3,188(sp)
80090ad4:	28800017 	ldw	r2,0(r5)
80090ad8:	29400104 	addi	r5,r5,4
80090adc:	d9402d15 	stw	r5,180(sp)
80090ae0:	10c00015 	stw	r3,0(r2)
80090ae4:	003a6406 	br	8008f478 <___svfprintf_internal_r+0xac>
80090ae8:	d9002917 	ldw	r4,164(sp)
80090aec:	d8002785 	stb	zero,158(sp)
80090af0:	203d8d16 	blt	r4,zero,80090128 <___svfprintf_internal_r+0xd5c>
80090af4:	00bfdfc4 	movi	r2,-129
80090af8:	90a4703a 	and	r18,r18,r2
80090afc:	003b0506 	br	8008f714 <___svfprintf_internal_r+0x348>
80090b00:	016002b4 	movhi	r5,32778
80090b04:	29798884 	addi	r5,r5,-6622
80090b08:	d9402b15 	stw	r5,172(sp)
80090b0c:	d9402b17 	ldw	r5,172(sp)
80090b10:	1c47883a 	add	r3,r3,r17
80090b14:	10800044 	addi	r2,r2,1
80090b18:	41400015 	stw	r5,0(r8)
80090b1c:	44400115 	stw	r17,4(r8)
80090b20:	d8c02015 	stw	r3,128(sp)
80090b24:	d8801f15 	stw	r2,124(sp)
80090b28:	010001c4 	movi	r4,7
80090b2c:	20bf3016 	blt	r4,r2,800907f0 <___svfprintf_internal_r+0x1424>
80090b30:	42000204 	addi	r8,r8,8
80090b34:	003f3506 	br	8009080c <___svfprintf_internal_r+0x1440>
80090b38:	012002b4 	movhi	r4,32778
80090b3c:	21398884 	addi	r4,r4,-6622
80090b40:	d9002b15 	stw	r4,172(sp)
80090b44:	003c5e06 	br	8008fcc0 <___svfprintf_internal_r+0x8f4>
80090b48:	d9402c17 	ldw	r5,176(sp)
80090b4c:	d9801e04 	addi	r6,sp,120
80090b50:	9809883a 	mov	r4,r19
80090b54:	00940a00 	call	800940a0 <__ssprint_r>
80090b58:	103b011e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090b5c:	d8c02017 	ldw	r3,128(sp)
80090b60:	da000404 	addi	r8,sp,16
80090b64:	003d9306 	br	800901b4 <___svfprintf_internal_r+0xde8>
80090b68:	d8801f17 	ldw	r2,124(sp)
80090b6c:	016002b4 	movhi	r5,32778
80090b70:	01000044 	movi	r4,1
80090b74:	18c00044 	addi	r3,r3,1
80090b78:	10800044 	addi	r2,r2,1
80090b7c:	29786f04 	addi	r5,r5,-7748
80090b80:	41000115 	stw	r4,4(r8)
80090b84:	41400015 	stw	r5,0(r8)
80090b88:	d8c02015 	stw	r3,128(sp)
80090b8c:	d8801f15 	stw	r2,124(sp)
80090b90:	010001c4 	movi	r4,7
80090b94:	2080b516 	blt	r4,r2,80090e6c <___svfprintf_internal_r+0x1aa0>
80090b98:	42000204 	addi	r8,r8,8
80090b9c:	8800041e 	bne	r17,zero,80090bb0 <___svfprintf_internal_r+0x17e4>
80090ba0:	d8803317 	ldw	r2,204(sp)
80090ba4:	1000021e 	bne	r2,zero,80090bb0 <___svfprintf_internal_r+0x17e4>
80090ba8:	9080004c 	andi	r2,r18,1
80090bac:	103c5b26 	beq	r2,zero,8008fd1c <___svfprintf_internal_r+0x950>
80090bb0:	d9003817 	ldw	r4,224(sp)
80090bb4:	d8801f17 	ldw	r2,124(sp)
80090bb8:	d9403417 	ldw	r5,208(sp)
80090bbc:	20c7883a 	add	r3,r4,r3
80090bc0:	10800044 	addi	r2,r2,1
80090bc4:	41000115 	stw	r4,4(r8)
80090bc8:	41400015 	stw	r5,0(r8)
80090bcc:	d8c02015 	stw	r3,128(sp)
80090bd0:	d8801f15 	stw	r2,124(sp)
80090bd4:	010001c4 	movi	r4,7
80090bd8:	20818016 	blt	r4,r2,800911dc <___svfprintf_internal_r+0x1e10>
80090bdc:	42000204 	addi	r8,r8,8
80090be0:	0463c83a 	sub	r17,zero,r17
80090be4:	0440cb0e 	bge	zero,r17,80090f14 <___svfprintf_internal_r+0x1b48>
80090be8:	05800404 	movi	r22,16
80090bec:	b440e80e 	bge	r22,r17,80090f90 <___svfprintf_internal_r+0x1bc4>
80090bf0:	016002b4 	movhi	r5,32778
80090bf4:	29798884 	addi	r5,r5,-6622
80090bf8:	d9402b15 	stw	r5,172(sp)
80090bfc:	070001c4 	movi	fp,7
80090c00:	dd002c17 	ldw	r20,176(sp)
80090c04:	00000306 	br	80090c14 <___svfprintf_internal_r+0x1848>
80090c08:	42000204 	addi	r8,r8,8
80090c0c:	8c7ffc04 	addi	r17,r17,-16
80090c10:	b440e20e 	bge	r22,r17,80090f9c <___svfprintf_internal_r+0x1bd0>
80090c14:	18c00404 	addi	r3,r3,16
80090c18:	10800044 	addi	r2,r2,1
80090c1c:	45400015 	stw	r21,0(r8)
80090c20:	45800115 	stw	r22,4(r8)
80090c24:	d8c02015 	stw	r3,128(sp)
80090c28:	d8801f15 	stw	r2,124(sp)
80090c2c:	e0bff60e 	bge	fp,r2,80090c08 <___svfprintf_internal_r+0x183c>
80090c30:	d9801e04 	addi	r6,sp,120
80090c34:	a00b883a 	mov	r5,r20
80090c38:	9809883a 	mov	r4,r19
80090c3c:	00940a00 	call	800940a0 <__ssprint_r>
80090c40:	103ac71e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090c44:	d8c02017 	ldw	r3,128(sp)
80090c48:	d8801f17 	ldw	r2,124(sp)
80090c4c:	da000404 	addi	r8,sp,16
80090c50:	003fee06 	br	80090c0c <___svfprintf_internal_r+0x1840>
80090c54:	d8c02d17 	ldw	r3,180(sp)
80090c58:	d9002917 	ldw	r4,164(sp)
80090c5c:	002d883a 	mov	r22,zero
80090c60:	18800104 	addi	r2,r3,4
80090c64:	1d000017 	ldw	r20,0(r3)
80090c68:	203e7d0e 	bge	r4,zero,80090660 <___svfprintf_internal_r+0x1294>
80090c6c:	003eda06 	br	800907d8 <___svfprintf_internal_r+0x140c>
80090c70:	d9402d17 	ldw	r5,180(sp)
80090c74:	d8c02917 	ldw	r3,164(sp)
80090c78:	002d883a 	mov	r22,zero
80090c7c:	28800104 	addi	r2,r5,4
80090c80:	2d000017 	ldw	r20,0(r5)
80090c84:	183e2d0e 	bge	r3,zero,8009053c <___svfprintf_internal_r+0x1170>
80090c88:	003f6b06 	br	80090a38 <___svfprintf_internal_r+0x166c>
80090c8c:	d8c02d15 	stw	r3,180(sp)
80090c90:	0039883a 	mov	fp,zero
80090c94:	003ed206 	br	800907e0 <___svfprintf_internal_r+0x1414>
80090c98:	bc400043 	ldbu	r17,1(r23)
80090c9c:	94800814 	ori	r18,r18,32
80090ca0:	bdc00044 	addi	r23,r23,1
80090ca4:	8c403fcc 	andi	r17,r17,255
80090ca8:	8c40201c 	xori	r17,r17,128
80090cac:	8c7fe004 	addi	r17,r17,-128
80090cb0:	003a1a06 	br	8008f51c <___svfprintf_internal_r+0x150>
80090cb4:	d9402c17 	ldw	r5,176(sp)
80090cb8:	d9801e04 	addi	r6,sp,120
80090cbc:	9809883a 	mov	r4,r19
80090cc0:	00940a00 	call	800940a0 <__ssprint_r>
80090cc4:	103aa61e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090cc8:	d8c02017 	ldw	r3,128(sp)
80090ccc:	da000404 	addi	r8,sp,16
80090cd0:	003d4a06 	br	800901fc <___svfprintf_internal_r+0xe30>
80090cd4:	d9002917 	ldw	r4,164(sp)
80090cd8:	05bff7c4 	movi	r22,-33
80090cdc:	00bfffc4 	movi	r2,-1
80090ce0:	8dac703a 	and	r22,r17,r22
80090ce4:	20806a26 	beq	r4,r2,80090e90 <___svfprintf_internal_r+0x1ac4>
80090ce8:	008011c4 	movi	r2,71
80090cec:	b0813726 	beq	r22,r2,800911cc <___svfprintf_internal_r+0x1e00>
80090cf0:	d9003717 	ldw	r4,220(sp)
80090cf4:	90c04014 	ori	r3,r18,256
80090cf8:	d8c02b15 	stw	r3,172(sp)
80090cfc:	20015d16 	blt	r4,zero,80091274 <___svfprintf_internal_r+0x1ea8>
80090d00:	dd003717 	ldw	r20,220(sp)
80090d04:	d8002a05 	stb	zero,168(sp)
80090d08:	00801984 	movi	r2,102
80090d0c:	88814026 	beq	r17,r2,80091210 <___svfprintf_internal_r+0x1e44>
80090d10:	00801184 	movi	r2,70
80090d14:	88817126 	beq	r17,r2,800912dc <___svfprintf_internal_r+0x1f10>
80090d18:	00801144 	movi	r2,69
80090d1c:	b0816226 	beq	r22,r2,800912a8 <___svfprintf_internal_r+0x1edc>
80090d20:	d8c02917 	ldw	r3,164(sp)
80090d24:	d8802104 	addi	r2,sp,132
80090d28:	d8800315 	stw	r2,12(sp)
80090d2c:	d9403617 	ldw	r5,216(sp)
80090d30:	d8802504 	addi	r2,sp,148
80090d34:	d8800215 	stw	r2,8(sp)
80090d38:	d8802604 	addi	r2,sp,152
80090d3c:	d8c00015 	stw	r3,0(sp)
80090d40:	d8800115 	stw	r2,4(sp)
80090d44:	01c00084 	movi	r7,2
80090d48:	a00d883a 	mov	r6,r20
80090d4c:	9809883a 	mov	r4,r19
80090d50:	d8c03d15 	stw	r3,244(sp)
80090d54:	da003e15 	stw	r8,248(sp)
80090d58:	00872840 	call	80087284 <_dtoa_r>
80090d5c:	1021883a 	mov	r16,r2
80090d60:	008019c4 	movi	r2,103
80090d64:	d8c03d17 	ldw	r3,244(sp)
80090d68:	da003e17 	ldw	r8,248(sp)
80090d6c:	8880e726 	beq	r17,r2,8009110c <___svfprintf_internal_r+0x1d40>
80090d70:	008011c4 	movi	r2,71
80090d74:	8880d426 	beq	r17,r2,800910c8 <___svfprintf_internal_r+0x1cfc>
80090d78:	80f9883a 	add	fp,r16,r3
80090d7c:	d9003617 	ldw	r4,216(sp)
80090d80:	000d883a 	mov	r6,zero
80090d84:	000f883a 	mov	r7,zero
80090d88:	a00b883a 	mov	r5,r20
80090d8c:	da003e15 	stw	r8,248(sp)
80090d90:	00975480 	call	80097548 <__eqdf2>
80090d94:	da003e17 	ldw	r8,248(sp)
80090d98:	1000e426 	beq	r2,zero,8009112c <___svfprintf_internal_r+0x1d60>
80090d9c:	d8802117 	ldw	r2,132(sp)
80090da0:	1700062e 	bgeu	r2,fp,80090dbc <___svfprintf_internal_r+0x19f0>
80090da4:	01000c04 	movi	r4,48
80090da8:	10c00044 	addi	r3,r2,1
80090dac:	d8c02115 	stw	r3,132(sp)
80090db0:	11000005 	stb	r4,0(r2)
80090db4:	d8802117 	ldw	r2,132(sp)
80090db8:	173ffb36 	bltu	r2,fp,80090da8 <___svfprintf_internal_r+0x19dc>
80090dbc:	1405c83a 	sub	r2,r2,r16
80090dc0:	d8803315 	stw	r2,204(sp)
80090dc4:	008011c4 	movi	r2,71
80090dc8:	b080c526 	beq	r22,r2,800910e0 <___svfprintf_internal_r+0x1d14>
80090dcc:	00801944 	movi	r2,101
80090dd0:	1441d90e 	bge	r2,r17,80091538 <___svfprintf_internal_r+0x216c>
80090dd4:	d8c02617 	ldw	r3,152(sp)
80090dd8:	00801984 	movi	r2,102
80090ddc:	d8c03215 	stw	r3,200(sp)
80090de0:	88813426 	beq	r17,r2,800912b4 <___svfprintf_internal_r+0x1ee8>
80090de4:	d8c03217 	ldw	r3,200(sp)
80090de8:	d9003317 	ldw	r4,204(sp)
80090dec:	19012516 	blt	r3,r4,80091284 <___svfprintf_internal_r+0x1eb8>
80090df0:	9480004c 	andi	r18,r18,1
80090df4:	9001841e 	bne	r18,zero,80091408 <___svfprintf_internal_r+0x203c>
80090df8:	1805883a 	mov	r2,r3
80090dfc:	1801cc16 	blt	r3,zero,80091530 <___svfprintf_internal_r+0x2164>
80090e00:	d8c03217 	ldw	r3,200(sp)
80090e04:	044019c4 	movi	r17,103
80090e08:	d8c02e15 	stw	r3,184(sp)
80090e0c:	df002a07 	ldb	fp,168(sp)
80090e10:	e000a61e 	bne	fp,zero,800910ac <___svfprintf_internal_r+0x1ce0>
80090e14:	df002783 	ldbu	fp,158(sp)
80090e18:	d8802a15 	stw	r2,168(sp)
80090e1c:	dc802b17 	ldw	r18,172(sp)
80090e20:	d8002915 	stw	zero,164(sp)
80090e24:	003b1706 	br	8008fa84 <___svfprintf_internal_r+0x6b8>
80090e28:	042002b4 	movhi	r16,32778
80090e2c:	84385f04 	addi	r16,r16,-7812
80090e30:	003aa606 	br	8008f8cc <___svfprintf_internal_r+0x500>
80090e34:	d9003917 	ldw	r4,228(sp)
80090e38:	04001004 	movi	r16,64
80090e3c:	800b883a 	mov	r5,r16
80090e40:	008251c0 	call	8008251c <_malloc_r>
80090e44:	d9002c17 	ldw	r4,176(sp)
80090e48:	20800015 	stw	r2,0(r4)
80090e4c:	20800415 	stw	r2,16(r4)
80090e50:	1001cb26 	beq	r2,zero,80091580 <___svfprintf_internal_r+0x21b4>
80090e54:	d8802c17 	ldw	r2,176(sp)
80090e58:	14000515 	stw	r16,20(r2)
80090e5c:	00397606 	br	8008f438 <___svfprintf_internal_r+0x6c>
80090e60:	042002b4 	movhi	r16,32778
80090e64:	84386104 	addi	r16,r16,-7804
80090e68:	003ee106 	br	800909f0 <___svfprintf_internal_r+0x1624>
80090e6c:	d9402c17 	ldw	r5,176(sp)
80090e70:	d9801e04 	addi	r6,sp,120
80090e74:	9809883a 	mov	r4,r19
80090e78:	00940a00 	call	800940a0 <__ssprint_r>
80090e7c:	103a381e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090e80:	dc402617 	ldw	r17,152(sp)
80090e84:	d8c02017 	ldw	r3,128(sp)
80090e88:	da000404 	addi	r8,sp,16
80090e8c:	003f4306 	br	80090b9c <___svfprintf_internal_r+0x17d0>
80090e90:	01400184 	movi	r5,6
80090e94:	d9402915 	stw	r5,164(sp)
80090e98:	003f9506 	br	80090cf0 <___svfprintf_internal_r+0x1924>
80090e9c:	d9002d17 	ldw	r4,180(sp)
80090ea0:	25000017 	ldw	r20,0(r4)
80090ea4:	21000104 	addi	r4,r4,4
80090ea8:	d9002d15 	stw	r4,180(sp)
80090eac:	a02dd7fa 	srai	r22,r20,31
80090eb0:	b005883a 	mov	r2,r22
80090eb4:	003a9b06 	br	8008f924 <___svfprintf_internal_r+0x558>
80090eb8:	d9402d17 	ldw	r5,180(sp)
80090ebc:	002d883a 	mov	r22,zero
80090ec0:	2d000017 	ldw	r20,0(r5)
80090ec4:	29400104 	addi	r5,r5,4
80090ec8:	d9402d15 	stw	r5,180(sp)
80090ecc:	003bf906 	br	8008feb4 <___svfprintf_internal_r+0xae8>
80090ed0:	9480100c 	andi	r18,r18,64
80090ed4:	90006e26 	beq	r18,zero,80091090 <___svfprintf_internal_r+0x1cc4>
80090ed8:	d9002d17 	ldw	r4,180(sp)
80090edc:	d9402f17 	ldw	r5,188(sp)
80090ee0:	20800017 	ldw	r2,0(r4)
80090ee4:	21000104 	addi	r4,r4,4
80090ee8:	d9002d15 	stw	r4,180(sp)
80090eec:	1140000d 	sth	r5,0(r2)
80090ef0:	00396106 	br	8008f478 <___svfprintf_internal_r+0xac>
80090ef4:	d9402c17 	ldw	r5,176(sp)
80090ef8:	d9801e04 	addi	r6,sp,120
80090efc:	9809883a 	mov	r4,r19
80090f00:	00940a00 	call	800940a0 <__ssprint_r>
80090f04:	103a161e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090f08:	d8c02017 	ldw	r3,128(sp)
80090f0c:	d8801f17 	ldw	r2,124(sp)
80090f10:	da000404 	addi	r8,sp,16
80090f14:	d9403317 	ldw	r5,204(sp)
80090f18:	10800044 	addi	r2,r2,1
80090f1c:	44000015 	stw	r16,0(r8)
80090f20:	28c7883a 	add	r3,r5,r3
80090f24:	003b7706 	br	8008fd04 <___svfprintf_internal_r+0x938>
80090f28:	8009883a 	mov	r4,r16
80090f2c:	da003e15 	stw	r8,248(sp)
80090f30:	00833580 	call	80083358 <strlen>
80090f34:	d8802e15 	stw	r2,184(sp)
80090f38:	da003e17 	ldw	r8,248(sp)
80090f3c:	103c280e 	bge	r2,zero,8008ffe0 <___svfprintf_internal_r+0xc14>
80090f40:	0005883a 	mov	r2,zero
80090f44:	003c2606 	br	8008ffe0 <___svfprintf_internal_r+0xc14>
80090f48:	00bfffc4 	movi	r2,-1
80090f4c:	003a0906 	br	8008f774 <___svfprintf_internal_r+0x3a8>
80090f50:	012002b4 	movhi	r4,32778
80090f54:	21398c84 	addi	r4,r4,-6606
80090f58:	d9003515 	stw	r4,212(sp)
80090f5c:	003b0606 	br	8008fb78 <___svfprintf_internal_r+0x7ac>
80090f60:	013fffc4 	movi	r4,-1
80090f64:	003a2706 	br	8008f804 <___svfprintf_internal_r+0x438>
80090f68:	d9402c17 	ldw	r5,176(sp)
80090f6c:	d9801e04 	addi	r6,sp,120
80090f70:	9809883a 	mov	r4,r19
80090f74:	00940a00 	call	800940a0 <__ssprint_r>
80090f78:	1039f91e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090f7c:	d8c02017 	ldw	r3,128(sp)
80090f80:	da000404 	addi	r8,sp,16
80090f84:	003d8406 	br	80090598 <___svfprintf_internal_r+0x11cc>
80090f88:	0023883a 	mov	r17,zero
80090f8c:	003d8306 	br	8009059c <___svfprintf_internal_r+0x11d0>
80090f90:	012002b4 	movhi	r4,32778
80090f94:	21398884 	addi	r4,r4,-6622
80090f98:	d9002b15 	stw	r4,172(sp)
80090f9c:	d9002b17 	ldw	r4,172(sp)
80090fa0:	1c47883a 	add	r3,r3,r17
80090fa4:	10800044 	addi	r2,r2,1
80090fa8:	41000015 	stw	r4,0(r8)
80090fac:	44400115 	stw	r17,4(r8)
80090fb0:	d8c02015 	stw	r3,128(sp)
80090fb4:	d8801f15 	stw	r2,124(sp)
80090fb8:	010001c4 	movi	r4,7
80090fbc:	20bfcd16 	blt	r4,r2,80090ef4 <___svfprintf_internal_r+0x1b28>
80090fc0:	42000204 	addi	r8,r8,8
80090fc4:	003fd306 	br	80090f14 <___svfprintf_internal_r+0x1b48>
80090fc8:	d9402c17 	ldw	r5,176(sp)
80090fcc:	d9801e04 	addi	r6,sp,120
80090fd0:	9809883a 	mov	r4,r19
80090fd4:	00940a00 	call	800940a0 <__ssprint_r>
80090fd8:	1039e11e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80090fdc:	d8802617 	ldw	r2,152(sp)
80090fe0:	d8c02017 	ldw	r3,128(sp)
80090fe4:	da000404 	addi	r8,sp,16
80090fe8:	003e1c06 	br	8009085c <___svfprintf_internal_r+0x1490>
80090fec:	d8802917 	ldw	r2,164(sp)
80090ff0:	00c00184 	movi	r3,6
80090ff4:	1880012e 	bgeu	r3,r2,80090ffc <___svfprintf_internal_r+0x1c30>
80090ff8:	1805883a 	mov	r2,r3
80090ffc:	d8802e15 	stw	r2,184(sp)
80091000:	1000f316 	blt	r2,zero,800913d0 <___svfprintf_internal_r+0x2004>
80091004:	042002b4 	movhi	r16,32778
80091008:	d8802a15 	stw	r2,168(sp)
8009100c:	dd002d15 	stw	r20,180(sp)
80091010:	d8002915 	stw	zero,164(sp)
80091014:	d8003215 	stw	zero,200(sp)
80091018:	84386d04 	addi	r16,r16,-7756
8009101c:	0039883a 	mov	fp,zero
80091020:	003a9f06 	br	8008faa0 <___svfprintf_internal_r+0x6d4>
80091024:	012002b4 	movhi	r4,32778
80091028:	21398c84 	addi	r4,r4,-6606
8009102c:	d9003515 	stw	r4,212(sp)
80091030:	003b5f06 	br	8008fdb0 <___svfprintf_internal_r+0x9e4>
80091034:	d9402c17 	ldw	r5,176(sp)
80091038:	d9801e04 	addi	r6,sp,120
8009103c:	9809883a 	mov	r4,r19
80091040:	00940a00 	call	800940a0 <__ssprint_r>
80091044:	1039c61e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
80091048:	d8802617 	ldw	r2,152(sp)
8009104c:	d9403317 	ldw	r5,204(sp)
80091050:	d8c02017 	ldw	r3,128(sp)
80091054:	da000404 	addi	r8,sp,16
80091058:	2885c83a 	sub	r2,r5,r2
8009105c:	003e1006 	br	800908a0 <___svfprintf_internal_r+0x14d4>
80091060:	00800044 	movi	r2,1
80091064:	10803fcc 	andi	r2,r2,255
80091068:	00c00044 	movi	r3,1
8009106c:	10fa3526 	beq	r2,r3,8008f944 <___svfprintf_internal_r+0x578>
80091070:	00c00084 	movi	r3,2
80091074:	10fb9e26 	beq	r2,r3,8008fef0 <___svfprintf_internal_r+0xb24>
80091078:	003a6406 	br	8008fa0c <___svfprintf_internal_r+0x640>
8009107c:	0021883a 	mov	r16,zero
80091080:	003e0806 	br	800908a4 <___svfprintf_internal_r+0x14d8>
80091084:	07000b44 	movi	fp,45
80091088:	df002785 	stb	fp,158(sp)
8009108c:	003a0b06 	br	8008f8bc <___svfprintf_internal_r+0x4f0>
80091090:	d8c02d17 	ldw	r3,180(sp)
80091094:	d9002f17 	ldw	r4,188(sp)
80091098:	18800017 	ldw	r2,0(r3)
8009109c:	18c00104 	addi	r3,r3,4
800910a0:	d8c02d15 	stw	r3,180(sp)
800910a4:	11000015 	stw	r4,0(r2)
800910a8:	0038f306 	br	8008f478 <___svfprintf_internal_r+0xac>
800910ac:	00c00b44 	movi	r3,45
800910b0:	d8c02785 	stb	r3,158(sp)
800910b4:	d8802a15 	stw	r2,168(sp)
800910b8:	dc802b17 	ldw	r18,172(sp)
800910bc:	d8002915 	stw	zero,164(sp)
800910c0:	07000b44 	movi	fp,45
800910c4:	003a7306 	br	8008fa94 <___svfprintf_internal_r+0x6c8>
800910c8:	9080004c 	andi	r2,r18,1
800910cc:	1000941e 	bne	r2,zero,80091320 <___svfprintf_internal_r+0x1f54>
800910d0:	d8802117 	ldw	r2,132(sp)
800910d4:	1405c83a 	sub	r2,r2,r16
800910d8:	d8803315 	stw	r2,204(sp)
800910dc:	b441161e 	bne	r22,r17,80091538 <___svfprintf_internal_r+0x216c>
800910e0:	dd802617 	ldw	r22,152(sp)
800910e4:	00bfff44 	movi	r2,-3
800910e8:	b0801a16 	blt	r22,r2,80091154 <___svfprintf_internal_r+0x1d88>
800910ec:	d9402917 	ldw	r5,164(sp)
800910f0:	2d801816 	blt	r5,r22,80091154 <___svfprintf_internal_r+0x1d88>
800910f4:	dd803215 	stw	r22,200(sp)
800910f8:	003f3a06 	br	80090de4 <___svfprintf_internal_r+0x1a18>
800910fc:	1025883a 	mov	r18,r2
80091100:	0039883a 	mov	fp,zero
80091104:	00800084 	movi	r2,2
80091108:	003fd606 	br	80091064 <___svfprintf_internal_r+0x1c98>
8009110c:	9080004c 	andi	r2,r18,1
80091110:	103f191e 	bne	r2,zero,80090d78 <___svfprintf_internal_r+0x19ac>
80091114:	d8802117 	ldw	r2,132(sp)
80091118:	003f2806 	br	80090dbc <___svfprintf_internal_r+0x19f0>
8009111c:	012002b4 	movhi	r4,32778
80091120:	21398884 	addi	r4,r4,-6622
80091124:	d9002b15 	stw	r4,172(sp)
80091128:	003c7c06 	br	8009031c <___svfprintf_internal_r+0xf50>
8009112c:	e005883a 	mov	r2,fp
80091130:	003f2206 	br	80090dbc <___svfprintf_internal_r+0x19f0>
80091134:	d9402917 	ldw	r5,164(sp)
80091138:	df002783 	ldbu	fp,158(sp)
8009113c:	dd002d15 	stw	r20,180(sp)
80091140:	d9402a15 	stw	r5,168(sp)
80091144:	d9402e15 	stw	r5,184(sp)
80091148:	d8002915 	stw	zero,164(sp)
8009114c:	d8003215 	stw	zero,200(sp)
80091150:	003a4c06 	br	8008fa84 <___svfprintf_internal_r+0x6b8>
80091154:	8c7fff84 	addi	r17,r17,-2
80091158:	b5bfffc4 	addi	r22,r22,-1
8009115c:	dd802615 	stw	r22,152(sp)
80091160:	dc4022c5 	stb	r17,139(sp)
80091164:	b000c316 	blt	r22,zero,80091474 <___svfprintf_internal_r+0x20a8>
80091168:	00800ac4 	movi	r2,43
8009116c:	d8802305 	stb	r2,140(sp)
80091170:	00800244 	movi	r2,9
80091174:	15806e16 	blt	r2,r22,80091330 <___svfprintf_internal_r+0x1f64>
80091178:	00800c04 	movi	r2,48
8009117c:	b5800c04 	addi	r22,r22,48
80091180:	d8802345 	stb	r2,141(sp)
80091184:	dd802385 	stb	r22,142(sp)
80091188:	d88023c4 	addi	r2,sp,143
8009118c:	df0022c4 	addi	fp,sp,139
80091190:	d8c03317 	ldw	r3,204(sp)
80091194:	1739c83a 	sub	fp,r2,fp
80091198:	d9003317 	ldw	r4,204(sp)
8009119c:	e0c7883a 	add	r3,fp,r3
800911a0:	df003b15 	stw	fp,236(sp)
800911a4:	d8c02e15 	stw	r3,184(sp)
800911a8:	00800044 	movi	r2,1
800911ac:	1100b70e 	bge	r2,r4,8009148c <___svfprintf_internal_r+0x20c0>
800911b0:	d8c02e17 	ldw	r3,184(sp)
800911b4:	18c00044 	addi	r3,r3,1
800911b8:	d8c02e15 	stw	r3,184(sp)
800911bc:	1805883a 	mov	r2,r3
800911c0:	1800b016 	blt	r3,zero,80091484 <___svfprintf_internal_r+0x20b8>
800911c4:	d8003215 	stw	zero,200(sp)
800911c8:	003f1006 	br	80090e0c <___svfprintf_internal_r+0x1a40>
800911cc:	d8802917 	ldw	r2,164(sp)
800911d0:	103ec71e 	bne	r2,zero,80090cf0 <___svfprintf_internal_r+0x1924>
800911d4:	dc002915 	stw	r16,164(sp)
800911d8:	003ec506 	br	80090cf0 <___svfprintf_internal_r+0x1924>
800911dc:	d9402c17 	ldw	r5,176(sp)
800911e0:	d9801e04 	addi	r6,sp,120
800911e4:	9809883a 	mov	r4,r19
800911e8:	00940a00 	call	800940a0 <__ssprint_r>
800911ec:	10395c1e 	bne	r2,zero,8008f760 <___svfprintf_internal_r+0x394>
800911f0:	dc402617 	ldw	r17,152(sp)
800911f4:	d8c02017 	ldw	r3,128(sp)
800911f8:	d8801f17 	ldw	r2,124(sp)
800911fc:	da000404 	addi	r8,sp,16
80091200:	003e7706 	br	80090be0 <___svfprintf_internal_r+0x1814>
80091204:	582f883a 	mov	r23,r11
80091208:	d8002915 	stw	zero,164(sp)
8009120c:	0038c406 	br	8008f520 <___svfprintf_internal_r+0x154>
80091210:	d8c02917 	ldw	r3,164(sp)
80091214:	d8802104 	addi	r2,sp,132
80091218:	d8800315 	stw	r2,12(sp)
8009121c:	d9403617 	ldw	r5,216(sp)
80091220:	d8802504 	addi	r2,sp,148
80091224:	d8800215 	stw	r2,8(sp)
80091228:	d8802604 	addi	r2,sp,152
8009122c:	d8c00015 	stw	r3,0(sp)
80091230:	9809883a 	mov	r4,r19
80091234:	d8800115 	stw	r2,4(sp)
80091238:	01c000c4 	movi	r7,3
8009123c:	a00d883a 	mov	r6,r20
80091240:	da003e15 	stw	r8,248(sp)
80091244:	00872840 	call	80087284 <_dtoa_r>
80091248:	d9002917 	ldw	r4,164(sp)
8009124c:	da003e17 	ldw	r8,248(sp)
80091250:	1021883a 	mov	r16,r2
80091254:	1139883a 	add	fp,r2,r4
80091258:	2007883a 	mov	r3,r4
8009125c:	81000007 	ldb	r4,0(r16)
80091260:	00800c04 	movi	r2,48
80091264:	20806f26 	beq	r4,r2,80091424 <___svfprintf_internal_r+0x2058>
80091268:	d8c02617 	ldw	r3,152(sp)
8009126c:	e0f9883a 	add	fp,fp,r3
80091270:	003ec206 	br	80090d7c <___svfprintf_internal_r+0x19b0>
80091274:	00c00b44 	movi	r3,45
80091278:	2520003c 	xorhi	r20,r4,32768
8009127c:	d8c02a05 	stb	r3,168(sp)
80091280:	003ea106 	br	80090d08 <___svfprintf_internal_r+0x193c>
80091284:	d8c03217 	ldw	r3,200(sp)
80091288:	00c0890e 	bge	zero,r3,800914b0 <___svfprintf_internal_r+0x20e4>
8009128c:	00800044 	movi	r2,1
80091290:	d9003317 	ldw	r4,204(sp)
80091294:	1105883a 	add	r2,r2,r4
80091298:	d8802e15 	stw	r2,184(sp)
8009129c:	10005f16 	blt	r2,zero,8009141c <___svfprintf_internal_r+0x2050>
800912a0:	044019c4 	movi	r17,103
800912a4:	003ed906 	br	80090e0c <___svfprintf_internal_r+0x1a40>
800912a8:	d9002917 	ldw	r4,164(sp)
800912ac:	20c00044 	addi	r3,r4,1
800912b0:	003e9c06 	br	80090d24 <___svfprintf_internal_r+0x1958>
800912b4:	d9002917 	ldw	r4,164(sp)
800912b8:	00c0680e 	bge	zero,r3,8009145c <___svfprintf_internal_r+0x2090>
800912bc:	2000461e 	bne	r4,zero,800913d8 <___svfprintf_internal_r+0x200c>
800912c0:	9480004c 	andi	r18,r18,1
800912c4:	9000441e 	bne	r18,zero,800913d8 <___svfprintf_internal_r+0x200c>
800912c8:	1805883a 	mov	r2,r3
800912cc:	1800a016 	blt	r3,zero,80091550 <___svfprintf_internal_r+0x2184>
800912d0:	d8c03217 	ldw	r3,200(sp)
800912d4:	d8c02e15 	stw	r3,184(sp)
800912d8:	003ecc06 	br	80090e0c <___svfprintf_internal_r+0x1a40>
800912dc:	d9402917 	ldw	r5,164(sp)
800912e0:	d8802104 	addi	r2,sp,132
800912e4:	d8800315 	stw	r2,12(sp)
800912e8:	d9400015 	stw	r5,0(sp)
800912ec:	d8802504 	addi	r2,sp,148
800912f0:	d9403617 	ldw	r5,216(sp)
800912f4:	d8800215 	stw	r2,8(sp)
800912f8:	d8802604 	addi	r2,sp,152
800912fc:	d8800115 	stw	r2,4(sp)
80091300:	01c000c4 	movi	r7,3
80091304:	a00d883a 	mov	r6,r20
80091308:	9809883a 	mov	r4,r19
8009130c:	da003e15 	stw	r8,248(sp)
80091310:	00872840 	call	80087284 <_dtoa_r>
80091314:	d8c02917 	ldw	r3,164(sp)
80091318:	da003e17 	ldw	r8,248(sp)
8009131c:	1021883a 	mov	r16,r2
80091320:	00801184 	movi	r2,70
80091324:	80f9883a 	add	fp,r16,r3
80091328:	88bfcc26 	beq	r17,r2,8009125c <___svfprintf_internal_r+0x1e90>
8009132c:	003e9306 	br	80090d7c <___svfprintf_internal_r+0x19b0>
80091330:	df0022c4 	addi	fp,sp,139
80091334:	dc002915 	stw	r16,164(sp)
80091338:	9829883a 	mov	r20,r19
8009133c:	e021883a 	mov	r16,fp
80091340:	4027883a 	mov	r19,r8
80091344:	b009883a 	mov	r4,r22
80091348:	01400284 	movi	r5,10
8009134c:	00822cc0 	call	800822cc <__modsi3>
80091350:	10800c04 	addi	r2,r2,48
80091354:	843fffc4 	addi	r16,r16,-1
80091358:	b009883a 	mov	r4,r22
8009135c:	01400284 	movi	r5,10
80091360:	80800005 	stb	r2,0(r16)
80091364:	00822480 	call	80082248 <__divsi3>
80091368:	102d883a 	mov	r22,r2
8009136c:	00800244 	movi	r2,9
80091370:	15bff416 	blt	r2,r22,80091344 <___svfprintf_internal_r+0x1f78>
80091374:	9811883a 	mov	r8,r19
80091378:	b0800c04 	addi	r2,r22,48
8009137c:	a027883a 	mov	r19,r20
80091380:	8029883a 	mov	r20,r16
80091384:	a17fffc4 	addi	r5,r20,-1
80091388:	a0bfffc5 	stb	r2,-1(r20)
8009138c:	dc002917 	ldw	r16,164(sp)
80091390:	2f00752e 	bgeu	r5,fp,80091568 <___svfprintf_internal_r+0x219c>
80091394:	d9c02384 	addi	r7,sp,142
80091398:	3d0fc83a 	sub	r7,r7,r20
8009139c:	d9002344 	addi	r4,sp,141
800913a0:	e1cf883a 	add	r7,fp,r7
800913a4:	00000106 	br	800913ac <___svfprintf_internal_r+0x1fe0>
800913a8:	28800003 	ldbu	r2,0(r5)
800913ac:	20800005 	stb	r2,0(r4)
800913b0:	21000044 	addi	r4,r4,1
800913b4:	29400044 	addi	r5,r5,1
800913b8:	21fffb1e 	bne	r4,r7,800913a8 <___svfprintf_internal_r+0x1fdc>
800913bc:	d8802304 	addi	r2,sp,140
800913c0:	1505c83a 	sub	r2,r2,r20
800913c4:	d8c02344 	addi	r3,sp,141
800913c8:	1885883a 	add	r2,r3,r2
800913cc:	003f7006 	br	80091190 <___svfprintf_internal_r+0x1dc4>
800913d0:	0005883a 	mov	r2,zero
800913d4:	003f0b06 	br	80091004 <___svfprintf_internal_r+0x1c38>
800913d8:	d9002917 	ldw	r4,164(sp)
800913dc:	d8c03217 	ldw	r3,200(sp)
800913e0:	20800044 	addi	r2,r4,1
800913e4:	1885883a 	add	r2,r3,r2
800913e8:	d8802e15 	stw	r2,184(sp)
800913ec:	103e870e 	bge	r2,zero,80090e0c <___svfprintf_internal_r+0x1a40>
800913f0:	0005883a 	mov	r2,zero
800913f4:	003e8506 	br	80090e0c <___svfprintf_internal_r+0x1a40>
800913f8:	012002b4 	movhi	r4,32778
800913fc:	21398884 	addi	r4,r4,-6622
80091400:	d9002b15 	stw	r4,172(sp)
80091404:	003cc506 	br	8009071c <___svfprintf_internal_r+0x1350>
80091408:	d8c03217 	ldw	r3,200(sp)
8009140c:	18c00044 	addi	r3,r3,1
80091410:	d8c02e15 	stw	r3,184(sp)
80091414:	1805883a 	mov	r2,r3
80091418:	183fa10e 	bge	r3,zero,800912a0 <___svfprintf_internal_r+0x1ed4>
8009141c:	0005883a 	mov	r2,zero
80091420:	003f9f06 	br	800912a0 <___svfprintf_internal_r+0x1ed4>
80091424:	d9003617 	ldw	r4,216(sp)
80091428:	000d883a 	mov	r6,zero
8009142c:	000f883a 	mov	r7,zero
80091430:	a00b883a 	mov	r5,r20
80091434:	d8c03d15 	stw	r3,244(sp)
80091438:	da003e15 	stw	r8,248(sp)
8009143c:	00975480 	call	80097548 <__eqdf2>
80091440:	d8c03d17 	ldw	r3,244(sp)
80091444:	da003e17 	ldw	r8,248(sp)
80091448:	103f8726 	beq	r2,zero,80091268 <___svfprintf_internal_r+0x1e9c>
8009144c:	00800044 	movi	r2,1
80091450:	10c7c83a 	sub	r3,r2,r3
80091454:	d8c02615 	stw	r3,152(sp)
80091458:	003f8406 	br	8009126c <___svfprintf_internal_r+0x1ea0>
8009145c:	20000e1e 	bne	r4,zero,80091498 <___svfprintf_internal_r+0x20cc>
80091460:	9480004c 	andi	r18,r18,1
80091464:	90000c1e 	bne	r18,zero,80091498 <___svfprintf_internal_r+0x20cc>
80091468:	00800044 	movi	r2,1
8009146c:	d8802e15 	stw	r2,184(sp)
80091470:	003e6606 	br	80090e0c <___svfprintf_internal_r+0x1a40>
80091474:	00800b44 	movi	r2,45
80091478:	05adc83a 	sub	r22,zero,r22
8009147c:	d8802305 	stb	r2,140(sp)
80091480:	003f3b06 	br	80091170 <___svfprintf_internal_r+0x1da4>
80091484:	0005883a 	mov	r2,zero
80091488:	003f4e06 	br	800911c4 <___svfprintf_internal_r+0x1df8>
8009148c:	90a4703a 	and	r18,r18,r2
80091490:	903f4a26 	beq	r18,zero,800911bc <___svfprintf_internal_r+0x1df0>
80091494:	003f4606 	br	800911b0 <___svfprintf_internal_r+0x1de4>
80091498:	d8c02917 	ldw	r3,164(sp)
8009149c:	18c00084 	addi	r3,r3,2
800914a0:	d8c02e15 	stw	r3,184(sp)
800914a4:	1805883a 	mov	r2,r3
800914a8:	183e580e 	bge	r3,zero,80090e0c <___svfprintf_internal_r+0x1a40>
800914ac:	003fd006 	br	800913f0 <___svfprintf_internal_r+0x2024>
800914b0:	00800084 	movi	r2,2
800914b4:	10c5c83a 	sub	r2,r2,r3
800914b8:	003f7506 	br	80091290 <___svfprintf_internal_r+0x1ec4>
800914bc:	d8802d17 	ldw	r2,180(sp)
800914c0:	d9002d17 	ldw	r4,180(sp)
800914c4:	bc400043 	ldbu	r17,1(r23)
800914c8:	10800017 	ldw	r2,0(r2)
800914cc:	582f883a 	mov	r23,r11
800914d0:	d8802915 	stw	r2,164(sp)
800914d4:	20800104 	addi	r2,r4,4
800914d8:	d9002917 	ldw	r4,164(sp)
800914dc:	d8802d15 	stw	r2,180(sp)
800914e0:	203df00e 	bge	r4,zero,80090ca4 <___svfprintf_internal_r+0x18d8>
800914e4:	8c403fcc 	andi	r17,r17,255
800914e8:	00bfffc4 	movi	r2,-1
800914ec:	8c40201c 	xori	r17,r17,128
800914f0:	d8802915 	stw	r2,164(sp)
800914f4:	8c7fe004 	addi	r17,r17,-128
800914f8:	00380806 	br	8008f51c <___svfprintf_internal_r+0x150>
800914fc:	9080004c 	andi	r2,r18,1
80091500:	0039883a 	mov	fp,zero
80091504:	10000726 	beq	r2,zero,80091524 <___svfprintf_internal_r+0x2158>
80091508:	d8c02817 	ldw	r3,160(sp)
8009150c:	dc001dc4 	addi	r16,sp,119
80091510:	00800c04 	movi	r2,48
80091514:	1c07c83a 	sub	r3,r3,r16
80091518:	d8801dc5 	stb	r2,119(sp)
8009151c:	d8c02e15 	stw	r3,184(sp)
80091520:	00395206 	br	8008fa6c <___svfprintf_internal_r+0x6a0>
80091524:	d8002e15 	stw	zero,184(sp)
80091528:	dc001e04 	addi	r16,sp,120
8009152c:	00394f06 	br	8008fa6c <___svfprintf_internal_r+0x6a0>
80091530:	0005883a 	mov	r2,zero
80091534:	003e3206 	br	80090e00 <___svfprintf_internal_r+0x1a34>
80091538:	dd802617 	ldw	r22,152(sp)
8009153c:	003f0606 	br	80091158 <___svfprintf_internal_r+0x1d8c>
80091540:	d9c02785 	stb	r7,158(sp)
80091544:	003a5106 	br	8008fe8c <___svfprintf_internal_r+0xac0>
80091548:	d9c02785 	stb	r7,158(sp)
8009154c:	003a3706 	br	8008fe2c <___svfprintf_internal_r+0xa60>
80091550:	0005883a 	mov	r2,zero
80091554:	003f5e06 	br	800912d0 <___svfprintf_internal_r+0x1f04>
80091558:	d9c02785 	stb	r7,158(sp)
8009155c:	00391706 	br	8008f9bc <___svfprintf_internal_r+0x5f0>
80091560:	d9c02785 	stb	r7,158(sp)
80091564:	0038e606 	br	8008f900 <___svfprintf_internal_r+0x534>
80091568:	d8802344 	addi	r2,sp,141
8009156c:	003f0806 	br	80091190 <___svfprintf_internal_r+0x1dc4>
80091570:	d9c02785 	stb	r7,158(sp)
80091574:	0038b706 	br	8008f854 <___svfprintf_internal_r+0x488>
80091578:	d9c02785 	stb	r7,158(sp)
8009157c:	003adc06 	br	800900f0 <___svfprintf_internal_r+0xd24>
80091580:	d9403917 	ldw	r5,228(sp)
80091584:	00800304 	movi	r2,12
80091588:	28800015 	stw	r2,0(r5)
8009158c:	00bfffc4 	movi	r2,-1
80091590:	00387806 	br	8008f774 <___svfprintf_internal_r+0x3a8>
80091594:	d9c02785 	stb	r7,158(sp)
80091598:	003abf06 	br	80090098 <___svfprintf_internal_r+0xccc>
8009159c:	d9c02785 	stb	r7,158(sp)
800915a0:	003a9b06 	br	80090010 <___svfprintf_internal_r+0xc44>

800915a4 <__submore>:
800915a4:	defffa04 	addi	sp,sp,-24
800915a8:	dc000015 	stw	r16,0(sp)
800915ac:	2821883a 	mov	r16,r5
800915b0:	29400c17 	ldw	r5,48(r5)
800915b4:	dfc00515 	stw	ra,20(sp)
800915b8:	dd000415 	stw	r20,16(sp)
800915bc:	dcc00315 	stw	r19,12(sp)
800915c0:	dc800215 	stw	r18,8(sp)
800915c4:	dc400115 	stw	r17,4(sp)
800915c8:	80801004 	addi	r2,r16,64
800915cc:	28801726 	beq	r5,r2,8009162c <__submore+0x88>
800915d0:	84400d17 	ldw	r17,52(r16)
800915d4:	8c67883a 	add	r19,r17,r17
800915d8:	980d883a 	mov	r6,r19
800915dc:	008b4440 	call	8008b444 <_realloc_r>
800915e0:	1025883a 	mov	r18,r2
800915e4:	10002226 	beq	r2,zero,80091670 <__submore+0xcc>
800915e8:	1469883a 	add	r20,r2,r17
800915ec:	880d883a 	mov	r6,r17
800915f0:	100b883a 	mov	r5,r2
800915f4:	a009883a 	mov	r4,r20
800915f8:	0082da40 	call	80082da4 <memcpy>
800915fc:	0005883a 	mov	r2,zero
80091600:	85000015 	stw	r20,0(r16)
80091604:	84800c15 	stw	r18,48(r16)
80091608:	84c00d15 	stw	r19,52(r16)
8009160c:	dfc00517 	ldw	ra,20(sp)
80091610:	dd000417 	ldw	r20,16(sp)
80091614:	dcc00317 	ldw	r19,12(sp)
80091618:	dc800217 	ldw	r18,8(sp)
8009161c:	dc400117 	ldw	r17,4(sp)
80091620:	dc000017 	ldw	r16,0(sp)
80091624:	dec00604 	addi	sp,sp,24
80091628:	f800283a 	ret
8009162c:	04410004 	movi	r17,1024
80091630:	880b883a 	mov	r5,r17
80091634:	008251c0 	call	8008251c <_malloc_r>
80091638:	1007883a 	mov	r3,r2
8009163c:	10000c26 	beq	r2,zero,80091670 <__submore+0xcc>
80091640:	80801083 	ldbu	r2,66(r16)
80091644:	80c00c15 	stw	r3,48(r16)
80091648:	84400d15 	stw	r17,52(r16)
8009164c:	1880ffc5 	stb	r2,1023(r3)
80091650:	81401043 	ldbu	r5,65(r16)
80091654:	1900ff44 	addi	r4,r3,1021
80091658:	0005883a 	mov	r2,zero
8009165c:	1940ff85 	stb	r5,1022(r3)
80091660:	81401003 	ldbu	r5,64(r16)
80091664:	1940ff45 	stb	r5,1021(r3)
80091668:	81000015 	stw	r4,0(r16)
8009166c:	003fe706 	br	8009160c <__submore+0x68>
80091670:	00bfffc4 	movi	r2,-1
80091674:	003fe506 	br	8009160c <__submore+0x68>

80091678 <_ungetc_r>:
80091678:	00bfffc4 	movi	r2,-1
8009167c:	28806126 	beq	r5,r2,80091804 <_ungetc_r+0x18c>
80091680:	defffb04 	addi	sp,sp,-20
80091684:	dcc00315 	stw	r19,12(sp)
80091688:	dc400115 	stw	r17,4(sp)
8009168c:	dc000015 	stw	r16,0(sp)
80091690:	dfc00415 	stw	ra,16(sp)
80091694:	dc800215 	stw	r18,8(sp)
80091698:	2023883a 	mov	r17,r4
8009169c:	3021883a 	mov	r16,r6
800916a0:	2827883a 	mov	r19,r5
800916a4:	20000226 	beq	r4,zero,800916b0 <_ungetc_r+0x38>
800916a8:	20800e17 	ldw	r2,56(r4)
800916ac:	10002e26 	beq	r2,zero,80091768 <_ungetc_r+0xf0>
800916b0:	80c0030b 	ldhu	r3,12(r16)
800916b4:	1888000c 	andi	r2,r3,8192
800916b8:	1000051e 	bne	r2,zero,800916d0 <_ungetc_r+0x58>
800916bc:	81001917 	ldw	r4,100(r16)
800916c0:	00b7ffc4 	movi	r2,-8193
800916c4:	18c80014 	ori	r3,r3,8192
800916c8:	2084703a 	and	r2,r4,r2
800916cc:	80801915 	stw	r2,100(r16)
800916d0:	00bff7c4 	movi	r2,-33
800916d4:	1884703a 	and	r2,r3,r2
800916d8:	8080030d 	sth	r2,12(r16)
800916dc:	1900010c 	andi	r4,r3,4
800916e0:	2000061e 	bne	r4,zero,800916fc <_ungetc_r+0x84>
800916e4:	1900040c 	andi	r4,r3,16
800916e8:	20001d26 	beq	r4,zero,80091760 <_ungetc_r+0xe8>
800916ec:	18c0020c 	andi	r3,r3,8
800916f0:	1800331e 	bne	r3,zero,800917c0 <_ungetc_r+0x148>
800916f4:	10800114 	ori	r2,r2,4
800916f8:	8080030d 	sth	r2,12(r16)
800916fc:	80800c17 	ldw	r2,48(r16)
80091700:	9c803fcc 	andi	r18,r19,255
80091704:	10001a26 	beq	r2,zero,80091770 <_ungetc_r+0xf8>
80091708:	80c00117 	ldw	r3,4(r16)
8009170c:	80800d17 	ldw	r2,52(r16)
80091710:	18800f0e 	bge	r3,r2,80091750 <_ungetc_r+0xd8>
80091714:	80c00017 	ldw	r3,0(r16)
80091718:	9005883a 	mov	r2,r18
8009171c:	193fffc4 	addi	r4,r3,-1
80091720:	81000015 	stw	r4,0(r16)
80091724:	1cffffc5 	stb	r19,-1(r3)
80091728:	80c00117 	ldw	r3,4(r16)
8009172c:	18c00044 	addi	r3,r3,1
80091730:	80c00115 	stw	r3,4(r16)
80091734:	dfc00417 	ldw	ra,16(sp)
80091738:	dcc00317 	ldw	r19,12(sp)
8009173c:	dc800217 	ldw	r18,8(sp)
80091740:	dc400117 	ldw	r17,4(sp)
80091744:	dc000017 	ldw	r16,0(sp)
80091748:	dec00504 	addi	sp,sp,20
8009174c:	f800283a 	ret
80091750:	800b883a 	mov	r5,r16
80091754:	8809883a 	mov	r4,r17
80091758:	00915a40 	call	800915a4 <__submore>
8009175c:	103fed26 	beq	r2,zero,80091714 <_ungetc_r+0x9c>
80091760:	00bfffc4 	movi	r2,-1
80091764:	003ff306 	br	80091734 <_ungetc_r+0xbc>
80091768:	0088f040 	call	80088f04 <__sinit>
8009176c:	003fd006 	br	800916b0 <_ungetc_r+0x38>
80091770:	80c00417 	ldw	r3,16(r16)
80091774:	80800017 	ldw	r2,0(r16)
80091778:	18000326 	beq	r3,zero,80091788 <_ungetc_r+0x110>
8009177c:	1880022e 	bgeu	r3,r2,80091788 <_ungetc_r+0x110>
80091780:	10ffffc3 	ldbu	r3,-1(r2)
80091784:	90c01826 	beq	r18,r3,800917e8 <_ungetc_r+0x170>
80091788:	81400117 	ldw	r5,4(r16)
8009178c:	80800e15 	stw	r2,56(r16)
80091790:	008000c4 	movi	r2,3
80091794:	81001004 	addi	r4,r16,64
80091798:	80c01084 	addi	r3,r16,66
8009179c:	80800d15 	stw	r2,52(r16)
800917a0:	00800044 	movi	r2,1
800917a4:	80800115 	stw	r2,4(r16)
800917a8:	81400f15 	stw	r5,60(r16)
800917ac:	81000c15 	stw	r4,48(r16)
800917b0:	84c01085 	stb	r19,66(r16)
800917b4:	80c00015 	stw	r3,0(r16)
800917b8:	9005883a 	mov	r2,r18
800917bc:	003fdd06 	br	80091734 <_ungetc_r+0xbc>
800917c0:	800b883a 	mov	r5,r16
800917c4:	8809883a 	mov	r4,r17
800917c8:	0088b280 	call	80088b28 <_fflush_r>
800917cc:	103fe41e 	bne	r2,zero,80091760 <_ungetc_r+0xe8>
800917d0:	8080030b 	ldhu	r2,12(r16)
800917d4:	00fffdc4 	movi	r3,-9
800917d8:	80000215 	stw	zero,8(r16)
800917dc:	1884703a 	and	r2,r3,r2
800917e0:	80000615 	stw	zero,24(r16)
800917e4:	003fc306 	br	800916f4 <_ungetc_r+0x7c>
800917e8:	80c00117 	ldw	r3,4(r16)
800917ec:	10bfffc4 	addi	r2,r2,-1
800917f0:	80800015 	stw	r2,0(r16)
800917f4:	18800044 	addi	r2,r3,1
800917f8:	80800115 	stw	r2,4(r16)
800917fc:	9005883a 	mov	r2,r18
80091800:	003fcc06 	br	80091734 <_ungetc_r+0xbc>
80091804:	00bfffc4 	movi	r2,-1
80091808:	f800283a 	ret

8009180c <ungetc>:
8009180c:	00a002b4 	movhi	r2,32778
80091810:	1081bf04 	addi	r2,r2,1788
80091814:	280d883a 	mov	r6,r5
80091818:	200b883a 	mov	r5,r4
8009181c:	11000017 	ldw	r4,0(r2)
80091820:	00916781 	jmpi	80091678 <_ungetc_r>

80091824 <__sprint_r.part.0>:
80091824:	28801917 	ldw	r2,100(r5)
80091828:	defff604 	addi	sp,sp,-40
8009182c:	dd400515 	stw	r21,20(sp)
80091830:	dfc00915 	stw	ra,36(sp)
80091834:	df000815 	stw	fp,32(sp)
80091838:	ddc00715 	stw	r23,28(sp)
8009183c:	dd800615 	stw	r22,24(sp)
80091840:	dd000415 	stw	r20,16(sp)
80091844:	dcc00315 	stw	r19,12(sp)
80091848:	dc800215 	stw	r18,8(sp)
8009184c:	dc400115 	stw	r17,4(sp)
80091850:	dc000015 	stw	r16,0(sp)
80091854:	1088000c 	andi	r2,r2,8192
80091858:	302b883a 	mov	r21,r6
8009185c:	10002e26 	beq	r2,zero,80091918 <__sprint_r.part.0+0xf4>
80091860:	30800217 	ldw	r2,8(r6)
80091864:	35800017 	ldw	r22,0(r6)
80091868:	10002926 	beq	r2,zero,80091910 <__sprint_r.part.0+0xec>
8009186c:	2827883a 	mov	r19,r5
80091870:	2029883a 	mov	r20,r4
80091874:	b5c00104 	addi	r23,r22,4
80091878:	04bfffc4 	movi	r18,-1
8009187c:	bc400017 	ldw	r17,0(r23)
80091880:	b4000017 	ldw	r16,0(r22)
80091884:	0039883a 	mov	fp,zero
80091888:	8822d0ba 	srli	r17,r17,2
8009188c:	8800031e 	bne	r17,zero,8009189c <__sprint_r.part.0+0x78>
80091890:	00001806 	br	800918f4 <__sprint_r.part.0+0xd0>
80091894:	84000104 	addi	r16,r16,4
80091898:	8f001526 	beq	r17,fp,800918f0 <__sprint_r.part.0+0xcc>
8009189c:	81400017 	ldw	r5,0(r16)
800918a0:	980d883a 	mov	r6,r19
800918a4:	a009883a 	mov	r4,r20
800918a8:	00932f00 	call	800932f0 <_fputwc_r>
800918ac:	e7000044 	addi	fp,fp,1
800918b0:	14bff81e 	bne	r2,r18,80091894 <__sprint_r.part.0+0x70>
800918b4:	9005883a 	mov	r2,r18
800918b8:	a8000215 	stw	zero,8(r21)
800918bc:	a8000115 	stw	zero,4(r21)
800918c0:	dfc00917 	ldw	ra,36(sp)
800918c4:	df000817 	ldw	fp,32(sp)
800918c8:	ddc00717 	ldw	r23,28(sp)
800918cc:	dd800617 	ldw	r22,24(sp)
800918d0:	dd400517 	ldw	r21,20(sp)
800918d4:	dd000417 	ldw	r20,16(sp)
800918d8:	dcc00317 	ldw	r19,12(sp)
800918dc:	dc800217 	ldw	r18,8(sp)
800918e0:	dc400117 	ldw	r17,4(sp)
800918e4:	dc000017 	ldw	r16,0(sp)
800918e8:	dec00a04 	addi	sp,sp,40
800918ec:	f800283a 	ret
800918f0:	a8800217 	ldw	r2,8(r21)
800918f4:	8c63883a 	add	r17,r17,r17
800918f8:	8c63883a 	add	r17,r17,r17
800918fc:	1445c83a 	sub	r2,r2,r17
80091900:	a8800215 	stw	r2,8(r21)
80091904:	b5800204 	addi	r22,r22,8
80091908:	bdc00204 	addi	r23,r23,8
8009190c:	103fdb1e 	bne	r2,zero,8009187c <__sprint_r.part.0+0x58>
80091910:	0005883a 	mov	r2,zero
80091914:	003fe806 	br	800918b8 <__sprint_r.part.0+0x94>
80091918:	00893880 	call	80089388 <__sfvwrite_r>
8009191c:	003fe606 	br	800918b8 <__sprint_r.part.0+0x94>

80091920 <__sprint_r>:
80091920:	30c00217 	ldw	r3,8(r6)
80091924:	18000126 	beq	r3,zero,8009192c <__sprint_r+0xc>
80091928:	00918241 	jmpi	80091824 <__sprint_r.part.0>
8009192c:	30000115 	stw	zero,4(r6)
80091930:	0005883a 	mov	r2,zero
80091934:	f800283a 	ret

80091938 <___vfiprintf_internal_r>:
80091938:	deffc904 	addi	sp,sp,-220
8009193c:	df003515 	stw	fp,212(sp)
80091940:	dd003115 	stw	r20,196(sp)
80091944:	dfc03615 	stw	ra,216(sp)
80091948:	ddc03415 	stw	r23,208(sp)
8009194c:	dd803315 	stw	r22,204(sp)
80091950:	dd403215 	stw	r21,200(sp)
80091954:	dcc03015 	stw	r19,192(sp)
80091958:	dc802f15 	stw	r18,188(sp)
8009195c:	dc402e15 	stw	r17,184(sp)
80091960:	dc002d15 	stw	r16,180(sp)
80091964:	d9002015 	stw	r4,128(sp)
80091968:	d9c02215 	stw	r7,136(sp)
8009196c:	2829883a 	mov	r20,r5
80091970:	3039883a 	mov	fp,r6
80091974:	20000226 	beq	r4,zero,80091980 <___vfiprintf_internal_r+0x48>
80091978:	20800e17 	ldw	r2,56(r4)
8009197c:	1000cf26 	beq	r2,zero,80091cbc <___vfiprintf_internal_r+0x384>
80091980:	a080030b 	ldhu	r2,12(r20)
80091984:	10c8000c 	andi	r3,r2,8192
80091988:	1800061e 	bne	r3,zero,800919a4 <___vfiprintf_internal_r+0x6c>
8009198c:	a1001917 	ldw	r4,100(r20)
80091990:	00f7ffc4 	movi	r3,-8193
80091994:	10880014 	ori	r2,r2,8192
80091998:	20c6703a 	and	r3,r4,r3
8009199c:	a080030d 	sth	r2,12(r20)
800919a0:	a0c01915 	stw	r3,100(r20)
800919a4:	10c0020c 	andi	r3,r2,8
800919a8:	1800a926 	beq	r3,zero,80091c50 <___vfiprintf_internal_r+0x318>
800919ac:	a0c00417 	ldw	r3,16(r20)
800919b0:	1800a726 	beq	r3,zero,80091c50 <___vfiprintf_internal_r+0x318>
800919b4:	1080068c 	andi	r2,r2,26
800919b8:	00c00284 	movi	r3,10
800919bc:	10c0ac26 	beq	r2,r3,80091c70 <___vfiprintf_internal_r+0x338>
800919c0:	da801a04 	addi	r10,sp,104
800919c4:	da801e15 	stw	r10,120(sp)
800919c8:	d8801e17 	ldw	r2,120(sp)
800919cc:	da8019c4 	addi	r10,sp,103
800919d0:	05a002b4 	movhi	r22,32778
800919d4:	05e002b4 	movhi	r23,32778
800919d8:	da801f15 	stw	r10,124(sp)
800919dc:	1295c83a 	sub	r10,r2,r10
800919e0:	b5b99484 	addi	r22,r22,-6574
800919e4:	bdf99084 	addi	r23,r23,-6590
800919e8:	dec01a15 	stw	sp,104(sp)
800919ec:	d8001c15 	stw	zero,112(sp)
800919f0:	d8001b15 	stw	zero,108(sp)
800919f4:	d8002615 	stw	zero,152(sp)
800919f8:	d8002315 	stw	zero,140(sp)
800919fc:	da802715 	stw	r10,156(sp)
80091a00:	d811883a 	mov	r8,sp
80091a04:	dd002115 	stw	r20,132(sp)
80091a08:	e021883a 	mov	r16,fp
80091a0c:	80800007 	ldb	r2,0(r16)
80091a10:	1003ea26 	beq	r2,zero,800929bc <___vfiprintf_internal_r+0x1084>
80091a14:	00c00944 	movi	r3,37
80091a18:	8025883a 	mov	r18,r16
80091a1c:	10c0021e 	bne	r2,r3,80091a28 <___vfiprintf_internal_r+0xf0>
80091a20:	00001606 	br	80091a7c <___vfiprintf_internal_r+0x144>
80091a24:	10c00326 	beq	r2,r3,80091a34 <___vfiprintf_internal_r+0xfc>
80091a28:	94800044 	addi	r18,r18,1
80091a2c:	90800007 	ldb	r2,0(r18)
80091a30:	103ffc1e 	bne	r2,zero,80091a24 <___vfiprintf_internal_r+0xec>
80091a34:	9423c83a 	sub	r17,r18,r16
80091a38:	88001026 	beq	r17,zero,80091a7c <___vfiprintf_internal_r+0x144>
80091a3c:	d8c01c17 	ldw	r3,112(sp)
80091a40:	d8801b17 	ldw	r2,108(sp)
80091a44:	44000015 	stw	r16,0(r8)
80091a48:	88c7883a 	add	r3,r17,r3
80091a4c:	10800044 	addi	r2,r2,1
80091a50:	44400115 	stw	r17,4(r8)
80091a54:	d8c01c15 	stw	r3,112(sp)
80091a58:	d8801b15 	stw	r2,108(sp)
80091a5c:	010001c4 	movi	r4,7
80091a60:	2080760e 	bge	r4,r2,80091c3c <___vfiprintf_internal_r+0x304>
80091a64:	1803821e 	bne	r3,zero,80092870 <___vfiprintf_internal_r+0xf38>
80091a68:	da802317 	ldw	r10,140(sp)
80091a6c:	d8001b15 	stw	zero,108(sp)
80091a70:	d811883a 	mov	r8,sp
80091a74:	5455883a 	add	r10,r10,r17
80091a78:	da802315 	stw	r10,140(sp)
80091a7c:	90800007 	ldb	r2,0(r18)
80091a80:	10044626 	beq	r2,zero,80092b9c <___vfiprintf_internal_r+0x1264>
80091a84:	90c00047 	ldb	r3,1(r18)
80091a88:	94000044 	addi	r16,r18,1
80091a8c:	d8001d85 	stb	zero,118(sp)
80091a90:	0009883a 	mov	r4,zero
80091a94:	000f883a 	mov	r7,zero
80091a98:	027fffc4 	movi	r9,-1
80091a9c:	0023883a 	mov	r17,zero
80091aa0:	0029883a 	mov	r20,zero
80091aa4:	01401604 	movi	r5,88
80091aa8:	01800244 	movi	r6,9
80091aac:	03400a84 	movi	r13,42
80091ab0:	03001b04 	movi	r12,108
80091ab4:	84000044 	addi	r16,r16,1
80091ab8:	18bff804 	addi	r2,r3,-32
80091abc:	28827336 	bltu	r5,r2,8009248c <___vfiprintf_internal_r+0xb54>
80091ac0:	100490ba 	slli	r2,r2,2
80091ac4:	02a00274 	movhi	r10,32777
80091ac8:	5286b604 	addi	r10,r10,6872
80091acc:	1285883a 	add	r2,r2,r10
80091ad0:	10800017 	ldw	r2,0(r2)
80091ad4:	1000683a 	jmp	r2
80091ad8:	800921c0 	call	8800921c <__alt_data_end+0x7f0c21c>
80091adc:	8009248c 	andi	zero,r16,9362
80091ae0:	8009248c 	andi	zero,r16,9362
80091ae4:	800921e0 	cmpeqi	zero,r16,9351
80091ae8:	8009248c 	andi	zero,r16,9362
80091aec:	8009248c 	andi	zero,r16,9362
80091af0:	8009248c 	andi	zero,r16,9362
80091af4:	8009248c 	andi	zero,r16,9362
80091af8:	8009248c 	andi	zero,r16,9362
80091afc:	8009248c 	andi	zero,r16,9362
80091b00:	800923c8 	cmpgei	zero,r16,9359
80091b04:	800923e4 	muli	zero,r16,9359
80091b08:	8009248c 	andi	zero,r16,9362
80091b0c:	80091ccc 	andi	zero,r16,9331
80091b10:	800923f4 	orhi	zero,r16,9359
80091b14:	8009248c 	andi	zero,r16,9362
80091b18:	800921ec 	andhi	zero,r16,9351
80091b1c:	800921f8 	rdprs	zero,r16,9351
80091b20:	800921f8 	rdprs	zero,r16,9351
80091b24:	800921f8 	rdprs	zero,r16,9351
80091b28:	800921f8 	rdprs	zero,r16,9351
80091b2c:	800921f8 	rdprs	zero,r16,9351
80091b30:	800921f8 	rdprs	zero,r16,9351
80091b34:	800921f8 	rdprs	zero,r16,9351
80091b38:	800921f8 	rdprs	zero,r16,9351
80091b3c:	800921f8 	rdprs	zero,r16,9351
80091b40:	8009248c 	andi	zero,r16,9362
80091b44:	8009248c 	andi	zero,r16,9362
80091b48:	8009248c 	andi	zero,r16,9362
80091b4c:	8009248c 	andi	zero,r16,9362
80091b50:	8009248c 	andi	zero,r16,9362
80091b54:	8009248c 	andi	zero,r16,9362
80091b58:	8009248c 	andi	zero,r16,9362
80091b5c:	8009248c 	andi	zero,r16,9362
80091b60:	8009248c 	andi	zero,r16,9362
80091b64:	8009248c 	andi	zero,r16,9362
80091b68:	80092224 	muli	zero,r16,9352
80091b6c:	8009248c 	andi	zero,r16,9362
80091b70:	8009248c 	andi	zero,r16,9362
80091b74:	8009248c 	andi	zero,r16,9362
80091b78:	8009248c 	andi	zero,r16,9362
80091b7c:	8009248c 	andi	zero,r16,9362
80091b80:	8009248c 	andi	zero,r16,9362
80091b84:	8009248c 	andi	zero,r16,9362
80091b88:	8009248c 	andi	zero,r16,9362
80091b8c:	8009248c 	andi	zero,r16,9362
80091b90:	8009248c 	andi	zero,r16,9362
80091b94:	8009225c 	xori	zero,r16,9353
80091b98:	8009248c 	andi	zero,r16,9362
80091b9c:	8009248c 	andi	zero,r16,9362
80091ba0:	8009248c 	andi	zero,r16,9362
80091ba4:	8009248c 	andi	zero,r16,9362
80091ba8:	8009248c 	andi	zero,r16,9362
80091bac:	800922b4 	orhi	zero,r16,9354
80091bb0:	8009248c 	andi	zero,r16,9362
80091bb4:	8009248c 	andi	zero,r16,9362
80091bb8:	80092324 	muli	zero,r16,9356
80091bbc:	8009248c 	andi	zero,r16,9362
80091bc0:	8009248c 	andi	zero,r16,9362
80091bc4:	8009248c 	andi	zero,r16,9362
80091bc8:	8009248c 	andi	zero,r16,9362
80091bcc:	8009248c 	andi	zero,r16,9362
80091bd0:	8009248c 	andi	zero,r16,9362
80091bd4:	8009248c 	andi	zero,r16,9362
80091bd8:	8009248c 	andi	zero,r16,9362
80091bdc:	8009248c 	andi	zero,r16,9362
80091be0:	8009248c 	andi	zero,r16,9362
80091be4:	800920d0 	cmplti	zero,r16,9347
80091be8:	800920fc 	xorhi	zero,r16,9347
80091bec:	8009248c 	andi	zero,r16,9362
80091bf0:	8009248c 	andi	zero,r16,9362
80091bf4:	8009248c 	andi	zero,r16,9362
80091bf8:	80092434 	orhi	zero,r16,9360
80091bfc:	800920fc 	xorhi	zero,r16,9347
80091c00:	8009248c 	andi	zero,r16,9362
80091c04:	8009248c 	andi	zero,r16,9362
80091c08:	80091f90 	cmplti	zero,r16,9342
80091c0c:	8009248c 	andi	zero,r16,9362
80091c10:	80091fa0 	cmpeqi	zero,r16,9342
80091c14:	80091fdc 	xori	zero,r16,9343
80091c18:	80091cd8 	cmpnei	zero,r16,9331
80091c1c:	80091f84 	addi	zero,r16,9342
80091c20:	8009248c 	andi	zero,r16,9362
80091c24:	80092360 	cmpeqi	zero,r16,9357
80091c28:	8009248c 	andi	zero,r16,9362
80091c2c:	800923b8 	rdprs	zero,r16,9358
80091c30:	8009248c 	andi	zero,r16,9362
80091c34:	8009248c 	andi	zero,r16,9362
80091c38:	8009207c 	xorhi	zero,r16,9345
80091c3c:	42000204 	addi	r8,r8,8
80091c40:	da802317 	ldw	r10,140(sp)
80091c44:	5455883a 	add	r10,r10,r17
80091c48:	da802315 	stw	r10,140(sp)
80091c4c:	003f8b06 	br	80091a7c <___vfiprintf_internal_r+0x144>
80091c50:	d9002017 	ldw	r4,128(sp)
80091c54:	a00b883a 	mov	r5,r20
80091c58:	0086edc0 	call	80086edc <__swsetup_r>
80091c5c:	1003b11e 	bne	r2,zero,80092b24 <___vfiprintf_internal_r+0x11ec>
80091c60:	a080030b 	ldhu	r2,12(r20)
80091c64:	00c00284 	movi	r3,10
80091c68:	1080068c 	andi	r2,r2,26
80091c6c:	10ff541e 	bne	r2,r3,800919c0 <___vfiprintf_internal_r+0x88>
80091c70:	a080038f 	ldh	r2,14(r20)
80091c74:	103f5216 	blt	r2,zero,800919c0 <___vfiprintf_internal_r+0x88>
80091c78:	d9c02217 	ldw	r7,136(sp)
80091c7c:	d9002017 	ldw	r4,128(sp)
80091c80:	e00d883a 	mov	r6,fp
80091c84:	a00b883a 	mov	r5,r20
80091c88:	0092db00 	call	80092db0 <__sbprintf>
80091c8c:	dfc03617 	ldw	ra,216(sp)
80091c90:	df003517 	ldw	fp,212(sp)
80091c94:	ddc03417 	ldw	r23,208(sp)
80091c98:	dd803317 	ldw	r22,204(sp)
80091c9c:	dd403217 	ldw	r21,200(sp)
80091ca0:	dd003117 	ldw	r20,196(sp)
80091ca4:	dcc03017 	ldw	r19,192(sp)
80091ca8:	dc802f17 	ldw	r18,188(sp)
80091cac:	dc402e17 	ldw	r17,184(sp)
80091cb0:	dc002d17 	ldw	r16,180(sp)
80091cb4:	dec03704 	addi	sp,sp,220
80091cb8:	f800283a 	ret
80091cbc:	0088f040 	call	80088f04 <__sinit>
80091cc0:	003f2f06 	br	80091980 <___vfiprintf_internal_r+0x48>
80091cc4:	0463c83a 	sub	r17,zero,r17
80091cc8:	d8802215 	stw	r2,136(sp)
80091ccc:	a5000114 	ori	r20,r20,4
80091cd0:	80c00007 	ldb	r3,0(r16)
80091cd4:	003f7706 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
80091cd8:	00800c04 	movi	r2,48
80091cdc:	da802217 	ldw	r10,136(sp)
80091ce0:	d8801d05 	stb	r2,116(sp)
80091ce4:	00801e04 	movi	r2,120
80091ce8:	d8801d45 	stb	r2,117(sp)
80091cec:	d8001d85 	stb	zero,118(sp)
80091cf0:	50c00104 	addi	r3,r10,4
80091cf4:	54800017 	ldw	r18,0(r10)
80091cf8:	0027883a 	mov	r19,zero
80091cfc:	a0800094 	ori	r2,r20,2
80091d00:	48030b16 	blt	r9,zero,80092930 <___vfiprintf_internal_r+0xff8>
80091d04:	00bfdfc4 	movi	r2,-129
80091d08:	a096703a 	and	r11,r20,r2
80091d0c:	d8c02215 	stw	r3,136(sp)
80091d10:	5d000094 	ori	r20,r11,2
80091d14:	90032b1e 	bne	r18,zero,800929c4 <___vfiprintf_internal_r+0x108c>
80091d18:	00a002b4 	movhi	r2,32778
80091d1c:	10b86804 	addi	r2,r2,-7776
80091d20:	d8802615 	stw	r2,152(sp)
80091d24:	0039883a 	mov	fp,zero
80091d28:	48017b1e 	bne	r9,zero,80092318 <___vfiprintf_internal_r+0x9e0>
80091d2c:	0013883a 	mov	r9,zero
80091d30:	0027883a 	mov	r19,zero
80091d34:	dd401a04 	addi	r21,sp,104
80091d38:	4825883a 	mov	r18,r9
80091d3c:	4cc0010e 	bge	r9,r19,80091d44 <___vfiprintf_internal_r+0x40c>
80091d40:	9825883a 	mov	r18,r19
80091d44:	e7003fcc 	andi	fp,fp,255
80091d48:	e700201c 	xori	fp,fp,128
80091d4c:	e73fe004 	addi	fp,fp,-128
80091d50:	e0000126 	beq	fp,zero,80091d58 <___vfiprintf_internal_r+0x420>
80091d54:	94800044 	addi	r18,r18,1
80091d58:	a380008c 	andi	r14,r20,2
80091d5c:	70000126 	beq	r14,zero,80091d64 <___vfiprintf_internal_r+0x42c>
80091d60:	94800084 	addi	r18,r18,2
80091d64:	a700210c 	andi	fp,r20,132
80091d68:	e001df1e 	bne	fp,zero,800924e8 <___vfiprintf_internal_r+0xbb0>
80091d6c:	8c87c83a 	sub	r3,r17,r18
80091d70:	00c1dd0e 	bge	zero,r3,800924e8 <___vfiprintf_internal_r+0xbb0>
80091d74:	01c00404 	movi	r7,16
80091d78:	d8801c17 	ldw	r2,112(sp)
80091d7c:	38c3ad0e 	bge	r7,r3,80092c34 <___vfiprintf_internal_r+0x12fc>
80091d80:	02a002b4 	movhi	r10,32778
80091d84:	52b99484 	addi	r10,r10,-6574
80091d88:	dc002915 	stw	r16,164(sp)
80091d8c:	d9801b17 	ldw	r6,108(sp)
80091d90:	da802415 	stw	r10,144(sp)
80091d94:	03c001c4 	movi	r15,7
80091d98:	da402515 	stw	r9,148(sp)
80091d9c:	db802815 	stw	r14,160(sp)
80091da0:	1821883a 	mov	r16,r3
80091da4:	00000506 	br	80091dbc <___vfiprintf_internal_r+0x484>
80091da8:	31400084 	addi	r5,r6,2
80091dac:	42000204 	addi	r8,r8,8
80091db0:	200d883a 	mov	r6,r4
80091db4:	843ffc04 	addi	r16,r16,-16
80091db8:	3c000d0e 	bge	r7,r16,80091df0 <___vfiprintf_internal_r+0x4b8>
80091dbc:	10800404 	addi	r2,r2,16
80091dc0:	31000044 	addi	r4,r6,1
80091dc4:	45800015 	stw	r22,0(r8)
80091dc8:	41c00115 	stw	r7,4(r8)
80091dcc:	d8801c15 	stw	r2,112(sp)
80091dd0:	d9001b15 	stw	r4,108(sp)
80091dd4:	793ff40e 	bge	r15,r4,80091da8 <___vfiprintf_internal_r+0x470>
80091dd8:	1001b51e 	bne	r2,zero,800924b0 <___vfiprintf_internal_r+0xb78>
80091ddc:	843ffc04 	addi	r16,r16,-16
80091de0:	000d883a 	mov	r6,zero
80091de4:	01400044 	movi	r5,1
80091de8:	d811883a 	mov	r8,sp
80091dec:	3c3ff316 	blt	r7,r16,80091dbc <___vfiprintf_internal_r+0x484>
80091df0:	8007883a 	mov	r3,r16
80091df4:	da402517 	ldw	r9,148(sp)
80091df8:	db802817 	ldw	r14,160(sp)
80091dfc:	dc002917 	ldw	r16,164(sp)
80091e00:	da802417 	ldw	r10,144(sp)
80091e04:	1885883a 	add	r2,r3,r2
80091e08:	40c00115 	stw	r3,4(r8)
80091e0c:	42800015 	stw	r10,0(r8)
80091e10:	d8801c15 	stw	r2,112(sp)
80091e14:	d9401b15 	stw	r5,108(sp)
80091e18:	00c001c4 	movi	r3,7
80091e1c:	19426016 	blt	r3,r5,800927a0 <___vfiprintf_internal_r+0xe68>
80091e20:	d8c01d87 	ldb	r3,118(sp)
80091e24:	42000204 	addi	r8,r8,8
80091e28:	29000044 	addi	r4,r5,1
80091e2c:	1801b31e 	bne	r3,zero,800924fc <___vfiprintf_internal_r+0xbc4>
80091e30:	7001c026 	beq	r14,zero,80092534 <___vfiprintf_internal_r+0xbfc>
80091e34:	d8c01d04 	addi	r3,sp,116
80091e38:	10800084 	addi	r2,r2,2
80091e3c:	40c00015 	stw	r3,0(r8)
80091e40:	00c00084 	movi	r3,2
80091e44:	40c00115 	stw	r3,4(r8)
80091e48:	d8801c15 	stw	r2,112(sp)
80091e4c:	d9001b15 	stw	r4,108(sp)
80091e50:	00c001c4 	movi	r3,7
80091e54:	1902650e 	bge	r3,r4,800927ec <___vfiprintf_internal_r+0xeb4>
80091e58:	10029a1e 	bne	r2,zero,800928c4 <___vfiprintf_internal_r+0xf8c>
80091e5c:	00c02004 	movi	r3,128
80091e60:	01000044 	movi	r4,1
80091e64:	000b883a 	mov	r5,zero
80091e68:	d811883a 	mov	r8,sp
80091e6c:	e0c1b31e 	bne	fp,r3,8009253c <___vfiprintf_internal_r+0xc04>
80091e70:	8cb9c83a 	sub	fp,r17,r18
80091e74:	0701b10e 	bge	zero,fp,8009253c <___vfiprintf_internal_r+0xc04>
80091e78:	01c00404 	movi	r7,16
80091e7c:	3f03890e 	bge	r7,fp,80092ca4 <___vfiprintf_internal_r+0x136c>
80091e80:	00e002b4 	movhi	r3,32778
80091e84:	18f99084 	addi	r3,r3,-6590
80091e88:	d8c02415 	stw	r3,144(sp)
80091e8c:	8007883a 	mov	r3,r16
80091e90:	034001c4 	movi	r13,7
80091e94:	e021883a 	mov	r16,fp
80091e98:	da402515 	stw	r9,148(sp)
80091e9c:	1839883a 	mov	fp,r3
80091ea0:	00000506 	br	80091eb8 <___vfiprintf_internal_r+0x580>
80091ea4:	29800084 	addi	r6,r5,2
80091ea8:	42000204 	addi	r8,r8,8
80091eac:	180b883a 	mov	r5,r3
80091eb0:	843ffc04 	addi	r16,r16,-16
80091eb4:	3c000d0e 	bge	r7,r16,80091eec <___vfiprintf_internal_r+0x5b4>
80091eb8:	10800404 	addi	r2,r2,16
80091ebc:	28c00044 	addi	r3,r5,1
80091ec0:	45c00015 	stw	r23,0(r8)
80091ec4:	41c00115 	stw	r7,4(r8)
80091ec8:	d8801c15 	stw	r2,112(sp)
80091ecc:	d8c01b15 	stw	r3,108(sp)
80091ed0:	68fff40e 	bge	r13,r3,80091ea4 <___vfiprintf_internal_r+0x56c>
80091ed4:	1002241e 	bne	r2,zero,80092768 <___vfiprintf_internal_r+0xe30>
80091ed8:	843ffc04 	addi	r16,r16,-16
80091edc:	01800044 	movi	r6,1
80091ee0:	000b883a 	mov	r5,zero
80091ee4:	d811883a 	mov	r8,sp
80091ee8:	3c3ff316 	blt	r7,r16,80091eb8 <___vfiprintf_internal_r+0x580>
80091eec:	da402517 	ldw	r9,148(sp)
80091ef0:	e007883a 	mov	r3,fp
80091ef4:	8039883a 	mov	fp,r16
80091ef8:	1821883a 	mov	r16,r3
80091efc:	d8c02417 	ldw	r3,144(sp)
80091f00:	1705883a 	add	r2,r2,fp
80091f04:	47000115 	stw	fp,4(r8)
80091f08:	40c00015 	stw	r3,0(r8)
80091f0c:	d8801c15 	stw	r2,112(sp)
80091f10:	d9801b15 	stw	r6,108(sp)
80091f14:	00c001c4 	movi	r3,7
80091f18:	19827616 	blt	r3,r6,800928f4 <___vfiprintf_internal_r+0xfbc>
80091f1c:	4cf9c83a 	sub	fp,r9,r19
80091f20:	42000204 	addi	r8,r8,8
80091f24:	31000044 	addi	r4,r6,1
80091f28:	300b883a 	mov	r5,r6
80091f2c:	07018516 	blt	zero,fp,80092544 <___vfiprintf_internal_r+0xc0c>
80091f30:	9885883a 	add	r2,r19,r2
80091f34:	45400015 	stw	r21,0(r8)
80091f38:	44c00115 	stw	r19,4(r8)
80091f3c:	d8801c15 	stw	r2,112(sp)
80091f40:	d9001b15 	stw	r4,108(sp)
80091f44:	00c001c4 	movi	r3,7
80091f48:	1901dd0e 	bge	r3,r4,800926c0 <___vfiprintf_internal_r+0xd88>
80091f4c:	1002401e 	bne	r2,zero,80092850 <___vfiprintf_internal_r+0xf18>
80091f50:	d8001b15 	stw	zero,108(sp)
80091f54:	a2c0010c 	andi	r11,r20,4
80091f58:	58000226 	beq	r11,zero,80091f64 <___vfiprintf_internal_r+0x62c>
80091f5c:	8ca7c83a 	sub	r19,r17,r18
80091f60:	04c2f216 	blt	zero,r19,80092b2c <___vfiprintf_internal_r+0x11f4>
80091f64:	8c80010e 	bge	r17,r18,80091f6c <___vfiprintf_internal_r+0x634>
80091f68:	9023883a 	mov	r17,r18
80091f6c:	da802317 	ldw	r10,140(sp)
80091f70:	5455883a 	add	r10,r10,r17
80091f74:	da802315 	stw	r10,140(sp)
80091f78:	d8001b15 	stw	zero,108(sp)
80091f7c:	d811883a 	mov	r8,sp
80091f80:	003ea206 	br	80091a0c <___vfiprintf_internal_r+0xd4>
80091f84:	a5000814 	ori	r20,r20,32
80091f88:	80c00007 	ldb	r3,0(r16)
80091f8c:	003ec906 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
80091f90:	80c00007 	ldb	r3,0(r16)
80091f94:	1b030926 	beq	r3,r12,80092bbc <___vfiprintf_internal_r+0x1284>
80091f98:	a5000414 	ori	r20,r20,16
80091f9c:	003ec506 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
80091fa0:	21003fcc 	andi	r4,r4,255
80091fa4:	20035e1e 	bne	r4,zero,80092d20 <___vfiprintf_internal_r+0x13e8>
80091fa8:	a080080c 	andi	r2,r20,32
80091fac:	1002a526 	beq	r2,zero,80092a44 <___vfiprintf_internal_r+0x110c>
80091fb0:	da802217 	ldw	r10,136(sp)
80091fb4:	50800017 	ldw	r2,0(r10)
80091fb8:	da802317 	ldw	r10,140(sp)
80091fbc:	5007d7fa 	srai	r3,r10,31
80091fc0:	da802217 	ldw	r10,136(sp)
80091fc4:	10c00115 	stw	r3,4(r2)
80091fc8:	52800104 	addi	r10,r10,4
80091fcc:	da802215 	stw	r10,136(sp)
80091fd0:	da802317 	ldw	r10,140(sp)
80091fd4:	12800015 	stw	r10,0(r2)
80091fd8:	003e8c06 	br	80091a0c <___vfiprintf_internal_r+0xd4>
80091fdc:	21003fcc 	andi	r4,r4,255
80091fe0:	2003511e 	bne	r4,zero,80092d28 <___vfiprintf_internal_r+0x13f0>
80091fe4:	a080080c 	andi	r2,r20,32
80091fe8:	1000a126 	beq	r2,zero,80092270 <___vfiprintf_internal_r+0x938>
80091fec:	da802217 	ldw	r10,136(sp)
80091ff0:	d8001d85 	stb	zero,118(sp)
80091ff4:	50800204 	addi	r2,r10,8
80091ff8:	54800017 	ldw	r18,0(r10)
80091ffc:	54c00117 	ldw	r19,4(r10)
80092000:	4802b416 	blt	r9,zero,80092ad4 <___vfiprintf_internal_r+0x119c>
80092004:	013fdfc4 	movi	r4,-129
80092008:	94c6b03a 	or	r3,r18,r19
8009200c:	d8802215 	stw	r2,136(sp)
80092010:	a128703a 	and	r20,r20,r4
80092014:	1800a226 	beq	r3,zero,800922a0 <___vfiprintf_internal_r+0x968>
80092018:	0039883a 	mov	fp,zero
8009201c:	dd401a04 	addi	r21,sp,104
80092020:	9006d0fa 	srli	r3,r18,3
80092024:	9808977a 	slli	r4,r19,29
80092028:	9826d0fa 	srli	r19,r19,3
8009202c:	948001cc 	andi	r18,r18,7
80092030:	90800c04 	addi	r2,r18,48
80092034:	ad7fffc4 	addi	r21,r21,-1
80092038:	20e4b03a 	or	r18,r4,r3
8009203c:	a8800005 	stb	r2,0(r21)
80092040:	94c6b03a 	or	r3,r18,r19
80092044:	183ff61e 	bne	r3,zero,80092020 <___vfiprintf_internal_r+0x6e8>
80092048:	a0c0004c 	andi	r3,r20,1
8009204c:	18005926 	beq	r3,zero,800921b4 <___vfiprintf_internal_r+0x87c>
80092050:	10803fcc 	andi	r2,r2,255
80092054:	1080201c 	xori	r2,r2,128
80092058:	10bfe004 	addi	r2,r2,-128
8009205c:	00c00c04 	movi	r3,48
80092060:	10c05426 	beq	r2,r3,800921b4 <___vfiprintf_internal_r+0x87c>
80092064:	da801e17 	ldw	r10,120(sp)
80092068:	a8bfffc4 	addi	r2,r21,-1
8009206c:	a8ffffc5 	stb	r3,-1(r21)
80092070:	50a7c83a 	sub	r19,r10,r2
80092074:	102b883a 	mov	r21,r2
80092078:	003f2f06 	br	80091d38 <___vfiprintf_internal_r+0x400>
8009207c:	21003fcc 	andi	r4,r4,255
80092080:	2003421e 	bne	r4,zero,80092d8c <___vfiprintf_internal_r+0x1454>
80092084:	00a002b4 	movhi	r2,32778
80092088:	10b86804 	addi	r2,r2,-7776
8009208c:	d8802615 	stw	r2,152(sp)
80092090:	a080080c 	andi	r2,r20,32
80092094:	1000aa26 	beq	r2,zero,80092340 <___vfiprintf_internal_r+0xa08>
80092098:	da802217 	ldw	r10,136(sp)
8009209c:	54800017 	ldw	r18,0(r10)
800920a0:	54c00117 	ldw	r19,4(r10)
800920a4:	52800204 	addi	r10,r10,8
800920a8:	da802215 	stw	r10,136(sp)
800920ac:	a080004c 	andi	r2,r20,1
800920b0:	1001d226 	beq	r2,zero,800927fc <___vfiprintf_internal_r+0xec4>
800920b4:	94c4b03a 	or	r2,r18,r19
800920b8:	1002351e 	bne	r2,zero,80092990 <___vfiprintf_internal_r+0x1058>
800920bc:	d8001d85 	stb	zero,118(sp)
800920c0:	48022216 	blt	r9,zero,8009294c <___vfiprintf_internal_r+0x1014>
800920c4:	00bfdfc4 	movi	r2,-129
800920c8:	a0a8703a 	and	r20,r20,r2
800920cc:	003f1506 	br	80091d24 <___vfiprintf_internal_r+0x3ec>
800920d0:	da802217 	ldw	r10,136(sp)
800920d4:	04800044 	movi	r18,1
800920d8:	d8001d85 	stb	zero,118(sp)
800920dc:	50800017 	ldw	r2,0(r10)
800920e0:	52800104 	addi	r10,r10,4
800920e4:	da802215 	stw	r10,136(sp)
800920e8:	d8801005 	stb	r2,64(sp)
800920ec:	9027883a 	mov	r19,r18
800920f0:	dd401004 	addi	r21,sp,64
800920f4:	0013883a 	mov	r9,zero
800920f8:	003f1706 	br	80091d58 <___vfiprintf_internal_r+0x420>
800920fc:	21003fcc 	andi	r4,r4,255
80092100:	2003201e 	bne	r4,zero,80092d84 <___vfiprintf_internal_r+0x144c>
80092104:	a080080c 	andi	r2,r20,32
80092108:	10004b26 	beq	r2,zero,80092238 <___vfiprintf_internal_r+0x900>
8009210c:	da802217 	ldw	r10,136(sp)
80092110:	50800117 	ldw	r2,4(r10)
80092114:	54800017 	ldw	r18,0(r10)
80092118:	52800204 	addi	r10,r10,8
8009211c:	da802215 	stw	r10,136(sp)
80092120:	1027883a 	mov	r19,r2
80092124:	10022c16 	blt	r2,zero,800929d8 <___vfiprintf_internal_r+0x10a0>
80092128:	df001d83 	ldbu	fp,118(sp)
8009212c:	48007216 	blt	r9,zero,800922f8 <___vfiprintf_internal_r+0x9c0>
80092130:	00ffdfc4 	movi	r3,-129
80092134:	94c4b03a 	or	r2,r18,r19
80092138:	a0e8703a 	and	r20,r20,r3
8009213c:	1000cc26 	beq	r2,zero,80092470 <___vfiprintf_internal_r+0xb38>
80092140:	98021026 	beq	r19,zero,80092984 <___vfiprintf_internal_r+0x104c>
80092144:	dc402415 	stw	r17,144(sp)
80092148:	dc002515 	stw	r16,148(sp)
8009214c:	9823883a 	mov	r17,r19
80092150:	9021883a 	mov	r16,r18
80092154:	dd401a04 	addi	r21,sp,104
80092158:	4825883a 	mov	r18,r9
8009215c:	4027883a 	mov	r19,r8
80092160:	8009883a 	mov	r4,r16
80092164:	880b883a 	mov	r5,r17
80092168:	01800284 	movi	r6,10
8009216c:	000f883a 	mov	r7,zero
80092170:	0095c800 	call	80095c80 <__umoddi3>
80092174:	10800c04 	addi	r2,r2,48
80092178:	ad7fffc4 	addi	r21,r21,-1
8009217c:	8009883a 	mov	r4,r16
80092180:	880b883a 	mov	r5,r17
80092184:	a8800005 	stb	r2,0(r21)
80092188:	01800284 	movi	r6,10
8009218c:	000f883a 	mov	r7,zero
80092190:	00957080 	call	80095708 <__udivdi3>
80092194:	1021883a 	mov	r16,r2
80092198:	10c4b03a 	or	r2,r2,r3
8009219c:	1823883a 	mov	r17,r3
800921a0:	103fef1e 	bne	r2,zero,80092160 <___vfiprintf_internal_r+0x828>
800921a4:	dc402417 	ldw	r17,144(sp)
800921a8:	dc002517 	ldw	r16,148(sp)
800921ac:	9013883a 	mov	r9,r18
800921b0:	9811883a 	mov	r8,r19
800921b4:	da801e17 	ldw	r10,120(sp)
800921b8:	5567c83a 	sub	r19,r10,r21
800921bc:	003ede06 	br	80091d38 <___vfiprintf_internal_r+0x400>
800921c0:	38803fcc 	andi	r2,r7,255
800921c4:	1080201c 	xori	r2,r2,128
800921c8:	10bfe004 	addi	r2,r2,-128
800921cc:	1002371e 	bne	r2,zero,80092aac <___vfiprintf_internal_r+0x1174>
800921d0:	01000044 	movi	r4,1
800921d4:	01c00804 	movi	r7,32
800921d8:	80c00007 	ldb	r3,0(r16)
800921dc:	003e3506 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
800921e0:	a5000054 	ori	r20,r20,1
800921e4:	80c00007 	ldb	r3,0(r16)
800921e8:	003e3206 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
800921ec:	a5002014 	ori	r20,r20,128
800921f0:	80c00007 	ldb	r3,0(r16)
800921f4:	003e2f06 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
800921f8:	8015883a 	mov	r10,r16
800921fc:	0023883a 	mov	r17,zero
80092200:	18bff404 	addi	r2,r3,-48
80092204:	50c00007 	ldb	r3,0(r10)
80092208:	8c4002a4 	muli	r17,r17,10
8009220c:	84000044 	addi	r16,r16,1
80092210:	8015883a 	mov	r10,r16
80092214:	1463883a 	add	r17,r2,r17
80092218:	18bff404 	addi	r2,r3,-48
8009221c:	30bff92e 	bgeu	r6,r2,80092204 <___vfiprintf_internal_r+0x8cc>
80092220:	003e2506 	br	80091ab8 <___vfiprintf_internal_r+0x180>
80092224:	21003fcc 	andi	r4,r4,255
80092228:	2002d41e 	bne	r4,zero,80092d7c <___vfiprintf_internal_r+0x1444>
8009222c:	a5000414 	ori	r20,r20,16
80092230:	a080080c 	andi	r2,r20,32
80092234:	103fb51e 	bne	r2,zero,8009210c <___vfiprintf_internal_r+0x7d4>
80092238:	a080040c 	andi	r2,r20,16
8009223c:	1001f826 	beq	r2,zero,80092a20 <___vfiprintf_internal_r+0x10e8>
80092240:	da802217 	ldw	r10,136(sp)
80092244:	54800017 	ldw	r18,0(r10)
80092248:	52800104 	addi	r10,r10,4
8009224c:	da802215 	stw	r10,136(sp)
80092250:	9027d7fa 	srai	r19,r18,31
80092254:	9805883a 	mov	r2,r19
80092258:	003fb206 	br	80092124 <___vfiprintf_internal_r+0x7ec>
8009225c:	21003fcc 	andi	r4,r4,255
80092260:	2002c41e 	bne	r4,zero,80092d74 <___vfiprintf_internal_r+0x143c>
80092264:	a5000414 	ori	r20,r20,16
80092268:	a080080c 	andi	r2,r20,32
8009226c:	103f5f1e 	bne	r2,zero,80091fec <___vfiprintf_internal_r+0x6b4>
80092270:	a080040c 	andi	r2,r20,16
80092274:	10020f26 	beq	r2,zero,80092ab4 <___vfiprintf_internal_r+0x117c>
80092278:	da802217 	ldw	r10,136(sp)
8009227c:	d8001d85 	stb	zero,118(sp)
80092280:	0027883a 	mov	r19,zero
80092284:	50800104 	addi	r2,r10,4
80092288:	54800017 	ldw	r18,0(r10)
8009228c:	48021116 	blt	r9,zero,80092ad4 <___vfiprintf_internal_r+0x119c>
80092290:	00ffdfc4 	movi	r3,-129
80092294:	d8802215 	stw	r2,136(sp)
80092298:	a0e8703a 	and	r20,r20,r3
8009229c:	903f5e1e 	bne	r18,zero,80092018 <___vfiprintf_internal_r+0x6e0>
800922a0:	0039883a 	mov	fp,zero
800922a4:	4802a626 	beq	r9,zero,80092d40 <___vfiprintf_internal_r+0x1408>
800922a8:	0025883a 	mov	r18,zero
800922ac:	0027883a 	mov	r19,zero
800922b0:	003f5a06 	br	8009201c <___vfiprintf_internal_r+0x6e4>
800922b4:	21003fcc 	andi	r4,r4,255
800922b8:	20029f1e 	bne	r4,zero,80092d38 <___vfiprintf_internal_r+0x1400>
800922bc:	a5000414 	ori	r20,r20,16
800922c0:	a080080c 	andi	r2,r20,32
800922c4:	10005e1e 	bne	r2,zero,80092440 <___vfiprintf_internal_r+0xb08>
800922c8:	a080040c 	andi	r2,r20,16
800922cc:	1001a21e 	bne	r2,zero,80092958 <___vfiprintf_internal_r+0x1020>
800922d0:	a080100c 	andi	r2,r20,64
800922d4:	d8001d85 	stb	zero,118(sp)
800922d8:	da802217 	ldw	r10,136(sp)
800922dc:	1002231e 	bne	r2,zero,80092b6c <___vfiprintf_internal_r+0x1234>
800922e0:	50800104 	addi	r2,r10,4
800922e4:	54800017 	ldw	r18,0(r10)
800922e8:	0027883a 	mov	r19,zero
800922ec:	4801a00e 	bge	r9,zero,80092970 <___vfiprintf_internal_r+0x1038>
800922f0:	d8802215 	stw	r2,136(sp)
800922f4:	0039883a 	mov	fp,zero
800922f8:	94c4b03a 	or	r2,r18,r19
800922fc:	103f901e 	bne	r2,zero,80092140 <___vfiprintf_internal_r+0x808>
80092300:	00800044 	movi	r2,1
80092304:	10803fcc 	andi	r2,r2,255
80092308:	00c00044 	movi	r3,1
8009230c:	10c05926 	beq	r2,r3,80092474 <___vfiprintf_internal_r+0xb3c>
80092310:	00c00084 	movi	r3,2
80092314:	10ffe41e 	bne	r2,r3,800922a8 <___vfiprintf_internal_r+0x970>
80092318:	0025883a 	mov	r18,zero
8009231c:	0027883a 	mov	r19,zero
80092320:	00013d06 	br	80092818 <___vfiprintf_internal_r+0xee0>
80092324:	21003fcc 	andi	r4,r4,255
80092328:	2002811e 	bne	r4,zero,80092d30 <___vfiprintf_internal_r+0x13f8>
8009232c:	00a002b4 	movhi	r2,32778
80092330:	10b86304 	addi	r2,r2,-7796
80092334:	d8802615 	stw	r2,152(sp)
80092338:	a080080c 	andi	r2,r20,32
8009233c:	103f561e 	bne	r2,zero,80092098 <___vfiprintf_internal_r+0x760>
80092340:	a080040c 	andi	r2,r20,16
80092344:	1001d126 	beq	r2,zero,80092a8c <___vfiprintf_internal_r+0x1154>
80092348:	da802217 	ldw	r10,136(sp)
8009234c:	0027883a 	mov	r19,zero
80092350:	54800017 	ldw	r18,0(r10)
80092354:	52800104 	addi	r10,r10,4
80092358:	da802215 	stw	r10,136(sp)
8009235c:	003f5306 	br	800920ac <___vfiprintf_internal_r+0x774>
80092360:	da802217 	ldw	r10,136(sp)
80092364:	d8001d85 	stb	zero,118(sp)
80092368:	55400017 	ldw	r21,0(r10)
8009236c:	50c00104 	addi	r3,r10,4
80092370:	a8024226 	beq	r21,zero,80092c7c <___vfiprintf_internal_r+0x1344>
80092374:	48021816 	blt	r9,zero,80092bd8 <___vfiprintf_internal_r+0x12a0>
80092378:	480d883a 	mov	r6,r9
8009237c:	000b883a 	mov	r5,zero
80092380:	a809883a 	mov	r4,r21
80092384:	d8c02a15 	stw	r3,168(sp)
80092388:	da002b15 	stw	r8,172(sp)
8009238c:	da402c15 	stw	r9,176(sp)
80092390:	0089f180 	call	80089f18 <memchr>
80092394:	d8c02a17 	ldw	r3,168(sp)
80092398:	da002b17 	ldw	r8,172(sp)
8009239c:	da402c17 	ldw	r9,176(sp)
800923a0:	10024826 	beq	r2,zero,80092cc4 <___vfiprintf_internal_r+0x138c>
800923a4:	1567c83a 	sub	r19,r2,r21
800923a8:	df001d83 	ldbu	fp,118(sp)
800923ac:	d8c02215 	stw	r3,136(sp)
800923b0:	0013883a 	mov	r9,zero
800923b4:	003e6006 	br	80091d38 <___vfiprintf_internal_r+0x400>
800923b8:	21003fcc 	andi	r4,r4,255
800923bc:	203fc026 	beq	r4,zero,800922c0 <___vfiprintf_internal_r+0x988>
800923c0:	d9c01d85 	stb	r7,118(sp)
800923c4:	003fbe06 	br	800922c0 <___vfiprintf_internal_r+0x988>
800923c8:	da802217 	ldw	r10,136(sp)
800923cc:	54400017 	ldw	r17,0(r10)
800923d0:	50800104 	addi	r2,r10,4
800923d4:	883e3b16 	blt	r17,zero,80091cc4 <___vfiprintf_internal_r+0x38c>
800923d8:	d8802215 	stw	r2,136(sp)
800923dc:	80c00007 	ldb	r3,0(r16)
800923e0:	003db406 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
800923e4:	01000044 	movi	r4,1
800923e8:	01c00ac4 	movi	r7,43
800923ec:	80c00007 	ldb	r3,0(r16)
800923f0:	003db006 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
800923f4:	80c00007 	ldb	r3,0(r16)
800923f8:	82800044 	addi	r10,r16,1
800923fc:	1b423c26 	beq	r3,r13,80092cf0 <___vfiprintf_internal_r+0x13b8>
80092400:	18bff404 	addi	r2,r3,-48
80092404:	0013883a 	mov	r9,zero
80092408:	30822b36 	bltu	r6,r2,80092cb8 <___vfiprintf_internal_r+0x1380>
8009240c:	50c00007 	ldb	r3,0(r10)
80092410:	4a4002a4 	muli	r9,r9,10
80092414:	54000044 	addi	r16,r10,1
80092418:	8015883a 	mov	r10,r16
8009241c:	4893883a 	add	r9,r9,r2
80092420:	18bff404 	addi	r2,r3,-48
80092424:	30bff92e 	bgeu	r6,r2,8009240c <___vfiprintf_internal_r+0xad4>
80092428:	483da30e 	bge	r9,zero,80091ab8 <___vfiprintf_internal_r+0x180>
8009242c:	027fffc4 	movi	r9,-1
80092430:	003da106 	br	80091ab8 <___vfiprintf_internal_r+0x180>
80092434:	a5001014 	ori	r20,r20,64
80092438:	80c00007 	ldb	r3,0(r16)
8009243c:	003d9d06 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
80092440:	da802217 	ldw	r10,136(sp)
80092444:	d8001d85 	stb	zero,118(sp)
80092448:	50c00204 	addi	r3,r10,8
8009244c:	54800017 	ldw	r18,0(r10)
80092450:	54c00117 	ldw	r19,4(r10)
80092454:	4801ca16 	blt	r9,zero,80092b80 <___vfiprintf_internal_r+0x1248>
80092458:	013fdfc4 	movi	r4,-129
8009245c:	94c4b03a 	or	r2,r18,r19
80092460:	d8c02215 	stw	r3,136(sp)
80092464:	a128703a 	and	r20,r20,r4
80092468:	0039883a 	mov	fp,zero
8009246c:	103f341e 	bne	r2,zero,80092140 <___vfiprintf_internal_r+0x808>
80092470:	483e2e26 	beq	r9,zero,80091d2c <___vfiprintf_internal_r+0x3f4>
80092474:	0025883a 	mov	r18,zero
80092478:	94800c04 	addi	r18,r18,48
8009247c:	dc8019c5 	stb	r18,103(sp)
80092480:	dcc02717 	ldw	r19,156(sp)
80092484:	dd4019c4 	addi	r21,sp,103
80092488:	003e2b06 	br	80091d38 <___vfiprintf_internal_r+0x400>
8009248c:	21003fcc 	andi	r4,r4,255
80092490:	2002361e 	bne	r4,zero,80092d6c <___vfiprintf_internal_r+0x1434>
80092494:	1801c126 	beq	r3,zero,80092b9c <___vfiprintf_internal_r+0x1264>
80092498:	04800044 	movi	r18,1
8009249c:	d8c01005 	stb	r3,64(sp)
800924a0:	d8001d85 	stb	zero,118(sp)
800924a4:	9027883a 	mov	r19,r18
800924a8:	dd401004 	addi	r21,sp,64
800924ac:	003f1106 	br	800920f4 <___vfiprintf_internal_r+0x7bc>
800924b0:	d9402117 	ldw	r5,132(sp)
800924b4:	d9002017 	ldw	r4,128(sp)
800924b8:	d9801a04 	addi	r6,sp,104
800924bc:	d9c02b15 	stw	r7,172(sp)
800924c0:	dbc02a15 	stw	r15,168(sp)
800924c4:	00918240 	call	80091824 <__sprint_r.part.0>
800924c8:	d9c02b17 	ldw	r7,172(sp)
800924cc:	dbc02a17 	ldw	r15,168(sp)
800924d0:	10006d1e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
800924d4:	d9801b17 	ldw	r6,108(sp)
800924d8:	d8801c17 	ldw	r2,112(sp)
800924dc:	d811883a 	mov	r8,sp
800924e0:	31400044 	addi	r5,r6,1
800924e4:	003e3306 	br	80091db4 <___vfiprintf_internal_r+0x47c>
800924e8:	d9401b17 	ldw	r5,108(sp)
800924ec:	d8801c17 	ldw	r2,112(sp)
800924f0:	29000044 	addi	r4,r5,1
800924f4:	d8c01d87 	ldb	r3,118(sp)
800924f8:	183e4d26 	beq	r3,zero,80091e30 <___vfiprintf_internal_r+0x4f8>
800924fc:	00c00044 	movi	r3,1
80092500:	d9401d84 	addi	r5,sp,118
80092504:	10c5883a 	add	r2,r2,r3
80092508:	41400015 	stw	r5,0(r8)
8009250c:	40c00115 	stw	r3,4(r8)
80092510:	d8801c15 	stw	r2,112(sp)
80092514:	d9001b15 	stw	r4,108(sp)
80092518:	014001c4 	movi	r5,7
8009251c:	2900a90e 	bge	r5,r4,800927c4 <___vfiprintf_internal_r+0xe8c>
80092520:	1000da1e 	bne	r2,zero,8009288c <___vfiprintf_internal_r+0xf54>
80092524:	7000ab1e 	bne	r14,zero,800927d4 <___vfiprintf_internal_r+0xe9c>
80092528:	000b883a 	mov	r5,zero
8009252c:	1809883a 	mov	r4,r3
80092530:	d811883a 	mov	r8,sp
80092534:	00c02004 	movi	r3,128
80092538:	e0fe4d26 	beq	fp,r3,80091e70 <___vfiprintf_internal_r+0x538>
8009253c:	4cf9c83a 	sub	fp,r9,r19
80092540:	073e7b0e 	bge	zero,fp,80091f30 <___vfiprintf_internal_r+0x5f8>
80092544:	01c00404 	movi	r7,16
80092548:	3f01900e 	bge	r7,fp,80092b8c <___vfiprintf_internal_r+0x1254>
8009254c:	00e002b4 	movhi	r3,32778
80092550:	18f99084 	addi	r3,r3,-6590
80092554:	d8c02415 	stw	r3,144(sp)
80092558:	034001c4 	movi	r13,7
8009255c:	00000506 	br	80092574 <___vfiprintf_internal_r+0xc3c>
80092560:	29000084 	addi	r4,r5,2
80092564:	42000204 	addi	r8,r8,8
80092568:	180b883a 	mov	r5,r3
8009256c:	e73ffc04 	addi	fp,fp,-16
80092570:	3f000d0e 	bge	r7,fp,800925a8 <___vfiprintf_internal_r+0xc70>
80092574:	10800404 	addi	r2,r2,16
80092578:	28c00044 	addi	r3,r5,1
8009257c:	45c00015 	stw	r23,0(r8)
80092580:	41c00115 	stw	r7,4(r8)
80092584:	d8801c15 	stw	r2,112(sp)
80092588:	d8c01b15 	stw	r3,108(sp)
8009258c:	68fff40e 	bge	r13,r3,80092560 <___vfiprintf_internal_r+0xc28>
80092590:	1000101e 	bne	r2,zero,800925d4 <___vfiprintf_internal_r+0xc9c>
80092594:	e73ffc04 	addi	fp,fp,-16
80092598:	01000044 	movi	r4,1
8009259c:	000b883a 	mov	r5,zero
800925a0:	d811883a 	mov	r8,sp
800925a4:	3f3ff316 	blt	r7,fp,80092574 <___vfiprintf_internal_r+0xc3c>
800925a8:	da802417 	ldw	r10,144(sp)
800925ac:	1705883a 	add	r2,r2,fp
800925b0:	47000115 	stw	fp,4(r8)
800925b4:	42800015 	stw	r10,0(r8)
800925b8:	d8801c15 	stw	r2,112(sp)
800925bc:	d9001b15 	stw	r4,108(sp)
800925c0:	00c001c4 	movi	r3,7
800925c4:	19003616 	blt	r3,r4,800926a0 <___vfiprintf_internal_r+0xd68>
800925c8:	42000204 	addi	r8,r8,8
800925cc:	21000044 	addi	r4,r4,1
800925d0:	003e5706 	br	80091f30 <___vfiprintf_internal_r+0x5f8>
800925d4:	d9402117 	ldw	r5,132(sp)
800925d8:	d9002017 	ldw	r4,128(sp)
800925dc:	d9801a04 	addi	r6,sp,104
800925e0:	d9c02b15 	stw	r7,172(sp)
800925e4:	db402a15 	stw	r13,168(sp)
800925e8:	00918240 	call	80091824 <__sprint_r.part.0>
800925ec:	d9c02b17 	ldw	r7,172(sp)
800925f0:	db402a17 	ldw	r13,168(sp)
800925f4:	1000241e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
800925f8:	d9401b17 	ldw	r5,108(sp)
800925fc:	d8801c17 	ldw	r2,112(sp)
80092600:	d811883a 	mov	r8,sp
80092604:	29000044 	addi	r4,r5,1
80092608:	003fd806 	br	8009256c <___vfiprintf_internal_r+0xc34>
8009260c:	d9401b17 	ldw	r5,108(sp)
80092610:	00e002b4 	movhi	r3,32778
80092614:	18f99484 	addi	r3,r3,-6574
80092618:	d8c02415 	stw	r3,144(sp)
8009261c:	29400044 	addi	r5,r5,1
80092620:	d8c02417 	ldw	r3,144(sp)
80092624:	14c5883a 	add	r2,r2,r19
80092628:	44c00115 	stw	r19,4(r8)
8009262c:	40c00015 	stw	r3,0(r8)
80092630:	d8801c15 	stw	r2,112(sp)
80092634:	d9401b15 	stw	r5,108(sp)
80092638:	00c001c4 	movi	r3,7
8009263c:	1940070e 	bge	r3,r5,8009265c <___vfiprintf_internal_r+0xd24>
80092640:	103e4826 	beq	r2,zero,80091f64 <___vfiprintf_internal_r+0x62c>
80092644:	d9402117 	ldw	r5,132(sp)
80092648:	d9002017 	ldw	r4,128(sp)
8009264c:	d9801a04 	addi	r6,sp,104
80092650:	00918240 	call	80091824 <__sprint_r.part.0>
80092654:	10000c1e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
80092658:	d8801c17 	ldw	r2,112(sp)
8009265c:	8c80010e 	bge	r17,r18,80092664 <___vfiprintf_internal_r+0xd2c>
80092660:	9023883a 	mov	r17,r18
80092664:	da802317 	ldw	r10,140(sp)
80092668:	5455883a 	add	r10,r10,r17
8009266c:	da802315 	stw	r10,140(sp)
80092670:	103e4126 	beq	r2,zero,80091f78 <___vfiprintf_internal_r+0x640>
80092674:	d9402117 	ldw	r5,132(sp)
80092678:	d9002017 	ldw	r4,128(sp)
8009267c:	d9801a04 	addi	r6,sp,104
80092680:	00918240 	call	80091824 <__sprint_r.part.0>
80092684:	103e3c26 	beq	r2,zero,80091f78 <___vfiprintf_internal_r+0x640>
80092688:	dd002117 	ldw	r20,132(sp)
8009268c:	a080030b 	ldhu	r2,12(r20)
80092690:	1080100c 	andi	r2,r2,64
80092694:	1001231e 	bne	r2,zero,80092b24 <___vfiprintf_internal_r+0x11ec>
80092698:	d8802317 	ldw	r2,140(sp)
8009269c:	003d7b06 	br	80091c8c <___vfiprintf_internal_r+0x354>
800926a0:	1000991e 	bne	r2,zero,80092908 <___vfiprintf_internal_r+0xfd0>
800926a4:	00c00044 	movi	r3,1
800926a8:	9805883a 	mov	r2,r19
800926ac:	dd400015 	stw	r21,0(sp)
800926b0:	dcc00115 	stw	r19,4(sp)
800926b4:	dcc01c15 	stw	r19,112(sp)
800926b8:	d8c01b15 	stw	r3,108(sp)
800926bc:	d811883a 	mov	r8,sp
800926c0:	42000204 	addi	r8,r8,8
800926c4:	a2c0010c 	andi	r11,r20,4
800926c8:	583fe426 	beq	r11,zero,8009265c <___vfiprintf_internal_r+0xd24>
800926cc:	8ca7c83a 	sub	r19,r17,r18
800926d0:	04ffe20e 	bge	zero,r19,8009265c <___vfiprintf_internal_r+0xd24>
800926d4:	01c00404 	movi	r7,16
800926d8:	3cffcc0e 	bge	r7,r19,8009260c <___vfiprintf_internal_r+0xcd4>
800926dc:	02a002b4 	movhi	r10,32778
800926e0:	52b99484 	addi	r10,r10,-6574
800926e4:	d9001b17 	ldw	r4,108(sp)
800926e8:	da802415 	stw	r10,144(sp)
800926ec:	382b883a 	mov	r21,r7
800926f0:	050001c4 	movi	r20,7
800926f4:	df002017 	ldw	fp,128(sp)
800926f8:	00000506 	br	80092710 <___vfiprintf_internal_r+0xdd8>
800926fc:	21400084 	addi	r5,r4,2
80092700:	42000204 	addi	r8,r8,8
80092704:	1809883a 	mov	r4,r3
80092708:	9cfffc04 	addi	r19,r19,-16
8009270c:	acffc40e 	bge	r21,r19,80092620 <___vfiprintf_internal_r+0xce8>
80092710:	10800404 	addi	r2,r2,16
80092714:	20c00044 	addi	r3,r4,1
80092718:	45800015 	stw	r22,0(r8)
8009271c:	45400115 	stw	r21,4(r8)
80092720:	d8801c15 	stw	r2,112(sp)
80092724:	d8c01b15 	stw	r3,108(sp)
80092728:	a0fff40e 	bge	r20,r3,800926fc <___vfiprintf_internal_r+0xdc4>
8009272c:	1000041e 	bne	r2,zero,80092740 <___vfiprintf_internal_r+0xe08>
80092730:	01400044 	movi	r5,1
80092734:	0009883a 	mov	r4,zero
80092738:	d811883a 	mov	r8,sp
8009273c:	003ff206 	br	80092708 <___vfiprintf_internal_r+0xdd0>
80092740:	d9402117 	ldw	r5,132(sp)
80092744:	d9801a04 	addi	r6,sp,104
80092748:	e009883a 	mov	r4,fp
8009274c:	00918240 	call	80091824 <__sprint_r.part.0>
80092750:	103fcd1e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
80092754:	d9001b17 	ldw	r4,108(sp)
80092758:	d8801c17 	ldw	r2,112(sp)
8009275c:	d811883a 	mov	r8,sp
80092760:	21400044 	addi	r5,r4,1
80092764:	003fe806 	br	80092708 <___vfiprintf_internal_r+0xdd0>
80092768:	d9402117 	ldw	r5,132(sp)
8009276c:	d9002017 	ldw	r4,128(sp)
80092770:	d9801a04 	addi	r6,sp,104
80092774:	d9c02b15 	stw	r7,172(sp)
80092778:	db402a15 	stw	r13,168(sp)
8009277c:	00918240 	call	80091824 <__sprint_r.part.0>
80092780:	d9c02b17 	ldw	r7,172(sp)
80092784:	db402a17 	ldw	r13,168(sp)
80092788:	103fbf1e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
8009278c:	d9401b17 	ldw	r5,108(sp)
80092790:	d8801c17 	ldw	r2,112(sp)
80092794:	d811883a 	mov	r8,sp
80092798:	29800044 	addi	r6,r5,1
8009279c:	003dc406 	br	80091eb0 <___vfiprintf_internal_r+0x578>
800927a0:	1000d21e 	bne	r2,zero,80092aec <___vfiprintf_internal_r+0x11b4>
800927a4:	d8c01d87 	ldb	r3,118(sp)
800927a8:	18009526 	beq	r3,zero,80092a00 <___vfiprintf_internal_r+0x10c8>
800927ac:	00800044 	movi	r2,1
800927b0:	d8c01d84 	addi	r3,sp,118
800927b4:	1009883a 	mov	r4,r2
800927b8:	d8c00015 	stw	r3,0(sp)
800927bc:	d8800115 	stw	r2,4(sp)
800927c0:	d811883a 	mov	r8,sp
800927c4:	200b883a 	mov	r5,r4
800927c8:	42000204 	addi	r8,r8,8
800927cc:	21000044 	addi	r4,r4,1
800927d0:	003d9706 	br	80091e30 <___vfiprintf_internal_r+0x4f8>
800927d4:	d9001d04 	addi	r4,sp,116
800927d8:	00800084 	movi	r2,2
800927dc:	d9000015 	stw	r4,0(sp)
800927e0:	d8800115 	stw	r2,4(sp)
800927e4:	1809883a 	mov	r4,r3
800927e8:	d811883a 	mov	r8,sp
800927ec:	200b883a 	mov	r5,r4
800927f0:	42000204 	addi	r8,r8,8
800927f4:	21000044 	addi	r4,r4,1
800927f8:	003f4e06 	br	80092534 <___vfiprintf_internal_r+0xbfc>
800927fc:	d8001d85 	stb	zero,118(sp)
80092800:	48005016 	blt	r9,zero,80092944 <___vfiprintf_internal_r+0x100c>
80092804:	00ffdfc4 	movi	r3,-129
80092808:	94c4b03a 	or	r2,r18,r19
8009280c:	a0e8703a 	and	r20,r20,r3
80092810:	103d4426 	beq	r2,zero,80091d24 <___vfiprintf_internal_r+0x3ec>
80092814:	0039883a 	mov	fp,zero
80092818:	d9002617 	ldw	r4,152(sp)
8009281c:	dd401a04 	addi	r21,sp,104
80092820:	908003cc 	andi	r2,r18,15
80092824:	9806973a 	slli	r3,r19,28
80092828:	2085883a 	add	r2,r4,r2
8009282c:	9024d13a 	srli	r18,r18,4
80092830:	10800003 	ldbu	r2,0(r2)
80092834:	9826d13a 	srli	r19,r19,4
80092838:	ad7fffc4 	addi	r21,r21,-1
8009283c:	1ca4b03a 	or	r18,r3,r18
80092840:	a8800005 	stb	r2,0(r21)
80092844:	94c4b03a 	or	r2,r18,r19
80092848:	103ff51e 	bne	r2,zero,80092820 <___vfiprintf_internal_r+0xee8>
8009284c:	003e5906 	br	800921b4 <___vfiprintf_internal_r+0x87c>
80092850:	d9402117 	ldw	r5,132(sp)
80092854:	d9002017 	ldw	r4,128(sp)
80092858:	d9801a04 	addi	r6,sp,104
8009285c:	00918240 	call	80091824 <__sprint_r.part.0>
80092860:	103f891e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
80092864:	d8801c17 	ldw	r2,112(sp)
80092868:	d811883a 	mov	r8,sp
8009286c:	003f9506 	br	800926c4 <___vfiprintf_internal_r+0xd8c>
80092870:	d9402117 	ldw	r5,132(sp)
80092874:	d9002017 	ldw	r4,128(sp)
80092878:	d9801a04 	addi	r6,sp,104
8009287c:	00918240 	call	80091824 <__sprint_r.part.0>
80092880:	103f811e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
80092884:	d811883a 	mov	r8,sp
80092888:	003ced06 	br	80091c40 <___vfiprintf_internal_r+0x308>
8009288c:	d9402117 	ldw	r5,132(sp)
80092890:	d9002017 	ldw	r4,128(sp)
80092894:	d9801a04 	addi	r6,sp,104
80092898:	da402c15 	stw	r9,176(sp)
8009289c:	db802a15 	stw	r14,168(sp)
800928a0:	00918240 	call	80091824 <__sprint_r.part.0>
800928a4:	da402c17 	ldw	r9,176(sp)
800928a8:	db802a17 	ldw	r14,168(sp)
800928ac:	103f761e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
800928b0:	d9401b17 	ldw	r5,108(sp)
800928b4:	d8801c17 	ldw	r2,112(sp)
800928b8:	d811883a 	mov	r8,sp
800928bc:	29000044 	addi	r4,r5,1
800928c0:	003d5b06 	br	80091e30 <___vfiprintf_internal_r+0x4f8>
800928c4:	d9402117 	ldw	r5,132(sp)
800928c8:	d9002017 	ldw	r4,128(sp)
800928cc:	d9801a04 	addi	r6,sp,104
800928d0:	da402c15 	stw	r9,176(sp)
800928d4:	00918240 	call	80091824 <__sprint_r.part.0>
800928d8:	da402c17 	ldw	r9,176(sp)
800928dc:	103f6a1e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
800928e0:	d9401b17 	ldw	r5,108(sp)
800928e4:	d8801c17 	ldw	r2,112(sp)
800928e8:	d811883a 	mov	r8,sp
800928ec:	29000044 	addi	r4,r5,1
800928f0:	003f1006 	br	80092534 <___vfiprintf_internal_r+0xbfc>
800928f4:	1000c31e 	bne	r2,zero,80092c04 <___vfiprintf_internal_r+0x12cc>
800928f8:	01000044 	movi	r4,1
800928fc:	000b883a 	mov	r5,zero
80092900:	d811883a 	mov	r8,sp
80092904:	003f0d06 	br	8009253c <___vfiprintf_internal_r+0xc04>
80092908:	d9402117 	ldw	r5,132(sp)
8009290c:	d9002017 	ldw	r4,128(sp)
80092910:	d9801a04 	addi	r6,sp,104
80092914:	00918240 	call	80091824 <__sprint_r.part.0>
80092918:	103f5b1e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
8009291c:	d9001b17 	ldw	r4,108(sp)
80092920:	d8801c17 	ldw	r2,112(sp)
80092924:	d811883a 	mov	r8,sp
80092928:	21000044 	addi	r4,r4,1
8009292c:	003d8006 	br	80091f30 <___vfiprintf_internal_r+0x5f8>
80092930:	012002b4 	movhi	r4,32778
80092934:	21386804 	addi	r4,r4,-7776
80092938:	d9002615 	stw	r4,152(sp)
8009293c:	d8c02215 	stw	r3,136(sp)
80092940:	1029883a 	mov	r20,r2
80092944:	94c4b03a 	or	r2,r18,r19
80092948:	103fb21e 	bne	r2,zero,80092814 <___vfiprintf_internal_r+0xedc>
8009294c:	0039883a 	mov	fp,zero
80092950:	00800084 	movi	r2,2
80092954:	003e6b06 	br	80092304 <___vfiprintf_internal_r+0x9cc>
80092958:	da802217 	ldw	r10,136(sp)
8009295c:	d8001d85 	stb	zero,118(sp)
80092960:	0027883a 	mov	r19,zero
80092964:	50800104 	addi	r2,r10,4
80092968:	54800017 	ldw	r18,0(r10)
8009296c:	483e6016 	blt	r9,zero,800922f0 <___vfiprintf_internal_r+0x9b8>
80092970:	00ffdfc4 	movi	r3,-129
80092974:	d8802215 	stw	r2,136(sp)
80092978:	a0e8703a 	and	r20,r20,r3
8009297c:	0039883a 	mov	fp,zero
80092980:	903ebb26 	beq	r18,zero,80092470 <___vfiprintf_internal_r+0xb38>
80092984:	00800244 	movi	r2,9
80092988:	14bdee36 	bltu	r2,r18,80092144 <___vfiprintf_internal_r+0x80c>
8009298c:	003eba06 	br	80092478 <___vfiprintf_internal_r+0xb40>
80092990:	00800c04 	movi	r2,48
80092994:	d8c01d45 	stb	r3,117(sp)
80092998:	d8801d05 	stb	r2,116(sp)
8009299c:	d8001d85 	stb	zero,118(sp)
800929a0:	a0c00094 	ori	r3,r20,2
800929a4:	4800a916 	blt	r9,zero,80092c4c <___vfiprintf_internal_r+0x1314>
800929a8:	00bfdfc4 	movi	r2,-129
800929ac:	a096703a 	and	r11,r20,r2
800929b0:	5d000094 	ori	r20,r11,2
800929b4:	0039883a 	mov	fp,zero
800929b8:	003f9706 	br	80092818 <___vfiprintf_internal_r+0xee0>
800929bc:	8025883a 	mov	r18,r16
800929c0:	003c2e06 	br	80091a7c <___vfiprintf_internal_r+0x144>
800929c4:	00a002b4 	movhi	r2,32778
800929c8:	10b86804 	addi	r2,r2,-7776
800929cc:	0039883a 	mov	fp,zero
800929d0:	d8802615 	stw	r2,152(sp)
800929d4:	003f9006 	br	80092818 <___vfiprintf_internal_r+0xee0>
800929d8:	04a5c83a 	sub	r18,zero,r18
800929dc:	07000b44 	movi	fp,45
800929e0:	9004c03a 	cmpne	r2,r18,zero
800929e4:	04e7c83a 	sub	r19,zero,r19
800929e8:	df001d85 	stb	fp,118(sp)
800929ec:	98a7c83a 	sub	r19,r19,r2
800929f0:	48009f16 	blt	r9,zero,80092c70 <___vfiprintf_internal_r+0x1338>
800929f4:	00bfdfc4 	movi	r2,-129
800929f8:	a0a8703a 	and	r20,r20,r2
800929fc:	003dd006 	br	80092140 <___vfiprintf_internal_r+0x808>
80092a00:	70004c26 	beq	r14,zero,80092b34 <___vfiprintf_internal_r+0x11fc>
80092a04:	00800084 	movi	r2,2
80092a08:	d8c01d04 	addi	r3,sp,116
80092a0c:	d8c00015 	stw	r3,0(sp)
80092a10:	d8800115 	stw	r2,4(sp)
80092a14:	01000044 	movi	r4,1
80092a18:	d811883a 	mov	r8,sp
80092a1c:	003f7306 	br	800927ec <___vfiprintf_internal_r+0xeb4>
80092a20:	a080100c 	andi	r2,r20,64
80092a24:	da802217 	ldw	r10,136(sp)
80092a28:	103e0626 	beq	r2,zero,80092244 <___vfiprintf_internal_r+0x90c>
80092a2c:	5480000f 	ldh	r18,0(r10)
80092a30:	52800104 	addi	r10,r10,4
80092a34:	da802215 	stw	r10,136(sp)
80092a38:	9027d7fa 	srai	r19,r18,31
80092a3c:	9805883a 	mov	r2,r19
80092a40:	003db806 	br	80092124 <___vfiprintf_internal_r+0x7ec>
80092a44:	a080040c 	andi	r2,r20,16
80092a48:	1000091e 	bne	r2,zero,80092a70 <___vfiprintf_internal_r+0x1138>
80092a4c:	a2c0100c 	andi	r11,r20,64
80092a50:	58000726 	beq	r11,zero,80092a70 <___vfiprintf_internal_r+0x1138>
80092a54:	da802217 	ldw	r10,136(sp)
80092a58:	50800017 	ldw	r2,0(r10)
80092a5c:	52800104 	addi	r10,r10,4
80092a60:	da802215 	stw	r10,136(sp)
80092a64:	da802317 	ldw	r10,140(sp)
80092a68:	1280000d 	sth	r10,0(r2)
80092a6c:	003be706 	br	80091a0c <___vfiprintf_internal_r+0xd4>
80092a70:	da802217 	ldw	r10,136(sp)
80092a74:	50800017 	ldw	r2,0(r10)
80092a78:	52800104 	addi	r10,r10,4
80092a7c:	da802215 	stw	r10,136(sp)
80092a80:	da802317 	ldw	r10,140(sp)
80092a84:	12800015 	stw	r10,0(r2)
80092a88:	003be006 	br	80091a0c <___vfiprintf_internal_r+0xd4>
80092a8c:	a080100c 	andi	r2,r20,64
80092a90:	da802217 	ldw	r10,136(sp)
80092a94:	10003026 	beq	r2,zero,80092b58 <___vfiprintf_internal_r+0x1220>
80092a98:	5480000b 	ldhu	r18,0(r10)
80092a9c:	52800104 	addi	r10,r10,4
80092aa0:	0027883a 	mov	r19,zero
80092aa4:	da802215 	stw	r10,136(sp)
80092aa8:	003d8006 	br	800920ac <___vfiprintf_internal_r+0x774>
80092aac:	80c00007 	ldb	r3,0(r16)
80092ab0:	003c0006 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
80092ab4:	a080100c 	andi	r2,r20,64
80092ab8:	d8001d85 	stb	zero,118(sp)
80092abc:	da802217 	ldw	r10,136(sp)
80092ac0:	1000201e 	bne	r2,zero,80092b44 <___vfiprintf_internal_r+0x120c>
80092ac4:	50800104 	addi	r2,r10,4
80092ac8:	54800017 	ldw	r18,0(r10)
80092acc:	0027883a 	mov	r19,zero
80092ad0:	483def0e 	bge	r9,zero,80092290 <___vfiprintf_internal_r+0x958>
80092ad4:	94c6b03a 	or	r3,r18,r19
80092ad8:	d8802215 	stw	r2,136(sp)
80092adc:	183d4e1e 	bne	r3,zero,80092018 <___vfiprintf_internal_r+0x6e0>
80092ae0:	0039883a 	mov	fp,zero
80092ae4:	0005883a 	mov	r2,zero
80092ae8:	003e0606 	br	80092304 <___vfiprintf_internal_r+0x9cc>
80092aec:	d9402117 	ldw	r5,132(sp)
80092af0:	d9002017 	ldw	r4,128(sp)
80092af4:	d9801a04 	addi	r6,sp,104
80092af8:	da402c15 	stw	r9,176(sp)
80092afc:	db802a15 	stw	r14,168(sp)
80092b00:	00918240 	call	80091824 <__sprint_r.part.0>
80092b04:	da402c17 	ldw	r9,176(sp)
80092b08:	db802a17 	ldw	r14,168(sp)
80092b0c:	103ede1e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
80092b10:	d9401b17 	ldw	r5,108(sp)
80092b14:	d8801c17 	ldw	r2,112(sp)
80092b18:	d811883a 	mov	r8,sp
80092b1c:	29000044 	addi	r4,r5,1
80092b20:	003e7406 	br	800924f4 <___vfiprintf_internal_r+0xbbc>
80092b24:	00bfffc4 	movi	r2,-1
80092b28:	003c5806 	br	80091c8c <___vfiprintf_internal_r+0x354>
80092b2c:	d811883a 	mov	r8,sp
80092b30:	003ee806 	br	800926d4 <___vfiprintf_internal_r+0xd9c>
80092b34:	000b883a 	mov	r5,zero
80092b38:	01000044 	movi	r4,1
80092b3c:	d811883a 	mov	r8,sp
80092b40:	003e7c06 	br	80092534 <___vfiprintf_internal_r+0xbfc>
80092b44:	50800104 	addi	r2,r10,4
80092b48:	5480000b 	ldhu	r18,0(r10)
80092b4c:	0027883a 	mov	r19,zero
80092b50:	483dcf0e 	bge	r9,zero,80092290 <___vfiprintf_internal_r+0x958>
80092b54:	003fdf06 	br	80092ad4 <___vfiprintf_internal_r+0x119c>
80092b58:	54800017 	ldw	r18,0(r10)
80092b5c:	52800104 	addi	r10,r10,4
80092b60:	0027883a 	mov	r19,zero
80092b64:	da802215 	stw	r10,136(sp)
80092b68:	003d5006 	br	800920ac <___vfiprintf_internal_r+0x774>
80092b6c:	50800104 	addi	r2,r10,4
80092b70:	5480000b 	ldhu	r18,0(r10)
80092b74:	0027883a 	mov	r19,zero
80092b78:	483f7d0e 	bge	r9,zero,80092970 <___vfiprintf_internal_r+0x1038>
80092b7c:	003ddc06 	br	800922f0 <___vfiprintf_internal_r+0x9b8>
80092b80:	d8c02215 	stw	r3,136(sp)
80092b84:	0039883a 	mov	fp,zero
80092b88:	003ddb06 	br	800922f8 <___vfiprintf_internal_r+0x9c0>
80092b8c:	02a002b4 	movhi	r10,32778
80092b90:	52b99084 	addi	r10,r10,-6590
80092b94:	da802415 	stw	r10,144(sp)
80092b98:	003e8306 	br	800925a8 <___vfiprintf_internal_r+0xc70>
80092b9c:	d8801c17 	ldw	r2,112(sp)
80092ba0:	dd002117 	ldw	r20,132(sp)
80092ba4:	103eb926 	beq	r2,zero,8009268c <___vfiprintf_internal_r+0xd54>
80092ba8:	d9002017 	ldw	r4,128(sp)
80092bac:	d9801a04 	addi	r6,sp,104
80092bb0:	a00b883a 	mov	r5,r20
80092bb4:	00918240 	call	80091824 <__sprint_r.part.0>
80092bb8:	003eb406 	br	8009268c <___vfiprintf_internal_r+0xd54>
80092bbc:	80c00043 	ldbu	r3,1(r16)
80092bc0:	a5000814 	ori	r20,r20,32
80092bc4:	84000044 	addi	r16,r16,1
80092bc8:	18c03fcc 	andi	r3,r3,255
80092bcc:	18c0201c 	xori	r3,r3,128
80092bd0:	18ffe004 	addi	r3,r3,-128
80092bd4:	003bb706 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
80092bd8:	a809883a 	mov	r4,r21
80092bdc:	d8c02a15 	stw	r3,168(sp)
80092be0:	da002b15 	stw	r8,172(sp)
80092be4:	00833580 	call	80083358 <strlen>
80092be8:	d8c02a17 	ldw	r3,168(sp)
80092bec:	1027883a 	mov	r19,r2
80092bf0:	df001d83 	ldbu	fp,118(sp)
80092bf4:	d8c02215 	stw	r3,136(sp)
80092bf8:	0013883a 	mov	r9,zero
80092bfc:	da002b17 	ldw	r8,172(sp)
80092c00:	003c4d06 	br	80091d38 <___vfiprintf_internal_r+0x400>
80092c04:	d9402117 	ldw	r5,132(sp)
80092c08:	d9002017 	ldw	r4,128(sp)
80092c0c:	d9801a04 	addi	r6,sp,104
80092c10:	da402c15 	stw	r9,176(sp)
80092c14:	00918240 	call	80091824 <__sprint_r.part.0>
80092c18:	da402c17 	ldw	r9,176(sp)
80092c1c:	103e9a1e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xd50>
80092c20:	d9401b17 	ldw	r5,108(sp)
80092c24:	d8801c17 	ldw	r2,112(sp)
80092c28:	d811883a 	mov	r8,sp
80092c2c:	29000044 	addi	r4,r5,1
80092c30:	003e4206 	br	8009253c <___vfiprintf_internal_r+0xc04>
80092c34:	d9401b17 	ldw	r5,108(sp)
80092c38:	012002b4 	movhi	r4,32778
80092c3c:	21399484 	addi	r4,r4,-6574
80092c40:	d9002415 	stw	r4,144(sp)
80092c44:	29400044 	addi	r5,r5,1
80092c48:	003c6d06 	br	80091e00 <___vfiprintf_internal_r+0x4c8>
80092c4c:	0039883a 	mov	fp,zero
80092c50:	00800084 	movi	r2,2
80092c54:	10803fcc 	andi	r2,r2,255
80092c58:	01000044 	movi	r4,1
80092c5c:	11001e26 	beq	r2,r4,80092cd8 <___vfiprintf_internal_r+0x13a0>
80092c60:	01000084 	movi	r4,2
80092c64:	11001e1e 	bne	r2,r4,80092ce0 <___vfiprintf_internal_r+0x13a8>
80092c68:	1829883a 	mov	r20,r3
80092c6c:	003eea06 	br	80092818 <___vfiprintf_internal_r+0xee0>
80092c70:	a007883a 	mov	r3,r20
80092c74:	00800044 	movi	r2,1
80092c78:	003ff606 	br	80092c54 <___vfiprintf_internal_r+0x131c>
80092c7c:	00800184 	movi	r2,6
80092c80:	1240012e 	bgeu	r2,r9,80092c88 <___vfiprintf_internal_r+0x1350>
80092c84:	1013883a 	mov	r9,r2
80092c88:	4827883a 	mov	r19,r9
80092c8c:	4825883a 	mov	r18,r9
80092c90:	48001516 	blt	r9,zero,80092ce8 <___vfiprintf_internal_r+0x13b0>
80092c94:	056002b4 	movhi	r21,32778
80092c98:	d8c02215 	stw	r3,136(sp)
80092c9c:	ad786d04 	addi	r21,r21,-7756
80092ca0:	003d1406 	br	800920f4 <___vfiprintf_internal_r+0x7bc>
80092ca4:	02a002b4 	movhi	r10,32778
80092ca8:	52b99084 	addi	r10,r10,-6590
80092cac:	da802415 	stw	r10,144(sp)
80092cb0:	200d883a 	mov	r6,r4
80092cb4:	003c9106 	br	80091efc <___vfiprintf_internal_r+0x5c4>
80092cb8:	5021883a 	mov	r16,r10
80092cbc:	0013883a 	mov	r9,zero
80092cc0:	003b7d06 	br	80091ab8 <___vfiprintf_internal_r+0x180>
80092cc4:	4827883a 	mov	r19,r9
80092cc8:	df001d83 	ldbu	fp,118(sp)
80092ccc:	d8c02215 	stw	r3,136(sp)
80092cd0:	0013883a 	mov	r9,zero
80092cd4:	003c1806 	br	80091d38 <___vfiprintf_internal_r+0x400>
80092cd8:	1829883a 	mov	r20,r3
80092cdc:	003d1806 	br	80092140 <___vfiprintf_internal_r+0x808>
80092ce0:	1829883a 	mov	r20,r3
80092ce4:	003ccd06 	br	8009201c <___vfiprintf_internal_r+0x6e4>
80092ce8:	0025883a 	mov	r18,zero
80092cec:	003fe906 	br	80092c94 <___vfiprintf_internal_r+0x135c>
80092cf0:	d8802217 	ldw	r2,136(sp)
80092cf4:	80c00043 	ldbu	r3,1(r16)
80092cf8:	5021883a 	mov	r16,r10
80092cfc:	12400017 	ldw	r9,0(r2)
80092d00:	10800104 	addi	r2,r2,4
80092d04:	d8802215 	stw	r2,136(sp)
80092d08:	483faf0e 	bge	r9,zero,80092bc8 <___vfiprintf_internal_r+0x1290>
80092d0c:	18c03fcc 	andi	r3,r3,255
80092d10:	18c0201c 	xori	r3,r3,128
80092d14:	027fffc4 	movi	r9,-1
80092d18:	18ffe004 	addi	r3,r3,-128
80092d1c:	003b6506 	br	80091ab4 <___vfiprintf_internal_r+0x17c>
80092d20:	d9c01d85 	stb	r7,118(sp)
80092d24:	003ca006 	br	80091fa8 <___vfiprintf_internal_r+0x670>
80092d28:	d9c01d85 	stb	r7,118(sp)
80092d2c:	003cad06 	br	80091fe4 <___vfiprintf_internal_r+0x6ac>
80092d30:	d9c01d85 	stb	r7,118(sp)
80092d34:	003d7d06 	br	8009232c <___vfiprintf_internal_r+0x9f4>
80092d38:	d9c01d85 	stb	r7,118(sp)
80092d3c:	003d5f06 	br	800922bc <___vfiprintf_internal_r+0x984>
80092d40:	a080004c 	andi	r2,r20,1
80092d44:	0039883a 	mov	fp,zero
80092d48:	10000526 	beq	r2,zero,80092d60 <___vfiprintf_internal_r+0x1428>
80092d4c:	00800c04 	movi	r2,48
80092d50:	d88019c5 	stb	r2,103(sp)
80092d54:	dcc02717 	ldw	r19,156(sp)
80092d58:	dd4019c4 	addi	r21,sp,103
80092d5c:	003bf606 	br	80091d38 <___vfiprintf_internal_r+0x400>
80092d60:	0027883a 	mov	r19,zero
80092d64:	dd401a04 	addi	r21,sp,104
80092d68:	003bf306 	br	80091d38 <___vfiprintf_internal_r+0x400>
80092d6c:	d9c01d85 	stb	r7,118(sp)
80092d70:	003dc806 	br	80092494 <___vfiprintf_internal_r+0xb5c>
80092d74:	d9c01d85 	stb	r7,118(sp)
80092d78:	003d3a06 	br	80092264 <___vfiprintf_internal_r+0x92c>
80092d7c:	d9c01d85 	stb	r7,118(sp)
80092d80:	003d2a06 	br	8009222c <___vfiprintf_internal_r+0x8f4>
80092d84:	d9c01d85 	stb	r7,118(sp)
80092d88:	003cde06 	br	80092104 <___vfiprintf_internal_r+0x7cc>
80092d8c:	d9c01d85 	stb	r7,118(sp)
80092d90:	003cbc06 	br	80092084 <___vfiprintf_internal_r+0x74c>

80092d94 <__vfiprintf_internal>:
80092d94:	00a002b4 	movhi	r2,32778
80092d98:	1081bf04 	addi	r2,r2,1788
80092d9c:	300f883a 	mov	r7,r6
80092da0:	280d883a 	mov	r6,r5
80092da4:	200b883a 	mov	r5,r4
80092da8:	11000017 	ldw	r4,0(r2)
80092dac:	00919381 	jmpi	80091938 <___vfiprintf_internal_r>

80092db0 <__sbprintf>:
80092db0:	2880030b 	ldhu	r2,12(r5)
80092db4:	2ac01917 	ldw	r11,100(r5)
80092db8:	2a80038b 	ldhu	r10,14(r5)
80092dbc:	2a400717 	ldw	r9,28(r5)
80092dc0:	2a000917 	ldw	r8,36(r5)
80092dc4:	defee204 	addi	sp,sp,-1144
80092dc8:	00c10004 	movi	r3,1024
80092dcc:	dc011a15 	stw	r16,1128(sp)
80092dd0:	10bfff4c 	andi	r2,r2,65533
80092dd4:	2821883a 	mov	r16,r5
80092dd8:	d8cb883a 	add	r5,sp,r3
80092ddc:	dc811c15 	stw	r18,1136(sp)
80092de0:	dc411b15 	stw	r17,1132(sp)
80092de4:	dfc11d15 	stw	ra,1140(sp)
80092de8:	2025883a 	mov	r18,r4
80092dec:	d881030d 	sth	r2,1036(sp)
80092df0:	dac11915 	stw	r11,1124(sp)
80092df4:	da81038d 	sth	r10,1038(sp)
80092df8:	da410715 	stw	r9,1052(sp)
80092dfc:	da010915 	stw	r8,1060(sp)
80092e00:	dec10015 	stw	sp,1024(sp)
80092e04:	dec10415 	stw	sp,1040(sp)
80092e08:	d8c10215 	stw	r3,1032(sp)
80092e0c:	d8c10515 	stw	r3,1044(sp)
80092e10:	d8010615 	stw	zero,1048(sp)
80092e14:	00919380 	call	80091938 <___vfiprintf_internal_r>
80092e18:	1023883a 	mov	r17,r2
80092e1c:	10000416 	blt	r2,zero,80092e30 <__sbprintf+0x80>
80092e20:	d9410004 	addi	r5,sp,1024
80092e24:	9009883a 	mov	r4,r18
80092e28:	0088b280 	call	80088b28 <_fflush_r>
80092e2c:	10000d1e 	bne	r2,zero,80092e64 <__sbprintf+0xb4>
80092e30:	d881030b 	ldhu	r2,1036(sp)
80092e34:	1080100c 	andi	r2,r2,64
80092e38:	10000326 	beq	r2,zero,80092e48 <__sbprintf+0x98>
80092e3c:	8080030b 	ldhu	r2,12(r16)
80092e40:	10801014 	ori	r2,r2,64
80092e44:	8080030d 	sth	r2,12(r16)
80092e48:	8805883a 	mov	r2,r17
80092e4c:	dfc11d17 	ldw	ra,1140(sp)
80092e50:	dc811c17 	ldw	r18,1136(sp)
80092e54:	dc411b17 	ldw	r17,1132(sp)
80092e58:	dc011a17 	ldw	r16,1128(sp)
80092e5c:	dec11e04 	addi	sp,sp,1144
80092e60:	f800283a 	ret
80092e64:	047fffc4 	movi	r17,-1
80092e68:	003ff106 	br	80092e30 <__sbprintf+0x80>

80092e6c <__swbuf_r>:
80092e6c:	defffb04 	addi	sp,sp,-20
80092e70:	dcc00315 	stw	r19,12(sp)
80092e74:	dc800215 	stw	r18,8(sp)
80092e78:	dc000015 	stw	r16,0(sp)
80092e7c:	dfc00415 	stw	ra,16(sp)
80092e80:	dc400115 	stw	r17,4(sp)
80092e84:	2025883a 	mov	r18,r4
80092e88:	2827883a 	mov	r19,r5
80092e8c:	3021883a 	mov	r16,r6
80092e90:	20000226 	beq	r4,zero,80092e9c <__swbuf_r+0x30>
80092e94:	20800e17 	ldw	r2,56(r4)
80092e98:	10004226 	beq	r2,zero,80092fa4 <__swbuf_r+0x138>
80092e9c:	80800617 	ldw	r2,24(r16)
80092ea0:	8100030b 	ldhu	r4,12(r16)
80092ea4:	80800215 	stw	r2,8(r16)
80092ea8:	2080020c 	andi	r2,r4,8
80092eac:	10003626 	beq	r2,zero,80092f88 <__swbuf_r+0x11c>
80092eb0:	80c00417 	ldw	r3,16(r16)
80092eb4:	18003426 	beq	r3,zero,80092f88 <__swbuf_r+0x11c>
80092eb8:	2088000c 	andi	r2,r4,8192
80092ebc:	9c403fcc 	andi	r17,r19,255
80092ec0:	10001a26 	beq	r2,zero,80092f2c <__swbuf_r+0xc0>
80092ec4:	80800017 	ldw	r2,0(r16)
80092ec8:	81000517 	ldw	r4,20(r16)
80092ecc:	10c7c83a 	sub	r3,r2,r3
80092ed0:	1900200e 	bge	r3,r4,80092f54 <__swbuf_r+0xe8>
80092ed4:	18c00044 	addi	r3,r3,1
80092ed8:	81000217 	ldw	r4,8(r16)
80092edc:	11400044 	addi	r5,r2,1
80092ee0:	81400015 	stw	r5,0(r16)
80092ee4:	213fffc4 	addi	r4,r4,-1
80092ee8:	81000215 	stw	r4,8(r16)
80092eec:	14c00005 	stb	r19,0(r2)
80092ef0:	80800517 	ldw	r2,20(r16)
80092ef4:	10c01e26 	beq	r2,r3,80092f70 <__swbuf_r+0x104>
80092ef8:	8080030b 	ldhu	r2,12(r16)
80092efc:	1080004c 	andi	r2,r2,1
80092f00:	10000226 	beq	r2,zero,80092f0c <__swbuf_r+0xa0>
80092f04:	00800284 	movi	r2,10
80092f08:	88801926 	beq	r17,r2,80092f70 <__swbuf_r+0x104>
80092f0c:	8805883a 	mov	r2,r17
80092f10:	dfc00417 	ldw	ra,16(sp)
80092f14:	dcc00317 	ldw	r19,12(sp)
80092f18:	dc800217 	ldw	r18,8(sp)
80092f1c:	dc400117 	ldw	r17,4(sp)
80092f20:	dc000017 	ldw	r16,0(sp)
80092f24:	dec00504 	addi	sp,sp,20
80092f28:	f800283a 	ret
80092f2c:	81401917 	ldw	r5,100(r16)
80092f30:	00b7ffc4 	movi	r2,-8193
80092f34:	21080014 	ori	r4,r4,8192
80092f38:	2884703a 	and	r2,r5,r2
80092f3c:	80801915 	stw	r2,100(r16)
80092f40:	80800017 	ldw	r2,0(r16)
80092f44:	8100030d 	sth	r4,12(r16)
80092f48:	81000517 	ldw	r4,20(r16)
80092f4c:	10c7c83a 	sub	r3,r2,r3
80092f50:	193fe016 	blt	r3,r4,80092ed4 <__swbuf_r+0x68>
80092f54:	800b883a 	mov	r5,r16
80092f58:	9009883a 	mov	r4,r18
80092f5c:	0088b280 	call	80088b28 <_fflush_r>
80092f60:	1000071e 	bne	r2,zero,80092f80 <__swbuf_r+0x114>
80092f64:	80800017 	ldw	r2,0(r16)
80092f68:	00c00044 	movi	r3,1
80092f6c:	003fda06 	br	80092ed8 <__swbuf_r+0x6c>
80092f70:	800b883a 	mov	r5,r16
80092f74:	9009883a 	mov	r4,r18
80092f78:	0088b280 	call	80088b28 <_fflush_r>
80092f7c:	103fe326 	beq	r2,zero,80092f0c <__swbuf_r+0xa0>
80092f80:	00bfffc4 	movi	r2,-1
80092f84:	003fe206 	br	80092f10 <__swbuf_r+0xa4>
80092f88:	800b883a 	mov	r5,r16
80092f8c:	9009883a 	mov	r4,r18
80092f90:	0086edc0 	call	80086edc <__swsetup_r>
80092f94:	103ffa1e 	bne	r2,zero,80092f80 <__swbuf_r+0x114>
80092f98:	8100030b 	ldhu	r4,12(r16)
80092f9c:	80c00417 	ldw	r3,16(r16)
80092fa0:	003fc506 	br	80092eb8 <__swbuf_r+0x4c>
80092fa4:	0088f040 	call	80088f04 <__sinit>
80092fa8:	003fbc06 	br	80092e9c <__swbuf_r+0x30>

80092fac <__swbuf>:
80092fac:	00a002b4 	movhi	r2,32778
80092fb0:	1081bf04 	addi	r2,r2,1788
80092fb4:	280d883a 	mov	r6,r5
80092fb8:	200b883a 	mov	r5,r4
80092fbc:	11000017 	ldw	r4,0(r2)
80092fc0:	0092e6c1 	jmpi	80092e6c <__swbuf_r>

80092fc4 <_calloc_r>:
80092fc4:	298b383a 	mul	r5,r5,r6
80092fc8:	defffe04 	addi	sp,sp,-8
80092fcc:	dfc00115 	stw	ra,4(sp)
80092fd0:	dc000015 	stw	r16,0(sp)
80092fd4:	008251c0 	call	8008251c <_malloc_r>
80092fd8:	10002926 	beq	r2,zero,80093080 <_calloc_r+0xbc>
80092fdc:	11bfff17 	ldw	r6,-4(r2)
80092fe0:	1021883a 	mov	r16,r2
80092fe4:	00bfff04 	movi	r2,-4
80092fe8:	308c703a 	and	r6,r6,r2
80092fec:	00c00904 	movi	r3,36
80092ff0:	308d883a 	add	r6,r6,r2
80092ff4:	19801636 	bltu	r3,r6,80093050 <_calloc_r+0x8c>
80092ff8:	008004c4 	movi	r2,19
80092ffc:	11800b2e 	bgeu	r2,r6,8009302c <_calloc_r+0x68>
80093000:	80000015 	stw	zero,0(r16)
80093004:	80000115 	stw	zero,4(r16)
80093008:	008006c4 	movi	r2,27
8009300c:	11801a2e 	bgeu	r2,r6,80093078 <_calloc_r+0xb4>
80093010:	80000215 	stw	zero,8(r16)
80093014:	80000315 	stw	zero,12(r16)
80093018:	30c0151e 	bne	r6,r3,80093070 <_calloc_r+0xac>
8009301c:	80000415 	stw	zero,16(r16)
80093020:	80800604 	addi	r2,r16,24
80093024:	80000515 	stw	zero,20(r16)
80093028:	00000106 	br	80093030 <_calloc_r+0x6c>
8009302c:	8005883a 	mov	r2,r16
80093030:	10000015 	stw	zero,0(r2)
80093034:	10000115 	stw	zero,4(r2)
80093038:	10000215 	stw	zero,8(r2)
8009303c:	8005883a 	mov	r2,r16
80093040:	dfc00117 	ldw	ra,4(sp)
80093044:	dc000017 	ldw	r16,0(sp)
80093048:	dec00204 	addi	sp,sp,8
8009304c:	f800283a 	ret
80093050:	000b883a 	mov	r5,zero
80093054:	8009883a 	mov	r4,r16
80093058:	008a1580 	call	8008a158 <memset>
8009305c:	8005883a 	mov	r2,r16
80093060:	dfc00117 	ldw	ra,4(sp)
80093064:	dc000017 	ldw	r16,0(sp)
80093068:	dec00204 	addi	sp,sp,8
8009306c:	f800283a 	ret
80093070:	80800404 	addi	r2,r16,16
80093074:	003fee06 	br	80093030 <_calloc_r+0x6c>
80093078:	80800204 	addi	r2,r16,8
8009307c:	003fec06 	br	80093030 <_calloc_r+0x6c>
80093080:	0005883a 	mov	r2,zero
80093084:	003fee06 	br	80093040 <_calloc_r+0x7c>

80093088 <_fclose_r>:
80093088:	28003926 	beq	r5,zero,80093170 <_fclose_r+0xe8>
8009308c:	defffc04 	addi	sp,sp,-16
80093090:	dc400115 	stw	r17,4(sp)
80093094:	dc000015 	stw	r16,0(sp)
80093098:	dfc00315 	stw	ra,12(sp)
8009309c:	dc800215 	stw	r18,8(sp)
800930a0:	2023883a 	mov	r17,r4
800930a4:	2821883a 	mov	r16,r5
800930a8:	20000226 	beq	r4,zero,800930b4 <_fclose_r+0x2c>
800930ac:	20800e17 	ldw	r2,56(r4)
800930b0:	10002726 	beq	r2,zero,80093150 <_fclose_r+0xc8>
800930b4:	8080030f 	ldh	r2,12(r16)
800930b8:	1000071e 	bne	r2,zero,800930d8 <_fclose_r+0x50>
800930bc:	0005883a 	mov	r2,zero
800930c0:	dfc00317 	ldw	ra,12(sp)
800930c4:	dc800217 	ldw	r18,8(sp)
800930c8:	dc400117 	ldw	r17,4(sp)
800930cc:	dc000017 	ldw	r16,0(sp)
800930d0:	dec00404 	addi	sp,sp,16
800930d4:	f800283a 	ret
800930d8:	800b883a 	mov	r5,r16
800930dc:	8809883a 	mov	r4,r17
800930e0:	008890c0 	call	8008890c <__sflush_r>
800930e4:	1025883a 	mov	r18,r2
800930e8:	80800b17 	ldw	r2,44(r16)
800930ec:	10000426 	beq	r2,zero,80093100 <_fclose_r+0x78>
800930f0:	81400717 	ldw	r5,28(r16)
800930f4:	8809883a 	mov	r4,r17
800930f8:	103ee83a 	callr	r2
800930fc:	10001616 	blt	r2,zero,80093158 <_fclose_r+0xd0>
80093100:	8080030b 	ldhu	r2,12(r16)
80093104:	1080200c 	andi	r2,r2,128
80093108:	1000151e 	bne	r2,zero,80093160 <_fclose_r+0xd8>
8009310c:	81400c17 	ldw	r5,48(r16)
80093110:	28000526 	beq	r5,zero,80093128 <_fclose_r+0xa0>
80093114:	80801004 	addi	r2,r16,64
80093118:	28800226 	beq	r5,r2,80093124 <_fclose_r+0x9c>
8009311c:	8809883a 	mov	r4,r17
80093120:	00890780 	call	80089078 <_free_r>
80093124:	80000c15 	stw	zero,48(r16)
80093128:	81401117 	ldw	r5,68(r16)
8009312c:	28000326 	beq	r5,zero,8009313c <_fclose_r+0xb4>
80093130:	8809883a 	mov	r4,r17
80093134:	00890780 	call	80089078 <_free_r>
80093138:	80001115 	stw	zero,68(r16)
8009313c:	0088f140 	call	80088f14 <__sfp_lock_acquire>
80093140:	8000030d 	sth	zero,12(r16)
80093144:	0088f180 	call	80088f18 <__sfp_lock_release>
80093148:	9005883a 	mov	r2,r18
8009314c:	003fdc06 	br	800930c0 <_fclose_r+0x38>
80093150:	0088f040 	call	80088f04 <__sinit>
80093154:	003fd706 	br	800930b4 <_fclose_r+0x2c>
80093158:	04bfffc4 	movi	r18,-1
8009315c:	003fe806 	br	80093100 <_fclose_r+0x78>
80093160:	81400417 	ldw	r5,16(r16)
80093164:	8809883a 	mov	r4,r17
80093168:	00890780 	call	80089078 <_free_r>
8009316c:	003fe706 	br	8009310c <_fclose_r+0x84>
80093170:	0005883a 	mov	r2,zero
80093174:	f800283a 	ret

80093178 <fclose>:
80093178:	00a002b4 	movhi	r2,32778
8009317c:	1081bf04 	addi	r2,r2,1788
80093180:	200b883a 	mov	r5,r4
80093184:	11000017 	ldw	r4,0(r2)
80093188:	00930881 	jmpi	80093088 <_fclose_r>

8009318c <__fputwc>:
8009318c:	defff804 	addi	sp,sp,-32
80093190:	dcc00415 	stw	r19,16(sp)
80093194:	dc800315 	stw	r18,12(sp)
80093198:	dc000115 	stw	r16,4(sp)
8009319c:	dfc00715 	stw	ra,28(sp)
800931a0:	dd400615 	stw	r21,24(sp)
800931a4:	dd000515 	stw	r20,20(sp)
800931a8:	dc400215 	stw	r17,8(sp)
800931ac:	2027883a 	mov	r19,r4
800931b0:	2825883a 	mov	r18,r5
800931b4:	3021883a 	mov	r16,r6
800931b8:	0089a840 	call	80089a84 <__locale_mb_cur_max>
800931bc:	00c00044 	movi	r3,1
800931c0:	10c03e26 	beq	r2,r3,800932bc <__fputwc+0x130>
800931c4:	81c01704 	addi	r7,r16,92
800931c8:	900d883a 	mov	r6,r18
800931cc:	d80b883a 	mov	r5,sp
800931d0:	9809883a 	mov	r4,r19
800931d4:	00954ac0 	call	800954ac <_wcrtomb_r>
800931d8:	1029883a 	mov	r20,r2
800931dc:	00bfffc4 	movi	r2,-1
800931e0:	a0802026 	beq	r20,r2,80093264 <__fputwc+0xd8>
800931e4:	d9400003 	ldbu	r5,0(sp)
800931e8:	a0001c26 	beq	r20,zero,8009325c <__fputwc+0xd0>
800931ec:	0023883a 	mov	r17,zero
800931f0:	05400284 	movi	r21,10
800931f4:	00000906 	br	8009321c <__fputwc+0x90>
800931f8:	80800017 	ldw	r2,0(r16)
800931fc:	11400005 	stb	r5,0(r2)
80093200:	80c00017 	ldw	r3,0(r16)
80093204:	18c00044 	addi	r3,r3,1
80093208:	80c00015 	stw	r3,0(r16)
8009320c:	8c400044 	addi	r17,r17,1
80093210:	dc45883a 	add	r2,sp,r17
80093214:	8d00112e 	bgeu	r17,r20,8009325c <__fputwc+0xd0>
80093218:	11400003 	ldbu	r5,0(r2)
8009321c:	80c00217 	ldw	r3,8(r16)
80093220:	18ffffc4 	addi	r3,r3,-1
80093224:	80c00215 	stw	r3,8(r16)
80093228:	183ff30e 	bge	r3,zero,800931f8 <__fputwc+0x6c>
8009322c:	80800617 	ldw	r2,24(r16)
80093230:	18801916 	blt	r3,r2,80093298 <__fputwc+0x10c>
80093234:	80800017 	ldw	r2,0(r16)
80093238:	11400005 	stb	r5,0(r2)
8009323c:	80800017 	ldw	r2,0(r16)
80093240:	10c00003 	ldbu	r3,0(r2)
80093244:	10800044 	addi	r2,r2,1
80093248:	1d402326 	beq	r3,r21,800932d8 <__fputwc+0x14c>
8009324c:	80800015 	stw	r2,0(r16)
80093250:	8c400044 	addi	r17,r17,1
80093254:	dc45883a 	add	r2,sp,r17
80093258:	8d3fef36 	bltu	r17,r20,80093218 <__fputwc+0x8c>
8009325c:	9005883a 	mov	r2,r18
80093260:	00000406 	br	80093274 <__fputwc+0xe8>
80093264:	80c0030b 	ldhu	r3,12(r16)
80093268:	a005883a 	mov	r2,r20
8009326c:	18c01014 	ori	r3,r3,64
80093270:	80c0030d 	sth	r3,12(r16)
80093274:	dfc00717 	ldw	ra,28(sp)
80093278:	dd400617 	ldw	r21,24(sp)
8009327c:	dd000517 	ldw	r20,20(sp)
80093280:	dcc00417 	ldw	r19,16(sp)
80093284:	dc800317 	ldw	r18,12(sp)
80093288:	dc400217 	ldw	r17,8(sp)
8009328c:	dc000117 	ldw	r16,4(sp)
80093290:	dec00804 	addi	sp,sp,32
80093294:	f800283a 	ret
80093298:	800d883a 	mov	r6,r16
8009329c:	29403fcc 	andi	r5,r5,255
800932a0:	9809883a 	mov	r4,r19
800932a4:	0092e6c0 	call	80092e6c <__swbuf_r>
800932a8:	10bfffe0 	cmpeqi	r2,r2,-1
800932ac:	10803fcc 	andi	r2,r2,255
800932b0:	103fd626 	beq	r2,zero,8009320c <__fputwc+0x80>
800932b4:	00bfffc4 	movi	r2,-1
800932b8:	003fee06 	br	80093274 <__fputwc+0xe8>
800932bc:	90ffffc4 	addi	r3,r18,-1
800932c0:	01003f84 	movi	r4,254
800932c4:	20ffbf36 	bltu	r4,r3,800931c4 <__fputwc+0x38>
800932c8:	900b883a 	mov	r5,r18
800932cc:	dc800005 	stb	r18,0(sp)
800932d0:	1029883a 	mov	r20,r2
800932d4:	003fc506 	br	800931ec <__fputwc+0x60>
800932d8:	800d883a 	mov	r6,r16
800932dc:	a80b883a 	mov	r5,r21
800932e0:	9809883a 	mov	r4,r19
800932e4:	0092e6c0 	call	80092e6c <__swbuf_r>
800932e8:	10bfffe0 	cmpeqi	r2,r2,-1
800932ec:	003fef06 	br	800932ac <__fputwc+0x120>

800932f0 <_fputwc_r>:
800932f0:	3080030b 	ldhu	r2,12(r6)
800932f4:	10c8000c 	andi	r3,r2,8192
800932f8:	1800051e 	bne	r3,zero,80093310 <_fputwc_r+0x20>
800932fc:	30c01917 	ldw	r3,100(r6)
80093300:	10880014 	ori	r2,r2,8192
80093304:	3080030d 	sth	r2,12(r6)
80093308:	18880014 	ori	r2,r3,8192
8009330c:	30801915 	stw	r2,100(r6)
80093310:	009318c1 	jmpi	8009318c <__fputwc>

80093314 <fputwc>:
80093314:	00a002b4 	movhi	r2,32778
80093318:	defffc04 	addi	sp,sp,-16
8009331c:	1081bf04 	addi	r2,r2,1788
80093320:	dc000115 	stw	r16,4(sp)
80093324:	14000017 	ldw	r16,0(r2)
80093328:	dc400215 	stw	r17,8(sp)
8009332c:	dfc00315 	stw	ra,12(sp)
80093330:	2023883a 	mov	r17,r4
80093334:	80000226 	beq	r16,zero,80093340 <fputwc+0x2c>
80093338:	80800e17 	ldw	r2,56(r16)
8009333c:	10001026 	beq	r2,zero,80093380 <fputwc+0x6c>
80093340:	2880030b 	ldhu	r2,12(r5)
80093344:	10c8000c 	andi	r3,r2,8192
80093348:	1800051e 	bne	r3,zero,80093360 <fputwc+0x4c>
8009334c:	28c01917 	ldw	r3,100(r5)
80093350:	10880014 	ori	r2,r2,8192
80093354:	2880030d 	sth	r2,12(r5)
80093358:	18880014 	ori	r2,r3,8192
8009335c:	28801915 	stw	r2,100(r5)
80093360:	280d883a 	mov	r6,r5
80093364:	8009883a 	mov	r4,r16
80093368:	880b883a 	mov	r5,r17
8009336c:	dfc00317 	ldw	ra,12(sp)
80093370:	dc400217 	ldw	r17,8(sp)
80093374:	dc000117 	ldw	r16,4(sp)
80093378:	dec00404 	addi	sp,sp,16
8009337c:	009318c1 	jmpi	8009318c <__fputwc>
80093380:	8009883a 	mov	r4,r16
80093384:	d9400015 	stw	r5,0(sp)
80093388:	0088f040 	call	80088f04 <__sinit>
8009338c:	d9400017 	ldw	r5,0(sp)
80093390:	003feb06 	br	80093340 <fputwc+0x2c>

80093394 <_fstat_r>:
80093394:	defffd04 	addi	sp,sp,-12
80093398:	2805883a 	mov	r2,r5
8009339c:	dc000015 	stw	r16,0(sp)
800933a0:	042002b4 	movhi	r16,32778
800933a4:	dc400115 	stw	r17,4(sp)
800933a8:	8408e204 	addi	r16,r16,9096
800933ac:	2023883a 	mov	r17,r4
800933b0:	300b883a 	mov	r5,r6
800933b4:	1009883a 	mov	r4,r2
800933b8:	dfc00215 	stw	ra,8(sp)
800933bc:	80000015 	stw	zero,0(r16)
800933c0:	0098df40 	call	80098df4 <fstat>
800933c4:	00ffffc4 	movi	r3,-1
800933c8:	10c00526 	beq	r2,r3,800933e0 <_fstat_r+0x4c>
800933cc:	dfc00217 	ldw	ra,8(sp)
800933d0:	dc400117 	ldw	r17,4(sp)
800933d4:	dc000017 	ldw	r16,0(sp)
800933d8:	dec00304 	addi	sp,sp,12
800933dc:	f800283a 	ret
800933e0:	80c00017 	ldw	r3,0(r16)
800933e4:	183ff926 	beq	r3,zero,800933cc <_fstat_r+0x38>
800933e8:	88c00015 	stw	r3,0(r17)
800933ec:	003ff706 	br	800933cc <_fstat_r+0x38>

800933f0 <rshift>:
800933f0:	2807d17a 	srai	r3,r5,5
800933f4:	20800417 	ldw	r2,16(r4)
800933f8:	22000504 	addi	r8,r4,20
800933fc:	1880250e 	bge	r3,r2,80093494 <rshift+0xa4>
80093400:	1085883a 	add	r2,r2,r2
80093404:	18c7883a 	add	r3,r3,r3
80093408:	1085883a 	add	r2,r2,r2
8009340c:	18c7883a 	add	r3,r3,r3
80093410:	294007cc 	andi	r5,r5,31
80093414:	4085883a 	add	r2,r8,r2
80093418:	40c7883a 	add	r3,r8,r3
8009341c:	28002026 	beq	r5,zero,800934a0 <rshift+0xb0>
80093420:	19800017 	ldw	r6,0(r3)
80093424:	02c00804 	movi	r11,32
80093428:	19c00104 	addi	r7,r3,4
8009342c:	5957c83a 	sub	r11,r11,r5
80093430:	314cd83a 	srl	r6,r6,r5
80093434:	38802c2e 	bgeu	r7,r2,800934e8 <rshift+0xf8>
80093438:	4015883a 	mov	r10,r8
8009343c:	3a400017 	ldw	r9,0(r7)
80093440:	52800104 	addi	r10,r10,4
80093444:	39c00104 	addi	r7,r7,4
80093448:	4ad2983a 	sll	r9,r9,r11
8009344c:	498cb03a 	or	r6,r9,r6
80093450:	51bfff15 	stw	r6,-4(r10)
80093454:	39bfff17 	ldw	r6,-4(r7)
80093458:	314cd83a 	srl	r6,r6,r5
8009345c:	38bff736 	bltu	r7,r2,8009343c <rshift+0x4c>
80093460:	10c7c83a 	sub	r3,r2,r3
80093464:	18fffec4 	addi	r3,r3,-5
80093468:	1806d0ba 	srli	r3,r3,2
8009346c:	18c00044 	addi	r3,r3,1
80093470:	18c7883a 	add	r3,r3,r3
80093474:	18c7883a 	add	r3,r3,r3
80093478:	40c7883a 	add	r3,r8,r3
8009347c:	19800015 	stw	r6,0(r3)
80093480:	30000126 	beq	r6,zero,80093488 <rshift+0x98>
80093484:	18c00104 	addi	r3,r3,4
80093488:	1a05c83a 	sub	r2,r3,r8
8009348c:	1005d0ba 	srai	r2,r2,2
80093490:	00001206 	br	800934dc <rshift+0xec>
80093494:	20000415 	stw	zero,16(r4)
80093498:	20000515 	stw	zero,20(r4)
8009349c:	f800283a 	ret
800934a0:	18bffc2e 	bgeu	r3,r2,80093494 <rshift+0xa4>
800934a4:	180d883a 	mov	r6,r3
800934a8:	400b883a 	mov	r5,r8
800934ac:	31c00017 	ldw	r7,0(r6)
800934b0:	29400104 	addi	r5,r5,4
800934b4:	31800104 	addi	r6,r6,4
800934b8:	29ffff15 	stw	r7,-4(r5)
800934bc:	30bffb36 	bltu	r6,r2,800934ac <rshift+0xbc>
800934c0:	00c6303a 	nor	r3,zero,r3
800934c4:	1885883a 	add	r2,r3,r2
800934c8:	1004d0ba 	srli	r2,r2,2
800934cc:	10800044 	addi	r2,r2,1
800934d0:	1085883a 	add	r2,r2,r2
800934d4:	1085883a 	add	r2,r2,r2
800934d8:	1005d0ba 	srai	r2,r2,2
800934dc:	20800415 	stw	r2,16(r4)
800934e0:	103fed26 	beq	r2,zero,80093498 <rshift+0xa8>
800934e4:	f800283a 	ret
800934e8:	4007883a 	mov	r3,r8
800934ec:	003fe306 	br	8009347c <rshift+0x8c>

800934f0 <__gethex>:
800934f0:	deffeb04 	addi	sp,sp,-84
800934f4:	dfc01415 	stw	ra,80(sp)
800934f8:	dd801115 	stw	r22,68(sp)
800934fc:	dcc00e15 	stw	r19,56(sp)
80093500:	dc800d15 	stw	r18,52(sp)
80093504:	2827883a 	mov	r19,r5
80093508:	d9000115 	stw	r4,4(sp)
8009350c:	d9800015 	stw	r6,0(sp)
80093510:	d9c00415 	stw	r7,16(sp)
80093514:	df001315 	stw	fp,76(sp)
80093518:	ddc01215 	stw	r23,72(sp)
8009351c:	dd401015 	stw	r21,64(sp)
80093520:	dd000f15 	stw	r20,60(sp)
80093524:	dc400c15 	stw	r17,48(sp)
80093528:	dc000b15 	stw	r16,44(sp)
8009352c:	0089aa80 	call	80089aa8 <_localeconv_r>
80093530:	14800017 	ldw	r18,0(r2)
80093534:	9009883a 	mov	r4,r18
80093538:	00833580 	call	80083358 <strlen>
8009353c:	98c00017 	ldw	r3,0(r19)
80093540:	102d883a 	mov	r22,r2
80093544:	9085883a 	add	r2,r18,r2
80093548:	10bfffc3 	ldbu	r2,-1(r2)
8009354c:	19000083 	ldbu	r4,2(r3)
80093550:	d8800305 	stb	r2,12(sp)
80093554:	00800c04 	movi	r2,48
80093558:	2081521e 	bne	r4,r2,80093aa4 <__gethex+0x5b4>
8009355c:	017fff84 	movi	r5,-2
80093560:	188000c4 	addi	r2,r3,3
80093564:	28cbc83a 	sub	r5,r5,r3
80093568:	200d883a 	mov	r6,r4
8009356c:	28a3883a 	add	r17,r5,r2
80093570:	102b883a 	mov	r21,r2
80093574:	10800044 	addi	r2,r2,1
80093578:	113fffc3 	ldbu	r4,-1(r2)
8009357c:	21bffb26 	beq	r4,r6,8009356c <__gethex+0x7c>
80093580:	052002b4 	movhi	r20,32778
80093584:	a5399884 	addi	r20,r20,-6558
80093588:	a109883a 	add	r4,r20,r4
8009358c:	20800003 	ldbu	r2,0(r4)
80093590:	10008826 	beq	r2,zero,800937b4 <__gethex+0x2c4>
80093594:	a8800003 	ldbu	r2,0(r21)
80093598:	0015883a 	mov	r10,zero
8009359c:	002f883a 	mov	r23,zero
800935a0:	a085883a 	add	r2,r20,r2
800935a4:	10800003 	ldbu	r2,0(r2)
800935a8:	a821883a 	mov	r16,r21
800935ac:	10000526 	beq	r2,zero,800935c4 <__gethex+0xd4>
800935b0:	84000044 	addi	r16,r16,1
800935b4:	80800003 	ldbu	r2,0(r16)
800935b8:	a085883a 	add	r2,r20,r2
800935bc:	10800003 	ldbu	r2,0(r2)
800935c0:	103ffb1e 	bne	r2,zero,800935b0 <__gethex+0xc0>
800935c4:	b00d883a 	mov	r6,r22
800935c8:	900b883a 	mov	r5,r18
800935cc:	8009883a 	mov	r4,r16
800935d0:	da800a15 	stw	r10,40(sp)
800935d4:	0093fd00 	call	80093fd0 <strncmp>
800935d8:	da800a17 	ldw	r10,40(sp)
800935dc:	1000031e 	bne	r2,zero,800935ec <__gethex+0xfc>
800935e0:	b8015226 	beq	r23,zero,80093b2c <__gethex+0x63c>
800935e4:	80800003 	ldbu	r2,0(r16)
800935e8:	00000206 	br	800935f4 <__gethex+0x104>
800935ec:	80800003 	ldbu	r2,0(r16)
800935f0:	b8011f26 	beq	r23,zero,80093a70 <__gethex+0x580>
800935f4:	85efc83a 	sub	r23,r16,r23
800935f8:	bdef883a 	add	r23,r23,r23
800935fc:	bdef883a 	add	r23,r23,r23
80093600:	05efc83a 	sub	r23,zero,r23
80093604:	10803fcc 	andi	r2,r2,255
80093608:	01001404 	movi	r4,80
8009360c:	11008626 	beq	r2,r4,80093828 <__gethex+0x338>
80093610:	01001c04 	movi	r4,112
80093614:	11008426 	beq	r2,r4,80093828 <__gethex+0x338>
80093618:	8039883a 	mov	fp,r16
8009361c:	9c000015 	stw	r16,0(r19)
80093620:	5000711e 	bne	r10,zero,800937e8 <__gethex+0x2f8>
80093624:	e545c83a 	sub	r2,fp,r21
80093628:	10bfffc4 	addi	r2,r2,-1
8009362c:	010001c4 	movi	r4,7
80093630:	000b883a 	mov	r5,zero
80093634:	2080030e 	bge	r4,r2,80093644 <__gethex+0x154>
80093638:	1005d07a 	srai	r2,r2,1
8009363c:	29400044 	addi	r5,r5,1
80093640:	20bffd16 	blt	r4,r2,80093638 <__gethex+0x148>
80093644:	d9000117 	ldw	r4,4(sp)
80093648:	008a2800 	call	8008a280 <_Balloc>
8009364c:	10c00504 	addi	r3,r2,20
80093650:	d8c00215 	stw	r3,8(sp)
80093654:	1021883a 	mov	r16,r2
80093658:	af01732e 	bgeu	r21,fp,80093c28 <__gethex+0x738>
8009365c:	dc400303 	ldbu	r17,12(sp)
80093660:	03400044 	movi	r13,1
80093664:	1815883a 	mov	r10,r3
80093668:	0013883a 	mov	r9,zero
8009366c:	0027883a 	mov	r19,zero
80093670:	6d9bc83a 	sub	r13,r13,r22
80093674:	02c00804 	movi	r11,32
80093678:	e0bfffc3 	ldbu	r2,-1(fp)
8009367c:	e3bfffc4 	addi	r14,fp,-1
80093680:	88803026 	beq	r17,r2,80093744 <__gethex+0x254>
80093684:	9ac04526 	beq	r19,r11,8009379c <__gethex+0x2ac>
80093688:	980b883a 	mov	r5,r19
8009368c:	9cc00104 	addi	r19,r19,4
80093690:	e13fffc3 	ldbu	r4,-1(fp)
80093694:	7039883a 	mov	fp,r14
80093698:	a109883a 	add	r4,r20,r4
8009369c:	20800003 	ldbu	r2,0(r4)
800936a0:	108003cc 	andi	r2,r2,15
800936a4:	1144983a 	sll	r2,r2,r5
800936a8:	4892b03a 	or	r9,r9,r2
800936ac:	af3ff236 	bltu	r21,fp,80093678 <__gethex+0x188>
800936b0:	d8c00217 	ldw	r3,8(sp)
800936b4:	50800104 	addi	r2,r10,4
800936b8:	52400015 	stw	r9,0(r10)
800936bc:	10c5c83a 	sub	r2,r2,r3
800936c0:	1005d0ba 	srai	r2,r2,2
800936c4:	4809883a 	mov	r4,r9
800936c8:	80800415 	stw	r2,16(r16)
800936cc:	1022917a 	slli	r17,r2,5
800936d0:	008a5740 	call	8008a574 <__hi0bits>
800936d4:	d8c00017 	ldw	r3,0(sp)
800936d8:	8885c83a 	sub	r2,r17,r2
800936dc:	1c800017 	ldw	r18,0(r3)
800936e0:	9080c716 	blt	r18,r2,80093a00 <__gethex+0x510>
800936e4:	1480e416 	blt	r2,r18,80093a78 <__gethex+0x588>
800936e8:	0027883a 	mov	r19,zero
800936ec:	d8c00017 	ldw	r3,0(sp)
800936f0:	18800217 	ldw	r2,8(r3)
800936f4:	15c08d16 	blt	r2,r23,8009392c <__gethex+0x43c>
800936f8:	d8c00017 	ldw	r3,0(sp)
800936fc:	18800117 	ldw	r2,4(r3)
80093700:	b880aa0e 	bge	r23,r2,800939ac <__gethex+0x4bc>
80093704:	15efc83a 	sub	r23,r2,r23
80093708:	bc80ed16 	blt	r23,r18,80093ac0 <__gethex+0x5d0>
8009370c:	18c00317 	ldw	r3,12(r3)
80093710:	01000084 	movi	r4,2
80093714:	19014926 	beq	r3,r4,80093c3c <__gethex+0x74c>
80093718:	010000c4 	movi	r4,3
8009371c:	19012e26 	beq	r3,r4,80093bd8 <__gethex+0x6e8>
80093720:	01000044 	movi	r4,1
80093724:	19014826 	beq	r3,r4,80093c48 <__gethex+0x758>
80093728:	d9000117 	ldw	r4,4(sp)
8009372c:	800b883a 	mov	r5,r16
80093730:	008a3280 	call	8008a328 <_Bfree>
80093734:	d8801517 	ldw	r2,84(sp)
80093738:	10000015 	stw	zero,0(r2)
8009373c:	00801404 	movi	r2,80
80093740:	00002b06 	br	800937f0 <__gethex+0x300>
80093744:	735f883a 	add	r15,r14,r13
80093748:	7d7fce36 	bltu	r15,r21,80093684 <__gethex+0x194>
8009374c:	7809883a 	mov	r4,r15
80093750:	b00d883a 	mov	r6,r22
80093754:	900b883a 	mov	r5,r18
80093758:	da400515 	stw	r9,20(sp)
8009375c:	da800a15 	stw	r10,40(sp)
80093760:	dac00915 	stw	r11,36(sp)
80093764:	db400815 	stw	r13,32(sp)
80093768:	db800615 	stw	r14,24(sp)
8009376c:	dbc00715 	stw	r15,28(sp)
80093770:	0093fd00 	call	80093fd0 <strncmp>
80093774:	da400517 	ldw	r9,20(sp)
80093778:	da800a17 	ldw	r10,40(sp)
8009377c:	dac00917 	ldw	r11,36(sp)
80093780:	db400817 	ldw	r13,32(sp)
80093784:	db800617 	ldw	r14,24(sp)
80093788:	dbc00717 	ldw	r15,28(sp)
8009378c:	103fbd1e 	bne	r2,zero,80093684 <__gethex+0x194>
80093790:	7839883a 	mov	fp,r15
80093794:	af3fb836 	bltu	r21,fp,80093678 <__gethex+0x188>
80093798:	003fc506 	br	800936b0 <__gethex+0x1c0>
8009379c:	04c00104 	movi	r19,4
800937a0:	52400015 	stw	r9,0(r10)
800937a4:	000b883a 	mov	r5,zero
800937a8:	54d5883a 	add	r10,r10,r19
800937ac:	0013883a 	mov	r9,zero
800937b0:	003fb706 	br	80093690 <__gethex+0x1a0>
800937b4:	b00d883a 	mov	r6,r22
800937b8:	900b883a 	mov	r5,r18
800937bc:	a809883a 	mov	r4,r21
800937c0:	0093fd00 	call	80093fd0 <strncmp>
800937c4:	10006426 	beq	r2,zero,80093958 <__gethex+0x468>
800937c8:	a8800003 	ldbu	r2,0(r21)
800937cc:	a821883a 	mov	r16,r21
800937d0:	10803fcc 	andi	r2,r2,255
800937d4:	01001404 	movi	r4,80
800937d8:	11001126 	beq	r2,r4,80093820 <__gethex+0x330>
800937dc:	01001c04 	movi	r4,112
800937e0:	11000f26 	beq	r2,r4,80093820 <__gethex+0x330>
800937e4:	9c000015 	stw	r16,0(r19)
800937e8:	8800831e 	bne	r17,zero,800939f8 <__gethex+0x508>
800937ec:	00800184 	movi	r2,6
800937f0:	dfc01417 	ldw	ra,80(sp)
800937f4:	df001317 	ldw	fp,76(sp)
800937f8:	ddc01217 	ldw	r23,72(sp)
800937fc:	dd801117 	ldw	r22,68(sp)
80093800:	dd401017 	ldw	r21,64(sp)
80093804:	dd000f17 	ldw	r20,60(sp)
80093808:	dcc00e17 	ldw	r19,56(sp)
8009380c:	dc800d17 	ldw	r18,52(sp)
80093810:	dc400c17 	ldw	r17,48(sp)
80093814:	dc000b17 	ldw	r16,44(sp)
80093818:	dec01504 	addi	sp,sp,84
8009381c:	f800283a 	ret
80093820:	002f883a 	mov	r23,zero
80093824:	02800044 	movi	r10,1
80093828:	80800043 	ldbu	r2,1(r16)
8009382c:	01400ac4 	movi	r5,43
80093830:	11003fcc 	andi	r4,r2,255
80093834:	21406e26 	beq	r4,r5,800939f0 <__gethex+0x500>
80093838:	01400b44 	movi	r5,45
8009383c:	21404226 	beq	r4,r5,80093948 <__gethex+0x458>
80093840:	81400044 	addi	r5,r16,1
80093844:	000d883a 	mov	r6,zero
80093848:	10803fcc 	andi	r2,r2,255
8009384c:	a085883a 	add	r2,r20,r2
80093850:	11000003 	ldbu	r4,0(r2)
80093854:	03000604 	movi	r12,24
80093858:	20bfffc4 	addi	r2,r4,-1
8009385c:	10803fcc 	andi	r2,r2,255
80093860:	60bf6d36 	bltu	r12,r2,80093618 <__gethex+0x128>
80093864:	2ac00043 	ldbu	r11,1(r5)
80093868:	20803fcc 	andi	r2,r4,255
8009386c:	012002b4 	movhi	r4,32778
80093870:	21399884 	addi	r4,r4,-6558
80093874:	22c9883a 	add	r4,r4,r11
80093878:	23400003 	ldbu	r13,0(r4)
8009387c:	10bffc04 	addi	r2,r2,-16
80093880:	29400044 	addi	r5,r5,1
80093884:	693fffc4 	addi	r4,r13,-1
80093888:	21003fcc 	andi	r4,r4,255
8009388c:	6b403fcc 	andi	r13,r13,255
80093890:	61000b36 	bltu	r12,r4,800938c0 <__gethex+0x3d0>
80093894:	29400044 	addi	r5,r5,1
80093898:	29000003 	ldbu	r4,0(r5)
8009389c:	108002a4 	muli	r2,r2,10
800938a0:	a109883a 	add	r4,r20,r4
800938a4:	22c00003 	ldbu	r11,0(r4)
800938a8:	1345883a 	add	r2,r2,r13
800938ac:	10bffc04 	addi	r2,r2,-16
800938b0:	593fffc4 	addi	r4,r11,-1
800938b4:	21003fcc 	andi	r4,r4,255
800938b8:	5b403fcc 	andi	r13,r11,255
800938bc:	613ff52e 	bgeu	r12,r4,80093894 <__gethex+0x3a4>
800938c0:	30000126 	beq	r6,zero,800938c8 <__gethex+0x3d8>
800938c4:	0085c83a 	sub	r2,zero,r2
800938c8:	8039883a 	mov	fp,r16
800938cc:	b8af883a 	add	r23,r23,r2
800938d0:	2821883a 	mov	r16,r5
800938d4:	003f5106 	br	8009361c <__gethex+0x12c>
800938d8:	80800217 	ldw	r2,8(r16)
800938dc:	e080f00e 	bge	fp,r2,80093ca0 <__gethex+0x7b0>
800938e0:	e007883a 	mov	r3,fp
800938e4:	18800144 	addi	r2,r3,5
800938e8:	1085883a 	add	r2,r2,r2
800938ec:	18c00044 	addi	r3,r3,1
800938f0:	1085883a 	add	r2,r2,r2
800938f4:	8085883a 	add	r2,r16,r2
800938f8:	80c00415 	stw	r3,16(r16)
800938fc:	01000044 	movi	r4,1
80093900:	11000015 	stw	r4,0(r2)
80093904:	00800084 	movi	r2,2
80093908:	8880d826 	beq	r17,r2,80093c6c <__gethex+0x77c>
8009390c:	e0c0ac0e 	bge	fp,r3,80093bc0 <__gethex+0x6d0>
80093910:	01400044 	movi	r5,1
80093914:	8009883a 	mov	r4,r16
80093918:	00933f00 	call	800933f0 <rshift>
8009391c:	d8c00017 	ldw	r3,0(sp)
80093920:	bdc00044 	addi	r23,r23,1
80093924:	18800217 	ldw	r2,8(r3)
80093928:	15c0a70e 	bge	r2,r23,80093bc8 <__gethex+0x6d8>
8009392c:	d9000117 	ldw	r4,4(sp)
80093930:	800b883a 	mov	r5,r16
80093934:	008a3280 	call	8008a328 <_Bfree>
80093938:	d9001517 	ldw	r4,84(sp)
8009393c:	008028c4 	movi	r2,163
80093940:	20000015 	stw	zero,0(r4)
80093944:	003faa06 	br	800937f0 <__gethex+0x300>
80093948:	01800044 	movi	r6,1
8009394c:	80800083 	ldbu	r2,2(r16)
80093950:	81400084 	addi	r5,r16,2
80093954:	003fbc06 	br	80093848 <__gethex+0x358>
80093958:	ada1883a 	add	r16,r21,r22
8009395c:	81000003 	ldbu	r4,0(r16)
80093960:	21403fcc 	andi	r5,r4,255
80093964:	a145883a 	add	r2,r20,r5
80093968:	10800003 	ldbu	r2,0(r2)
8009396c:	11803fcc 	andi	r6,r2,255
80093970:	30004f26 	beq	r6,zero,80093ab0 <__gethex+0x5c0>
80093974:	00c00c04 	movi	r3,48
80093978:	802b883a 	mov	r21,r16
8009397c:	28c0061e 	bne	r5,r3,80093998 <__gethex+0x4a8>
80093980:	2809883a 	mov	r4,r5
80093984:	ad400044 	addi	r21,r21,1
80093988:	a8800003 	ldbu	r2,0(r21)
8009398c:	113ffd26 	beq	r2,r4,80093984 <__gethex+0x494>
80093990:	a085883a 	add	r2,r20,r2
80093994:	10800003 	ldbu	r2,0(r2)
80093998:	10803fcc 	andi	r2,r2,255
8009399c:	1015003a 	cmpeq	r10,r2,zero
800939a0:	802f883a 	mov	r23,r16
800939a4:	04400044 	movi	r17,1
800939a8:	003eff06 	br	800935a8 <__gethex+0xb8>
800939ac:	04400044 	movi	r17,1
800939b0:	98000926 	beq	r19,zero,800939d8 <__gethex+0x4e8>
800939b4:	d8c00017 	ldw	r3,0(sp)
800939b8:	18800317 	ldw	r2,12(r3)
800939bc:	00c00084 	movi	r3,2
800939c0:	10c06826 	beq	r2,r3,80093b64 <__gethex+0x674>
800939c4:	00c000c4 	movi	r3,3
800939c8:	10c06a26 	beq	r2,r3,80093b74 <__gethex+0x684>
800939cc:	00c00044 	movi	r3,1
800939d0:	10c08d26 	beq	r2,r3,80093c08 <__gethex+0x718>
800939d4:	8c400414 	ori	r17,r17,16
800939d8:	d9001517 	ldw	r4,84(sp)
800939dc:	d8c00417 	ldw	r3,16(sp)
800939e0:	8805883a 	mov	r2,r17
800939e4:	24000015 	stw	r16,0(r4)
800939e8:	1dc00015 	stw	r23,0(r3)
800939ec:	003f8006 	br	800937f0 <__gethex+0x300>
800939f0:	000d883a 	mov	r6,zero
800939f4:	003fd506 	br	8009394c <__gethex+0x45c>
800939f8:	0005883a 	mov	r2,zero
800939fc:	003f7c06 	br	800937f0 <__gethex+0x300>
80093a00:	14a3c83a 	sub	r17,r2,r18
80093a04:	880b883a 	mov	r5,r17
80093a08:	8009883a 	mov	r4,r16
80093a0c:	008b1f00 	call	8008b1f0 <__any_on>
80093a10:	10002926 	beq	r2,zero,80093ab8 <__gethex+0x5c8>
80093a14:	897fffc4 	addi	r5,r17,-1
80093a18:	2807d17a 	srai	r3,r5,5
80093a1c:	d8800217 	ldw	r2,8(sp)
80093a20:	290007cc 	andi	r4,r5,31
80093a24:	18c7883a 	add	r3,r3,r3
80093a28:	18c7883a 	add	r3,r3,r3
80093a2c:	04c00044 	movi	r19,1
80093a30:	10c7883a 	add	r3,r2,r3
80093a34:	9908983a 	sll	r4,r19,r4
80093a38:	18c00017 	ldw	r3,0(r3)
80093a3c:	20c6703a 	and	r3,r4,r3
80093a40:	18000626 	beq	r3,zero,80093a5c <__gethex+0x56c>
80093a44:	99407b0e 	bge	r19,r5,80093c34 <__gethex+0x744>
80093a48:	897fff84 	addi	r5,r17,-2
80093a4c:	8009883a 	mov	r4,r16
80093a50:	008b1f00 	call	8008b1f0 <__any_on>
80093a54:	10007726 	beq	r2,zero,80093c34 <__gethex+0x744>
80093a58:	04c000c4 	movi	r19,3
80093a5c:	880b883a 	mov	r5,r17
80093a60:	8009883a 	mov	r4,r16
80093a64:	00933f00 	call	800933f0 <rshift>
80093a68:	bc6f883a 	add	r23,r23,r17
80093a6c:	003f1f06 	br	800936ec <__gethex+0x1fc>
80093a70:	002f883a 	mov	r23,zero
80093a74:	003ee306 	br	80093604 <__gethex+0x114>
80093a78:	d9000117 	ldw	r4,4(sp)
80093a7c:	90a3c83a 	sub	r17,r18,r2
80093a80:	800b883a 	mov	r5,r16
80093a84:	880d883a 	mov	r6,r17
80093a88:	008aa000 	call	8008aa00 <__lshift>
80093a8c:	10c00504 	addi	r3,r2,20
80093a90:	1021883a 	mov	r16,r2
80093a94:	bc6fc83a 	sub	r23,r23,r17
80093a98:	d8c00215 	stw	r3,8(sp)
80093a9c:	0027883a 	mov	r19,zero
80093aa0:	003f1206 	br	800936ec <__gethex+0x1fc>
80093aa4:	1d400084 	addi	r21,r3,2
80093aa8:	0023883a 	mov	r17,zero
80093aac:	003eb406 	br	80093580 <__gethex+0x90>
80093ab0:	2005883a 	mov	r2,r4
80093ab4:	003f4606 	br	800937d0 <__gethex+0x2e0>
80093ab8:	0027883a 	mov	r19,zero
80093abc:	003fe706 	br	80093a5c <__gethex+0x56c>
80093ac0:	bc7fffc4 	addi	r17,r23,-1
80093ac4:	9800421e 	bne	r19,zero,80093bd0 <__gethex+0x6e0>
80093ac8:	88000426 	beq	r17,zero,80093adc <__gethex+0x5ec>
80093acc:	880b883a 	mov	r5,r17
80093ad0:	8009883a 	mov	r4,r16
80093ad4:	008b1f00 	call	8008b1f0 <__any_on>
80093ad8:	1027883a 	mov	r19,r2
80093adc:	8805d17a 	srai	r2,r17,5
80093ae0:	d8c00217 	ldw	r3,8(sp)
80093ae4:	8c4007cc 	andi	r17,r17,31
80093ae8:	1085883a 	add	r2,r2,r2
80093aec:	1085883a 	add	r2,r2,r2
80093af0:	1885883a 	add	r2,r3,r2
80093af4:	00c00044 	movi	r3,1
80093af8:	1c62983a 	sll	r17,r3,r17
80093afc:	10800017 	ldw	r2,0(r2)
80093b00:	8884703a 	and	r2,r17,r2
80093b04:	10000126 	beq	r2,zero,80093b0c <__gethex+0x61c>
80093b08:	9cc00094 	ori	r19,r19,2
80093b0c:	b80b883a 	mov	r5,r23
80093b10:	8009883a 	mov	r4,r16
80093b14:	00933f00 	call	800933f0 <rshift>
80093b18:	d8c00017 	ldw	r3,0(sp)
80093b1c:	95e5c83a 	sub	r18,r18,r23
80093b20:	04400084 	movi	r17,2
80093b24:	1dc00117 	ldw	r23,4(r3)
80093b28:	003fa106 	br	800939b0 <__gethex+0x4c0>
80093b2c:	85af883a 	add	r23,r16,r22
80093b30:	b8800003 	ldbu	r2,0(r23)
80093b34:	b821883a 	mov	r16,r23
80093b38:	11003fcc 	andi	r4,r2,255
80093b3c:	a109883a 	add	r4,r20,r4
80093b40:	21000003 	ldbu	r4,0(r4)
80093b44:	203eaa26 	beq	r4,zero,800935f0 <__gethex+0x100>
80093b48:	84000044 	addi	r16,r16,1
80093b4c:	80800003 	ldbu	r2,0(r16)
80093b50:	11003fcc 	andi	r4,r2,255
80093b54:	a109883a 	add	r4,r20,r4
80093b58:	21000003 	ldbu	r4,0(r4)
80093b5c:	203ffa1e 	bne	r4,zero,80093b48 <__gethex+0x658>
80093b60:	003ea306 	br	800935f0 <__gethex+0x100>
80093b64:	d9001617 	ldw	r4,88(sp)
80093b68:	00800044 	movi	r2,1
80093b6c:	1109c83a 	sub	r4,r2,r4
80093b70:	d9001615 	stw	r4,88(sp)
80093b74:	d8801617 	ldw	r2,88(sp)
80093b78:	103f9626 	beq	r2,zero,800939d4 <__gethex+0x4e4>
80093b7c:	87000417 	ldw	fp,16(r16)
80093b80:	d9800217 	ldw	r6,8(sp)
80093b84:	013fffc4 	movi	r4,-1
80093b88:	e727883a 	add	r19,fp,fp
80093b8c:	9ce7883a 	add	r19,r19,r19
80093b90:	3005883a 	mov	r2,r6
80093b94:	34cb883a 	add	r5,r6,r19
80093b98:	00000306 	br	80093ba8 <__gethex+0x6b8>
80093b9c:	10000015 	stw	zero,0(r2)
80093ba0:	10800104 	addi	r2,r2,4
80093ba4:	117f4c2e 	bgeu	r2,r5,800938d8 <__gethex+0x3e8>
80093ba8:	10c00017 	ldw	r3,0(r2)
80093bac:	193ffb26 	beq	r3,r4,80093b9c <__gethex+0x6ac>
80093bb0:	18c00044 	addi	r3,r3,1
80093bb4:	10c00015 	stw	r3,0(r2)
80093bb8:	00800084 	movi	r2,2
80093bbc:	88802b26 	beq	r17,r2,80093c6c <__gethex+0x77c>
80093bc0:	948007cc 	andi	r18,r18,31
80093bc4:	90002f1e 	bne	r18,zero,80093c84 <__gethex+0x794>
80093bc8:	04400844 	movi	r17,33
80093bcc:	003f8206 	br	800939d8 <__gethex+0x4e8>
80093bd0:	04c00044 	movi	r19,1
80093bd4:	003fc106 	br	80093adc <__gethex+0x5ec>
80093bd8:	d8c01617 	ldw	r3,88(sp)
80093bdc:	183ed226 	beq	r3,zero,80093728 <__gethex+0x238>
80093be0:	d8c00417 	ldw	r3,16(sp)
80093be4:	d9001517 	ldw	r4,84(sp)
80093be8:	18800015 	stw	r2,0(r3)
80093bec:	d8c00217 	ldw	r3,8(sp)
80093bf0:	00800044 	movi	r2,1
80093bf4:	80800415 	stw	r2,16(r16)
80093bf8:	18800015 	stw	r2,0(r3)
80093bfc:	24000015 	stw	r16,0(r4)
80093c00:	00801884 	movi	r2,98
80093c04:	003efa06 	br	800937f0 <__gethex+0x300>
80093c08:	9880008c 	andi	r2,r19,2
80093c0c:	103f7126 	beq	r2,zero,800939d4 <__gethex+0x4e4>
80093c10:	d8c00217 	ldw	r3,8(sp)
80093c14:	18800017 	ldw	r2,0(r3)
80093c18:	9884b03a 	or	r2,r19,r2
80093c1c:	1080004c 	andi	r2,r2,1
80093c20:	103fd61e 	bne	r2,zero,80093b7c <__gethex+0x68c>
80093c24:	003f6b06 	br	800939d4 <__gethex+0x4e4>
80093c28:	da800217 	ldw	r10,8(sp)
80093c2c:	0013883a 	mov	r9,zero
80093c30:	003e9f06 	br	800936b0 <__gethex+0x1c0>
80093c34:	04c00084 	movi	r19,2
80093c38:	003f8806 	br	80093a5c <__gethex+0x56c>
80093c3c:	d9001617 	ldw	r4,88(sp)
80093c40:	203fe726 	beq	r4,zero,80093be0 <__gethex+0x6f0>
80093c44:	003eb806 	br	80093728 <__gethex+0x238>
80093c48:	95feb71e 	bne	r18,r23,80093728 <__gethex+0x238>
80093c4c:	1cbfe40e 	bge	r3,r18,80093be0 <__gethex+0x6f0>
80093c50:	917fffc4 	addi	r5,r18,-1
80093c54:	8009883a 	mov	r4,r16
80093c58:	008b1f00 	call	8008b1f0 <__any_on>
80093c5c:	103eb226 	beq	r2,zero,80093728 <__gethex+0x238>
80093c60:	d8c00017 	ldw	r3,0(sp)
80093c64:	18800117 	ldw	r2,4(r3)
80093c68:	003fdd06 	br	80093be0 <__gethex+0x6f0>
80093c6c:	d8c00017 	ldw	r3,0(sp)
80093c70:	18800017 	ldw	r2,0(r3)
80093c74:	10bfffc4 	addi	r2,r2,-1
80093c78:	90801c26 	beq	r18,r2,80093cec <__gethex+0x7fc>
80093c7c:	04400884 	movi	r17,34
80093c80:	003f5506 	br	800939d8 <__gethex+0x4e8>
80093c84:	34c5883a 	add	r2,r6,r19
80093c88:	113fff17 	ldw	r4,-4(r2)
80093c8c:	008a5740 	call	8008a574 <__hi0bits>
80093c90:	00c00804 	movi	r3,32
80093c94:	1ca5c83a 	sub	r18,r3,r18
80093c98:	14bfcb0e 	bge	r2,r18,80093bc8 <__gethex+0x6d8>
80093c9c:	003f1c06 	br	80093910 <__gethex+0x420>
80093ca0:	81400117 	ldw	r5,4(r16)
80093ca4:	d9000117 	ldw	r4,4(sp)
80093ca8:	29400044 	addi	r5,r5,1
80093cac:	008a2800 	call	8008a280 <_Balloc>
80093cb0:	81800417 	ldw	r6,16(r16)
80093cb4:	81400304 	addi	r5,r16,12
80093cb8:	11000304 	addi	r4,r2,12
80093cbc:	31800084 	addi	r6,r6,2
80093cc0:	318d883a 	add	r6,r6,r6
80093cc4:	318d883a 	add	r6,r6,r6
80093cc8:	1029883a 	mov	r20,r2
80093ccc:	0082da40 	call	80082da4 <memcpy>
80093cd0:	d9000117 	ldw	r4,4(sp)
80093cd4:	800b883a 	mov	r5,r16
80093cd8:	a021883a 	mov	r16,r20
80093cdc:	008a3280 	call	8008a328 <_Bfree>
80093ce0:	a0c00417 	ldw	r3,16(r20)
80093ce4:	a1800504 	addi	r6,r20,20
80093ce8:	003efe06 	br	800938e4 <__gethex+0x3f4>
80093cec:	9005d17a 	srai	r2,r18,5
80093cf0:	944007cc 	andi	r17,r18,31
80093cf4:	1085883a 	add	r2,r2,r2
80093cf8:	1085883a 	add	r2,r2,r2
80093cfc:	3087883a 	add	r3,r6,r2
80093d00:	00800044 	movi	r2,1
80093d04:	1462983a 	sll	r17,r2,r17
80093d08:	18800017 	ldw	r2,0(r3)
80093d0c:	8884703a 	and	r2,r17,r2
80093d10:	1022c03a 	cmpne	r17,r2,zero
80093d14:	00800884 	movi	r2,34
80093d18:	1463c83a 	sub	r17,r2,r17
80093d1c:	003f2e06 	br	800939d8 <__gethex+0x4e8>

80093d20 <__hexnan>:
80093d20:	defff904 	addi	sp,sp,-28
80093d24:	dc800215 	stw	r18,8(sp)
80093d28:	2c800017 	ldw	r18,0(r5)
80093d2c:	dfc00615 	stw	ra,24(sp)
80093d30:	dd400515 	stw	r21,20(sp)
80093d34:	901fd17a 	srai	r15,r18,5
80093d38:	dd000415 	stw	r20,16(sp)
80093d3c:	dcc00315 	stw	r19,12(sp)
80093d40:	7bdf883a 	add	r15,r15,r15
80093d44:	7bdf883a 	add	r15,r15,r15
80093d48:	dc400115 	stw	r17,4(sp)
80093d4c:	dc000015 	stw	r16,0(sp)
80093d50:	948007cc 	andi	r18,r18,31
80093d54:	33df883a 	add	r15,r6,r15
80093d58:	90000126 	beq	r18,zero,80093d60 <__hexnan+0x40>
80093d5c:	7bc00104 	addi	r15,r15,4
80093d60:	22000017 	ldw	r8,0(r4)
80093d64:	7affff04 	addi	r11,r15,-4
80093d68:	03a002b4 	movhi	r14,32778
80093d6c:	783fff15 	stw	zero,-4(r15)
80093d70:	581b883a 	mov	r13,r11
80093d74:	580b883a 	mov	r5,r11
80093d78:	000f883a 	mov	r7,zero
80093d7c:	003f883a 	mov	ra,zero
80093d80:	0019883a 	mov	r12,zero
80093d84:	73b99884 	addi	r14,r14,-6558
80093d88:	04400204 	movi	r17,8
80093d8c:	04000804 	movi	r16,32
80093d90:	04c001c4 	movi	r19,7
80093d94:	42000044 	addi	r8,r8,1
80093d98:	40c00003 	ldbu	r3,0(r8)
80093d9c:	18001d26 	beq	r3,zero,80093e14 <__hexnan+0xf4>
80093da0:	70c5883a 	add	r2,r14,r3
80093da4:	10800003 	ldbu	r2,0(r2)
80093da8:	12403fcc 	andi	r9,r2,255
80093dac:	4800301e 	bne	r9,zero,80093e70 <__hexnan+0x150>
80093db0:	80c04236 	bltu	r16,r3,80093ebc <__hexnan+0x19c>
80093db4:	fb3ff70e 	bge	ra,r12,80093d94 <__hexnan+0x74>
80093db8:	2b40112e 	bgeu	r5,r13,80093e00 <__hexnan+0xe0>
80093dbc:	99c01016 	blt	r19,r7,80093e00 <__hexnan+0xe0>
80093dc0:	89e9c83a 	sub	r20,r17,r7
80093dc4:	a529883a 	add	r20,r20,r20
80093dc8:	2a800017 	ldw	r10,0(r5)
80093dcc:	a529883a 	add	r20,r20,r20
80093dd0:	852bc83a 	sub	r21,r16,r20
80093dd4:	28c00104 	addi	r3,r5,4
80093dd8:	2805883a 	mov	r2,r5
80093ddc:	19c00017 	ldw	r7,0(r3)
80093de0:	10800104 	addi	r2,r2,4
80093de4:	18c00104 	addi	r3,r3,4
80093de8:	3d52983a 	sll	r9,r7,r21
80093dec:	4a92b03a 	or	r9,r9,r10
80093df0:	3d14d83a 	srl	r10,r7,r20
80093df4:	127fff15 	stw	r9,-4(r2)
80093df8:	1abfff15 	stw	r10,-4(r3)
80093dfc:	137ff736 	bltu	r2,r13,80093ddc <__hexnan+0xbc>
80093e00:	31402836 	bltu	r6,r5,80093ea4 <__hexnan+0x184>
80093e04:	42000044 	addi	r8,r8,1
80093e08:	40c00003 	ldbu	r3,0(r8)
80093e0c:	01c00204 	movi	r7,8
80093e10:	183fe31e 	bne	r3,zero,80093da0 <__hexnan+0x80>
80093e14:	60002b26 	beq	r12,zero,80093ec4 <__hexnan+0x1a4>
80093e18:	2b40022e 	bgeu	r5,r13,80093e24 <__hexnan+0x104>
80093e1c:	008001c4 	movi	r2,7
80093e20:	11c0430e 	bge	r2,r7,80093f30 <__hexnan+0x210>
80093e24:	3140312e 	bgeu	r6,r5,80093eec <__hexnan+0x1cc>
80093e28:	3007883a 	mov	r3,r6
80093e2c:	29000017 	ldw	r4,0(r5)
80093e30:	18800104 	addi	r2,r3,4
80093e34:	29400104 	addi	r5,r5,4
80093e38:	19000015 	stw	r4,0(r3)
80093e3c:	1007883a 	mov	r3,r2
80093e40:	597ffa2e 	bgeu	r11,r5,80093e2c <__hexnan+0x10c>
80093e44:	10000015 	stw	zero,0(r2)
80093e48:	10800104 	addi	r2,r2,4
80093e4c:	58bffd2e 	bgeu	r11,r2,80093e44 <__hexnan+0x124>
80093e50:	78bfff17 	ldw	r2,-4(r15)
80093e54:	1000041e 	bne	r2,zero,80093e68 <__hexnan+0x148>
80093e58:	32c02d26 	beq	r6,r11,80093f10 <__hexnan+0x1f0>
80093e5c:	5affff04 	addi	r11,r11,-4
80093e60:	58800017 	ldw	r2,0(r11)
80093e64:	103ffc26 	beq	r2,zero,80093e58 <__hexnan+0x138>
80093e68:	00800144 	movi	r2,5
80093e6c:	00001606 	br	80093ec8 <__hexnan+0x1a8>
80093e70:	39c00044 	addi	r7,r7,1
80093e74:	63000044 	addi	r12,r12,1
80093e78:	89c0040e 	bge	r17,r7,80093e8c <__hexnan+0x16c>
80093e7c:	317fc52e 	bgeu	r6,r5,80093d94 <__hexnan+0x74>
80093e80:	283fff15 	stw	zero,-4(r5)
80093e84:	01c00044 	movi	r7,1
80093e88:	297fff04 	addi	r5,r5,-4
80093e8c:	28c00017 	ldw	r3,0(r5)
80093e90:	108003cc 	andi	r2,r2,15
80093e94:	1806913a 	slli	r3,r3,4
80093e98:	1884b03a 	or	r2,r3,r2
80093e9c:	28800015 	stw	r2,0(r5)
80093ea0:	003fbc06 	br	80093d94 <__hexnan+0x74>
80093ea4:	2b7fff04 	addi	r13,r5,-4
80093ea8:	283fff15 	stw	zero,-4(r5)
80093eac:	603f883a 	mov	ra,r12
80093eb0:	680b883a 	mov	r5,r13
80093eb4:	000f883a 	mov	r7,zero
80093eb8:	003fb606 	br	80093d94 <__hexnan+0x74>
80093ebc:	00800a44 	movi	r2,41
80093ec0:	18801726 	beq	r3,r2,80093f20 <__hexnan+0x200>
80093ec4:	00800104 	movi	r2,4
80093ec8:	dfc00617 	ldw	ra,24(sp)
80093ecc:	dd400517 	ldw	r21,20(sp)
80093ed0:	dd000417 	ldw	r20,16(sp)
80093ed4:	dcc00317 	ldw	r19,12(sp)
80093ed8:	dc800217 	ldw	r18,8(sp)
80093edc:	dc400117 	ldw	r17,4(sp)
80093ee0:	dc000017 	ldw	r16,0(sp)
80093ee4:	dec00704 	addi	sp,sp,28
80093ee8:	f800283a 	ret
80093eec:	903fd826 	beq	r18,zero,80093e50 <__hexnan+0x130>
80093ef0:	00c00804 	movi	r3,32
80093ef4:	1ca5c83a 	sub	r18,r3,r18
80093ef8:	00ffffc4 	movi	r3,-1
80093efc:	78bfff17 	ldw	r2,-4(r15)
80093f00:	1c86d83a 	srl	r3,r3,r18
80093f04:	1884703a 	and	r2,r3,r2
80093f08:	78bfff15 	stw	r2,-4(r15)
80093f0c:	003fd106 	br	80093e54 <__hexnan+0x134>
80093f10:	00800044 	movi	r2,1
80093f14:	58800015 	stw	r2,0(r11)
80093f18:	00800144 	movi	r2,5
80093f1c:	003fea06 	br	80093ec8 <__hexnan+0x1a8>
80093f20:	42000044 	addi	r8,r8,1
80093f24:	22000015 	stw	r8,0(r4)
80093f28:	603fbb1e 	bne	r12,zero,80093e18 <__hexnan+0xf8>
80093f2c:	003fe506 	br	80093ec4 <__hexnan+0x1a4>
80093f30:	02400204 	movi	r9,8
80093f34:	49d3c83a 	sub	r9,r9,r7
80093f38:	4a53883a 	add	r9,r9,r9
80093f3c:	2a000017 	ldw	r8,0(r5)
80093f40:	4a53883a 	add	r9,r9,r9
80093f44:	02800804 	movi	r10,32
80093f48:	5255c83a 	sub	r10,r10,r9
80093f4c:	28c00104 	addi	r3,r5,4
80093f50:	2805883a 	mov	r2,r5
80093f54:	19c00017 	ldw	r7,0(r3)
80093f58:	10800104 	addi	r2,r2,4
80093f5c:	18c00104 	addi	r3,r3,4
80093f60:	3a88983a 	sll	r4,r7,r10
80093f64:	2208b03a 	or	r4,r4,r8
80093f68:	3a50d83a 	srl	r8,r7,r9
80093f6c:	113fff15 	stw	r4,-4(r2)
80093f70:	1a3fff15 	stw	r8,-4(r3)
80093f74:	137ff736 	bltu	r2,r13,80093f54 <__hexnan+0x234>
80093f78:	003faa06 	br	80093e24 <__hexnan+0x104>

80093f7c <_isatty_r>:
80093f7c:	defffd04 	addi	sp,sp,-12
80093f80:	dc000015 	stw	r16,0(sp)
80093f84:	042002b4 	movhi	r16,32778
80093f88:	dc400115 	stw	r17,4(sp)
80093f8c:	8408e204 	addi	r16,r16,9096
80093f90:	2023883a 	mov	r17,r4
80093f94:	2809883a 	mov	r4,r5
80093f98:	dfc00215 	stw	ra,8(sp)
80093f9c:	80000015 	stw	zero,0(r16)
80093fa0:	0098ee00 	call	80098ee0 <isatty>
80093fa4:	00ffffc4 	movi	r3,-1
80093fa8:	10c00526 	beq	r2,r3,80093fc0 <_isatty_r+0x44>
80093fac:	dfc00217 	ldw	ra,8(sp)
80093fb0:	dc400117 	ldw	r17,4(sp)
80093fb4:	dc000017 	ldw	r16,0(sp)
80093fb8:	dec00304 	addi	sp,sp,12
80093fbc:	f800283a 	ret
80093fc0:	80c00017 	ldw	r3,0(r16)
80093fc4:	183ff926 	beq	r3,zero,80093fac <_isatty_r+0x30>
80093fc8:	88c00015 	stw	r3,0(r17)
80093fcc:	003ff706 	br	80093fac <_isatty_r+0x30>

80093fd0 <strncmp>:
80093fd0:	30003126 	beq	r6,zero,80094098 <strncmp+0xc8>
80093fd4:	2144b03a 	or	r2,r4,r5
80093fd8:	108000cc 	andi	r2,r2,3
80093fdc:	10001e1e 	bne	r2,zero,80094058 <strncmp+0x88>
80093fe0:	024000c4 	movi	r9,3
80093fe4:	49801c2e 	bgeu	r9,r6,80094058 <strncmp+0x88>
80093fe8:	20800017 	ldw	r2,0(r4)
80093fec:	28c00017 	ldw	r3,0(r5)
80093ff0:	10c0191e 	bne	r2,r3,80094058 <strncmp+0x88>
80093ff4:	31bfff04 	addi	r6,r6,-4
80093ff8:	30002726 	beq	r6,zero,80094098 <strncmp+0xc8>
80093ffc:	02ffbff4 	movhi	r11,65279
80094000:	5affbfc4 	addi	r11,r11,-257
80094004:	0086303a 	nor	r3,zero,r2
80094008:	02a02074 	movhi	r10,32897
8009400c:	12c5883a 	add	r2,r2,r11
80094010:	52a02004 	addi	r10,r10,-32640
80094014:	10c4703a 	and	r2,r2,r3
80094018:	1284703a 	and	r2,r2,r10
8009401c:	10000b26 	beq	r2,zero,8009404c <strncmp+0x7c>
80094020:	00001d06 	br	80094098 <strncmp+0xc8>
80094024:	20c00017 	ldw	r3,0(r4)
80094028:	29c00017 	ldw	r7,0(r5)
8009402c:	1ad1883a 	add	r8,r3,r11
80094030:	00c4303a 	nor	r2,zero,r3
80094034:	4084703a 	and	r2,r8,r2
80094038:	1284703a 	and	r2,r2,r10
8009403c:	19c0061e 	bne	r3,r7,80094058 <strncmp+0x88>
80094040:	31bfff04 	addi	r6,r6,-4
80094044:	30001426 	beq	r6,zero,80094098 <strncmp+0xc8>
80094048:	1000131e 	bne	r2,zero,80094098 <strncmp+0xc8>
8009404c:	21000104 	addi	r4,r4,4
80094050:	29400104 	addi	r5,r5,4
80094054:	49bff336 	bltu	r9,r6,80094024 <strncmp+0x54>
80094058:	28800007 	ldb	r2,0(r5)
8009405c:	20c00007 	ldb	r3,0(r4)
80094060:	31bfffc4 	addi	r6,r6,-1
80094064:	10c0081e 	bne	r2,r3,80094088 <strncmp+0xb8>
80094068:	30000b26 	beq	r6,zero,80094098 <strncmp+0xc8>
8009406c:	10000a26 	beq	r2,zero,80094098 <strncmp+0xc8>
80094070:	21000044 	addi	r4,r4,1
80094074:	29400044 	addi	r5,r5,1
80094078:	20800007 	ldb	r2,0(r4)
8009407c:	28c00007 	ldb	r3,0(r5)
80094080:	31bfffc4 	addi	r6,r6,-1
80094084:	10fff826 	beq	r2,r3,80094068 <strncmp+0x98>
80094088:	20800003 	ldbu	r2,0(r4)
8009408c:	28c00003 	ldbu	r3,0(r5)
80094090:	10c5c83a 	sub	r2,r2,r3
80094094:	f800283a 	ret
80094098:	0005883a 	mov	r2,zero
8009409c:	f800283a 	ret

800940a0 <__ssprint_r>:
800940a0:	30800217 	ldw	r2,8(r6)
800940a4:	defff604 	addi	sp,sp,-40
800940a8:	dc800215 	stw	r18,8(sp)
800940ac:	dfc00915 	stw	ra,36(sp)
800940b0:	df000815 	stw	fp,32(sp)
800940b4:	ddc00715 	stw	r23,28(sp)
800940b8:	dd800615 	stw	r22,24(sp)
800940bc:	dd400515 	stw	r21,20(sp)
800940c0:	dd000415 	stw	r20,16(sp)
800940c4:	dcc00315 	stw	r19,12(sp)
800940c8:	dc400115 	stw	r17,4(sp)
800940cc:	dc000015 	stw	r16,0(sp)
800940d0:	3025883a 	mov	r18,r6
800940d4:	10005826 	beq	r2,zero,80094238 <__ssprint_r+0x198>
800940d8:	2027883a 	mov	r19,r4
800940dc:	35c00017 	ldw	r23,0(r6)
800940e0:	29000017 	ldw	r4,0(r5)
800940e4:	28800217 	ldw	r2,8(r5)
800940e8:	2823883a 	mov	r17,r5
800940ec:	0039883a 	mov	fp,zero
800940f0:	0021883a 	mov	r16,zero
800940f4:	80003926 	beq	r16,zero,800941dc <__ssprint_r+0x13c>
800940f8:	102b883a 	mov	r21,r2
800940fc:	102d883a 	mov	r22,r2
80094100:	80803a36 	bltu	r16,r2,800941ec <__ssprint_r+0x14c>
80094104:	88c0030b 	ldhu	r3,12(r17)
80094108:	1881200c 	andi	r2,r3,1152
8009410c:	10002626 	beq	r2,zero,800941a8 <__ssprint_r+0x108>
80094110:	88800517 	ldw	r2,20(r17)
80094114:	89400417 	ldw	r5,16(r17)
80094118:	81800044 	addi	r6,r16,1
8009411c:	108f883a 	add	r7,r2,r2
80094120:	3885883a 	add	r2,r7,r2
80094124:	100ed7fa 	srli	r7,r2,31
80094128:	216dc83a 	sub	r22,r4,r5
8009412c:	3589883a 	add	r4,r6,r22
80094130:	3885883a 	add	r2,r7,r2
80094134:	102bd07a 	srai	r21,r2,1
80094138:	a80d883a 	mov	r6,r21
8009413c:	a900022e 	bgeu	r21,r4,80094148 <__ssprint_r+0xa8>
80094140:	202b883a 	mov	r21,r4
80094144:	200d883a 	mov	r6,r4
80094148:	18c1000c 	andi	r3,r3,1024
8009414c:	18002a26 	beq	r3,zero,800941f8 <__ssprint_r+0x158>
80094150:	300b883a 	mov	r5,r6
80094154:	9809883a 	mov	r4,r19
80094158:	008251c0 	call	8008251c <_malloc_r>
8009415c:	1029883a 	mov	r20,r2
80094160:	10002c26 	beq	r2,zero,80094214 <__ssprint_r+0x174>
80094164:	89400417 	ldw	r5,16(r17)
80094168:	b00d883a 	mov	r6,r22
8009416c:	1009883a 	mov	r4,r2
80094170:	0082da40 	call	80082da4 <memcpy>
80094174:	8880030b 	ldhu	r2,12(r17)
80094178:	00fedfc4 	movi	r3,-1153
8009417c:	10c4703a 	and	r2,r2,r3
80094180:	10802014 	ori	r2,r2,128
80094184:	8880030d 	sth	r2,12(r17)
80094188:	a589883a 	add	r4,r20,r22
8009418c:	adadc83a 	sub	r22,r21,r22
80094190:	8d400515 	stw	r21,20(r17)
80094194:	8d800215 	stw	r22,8(r17)
80094198:	8d000415 	stw	r20,16(r17)
8009419c:	89000015 	stw	r4,0(r17)
800941a0:	802b883a 	mov	r21,r16
800941a4:	802d883a 	mov	r22,r16
800941a8:	b00d883a 	mov	r6,r22
800941ac:	e00b883a 	mov	r5,fp
800941b0:	0089ffc0 	call	80089ffc <memmove>
800941b4:	88800217 	ldw	r2,8(r17)
800941b8:	89000017 	ldw	r4,0(r17)
800941bc:	90c00217 	ldw	r3,8(r18)
800941c0:	1545c83a 	sub	r2,r2,r21
800941c4:	2589883a 	add	r4,r4,r22
800941c8:	88800215 	stw	r2,8(r17)
800941cc:	89000015 	stw	r4,0(r17)
800941d0:	1c21c83a 	sub	r16,r3,r16
800941d4:	94000215 	stw	r16,8(r18)
800941d8:	80001726 	beq	r16,zero,80094238 <__ssprint_r+0x198>
800941dc:	bf000017 	ldw	fp,0(r23)
800941e0:	bc000117 	ldw	r16,4(r23)
800941e4:	bdc00204 	addi	r23,r23,8
800941e8:	003fc206 	br	800940f4 <__ssprint_r+0x54>
800941ec:	802b883a 	mov	r21,r16
800941f0:	802d883a 	mov	r22,r16
800941f4:	003fec06 	br	800941a8 <__ssprint_r+0x108>
800941f8:	9809883a 	mov	r4,r19
800941fc:	008b4440 	call	8008b444 <_realloc_r>
80094200:	1029883a 	mov	r20,r2
80094204:	103fe01e 	bne	r2,zero,80094188 <__ssprint_r+0xe8>
80094208:	89400417 	ldw	r5,16(r17)
8009420c:	9809883a 	mov	r4,r19
80094210:	00890780 	call	80089078 <_free_r>
80094214:	88c0030b 	ldhu	r3,12(r17)
80094218:	00800304 	movi	r2,12
8009421c:	98800015 	stw	r2,0(r19)
80094220:	18c01014 	ori	r3,r3,64
80094224:	88c0030d 	sth	r3,12(r17)
80094228:	00bfffc4 	movi	r2,-1
8009422c:	90000215 	stw	zero,8(r18)
80094230:	90000115 	stw	zero,4(r18)
80094234:	00000206 	br	80094240 <__ssprint_r+0x1a0>
80094238:	90000115 	stw	zero,4(r18)
8009423c:	0005883a 	mov	r2,zero
80094240:	dfc00917 	ldw	ra,36(sp)
80094244:	df000817 	ldw	fp,32(sp)
80094248:	ddc00717 	ldw	r23,28(sp)
8009424c:	dd800617 	ldw	r22,24(sp)
80094250:	dd400517 	ldw	r21,20(sp)
80094254:	dd000417 	ldw	r20,16(sp)
80094258:	dcc00317 	ldw	r19,12(sp)
8009425c:	dc800217 	ldw	r18,8(sp)
80094260:	dc400117 	ldw	r17,4(sp)
80094264:	dc000017 	ldw	r16,0(sp)
80094268:	dec00a04 	addi	sp,sp,40
8009426c:	f800283a 	ret

80094270 <___svfiprintf_internal_r>:
80094270:	2880030b 	ldhu	r2,12(r5)
80094274:	deffc804 	addi	sp,sp,-224
80094278:	dcc03115 	stw	r19,196(sp)
8009427c:	dfc03715 	stw	ra,220(sp)
80094280:	df003615 	stw	fp,216(sp)
80094284:	ddc03515 	stw	r23,212(sp)
80094288:	dd803415 	stw	r22,208(sp)
8009428c:	dd403315 	stw	r21,204(sp)
80094290:	dd003215 	stw	r20,200(sp)
80094294:	dc803015 	stw	r18,192(sp)
80094298:	dc402f15 	stw	r17,188(sp)
8009429c:	dc002e15 	stw	r16,184(sp)
800942a0:	d9402715 	stw	r5,156(sp)
800942a4:	d9002a15 	stw	r4,168(sp)
800942a8:	1080200c 	andi	r2,r2,128
800942ac:	d9c02315 	stw	r7,140(sp)
800942b0:	3027883a 	mov	r19,r6
800942b4:	10000226 	beq	r2,zero,800942c0 <___svfiprintf_internal_r+0x50>
800942b8:	28800417 	ldw	r2,16(r5)
800942bc:	10041d26 	beq	r2,zero,80095334 <___svfiprintf_internal_r+0x10c4>
800942c0:	dac01a04 	addi	r11,sp,104
800942c4:	dac01e15 	stw	r11,120(sp)
800942c8:	d8801e17 	ldw	r2,120(sp)
800942cc:	dac019c4 	addi	r11,sp,103
800942d0:	dd402a17 	ldw	r21,168(sp)
800942d4:	ddc02717 	ldw	r23,156(sp)
800942d8:	05a002b4 	movhi	r22,32778
800942dc:	052002b4 	movhi	r20,32778
800942e0:	dac01f15 	stw	r11,124(sp)
800942e4:	12d7c83a 	sub	r11,r2,r11
800942e8:	b5b9dc84 	addi	r22,r22,-6286
800942ec:	a539d884 	addi	r20,r20,-6302
800942f0:	dec01a15 	stw	sp,104(sp)
800942f4:	d8001c15 	stw	zero,112(sp)
800942f8:	d8001b15 	stw	zero,108(sp)
800942fc:	d811883a 	mov	r8,sp
80094300:	d8002915 	stw	zero,164(sp)
80094304:	d8002515 	stw	zero,148(sp)
80094308:	dac02b15 	stw	r11,172(sp)
8009430c:	98800007 	ldb	r2,0(r19)
80094310:	1002dd26 	beq	r2,zero,80094e88 <___svfiprintf_internal_r+0xc18>
80094314:	00c00944 	movi	r3,37
80094318:	9823883a 	mov	r17,r19
8009431c:	10c0021e 	bne	r2,r3,80094328 <___svfiprintf_internal_r+0xb8>
80094320:	00001406 	br	80094374 <___svfiprintf_internal_r+0x104>
80094324:	10c00326 	beq	r2,r3,80094334 <___svfiprintf_internal_r+0xc4>
80094328:	8c400044 	addi	r17,r17,1
8009432c:	88800007 	ldb	r2,0(r17)
80094330:	103ffc1e 	bne	r2,zero,80094324 <___svfiprintf_internal_r+0xb4>
80094334:	8ce1c83a 	sub	r16,r17,r19
80094338:	80000e26 	beq	r16,zero,80094374 <___svfiprintf_internal_r+0x104>
8009433c:	d8c01c17 	ldw	r3,112(sp)
80094340:	d8801b17 	ldw	r2,108(sp)
80094344:	44c00015 	stw	r19,0(r8)
80094348:	1c07883a 	add	r3,r3,r16
8009434c:	10800044 	addi	r2,r2,1
80094350:	d8c01c15 	stw	r3,112(sp)
80094354:	44000115 	stw	r16,4(r8)
80094358:	d8801b15 	stw	r2,108(sp)
8009435c:	00c001c4 	movi	r3,7
80094360:	18831e16 	blt	r3,r2,80094fdc <___svfiprintf_internal_r+0xd6c>
80094364:	42000204 	addi	r8,r8,8
80094368:	dac02517 	ldw	r11,148(sp)
8009436c:	5c17883a 	add	r11,r11,r16
80094370:	dac02515 	stw	r11,148(sp)
80094374:	88800007 	ldb	r2,0(r17)
80094378:	1002c526 	beq	r2,zero,80094e90 <___svfiprintf_internal_r+0xc20>
8009437c:	88c00047 	ldb	r3,1(r17)
80094380:	8cc00044 	addi	r19,r17,1
80094384:	d8001d85 	stb	zero,118(sp)
80094388:	0009883a 	mov	r4,zero
8009438c:	000f883a 	mov	r7,zero
80094390:	043fffc4 	movi	r16,-1
80094394:	d8002415 	stw	zero,144(sp)
80094398:	0025883a 	mov	r18,zero
8009439c:	01401604 	movi	r5,88
800943a0:	01800244 	movi	r6,9
800943a4:	02800a84 	movi	r10,42
800943a8:	02401b04 	movi	r9,108
800943ac:	9cc00044 	addi	r19,r19,1
800943b0:	18bff804 	addi	r2,r3,-32
800943b4:	2881dd36 	bltu	r5,r2,80094b2c <___svfiprintf_internal_r+0x8bc>
800943b8:	100490ba 	slli	r2,r2,2
800943bc:	02e00274 	movhi	r11,32777
800943c0:	5ad0f404 	addi	r11,r11,17360
800943c4:	12c5883a 	add	r2,r2,r11
800943c8:	10800017 	ldw	r2,0(r2)
800943cc:	1000683a 	jmp	r2
800943d0:	800945cc 	andi	zero,r16,9495
800943d4:	80094b2c 	andhi	zero,r16,9516
800943d8:	80094b2c 	andhi	zero,r16,9516
800943dc:	800945c0 	call	8800945c <__alt_data_end+0x7f0c45c>
800943e0:	80094b2c 	andhi	zero,r16,9516
800943e4:	80094b2c 	andhi	zero,r16,9516
800943e8:	80094b2c 	andhi	zero,r16,9516
800943ec:	80094b2c 	andhi	zero,r16,9516
800943f0:	80094b2c 	andhi	zero,r16,9516
800943f4:	80094b2c 	andhi	zero,r16,9516
800943f8:	80094534 	orhi	zero,r16,9492
800943fc:	80094710 	cmplti	zero,r16,9500
80094400:	80094b2c 	andhi	zero,r16,9516
80094404:	80094560 	cmpeqi	zero,r16,9493
80094408:	80094b60 	cmpeqi	zero,r16,9517
8009440c:	80094b2c 	andhi	zero,r16,9516
80094410:	80094b54 	ori	zero,r16,9517
80094414:	80094af4 	orhi	zero,r16,9515
80094418:	80094af4 	orhi	zero,r16,9515
8009441c:	80094af4 	orhi	zero,r16,9515
80094420:	80094af4 	orhi	zero,r16,9515
80094424:	80094af4 	orhi	zero,r16,9515
80094428:	80094af4 	orhi	zero,r16,9515
8009442c:	80094af4 	orhi	zero,r16,9515
80094430:	80094af4 	orhi	zero,r16,9515
80094434:	80094af4 	orhi	zero,r16,9515
80094438:	80094b2c 	andhi	zero,r16,9516
8009443c:	80094b2c 	andhi	zero,r16,9516
80094440:	80094b2c 	andhi	zero,r16,9516
80094444:	80094b2c 	andhi	zero,r16,9516
80094448:	80094b2c 	andhi	zero,r16,9516
8009444c:	80094b2c 	andhi	zero,r16,9516
80094450:	80094b2c 	andhi	zero,r16,9516
80094454:	80094b2c 	andhi	zero,r16,9516
80094458:	80094b2c 	andhi	zero,r16,9516
8009445c:	80094b2c 	andhi	zero,r16,9516
80094460:	80094a90 	cmplti	zero,r16,9514
80094464:	80094b2c 	andhi	zero,r16,9516
80094468:	80094b2c 	andhi	zero,r16,9516
8009446c:	80094b2c 	andhi	zero,r16,9516
80094470:	80094b2c 	andhi	zero,r16,9516
80094474:	80094b2c 	andhi	zero,r16,9516
80094478:	80094b2c 	andhi	zero,r16,9516
8009447c:	80094b2c 	andhi	zero,r16,9516
80094480:	80094b2c 	andhi	zero,r16,9516
80094484:	80094b2c 	andhi	zero,r16,9516
80094488:	80094b2c 	andhi	zero,r16,9516
8009448c:	80094c08 	cmpgei	zero,r16,9520
80094490:	80094b2c 	andhi	zero,r16,9516
80094494:	80094b2c 	andhi	zero,r16,9516
80094498:	80094b2c 	andhi	zero,r16,9516
8009449c:	80094b2c 	andhi	zero,r16,9516
800944a0:	80094b2c 	andhi	zero,r16,9516
800944a4:	80094ba0 	cmpeqi	zero,r16,9518
800944a8:	80094b2c 	andhi	zero,r16,9516
800944ac:	80094b2c 	andhi	zero,r16,9516
800944b0:	800948d4 	ori	zero,r16,9507
800944b4:	80094b2c 	andhi	zero,r16,9516
800944b8:	80094b2c 	andhi	zero,r16,9516
800944bc:	80094b2c 	andhi	zero,r16,9516
800944c0:	80094b2c 	andhi	zero,r16,9516
800944c4:	80094b2c 	andhi	zero,r16,9516
800944c8:	80094b2c 	andhi	zero,r16,9516
800944cc:	80094b2c 	andhi	zero,r16,9516
800944d0:	80094b2c 	andhi	zero,r16,9516
800944d4:	80094b2c 	andhi	zero,r16,9516
800944d8:	80094b2c 	andhi	zero,r16,9516
800944dc:	800947c4 	addi	zero,r16,9503
800944e0:	80094970 	cmpltui	zero,r16,9509
800944e4:	80094b2c 	andhi	zero,r16,9516
800944e8:	80094b2c 	andhi	zero,r16,9516
800944ec:	80094b2c 	andhi	zero,r16,9516
800944f0:	80094964 	muli	zero,r16,9509
800944f4:	80094970 	cmpltui	zero,r16,9509
800944f8:	80094b2c 	andhi	zero,r16,9516
800944fc:	80094b2c 	andhi	zero,r16,9516
80094500:	80094954 	ori	zero,r16,9509
80094504:	80094b2c 	andhi	zero,r16,9516
80094508:	80094918 	cmpnei	zero,r16,9508
8009450c:	80094720 	cmpeqi	zero,r16,9500
80094510:	8009456c 	andhi	zero,r16,9493
80094514:	80094a84 	addi	zero,r16,9514
80094518:	80094b2c 	andhi	zero,r16,9516
8009451c:	80094a38 	rdprs	zero,r16,9512
80094520:	80094b2c 	andhi	zero,r16,9516
80094524:	80094690 	cmplti	zero,r16,9498
80094528:	80094b2c 	andhi	zero,r16,9516
8009452c:	80094b2c 	andhi	zero,r16,9516
80094530:	800945ec 	andhi	zero,r16,9495
80094534:	dac02317 	ldw	r11,140(sp)
80094538:	5ac00017 	ldw	r11,0(r11)
8009453c:	dac02415 	stw	r11,144(sp)
80094540:	dac02317 	ldw	r11,140(sp)
80094544:	58800104 	addi	r2,r11,4
80094548:	dac02417 	ldw	r11,144(sp)
8009454c:	5802e90e 	bge	r11,zero,800950f4 <___svfiprintf_internal_r+0xe84>
80094550:	dac02417 	ldw	r11,144(sp)
80094554:	d8802315 	stw	r2,140(sp)
80094558:	02d7c83a 	sub	r11,zero,r11
8009455c:	dac02415 	stw	r11,144(sp)
80094560:	94800114 	ori	r18,r18,4
80094564:	98c00007 	ldb	r3,0(r19)
80094568:	003f9006 	br	800943ac <___svfiprintf_internal_r+0x13c>
8009456c:	00800c04 	movi	r2,48
80094570:	dac02317 	ldw	r11,140(sp)
80094574:	d8801d05 	stb	r2,116(sp)
80094578:	00801e04 	movi	r2,120
8009457c:	d8801d45 	stb	r2,117(sp)
80094580:	d8001d85 	stb	zero,118(sp)
80094584:	58c00104 	addi	r3,r11,4
80094588:	5f000017 	ldw	fp,0(r11)
8009458c:	0013883a 	mov	r9,zero
80094590:	90800094 	ori	r2,r18,2
80094594:	80032b16 	blt	r16,zero,80095244 <___svfiprintf_internal_r+0xfd4>
80094598:	00bfdfc4 	movi	r2,-129
8009459c:	90a4703a 	and	r18,r18,r2
800945a0:	d8c02315 	stw	r3,140(sp)
800945a4:	94800094 	ori	r18,r18,2
800945a8:	e002dc26 	beq	fp,zero,8009511c <___svfiprintf_internal_r+0xeac>
800945ac:	012002b4 	movhi	r4,32778
800945b0:	21386804 	addi	r4,r4,-7776
800945b4:	0015883a 	mov	r10,zero
800945b8:	d9002915 	stw	r4,164(sp)
800945bc:	00002306 	br	8009464c <___svfiprintf_internal_r+0x3dc>
800945c0:	94800054 	ori	r18,r18,1
800945c4:	98c00007 	ldb	r3,0(r19)
800945c8:	003f7806 	br	800943ac <___svfiprintf_internal_r+0x13c>
800945cc:	38803fcc 	andi	r2,r7,255
800945d0:	1080201c 	xori	r2,r2,128
800945d4:	10bfe004 	addi	r2,r2,-128
800945d8:	1002f31e 	bne	r2,zero,800951a8 <___svfiprintf_internal_r+0xf38>
800945dc:	01000044 	movi	r4,1
800945e0:	01c00804 	movi	r7,32
800945e4:	98c00007 	ldb	r3,0(r19)
800945e8:	003f7006 	br	800943ac <___svfiprintf_internal_r+0x13c>
800945ec:	21003fcc 	andi	r4,r4,255
800945f0:	2003aa1e 	bne	r4,zero,8009549c <___svfiprintf_internal_r+0x122c>
800945f4:	00a002b4 	movhi	r2,32778
800945f8:	10b86804 	addi	r2,r2,-7776
800945fc:	d8802915 	stw	r2,164(sp)
80094600:	9080080c 	andi	r2,r18,32
80094604:	1000ba26 	beq	r2,zero,800948f0 <___svfiprintf_internal_r+0x680>
80094608:	dac02317 	ldw	r11,140(sp)
8009460c:	5f000017 	ldw	fp,0(r11)
80094610:	5a400117 	ldw	r9,4(r11)
80094614:	5ac00204 	addi	r11,r11,8
80094618:	dac02315 	stw	r11,140(sp)
8009461c:	9080004c 	andi	r2,r18,1
80094620:	10029026 	beq	r2,zero,80095064 <___svfiprintf_internal_r+0xdf4>
80094624:	e244b03a 	or	r2,fp,r9
80094628:	1002d41e 	bne	r2,zero,8009517c <___svfiprintf_internal_r+0xf0c>
8009462c:	d8001d85 	stb	zero,118(sp)
80094630:	80030b16 	blt	r16,zero,80095260 <___svfiprintf_internal_r+0xff0>
80094634:	00bfdfc4 	movi	r2,-129
80094638:	90a4703a 	and	r18,r18,r2
8009463c:	0015883a 	mov	r10,zero
80094640:	80002426 	beq	r16,zero,800946d4 <___svfiprintf_internal_r+0x464>
80094644:	0039883a 	mov	fp,zero
80094648:	0013883a 	mov	r9,zero
8009464c:	d9002917 	ldw	r4,164(sp)
80094650:	dc401a04 	addi	r17,sp,104
80094654:	e08003cc 	andi	r2,fp,15
80094658:	4806973a 	slli	r3,r9,28
8009465c:	2085883a 	add	r2,r4,r2
80094660:	e038d13a 	srli	fp,fp,4
80094664:	10800003 	ldbu	r2,0(r2)
80094668:	4812d13a 	srli	r9,r9,4
8009466c:	8c7fffc4 	addi	r17,r17,-1
80094670:	1f38b03a 	or	fp,r3,fp
80094674:	88800005 	stb	r2,0(r17)
80094678:	e244b03a 	or	r2,fp,r9
8009467c:	103ff51e 	bne	r2,zero,80094654 <___svfiprintf_internal_r+0x3e4>
80094680:	dac01e17 	ldw	r11,120(sp)
80094684:	5c57c83a 	sub	r11,r11,r17
80094688:	dac02115 	stw	r11,132(sp)
8009468c:	00001406 	br	800946e0 <___svfiprintf_internal_r+0x470>
80094690:	21003fcc 	andi	r4,r4,255
80094694:	2003741e 	bne	r4,zero,80095468 <___svfiprintf_internal_r+0x11f8>
80094698:	9080080c 	andi	r2,r18,32
8009469c:	10014526 	beq	r2,zero,80094bb4 <___svfiprintf_internal_r+0x944>
800946a0:	dac02317 	ldw	r11,140(sp)
800946a4:	d8001d85 	stb	zero,118(sp)
800946a8:	58c00204 	addi	r3,r11,8
800946ac:	5f000017 	ldw	fp,0(r11)
800946b0:	5a400117 	ldw	r9,4(r11)
800946b4:	8002d916 	blt	r16,zero,8009521c <___svfiprintf_internal_r+0xfac>
800946b8:	013fdfc4 	movi	r4,-129
800946bc:	e244b03a 	or	r2,fp,r9
800946c0:	d8c02315 	stw	r3,140(sp)
800946c4:	9124703a 	and	r18,r18,r4
800946c8:	0015883a 	mov	r10,zero
800946cc:	1000b91e 	bne	r2,zero,800949b4 <___svfiprintf_internal_r+0x744>
800946d0:	8002e61e 	bne	r16,zero,8009526c <___svfiprintf_internal_r+0xffc>
800946d4:	0021883a 	mov	r16,zero
800946d8:	d8002115 	stw	zero,132(sp)
800946dc:	dc401a04 	addi	r17,sp,104
800946e0:	d8c02117 	ldw	r3,132(sp)
800946e4:	dc002015 	stw	r16,128(sp)
800946e8:	80c0010e 	bge	r16,r3,800946f0 <___svfiprintf_internal_r+0x480>
800946ec:	d8c02015 	stw	r3,128(sp)
800946f0:	52803fcc 	andi	r10,r10,255
800946f4:	5280201c 	xori	r10,r10,128
800946f8:	52bfe004 	addi	r10,r10,-128
800946fc:	50003c26 	beq	r10,zero,800947f0 <___svfiprintf_internal_r+0x580>
80094700:	dac02017 	ldw	r11,128(sp)
80094704:	5ac00044 	addi	r11,r11,1
80094708:	dac02015 	stw	r11,128(sp)
8009470c:	00003806 	br	800947f0 <___svfiprintf_internal_r+0x580>
80094710:	01000044 	movi	r4,1
80094714:	01c00ac4 	movi	r7,43
80094718:	98c00007 	ldb	r3,0(r19)
8009471c:	003f2306 	br	800943ac <___svfiprintf_internal_r+0x13c>
80094720:	21003fcc 	andi	r4,r4,255
80094724:	2003481e 	bne	r4,zero,80095448 <___svfiprintf_internal_r+0x11d8>
80094728:	9080080c 	andi	r2,r18,32
8009472c:	10013b26 	beq	r2,zero,80094c1c <___svfiprintf_internal_r+0x9ac>
80094730:	dac02317 	ldw	r11,140(sp)
80094734:	d8001d85 	stb	zero,118(sp)
80094738:	58800204 	addi	r2,r11,8
8009473c:	5f000017 	ldw	fp,0(r11)
80094740:	5a400117 	ldw	r9,4(r11)
80094744:	8002a816 	blt	r16,zero,800951e8 <___svfiprintf_internal_r+0xf78>
80094748:	013fdfc4 	movi	r4,-129
8009474c:	e246b03a 	or	r3,fp,r9
80094750:	d8802315 	stw	r2,140(sp)
80094754:	9124703a 	and	r18,r18,r4
80094758:	18013c26 	beq	r3,zero,80094c4c <___svfiprintf_internal_r+0x9dc>
8009475c:	0015883a 	mov	r10,zero
80094760:	dc401a04 	addi	r17,sp,104
80094764:	e006d0fa 	srli	r3,fp,3
80094768:	4808977a 	slli	r4,r9,29
8009476c:	4812d0fa 	srli	r9,r9,3
80094770:	e70001cc 	andi	fp,fp,7
80094774:	e0800c04 	addi	r2,fp,48
80094778:	8c7fffc4 	addi	r17,r17,-1
8009477c:	20f8b03a 	or	fp,r4,r3
80094780:	88800005 	stb	r2,0(r17)
80094784:	e246b03a 	or	r3,fp,r9
80094788:	183ff61e 	bne	r3,zero,80094764 <___svfiprintf_internal_r+0x4f4>
8009478c:	90c0004c 	andi	r3,r18,1
80094790:	1800a526 	beq	r3,zero,80094a28 <___svfiprintf_internal_r+0x7b8>
80094794:	10803fcc 	andi	r2,r2,255
80094798:	1080201c 	xori	r2,r2,128
8009479c:	10bfe004 	addi	r2,r2,-128
800947a0:	00c00c04 	movi	r3,48
800947a4:	10ffb626 	beq	r2,r3,80094680 <___svfiprintf_internal_r+0x410>
800947a8:	88ffffc5 	stb	r3,-1(r17)
800947ac:	d8c01e17 	ldw	r3,120(sp)
800947b0:	88bfffc4 	addi	r2,r17,-1
800947b4:	1023883a 	mov	r17,r2
800947b8:	1887c83a 	sub	r3,r3,r2
800947bc:	d8c02115 	stw	r3,132(sp)
800947c0:	003fc706 	br	800946e0 <___svfiprintf_internal_r+0x470>
800947c4:	dac02317 	ldw	r11,140(sp)
800947c8:	00c00044 	movi	r3,1
800947cc:	d8c02015 	stw	r3,128(sp)
800947d0:	58800017 	ldw	r2,0(r11)
800947d4:	5ac00104 	addi	r11,r11,4
800947d8:	d8001d85 	stb	zero,118(sp)
800947dc:	d8801005 	stb	r2,64(sp)
800947e0:	dac02315 	stw	r11,140(sp)
800947e4:	d8c02115 	stw	r3,132(sp)
800947e8:	dc401004 	addi	r17,sp,64
800947ec:	0021883a 	mov	r16,zero
800947f0:	90c0008c 	andi	r3,r18,2
800947f4:	d8c02215 	stw	r3,136(sp)
800947f8:	18000326 	beq	r3,zero,80094808 <___svfiprintf_internal_r+0x598>
800947fc:	dac02017 	ldw	r11,128(sp)
80094800:	5ac00084 	addi	r11,r11,2
80094804:	dac02015 	stw	r11,128(sp)
80094808:	90c0210c 	andi	r3,r18,132
8009480c:	d8c02615 	stw	r3,152(sp)
80094810:	1801131e 	bne	r3,zero,80094c60 <___svfiprintf_internal_r+0x9f0>
80094814:	dac02417 	ldw	r11,144(sp)
80094818:	d8c02017 	ldw	r3,128(sp)
8009481c:	58f9c83a 	sub	fp,r11,r3
80094820:	07010f0e 	bge	zero,fp,80094c60 <___svfiprintf_internal_r+0x9f0>
80094824:	02400404 	movi	r9,16
80094828:	d8c01c17 	ldw	r3,112(sp)
8009482c:	d8801b17 	ldw	r2,108(sp)
80094830:	4f02d60e 	bge	r9,fp,8009538c <___svfiprintf_internal_r+0x111c>
80094834:	016002b4 	movhi	r5,32778
80094838:	2979dc84 	addi	r5,r5,-6286
8009483c:	d9402815 	stw	r5,160(sp)
80094840:	028001c4 	movi	r10,7
80094844:	00000306 	br	80094854 <___svfiprintf_internal_r+0x5e4>
80094848:	e73ffc04 	addi	fp,fp,-16
8009484c:	42000204 	addi	r8,r8,8
80094850:	4f00150e 	bge	r9,fp,800948a8 <___svfiprintf_internal_r+0x638>
80094854:	18c00404 	addi	r3,r3,16
80094858:	10800044 	addi	r2,r2,1
8009485c:	45800015 	stw	r22,0(r8)
80094860:	42400115 	stw	r9,4(r8)
80094864:	d8c01c15 	stw	r3,112(sp)
80094868:	d8801b15 	stw	r2,108(sp)
8009486c:	50bff60e 	bge	r10,r2,80094848 <___svfiprintf_internal_r+0x5d8>
80094870:	d9801a04 	addi	r6,sp,104
80094874:	b80b883a 	mov	r5,r23
80094878:	a809883a 	mov	r4,r21
8009487c:	da402c15 	stw	r9,176(sp)
80094880:	da802d15 	stw	r10,180(sp)
80094884:	00940a00 	call	800940a0 <__ssprint_r>
80094888:	da402c17 	ldw	r9,176(sp)
8009488c:	da802d17 	ldw	r10,180(sp)
80094890:	1001851e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80094894:	e73ffc04 	addi	fp,fp,-16
80094898:	d8c01c17 	ldw	r3,112(sp)
8009489c:	d8801b17 	ldw	r2,108(sp)
800948a0:	d811883a 	mov	r8,sp
800948a4:	4f3feb16 	blt	r9,fp,80094854 <___svfiprintf_internal_r+0x5e4>
800948a8:	dac02817 	ldw	r11,160(sp)
800948ac:	e0c7883a 	add	r3,fp,r3
800948b0:	10800044 	addi	r2,r2,1
800948b4:	42c00015 	stw	r11,0(r8)
800948b8:	47000115 	stw	fp,4(r8)
800948bc:	d8c01c15 	stw	r3,112(sp)
800948c0:	d8801b15 	stw	r2,108(sp)
800948c4:	010001c4 	movi	r4,7
800948c8:	2081ee16 	blt	r4,r2,80095084 <___svfiprintf_internal_r+0xe14>
800948cc:	42000204 	addi	r8,r8,8
800948d0:	0000e506 	br	80094c68 <___svfiprintf_internal_r+0x9f8>
800948d4:	21003fcc 	andi	r4,r4,255
800948d8:	2002dd1e 	bne	r4,zero,80095450 <___svfiprintf_internal_r+0x11e0>
800948dc:	00a002b4 	movhi	r2,32778
800948e0:	10b86304 	addi	r2,r2,-7796
800948e4:	d8802915 	stw	r2,164(sp)
800948e8:	9080080c 	andi	r2,r18,32
800948ec:	103f461e 	bne	r2,zero,80094608 <___svfiprintf_internal_r+0x398>
800948f0:	9080040c 	andi	r2,r18,16
800948f4:	10022e1e 	bne	r2,zero,800951b0 <___svfiprintf_internal_r+0xf40>
800948f8:	9080100c 	andi	r2,r18,64
800948fc:	dac02317 	ldw	r11,140(sp)
80094900:	10027326 	beq	r2,zero,800952d0 <___svfiprintf_internal_r+0x1060>
80094904:	5f00000b 	ldhu	fp,0(r11)
80094908:	5ac00104 	addi	r11,r11,4
8009490c:	0013883a 	mov	r9,zero
80094910:	dac02315 	stw	r11,140(sp)
80094914:	003f4106 	br	8009461c <___svfiprintf_internal_r+0x3ac>
80094918:	21003fcc 	andi	r4,r4,255
8009491c:	2002e11e 	bne	r4,zero,800954a4 <___svfiprintf_internal_r+0x1234>
80094920:	9080080c 	andi	r2,r18,32
80094924:	1002011e 	bne	r2,zero,8009512c <___svfiprintf_internal_r+0xebc>
80094928:	9080040c 	andi	r2,r18,16
8009492c:	10023e1e 	bne	r2,zero,80095228 <___svfiprintf_internal_r+0xfb8>
80094930:	9480100c 	andi	r18,r18,64
80094934:	90023c26 	beq	r18,zero,80095228 <___svfiprintf_internal_r+0xfb8>
80094938:	dac02317 	ldw	r11,140(sp)
8009493c:	58800017 	ldw	r2,0(r11)
80094940:	5ac00104 	addi	r11,r11,4
80094944:	dac02315 	stw	r11,140(sp)
80094948:	dac02517 	ldw	r11,148(sp)
8009494c:	12c0000d 	sth	r11,0(r2)
80094950:	003e6e06 	br	8009430c <___svfiprintf_internal_r+0x9c>
80094954:	98c00007 	ldb	r3,0(r19)
80094958:	1a422926 	beq	r3,r9,80095200 <___svfiprintf_internal_r+0xf90>
8009495c:	94800414 	ori	r18,r18,16
80094960:	003e9206 	br	800943ac <___svfiprintf_internal_r+0x13c>
80094964:	94801014 	ori	r18,r18,64
80094968:	98c00007 	ldb	r3,0(r19)
8009496c:	003e8f06 	br	800943ac <___svfiprintf_internal_r+0x13c>
80094970:	21003fcc 	andi	r4,r4,255
80094974:	2002c71e 	bne	r4,zero,80095494 <___svfiprintf_internal_r+0x1224>
80094978:	9080080c 	andi	r2,r18,32
8009497c:	10004926 	beq	r2,zero,80094aa4 <___svfiprintf_internal_r+0x834>
80094980:	dac02317 	ldw	r11,140(sp)
80094984:	58800117 	ldw	r2,4(r11)
80094988:	5f000017 	ldw	fp,0(r11)
8009498c:	5ac00204 	addi	r11,r11,8
80094990:	dac02315 	stw	r11,140(sp)
80094994:	1013883a 	mov	r9,r2
80094998:	10004b16 	blt	r2,zero,80094ac8 <___svfiprintf_internal_r+0x858>
8009499c:	da801d83 	ldbu	r10,118(sp)
800949a0:	8001cb16 	blt	r16,zero,800950d0 <___svfiprintf_internal_r+0xe60>
800949a4:	00ffdfc4 	movi	r3,-129
800949a8:	e244b03a 	or	r2,fp,r9
800949ac:	90e4703a 	and	r18,r18,r3
800949b0:	103f4726 	beq	r2,zero,800946d0 <___svfiprintf_internal_r+0x460>
800949b4:	48008c26 	beq	r9,zero,80094be8 <___svfiprintf_internal_r+0x978>
800949b8:	dc802015 	stw	r18,128(sp)
800949bc:	dc002115 	stw	r16,132(sp)
800949c0:	dc401a04 	addi	r17,sp,104
800949c4:	e021883a 	mov	r16,fp
800949c8:	da002215 	stw	r8,136(sp)
800949cc:	5039883a 	mov	fp,r10
800949d0:	4825883a 	mov	r18,r9
800949d4:	8009883a 	mov	r4,r16
800949d8:	900b883a 	mov	r5,r18
800949dc:	01800284 	movi	r6,10
800949e0:	000f883a 	mov	r7,zero
800949e4:	0095c800 	call	80095c80 <__umoddi3>
800949e8:	10800c04 	addi	r2,r2,48
800949ec:	8c7fffc4 	addi	r17,r17,-1
800949f0:	8009883a 	mov	r4,r16
800949f4:	900b883a 	mov	r5,r18
800949f8:	88800005 	stb	r2,0(r17)
800949fc:	01800284 	movi	r6,10
80094a00:	000f883a 	mov	r7,zero
80094a04:	00957080 	call	80095708 <__udivdi3>
80094a08:	1021883a 	mov	r16,r2
80094a0c:	10c4b03a 	or	r2,r2,r3
80094a10:	1825883a 	mov	r18,r3
80094a14:	103fef1e 	bne	r2,zero,800949d4 <___svfiprintf_internal_r+0x764>
80094a18:	dc802017 	ldw	r18,128(sp)
80094a1c:	dc002117 	ldw	r16,132(sp)
80094a20:	da002217 	ldw	r8,136(sp)
80094a24:	e015883a 	mov	r10,fp
80094a28:	d8c01e17 	ldw	r3,120(sp)
80094a2c:	1c47c83a 	sub	r3,r3,r17
80094a30:	d8c02115 	stw	r3,132(sp)
80094a34:	003f2a06 	br	800946e0 <___svfiprintf_internal_r+0x470>
80094a38:	dac02317 	ldw	r11,140(sp)
80094a3c:	d8001d85 	stb	zero,118(sp)
80094a40:	5c400017 	ldw	r17,0(r11)
80094a44:	5f000104 	addi	fp,r11,4
80094a48:	88022f26 	beq	r17,zero,80095308 <___svfiprintf_internal_r+0x1098>
80094a4c:	80022516 	blt	r16,zero,800952e4 <___svfiprintf_internal_r+0x1074>
80094a50:	800d883a 	mov	r6,r16
80094a54:	000b883a 	mov	r5,zero
80094a58:	8809883a 	mov	r4,r17
80094a5c:	da002c15 	stw	r8,176(sp)
80094a60:	0089f180 	call	80089f18 <memchr>
80094a64:	da002c17 	ldw	r8,176(sp)
80094a68:	10026426 	beq	r2,zero,800953fc <___svfiprintf_internal_r+0x118c>
80094a6c:	1445c83a 	sub	r2,r2,r17
80094a70:	d8802115 	stw	r2,132(sp)
80094a74:	da801d83 	ldbu	r10,118(sp)
80094a78:	df002315 	stw	fp,140(sp)
80094a7c:	0021883a 	mov	r16,zero
80094a80:	003f1706 	br	800946e0 <___svfiprintf_internal_r+0x470>
80094a84:	94800814 	ori	r18,r18,32
80094a88:	98c00007 	ldb	r3,0(r19)
80094a8c:	003e4706 	br	800943ac <___svfiprintf_internal_r+0x13c>
80094a90:	21003fcc 	andi	r4,r4,255
80094a94:	2002701e 	bne	r4,zero,80095458 <___svfiprintf_internal_r+0x11e8>
80094a98:	94800414 	ori	r18,r18,16
80094a9c:	9080080c 	andi	r2,r18,32
80094aa0:	103fb71e 	bne	r2,zero,80094980 <___svfiprintf_internal_r+0x710>
80094aa4:	9080040c 	andi	r2,r18,16
80094aa8:	1001ab26 	beq	r2,zero,80095158 <___svfiprintf_internal_r+0xee8>
80094aac:	dac02317 	ldw	r11,140(sp)
80094ab0:	5f000017 	ldw	fp,0(r11)
80094ab4:	5ac00104 	addi	r11,r11,4
80094ab8:	dac02315 	stw	r11,140(sp)
80094abc:	e013d7fa 	srai	r9,fp,31
80094ac0:	4805883a 	mov	r2,r9
80094ac4:	103fb50e 	bge	r2,zero,8009499c <___svfiprintf_internal_r+0x72c>
80094ac8:	0739c83a 	sub	fp,zero,fp
80094acc:	02800b44 	movi	r10,45
80094ad0:	e004c03a 	cmpne	r2,fp,zero
80094ad4:	0253c83a 	sub	r9,zero,r9
80094ad8:	da801d85 	stb	r10,118(sp)
80094adc:	4893c83a 	sub	r9,r9,r2
80094ae0:	80023016 	blt	r16,zero,800953a4 <___svfiprintf_internal_r+0x1134>
80094ae4:	00bfdfc4 	movi	r2,-129
80094ae8:	90a4703a 	and	r18,r18,r2
80094aec:	483fb21e 	bne	r9,zero,800949b8 <___svfiprintf_internal_r+0x748>
80094af0:	00003d06 	br	80094be8 <___svfiprintf_internal_r+0x978>
80094af4:	9817883a 	mov	r11,r19
80094af8:	d8002415 	stw	zero,144(sp)
80094afc:	18bff404 	addi	r2,r3,-48
80094b00:	0019883a 	mov	r12,zero
80094b04:	58c00007 	ldb	r3,0(r11)
80094b08:	630002a4 	muli	r12,r12,10
80094b0c:	9cc00044 	addi	r19,r19,1
80094b10:	9817883a 	mov	r11,r19
80094b14:	1319883a 	add	r12,r2,r12
80094b18:	18bff404 	addi	r2,r3,-48
80094b1c:	30bff92e 	bgeu	r6,r2,80094b04 <___svfiprintf_internal_r+0x894>
80094b20:	db002415 	stw	r12,144(sp)
80094b24:	18bff804 	addi	r2,r3,-32
80094b28:	28be232e 	bgeu	r5,r2,800943b8 <___svfiprintf_internal_r+0x148>
80094b2c:	21003fcc 	andi	r4,r4,255
80094b30:	20024b1e 	bne	r4,zero,80095460 <___svfiprintf_internal_r+0x11f0>
80094b34:	1800d626 	beq	r3,zero,80094e90 <___svfiprintf_internal_r+0xc20>
80094b38:	02c00044 	movi	r11,1
80094b3c:	dac02015 	stw	r11,128(sp)
80094b40:	d8c01005 	stb	r3,64(sp)
80094b44:	d8001d85 	stb	zero,118(sp)
80094b48:	dac02115 	stw	r11,132(sp)
80094b4c:	dc401004 	addi	r17,sp,64
80094b50:	003f2606 	br	800947ec <___svfiprintf_internal_r+0x57c>
80094b54:	94802014 	ori	r18,r18,128
80094b58:	98c00007 	ldb	r3,0(r19)
80094b5c:	003e1306 	br	800943ac <___svfiprintf_internal_r+0x13c>
80094b60:	98c00007 	ldb	r3,0(r19)
80094b64:	9ac00044 	addi	r11,r19,1
80094b68:	1a822b26 	beq	r3,r10,80095418 <___svfiprintf_internal_r+0x11a8>
80094b6c:	18bff404 	addi	r2,r3,-48
80094b70:	0021883a 	mov	r16,zero
80094b74:	30821e36 	bltu	r6,r2,800953f0 <___svfiprintf_internal_r+0x1180>
80094b78:	58c00007 	ldb	r3,0(r11)
80094b7c:	840002a4 	muli	r16,r16,10
80094b80:	5cc00044 	addi	r19,r11,1
80094b84:	9817883a 	mov	r11,r19
80094b88:	80a1883a 	add	r16,r16,r2
80094b8c:	18bff404 	addi	r2,r3,-48
80094b90:	30bff92e 	bgeu	r6,r2,80094b78 <___svfiprintf_internal_r+0x908>
80094b94:	803e060e 	bge	r16,zero,800943b0 <___svfiprintf_internal_r+0x140>
80094b98:	043fffc4 	movi	r16,-1
80094b9c:	003e0406 	br	800943b0 <___svfiprintf_internal_r+0x140>
80094ba0:	21003fcc 	andi	r4,r4,255
80094ba4:	2002371e 	bne	r4,zero,80095484 <___svfiprintf_internal_r+0x1214>
80094ba8:	94800414 	ori	r18,r18,16
80094bac:	9080080c 	andi	r2,r18,32
80094bb0:	103ebb1e 	bne	r2,zero,800946a0 <___svfiprintf_internal_r+0x430>
80094bb4:	9080040c 	andi	r2,r18,16
80094bb8:	10013b26 	beq	r2,zero,800950a8 <___svfiprintf_internal_r+0xe38>
80094bbc:	dac02317 	ldw	r11,140(sp)
80094bc0:	d8001d85 	stb	zero,118(sp)
80094bc4:	0013883a 	mov	r9,zero
80094bc8:	58800104 	addi	r2,r11,4
80094bcc:	5f000017 	ldw	fp,0(r11)
80094bd0:	80013d16 	blt	r16,zero,800950c8 <___svfiprintf_internal_r+0xe58>
80094bd4:	00ffdfc4 	movi	r3,-129
80094bd8:	d8802315 	stw	r2,140(sp)
80094bdc:	90e4703a 	and	r18,r18,r3
80094be0:	0015883a 	mov	r10,zero
80094be4:	e03eba26 	beq	fp,zero,800946d0 <___svfiprintf_internal_r+0x460>
80094be8:	00800244 	movi	r2,9
80094bec:	173f7236 	bltu	r2,fp,800949b8 <___svfiprintf_internal_r+0x748>
80094bf0:	dac02b17 	ldw	r11,172(sp)
80094bf4:	e7000c04 	addi	fp,fp,48
80094bf8:	df0019c5 	stb	fp,103(sp)
80094bfc:	dac02115 	stw	r11,132(sp)
80094c00:	dc4019c4 	addi	r17,sp,103
80094c04:	003eb606 	br	800946e0 <___svfiprintf_internal_r+0x470>
80094c08:	21003fcc 	andi	r4,r4,255
80094c0c:	20021f1e 	bne	r4,zero,8009548c <___svfiprintf_internal_r+0x121c>
80094c10:	94800414 	ori	r18,r18,16
80094c14:	9080080c 	andi	r2,r18,32
80094c18:	103ec51e 	bne	r2,zero,80094730 <___svfiprintf_internal_r+0x4c0>
80094c1c:	9080040c 	andi	r2,r18,16
80094c20:	10016926 	beq	r2,zero,800951c8 <___svfiprintf_internal_r+0xf58>
80094c24:	dac02317 	ldw	r11,140(sp)
80094c28:	d8001d85 	stb	zero,118(sp)
80094c2c:	0013883a 	mov	r9,zero
80094c30:	58800104 	addi	r2,r11,4
80094c34:	5f000017 	ldw	fp,0(r11)
80094c38:	80016b16 	blt	r16,zero,800951e8 <___svfiprintf_internal_r+0xf78>
80094c3c:	00ffdfc4 	movi	r3,-129
80094c40:	d8802315 	stw	r2,140(sp)
80094c44:	90e4703a 	and	r18,r18,r3
80094c48:	e03ec41e 	bne	fp,zero,8009475c <___svfiprintf_internal_r+0x4ec>
80094c4c:	0015883a 	mov	r10,zero
80094c50:	8001c226 	beq	r16,zero,8009535c <___svfiprintf_internal_r+0x10ec>
80094c54:	0039883a 	mov	fp,zero
80094c58:	0013883a 	mov	r9,zero
80094c5c:	003ec006 	br	80094760 <___svfiprintf_internal_r+0x4f0>
80094c60:	d8c01c17 	ldw	r3,112(sp)
80094c64:	d8801b17 	ldw	r2,108(sp)
80094c68:	d9001d87 	ldb	r4,118(sp)
80094c6c:	20000b26 	beq	r4,zero,80094c9c <___svfiprintf_internal_r+0xa2c>
80094c70:	d9001d84 	addi	r4,sp,118
80094c74:	18c00044 	addi	r3,r3,1
80094c78:	10800044 	addi	r2,r2,1
80094c7c:	41000015 	stw	r4,0(r8)
80094c80:	01000044 	movi	r4,1
80094c84:	41000115 	stw	r4,4(r8)
80094c88:	d8c01c15 	stw	r3,112(sp)
80094c8c:	d8801b15 	stw	r2,108(sp)
80094c90:	010001c4 	movi	r4,7
80094c94:	2080e116 	blt	r4,r2,8009501c <___svfiprintf_internal_r+0xdac>
80094c98:	42000204 	addi	r8,r8,8
80094c9c:	dac02217 	ldw	r11,136(sp)
80094ca0:	58000b26 	beq	r11,zero,80094cd0 <___svfiprintf_internal_r+0xa60>
80094ca4:	d9001d04 	addi	r4,sp,116
80094ca8:	18c00084 	addi	r3,r3,2
80094cac:	10800044 	addi	r2,r2,1
80094cb0:	41000015 	stw	r4,0(r8)
80094cb4:	01000084 	movi	r4,2
80094cb8:	41000115 	stw	r4,4(r8)
80094cbc:	d8c01c15 	stw	r3,112(sp)
80094cc0:	d8801b15 	stw	r2,108(sp)
80094cc4:	010001c4 	movi	r4,7
80094cc8:	2080dd16 	blt	r4,r2,80095040 <___svfiprintf_internal_r+0xdd0>
80094ccc:	42000204 	addi	r8,r8,8
80094cd0:	dac02617 	ldw	r11,152(sp)
80094cd4:	01002004 	movi	r4,128
80094cd8:	59008426 	beq	r11,r4,80094eec <___svfiprintf_internal_r+0xc7c>
80094cdc:	dac02117 	ldw	r11,132(sp)
80094ce0:	82e1c83a 	sub	r16,r16,r11
80094ce4:	0400270e 	bge	zero,r16,80094d84 <___svfiprintf_internal_r+0xb14>
80094ce8:	01c00404 	movi	r7,16
80094cec:	3c016a0e 	bge	r7,r16,80095298 <___svfiprintf_internal_r+0x1028>
80094cf0:	016002b4 	movhi	r5,32778
80094cf4:	2979d884 	addi	r5,r5,-6302
80094cf8:	d9402215 	stw	r5,136(sp)
80094cfc:	070001c4 	movi	fp,7
80094d00:	00000306 	br	80094d10 <___svfiprintf_internal_r+0xaa0>
80094d04:	843ffc04 	addi	r16,r16,-16
80094d08:	42000204 	addi	r8,r8,8
80094d0c:	3c00130e 	bge	r7,r16,80094d5c <___svfiprintf_internal_r+0xaec>
80094d10:	18c00404 	addi	r3,r3,16
80094d14:	10800044 	addi	r2,r2,1
80094d18:	45000015 	stw	r20,0(r8)
80094d1c:	41c00115 	stw	r7,4(r8)
80094d20:	d8c01c15 	stw	r3,112(sp)
80094d24:	d8801b15 	stw	r2,108(sp)
80094d28:	e0bff60e 	bge	fp,r2,80094d04 <___svfiprintf_internal_r+0xa94>
80094d2c:	d9801a04 	addi	r6,sp,104
80094d30:	b80b883a 	mov	r5,r23
80094d34:	a809883a 	mov	r4,r21
80094d38:	d9c02c15 	stw	r7,176(sp)
80094d3c:	00940a00 	call	800940a0 <__ssprint_r>
80094d40:	d9c02c17 	ldw	r7,176(sp)
80094d44:	1000581e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80094d48:	843ffc04 	addi	r16,r16,-16
80094d4c:	d8c01c17 	ldw	r3,112(sp)
80094d50:	d8801b17 	ldw	r2,108(sp)
80094d54:	d811883a 	mov	r8,sp
80094d58:	3c3fed16 	blt	r7,r16,80094d10 <___svfiprintf_internal_r+0xaa0>
80094d5c:	dac02217 	ldw	r11,136(sp)
80094d60:	1c07883a 	add	r3,r3,r16
80094d64:	10800044 	addi	r2,r2,1
80094d68:	42c00015 	stw	r11,0(r8)
80094d6c:	44000115 	stw	r16,4(r8)
80094d70:	d8c01c15 	stw	r3,112(sp)
80094d74:	d8801b15 	stw	r2,108(sp)
80094d78:	010001c4 	movi	r4,7
80094d7c:	20809e16 	blt	r4,r2,80094ff8 <___svfiprintf_internal_r+0xd88>
80094d80:	42000204 	addi	r8,r8,8
80094d84:	dac02117 	ldw	r11,132(sp)
80094d88:	10800044 	addi	r2,r2,1
80094d8c:	44400015 	stw	r17,0(r8)
80094d90:	58c7883a 	add	r3,r11,r3
80094d94:	42c00115 	stw	r11,4(r8)
80094d98:	d8c01c15 	stw	r3,112(sp)
80094d9c:	d8801b15 	stw	r2,108(sp)
80094da0:	010001c4 	movi	r4,7
80094da4:	20807f16 	blt	r4,r2,80094fa4 <___svfiprintf_internal_r+0xd34>
80094da8:	42000204 	addi	r8,r8,8
80094dac:	9480010c 	andi	r18,r18,4
80094db0:	90002926 	beq	r18,zero,80094e58 <___svfiprintf_internal_r+0xbe8>
80094db4:	dac02417 	ldw	r11,144(sp)
80094db8:	d8802017 	ldw	r2,128(sp)
80094dbc:	58a1c83a 	sub	r16,r11,r2
80094dc0:	0400250e 	bge	zero,r16,80094e58 <___svfiprintf_internal_r+0xbe8>
80094dc4:	04400404 	movi	r17,16
80094dc8:	d8801b17 	ldw	r2,108(sp)
80094dcc:	8c017c0e 	bge	r17,r16,800953c0 <___svfiprintf_internal_r+0x1150>
80094dd0:	016002b4 	movhi	r5,32778
80094dd4:	2979dc84 	addi	r5,r5,-6286
80094dd8:	d9402815 	stw	r5,160(sp)
80094ddc:	048001c4 	movi	r18,7
80094de0:	00000306 	br	80094df0 <___svfiprintf_internal_r+0xb80>
80094de4:	843ffc04 	addi	r16,r16,-16
80094de8:	42000204 	addi	r8,r8,8
80094dec:	8c00110e 	bge	r17,r16,80094e34 <___svfiprintf_internal_r+0xbc4>
80094df0:	18c00404 	addi	r3,r3,16
80094df4:	10800044 	addi	r2,r2,1
80094df8:	45800015 	stw	r22,0(r8)
80094dfc:	44400115 	stw	r17,4(r8)
80094e00:	d8c01c15 	stw	r3,112(sp)
80094e04:	d8801b15 	stw	r2,108(sp)
80094e08:	90bff60e 	bge	r18,r2,80094de4 <___svfiprintf_internal_r+0xb74>
80094e0c:	d9801a04 	addi	r6,sp,104
80094e10:	b80b883a 	mov	r5,r23
80094e14:	a809883a 	mov	r4,r21
80094e18:	00940a00 	call	800940a0 <__ssprint_r>
80094e1c:	1000221e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80094e20:	843ffc04 	addi	r16,r16,-16
80094e24:	d8c01c17 	ldw	r3,112(sp)
80094e28:	d8801b17 	ldw	r2,108(sp)
80094e2c:	d811883a 	mov	r8,sp
80094e30:	8c3fef16 	blt	r17,r16,80094df0 <___svfiprintf_internal_r+0xb80>
80094e34:	dac02817 	ldw	r11,160(sp)
80094e38:	1c07883a 	add	r3,r3,r16
80094e3c:	10800044 	addi	r2,r2,1
80094e40:	42c00015 	stw	r11,0(r8)
80094e44:	44000115 	stw	r16,4(r8)
80094e48:	d8c01c15 	stw	r3,112(sp)
80094e4c:	d8801b15 	stw	r2,108(sp)
80094e50:	010001c4 	movi	r4,7
80094e54:	2080aa16 	blt	r4,r2,80095100 <___svfiprintf_internal_r+0xe90>
80094e58:	d8802417 	ldw	r2,144(sp)
80094e5c:	dac02017 	ldw	r11,128(sp)
80094e60:	12c0010e 	bge	r2,r11,80094e68 <___svfiprintf_internal_r+0xbf8>
80094e64:	5805883a 	mov	r2,r11
80094e68:	dac02517 	ldw	r11,148(sp)
80094e6c:	5897883a 	add	r11,r11,r2
80094e70:	dac02515 	stw	r11,148(sp)
80094e74:	1800531e 	bne	r3,zero,80094fc4 <___svfiprintf_internal_r+0xd54>
80094e78:	98800007 	ldb	r2,0(r19)
80094e7c:	d8001b15 	stw	zero,108(sp)
80094e80:	d811883a 	mov	r8,sp
80094e84:	103d231e 	bne	r2,zero,80094314 <___svfiprintf_internal_r+0xa4>
80094e88:	9823883a 	mov	r17,r19
80094e8c:	003d3906 	br	80094374 <___svfiprintf_internal_r+0x104>
80094e90:	d8801c17 	ldw	r2,112(sp)
80094e94:	10000426 	beq	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80094e98:	d9402717 	ldw	r5,156(sp)
80094e9c:	d9002a17 	ldw	r4,168(sp)
80094ea0:	d9801a04 	addi	r6,sp,104
80094ea4:	00940a00 	call	800940a0 <__ssprint_r>
80094ea8:	dac02717 	ldw	r11,156(sp)
80094eac:	d8802517 	ldw	r2,148(sp)
80094eb0:	58c0030b 	ldhu	r3,12(r11)
80094eb4:	18c0100c 	andi	r3,r3,64
80094eb8:	1801381e 	bne	r3,zero,8009539c <___svfiprintf_internal_r+0x112c>
80094ebc:	dfc03717 	ldw	ra,220(sp)
80094ec0:	df003617 	ldw	fp,216(sp)
80094ec4:	ddc03517 	ldw	r23,212(sp)
80094ec8:	dd803417 	ldw	r22,208(sp)
80094ecc:	dd403317 	ldw	r21,204(sp)
80094ed0:	dd003217 	ldw	r20,200(sp)
80094ed4:	dcc03117 	ldw	r19,196(sp)
80094ed8:	dc803017 	ldw	r18,192(sp)
80094edc:	dc402f17 	ldw	r17,188(sp)
80094ee0:	dc002e17 	ldw	r16,184(sp)
80094ee4:	dec03804 	addi	sp,sp,224
80094ee8:	f800283a 	ret
80094eec:	dac02417 	ldw	r11,144(sp)
80094ef0:	d9002017 	ldw	r4,128(sp)
80094ef4:	5939c83a 	sub	fp,r11,r4
80094ef8:	073f780e 	bge	zero,fp,80094cdc <___svfiprintf_internal_r+0xa6c>
80094efc:	02400404 	movi	r9,16
80094f00:	4f01370e 	bge	r9,fp,800953e0 <___svfiprintf_internal_r+0x1170>
80094f04:	02e002b4 	movhi	r11,32778
80094f08:	5af9d884 	addi	r11,r11,-6302
80094f0c:	dac02215 	stw	r11,136(sp)
80094f10:	028001c4 	movi	r10,7
80094f14:	00000306 	br	80094f24 <___svfiprintf_internal_r+0xcb4>
80094f18:	e73ffc04 	addi	fp,fp,-16
80094f1c:	42000204 	addi	r8,r8,8
80094f20:	4f00150e 	bge	r9,fp,80094f78 <___svfiprintf_internal_r+0xd08>
80094f24:	18c00404 	addi	r3,r3,16
80094f28:	10800044 	addi	r2,r2,1
80094f2c:	45000015 	stw	r20,0(r8)
80094f30:	42400115 	stw	r9,4(r8)
80094f34:	d8c01c15 	stw	r3,112(sp)
80094f38:	d8801b15 	stw	r2,108(sp)
80094f3c:	50bff60e 	bge	r10,r2,80094f18 <___svfiprintf_internal_r+0xca8>
80094f40:	d9801a04 	addi	r6,sp,104
80094f44:	b80b883a 	mov	r5,r23
80094f48:	a809883a 	mov	r4,r21
80094f4c:	da402c15 	stw	r9,176(sp)
80094f50:	da802d15 	stw	r10,180(sp)
80094f54:	00940a00 	call	800940a0 <__ssprint_r>
80094f58:	da402c17 	ldw	r9,176(sp)
80094f5c:	da802d17 	ldw	r10,180(sp)
80094f60:	103fd11e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80094f64:	e73ffc04 	addi	fp,fp,-16
80094f68:	d8c01c17 	ldw	r3,112(sp)
80094f6c:	d8801b17 	ldw	r2,108(sp)
80094f70:	d811883a 	mov	r8,sp
80094f74:	4f3feb16 	blt	r9,fp,80094f24 <___svfiprintf_internal_r+0xcb4>
80094f78:	dac02217 	ldw	r11,136(sp)
80094f7c:	1f07883a 	add	r3,r3,fp
80094f80:	10800044 	addi	r2,r2,1
80094f84:	42c00015 	stw	r11,0(r8)
80094f88:	47000115 	stw	fp,4(r8)
80094f8c:	d8c01c15 	stw	r3,112(sp)
80094f90:	d8801b15 	stw	r2,108(sp)
80094f94:	010001c4 	movi	r4,7
80094f98:	2080b616 	blt	r4,r2,80095274 <___svfiprintf_internal_r+0x1004>
80094f9c:	42000204 	addi	r8,r8,8
80094fa0:	003f4e06 	br	80094cdc <___svfiprintf_internal_r+0xa6c>
80094fa4:	d9801a04 	addi	r6,sp,104
80094fa8:	b80b883a 	mov	r5,r23
80094fac:	a809883a 	mov	r4,r21
80094fb0:	00940a00 	call	800940a0 <__ssprint_r>
80094fb4:	103fbc1e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80094fb8:	d8c01c17 	ldw	r3,112(sp)
80094fbc:	d811883a 	mov	r8,sp
80094fc0:	003f7a06 	br	80094dac <___svfiprintf_internal_r+0xb3c>
80094fc4:	d9801a04 	addi	r6,sp,104
80094fc8:	b80b883a 	mov	r5,r23
80094fcc:	a809883a 	mov	r4,r21
80094fd0:	00940a00 	call	800940a0 <__ssprint_r>
80094fd4:	103fa826 	beq	r2,zero,80094e78 <___svfiprintf_internal_r+0xc08>
80094fd8:	003fb306 	br	80094ea8 <___svfiprintf_internal_r+0xc38>
80094fdc:	d9801a04 	addi	r6,sp,104
80094fe0:	b80b883a 	mov	r5,r23
80094fe4:	a809883a 	mov	r4,r21
80094fe8:	00940a00 	call	800940a0 <__ssprint_r>
80094fec:	103fae1e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80094ff0:	d811883a 	mov	r8,sp
80094ff4:	003cdc06 	br	80094368 <___svfiprintf_internal_r+0xf8>
80094ff8:	d9801a04 	addi	r6,sp,104
80094ffc:	b80b883a 	mov	r5,r23
80095000:	a809883a 	mov	r4,r21
80095004:	00940a00 	call	800940a0 <__ssprint_r>
80095008:	103fa71e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
8009500c:	d8c01c17 	ldw	r3,112(sp)
80095010:	d8801b17 	ldw	r2,108(sp)
80095014:	d811883a 	mov	r8,sp
80095018:	003f5a06 	br	80094d84 <___svfiprintf_internal_r+0xb14>
8009501c:	d9801a04 	addi	r6,sp,104
80095020:	b80b883a 	mov	r5,r23
80095024:	a809883a 	mov	r4,r21
80095028:	00940a00 	call	800940a0 <__ssprint_r>
8009502c:	103f9e1e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80095030:	d8c01c17 	ldw	r3,112(sp)
80095034:	d8801b17 	ldw	r2,108(sp)
80095038:	d811883a 	mov	r8,sp
8009503c:	003f1706 	br	80094c9c <___svfiprintf_internal_r+0xa2c>
80095040:	d9801a04 	addi	r6,sp,104
80095044:	b80b883a 	mov	r5,r23
80095048:	a809883a 	mov	r4,r21
8009504c:	00940a00 	call	800940a0 <__ssprint_r>
80095050:	103f951e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80095054:	d8c01c17 	ldw	r3,112(sp)
80095058:	d8801b17 	ldw	r2,108(sp)
8009505c:	d811883a 	mov	r8,sp
80095060:	003f1b06 	br	80094cd0 <___svfiprintf_internal_r+0xa60>
80095064:	d8001d85 	stb	zero,118(sp)
80095068:	80007b16 	blt	r16,zero,80095258 <___svfiprintf_internal_r+0xfe8>
8009506c:	00ffdfc4 	movi	r3,-129
80095070:	e244b03a 	or	r2,fp,r9
80095074:	90e4703a 	and	r18,r18,r3
80095078:	103d7026 	beq	r2,zero,8009463c <___svfiprintf_internal_r+0x3cc>
8009507c:	0015883a 	mov	r10,zero
80095080:	003d7206 	br	8009464c <___svfiprintf_internal_r+0x3dc>
80095084:	d9801a04 	addi	r6,sp,104
80095088:	b80b883a 	mov	r5,r23
8009508c:	a809883a 	mov	r4,r21
80095090:	00940a00 	call	800940a0 <__ssprint_r>
80095094:	103f841e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80095098:	d8c01c17 	ldw	r3,112(sp)
8009509c:	d8801b17 	ldw	r2,108(sp)
800950a0:	d811883a 	mov	r8,sp
800950a4:	003ef006 	br	80094c68 <___svfiprintf_internal_r+0x9f8>
800950a8:	9080100c 	andi	r2,r18,64
800950ac:	d8001d85 	stb	zero,118(sp)
800950b0:	dac02317 	ldw	r11,140(sp)
800950b4:	10008126 	beq	r2,zero,800952bc <___svfiprintf_internal_r+0x104c>
800950b8:	58800104 	addi	r2,r11,4
800950bc:	5f00000b 	ldhu	fp,0(r11)
800950c0:	0013883a 	mov	r9,zero
800950c4:	803ec30e 	bge	r16,zero,80094bd4 <___svfiprintf_internal_r+0x964>
800950c8:	d8802315 	stw	r2,140(sp)
800950cc:	0015883a 	mov	r10,zero
800950d0:	e244b03a 	or	r2,fp,r9
800950d4:	103e371e 	bne	r2,zero,800949b4 <___svfiprintf_internal_r+0x744>
800950d8:	00800044 	movi	r2,1
800950dc:	10803fcc 	andi	r2,r2,255
800950e0:	00c00044 	movi	r3,1
800950e4:	10c06126 	beq	r2,r3,8009526c <___svfiprintf_internal_r+0xffc>
800950e8:	00c00084 	movi	r3,2
800950ec:	10fd5526 	beq	r2,r3,80094644 <___svfiprintf_internal_r+0x3d4>
800950f0:	003ed806 	br	80094c54 <___svfiprintf_internal_r+0x9e4>
800950f4:	d8802315 	stw	r2,140(sp)
800950f8:	98c00007 	ldb	r3,0(r19)
800950fc:	003cab06 	br	800943ac <___svfiprintf_internal_r+0x13c>
80095100:	d9801a04 	addi	r6,sp,104
80095104:	b80b883a 	mov	r5,r23
80095108:	a809883a 	mov	r4,r21
8009510c:	00940a00 	call	800940a0 <__ssprint_r>
80095110:	103f651e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80095114:	d8c01c17 	ldw	r3,112(sp)
80095118:	003f4f06 	br	80094e58 <___svfiprintf_internal_r+0xbe8>
8009511c:	00a002b4 	movhi	r2,32778
80095120:	10b86804 	addi	r2,r2,-7776
80095124:	d8802915 	stw	r2,164(sp)
80095128:	003d4406 	br	8009463c <___svfiprintf_internal_r+0x3cc>
8009512c:	dac02317 	ldw	r11,140(sp)
80095130:	58800017 	ldw	r2,0(r11)
80095134:	dac02517 	ldw	r11,148(sp)
80095138:	5807d7fa 	srai	r3,r11,31
8009513c:	dac02317 	ldw	r11,140(sp)
80095140:	10c00115 	stw	r3,4(r2)
80095144:	5ac00104 	addi	r11,r11,4
80095148:	dac02315 	stw	r11,140(sp)
8009514c:	dac02517 	ldw	r11,148(sp)
80095150:	12c00015 	stw	r11,0(r2)
80095154:	003c6d06 	br	8009430c <___svfiprintf_internal_r+0x9c>
80095158:	9080100c 	andi	r2,r18,64
8009515c:	dac02317 	ldw	r11,140(sp)
80095160:	103e5326 	beq	r2,zero,80094ab0 <___svfiprintf_internal_r+0x840>
80095164:	5f00000f 	ldh	fp,0(r11)
80095168:	5ac00104 	addi	r11,r11,4
8009516c:	dac02315 	stw	r11,140(sp)
80095170:	e013d7fa 	srai	r9,fp,31
80095174:	4805883a 	mov	r2,r9
80095178:	003e0706 	br	80094998 <___svfiprintf_internal_r+0x728>
8009517c:	00800c04 	movi	r2,48
80095180:	d8801d05 	stb	r2,116(sp)
80095184:	d8c01d45 	stb	r3,117(sp)
80095188:	d8001d85 	stb	zero,118(sp)
8009518c:	90800094 	ori	r2,r18,2
80095190:	80008f16 	blt	r16,zero,800953d0 <___svfiprintf_internal_r+0x1160>
80095194:	00bfdfc4 	movi	r2,-129
80095198:	90a4703a 	and	r18,r18,r2
8009519c:	94800094 	ori	r18,r18,2
800951a0:	0015883a 	mov	r10,zero
800951a4:	003d2906 	br	8009464c <___svfiprintf_internal_r+0x3dc>
800951a8:	98c00007 	ldb	r3,0(r19)
800951ac:	003c7f06 	br	800943ac <___svfiprintf_internal_r+0x13c>
800951b0:	dac02317 	ldw	r11,140(sp)
800951b4:	0013883a 	mov	r9,zero
800951b8:	5f000017 	ldw	fp,0(r11)
800951bc:	5ac00104 	addi	r11,r11,4
800951c0:	dac02315 	stw	r11,140(sp)
800951c4:	003d1506 	br	8009461c <___svfiprintf_internal_r+0x3ac>
800951c8:	9080100c 	andi	r2,r18,64
800951cc:	d8001d85 	stb	zero,118(sp)
800951d0:	dac02317 	ldw	r11,140(sp)
800951d4:	10003426 	beq	r2,zero,800952a8 <___svfiprintf_internal_r+0x1038>
800951d8:	58800104 	addi	r2,r11,4
800951dc:	5f00000b 	ldhu	fp,0(r11)
800951e0:	0013883a 	mov	r9,zero
800951e4:	803e950e 	bge	r16,zero,80094c3c <___svfiprintf_internal_r+0x9cc>
800951e8:	e246b03a 	or	r3,fp,r9
800951ec:	d8802315 	stw	r2,140(sp)
800951f0:	183d5a1e 	bne	r3,zero,8009475c <___svfiprintf_internal_r+0x4ec>
800951f4:	0015883a 	mov	r10,zero
800951f8:	0005883a 	mov	r2,zero
800951fc:	003fb706 	br	800950dc <___svfiprintf_internal_r+0xe6c>
80095200:	98c00043 	ldbu	r3,1(r19)
80095204:	94800814 	ori	r18,r18,32
80095208:	9cc00044 	addi	r19,r19,1
8009520c:	18c03fcc 	andi	r3,r3,255
80095210:	18c0201c 	xori	r3,r3,128
80095214:	18ffe004 	addi	r3,r3,-128
80095218:	003c6406 	br	800943ac <___svfiprintf_internal_r+0x13c>
8009521c:	d8c02315 	stw	r3,140(sp)
80095220:	0015883a 	mov	r10,zero
80095224:	003faa06 	br	800950d0 <___svfiprintf_internal_r+0xe60>
80095228:	dac02317 	ldw	r11,140(sp)
8009522c:	58800017 	ldw	r2,0(r11)
80095230:	5ac00104 	addi	r11,r11,4
80095234:	dac02315 	stw	r11,140(sp)
80095238:	dac02517 	ldw	r11,148(sp)
8009523c:	12c00015 	stw	r11,0(r2)
80095240:	003c3206 	br	8009430c <___svfiprintf_internal_r+0x9c>
80095244:	012002b4 	movhi	r4,32778
80095248:	21386804 	addi	r4,r4,-7776
8009524c:	d9002915 	stw	r4,164(sp)
80095250:	d8c02315 	stw	r3,140(sp)
80095254:	1025883a 	mov	r18,r2
80095258:	e244b03a 	or	r2,fp,r9
8009525c:	103f871e 	bne	r2,zero,8009507c <___svfiprintf_internal_r+0xe0c>
80095260:	0015883a 	mov	r10,zero
80095264:	00800084 	movi	r2,2
80095268:	003f9c06 	br	800950dc <___svfiprintf_internal_r+0xe6c>
8009526c:	0039883a 	mov	fp,zero
80095270:	003e5f06 	br	80094bf0 <___svfiprintf_internal_r+0x980>
80095274:	d9801a04 	addi	r6,sp,104
80095278:	b80b883a 	mov	r5,r23
8009527c:	a809883a 	mov	r4,r21
80095280:	00940a00 	call	800940a0 <__ssprint_r>
80095284:	103f081e 	bne	r2,zero,80094ea8 <___svfiprintf_internal_r+0xc38>
80095288:	d8c01c17 	ldw	r3,112(sp)
8009528c:	d8801b17 	ldw	r2,108(sp)
80095290:	d811883a 	mov	r8,sp
80095294:	003e9106 	br	80094cdc <___svfiprintf_internal_r+0xa6c>
80095298:	012002b4 	movhi	r4,32778
8009529c:	2139d884 	addi	r4,r4,-6302
800952a0:	d9002215 	stw	r4,136(sp)
800952a4:	003ead06 	br	80094d5c <___svfiprintf_internal_r+0xaec>
800952a8:	58800104 	addi	r2,r11,4
800952ac:	5f000017 	ldw	fp,0(r11)
800952b0:	0013883a 	mov	r9,zero
800952b4:	803e610e 	bge	r16,zero,80094c3c <___svfiprintf_internal_r+0x9cc>
800952b8:	003fcb06 	br	800951e8 <___svfiprintf_internal_r+0xf78>
800952bc:	58800104 	addi	r2,r11,4
800952c0:	5f000017 	ldw	fp,0(r11)
800952c4:	0013883a 	mov	r9,zero
800952c8:	803e420e 	bge	r16,zero,80094bd4 <___svfiprintf_internal_r+0x964>
800952cc:	003f7e06 	br	800950c8 <___svfiprintf_internal_r+0xe58>
800952d0:	5f000017 	ldw	fp,0(r11)
800952d4:	5ac00104 	addi	r11,r11,4
800952d8:	0013883a 	mov	r9,zero
800952dc:	dac02315 	stw	r11,140(sp)
800952e0:	003cce06 	br	8009461c <___svfiprintf_internal_r+0x3ac>
800952e4:	8809883a 	mov	r4,r17
800952e8:	da002c15 	stw	r8,176(sp)
800952ec:	00833580 	call	80083358 <strlen>
800952f0:	d8802115 	stw	r2,132(sp)
800952f4:	da801d83 	ldbu	r10,118(sp)
800952f8:	df002315 	stw	fp,140(sp)
800952fc:	0021883a 	mov	r16,zero
80095300:	da002c17 	ldw	r8,176(sp)
80095304:	003cf606 	br	800946e0 <___svfiprintf_internal_r+0x470>
80095308:	00800184 	movi	r2,6
8009530c:	1400012e 	bgeu	r2,r16,80095314 <___svfiprintf_internal_r+0x10a4>
80095310:	1021883a 	mov	r16,r2
80095314:	dc002115 	stw	r16,132(sp)
80095318:	8005883a 	mov	r2,r16
8009531c:	80003c16 	blt	r16,zero,80095410 <___svfiprintf_internal_r+0x11a0>
80095320:	046002b4 	movhi	r17,32778
80095324:	d8802015 	stw	r2,128(sp)
80095328:	df002315 	stw	fp,140(sp)
8009532c:	8c786d04 	addi	r17,r17,-7756
80095330:	003d2e06 	br	800947ec <___svfiprintf_internal_r+0x57c>
80095334:	04001004 	movi	r16,64
80095338:	800b883a 	mov	r5,r16
8009533c:	008251c0 	call	8008251c <_malloc_r>
80095340:	dac02717 	ldw	r11,156(sp)
80095344:	58800015 	stw	r2,0(r11)
80095348:	58800415 	stw	r2,16(r11)
8009534c:	10004826 	beq	r2,zero,80095470 <___svfiprintf_internal_r+0x1200>
80095350:	dac02717 	ldw	r11,156(sp)
80095354:	5c000515 	stw	r16,20(r11)
80095358:	003bd906 	br	800942c0 <___svfiprintf_internal_r+0x50>
8009535c:	9080004c 	andi	r2,r18,1
80095360:	0015883a 	mov	r10,zero
80095364:	10000626 	beq	r2,zero,80095380 <___svfiprintf_internal_r+0x1110>
80095368:	dac02b17 	ldw	r11,172(sp)
8009536c:	00800c04 	movi	r2,48
80095370:	d88019c5 	stb	r2,103(sp)
80095374:	dac02115 	stw	r11,132(sp)
80095378:	dc4019c4 	addi	r17,sp,103
8009537c:	003cd806 	br	800946e0 <___svfiprintf_internal_r+0x470>
80095380:	d8002115 	stw	zero,132(sp)
80095384:	dc401a04 	addi	r17,sp,104
80095388:	003cd506 	br	800946e0 <___svfiprintf_internal_r+0x470>
8009538c:	012002b4 	movhi	r4,32778
80095390:	2139dc84 	addi	r4,r4,-6286
80095394:	d9002815 	stw	r4,160(sp)
80095398:	003d4306 	br	800948a8 <___svfiprintf_internal_r+0x638>
8009539c:	00bfffc4 	movi	r2,-1
800953a0:	003ec606 	br	80094ebc <___svfiprintf_internal_r+0xc4c>
800953a4:	00800044 	movi	r2,1
800953a8:	10803fcc 	andi	r2,r2,255
800953ac:	00c00044 	movi	r3,1
800953b0:	10fd8026 	beq	r2,r3,800949b4 <___svfiprintf_internal_r+0x744>
800953b4:	00c00084 	movi	r3,2
800953b8:	10fca426 	beq	r2,r3,8009464c <___svfiprintf_internal_r+0x3dc>
800953bc:	003ce806 	br	80094760 <___svfiprintf_internal_r+0x4f0>
800953c0:	012002b4 	movhi	r4,32778
800953c4:	2139dc84 	addi	r4,r4,-6286
800953c8:	d9002815 	stw	r4,160(sp)
800953cc:	003e9906 	br	80094e34 <___svfiprintf_internal_r+0xbc4>
800953d0:	1025883a 	mov	r18,r2
800953d4:	0015883a 	mov	r10,zero
800953d8:	00800084 	movi	r2,2
800953dc:	003ff206 	br	800953a8 <___svfiprintf_internal_r+0x1138>
800953e0:	016002b4 	movhi	r5,32778
800953e4:	2979d884 	addi	r5,r5,-6302
800953e8:	d9402215 	stw	r5,136(sp)
800953ec:	003ee206 	br	80094f78 <___svfiprintf_internal_r+0xd08>
800953f0:	5827883a 	mov	r19,r11
800953f4:	0021883a 	mov	r16,zero
800953f8:	003bed06 	br	800943b0 <___svfiprintf_internal_r+0x140>
800953fc:	dc002115 	stw	r16,132(sp)
80095400:	da801d83 	ldbu	r10,118(sp)
80095404:	df002315 	stw	fp,140(sp)
80095408:	0021883a 	mov	r16,zero
8009540c:	003cb406 	br	800946e0 <___svfiprintf_internal_r+0x470>
80095410:	0005883a 	mov	r2,zero
80095414:	003fc206 	br	80095320 <___svfiprintf_internal_r+0x10b0>
80095418:	d8802317 	ldw	r2,140(sp)
8009541c:	98c00043 	ldbu	r3,1(r19)
80095420:	5827883a 	mov	r19,r11
80095424:	14000017 	ldw	r16,0(r2)
80095428:	10800104 	addi	r2,r2,4
8009542c:	d8802315 	stw	r2,140(sp)
80095430:	803f760e 	bge	r16,zero,8009520c <___svfiprintf_internal_r+0xf9c>
80095434:	18c03fcc 	andi	r3,r3,255
80095438:	18c0201c 	xori	r3,r3,128
8009543c:	043fffc4 	movi	r16,-1
80095440:	18ffe004 	addi	r3,r3,-128
80095444:	003bd906 	br	800943ac <___svfiprintf_internal_r+0x13c>
80095448:	d9c01d85 	stb	r7,118(sp)
8009544c:	003cb606 	br	80094728 <___svfiprintf_internal_r+0x4b8>
80095450:	d9c01d85 	stb	r7,118(sp)
80095454:	003d2106 	br	800948dc <___svfiprintf_internal_r+0x66c>
80095458:	d9c01d85 	stb	r7,118(sp)
8009545c:	003d8e06 	br	80094a98 <___svfiprintf_internal_r+0x828>
80095460:	d9c01d85 	stb	r7,118(sp)
80095464:	003db306 	br	80094b34 <___svfiprintf_internal_r+0x8c4>
80095468:	d9c01d85 	stb	r7,118(sp)
8009546c:	003c8a06 	br	80094698 <___svfiprintf_internal_r+0x428>
80095470:	dac02a17 	ldw	r11,168(sp)
80095474:	00800304 	movi	r2,12
80095478:	58800015 	stw	r2,0(r11)
8009547c:	00bfffc4 	movi	r2,-1
80095480:	003e8e06 	br	80094ebc <___svfiprintf_internal_r+0xc4c>
80095484:	d9c01d85 	stb	r7,118(sp)
80095488:	003dc706 	br	80094ba8 <___svfiprintf_internal_r+0x938>
8009548c:	d9c01d85 	stb	r7,118(sp)
80095490:	003ddf06 	br	80094c10 <___svfiprintf_internal_r+0x9a0>
80095494:	d9c01d85 	stb	r7,118(sp)
80095498:	003d3706 	br	80094978 <___svfiprintf_internal_r+0x708>
8009549c:	d9c01d85 	stb	r7,118(sp)
800954a0:	003c5406 	br	800945f4 <___svfiprintf_internal_r+0x384>
800954a4:	d9c01d85 	stb	r7,118(sp)
800954a8:	003d1d06 	br	80094920 <___svfiprintf_internal_r+0x6b0>

800954ac <_wcrtomb_r>:
800954ac:	defff604 	addi	sp,sp,-40
800954b0:	00a002b4 	movhi	r2,32778
800954b4:	dc800815 	stw	r18,32(sp)
800954b8:	dc400715 	stw	r17,28(sp)
800954bc:	dc000615 	stw	r16,24(sp)
800954c0:	1081c504 	addi	r2,r2,1812
800954c4:	dfc00915 	stw	ra,36(sp)
800954c8:	2021883a 	mov	r16,r4
800954cc:	3823883a 	mov	r17,r7
800954d0:	14800017 	ldw	r18,0(r2)
800954d4:	28001426 	beq	r5,zero,80095528 <_wcrtomb_r+0x7c>
800954d8:	d9400415 	stw	r5,16(sp)
800954dc:	d9800515 	stw	r6,20(sp)
800954e0:	0089a780 	call	80089a78 <__locale_charset>
800954e4:	d9800517 	ldw	r6,20(sp)
800954e8:	d9400417 	ldw	r5,16(sp)
800954ec:	100f883a 	mov	r7,r2
800954f0:	dc400015 	stw	r17,0(sp)
800954f4:	8009883a 	mov	r4,r16
800954f8:	903ee83a 	callr	r18
800954fc:	00ffffc4 	movi	r3,-1
80095500:	10c0031e 	bne	r2,r3,80095510 <_wcrtomb_r+0x64>
80095504:	88000015 	stw	zero,0(r17)
80095508:	00c02284 	movi	r3,138
8009550c:	80c00015 	stw	r3,0(r16)
80095510:	dfc00917 	ldw	ra,36(sp)
80095514:	dc800817 	ldw	r18,32(sp)
80095518:	dc400717 	ldw	r17,28(sp)
8009551c:	dc000617 	ldw	r16,24(sp)
80095520:	dec00a04 	addi	sp,sp,40
80095524:	f800283a 	ret
80095528:	0089a780 	call	80089a78 <__locale_charset>
8009552c:	100f883a 	mov	r7,r2
80095530:	dc400015 	stw	r17,0(sp)
80095534:	000d883a 	mov	r6,zero
80095538:	d9400104 	addi	r5,sp,4
8009553c:	8009883a 	mov	r4,r16
80095540:	903ee83a 	callr	r18
80095544:	003fed06 	br	800954fc <_wcrtomb_r+0x50>

80095548 <wcrtomb>:
80095548:	defff604 	addi	sp,sp,-40
8009554c:	00a002b4 	movhi	r2,32778
80095550:	dc800615 	stw	r18,24(sp)
80095554:	dc400515 	stw	r17,20(sp)
80095558:	1081bf04 	addi	r2,r2,1788
8009555c:	dfc00915 	stw	ra,36(sp)
80095560:	dd000815 	stw	r20,32(sp)
80095564:	dcc00715 	stw	r19,28(sp)
80095568:	dc000415 	stw	r16,16(sp)
8009556c:	3025883a 	mov	r18,r6
80095570:	14400017 	ldw	r17,0(r2)
80095574:	20001926 	beq	r4,zero,800955dc <wcrtomb+0x94>
80095578:	00a002b4 	movhi	r2,32778
8009557c:	1081c504 	addi	r2,r2,1812
80095580:	15000017 	ldw	r20,0(r2)
80095584:	2021883a 	mov	r16,r4
80095588:	2827883a 	mov	r19,r5
8009558c:	0089a780 	call	80089a78 <__locale_charset>
80095590:	100f883a 	mov	r7,r2
80095594:	dc800015 	stw	r18,0(sp)
80095598:	980d883a 	mov	r6,r19
8009559c:	800b883a 	mov	r5,r16
800955a0:	8809883a 	mov	r4,r17
800955a4:	a03ee83a 	callr	r20
800955a8:	00ffffc4 	movi	r3,-1
800955ac:	10c0031e 	bne	r2,r3,800955bc <wcrtomb+0x74>
800955b0:	90000015 	stw	zero,0(r18)
800955b4:	00c02284 	movi	r3,138
800955b8:	88c00015 	stw	r3,0(r17)
800955bc:	dfc00917 	ldw	ra,36(sp)
800955c0:	dd000817 	ldw	r20,32(sp)
800955c4:	dcc00717 	ldw	r19,28(sp)
800955c8:	dc800617 	ldw	r18,24(sp)
800955cc:	dc400517 	ldw	r17,20(sp)
800955d0:	dc000417 	ldw	r16,16(sp)
800955d4:	dec00a04 	addi	sp,sp,40
800955d8:	f800283a 	ret
800955dc:	00a002b4 	movhi	r2,32778
800955e0:	1081c504 	addi	r2,r2,1812
800955e4:	14000017 	ldw	r16,0(r2)
800955e8:	0089a780 	call	80089a78 <__locale_charset>
800955ec:	100f883a 	mov	r7,r2
800955f0:	dc800015 	stw	r18,0(sp)
800955f4:	000d883a 	mov	r6,zero
800955f8:	d9400104 	addi	r5,sp,4
800955fc:	8809883a 	mov	r4,r17
80095600:	803ee83a 	callr	r16
80095604:	003fe806 	br	800955a8 <wcrtomb+0x60>

80095608 <__ascii_wctomb>:
80095608:	28000526 	beq	r5,zero,80095620 <__ascii_wctomb+0x18>
8009560c:	00803fc4 	movi	r2,255
80095610:	11800536 	bltu	r2,r6,80095628 <__ascii_wctomb+0x20>
80095614:	29800005 	stb	r6,0(r5)
80095618:	00800044 	movi	r2,1
8009561c:	f800283a 	ret
80095620:	0005883a 	mov	r2,zero
80095624:	f800283a 	ret
80095628:	00802284 	movi	r2,138
8009562c:	20800015 	stw	r2,0(r4)
80095630:	00bfffc4 	movi	r2,-1
80095634:	f800283a 	ret

80095638 <_wctomb_r>:
80095638:	00a002b4 	movhi	r2,32778
8009563c:	defff904 	addi	sp,sp,-28
80095640:	1081c504 	addi	r2,r2,1812
80095644:	dfc00615 	stw	ra,24(sp)
80095648:	dc400515 	stw	r17,20(sp)
8009564c:	dc000415 	stw	r16,16(sp)
80095650:	3823883a 	mov	r17,r7
80095654:	14000017 	ldw	r16,0(r2)
80095658:	d9000115 	stw	r4,4(sp)
8009565c:	d9400215 	stw	r5,8(sp)
80095660:	d9800315 	stw	r6,12(sp)
80095664:	0089a780 	call	80089a78 <__locale_charset>
80095668:	d9800317 	ldw	r6,12(sp)
8009566c:	d9400217 	ldw	r5,8(sp)
80095670:	d9000117 	ldw	r4,4(sp)
80095674:	100f883a 	mov	r7,r2
80095678:	dc400015 	stw	r17,0(sp)
8009567c:	803ee83a 	callr	r16
80095680:	dfc00617 	ldw	ra,24(sp)
80095684:	dc400517 	ldw	r17,20(sp)
80095688:	dc000417 	ldw	r16,16(sp)
8009568c:	dec00704 	addi	sp,sp,28
80095690:	f800283a 	ret

80095694 <__fixunsdfsi>:
80095694:	defffd04 	addi	sp,sp,-12
80095698:	000d883a 	mov	r6,zero
8009569c:	01d07834 	movhi	r7,16864
800956a0:	dc400115 	stw	r17,4(sp)
800956a4:	dc000015 	stw	r16,0(sp)
800956a8:	dfc00215 	stw	ra,8(sp)
800956ac:	2023883a 	mov	r17,r4
800956b0:	2821883a 	mov	r16,r5
800956b4:	00975d00 	call	800975d0 <__gedf2>
800956b8:	1000080e 	bge	r2,zero,800956dc <__fixunsdfsi+0x48>
800956bc:	8809883a 	mov	r4,r17
800956c0:	800b883a 	mov	r5,r16
800956c4:	00987b40 	call	800987b4 <__fixdfsi>
800956c8:	dfc00217 	ldw	ra,8(sp)
800956cc:	dc400117 	ldw	r17,4(sp)
800956d0:	dc000017 	ldw	r16,0(sp)
800956d4:	dec00304 	addi	sp,sp,12
800956d8:	f800283a 	ret
800956dc:	000d883a 	mov	r6,zero
800956e0:	01d07834 	movhi	r7,16864
800956e4:	8809883a 	mov	r4,r17
800956e8:	800b883a 	mov	r5,r16
800956ec:	0097eb80 	call	80097eb8 <__subdf3>
800956f0:	180b883a 	mov	r5,r3
800956f4:	1009883a 	mov	r4,r2
800956f8:	00987b40 	call	800987b4 <__fixdfsi>
800956fc:	00e00034 	movhi	r3,32768
80095700:	10c5883a 	add	r2,r2,r3
80095704:	003ff006 	br	800956c8 <__fixunsdfsi+0x34>

80095708 <__udivdi3>:
80095708:	defff504 	addi	sp,sp,-44
8009570c:	dcc00415 	stw	r19,16(sp)
80095710:	dc000115 	stw	r16,4(sp)
80095714:	dfc00a15 	stw	ra,40(sp)
80095718:	df000915 	stw	fp,36(sp)
8009571c:	ddc00815 	stw	r23,32(sp)
80095720:	dd800715 	stw	r22,28(sp)
80095724:	dd400615 	stw	r21,24(sp)
80095728:	dd000515 	stw	r20,20(sp)
8009572c:	dc800315 	stw	r18,12(sp)
80095730:	dc400215 	stw	r17,8(sp)
80095734:	2027883a 	mov	r19,r4
80095738:	2821883a 	mov	r16,r5
8009573c:	3800411e 	bne	r7,zero,80095844 <__udivdi3+0x13c>
80095740:	3023883a 	mov	r17,r6
80095744:	2025883a 	mov	r18,r4
80095748:	2980522e 	bgeu	r5,r6,80095894 <__udivdi3+0x18c>
8009574c:	00bfffd4 	movui	r2,65535
80095750:	282d883a 	mov	r22,r5
80095754:	1180a836 	bltu	r2,r6,800959f8 <__udivdi3+0x2f0>
80095758:	00803fc4 	movi	r2,255
8009575c:	1185803a 	cmpltu	r2,r2,r6
80095760:	100490fa 	slli	r2,r2,3
80095764:	3086d83a 	srl	r3,r6,r2
80095768:	012002b4 	movhi	r4,32778
8009576c:	2139e084 	addi	r4,r4,-6270
80095770:	20c7883a 	add	r3,r4,r3
80095774:	18c00003 	ldbu	r3,0(r3)
80095778:	1885883a 	add	r2,r3,r2
8009577c:	00c00804 	movi	r3,32
80095780:	1887c83a 	sub	r3,r3,r2
80095784:	18000526 	beq	r3,zero,8009579c <__udivdi3+0x94>
80095788:	80e0983a 	sll	r16,r16,r3
8009578c:	9884d83a 	srl	r2,r19,r2
80095790:	30e2983a 	sll	r17,r6,r3
80095794:	98e4983a 	sll	r18,r19,r3
80095798:	142cb03a 	or	r22,r2,r16
8009579c:	882ad43a 	srli	r21,r17,16
800957a0:	b009883a 	mov	r4,r22
800957a4:	8d3fffcc 	andi	r20,r17,65535
800957a8:	a80b883a 	mov	r5,r21
800957ac:	00823a40 	call	800823a4 <__umodsi3>
800957b0:	b009883a 	mov	r4,r22
800957b4:	a80b883a 	mov	r5,r21
800957b8:	1027883a 	mov	r19,r2
800957bc:	00823400 	call	80082340 <__udivsi3>
800957c0:	102d883a 	mov	r22,r2
800957c4:	9826943a 	slli	r19,r19,16
800957c8:	9004d43a 	srli	r2,r18,16
800957cc:	a5a1383a 	mul	r16,r20,r22
800957d0:	14c4b03a 	or	r2,r2,r19
800957d4:	1400052e 	bgeu	r2,r16,800957ec <__udivdi3+0xe4>
800957d8:	1445883a 	add	r2,r2,r17
800957dc:	b0ffffc4 	addi	r3,r22,-1
800957e0:	14400136 	bltu	r2,r17,800957e8 <__udivdi3+0xe0>
800957e4:	14012336 	bltu	r2,r16,80095c74 <__udivdi3+0x56c>
800957e8:	182d883a 	mov	r22,r3
800957ec:	1421c83a 	sub	r16,r2,r16
800957f0:	a80b883a 	mov	r5,r21
800957f4:	8009883a 	mov	r4,r16
800957f8:	00823a40 	call	800823a4 <__umodsi3>
800957fc:	1027883a 	mov	r19,r2
80095800:	a80b883a 	mov	r5,r21
80095804:	8009883a 	mov	r4,r16
80095808:	00823400 	call	80082340 <__udivsi3>
8009580c:	9826943a 	slli	r19,r19,16
80095810:	a0a9383a 	mul	r20,r20,r2
80095814:	94bfffcc 	andi	r18,r18,65535
80095818:	94e4b03a 	or	r18,r18,r19
8009581c:	9500052e 	bgeu	r18,r20,80095834 <__udivdi3+0x12c>
80095820:	8ca5883a 	add	r18,r17,r18
80095824:	10ffffc4 	addi	r3,r2,-1
80095828:	9440f136 	bltu	r18,r17,80095bf0 <__udivdi3+0x4e8>
8009582c:	9500f02e 	bgeu	r18,r20,80095bf0 <__udivdi3+0x4e8>
80095830:	10bfff84 	addi	r2,r2,-2
80095834:	b00c943a 	slli	r6,r22,16
80095838:	0007883a 	mov	r3,zero
8009583c:	3084b03a 	or	r2,r6,r2
80095840:	00005906 	br	800959a8 <__udivdi3+0x2a0>
80095844:	29c05636 	bltu	r5,r7,800959a0 <__udivdi3+0x298>
80095848:	00bfffd4 	movui	r2,65535
8009584c:	11c0622e 	bgeu	r2,r7,800959d8 <__udivdi3+0x2d0>
80095850:	00804034 	movhi	r2,256
80095854:	10bfffc4 	addi	r2,r2,-1
80095858:	11c0ee36 	bltu	r2,r7,80095c14 <__udivdi3+0x50c>
8009585c:	00800404 	movi	r2,16
80095860:	3886d83a 	srl	r3,r7,r2
80095864:	012002b4 	movhi	r4,32778
80095868:	2139e084 	addi	r4,r4,-6270
8009586c:	20c7883a 	add	r3,r4,r3
80095870:	18c00003 	ldbu	r3,0(r3)
80095874:	05400804 	movi	r21,32
80095878:	1885883a 	add	r2,r3,r2
8009587c:	a8abc83a 	sub	r21,r21,r2
80095880:	a800621e 	bne	r21,zero,80095a0c <__udivdi3+0x304>
80095884:	3c00e936 	bltu	r7,r16,80095c2c <__udivdi3+0x524>
80095888:	9985403a 	cmpgeu	r2,r19,r6
8009588c:	0007883a 	mov	r3,zero
80095890:	00004506 	br	800959a8 <__udivdi3+0x2a0>
80095894:	3000041e 	bne	r6,zero,800958a8 <__udivdi3+0x1a0>
80095898:	000b883a 	mov	r5,zero
8009589c:	01000044 	movi	r4,1
800958a0:	00823400 	call	80082340 <__udivsi3>
800958a4:	1023883a 	mov	r17,r2
800958a8:	00bfffd4 	movui	r2,65535
800958ac:	14404e2e 	bgeu	r2,r17,800959e8 <__udivdi3+0x2e0>
800958b0:	00804034 	movhi	r2,256
800958b4:	10bfffc4 	addi	r2,r2,-1
800958b8:	1440d836 	bltu	r2,r17,80095c1c <__udivdi3+0x514>
800958bc:	00800404 	movi	r2,16
800958c0:	8886d83a 	srl	r3,r17,r2
800958c4:	012002b4 	movhi	r4,32778
800958c8:	2139e084 	addi	r4,r4,-6270
800958cc:	20c7883a 	add	r3,r4,r3
800958d0:	18c00003 	ldbu	r3,0(r3)
800958d4:	1885883a 	add	r2,r3,r2
800958d8:	00c00804 	movi	r3,32
800958dc:	1887c83a 	sub	r3,r3,r2
800958e0:	18008f1e 	bne	r3,zero,80095b20 <__udivdi3+0x418>
800958e4:	882ad43a 	srli	r21,r17,16
800958e8:	8461c83a 	sub	r16,r16,r17
800958ec:	8d3fffcc 	andi	r20,r17,65535
800958f0:	00c00044 	movi	r3,1
800958f4:	8009883a 	mov	r4,r16
800958f8:	a80b883a 	mov	r5,r21
800958fc:	d8c00015 	stw	r3,0(sp)
80095900:	00823a40 	call	800823a4 <__umodsi3>
80095904:	8009883a 	mov	r4,r16
80095908:	a80b883a 	mov	r5,r21
8009590c:	1027883a 	mov	r19,r2
80095910:	00823400 	call	80082340 <__udivsi3>
80095914:	9826943a 	slli	r19,r19,16
80095918:	9008d43a 	srli	r4,r18,16
8009591c:	1521383a 	mul	r16,r2,r20
80095920:	102d883a 	mov	r22,r2
80095924:	24c8b03a 	or	r4,r4,r19
80095928:	d8c00017 	ldw	r3,0(sp)
8009592c:	2400052e 	bgeu	r4,r16,80095944 <__udivdi3+0x23c>
80095930:	2449883a 	add	r4,r4,r17
80095934:	b0bfffc4 	addi	r2,r22,-1
80095938:	24400136 	bltu	r4,r17,80095940 <__udivdi3+0x238>
8009593c:	2400ca36 	bltu	r4,r16,80095c68 <__udivdi3+0x560>
80095940:	102d883a 	mov	r22,r2
80095944:	2421c83a 	sub	r16,r4,r16
80095948:	a80b883a 	mov	r5,r21
8009594c:	8009883a 	mov	r4,r16
80095950:	d8c00015 	stw	r3,0(sp)
80095954:	00823a40 	call	800823a4 <__umodsi3>
80095958:	1027883a 	mov	r19,r2
8009595c:	a80b883a 	mov	r5,r21
80095960:	8009883a 	mov	r4,r16
80095964:	00823400 	call	80082340 <__udivsi3>
80095968:	9826943a 	slli	r19,r19,16
8009596c:	1529383a 	mul	r20,r2,r20
80095970:	94bfffcc 	andi	r18,r18,65535
80095974:	94e4b03a 	or	r18,r18,r19
80095978:	d8c00017 	ldw	r3,0(sp)
8009597c:	9500052e 	bgeu	r18,r20,80095994 <__udivdi3+0x28c>
80095980:	8ca5883a 	add	r18,r17,r18
80095984:	113fffc4 	addi	r4,r2,-1
80095988:	94409736 	bltu	r18,r17,80095be8 <__udivdi3+0x4e0>
8009598c:	9500962e 	bgeu	r18,r20,80095be8 <__udivdi3+0x4e0>
80095990:	10bfff84 	addi	r2,r2,-2
80095994:	b00c943a 	slli	r6,r22,16
80095998:	3084b03a 	or	r2,r6,r2
8009599c:	00000206 	br	800959a8 <__udivdi3+0x2a0>
800959a0:	0007883a 	mov	r3,zero
800959a4:	0005883a 	mov	r2,zero
800959a8:	dfc00a17 	ldw	ra,40(sp)
800959ac:	df000917 	ldw	fp,36(sp)
800959b0:	ddc00817 	ldw	r23,32(sp)
800959b4:	dd800717 	ldw	r22,28(sp)
800959b8:	dd400617 	ldw	r21,24(sp)
800959bc:	dd000517 	ldw	r20,20(sp)
800959c0:	dcc00417 	ldw	r19,16(sp)
800959c4:	dc800317 	ldw	r18,12(sp)
800959c8:	dc400217 	ldw	r17,8(sp)
800959cc:	dc000117 	ldw	r16,4(sp)
800959d0:	dec00b04 	addi	sp,sp,44
800959d4:	f800283a 	ret
800959d8:	00803fc4 	movi	r2,255
800959dc:	11c5803a 	cmpltu	r2,r2,r7
800959e0:	100490fa 	slli	r2,r2,3
800959e4:	003f9e06 	br	80095860 <__udivdi3+0x158>
800959e8:	00803fc4 	movi	r2,255
800959ec:	1445803a 	cmpltu	r2,r2,r17
800959f0:	100490fa 	slli	r2,r2,3
800959f4:	003fb206 	br	800958c0 <__udivdi3+0x1b8>
800959f8:	00804034 	movhi	r2,256
800959fc:	10bfffc4 	addi	r2,r2,-1
80095a00:	11808836 	bltu	r2,r6,80095c24 <__udivdi3+0x51c>
80095a04:	00800404 	movi	r2,16
80095a08:	003f5606 	br	80095764 <__udivdi3+0x5c>
80095a0c:	30aed83a 	srl	r23,r6,r2
80095a10:	3d4e983a 	sll	r7,r7,r21
80095a14:	80acd83a 	srl	r22,r16,r2
80095a18:	9884d83a 	srl	r2,r19,r2
80095a1c:	3deeb03a 	or	r23,r7,r23
80095a20:	b824d43a 	srli	r18,r23,16
80095a24:	8560983a 	sll	r16,r16,r21
80095a28:	b009883a 	mov	r4,r22
80095a2c:	900b883a 	mov	r5,r18
80095a30:	3568983a 	sll	r20,r6,r21
80095a34:	1420b03a 	or	r16,r2,r16
80095a38:	00823a40 	call	800823a4 <__umodsi3>
80095a3c:	b009883a 	mov	r4,r22
80095a40:	900b883a 	mov	r5,r18
80095a44:	1023883a 	mov	r17,r2
80095a48:	00823400 	call	80082340 <__udivsi3>
80095a4c:	8808943a 	slli	r4,r17,16
80095a50:	bf3fffcc 	andi	fp,r23,65535
80095a54:	8006d43a 	srli	r3,r16,16
80095a58:	e0a3383a 	mul	r17,fp,r2
80095a5c:	100d883a 	mov	r6,r2
80095a60:	1906b03a 	or	r3,r3,r4
80095a64:	1c40042e 	bgeu	r3,r17,80095a78 <__udivdi3+0x370>
80095a68:	1dc7883a 	add	r3,r3,r23
80095a6c:	10bfffc4 	addi	r2,r2,-1
80095a70:	1dc0752e 	bgeu	r3,r23,80095c48 <__udivdi3+0x540>
80095a74:	100d883a 	mov	r6,r2
80095a78:	1c63c83a 	sub	r17,r3,r17
80095a7c:	900b883a 	mov	r5,r18
80095a80:	8809883a 	mov	r4,r17
80095a84:	d9800015 	stw	r6,0(sp)
80095a88:	00823a40 	call	800823a4 <__umodsi3>
80095a8c:	102d883a 	mov	r22,r2
80095a90:	8809883a 	mov	r4,r17
80095a94:	900b883a 	mov	r5,r18
80095a98:	00823400 	call	80082340 <__udivsi3>
80095a9c:	b02c943a 	slli	r22,r22,16
80095aa0:	e089383a 	mul	r4,fp,r2
80095aa4:	843fffcc 	andi	r16,r16,65535
80095aa8:	85a0b03a 	or	r16,r16,r22
80095aac:	d9800017 	ldw	r6,0(sp)
80095ab0:	8100042e 	bgeu	r16,r4,80095ac4 <__udivdi3+0x3bc>
80095ab4:	85e1883a 	add	r16,r16,r23
80095ab8:	10ffffc4 	addi	r3,r2,-1
80095abc:	85c05e2e 	bgeu	r16,r23,80095c38 <__udivdi3+0x530>
80095ac0:	1805883a 	mov	r2,r3
80095ac4:	300c943a 	slli	r6,r6,16
80095ac8:	a17fffcc 	andi	r5,r20,65535
80095acc:	a028d43a 	srli	r20,r20,16
80095ad0:	3084b03a 	or	r2,r6,r2
80095ad4:	10ffffcc 	andi	r3,r2,65535
80095ad8:	100cd43a 	srli	r6,r2,16
80095adc:	194f383a 	mul	r7,r3,r5
80095ae0:	1d07383a 	mul	r3,r3,r20
80095ae4:	314b383a 	mul	r5,r6,r5
80095ae8:	3810d43a 	srli	r8,r7,16
80095aec:	8121c83a 	sub	r16,r16,r4
80095af0:	1947883a 	add	r3,r3,r5
80095af4:	40c7883a 	add	r3,r8,r3
80095af8:	350d383a 	mul	r6,r6,r20
80095afc:	1940022e 	bgeu	r3,r5,80095b08 <__udivdi3+0x400>
80095b00:	01000074 	movhi	r4,1
80095b04:	310d883a 	add	r6,r6,r4
80095b08:	1828d43a 	srli	r20,r3,16
80095b0c:	a18d883a 	add	r6,r20,r6
80095b10:	81803e36 	bltu	r16,r6,80095c0c <__udivdi3+0x504>
80095b14:	81803826 	beq	r16,r6,80095bf8 <__udivdi3+0x4f0>
80095b18:	0007883a 	mov	r3,zero
80095b1c:	003fa206 	br	800959a8 <__udivdi3+0x2a0>
80095b20:	88e2983a 	sll	r17,r17,r3
80095b24:	80a8d83a 	srl	r20,r16,r2
80095b28:	80e0983a 	sll	r16,r16,r3
80095b2c:	882ad43a 	srli	r21,r17,16
80095b30:	9884d83a 	srl	r2,r19,r2
80095b34:	a009883a 	mov	r4,r20
80095b38:	a80b883a 	mov	r5,r21
80095b3c:	142eb03a 	or	r23,r2,r16
80095b40:	98e4983a 	sll	r18,r19,r3
80095b44:	00823a40 	call	800823a4 <__umodsi3>
80095b48:	a009883a 	mov	r4,r20
80095b4c:	a80b883a 	mov	r5,r21
80095b50:	1021883a 	mov	r16,r2
80095b54:	00823400 	call	80082340 <__udivsi3>
80095b58:	1039883a 	mov	fp,r2
80095b5c:	8d3fffcc 	andi	r20,r17,65535
80095b60:	8020943a 	slli	r16,r16,16
80095b64:	b804d43a 	srli	r2,r23,16
80095b68:	a72d383a 	mul	r22,r20,fp
80095b6c:	1404b03a 	or	r2,r2,r16
80095b70:	1580062e 	bgeu	r2,r22,80095b8c <__udivdi3+0x484>
80095b74:	1445883a 	add	r2,r2,r17
80095b78:	e0ffffc4 	addi	r3,fp,-1
80095b7c:	14403836 	bltu	r2,r17,80095c60 <__udivdi3+0x558>
80095b80:	1580372e 	bgeu	r2,r22,80095c60 <__udivdi3+0x558>
80095b84:	e73fff84 	addi	fp,fp,-2
80095b88:	1445883a 	add	r2,r2,r17
80095b8c:	15adc83a 	sub	r22,r2,r22
80095b90:	a80b883a 	mov	r5,r21
80095b94:	b009883a 	mov	r4,r22
80095b98:	00823a40 	call	800823a4 <__umodsi3>
80095b9c:	1027883a 	mov	r19,r2
80095ba0:	b009883a 	mov	r4,r22
80095ba4:	a80b883a 	mov	r5,r21
80095ba8:	00823400 	call	80082340 <__udivsi3>
80095bac:	9826943a 	slli	r19,r19,16
80095bb0:	a0a1383a 	mul	r16,r20,r2
80095bb4:	b93fffcc 	andi	r4,r23,65535
80095bb8:	24c8b03a 	or	r4,r4,r19
80095bbc:	2400062e 	bgeu	r4,r16,80095bd8 <__udivdi3+0x4d0>
80095bc0:	2449883a 	add	r4,r4,r17
80095bc4:	10ffffc4 	addi	r3,r2,-1
80095bc8:	24402336 	bltu	r4,r17,80095c58 <__udivdi3+0x550>
80095bcc:	2400222e 	bgeu	r4,r16,80095c58 <__udivdi3+0x550>
80095bd0:	10bfff84 	addi	r2,r2,-2
80095bd4:	2449883a 	add	r4,r4,r17
80095bd8:	e038943a 	slli	fp,fp,16
80095bdc:	2421c83a 	sub	r16,r4,r16
80095be0:	e086b03a 	or	r3,fp,r2
80095be4:	003f4306 	br	800958f4 <__udivdi3+0x1ec>
80095be8:	2005883a 	mov	r2,r4
80095bec:	003f6906 	br	80095994 <__udivdi3+0x28c>
80095bf0:	1805883a 	mov	r2,r3
80095bf4:	003f0f06 	br	80095834 <__udivdi3+0x12c>
80095bf8:	1806943a 	slli	r3,r3,16
80095bfc:	9d66983a 	sll	r19,r19,r21
80095c00:	39ffffcc 	andi	r7,r7,65535
80095c04:	19c7883a 	add	r3,r3,r7
80095c08:	98ffc32e 	bgeu	r19,r3,80095b18 <__udivdi3+0x410>
80095c0c:	10bfffc4 	addi	r2,r2,-1
80095c10:	003fc106 	br	80095b18 <__udivdi3+0x410>
80095c14:	00800604 	movi	r2,24
80095c18:	003f1106 	br	80095860 <__udivdi3+0x158>
80095c1c:	00800604 	movi	r2,24
80095c20:	003f2706 	br	800958c0 <__udivdi3+0x1b8>
80095c24:	00800604 	movi	r2,24
80095c28:	003ece06 	br	80095764 <__udivdi3+0x5c>
80095c2c:	0007883a 	mov	r3,zero
80095c30:	00800044 	movi	r2,1
80095c34:	003f5c06 	br	800959a8 <__udivdi3+0x2a0>
80095c38:	813fa12e 	bgeu	r16,r4,80095ac0 <__udivdi3+0x3b8>
80095c3c:	10bfff84 	addi	r2,r2,-2
80095c40:	85e1883a 	add	r16,r16,r23
80095c44:	003f9f06 	br	80095ac4 <__udivdi3+0x3bc>
80095c48:	1c7f8a2e 	bgeu	r3,r17,80095a74 <__udivdi3+0x36c>
80095c4c:	31bfff84 	addi	r6,r6,-2
80095c50:	1dc7883a 	add	r3,r3,r23
80095c54:	003f8806 	br	80095a78 <__udivdi3+0x370>
80095c58:	1805883a 	mov	r2,r3
80095c5c:	003fde06 	br	80095bd8 <__udivdi3+0x4d0>
80095c60:	1839883a 	mov	fp,r3
80095c64:	003fc906 	br	80095b8c <__udivdi3+0x484>
80095c68:	b5bfff84 	addi	r22,r22,-2
80095c6c:	2449883a 	add	r4,r4,r17
80095c70:	003f3406 	br	80095944 <__udivdi3+0x23c>
80095c74:	b5bfff84 	addi	r22,r22,-2
80095c78:	1445883a 	add	r2,r2,r17
80095c7c:	003edb06 	br	800957ec <__udivdi3+0xe4>

80095c80 <__umoddi3>:
80095c80:	defff404 	addi	sp,sp,-48
80095c84:	df000a15 	stw	fp,40(sp)
80095c88:	dc400315 	stw	r17,12(sp)
80095c8c:	dc000215 	stw	r16,8(sp)
80095c90:	dfc00b15 	stw	ra,44(sp)
80095c94:	ddc00915 	stw	r23,36(sp)
80095c98:	dd800815 	stw	r22,32(sp)
80095c9c:	dd400715 	stw	r21,28(sp)
80095ca0:	dd000615 	stw	r20,24(sp)
80095ca4:	dcc00515 	stw	r19,20(sp)
80095ca8:	dc800415 	stw	r18,16(sp)
80095cac:	2021883a 	mov	r16,r4
80095cb0:	2823883a 	mov	r17,r5
80095cb4:	2839883a 	mov	fp,r5
80095cb8:	38003c1e 	bne	r7,zero,80095dac <__umoddi3+0x12c>
80095cbc:	3027883a 	mov	r19,r6
80095cc0:	2029883a 	mov	r20,r4
80095cc4:	2980512e 	bgeu	r5,r6,80095e0c <__umoddi3+0x18c>
80095cc8:	00bfffd4 	movui	r2,65535
80095ccc:	11809a36 	bltu	r2,r6,80095f38 <__umoddi3+0x2b8>
80095cd0:	01003fc4 	movi	r4,255
80095cd4:	2189803a 	cmpltu	r4,r4,r6
80095cd8:	200890fa 	slli	r4,r4,3
80095cdc:	3104d83a 	srl	r2,r6,r4
80095ce0:	00e002b4 	movhi	r3,32778
80095ce4:	18f9e084 	addi	r3,r3,-6270
80095ce8:	1885883a 	add	r2,r3,r2
80095cec:	10c00003 	ldbu	r3,0(r2)
80095cf0:	00800804 	movi	r2,32
80095cf4:	1909883a 	add	r4,r3,r4
80095cf8:	1125c83a 	sub	r18,r2,r4
80095cfc:	90000526 	beq	r18,zero,80095d14 <__umoddi3+0x94>
80095d00:	8ca2983a 	sll	r17,r17,r18
80095d04:	8108d83a 	srl	r4,r16,r4
80095d08:	34a6983a 	sll	r19,r6,r18
80095d0c:	84a8983a 	sll	r20,r16,r18
80095d10:	2478b03a 	or	fp,r4,r17
80095d14:	982ed43a 	srli	r23,r19,16
80095d18:	e009883a 	mov	r4,fp
80095d1c:	9dbfffcc 	andi	r22,r19,65535
80095d20:	b80b883a 	mov	r5,r23
80095d24:	00823a40 	call	800823a4 <__umodsi3>
80095d28:	e009883a 	mov	r4,fp
80095d2c:	b80b883a 	mov	r5,r23
80095d30:	102b883a 	mov	r21,r2
80095d34:	00823400 	call	80082340 <__udivsi3>
80095d38:	a806943a 	slli	r3,r21,16
80095d3c:	a008d43a 	srli	r4,r20,16
80095d40:	b085383a 	mul	r2,r22,r2
80095d44:	20c8b03a 	or	r4,r4,r3
80095d48:	2080032e 	bgeu	r4,r2,80095d58 <__umoddi3+0xd8>
80095d4c:	24c9883a 	add	r4,r4,r19
80095d50:	24c00136 	bltu	r4,r19,80095d58 <__umoddi3+0xd8>
80095d54:	20811036 	bltu	r4,r2,80096198 <__umoddi3+0x518>
80095d58:	20abc83a 	sub	r21,r4,r2
80095d5c:	b80b883a 	mov	r5,r23
80095d60:	a809883a 	mov	r4,r21
80095d64:	00823a40 	call	800823a4 <__umodsi3>
80095d68:	1023883a 	mov	r17,r2
80095d6c:	b80b883a 	mov	r5,r23
80095d70:	a809883a 	mov	r4,r21
80095d74:	00823400 	call	80082340 <__udivsi3>
80095d78:	8822943a 	slli	r17,r17,16
80095d7c:	b085383a 	mul	r2,r22,r2
80095d80:	a0ffffcc 	andi	r3,r20,65535
80095d84:	1c46b03a 	or	r3,r3,r17
80095d88:	1880042e 	bgeu	r3,r2,80095d9c <__umoddi3+0x11c>
80095d8c:	1cc7883a 	add	r3,r3,r19
80095d90:	1cc00236 	bltu	r3,r19,80095d9c <__umoddi3+0x11c>
80095d94:	1880012e 	bgeu	r3,r2,80095d9c <__umoddi3+0x11c>
80095d98:	1cc7883a 	add	r3,r3,r19
80095d9c:	1885c83a 	sub	r2,r3,r2
80095da0:	1484d83a 	srl	r2,r2,r18
80095da4:	0007883a 	mov	r3,zero
80095da8:	00004f06 	br	80095ee8 <__umoddi3+0x268>
80095dac:	29c04c36 	bltu	r5,r7,80095ee0 <__umoddi3+0x260>
80095db0:	00bfffd4 	movui	r2,65535
80095db4:	11c0582e 	bgeu	r2,r7,80095f18 <__umoddi3+0x298>
80095db8:	00804034 	movhi	r2,256
80095dbc:	10bfffc4 	addi	r2,r2,-1
80095dc0:	11c0e736 	bltu	r2,r7,80096160 <__umoddi3+0x4e0>
80095dc4:	01000404 	movi	r4,16
80095dc8:	3904d83a 	srl	r2,r7,r4
80095dcc:	00e002b4 	movhi	r3,32778
80095dd0:	18f9e084 	addi	r3,r3,-6270
80095dd4:	1885883a 	add	r2,r3,r2
80095dd8:	14c00003 	ldbu	r19,0(r2)
80095ddc:	00c00804 	movi	r3,32
80095de0:	9927883a 	add	r19,r19,r4
80095de4:	1ce9c83a 	sub	r20,r3,r19
80095de8:	a000581e 	bne	r20,zero,80095f4c <__umoddi3+0x2cc>
80095dec:	3c400136 	bltu	r7,r17,80095df4 <__umoddi3+0x174>
80095df0:	8180eb36 	bltu	r16,r6,800961a0 <__umoddi3+0x520>
80095df4:	8185c83a 	sub	r2,r16,r6
80095df8:	89e3c83a 	sub	r17,r17,r7
80095dfc:	8089803a 	cmpltu	r4,r16,r2
80095e00:	8939c83a 	sub	fp,r17,r4
80095e04:	e007883a 	mov	r3,fp
80095e08:	00003706 	br	80095ee8 <__umoddi3+0x268>
80095e0c:	3000041e 	bne	r6,zero,80095e20 <__umoddi3+0x1a0>
80095e10:	000b883a 	mov	r5,zero
80095e14:	01000044 	movi	r4,1
80095e18:	00823400 	call	80082340 <__udivsi3>
80095e1c:	1027883a 	mov	r19,r2
80095e20:	00bfffd4 	movui	r2,65535
80095e24:	14c0402e 	bgeu	r2,r19,80095f28 <__umoddi3+0x2a8>
80095e28:	00804034 	movhi	r2,256
80095e2c:	10bfffc4 	addi	r2,r2,-1
80095e30:	14c0cd36 	bltu	r2,r19,80096168 <__umoddi3+0x4e8>
80095e34:	00800404 	movi	r2,16
80095e38:	9886d83a 	srl	r3,r19,r2
80095e3c:	012002b4 	movhi	r4,32778
80095e40:	2139e084 	addi	r4,r4,-6270
80095e44:	20c7883a 	add	r3,r4,r3
80095e48:	18c00003 	ldbu	r3,0(r3)
80095e4c:	1887883a 	add	r3,r3,r2
80095e50:	00800804 	movi	r2,32
80095e54:	10e5c83a 	sub	r18,r2,r3
80095e58:	9000901e 	bne	r18,zero,8009609c <__umoddi3+0x41c>
80095e5c:	982cd43a 	srli	r22,r19,16
80095e60:	8ce3c83a 	sub	r17,r17,r19
80095e64:	9d7fffcc 	andi	r21,r19,65535
80095e68:	b00b883a 	mov	r5,r22
80095e6c:	8809883a 	mov	r4,r17
80095e70:	00823a40 	call	800823a4 <__umodsi3>
80095e74:	8809883a 	mov	r4,r17
80095e78:	b00b883a 	mov	r5,r22
80095e7c:	1021883a 	mov	r16,r2
80095e80:	00823400 	call	80082340 <__udivsi3>
80095e84:	8006943a 	slli	r3,r16,16
80095e88:	a008d43a 	srli	r4,r20,16
80095e8c:	1545383a 	mul	r2,r2,r21
80095e90:	20c8b03a 	or	r4,r4,r3
80095e94:	2080042e 	bgeu	r4,r2,80095ea8 <__umoddi3+0x228>
80095e98:	24c9883a 	add	r4,r4,r19
80095e9c:	24c00236 	bltu	r4,r19,80095ea8 <__umoddi3+0x228>
80095ea0:	2080012e 	bgeu	r4,r2,80095ea8 <__umoddi3+0x228>
80095ea4:	24c9883a 	add	r4,r4,r19
80095ea8:	20a1c83a 	sub	r16,r4,r2
80095eac:	b00b883a 	mov	r5,r22
80095eb0:	8009883a 	mov	r4,r16
80095eb4:	00823a40 	call	800823a4 <__umodsi3>
80095eb8:	1023883a 	mov	r17,r2
80095ebc:	b00b883a 	mov	r5,r22
80095ec0:	8009883a 	mov	r4,r16
80095ec4:	00823400 	call	80082340 <__udivsi3>
80095ec8:	8822943a 	slli	r17,r17,16
80095ecc:	1545383a 	mul	r2,r2,r21
80095ed0:	a53fffcc 	andi	r20,r20,65535
80095ed4:	a446b03a 	or	r3,r20,r17
80095ed8:	18bfb02e 	bgeu	r3,r2,80095d9c <__umoddi3+0x11c>
80095edc:	003fab06 	br	80095d8c <__umoddi3+0x10c>
80095ee0:	2005883a 	mov	r2,r4
80095ee4:	2807883a 	mov	r3,r5
80095ee8:	dfc00b17 	ldw	ra,44(sp)
80095eec:	df000a17 	ldw	fp,40(sp)
80095ef0:	ddc00917 	ldw	r23,36(sp)
80095ef4:	dd800817 	ldw	r22,32(sp)
80095ef8:	dd400717 	ldw	r21,28(sp)
80095efc:	dd000617 	ldw	r20,24(sp)
80095f00:	dcc00517 	ldw	r19,20(sp)
80095f04:	dc800417 	ldw	r18,16(sp)
80095f08:	dc400317 	ldw	r17,12(sp)
80095f0c:	dc000217 	ldw	r16,8(sp)
80095f10:	dec00c04 	addi	sp,sp,48
80095f14:	f800283a 	ret
80095f18:	04c03fc4 	movi	r19,255
80095f1c:	99c9803a 	cmpltu	r4,r19,r7
80095f20:	200890fa 	slli	r4,r4,3
80095f24:	003fa806 	br	80095dc8 <__umoddi3+0x148>
80095f28:	00803fc4 	movi	r2,255
80095f2c:	14c5803a 	cmpltu	r2,r2,r19
80095f30:	100490fa 	slli	r2,r2,3
80095f34:	003fc006 	br	80095e38 <__umoddi3+0x1b8>
80095f38:	00804034 	movhi	r2,256
80095f3c:	10bfffc4 	addi	r2,r2,-1
80095f40:	11808b36 	bltu	r2,r6,80096170 <__umoddi3+0x4f0>
80095f44:	01000404 	movi	r4,16
80095f48:	003f6406 	br	80095cdc <__umoddi3+0x5c>
80095f4c:	34c4d83a 	srl	r2,r6,r19
80095f50:	3d0e983a 	sll	r7,r7,r20
80095f54:	8cf8d83a 	srl	fp,r17,r19
80095f58:	8d10983a 	sll	r8,r17,r20
80095f5c:	38aab03a 	or	r21,r7,r2
80095f60:	a82cd43a 	srli	r22,r21,16
80095f64:	84e2d83a 	srl	r17,r16,r19
80095f68:	e009883a 	mov	r4,fp
80095f6c:	b00b883a 	mov	r5,r22
80095f70:	8a22b03a 	or	r17,r17,r8
80095f74:	3524983a 	sll	r18,r6,r20
80095f78:	00823a40 	call	800823a4 <__umodsi3>
80095f7c:	e009883a 	mov	r4,fp
80095f80:	b00b883a 	mov	r5,r22
80095f84:	102f883a 	mov	r23,r2
80095f88:	00823400 	call	80082340 <__udivsi3>
80095f8c:	100d883a 	mov	r6,r2
80095f90:	b808943a 	slli	r4,r23,16
80095f94:	aa3fffcc 	andi	r8,r21,65535
80095f98:	8804d43a 	srli	r2,r17,16
80095f9c:	41af383a 	mul	r23,r8,r6
80095fa0:	8520983a 	sll	r16,r16,r20
80095fa4:	1104b03a 	or	r2,r2,r4
80095fa8:	15c0042e 	bgeu	r2,r23,80095fbc <__umoddi3+0x33c>
80095fac:	1545883a 	add	r2,r2,r21
80095fb0:	30ffffc4 	addi	r3,r6,-1
80095fb4:	1540742e 	bgeu	r2,r21,80096188 <__umoddi3+0x508>
80095fb8:	180d883a 	mov	r6,r3
80095fbc:	15efc83a 	sub	r23,r2,r23
80095fc0:	b00b883a 	mov	r5,r22
80095fc4:	b809883a 	mov	r4,r23
80095fc8:	d9800115 	stw	r6,4(sp)
80095fcc:	da000015 	stw	r8,0(sp)
80095fd0:	00823a40 	call	800823a4 <__umodsi3>
80095fd4:	b00b883a 	mov	r5,r22
80095fd8:	b809883a 	mov	r4,r23
80095fdc:	1039883a 	mov	fp,r2
80095fe0:	00823400 	call	80082340 <__udivsi3>
80095fe4:	da000017 	ldw	r8,0(sp)
80095fe8:	e038943a 	slli	fp,fp,16
80095fec:	100b883a 	mov	r5,r2
80095ff0:	4089383a 	mul	r4,r8,r2
80095ff4:	8a3fffcc 	andi	r8,r17,65535
80095ff8:	4710b03a 	or	r8,r8,fp
80095ffc:	d9800117 	ldw	r6,4(sp)
80096000:	4100042e 	bgeu	r8,r4,80096014 <__umoddi3+0x394>
80096004:	4551883a 	add	r8,r8,r21
80096008:	10bfffc4 	addi	r2,r2,-1
8009600c:	45405a2e 	bgeu	r8,r21,80096178 <__umoddi3+0x4f8>
80096010:	100b883a 	mov	r5,r2
80096014:	300c943a 	slli	r6,r6,16
80096018:	91ffffcc 	andi	r7,r18,65535
8009601c:	9004d43a 	srli	r2,r18,16
80096020:	314cb03a 	or	r6,r6,r5
80096024:	317fffcc 	andi	r5,r6,65535
80096028:	300cd43a 	srli	r6,r6,16
8009602c:	29d3383a 	mul	r9,r5,r7
80096030:	288b383a 	mul	r5,r5,r2
80096034:	31cf383a 	mul	r7,r6,r7
80096038:	4806d43a 	srli	r3,r9,16
8009603c:	4111c83a 	sub	r8,r8,r4
80096040:	29cb883a 	add	r5,r5,r7
80096044:	194b883a 	add	r5,r3,r5
80096048:	3085383a 	mul	r2,r6,r2
8009604c:	29c0022e 	bgeu	r5,r7,80096058 <__umoddi3+0x3d8>
80096050:	00c00074 	movhi	r3,1
80096054:	10c5883a 	add	r2,r2,r3
80096058:	2808d43a 	srli	r4,r5,16
8009605c:	280a943a 	slli	r5,r5,16
80096060:	4a7fffcc 	andi	r9,r9,65535
80096064:	2085883a 	add	r2,r4,r2
80096068:	2a4b883a 	add	r5,r5,r9
8009606c:	40803636 	bltu	r8,r2,80096148 <__umoddi3+0x4c8>
80096070:	40804d26 	beq	r8,r2,800961a8 <__umoddi3+0x528>
80096074:	4089c83a 	sub	r4,r8,r2
80096078:	280f883a 	mov	r7,r5
8009607c:	81cfc83a 	sub	r7,r16,r7
80096080:	81c7803a 	cmpltu	r3,r16,r7
80096084:	20c7c83a 	sub	r3,r4,r3
80096088:	1cc4983a 	sll	r2,r3,r19
8009608c:	3d0ed83a 	srl	r7,r7,r20
80096090:	1d06d83a 	srl	r3,r3,r20
80096094:	11c4b03a 	or	r2,r2,r7
80096098:	003f9306 	br	80095ee8 <__umoddi3+0x268>
8009609c:	9ca6983a 	sll	r19,r19,r18
800960a0:	88e8d83a 	srl	r20,r17,r3
800960a4:	80c4d83a 	srl	r2,r16,r3
800960a8:	982cd43a 	srli	r22,r19,16
800960ac:	8ca2983a 	sll	r17,r17,r18
800960b0:	a009883a 	mov	r4,r20
800960b4:	b00b883a 	mov	r5,r22
800960b8:	1478b03a 	or	fp,r2,r17
800960bc:	00823a40 	call	800823a4 <__umodsi3>
800960c0:	a009883a 	mov	r4,r20
800960c4:	b00b883a 	mov	r5,r22
800960c8:	1023883a 	mov	r17,r2
800960cc:	00823400 	call	80082340 <__udivsi3>
800960d0:	9d7fffcc 	andi	r21,r19,65535
800960d4:	880a943a 	slli	r5,r17,16
800960d8:	e008d43a 	srli	r4,fp,16
800960dc:	a885383a 	mul	r2,r21,r2
800960e0:	84a8983a 	sll	r20,r16,r18
800960e4:	2148b03a 	or	r4,r4,r5
800960e8:	2080042e 	bgeu	r4,r2,800960fc <__umoddi3+0x47c>
800960ec:	24c9883a 	add	r4,r4,r19
800960f0:	24c00236 	bltu	r4,r19,800960fc <__umoddi3+0x47c>
800960f4:	2080012e 	bgeu	r4,r2,800960fc <__umoddi3+0x47c>
800960f8:	24c9883a 	add	r4,r4,r19
800960fc:	20a3c83a 	sub	r17,r4,r2
80096100:	b00b883a 	mov	r5,r22
80096104:	8809883a 	mov	r4,r17
80096108:	00823a40 	call	800823a4 <__umodsi3>
8009610c:	102f883a 	mov	r23,r2
80096110:	8809883a 	mov	r4,r17
80096114:	b00b883a 	mov	r5,r22
80096118:	00823400 	call	80082340 <__udivsi3>
8009611c:	b82e943a 	slli	r23,r23,16
80096120:	a885383a 	mul	r2,r21,r2
80096124:	e13fffcc 	andi	r4,fp,65535
80096128:	25c8b03a 	or	r4,r4,r23
8009612c:	2080042e 	bgeu	r4,r2,80096140 <__umoddi3+0x4c0>
80096130:	24c9883a 	add	r4,r4,r19
80096134:	24c00236 	bltu	r4,r19,80096140 <__umoddi3+0x4c0>
80096138:	2080012e 	bgeu	r4,r2,80096140 <__umoddi3+0x4c0>
8009613c:	24c9883a 	add	r4,r4,r19
80096140:	20a3c83a 	sub	r17,r4,r2
80096144:	003f4806 	br	80095e68 <__umoddi3+0x1e8>
80096148:	2c8fc83a 	sub	r7,r5,r18
8009614c:	1545c83a 	sub	r2,r2,r21
80096150:	29cb803a 	cmpltu	r5,r5,r7
80096154:	1145c83a 	sub	r2,r2,r5
80096158:	4089c83a 	sub	r4,r8,r2
8009615c:	003fc706 	br	8009607c <__umoddi3+0x3fc>
80096160:	01000604 	movi	r4,24
80096164:	003f1806 	br	80095dc8 <__umoddi3+0x148>
80096168:	00800604 	movi	r2,24
8009616c:	003f3206 	br	80095e38 <__umoddi3+0x1b8>
80096170:	01000604 	movi	r4,24
80096174:	003ed906 	br	80095cdc <__umoddi3+0x5c>
80096178:	413fa52e 	bgeu	r8,r4,80096010 <__umoddi3+0x390>
8009617c:	297fff84 	addi	r5,r5,-2
80096180:	4551883a 	add	r8,r8,r21
80096184:	003fa306 	br	80096014 <__umoddi3+0x394>
80096188:	15ff8b2e 	bgeu	r2,r23,80095fb8 <__umoddi3+0x338>
8009618c:	31bfff84 	addi	r6,r6,-2
80096190:	1545883a 	add	r2,r2,r21
80096194:	003f8906 	br	80095fbc <__umoddi3+0x33c>
80096198:	24c9883a 	add	r4,r4,r19
8009619c:	003eee06 	br	80095d58 <__umoddi3+0xd8>
800961a0:	8005883a 	mov	r2,r16
800961a4:	003f1706 	br	80095e04 <__umoddi3+0x184>
800961a8:	817fe736 	bltu	r16,r5,80096148 <__umoddi3+0x4c8>
800961ac:	280f883a 	mov	r7,r5
800961b0:	0009883a 	mov	r4,zero
800961b4:	003fb106 	br	8009607c <__umoddi3+0x3fc>

800961b8 <__eqsf2>:
800961b8:	2006d5fa 	srli	r3,r4,23
800961bc:	280cd5fa 	srli	r6,r5,23
800961c0:	01c02034 	movhi	r7,128
800961c4:	39ffffc4 	addi	r7,r7,-1
800961c8:	18c03fcc 	andi	r3,r3,255
800961cc:	02003fc4 	movi	r8,255
800961d0:	3904703a 	and	r2,r7,r4
800961d4:	31803fcc 	andi	r6,r6,255
800961d8:	394e703a 	and	r7,r7,r5
800961dc:	2008d7fa 	srli	r4,r4,31
800961e0:	280ad7fa 	srli	r5,r5,31
800961e4:	1a000d26 	beq	r3,r8,8009621c <__eqsf2+0x64>
800961e8:	02003fc4 	movi	r8,255
800961ec:	32000826 	beq	r6,r8,80096210 <__eqsf2+0x58>
800961f0:	19800226 	beq	r3,r6,800961fc <__eqsf2+0x44>
800961f4:	00800044 	movi	r2,1
800961f8:	f800283a 	ret
800961fc:	11fffd1e 	bne	r2,r7,800961f4 <__eqsf2+0x3c>
80096200:	21400926 	beq	r4,r5,80096228 <__eqsf2+0x70>
80096204:	183ffb1e 	bne	r3,zero,800961f4 <__eqsf2+0x3c>
80096208:	1004c03a 	cmpne	r2,r2,zero
8009620c:	f800283a 	ret
80096210:	383ff726 	beq	r7,zero,800961f0 <__eqsf2+0x38>
80096214:	00800044 	movi	r2,1
80096218:	f800283a 	ret
8009621c:	103ff226 	beq	r2,zero,800961e8 <__eqsf2+0x30>
80096220:	00800044 	movi	r2,1
80096224:	f800283a 	ret
80096228:	0005883a 	mov	r2,zero
8009622c:	f800283a 	ret

80096230 <__gesf2>:
80096230:	2004d5fa 	srli	r2,r4,23
80096234:	2806d5fa 	srli	r3,r5,23
80096238:	01802034 	movhi	r6,128
8009623c:	31bfffc4 	addi	r6,r6,-1
80096240:	10803fcc 	andi	r2,r2,255
80096244:	01c03fc4 	movi	r7,255
80096248:	3110703a 	and	r8,r6,r4
8009624c:	18c03fcc 	andi	r3,r3,255
80096250:	314c703a 	and	r6,r6,r5
80096254:	2008d7fa 	srli	r4,r4,31
80096258:	280ad7fa 	srli	r5,r5,31
8009625c:	11c01926 	beq	r2,r7,800962c4 <__gesf2+0x94>
80096260:	01c03fc4 	movi	r7,255
80096264:	19c00f26 	beq	r3,r7,800962a4 <__gesf2+0x74>
80096268:	1000061e 	bne	r2,zero,80096284 <__gesf2+0x54>
8009626c:	400f003a 	cmpeq	r7,r8,zero
80096270:	1800071e 	bne	r3,zero,80096290 <__gesf2+0x60>
80096274:	3000061e 	bne	r6,zero,80096290 <__gesf2+0x60>
80096278:	0005883a 	mov	r2,zero
8009627c:	40000e1e 	bne	r8,zero,800962b8 <__gesf2+0x88>
80096280:	f800283a 	ret
80096284:	18000a1e 	bne	r3,zero,800962b0 <__gesf2+0x80>
80096288:	30000b26 	beq	r6,zero,800962b8 <__gesf2+0x88>
8009628c:	000f883a 	mov	r7,zero
80096290:	29403fcc 	andi	r5,r5,255
80096294:	38000726 	beq	r7,zero,800962b4 <__gesf2+0x84>
80096298:	28000826 	beq	r5,zero,800962bc <__gesf2+0x8c>
8009629c:	00800044 	movi	r2,1
800962a0:	f800283a 	ret
800962a4:	303ff026 	beq	r6,zero,80096268 <__gesf2+0x38>
800962a8:	00bfff84 	movi	r2,-2
800962ac:	f800283a 	ret
800962b0:	29403fcc 	andi	r5,r5,255
800962b4:	21400526 	beq	r4,r5,800962cc <__gesf2+0x9c>
800962b8:	203ff826 	beq	r4,zero,8009629c <__gesf2+0x6c>
800962bc:	00bfffc4 	movi	r2,-1
800962c0:	f800283a 	ret
800962c4:	403fe626 	beq	r8,zero,80096260 <__gesf2+0x30>
800962c8:	003ff706 	br	800962a8 <__gesf2+0x78>
800962cc:	18bffa16 	blt	r3,r2,800962b8 <__gesf2+0x88>
800962d0:	10c00216 	blt	r2,r3,800962dc <__gesf2+0xac>
800962d4:	323ff836 	bltu	r6,r8,800962b8 <__gesf2+0x88>
800962d8:	4180022e 	bgeu	r8,r6,800962e4 <__gesf2+0xb4>
800962dc:	203fef1e 	bne	r4,zero,8009629c <__gesf2+0x6c>
800962e0:	003ff606 	br	800962bc <__gesf2+0x8c>
800962e4:	0005883a 	mov	r2,zero
800962e8:	f800283a 	ret

800962ec <__lesf2>:
800962ec:	2004d5fa 	srli	r2,r4,23
800962f0:	280cd5fa 	srli	r6,r5,23
800962f4:	00c02034 	movhi	r3,128
800962f8:	18ffffc4 	addi	r3,r3,-1
800962fc:	10803fcc 	andi	r2,r2,255
80096300:	01c03fc4 	movi	r7,255
80096304:	1910703a 	and	r8,r3,r4
80096308:	31803fcc 	andi	r6,r6,255
8009630c:	1946703a 	and	r3,r3,r5
80096310:	2008d7fa 	srli	r4,r4,31
80096314:	280ad7fa 	srli	r5,r5,31
80096318:	11c01b26 	beq	r2,r7,80096388 <__lesf2+0x9c>
8009631c:	01c03fc4 	movi	r7,255
80096320:	31c01126 	beq	r6,r7,80096368 <__lesf2+0x7c>
80096324:	1000071e 	bne	r2,zero,80096344 <__lesf2+0x58>
80096328:	400f003a 	cmpeq	r7,r8,zero
8009632c:	21003fcc 	andi	r4,r4,255
80096330:	3000081e 	bne	r6,zero,80096354 <__lesf2+0x68>
80096334:	1800071e 	bne	r3,zero,80096354 <__lesf2+0x68>
80096338:	0005883a 	mov	r2,zero
8009633c:	40000f1e 	bne	r8,zero,8009637c <__lesf2+0x90>
80096340:	f800283a 	ret
80096344:	21003fcc 	andi	r4,r4,255
80096348:	30000a1e 	bne	r6,zero,80096374 <__lesf2+0x88>
8009634c:	18000b26 	beq	r3,zero,8009637c <__lesf2+0x90>
80096350:	000f883a 	mov	r7,zero
80096354:	29403fcc 	andi	r5,r5,255
80096358:	38000726 	beq	r7,zero,80096378 <__lesf2+0x8c>
8009635c:	28000826 	beq	r5,zero,80096380 <__lesf2+0x94>
80096360:	00800044 	movi	r2,1
80096364:	f800283a 	ret
80096368:	183fee26 	beq	r3,zero,80096324 <__lesf2+0x38>
8009636c:	00800084 	movi	r2,2
80096370:	f800283a 	ret
80096374:	29403fcc 	andi	r5,r5,255
80096378:	21400626 	beq	r4,r5,80096394 <__lesf2+0xa8>
8009637c:	203ff826 	beq	r4,zero,80096360 <__lesf2+0x74>
80096380:	00bfffc4 	movi	r2,-1
80096384:	f800283a 	ret
80096388:	403fe426 	beq	r8,zero,8009631c <__lesf2+0x30>
8009638c:	00800084 	movi	r2,2
80096390:	f800283a 	ret
80096394:	30bff916 	blt	r6,r2,8009637c <__lesf2+0x90>
80096398:	11800216 	blt	r2,r6,800963a4 <__lesf2+0xb8>
8009639c:	1a3ff736 	bltu	r3,r8,8009637c <__lesf2+0x90>
800963a0:	40c0022e 	bgeu	r8,r3,800963ac <__lesf2+0xc0>
800963a4:	203fee1e 	bne	r4,zero,80096360 <__lesf2+0x74>
800963a8:	003ff506 	br	80096380 <__lesf2+0x94>
800963ac:	0005883a 	mov	r2,zero
800963b0:	f800283a 	ret

800963b4 <__adddf3>:
800963b4:	02c00434 	movhi	r11,16
800963b8:	5affffc4 	addi	r11,r11,-1
800963bc:	2806d7fa 	srli	r3,r5,31
800963c0:	2ad4703a 	and	r10,r5,r11
800963c4:	3ad2703a 	and	r9,r7,r11
800963c8:	3804d53a 	srli	r2,r7,20
800963cc:	3018d77a 	srli	r12,r6,29
800963d0:	280ad53a 	srli	r5,r5,20
800963d4:	501490fa 	slli	r10,r10,3
800963d8:	2010d77a 	srli	r8,r4,29
800963dc:	481290fa 	slli	r9,r9,3
800963e0:	380ed7fa 	srli	r7,r7,31
800963e4:	defffb04 	addi	sp,sp,-20
800963e8:	dc800215 	stw	r18,8(sp)
800963ec:	dc400115 	stw	r17,4(sp)
800963f0:	dc000015 	stw	r16,0(sp)
800963f4:	dfc00415 	stw	ra,16(sp)
800963f8:	dcc00315 	stw	r19,12(sp)
800963fc:	1c803fcc 	andi	r18,r3,255
80096400:	2c01ffcc 	andi	r16,r5,2047
80096404:	5210b03a 	or	r8,r10,r8
80096408:	202290fa 	slli	r17,r4,3
8009640c:	1081ffcc 	andi	r2,r2,2047
80096410:	4b12b03a 	or	r9,r9,r12
80096414:	300c90fa 	slli	r6,r6,3
80096418:	91c07526 	beq	r18,r7,800965f0 <__adddf3+0x23c>
8009641c:	8087c83a 	sub	r3,r16,r2
80096420:	00c0ab0e 	bge	zero,r3,800966d0 <__adddf3+0x31c>
80096424:	10002a1e 	bne	r2,zero,800964d0 <__adddf3+0x11c>
80096428:	4984b03a 	or	r2,r9,r6
8009642c:	1000961e 	bne	r2,zero,80096688 <__adddf3+0x2d4>
80096430:	888001cc 	andi	r2,r17,7
80096434:	10000726 	beq	r2,zero,80096454 <__adddf3+0xa0>
80096438:	888003cc 	andi	r2,r17,15
8009643c:	00c00104 	movi	r3,4
80096440:	10c00426 	beq	r2,r3,80096454 <__adddf3+0xa0>
80096444:	88c7883a 	add	r3,r17,r3
80096448:	1c63803a 	cmpltu	r17,r3,r17
8009644c:	4451883a 	add	r8,r8,r17
80096450:	1823883a 	mov	r17,r3
80096454:	4080202c 	andhi	r2,r8,128
80096458:	10005926 	beq	r2,zero,800965c0 <__adddf3+0x20c>
8009645c:	84000044 	addi	r16,r16,1
80096460:	0081ffc4 	movi	r2,2047
80096464:	8080ba26 	beq	r16,r2,80096750 <__adddf3+0x39c>
80096468:	00bfe034 	movhi	r2,65408
8009646c:	10bfffc4 	addi	r2,r2,-1
80096470:	4090703a 	and	r8,r8,r2
80096474:	4004977a 	slli	r2,r8,29
80096478:	4010927a 	slli	r8,r8,9
8009647c:	8822d0fa 	srli	r17,r17,3
80096480:	8401ffcc 	andi	r16,r16,2047
80096484:	4010d33a 	srli	r8,r8,12
80096488:	9007883a 	mov	r3,r18
8009648c:	1444b03a 	or	r2,r2,r17
80096490:	8401ffcc 	andi	r16,r16,2047
80096494:	8020953a 	slli	r16,r16,20
80096498:	18c03fcc 	andi	r3,r3,255
8009649c:	01000434 	movhi	r4,16
800964a0:	213fffc4 	addi	r4,r4,-1
800964a4:	180697fa 	slli	r3,r3,31
800964a8:	4110703a 	and	r8,r8,r4
800964ac:	4410b03a 	or	r8,r8,r16
800964b0:	40c6b03a 	or	r3,r8,r3
800964b4:	dfc00417 	ldw	ra,16(sp)
800964b8:	dcc00317 	ldw	r19,12(sp)
800964bc:	dc800217 	ldw	r18,8(sp)
800964c0:	dc400117 	ldw	r17,4(sp)
800964c4:	dc000017 	ldw	r16,0(sp)
800964c8:	dec00504 	addi	sp,sp,20
800964cc:	f800283a 	ret
800964d0:	0081ffc4 	movi	r2,2047
800964d4:	80bfd626 	beq	r16,r2,80096430 <__adddf3+0x7c>
800964d8:	4a402034 	orhi	r9,r9,128
800964dc:	00800e04 	movi	r2,56
800964e0:	10c09f16 	blt	r2,r3,80096760 <__adddf3+0x3ac>
800964e4:	008007c4 	movi	r2,31
800964e8:	10c0c216 	blt	r2,r3,800967f4 <__adddf3+0x440>
800964ec:	00800804 	movi	r2,32
800964f0:	10c5c83a 	sub	r2,r2,r3
800964f4:	488a983a 	sll	r5,r9,r2
800964f8:	30c8d83a 	srl	r4,r6,r3
800964fc:	3084983a 	sll	r2,r6,r2
80096500:	48c6d83a 	srl	r3,r9,r3
80096504:	290cb03a 	or	r6,r5,r4
80096508:	1004c03a 	cmpne	r2,r2,zero
8009650c:	308cb03a 	or	r6,r6,r2
80096510:	898dc83a 	sub	r6,r17,r6
80096514:	89a3803a 	cmpltu	r17,r17,r6
80096518:	40d1c83a 	sub	r8,r8,r3
8009651c:	4451c83a 	sub	r8,r8,r17
80096520:	3023883a 	mov	r17,r6
80096524:	4080202c 	andhi	r2,r8,128
80096528:	10002326 	beq	r2,zero,800965b8 <__adddf3+0x204>
8009652c:	04c02034 	movhi	r19,128
80096530:	9cffffc4 	addi	r19,r19,-1
80096534:	44e6703a 	and	r19,r8,r19
80096538:	98007626 	beq	r19,zero,80096714 <__adddf3+0x360>
8009653c:	9809883a 	mov	r4,r19
80096540:	0098b600 	call	80098b60 <__clzsi2>
80096544:	10fffe04 	addi	r3,r2,-8
80096548:	010007c4 	movi	r4,31
8009654c:	20c07716 	blt	r4,r3,8009672c <__adddf3+0x378>
80096550:	00800804 	movi	r2,32
80096554:	10c5c83a 	sub	r2,r2,r3
80096558:	8884d83a 	srl	r2,r17,r2
8009655c:	98d0983a 	sll	r8,r19,r3
80096560:	88e2983a 	sll	r17,r17,r3
80096564:	1204b03a 	or	r2,r2,r8
80096568:	1c007416 	blt	r3,r16,8009673c <__adddf3+0x388>
8009656c:	1c21c83a 	sub	r16,r3,r16
80096570:	82000044 	addi	r8,r16,1
80096574:	00c007c4 	movi	r3,31
80096578:	1a009116 	blt	r3,r8,800967c0 <__adddf3+0x40c>
8009657c:	00c00804 	movi	r3,32
80096580:	1a07c83a 	sub	r3,r3,r8
80096584:	8a08d83a 	srl	r4,r17,r8
80096588:	88e2983a 	sll	r17,r17,r3
8009658c:	10c6983a 	sll	r3,r2,r3
80096590:	1210d83a 	srl	r8,r2,r8
80096594:	8804c03a 	cmpne	r2,r17,zero
80096598:	1906b03a 	or	r3,r3,r4
8009659c:	18a2b03a 	or	r17,r3,r2
800965a0:	0021883a 	mov	r16,zero
800965a4:	003fa206 	br	80096430 <__adddf3+0x7c>
800965a8:	1890b03a 	or	r8,r3,r2
800965ac:	40017d26 	beq	r8,zero,80096ba4 <__adddf3+0x7f0>
800965b0:	1011883a 	mov	r8,r2
800965b4:	1823883a 	mov	r17,r3
800965b8:	888001cc 	andi	r2,r17,7
800965bc:	103f9e1e 	bne	r2,zero,80096438 <__adddf3+0x84>
800965c0:	4004977a 	slli	r2,r8,29
800965c4:	8822d0fa 	srli	r17,r17,3
800965c8:	4010d0fa 	srli	r8,r8,3
800965cc:	9007883a 	mov	r3,r18
800965d0:	1444b03a 	or	r2,r2,r17
800965d4:	0101ffc4 	movi	r4,2047
800965d8:	81002426 	beq	r16,r4,8009666c <__adddf3+0x2b8>
800965dc:	8120703a 	and	r16,r16,r4
800965e0:	01000434 	movhi	r4,16
800965e4:	213fffc4 	addi	r4,r4,-1
800965e8:	4110703a 	and	r8,r8,r4
800965ec:	003fa806 	br	80096490 <__adddf3+0xdc>
800965f0:	8089c83a 	sub	r4,r16,r2
800965f4:	01005e0e 	bge	zero,r4,80096770 <__adddf3+0x3bc>
800965f8:	10002b26 	beq	r2,zero,800966a8 <__adddf3+0x2f4>
800965fc:	0081ffc4 	movi	r2,2047
80096600:	80bf8b26 	beq	r16,r2,80096430 <__adddf3+0x7c>
80096604:	4a402034 	orhi	r9,r9,128
80096608:	00800e04 	movi	r2,56
8009660c:	1100a40e 	bge	r2,r4,800968a0 <__adddf3+0x4ec>
80096610:	498cb03a 	or	r6,r9,r6
80096614:	300ac03a 	cmpne	r5,r6,zero
80096618:	0013883a 	mov	r9,zero
8009661c:	2c4b883a 	add	r5,r5,r17
80096620:	2c63803a 	cmpltu	r17,r5,r17
80096624:	4a11883a 	add	r8,r9,r8
80096628:	8a11883a 	add	r8,r17,r8
8009662c:	2823883a 	mov	r17,r5
80096630:	4080202c 	andhi	r2,r8,128
80096634:	103fe026 	beq	r2,zero,800965b8 <__adddf3+0x204>
80096638:	84000044 	addi	r16,r16,1
8009663c:	0081ffc4 	movi	r2,2047
80096640:	8080d226 	beq	r16,r2,8009698c <__adddf3+0x5d8>
80096644:	00bfe034 	movhi	r2,65408
80096648:	10bfffc4 	addi	r2,r2,-1
8009664c:	4090703a 	and	r8,r8,r2
80096650:	880ad07a 	srli	r5,r17,1
80096654:	400897fa 	slli	r4,r8,31
80096658:	88c0004c 	andi	r3,r17,1
8009665c:	28e2b03a 	or	r17,r5,r3
80096660:	4010d07a 	srli	r8,r8,1
80096664:	2462b03a 	or	r17,r4,r17
80096668:	003f7106 	br	80096430 <__adddf3+0x7c>
8009666c:	4088b03a 	or	r4,r8,r2
80096670:	20014526 	beq	r4,zero,80096b88 <__adddf3+0x7d4>
80096674:	01000434 	movhi	r4,16
80096678:	42000234 	orhi	r8,r8,8
8009667c:	213fffc4 	addi	r4,r4,-1
80096680:	4110703a 	and	r8,r8,r4
80096684:	003f8206 	br	80096490 <__adddf3+0xdc>
80096688:	18ffffc4 	addi	r3,r3,-1
8009668c:	1800491e 	bne	r3,zero,800967b4 <__adddf3+0x400>
80096690:	898bc83a 	sub	r5,r17,r6
80096694:	8963803a 	cmpltu	r17,r17,r5
80096698:	4251c83a 	sub	r8,r8,r9
8009669c:	4451c83a 	sub	r8,r8,r17
800966a0:	2823883a 	mov	r17,r5
800966a4:	003f9f06 	br	80096524 <__adddf3+0x170>
800966a8:	4984b03a 	or	r2,r9,r6
800966ac:	103f6026 	beq	r2,zero,80096430 <__adddf3+0x7c>
800966b0:	213fffc4 	addi	r4,r4,-1
800966b4:	2000931e 	bne	r4,zero,80096904 <__adddf3+0x550>
800966b8:	898d883a 	add	r6,r17,r6
800966bc:	3463803a 	cmpltu	r17,r6,r17
800966c0:	4251883a 	add	r8,r8,r9
800966c4:	8a11883a 	add	r8,r17,r8
800966c8:	3023883a 	mov	r17,r6
800966cc:	003fd806 	br	80096630 <__adddf3+0x27c>
800966d0:	1800541e 	bne	r3,zero,80096824 <__adddf3+0x470>
800966d4:	80800044 	addi	r2,r16,1
800966d8:	1081ffcc 	andi	r2,r2,2047
800966dc:	00c00044 	movi	r3,1
800966e0:	1880a00e 	bge	r3,r2,80096964 <__adddf3+0x5b0>
800966e4:	8989c83a 	sub	r4,r17,r6
800966e8:	8905803a 	cmpltu	r2,r17,r4
800966ec:	4267c83a 	sub	r19,r8,r9
800966f0:	98a7c83a 	sub	r19,r19,r2
800966f4:	9880202c 	andhi	r2,r19,128
800966f8:	10006326 	beq	r2,zero,80096888 <__adddf3+0x4d4>
800966fc:	3463c83a 	sub	r17,r6,r17
80096700:	4a07c83a 	sub	r3,r9,r8
80096704:	344d803a 	cmpltu	r6,r6,r17
80096708:	19a7c83a 	sub	r19,r3,r6
8009670c:	3825883a 	mov	r18,r7
80096710:	983f8a1e 	bne	r19,zero,8009653c <__adddf3+0x188>
80096714:	8809883a 	mov	r4,r17
80096718:	0098b600 	call	80098b60 <__clzsi2>
8009671c:	10800804 	addi	r2,r2,32
80096720:	10fffe04 	addi	r3,r2,-8
80096724:	010007c4 	movi	r4,31
80096728:	20ff890e 	bge	r4,r3,80096550 <__adddf3+0x19c>
8009672c:	10bff604 	addi	r2,r2,-40
80096730:	8884983a 	sll	r2,r17,r2
80096734:	0023883a 	mov	r17,zero
80096738:	1c3f8c0e 	bge	r3,r16,8009656c <__adddf3+0x1b8>
8009673c:	023fe034 	movhi	r8,65408
80096740:	423fffc4 	addi	r8,r8,-1
80096744:	80e1c83a 	sub	r16,r16,r3
80096748:	1210703a 	and	r8,r2,r8
8009674c:	003f3806 	br	80096430 <__adddf3+0x7c>
80096750:	9007883a 	mov	r3,r18
80096754:	0011883a 	mov	r8,zero
80096758:	0005883a 	mov	r2,zero
8009675c:	003f4c06 	br	80096490 <__adddf3+0xdc>
80096760:	498cb03a 	or	r6,r9,r6
80096764:	300cc03a 	cmpne	r6,r6,zero
80096768:	0007883a 	mov	r3,zero
8009676c:	003f6806 	br	80096510 <__adddf3+0x15c>
80096770:	20009c1e 	bne	r4,zero,800969e4 <__adddf3+0x630>
80096774:	80800044 	addi	r2,r16,1
80096778:	1141ffcc 	andi	r5,r2,2047
8009677c:	01000044 	movi	r4,1
80096780:	2140670e 	bge	r4,r5,80096920 <__adddf3+0x56c>
80096784:	0101ffc4 	movi	r4,2047
80096788:	11007f26 	beq	r2,r4,80096988 <__adddf3+0x5d4>
8009678c:	898d883a 	add	r6,r17,r6
80096790:	4247883a 	add	r3,r8,r9
80096794:	3451803a 	cmpltu	r8,r6,r17
80096798:	40d1883a 	add	r8,r8,r3
8009679c:	402297fa 	slli	r17,r8,31
800967a0:	300cd07a 	srli	r6,r6,1
800967a4:	4010d07a 	srli	r8,r8,1
800967a8:	1021883a 	mov	r16,r2
800967ac:	89a2b03a 	or	r17,r17,r6
800967b0:	003f1f06 	br	80096430 <__adddf3+0x7c>
800967b4:	0081ffc4 	movi	r2,2047
800967b8:	80bf481e 	bne	r16,r2,800964dc <__adddf3+0x128>
800967bc:	003f1c06 	br	80096430 <__adddf3+0x7c>
800967c0:	843ff844 	addi	r16,r16,-31
800967c4:	01000804 	movi	r4,32
800967c8:	1406d83a 	srl	r3,r2,r16
800967cc:	41005026 	beq	r8,r4,80096910 <__adddf3+0x55c>
800967d0:	01001004 	movi	r4,64
800967d4:	2211c83a 	sub	r8,r4,r8
800967d8:	1204983a 	sll	r2,r2,r8
800967dc:	88a2b03a 	or	r17,r17,r2
800967e0:	8822c03a 	cmpne	r17,r17,zero
800967e4:	1c62b03a 	or	r17,r3,r17
800967e8:	0011883a 	mov	r8,zero
800967ec:	0021883a 	mov	r16,zero
800967f0:	003f7106 	br	800965b8 <__adddf3+0x204>
800967f4:	193ff804 	addi	r4,r3,-32
800967f8:	00800804 	movi	r2,32
800967fc:	4908d83a 	srl	r4,r9,r4
80096800:	18804526 	beq	r3,r2,80096918 <__adddf3+0x564>
80096804:	00801004 	movi	r2,64
80096808:	10c5c83a 	sub	r2,r2,r3
8009680c:	4886983a 	sll	r3,r9,r2
80096810:	198cb03a 	or	r6,r3,r6
80096814:	300cc03a 	cmpne	r6,r6,zero
80096818:	218cb03a 	or	r6,r4,r6
8009681c:	0007883a 	mov	r3,zero
80096820:	003f3b06 	br	80096510 <__adddf3+0x15c>
80096824:	80002a26 	beq	r16,zero,800968d0 <__adddf3+0x51c>
80096828:	0101ffc4 	movi	r4,2047
8009682c:	11006826 	beq	r2,r4,800969d0 <__adddf3+0x61c>
80096830:	00c7c83a 	sub	r3,zero,r3
80096834:	42002034 	orhi	r8,r8,128
80096838:	01000e04 	movi	r4,56
8009683c:	20c07c16 	blt	r4,r3,80096a30 <__adddf3+0x67c>
80096840:	010007c4 	movi	r4,31
80096844:	20c0da16 	blt	r4,r3,80096bb0 <__adddf3+0x7fc>
80096848:	01000804 	movi	r4,32
8009684c:	20c9c83a 	sub	r4,r4,r3
80096850:	4114983a 	sll	r10,r8,r4
80096854:	88cad83a 	srl	r5,r17,r3
80096858:	8908983a 	sll	r4,r17,r4
8009685c:	40c6d83a 	srl	r3,r8,r3
80096860:	5162b03a 	or	r17,r10,r5
80096864:	2008c03a 	cmpne	r4,r4,zero
80096868:	8922b03a 	or	r17,r17,r4
8009686c:	3463c83a 	sub	r17,r6,r17
80096870:	48c7c83a 	sub	r3,r9,r3
80096874:	344d803a 	cmpltu	r6,r6,r17
80096878:	1991c83a 	sub	r8,r3,r6
8009687c:	1021883a 	mov	r16,r2
80096880:	3825883a 	mov	r18,r7
80096884:	003f2706 	br	80096524 <__adddf3+0x170>
80096888:	24d0b03a 	or	r8,r4,r19
8009688c:	40001b1e 	bne	r8,zero,800968fc <__adddf3+0x548>
80096890:	0005883a 	mov	r2,zero
80096894:	0007883a 	mov	r3,zero
80096898:	0021883a 	mov	r16,zero
8009689c:	003f4d06 	br	800965d4 <__adddf3+0x220>
800968a0:	008007c4 	movi	r2,31
800968a4:	11003c16 	blt	r2,r4,80096998 <__adddf3+0x5e4>
800968a8:	00800804 	movi	r2,32
800968ac:	1105c83a 	sub	r2,r2,r4
800968b0:	488e983a 	sll	r7,r9,r2
800968b4:	310ad83a 	srl	r5,r6,r4
800968b8:	3084983a 	sll	r2,r6,r2
800968bc:	4912d83a 	srl	r9,r9,r4
800968c0:	394ab03a 	or	r5,r7,r5
800968c4:	1004c03a 	cmpne	r2,r2,zero
800968c8:	288ab03a 	or	r5,r5,r2
800968cc:	003f5306 	br	8009661c <__adddf3+0x268>
800968d0:	4448b03a 	or	r4,r8,r17
800968d4:	20003e26 	beq	r4,zero,800969d0 <__adddf3+0x61c>
800968d8:	00c6303a 	nor	r3,zero,r3
800968dc:	18003a1e 	bne	r3,zero,800969c8 <__adddf3+0x614>
800968e0:	3463c83a 	sub	r17,r6,r17
800968e4:	4a07c83a 	sub	r3,r9,r8
800968e8:	344d803a 	cmpltu	r6,r6,r17
800968ec:	1991c83a 	sub	r8,r3,r6
800968f0:	1021883a 	mov	r16,r2
800968f4:	3825883a 	mov	r18,r7
800968f8:	003f0a06 	br	80096524 <__adddf3+0x170>
800968fc:	2023883a 	mov	r17,r4
80096900:	003f0d06 	br	80096538 <__adddf3+0x184>
80096904:	0081ffc4 	movi	r2,2047
80096908:	80bf3f1e 	bne	r16,r2,80096608 <__adddf3+0x254>
8009690c:	003ec806 	br	80096430 <__adddf3+0x7c>
80096910:	0005883a 	mov	r2,zero
80096914:	003fb106 	br	800967dc <__adddf3+0x428>
80096918:	0007883a 	mov	r3,zero
8009691c:	003fbc06 	br	80096810 <__adddf3+0x45c>
80096920:	4444b03a 	or	r2,r8,r17
80096924:	8000871e 	bne	r16,zero,80096b44 <__adddf3+0x790>
80096928:	1000ba26 	beq	r2,zero,80096c14 <__adddf3+0x860>
8009692c:	4984b03a 	or	r2,r9,r6
80096930:	103ebf26 	beq	r2,zero,80096430 <__adddf3+0x7c>
80096934:	8985883a 	add	r2,r17,r6
80096938:	4247883a 	add	r3,r8,r9
8009693c:	1451803a 	cmpltu	r8,r2,r17
80096940:	40d1883a 	add	r8,r8,r3
80096944:	40c0202c 	andhi	r3,r8,128
80096948:	1023883a 	mov	r17,r2
8009694c:	183f1a26 	beq	r3,zero,800965b8 <__adddf3+0x204>
80096950:	00bfe034 	movhi	r2,65408
80096954:	10bfffc4 	addi	r2,r2,-1
80096958:	2021883a 	mov	r16,r4
8009695c:	4090703a 	and	r8,r8,r2
80096960:	003eb306 	br	80096430 <__adddf3+0x7c>
80096964:	4444b03a 	or	r2,r8,r17
80096968:	8000291e 	bne	r16,zero,80096a10 <__adddf3+0x65c>
8009696c:	10004b1e 	bne	r2,zero,80096a9c <__adddf3+0x6e8>
80096970:	4990b03a 	or	r8,r9,r6
80096974:	40008b26 	beq	r8,zero,80096ba4 <__adddf3+0x7f0>
80096978:	4811883a 	mov	r8,r9
8009697c:	3023883a 	mov	r17,r6
80096980:	3825883a 	mov	r18,r7
80096984:	003eaa06 	br	80096430 <__adddf3+0x7c>
80096988:	1021883a 	mov	r16,r2
8009698c:	0011883a 	mov	r8,zero
80096990:	0005883a 	mov	r2,zero
80096994:	003f0f06 	br	800965d4 <__adddf3+0x220>
80096998:	217ff804 	addi	r5,r4,-32
8009699c:	00800804 	movi	r2,32
800969a0:	494ad83a 	srl	r5,r9,r5
800969a4:	20807d26 	beq	r4,r2,80096b9c <__adddf3+0x7e8>
800969a8:	00801004 	movi	r2,64
800969ac:	1109c83a 	sub	r4,r2,r4
800969b0:	4912983a 	sll	r9,r9,r4
800969b4:	498cb03a 	or	r6,r9,r6
800969b8:	300cc03a 	cmpne	r6,r6,zero
800969bc:	298ab03a 	or	r5,r5,r6
800969c0:	0013883a 	mov	r9,zero
800969c4:	003f1506 	br	8009661c <__adddf3+0x268>
800969c8:	0101ffc4 	movi	r4,2047
800969cc:	113f9a1e 	bne	r2,r4,80096838 <__adddf3+0x484>
800969d0:	4811883a 	mov	r8,r9
800969d4:	3023883a 	mov	r17,r6
800969d8:	1021883a 	mov	r16,r2
800969dc:	3825883a 	mov	r18,r7
800969e0:	003e9306 	br	80096430 <__adddf3+0x7c>
800969e4:	8000161e 	bne	r16,zero,80096a40 <__adddf3+0x68c>
800969e8:	444ab03a 	or	r5,r8,r17
800969ec:	28005126 	beq	r5,zero,80096b34 <__adddf3+0x780>
800969f0:	0108303a 	nor	r4,zero,r4
800969f4:	20004d1e 	bne	r4,zero,80096b2c <__adddf3+0x778>
800969f8:	89a3883a 	add	r17,r17,r6
800969fc:	4253883a 	add	r9,r8,r9
80096a00:	898d803a 	cmpltu	r6,r17,r6
80096a04:	3251883a 	add	r8,r6,r9
80096a08:	1021883a 	mov	r16,r2
80096a0c:	003f0806 	br	80096630 <__adddf3+0x27c>
80096a10:	1000301e 	bne	r2,zero,80096ad4 <__adddf3+0x720>
80096a14:	4984b03a 	or	r2,r9,r6
80096a18:	10007126 	beq	r2,zero,80096be0 <__adddf3+0x82c>
80096a1c:	4811883a 	mov	r8,r9
80096a20:	3023883a 	mov	r17,r6
80096a24:	3825883a 	mov	r18,r7
80096a28:	0401ffc4 	movi	r16,2047
80096a2c:	003e8006 	br	80096430 <__adddf3+0x7c>
80096a30:	4462b03a 	or	r17,r8,r17
80096a34:	8822c03a 	cmpne	r17,r17,zero
80096a38:	0007883a 	mov	r3,zero
80096a3c:	003f8b06 	br	8009686c <__adddf3+0x4b8>
80096a40:	0141ffc4 	movi	r5,2047
80096a44:	11403b26 	beq	r2,r5,80096b34 <__adddf3+0x780>
80096a48:	0109c83a 	sub	r4,zero,r4
80096a4c:	42002034 	orhi	r8,r8,128
80096a50:	01400e04 	movi	r5,56
80096a54:	29006716 	blt	r5,r4,80096bf4 <__adddf3+0x840>
80096a58:	014007c4 	movi	r5,31
80096a5c:	29007016 	blt	r5,r4,80096c20 <__adddf3+0x86c>
80096a60:	01400804 	movi	r5,32
80096a64:	290bc83a 	sub	r5,r5,r4
80096a68:	4154983a 	sll	r10,r8,r5
80096a6c:	890ed83a 	srl	r7,r17,r4
80096a70:	894a983a 	sll	r5,r17,r5
80096a74:	4108d83a 	srl	r4,r8,r4
80096a78:	51e2b03a 	or	r17,r10,r7
80096a7c:	280ac03a 	cmpne	r5,r5,zero
80096a80:	8962b03a 	or	r17,r17,r5
80096a84:	89a3883a 	add	r17,r17,r6
80096a88:	2253883a 	add	r9,r4,r9
80096a8c:	898d803a 	cmpltu	r6,r17,r6
80096a90:	3251883a 	add	r8,r6,r9
80096a94:	1021883a 	mov	r16,r2
80096a98:	003ee506 	br	80096630 <__adddf3+0x27c>
80096a9c:	4984b03a 	or	r2,r9,r6
80096aa0:	103e6326 	beq	r2,zero,80096430 <__adddf3+0x7c>
80096aa4:	8987c83a 	sub	r3,r17,r6
80096aa8:	88c9803a 	cmpltu	r4,r17,r3
80096aac:	4245c83a 	sub	r2,r8,r9
80096ab0:	1105c83a 	sub	r2,r2,r4
80096ab4:	1100202c 	andhi	r4,r2,128
80096ab8:	203ebb26 	beq	r4,zero,800965a8 <__adddf3+0x1f4>
80096abc:	3463c83a 	sub	r17,r6,r17
80096ac0:	4a07c83a 	sub	r3,r9,r8
80096ac4:	344d803a 	cmpltu	r6,r6,r17
80096ac8:	1991c83a 	sub	r8,r3,r6
80096acc:	3825883a 	mov	r18,r7
80096ad0:	003e5706 	br	80096430 <__adddf3+0x7c>
80096ad4:	4984b03a 	or	r2,r9,r6
80096ad8:	10002e26 	beq	r2,zero,80096b94 <__adddf3+0x7e0>
80096adc:	4004d0fa 	srli	r2,r8,3
80096ae0:	8822d0fa 	srli	r17,r17,3
80096ae4:	4010977a 	slli	r8,r8,29
80096ae8:	10c0022c 	andhi	r3,r2,8
80096aec:	4462b03a 	or	r17,r8,r17
80096af0:	18000826 	beq	r3,zero,80096b14 <__adddf3+0x760>
80096af4:	4808d0fa 	srli	r4,r9,3
80096af8:	20c0022c 	andhi	r3,r4,8
80096afc:	1800051e 	bne	r3,zero,80096b14 <__adddf3+0x760>
80096b00:	300cd0fa 	srli	r6,r6,3
80096b04:	4806977a 	slli	r3,r9,29
80096b08:	2005883a 	mov	r2,r4
80096b0c:	3825883a 	mov	r18,r7
80096b10:	19a2b03a 	or	r17,r3,r6
80096b14:	8810d77a 	srli	r8,r17,29
80096b18:	100490fa 	slli	r2,r2,3
80096b1c:	882290fa 	slli	r17,r17,3
80096b20:	0401ffc4 	movi	r16,2047
80096b24:	4090b03a 	or	r8,r8,r2
80096b28:	003e4106 	br	80096430 <__adddf3+0x7c>
80096b2c:	0141ffc4 	movi	r5,2047
80096b30:	117fc71e 	bne	r2,r5,80096a50 <__adddf3+0x69c>
80096b34:	4811883a 	mov	r8,r9
80096b38:	3023883a 	mov	r17,r6
80096b3c:	1021883a 	mov	r16,r2
80096b40:	003e3b06 	br	80096430 <__adddf3+0x7c>
80096b44:	10002f26 	beq	r2,zero,80096c04 <__adddf3+0x850>
80096b48:	4984b03a 	or	r2,r9,r6
80096b4c:	10001126 	beq	r2,zero,80096b94 <__adddf3+0x7e0>
80096b50:	4004d0fa 	srli	r2,r8,3
80096b54:	8822d0fa 	srli	r17,r17,3
80096b58:	4010977a 	slli	r8,r8,29
80096b5c:	10c0022c 	andhi	r3,r2,8
80096b60:	4462b03a 	or	r17,r8,r17
80096b64:	183feb26 	beq	r3,zero,80096b14 <__adddf3+0x760>
80096b68:	4808d0fa 	srli	r4,r9,3
80096b6c:	20c0022c 	andhi	r3,r4,8
80096b70:	183fe81e 	bne	r3,zero,80096b14 <__adddf3+0x760>
80096b74:	300cd0fa 	srli	r6,r6,3
80096b78:	4806977a 	slli	r3,r9,29
80096b7c:	2005883a 	mov	r2,r4
80096b80:	19a2b03a 	or	r17,r3,r6
80096b84:	003fe306 	br	80096b14 <__adddf3+0x760>
80096b88:	0011883a 	mov	r8,zero
80096b8c:	0005883a 	mov	r2,zero
80096b90:	003e3f06 	br	80096490 <__adddf3+0xdc>
80096b94:	0401ffc4 	movi	r16,2047
80096b98:	003e2506 	br	80096430 <__adddf3+0x7c>
80096b9c:	0013883a 	mov	r9,zero
80096ba0:	003f8406 	br	800969b4 <__adddf3+0x600>
80096ba4:	0005883a 	mov	r2,zero
80096ba8:	0007883a 	mov	r3,zero
80096bac:	003e8906 	br	800965d4 <__adddf3+0x220>
80096bb0:	197ff804 	addi	r5,r3,-32
80096bb4:	01000804 	movi	r4,32
80096bb8:	414ad83a 	srl	r5,r8,r5
80096bbc:	19002426 	beq	r3,r4,80096c50 <__adddf3+0x89c>
80096bc0:	01001004 	movi	r4,64
80096bc4:	20c7c83a 	sub	r3,r4,r3
80096bc8:	40c6983a 	sll	r3,r8,r3
80096bcc:	1c46b03a 	or	r3,r3,r17
80096bd0:	1806c03a 	cmpne	r3,r3,zero
80096bd4:	28e2b03a 	or	r17,r5,r3
80096bd8:	0007883a 	mov	r3,zero
80096bdc:	003f2306 	br	8009686c <__adddf3+0x4b8>
80096be0:	0007883a 	mov	r3,zero
80096be4:	5811883a 	mov	r8,r11
80096be8:	00bfffc4 	movi	r2,-1
80096bec:	0401ffc4 	movi	r16,2047
80096bf0:	003e7806 	br	800965d4 <__adddf3+0x220>
80096bf4:	4462b03a 	or	r17,r8,r17
80096bf8:	8822c03a 	cmpne	r17,r17,zero
80096bfc:	0009883a 	mov	r4,zero
80096c00:	003fa006 	br	80096a84 <__adddf3+0x6d0>
80096c04:	4811883a 	mov	r8,r9
80096c08:	3023883a 	mov	r17,r6
80096c0c:	0401ffc4 	movi	r16,2047
80096c10:	003e0706 	br	80096430 <__adddf3+0x7c>
80096c14:	4811883a 	mov	r8,r9
80096c18:	3023883a 	mov	r17,r6
80096c1c:	003e0406 	br	80096430 <__adddf3+0x7c>
80096c20:	21fff804 	addi	r7,r4,-32
80096c24:	01400804 	movi	r5,32
80096c28:	41ced83a 	srl	r7,r8,r7
80096c2c:	21400a26 	beq	r4,r5,80096c58 <__adddf3+0x8a4>
80096c30:	01401004 	movi	r5,64
80096c34:	2909c83a 	sub	r4,r5,r4
80096c38:	4108983a 	sll	r4,r8,r4
80096c3c:	2448b03a 	or	r4,r4,r17
80096c40:	2008c03a 	cmpne	r4,r4,zero
80096c44:	3922b03a 	or	r17,r7,r4
80096c48:	0009883a 	mov	r4,zero
80096c4c:	003f8d06 	br	80096a84 <__adddf3+0x6d0>
80096c50:	0007883a 	mov	r3,zero
80096c54:	003fdd06 	br	80096bcc <__adddf3+0x818>
80096c58:	0009883a 	mov	r4,zero
80096c5c:	003ff706 	br	80096c3c <__adddf3+0x888>

80096c60 <__divdf3>:
80096c60:	defff204 	addi	sp,sp,-56
80096c64:	dd400915 	stw	r21,36(sp)
80096c68:	282ad53a 	srli	r21,r5,20
80096c6c:	dd000815 	stw	r20,32(sp)
80096c70:	2828d7fa 	srli	r20,r5,31
80096c74:	dc000415 	stw	r16,16(sp)
80096c78:	04000434 	movhi	r16,16
80096c7c:	df000c15 	stw	fp,48(sp)
80096c80:	843fffc4 	addi	r16,r16,-1
80096c84:	dfc00d15 	stw	ra,52(sp)
80096c88:	ddc00b15 	stw	r23,44(sp)
80096c8c:	dd800a15 	stw	r22,40(sp)
80096c90:	dcc00715 	stw	r19,28(sp)
80096c94:	dc800615 	stw	r18,24(sp)
80096c98:	dc400515 	stw	r17,20(sp)
80096c9c:	ad41ffcc 	andi	r21,r21,2047
80096ca0:	2c20703a 	and	r16,r5,r16
80096ca4:	a7003fcc 	andi	fp,r20,255
80096ca8:	a8006126 	beq	r21,zero,80096e30 <__divdf3+0x1d0>
80096cac:	0081ffc4 	movi	r2,2047
80096cb0:	2025883a 	mov	r18,r4
80096cb4:	a8803726 	beq	r21,r2,80096d94 <__divdf3+0x134>
80096cb8:	80800434 	orhi	r2,r16,16
80096cbc:	100490fa 	slli	r2,r2,3
80096cc0:	2020d77a 	srli	r16,r4,29
80096cc4:	202490fa 	slli	r18,r4,3
80096cc8:	ad7f0044 	addi	r21,r21,-1023
80096ccc:	80a0b03a 	or	r16,r16,r2
80096cd0:	0027883a 	mov	r19,zero
80096cd4:	0013883a 	mov	r9,zero
80096cd8:	3804d53a 	srli	r2,r7,20
80096cdc:	382cd7fa 	srli	r22,r7,31
80096ce0:	04400434 	movhi	r17,16
80096ce4:	8c7fffc4 	addi	r17,r17,-1
80096ce8:	1081ffcc 	andi	r2,r2,2047
80096cec:	3011883a 	mov	r8,r6
80096cf0:	3c62703a 	and	r17,r7,r17
80096cf4:	b5c03fcc 	andi	r23,r22,255
80096cf8:	10006c26 	beq	r2,zero,80096eac <__divdf3+0x24c>
80096cfc:	00c1ffc4 	movi	r3,2047
80096d00:	10c06426 	beq	r2,r3,80096e94 <__divdf3+0x234>
80096d04:	88c00434 	orhi	r3,r17,16
80096d08:	180690fa 	slli	r3,r3,3
80096d0c:	3022d77a 	srli	r17,r6,29
80096d10:	301090fa 	slli	r8,r6,3
80096d14:	10bf0044 	addi	r2,r2,-1023
80096d18:	88e2b03a 	or	r17,r17,r3
80096d1c:	000f883a 	mov	r7,zero
80096d20:	a58cf03a 	xor	r6,r20,r22
80096d24:	3cc8b03a 	or	r4,r7,r19
80096d28:	a8abc83a 	sub	r21,r21,r2
80096d2c:	008003c4 	movi	r2,15
80096d30:	3007883a 	mov	r3,r6
80096d34:	34c03fcc 	andi	r19,r6,255
80096d38:	11009036 	bltu	r2,r4,80096f7c <__divdf3+0x31c>
80096d3c:	200890ba 	slli	r4,r4,2
80096d40:	00a00274 	movhi	r2,32777
80096d44:	109b5504 	addi	r2,r2,27988
80096d48:	2089883a 	add	r4,r4,r2
80096d4c:	20800017 	ldw	r2,0(r4)
80096d50:	1000683a 	jmp	r2
80096d54:	80096f7c 	xorhi	zero,r16,9661
80096d58:	80096dcc 	andi	zero,r16,9655
80096d5c:	80096f6c 	andhi	zero,r16,9661
80096d60:	80096dc0 	call	880096dc <__alt_data_end+0x7f0c6dc>
80096d64:	80096f6c 	andhi	zero,r16,9661
80096d68:	80096f40 	call	880096f4 <__alt_data_end+0x7f0c6f4>
80096d6c:	80096f6c 	andhi	zero,r16,9661
80096d70:	80096dc0 	call	880096dc <__alt_data_end+0x7f0c6dc>
80096d74:	80096dcc 	andi	zero,r16,9655
80096d78:	80096dcc 	andi	zero,r16,9655
80096d7c:	80096f40 	call	880096f4 <__alt_data_end+0x7f0c6f4>
80096d80:	80096dc0 	call	880096dc <__alt_data_end+0x7f0c6dc>
80096d84:	80096db0 	cmpltui	zero,r16,9654
80096d88:	80096db0 	cmpltui	zero,r16,9654
80096d8c:	80096db0 	cmpltui	zero,r16,9654
80096d90:	80097260 	cmpeqi	zero,r16,9673
80096d94:	2404b03a 	or	r2,r4,r16
80096d98:	1000661e 	bne	r2,zero,80096f34 <__divdf3+0x2d4>
80096d9c:	04c00204 	movi	r19,8
80096da0:	0021883a 	mov	r16,zero
80096da4:	0025883a 	mov	r18,zero
80096da8:	02400084 	movi	r9,2
80096dac:	003fca06 	br	80096cd8 <__divdf3+0x78>
80096db0:	8023883a 	mov	r17,r16
80096db4:	9011883a 	mov	r8,r18
80096db8:	e02f883a 	mov	r23,fp
80096dbc:	480f883a 	mov	r7,r9
80096dc0:	00800084 	movi	r2,2
80096dc4:	3881311e 	bne	r7,r2,8009728c <__divdf3+0x62c>
80096dc8:	b827883a 	mov	r19,r23
80096dcc:	98c0004c 	andi	r3,r19,1
80096dd0:	0081ffc4 	movi	r2,2047
80096dd4:	000b883a 	mov	r5,zero
80096dd8:	0025883a 	mov	r18,zero
80096ddc:	1004953a 	slli	r2,r2,20
80096de0:	18c03fcc 	andi	r3,r3,255
80096de4:	04400434 	movhi	r17,16
80096de8:	8c7fffc4 	addi	r17,r17,-1
80096dec:	180697fa 	slli	r3,r3,31
80096df0:	2c4a703a 	and	r5,r5,r17
80096df4:	288ab03a 	or	r5,r5,r2
80096df8:	28c6b03a 	or	r3,r5,r3
80096dfc:	9005883a 	mov	r2,r18
80096e00:	dfc00d17 	ldw	ra,52(sp)
80096e04:	df000c17 	ldw	fp,48(sp)
80096e08:	ddc00b17 	ldw	r23,44(sp)
80096e0c:	dd800a17 	ldw	r22,40(sp)
80096e10:	dd400917 	ldw	r21,36(sp)
80096e14:	dd000817 	ldw	r20,32(sp)
80096e18:	dcc00717 	ldw	r19,28(sp)
80096e1c:	dc800617 	ldw	r18,24(sp)
80096e20:	dc400517 	ldw	r17,20(sp)
80096e24:	dc000417 	ldw	r16,16(sp)
80096e28:	dec00e04 	addi	sp,sp,56
80096e2c:	f800283a 	ret
80096e30:	2404b03a 	or	r2,r4,r16
80096e34:	2027883a 	mov	r19,r4
80096e38:	10003926 	beq	r2,zero,80096f20 <__divdf3+0x2c0>
80096e3c:	80012e26 	beq	r16,zero,800972f8 <__divdf3+0x698>
80096e40:	8009883a 	mov	r4,r16
80096e44:	d9800315 	stw	r6,12(sp)
80096e48:	d9c00215 	stw	r7,8(sp)
80096e4c:	0098b600 	call	80098b60 <__clzsi2>
80096e50:	d9800317 	ldw	r6,12(sp)
80096e54:	d9c00217 	ldw	r7,8(sp)
80096e58:	113ffd44 	addi	r4,r2,-11
80096e5c:	00c00704 	movi	r3,28
80096e60:	19012116 	blt	r3,r4,800972e8 <__divdf3+0x688>
80096e64:	00c00744 	movi	r3,29
80096e68:	147ffe04 	addi	r17,r2,-8
80096e6c:	1907c83a 	sub	r3,r3,r4
80096e70:	8460983a 	sll	r16,r16,r17
80096e74:	98c6d83a 	srl	r3,r19,r3
80096e78:	9c64983a 	sll	r18,r19,r17
80096e7c:	1c20b03a 	or	r16,r3,r16
80096e80:	1080fcc4 	addi	r2,r2,1011
80096e84:	00abc83a 	sub	r21,zero,r2
80096e88:	0027883a 	mov	r19,zero
80096e8c:	0013883a 	mov	r9,zero
80096e90:	003f9106 	br	80096cd8 <__divdf3+0x78>
80096e94:	3446b03a 	or	r3,r6,r17
80096e98:	18001f1e 	bne	r3,zero,80096f18 <__divdf3+0x2b8>
80096e9c:	0023883a 	mov	r17,zero
80096ea0:	0011883a 	mov	r8,zero
80096ea4:	01c00084 	movi	r7,2
80096ea8:	003f9d06 	br	80096d20 <__divdf3+0xc0>
80096eac:	3446b03a 	or	r3,r6,r17
80096eb0:	18001526 	beq	r3,zero,80096f08 <__divdf3+0x2a8>
80096eb4:	88011b26 	beq	r17,zero,80097324 <__divdf3+0x6c4>
80096eb8:	8809883a 	mov	r4,r17
80096ebc:	d9800315 	stw	r6,12(sp)
80096ec0:	da400115 	stw	r9,4(sp)
80096ec4:	0098b600 	call	80098b60 <__clzsi2>
80096ec8:	d9800317 	ldw	r6,12(sp)
80096ecc:	da400117 	ldw	r9,4(sp)
80096ed0:	113ffd44 	addi	r4,r2,-11
80096ed4:	00c00704 	movi	r3,28
80096ed8:	19010e16 	blt	r3,r4,80097314 <__divdf3+0x6b4>
80096edc:	00c00744 	movi	r3,29
80096ee0:	123ffe04 	addi	r8,r2,-8
80096ee4:	1907c83a 	sub	r3,r3,r4
80096ee8:	8a22983a 	sll	r17,r17,r8
80096eec:	30c6d83a 	srl	r3,r6,r3
80096ef0:	3210983a 	sll	r8,r6,r8
80096ef4:	1c62b03a 	or	r17,r3,r17
80096ef8:	1080fcc4 	addi	r2,r2,1011
80096efc:	0085c83a 	sub	r2,zero,r2
80096f00:	000f883a 	mov	r7,zero
80096f04:	003f8606 	br	80096d20 <__divdf3+0xc0>
80096f08:	0023883a 	mov	r17,zero
80096f0c:	0011883a 	mov	r8,zero
80096f10:	01c00044 	movi	r7,1
80096f14:	003f8206 	br	80096d20 <__divdf3+0xc0>
80096f18:	01c000c4 	movi	r7,3
80096f1c:	003f8006 	br	80096d20 <__divdf3+0xc0>
80096f20:	04c00104 	movi	r19,4
80096f24:	0021883a 	mov	r16,zero
80096f28:	0025883a 	mov	r18,zero
80096f2c:	02400044 	movi	r9,1
80096f30:	003f6906 	br	80096cd8 <__divdf3+0x78>
80096f34:	04c00304 	movi	r19,12
80096f38:	024000c4 	movi	r9,3
80096f3c:	003f6606 	br	80096cd8 <__divdf3+0x78>
80096f40:	01400434 	movhi	r5,16
80096f44:	0007883a 	mov	r3,zero
80096f48:	297fffc4 	addi	r5,r5,-1
80096f4c:	04bfffc4 	movi	r18,-1
80096f50:	0081ffc4 	movi	r2,2047
80096f54:	003fa106 	br	80096ddc <__divdf3+0x17c>
80096f58:	00c00044 	movi	r3,1
80096f5c:	1887c83a 	sub	r3,r3,r2
80096f60:	01000e04 	movi	r4,56
80096f64:	20c1210e 	bge	r4,r3,800973ec <__divdf3+0x78c>
80096f68:	98c0004c 	andi	r3,r19,1
80096f6c:	0005883a 	mov	r2,zero
80096f70:	000b883a 	mov	r5,zero
80096f74:	0025883a 	mov	r18,zero
80096f78:	003f9806 	br	80096ddc <__divdf3+0x17c>
80096f7c:	8c00fd36 	bltu	r17,r16,80097374 <__divdf3+0x714>
80096f80:	8440fb26 	beq	r16,r17,80097370 <__divdf3+0x710>
80096f84:	8007883a 	mov	r3,r16
80096f88:	ad7fffc4 	addi	r21,r21,-1
80096f8c:	0021883a 	mov	r16,zero
80096f90:	4004d63a 	srli	r2,r8,24
80096f94:	8822923a 	slli	r17,r17,8
80096f98:	1809883a 	mov	r4,r3
80096f9c:	402c923a 	slli	r22,r8,8
80096fa0:	88b8b03a 	or	fp,r17,r2
80096fa4:	e028d43a 	srli	r20,fp,16
80096fa8:	d8c00015 	stw	r3,0(sp)
80096fac:	e5ffffcc 	andi	r23,fp,65535
80096fb0:	a00b883a 	mov	r5,r20
80096fb4:	00823400 	call	80082340 <__udivsi3>
80096fb8:	d8c00017 	ldw	r3,0(sp)
80096fbc:	a00b883a 	mov	r5,r20
80096fc0:	d8800315 	stw	r2,12(sp)
80096fc4:	1809883a 	mov	r4,r3
80096fc8:	00823a40 	call	800823a4 <__umodsi3>
80096fcc:	d9800317 	ldw	r6,12(sp)
80096fd0:	1006943a 	slli	r3,r2,16
80096fd4:	9004d43a 	srli	r2,r18,16
80096fd8:	b9a3383a 	mul	r17,r23,r6
80096fdc:	10c4b03a 	or	r2,r2,r3
80096fe0:	1440062e 	bgeu	r2,r17,80096ffc <__divdf3+0x39c>
80096fe4:	1705883a 	add	r2,r2,fp
80096fe8:	30ffffc4 	addi	r3,r6,-1
80096fec:	1700ee36 	bltu	r2,fp,800973a8 <__divdf3+0x748>
80096ff0:	1440ed2e 	bgeu	r2,r17,800973a8 <__divdf3+0x748>
80096ff4:	31bfff84 	addi	r6,r6,-2
80096ff8:	1705883a 	add	r2,r2,fp
80096ffc:	1463c83a 	sub	r17,r2,r17
80097000:	a00b883a 	mov	r5,r20
80097004:	8809883a 	mov	r4,r17
80097008:	d9800315 	stw	r6,12(sp)
8009700c:	00823400 	call	80082340 <__udivsi3>
80097010:	a00b883a 	mov	r5,r20
80097014:	8809883a 	mov	r4,r17
80097018:	d8800215 	stw	r2,8(sp)
8009701c:	00823a40 	call	800823a4 <__umodsi3>
80097020:	d9c00217 	ldw	r7,8(sp)
80097024:	1004943a 	slli	r2,r2,16
80097028:	94bfffcc 	andi	r18,r18,65535
8009702c:	b9d1383a 	mul	r8,r23,r7
80097030:	90a4b03a 	or	r18,r18,r2
80097034:	d9800317 	ldw	r6,12(sp)
80097038:	9200062e 	bgeu	r18,r8,80097054 <__divdf3+0x3f4>
8009703c:	9725883a 	add	r18,r18,fp
80097040:	38bfffc4 	addi	r2,r7,-1
80097044:	9700d636 	bltu	r18,fp,800973a0 <__divdf3+0x740>
80097048:	9200d52e 	bgeu	r18,r8,800973a0 <__divdf3+0x740>
8009704c:	39ffff84 	addi	r7,r7,-2
80097050:	9725883a 	add	r18,r18,fp
80097054:	3004943a 	slli	r2,r6,16
80097058:	b012d43a 	srli	r9,r22,16
8009705c:	b1bfffcc 	andi	r6,r22,65535
80097060:	11e2b03a 	or	r17,r2,r7
80097064:	8806d43a 	srli	r3,r17,16
80097068:	893fffcc 	andi	r4,r17,65535
8009706c:	218b383a 	mul	r5,r4,r6
80097070:	30c5383a 	mul	r2,r6,r3
80097074:	2249383a 	mul	r4,r4,r9
80097078:	280ed43a 	srli	r7,r5,16
8009707c:	9225c83a 	sub	r18,r18,r8
80097080:	2089883a 	add	r4,r4,r2
80097084:	3909883a 	add	r4,r7,r4
80097088:	1a47383a 	mul	r3,r3,r9
8009708c:	2080022e 	bgeu	r4,r2,80097098 <__divdf3+0x438>
80097090:	00800074 	movhi	r2,1
80097094:	1887883a 	add	r3,r3,r2
80097098:	2004d43a 	srli	r2,r4,16
8009709c:	2008943a 	slli	r4,r4,16
800970a0:	297fffcc 	andi	r5,r5,65535
800970a4:	10c7883a 	add	r3,r2,r3
800970a8:	2149883a 	add	r4,r4,r5
800970ac:	90c0a536 	bltu	r18,r3,80097344 <__divdf3+0x6e4>
800970b0:	90c0bf26 	beq	r18,r3,800973b0 <__divdf3+0x750>
800970b4:	90c7c83a 	sub	r3,r18,r3
800970b8:	810fc83a 	sub	r7,r16,r4
800970bc:	81e5803a 	cmpltu	r18,r16,r7
800970c0:	1ca5c83a 	sub	r18,r3,r18
800970c4:	e480c126 	beq	fp,r18,800973cc <__divdf3+0x76c>
800970c8:	a00b883a 	mov	r5,r20
800970cc:	9009883a 	mov	r4,r18
800970d0:	d9800315 	stw	r6,12(sp)
800970d4:	d9c00215 	stw	r7,8(sp)
800970d8:	da400115 	stw	r9,4(sp)
800970dc:	00823400 	call	80082340 <__udivsi3>
800970e0:	a00b883a 	mov	r5,r20
800970e4:	9009883a 	mov	r4,r18
800970e8:	d8800015 	stw	r2,0(sp)
800970ec:	00823a40 	call	800823a4 <__umodsi3>
800970f0:	d9c00217 	ldw	r7,8(sp)
800970f4:	da000017 	ldw	r8,0(sp)
800970f8:	1006943a 	slli	r3,r2,16
800970fc:	3804d43a 	srli	r2,r7,16
80097100:	ba21383a 	mul	r16,r23,r8
80097104:	d9800317 	ldw	r6,12(sp)
80097108:	10c4b03a 	or	r2,r2,r3
8009710c:	da400117 	ldw	r9,4(sp)
80097110:	1400062e 	bgeu	r2,r16,8009712c <__divdf3+0x4cc>
80097114:	1705883a 	add	r2,r2,fp
80097118:	40ffffc4 	addi	r3,r8,-1
8009711c:	1700ad36 	bltu	r2,fp,800973d4 <__divdf3+0x774>
80097120:	1400ac2e 	bgeu	r2,r16,800973d4 <__divdf3+0x774>
80097124:	423fff84 	addi	r8,r8,-2
80097128:	1705883a 	add	r2,r2,fp
8009712c:	1421c83a 	sub	r16,r2,r16
80097130:	a00b883a 	mov	r5,r20
80097134:	8009883a 	mov	r4,r16
80097138:	d9800315 	stw	r6,12(sp)
8009713c:	d9c00215 	stw	r7,8(sp)
80097140:	da000015 	stw	r8,0(sp)
80097144:	da400115 	stw	r9,4(sp)
80097148:	00823400 	call	80082340 <__udivsi3>
8009714c:	8009883a 	mov	r4,r16
80097150:	a00b883a 	mov	r5,r20
80097154:	1025883a 	mov	r18,r2
80097158:	00823a40 	call	800823a4 <__umodsi3>
8009715c:	d9c00217 	ldw	r7,8(sp)
80097160:	1004943a 	slli	r2,r2,16
80097164:	bcaf383a 	mul	r23,r23,r18
80097168:	393fffcc 	andi	r4,r7,65535
8009716c:	2088b03a 	or	r4,r4,r2
80097170:	d9800317 	ldw	r6,12(sp)
80097174:	da000017 	ldw	r8,0(sp)
80097178:	da400117 	ldw	r9,4(sp)
8009717c:	25c0062e 	bgeu	r4,r23,80097198 <__divdf3+0x538>
80097180:	2709883a 	add	r4,r4,fp
80097184:	90bfffc4 	addi	r2,r18,-1
80097188:	27009436 	bltu	r4,fp,800973dc <__divdf3+0x77c>
8009718c:	25c0932e 	bgeu	r4,r23,800973dc <__divdf3+0x77c>
80097190:	94bfff84 	addi	r18,r18,-2
80097194:	2709883a 	add	r4,r4,fp
80097198:	4004943a 	slli	r2,r8,16
8009719c:	25efc83a 	sub	r23,r4,r23
800971a0:	1490b03a 	or	r8,r2,r18
800971a4:	4008d43a 	srli	r4,r8,16
800971a8:	40ffffcc 	andi	r3,r8,65535
800971ac:	30c5383a 	mul	r2,r6,r3
800971b0:	1a47383a 	mul	r3,r3,r9
800971b4:	310d383a 	mul	r6,r6,r4
800971b8:	100ad43a 	srli	r5,r2,16
800971bc:	4913383a 	mul	r9,r9,r4
800971c0:	1987883a 	add	r3,r3,r6
800971c4:	28c7883a 	add	r3,r5,r3
800971c8:	1980022e 	bgeu	r3,r6,800971d4 <__divdf3+0x574>
800971cc:	01000074 	movhi	r4,1
800971d0:	4913883a 	add	r9,r9,r4
800971d4:	1808d43a 	srli	r4,r3,16
800971d8:	1806943a 	slli	r3,r3,16
800971dc:	10bfffcc 	andi	r2,r2,65535
800971e0:	2253883a 	add	r9,r4,r9
800971e4:	1887883a 	add	r3,r3,r2
800971e8:	ba403836 	bltu	r23,r9,800972cc <__divdf3+0x66c>
800971ec:	ba403626 	beq	r23,r9,800972c8 <__divdf3+0x668>
800971f0:	42000054 	ori	r8,r8,1
800971f4:	a880ffc4 	addi	r2,r21,1023
800971f8:	00bf570e 	bge	zero,r2,80096f58 <__divdf3+0x2f8>
800971fc:	40c001cc 	andi	r3,r8,7
80097200:	18000726 	beq	r3,zero,80097220 <__divdf3+0x5c0>
80097204:	40c003cc 	andi	r3,r8,15
80097208:	01000104 	movi	r4,4
8009720c:	19000426 	beq	r3,r4,80097220 <__divdf3+0x5c0>
80097210:	4107883a 	add	r3,r8,r4
80097214:	1a11803a 	cmpltu	r8,r3,r8
80097218:	8a23883a 	add	r17,r17,r8
8009721c:	1811883a 	mov	r8,r3
80097220:	88c0402c 	andhi	r3,r17,256
80097224:	18000426 	beq	r3,zero,80097238 <__divdf3+0x5d8>
80097228:	00ffc034 	movhi	r3,65280
8009722c:	18ffffc4 	addi	r3,r3,-1
80097230:	a8810004 	addi	r2,r21,1024
80097234:	88e2703a 	and	r17,r17,r3
80097238:	00c1ff84 	movi	r3,2046
8009723c:	18bee316 	blt	r3,r2,80096dcc <__divdf3+0x16c>
80097240:	8824977a 	slli	r18,r17,29
80097244:	4010d0fa 	srli	r8,r8,3
80097248:	8822927a 	slli	r17,r17,9
8009724c:	1081ffcc 	andi	r2,r2,2047
80097250:	9224b03a 	or	r18,r18,r8
80097254:	880ad33a 	srli	r5,r17,12
80097258:	98c0004c 	andi	r3,r19,1
8009725c:	003edf06 	br	80096ddc <__divdf3+0x17c>
80097260:	8080022c 	andhi	r2,r16,8
80097264:	10001226 	beq	r2,zero,800972b0 <__divdf3+0x650>
80097268:	8880022c 	andhi	r2,r17,8
8009726c:	1000101e 	bne	r2,zero,800972b0 <__divdf3+0x650>
80097270:	00800434 	movhi	r2,16
80097274:	89400234 	orhi	r5,r17,8
80097278:	10bfffc4 	addi	r2,r2,-1
8009727c:	b007883a 	mov	r3,r22
80097280:	288a703a 	and	r5,r5,r2
80097284:	4025883a 	mov	r18,r8
80097288:	003f3106 	br	80096f50 <__divdf3+0x2f0>
8009728c:	008000c4 	movi	r2,3
80097290:	3880a626 	beq	r7,r2,8009752c <__divdf3+0x8cc>
80097294:	00800044 	movi	r2,1
80097298:	3880521e 	bne	r7,r2,800973e4 <__divdf3+0x784>
8009729c:	b807883a 	mov	r3,r23
800972a0:	0005883a 	mov	r2,zero
800972a4:	000b883a 	mov	r5,zero
800972a8:	0025883a 	mov	r18,zero
800972ac:	003ecb06 	br	80096ddc <__divdf3+0x17c>
800972b0:	00800434 	movhi	r2,16
800972b4:	81400234 	orhi	r5,r16,8
800972b8:	10bfffc4 	addi	r2,r2,-1
800972bc:	a007883a 	mov	r3,r20
800972c0:	288a703a 	and	r5,r5,r2
800972c4:	003f2206 	br	80096f50 <__divdf3+0x2f0>
800972c8:	183fca26 	beq	r3,zero,800971f4 <__divdf3+0x594>
800972cc:	e5ef883a 	add	r23,fp,r23
800972d0:	40bfffc4 	addi	r2,r8,-1
800972d4:	bf00392e 	bgeu	r23,fp,800973bc <__divdf3+0x75c>
800972d8:	1011883a 	mov	r8,r2
800972dc:	ba7fc41e 	bne	r23,r9,800971f0 <__divdf3+0x590>
800972e0:	b0ffc31e 	bne	r22,r3,800971f0 <__divdf3+0x590>
800972e4:	003fc306 	br	800971f4 <__divdf3+0x594>
800972e8:	143ff604 	addi	r16,r2,-40
800972ec:	9c20983a 	sll	r16,r19,r16
800972f0:	0025883a 	mov	r18,zero
800972f4:	003ee206 	br	80096e80 <__divdf3+0x220>
800972f8:	d9800315 	stw	r6,12(sp)
800972fc:	d9c00215 	stw	r7,8(sp)
80097300:	0098b600 	call	80098b60 <__clzsi2>
80097304:	10800804 	addi	r2,r2,32
80097308:	d9c00217 	ldw	r7,8(sp)
8009730c:	d9800317 	ldw	r6,12(sp)
80097310:	003ed106 	br	80096e58 <__divdf3+0x1f8>
80097314:	147ff604 	addi	r17,r2,-40
80097318:	3462983a 	sll	r17,r6,r17
8009731c:	0011883a 	mov	r8,zero
80097320:	003ef506 	br	80096ef8 <__divdf3+0x298>
80097324:	3009883a 	mov	r4,r6
80097328:	d9800315 	stw	r6,12(sp)
8009732c:	da400115 	stw	r9,4(sp)
80097330:	0098b600 	call	80098b60 <__clzsi2>
80097334:	10800804 	addi	r2,r2,32
80097338:	da400117 	ldw	r9,4(sp)
8009733c:	d9800317 	ldw	r6,12(sp)
80097340:	003ee306 	br	80096ed0 <__divdf3+0x270>
80097344:	85a1883a 	add	r16,r16,r22
80097348:	8585803a 	cmpltu	r2,r16,r22
8009734c:	1705883a 	add	r2,r2,fp
80097350:	14a5883a 	add	r18,r2,r18
80097354:	88bfffc4 	addi	r2,r17,-1
80097358:	e4800c2e 	bgeu	fp,r18,8009738c <__divdf3+0x72c>
8009735c:	90c03e36 	bltu	r18,r3,80097458 <__divdf3+0x7f8>
80097360:	1c806926 	beq	r3,r18,80097508 <__divdf3+0x8a8>
80097364:	90c7c83a 	sub	r3,r18,r3
80097368:	1023883a 	mov	r17,r2
8009736c:	003f5206 	br	800970b8 <__divdf3+0x458>
80097370:	923f0436 	bltu	r18,r8,80096f84 <__divdf3+0x324>
80097374:	800897fa 	slli	r4,r16,31
80097378:	9004d07a 	srli	r2,r18,1
8009737c:	8006d07a 	srli	r3,r16,1
80097380:	902097fa 	slli	r16,r18,31
80097384:	20a4b03a 	or	r18,r4,r2
80097388:	003f0106 	br	80096f90 <__divdf3+0x330>
8009738c:	e4bff51e 	bne	fp,r18,80097364 <__divdf3+0x704>
80097390:	85bff22e 	bgeu	r16,r22,8009735c <__divdf3+0x6fc>
80097394:	e0c7c83a 	sub	r3,fp,r3
80097398:	1023883a 	mov	r17,r2
8009739c:	003f4606 	br	800970b8 <__divdf3+0x458>
800973a0:	100f883a 	mov	r7,r2
800973a4:	003f2b06 	br	80097054 <__divdf3+0x3f4>
800973a8:	180d883a 	mov	r6,r3
800973ac:	003f1306 	br	80096ffc <__divdf3+0x39c>
800973b0:	813fe436 	bltu	r16,r4,80097344 <__divdf3+0x6e4>
800973b4:	0007883a 	mov	r3,zero
800973b8:	003f3f06 	br	800970b8 <__divdf3+0x458>
800973bc:	ba402c36 	bltu	r23,r9,80097470 <__divdf3+0x810>
800973c0:	4dc05426 	beq	r9,r23,80097514 <__divdf3+0x8b4>
800973c4:	1011883a 	mov	r8,r2
800973c8:	003f8906 	br	800971f0 <__divdf3+0x590>
800973cc:	023fffc4 	movi	r8,-1
800973d0:	003f8806 	br	800971f4 <__divdf3+0x594>
800973d4:	1811883a 	mov	r8,r3
800973d8:	003f5406 	br	8009712c <__divdf3+0x4cc>
800973dc:	1025883a 	mov	r18,r2
800973e0:	003f6d06 	br	80097198 <__divdf3+0x538>
800973e4:	b827883a 	mov	r19,r23
800973e8:	003f8206 	br	800971f4 <__divdf3+0x594>
800973ec:	010007c4 	movi	r4,31
800973f0:	20c02616 	blt	r4,r3,8009748c <__divdf3+0x82c>
800973f4:	00800804 	movi	r2,32
800973f8:	10c5c83a 	sub	r2,r2,r3
800973fc:	888a983a 	sll	r5,r17,r2
80097400:	40c8d83a 	srl	r4,r8,r3
80097404:	4084983a 	sll	r2,r8,r2
80097408:	88e2d83a 	srl	r17,r17,r3
8009740c:	2906b03a 	or	r3,r5,r4
80097410:	1004c03a 	cmpne	r2,r2,zero
80097414:	1886b03a 	or	r3,r3,r2
80097418:	188001cc 	andi	r2,r3,7
8009741c:	10000726 	beq	r2,zero,8009743c <__divdf3+0x7dc>
80097420:	188003cc 	andi	r2,r3,15
80097424:	01000104 	movi	r4,4
80097428:	11000426 	beq	r2,r4,8009743c <__divdf3+0x7dc>
8009742c:	1805883a 	mov	r2,r3
80097430:	10c00104 	addi	r3,r2,4
80097434:	1885803a 	cmpltu	r2,r3,r2
80097438:	88a3883a 	add	r17,r17,r2
8009743c:	8880202c 	andhi	r2,r17,128
80097440:	10002726 	beq	r2,zero,800974e0 <__divdf3+0x880>
80097444:	98c0004c 	andi	r3,r19,1
80097448:	00800044 	movi	r2,1
8009744c:	000b883a 	mov	r5,zero
80097450:	0025883a 	mov	r18,zero
80097454:	003e6106 	br	80096ddc <__divdf3+0x17c>
80097458:	85a1883a 	add	r16,r16,r22
8009745c:	8585803a 	cmpltu	r2,r16,r22
80097460:	1705883a 	add	r2,r2,fp
80097464:	14a5883a 	add	r18,r2,r18
80097468:	8c7fff84 	addi	r17,r17,-2
8009746c:	003f1106 	br	800970b4 <__divdf3+0x454>
80097470:	b589883a 	add	r4,r22,r22
80097474:	25ad803a 	cmpltu	r22,r4,r22
80097478:	b739883a 	add	fp,r22,fp
8009747c:	40bfff84 	addi	r2,r8,-2
80097480:	bf2f883a 	add	r23,r23,fp
80097484:	202d883a 	mov	r22,r4
80097488:	003f9306 	br	800972d8 <__divdf3+0x678>
8009748c:	013ff844 	movi	r4,-31
80097490:	2085c83a 	sub	r2,r4,r2
80097494:	8888d83a 	srl	r4,r17,r2
80097498:	00800804 	movi	r2,32
8009749c:	18802126 	beq	r3,r2,80097524 <__divdf3+0x8c4>
800974a0:	00801004 	movi	r2,64
800974a4:	10c5c83a 	sub	r2,r2,r3
800974a8:	8884983a 	sll	r2,r17,r2
800974ac:	1204b03a 	or	r2,r2,r8
800974b0:	1004c03a 	cmpne	r2,r2,zero
800974b4:	2084b03a 	or	r2,r4,r2
800974b8:	144001cc 	andi	r17,r2,7
800974bc:	88000d1e 	bne	r17,zero,800974f4 <__divdf3+0x894>
800974c0:	000b883a 	mov	r5,zero
800974c4:	1024d0fa 	srli	r18,r2,3
800974c8:	98c0004c 	andi	r3,r19,1
800974cc:	0005883a 	mov	r2,zero
800974d0:	9464b03a 	or	r18,r18,r17
800974d4:	003e4106 	br	80096ddc <__divdf3+0x17c>
800974d8:	1007883a 	mov	r3,r2
800974dc:	0023883a 	mov	r17,zero
800974e0:	880a927a 	slli	r5,r17,9
800974e4:	1805883a 	mov	r2,r3
800974e8:	8822977a 	slli	r17,r17,29
800974ec:	280ad33a 	srli	r5,r5,12
800974f0:	003ff406 	br	800974c4 <__divdf3+0x864>
800974f4:	10c003cc 	andi	r3,r2,15
800974f8:	01000104 	movi	r4,4
800974fc:	193ff626 	beq	r3,r4,800974d8 <__divdf3+0x878>
80097500:	0023883a 	mov	r17,zero
80097504:	003fca06 	br	80097430 <__divdf3+0x7d0>
80097508:	813fd336 	bltu	r16,r4,80097458 <__divdf3+0x7f8>
8009750c:	1023883a 	mov	r17,r2
80097510:	003fa806 	br	800973b4 <__divdf3+0x754>
80097514:	b0ffd636 	bltu	r22,r3,80097470 <__divdf3+0x810>
80097518:	1011883a 	mov	r8,r2
8009751c:	b0ff341e 	bne	r22,r3,800971f0 <__divdf3+0x590>
80097520:	003f3406 	br	800971f4 <__divdf3+0x594>
80097524:	0005883a 	mov	r2,zero
80097528:	003fe006 	br	800974ac <__divdf3+0x84c>
8009752c:	00800434 	movhi	r2,16
80097530:	89400234 	orhi	r5,r17,8
80097534:	10bfffc4 	addi	r2,r2,-1
80097538:	b807883a 	mov	r3,r23
8009753c:	288a703a 	and	r5,r5,r2
80097540:	4025883a 	mov	r18,r8
80097544:	003e8206 	br	80096f50 <__divdf3+0x2f0>

80097548 <__eqdf2>:
80097548:	2804d53a 	srli	r2,r5,20
8009754c:	3806d53a 	srli	r3,r7,20
80097550:	02000434 	movhi	r8,16
80097554:	423fffc4 	addi	r8,r8,-1
80097558:	1081ffcc 	andi	r2,r2,2047
8009755c:	0281ffc4 	movi	r10,2047
80097560:	2a12703a 	and	r9,r5,r8
80097564:	18c1ffcc 	andi	r3,r3,2047
80097568:	3a10703a 	and	r8,r7,r8
8009756c:	280ad7fa 	srli	r5,r5,31
80097570:	380ed7fa 	srli	r7,r7,31
80097574:	12801026 	beq	r2,r10,800975b8 <__eqdf2+0x70>
80097578:	0281ffc4 	movi	r10,2047
8009757c:	1a800a26 	beq	r3,r10,800975a8 <__eqdf2+0x60>
80097580:	10c00226 	beq	r2,r3,8009758c <__eqdf2+0x44>
80097584:	00800044 	movi	r2,1
80097588:	f800283a 	ret
8009758c:	4a3ffd1e 	bne	r9,r8,80097584 <__eqdf2+0x3c>
80097590:	21bffc1e 	bne	r4,r6,80097584 <__eqdf2+0x3c>
80097594:	29c00c26 	beq	r5,r7,800975c8 <__eqdf2+0x80>
80097598:	103ffa1e 	bne	r2,zero,80097584 <__eqdf2+0x3c>
8009759c:	2244b03a 	or	r2,r4,r9
800975a0:	1004c03a 	cmpne	r2,r2,zero
800975a4:	f800283a 	ret
800975a8:	3214b03a 	or	r10,r6,r8
800975ac:	503ff426 	beq	r10,zero,80097580 <__eqdf2+0x38>
800975b0:	00800044 	movi	r2,1
800975b4:	f800283a 	ret
800975b8:	2254b03a 	or	r10,r4,r9
800975bc:	503fee26 	beq	r10,zero,80097578 <__eqdf2+0x30>
800975c0:	00800044 	movi	r2,1
800975c4:	f800283a 	ret
800975c8:	0005883a 	mov	r2,zero
800975cc:	f800283a 	ret

800975d0 <__gedf2>:
800975d0:	2804d53a 	srli	r2,r5,20
800975d4:	3806d53a 	srli	r3,r7,20
800975d8:	02000434 	movhi	r8,16
800975dc:	423fffc4 	addi	r8,r8,-1
800975e0:	1081ffcc 	andi	r2,r2,2047
800975e4:	0241ffc4 	movi	r9,2047
800975e8:	2a14703a 	and	r10,r5,r8
800975ec:	18c1ffcc 	andi	r3,r3,2047
800975f0:	3a10703a 	and	r8,r7,r8
800975f4:	280ad7fa 	srli	r5,r5,31
800975f8:	380ed7fa 	srli	r7,r7,31
800975fc:	12401d26 	beq	r2,r9,80097674 <__gedf2+0xa4>
80097600:	0241ffc4 	movi	r9,2047
80097604:	1a401226 	beq	r3,r9,80097650 <__gedf2+0x80>
80097608:	1000081e 	bne	r2,zero,8009762c <__gedf2+0x5c>
8009760c:	2296b03a 	or	r11,r4,r10
80097610:	5813003a 	cmpeq	r9,r11,zero
80097614:	1800091e 	bne	r3,zero,8009763c <__gedf2+0x6c>
80097618:	3218b03a 	or	r12,r6,r8
8009761c:	6000071e 	bne	r12,zero,8009763c <__gedf2+0x6c>
80097620:	0005883a 	mov	r2,zero
80097624:	5800101e 	bne	r11,zero,80097668 <__gedf2+0x98>
80097628:	f800283a 	ret
8009762c:	18000c1e 	bne	r3,zero,80097660 <__gedf2+0x90>
80097630:	3212b03a 	or	r9,r6,r8
80097634:	48000c26 	beq	r9,zero,80097668 <__gedf2+0x98>
80097638:	0013883a 	mov	r9,zero
8009763c:	39c03fcc 	andi	r7,r7,255
80097640:	48000826 	beq	r9,zero,80097664 <__gedf2+0x94>
80097644:	38000926 	beq	r7,zero,8009766c <__gedf2+0x9c>
80097648:	00800044 	movi	r2,1
8009764c:	f800283a 	ret
80097650:	3212b03a 	or	r9,r6,r8
80097654:	483fec26 	beq	r9,zero,80097608 <__gedf2+0x38>
80097658:	00bfff84 	movi	r2,-2
8009765c:	f800283a 	ret
80097660:	39c03fcc 	andi	r7,r7,255
80097664:	29c00626 	beq	r5,r7,80097680 <__gedf2+0xb0>
80097668:	283ff726 	beq	r5,zero,80097648 <__gedf2+0x78>
8009766c:	00bfffc4 	movi	r2,-1
80097670:	f800283a 	ret
80097674:	2292b03a 	or	r9,r4,r10
80097678:	483fe126 	beq	r9,zero,80097600 <__gedf2+0x30>
8009767c:	003ff606 	br	80097658 <__gedf2+0x88>
80097680:	18bff916 	blt	r3,r2,80097668 <__gedf2+0x98>
80097684:	10c00316 	blt	r2,r3,80097694 <__gedf2+0xc4>
80097688:	42bff736 	bltu	r8,r10,80097668 <__gedf2+0x98>
8009768c:	52000326 	beq	r10,r8,8009769c <__gedf2+0xcc>
80097690:	5200042e 	bgeu	r10,r8,800976a4 <__gedf2+0xd4>
80097694:	283fec1e 	bne	r5,zero,80097648 <__gedf2+0x78>
80097698:	003ff406 	br	8009766c <__gedf2+0x9c>
8009769c:	313ff236 	bltu	r6,r4,80097668 <__gedf2+0x98>
800976a0:	21bffc36 	bltu	r4,r6,80097694 <__gedf2+0xc4>
800976a4:	0005883a 	mov	r2,zero
800976a8:	f800283a 	ret

800976ac <__ledf2>:
800976ac:	2804d53a 	srli	r2,r5,20
800976b0:	3810d53a 	srli	r8,r7,20
800976b4:	00c00434 	movhi	r3,16
800976b8:	18ffffc4 	addi	r3,r3,-1
800976bc:	1081ffcc 	andi	r2,r2,2047
800976c0:	0241ffc4 	movi	r9,2047
800976c4:	28d4703a 	and	r10,r5,r3
800976c8:	4201ffcc 	andi	r8,r8,2047
800976cc:	38c6703a 	and	r3,r7,r3
800976d0:	280ad7fa 	srli	r5,r5,31
800976d4:	380ed7fa 	srli	r7,r7,31
800976d8:	12401f26 	beq	r2,r9,80097758 <__ledf2+0xac>
800976dc:	0241ffc4 	movi	r9,2047
800976e0:	42401426 	beq	r8,r9,80097734 <__ledf2+0x88>
800976e4:	1000091e 	bne	r2,zero,8009770c <__ledf2+0x60>
800976e8:	2296b03a 	or	r11,r4,r10
800976ec:	5813003a 	cmpeq	r9,r11,zero
800976f0:	29403fcc 	andi	r5,r5,255
800976f4:	40000a1e 	bne	r8,zero,80097720 <__ledf2+0x74>
800976f8:	30d8b03a 	or	r12,r6,r3
800976fc:	6000081e 	bne	r12,zero,80097720 <__ledf2+0x74>
80097700:	0005883a 	mov	r2,zero
80097704:	5800111e 	bne	r11,zero,8009774c <__ledf2+0xa0>
80097708:	f800283a 	ret
8009770c:	29403fcc 	andi	r5,r5,255
80097710:	40000c1e 	bne	r8,zero,80097744 <__ledf2+0x98>
80097714:	30d2b03a 	or	r9,r6,r3
80097718:	48000c26 	beq	r9,zero,8009774c <__ledf2+0xa0>
8009771c:	0013883a 	mov	r9,zero
80097720:	39c03fcc 	andi	r7,r7,255
80097724:	48000826 	beq	r9,zero,80097748 <__ledf2+0x9c>
80097728:	38001126 	beq	r7,zero,80097770 <__ledf2+0xc4>
8009772c:	00800044 	movi	r2,1
80097730:	f800283a 	ret
80097734:	30d2b03a 	or	r9,r6,r3
80097738:	483fea26 	beq	r9,zero,800976e4 <__ledf2+0x38>
8009773c:	00800084 	movi	r2,2
80097740:	f800283a 	ret
80097744:	39c03fcc 	andi	r7,r7,255
80097748:	39400726 	beq	r7,r5,80097768 <__ledf2+0xbc>
8009774c:	2800081e 	bne	r5,zero,80097770 <__ledf2+0xc4>
80097750:	00800044 	movi	r2,1
80097754:	f800283a 	ret
80097758:	2292b03a 	or	r9,r4,r10
8009775c:	483fdf26 	beq	r9,zero,800976dc <__ledf2+0x30>
80097760:	00800084 	movi	r2,2
80097764:	f800283a 	ret
80097768:	4080030e 	bge	r8,r2,80097778 <__ledf2+0xcc>
8009776c:	383fef26 	beq	r7,zero,8009772c <__ledf2+0x80>
80097770:	00bfffc4 	movi	r2,-1
80097774:	f800283a 	ret
80097778:	123feb16 	blt	r2,r8,80097728 <__ledf2+0x7c>
8009777c:	1abff336 	bltu	r3,r10,8009774c <__ledf2+0xa0>
80097780:	50c00326 	beq	r10,r3,80097790 <__ledf2+0xe4>
80097784:	50c0042e 	bgeu	r10,r3,80097798 <__ledf2+0xec>
80097788:	283fe81e 	bne	r5,zero,8009772c <__ledf2+0x80>
8009778c:	003ff806 	br	80097770 <__ledf2+0xc4>
80097790:	313fee36 	bltu	r6,r4,8009774c <__ledf2+0xa0>
80097794:	21bffc36 	bltu	r4,r6,80097788 <__ledf2+0xdc>
80097798:	0005883a 	mov	r2,zero
8009779c:	f800283a 	ret

800977a0 <__muldf3>:
800977a0:	defff304 	addi	sp,sp,-52
800977a4:	2804d53a 	srli	r2,r5,20
800977a8:	dd800915 	stw	r22,36(sp)
800977ac:	282cd7fa 	srli	r22,r5,31
800977b0:	dc000315 	stw	r16,12(sp)
800977b4:	04000434 	movhi	r16,16
800977b8:	dd400815 	stw	r21,32(sp)
800977bc:	dc800515 	stw	r18,20(sp)
800977c0:	843fffc4 	addi	r16,r16,-1
800977c4:	dfc00c15 	stw	ra,48(sp)
800977c8:	df000b15 	stw	fp,44(sp)
800977cc:	ddc00a15 	stw	r23,40(sp)
800977d0:	dd000715 	stw	r20,28(sp)
800977d4:	dcc00615 	stw	r19,24(sp)
800977d8:	dc400415 	stw	r17,16(sp)
800977dc:	1481ffcc 	andi	r18,r2,2047
800977e0:	2c20703a 	and	r16,r5,r16
800977e4:	b02b883a 	mov	r21,r22
800977e8:	b2403fcc 	andi	r9,r22,255
800977ec:	90006026 	beq	r18,zero,80097970 <__muldf3+0x1d0>
800977f0:	0081ffc4 	movi	r2,2047
800977f4:	2029883a 	mov	r20,r4
800977f8:	90803626 	beq	r18,r2,800978d4 <__muldf3+0x134>
800977fc:	80800434 	orhi	r2,r16,16
80097800:	100490fa 	slli	r2,r2,3
80097804:	2020d77a 	srli	r16,r4,29
80097808:	202890fa 	slli	r20,r4,3
8009780c:	94bf0044 	addi	r18,r18,-1023
80097810:	80a0b03a 	or	r16,r16,r2
80097814:	0027883a 	mov	r19,zero
80097818:	0039883a 	mov	fp,zero
8009781c:	3804d53a 	srli	r2,r7,20
80097820:	382ed7fa 	srli	r23,r7,31
80097824:	04400434 	movhi	r17,16
80097828:	8c7fffc4 	addi	r17,r17,-1
8009782c:	1081ffcc 	andi	r2,r2,2047
80097830:	3011883a 	mov	r8,r6
80097834:	3c62703a 	and	r17,r7,r17
80097838:	ba803fcc 	andi	r10,r23,255
8009783c:	10006d26 	beq	r2,zero,800979f4 <__muldf3+0x254>
80097840:	00c1ffc4 	movi	r3,2047
80097844:	10c06526 	beq	r2,r3,800979dc <__muldf3+0x23c>
80097848:	88c00434 	orhi	r3,r17,16
8009784c:	180690fa 	slli	r3,r3,3
80097850:	3022d77a 	srli	r17,r6,29
80097854:	301090fa 	slli	r8,r6,3
80097858:	10bf0044 	addi	r2,r2,-1023
8009785c:	88e2b03a 	or	r17,r17,r3
80097860:	000b883a 	mov	r5,zero
80097864:	9085883a 	add	r2,r18,r2
80097868:	2cc8b03a 	or	r4,r5,r19
8009786c:	00c003c4 	movi	r3,15
80097870:	bdacf03a 	xor	r22,r23,r22
80097874:	12c00044 	addi	r11,r2,1
80097878:	19009936 	bltu	r3,r4,80097ae0 <__muldf3+0x340>
8009787c:	200890ba 	slli	r4,r4,2
80097880:	00e00274 	movhi	r3,32777
80097884:	18de2504 	addi	r3,r3,30868
80097888:	20c9883a 	add	r4,r4,r3
8009788c:	20c00017 	ldw	r3,0(r4)
80097890:	1800683a 	jmp	r3
80097894:	80097ae0 	cmpeqi	zero,r16,9707
80097898:	800978f4 	orhi	zero,r16,9699
8009789c:	800978f4 	orhi	zero,r16,9699
800978a0:	800978f0 	cmpltui	zero,r16,9699
800978a4:	80097abc 	xorhi	zero,r16,9706
800978a8:	80097abc 	xorhi	zero,r16,9706
800978ac:	80097aa4 	muli	zero,r16,9706
800978b0:	800978f0 	cmpltui	zero,r16,9699
800978b4:	80097abc 	xorhi	zero,r16,9706
800978b8:	80097aa4 	muli	zero,r16,9706
800978bc:	80097abc 	xorhi	zero,r16,9706
800978c0:	800978f0 	cmpltui	zero,r16,9699
800978c4:	80097acc 	andi	zero,r16,9707
800978c8:	80097acc 	andi	zero,r16,9707
800978cc:	80097acc 	andi	zero,r16,9707
800978d0:	80097ce8 	cmpgeui	zero,r16,9715
800978d4:	2404b03a 	or	r2,r4,r16
800978d8:	10006f1e 	bne	r2,zero,80097a98 <__muldf3+0x2f8>
800978dc:	04c00204 	movi	r19,8
800978e0:	0021883a 	mov	r16,zero
800978e4:	0029883a 	mov	r20,zero
800978e8:	07000084 	movi	fp,2
800978ec:	003fcb06 	br	8009781c <__muldf3+0x7c>
800978f0:	502d883a 	mov	r22,r10
800978f4:	00800084 	movi	r2,2
800978f8:	28805726 	beq	r5,r2,80097a58 <__muldf3+0x2b8>
800978fc:	008000c4 	movi	r2,3
80097900:	28816626 	beq	r5,r2,80097e9c <__muldf3+0x6fc>
80097904:	00800044 	movi	r2,1
80097908:	2881411e 	bne	r5,r2,80097e10 <__muldf3+0x670>
8009790c:	b02b883a 	mov	r21,r22
80097910:	0005883a 	mov	r2,zero
80097914:	000b883a 	mov	r5,zero
80097918:	0029883a 	mov	r20,zero
8009791c:	1004953a 	slli	r2,r2,20
80097920:	a8c03fcc 	andi	r3,r21,255
80097924:	04400434 	movhi	r17,16
80097928:	8c7fffc4 	addi	r17,r17,-1
8009792c:	180697fa 	slli	r3,r3,31
80097930:	2c4a703a 	and	r5,r5,r17
80097934:	288ab03a 	or	r5,r5,r2
80097938:	28c6b03a 	or	r3,r5,r3
8009793c:	a005883a 	mov	r2,r20
80097940:	dfc00c17 	ldw	ra,48(sp)
80097944:	df000b17 	ldw	fp,44(sp)
80097948:	ddc00a17 	ldw	r23,40(sp)
8009794c:	dd800917 	ldw	r22,36(sp)
80097950:	dd400817 	ldw	r21,32(sp)
80097954:	dd000717 	ldw	r20,28(sp)
80097958:	dcc00617 	ldw	r19,24(sp)
8009795c:	dc800517 	ldw	r18,20(sp)
80097960:	dc400417 	ldw	r17,16(sp)
80097964:	dc000317 	ldw	r16,12(sp)
80097968:	dec00d04 	addi	sp,sp,52
8009796c:	f800283a 	ret
80097970:	2404b03a 	or	r2,r4,r16
80097974:	2027883a 	mov	r19,r4
80097978:	10004226 	beq	r2,zero,80097a84 <__muldf3+0x2e4>
8009797c:	8000fc26 	beq	r16,zero,80097d70 <__muldf3+0x5d0>
80097980:	8009883a 	mov	r4,r16
80097984:	d9800215 	stw	r6,8(sp)
80097988:	d9c00015 	stw	r7,0(sp)
8009798c:	da400115 	stw	r9,4(sp)
80097990:	0098b600 	call	80098b60 <__clzsi2>
80097994:	d9800217 	ldw	r6,8(sp)
80097998:	d9c00017 	ldw	r7,0(sp)
8009799c:	da400117 	ldw	r9,4(sp)
800979a0:	113ffd44 	addi	r4,r2,-11
800979a4:	00c00704 	movi	r3,28
800979a8:	1900ed16 	blt	r3,r4,80097d60 <__muldf3+0x5c0>
800979ac:	00c00744 	movi	r3,29
800979b0:	147ffe04 	addi	r17,r2,-8
800979b4:	1907c83a 	sub	r3,r3,r4
800979b8:	8460983a 	sll	r16,r16,r17
800979bc:	98c6d83a 	srl	r3,r19,r3
800979c0:	9c68983a 	sll	r20,r19,r17
800979c4:	1c20b03a 	or	r16,r3,r16
800979c8:	1080fcc4 	addi	r2,r2,1011
800979cc:	00a5c83a 	sub	r18,zero,r2
800979d0:	0027883a 	mov	r19,zero
800979d4:	0039883a 	mov	fp,zero
800979d8:	003f9006 	br	8009781c <__muldf3+0x7c>
800979dc:	3446b03a 	or	r3,r6,r17
800979e0:	1800261e 	bne	r3,zero,80097a7c <__muldf3+0x2dc>
800979e4:	0023883a 	mov	r17,zero
800979e8:	0011883a 	mov	r8,zero
800979ec:	01400084 	movi	r5,2
800979f0:	003f9c06 	br	80097864 <__muldf3+0xc4>
800979f4:	3446b03a 	or	r3,r6,r17
800979f8:	18001c26 	beq	r3,zero,80097a6c <__muldf3+0x2cc>
800979fc:	8800ce26 	beq	r17,zero,80097d38 <__muldf3+0x598>
80097a00:	8809883a 	mov	r4,r17
80097a04:	d9800215 	stw	r6,8(sp)
80097a08:	da400115 	stw	r9,4(sp)
80097a0c:	da800015 	stw	r10,0(sp)
80097a10:	0098b600 	call	80098b60 <__clzsi2>
80097a14:	d9800217 	ldw	r6,8(sp)
80097a18:	da400117 	ldw	r9,4(sp)
80097a1c:	da800017 	ldw	r10,0(sp)
80097a20:	113ffd44 	addi	r4,r2,-11
80097a24:	00c00704 	movi	r3,28
80097a28:	1900bf16 	blt	r3,r4,80097d28 <__muldf3+0x588>
80097a2c:	00c00744 	movi	r3,29
80097a30:	123ffe04 	addi	r8,r2,-8
80097a34:	1907c83a 	sub	r3,r3,r4
80097a38:	8a22983a 	sll	r17,r17,r8
80097a3c:	30c6d83a 	srl	r3,r6,r3
80097a40:	3210983a 	sll	r8,r6,r8
80097a44:	1c62b03a 	or	r17,r3,r17
80097a48:	1080fcc4 	addi	r2,r2,1011
80097a4c:	0085c83a 	sub	r2,zero,r2
80097a50:	000b883a 	mov	r5,zero
80097a54:	003f8306 	br	80097864 <__muldf3+0xc4>
80097a58:	b02b883a 	mov	r21,r22
80097a5c:	0081ffc4 	movi	r2,2047
80097a60:	000b883a 	mov	r5,zero
80097a64:	0029883a 	mov	r20,zero
80097a68:	003fac06 	br	8009791c <__muldf3+0x17c>
80097a6c:	0023883a 	mov	r17,zero
80097a70:	0011883a 	mov	r8,zero
80097a74:	01400044 	movi	r5,1
80097a78:	003f7a06 	br	80097864 <__muldf3+0xc4>
80097a7c:	014000c4 	movi	r5,3
80097a80:	003f7806 	br	80097864 <__muldf3+0xc4>
80097a84:	04c00104 	movi	r19,4
80097a88:	0021883a 	mov	r16,zero
80097a8c:	0029883a 	mov	r20,zero
80097a90:	07000044 	movi	fp,1
80097a94:	003f6106 	br	8009781c <__muldf3+0x7c>
80097a98:	04c00304 	movi	r19,12
80097a9c:	070000c4 	movi	fp,3
80097aa0:	003f5e06 	br	8009781c <__muldf3+0x7c>
80097aa4:	01400434 	movhi	r5,16
80097aa8:	002b883a 	mov	r21,zero
80097aac:	297fffc4 	addi	r5,r5,-1
80097ab0:	053fffc4 	movi	r20,-1
80097ab4:	0081ffc4 	movi	r2,2047
80097ab8:	003f9806 	br	8009791c <__muldf3+0x17c>
80097abc:	8023883a 	mov	r17,r16
80097ac0:	a011883a 	mov	r8,r20
80097ac4:	e00b883a 	mov	r5,fp
80097ac8:	003f8a06 	br	800978f4 <__muldf3+0x154>
80097acc:	8023883a 	mov	r17,r16
80097ad0:	a011883a 	mov	r8,r20
80097ad4:	482d883a 	mov	r22,r9
80097ad8:	e00b883a 	mov	r5,fp
80097adc:	003f8506 	br	800978f4 <__muldf3+0x154>
80097ae0:	a00ad43a 	srli	r5,r20,16
80097ae4:	401ad43a 	srli	r13,r8,16
80097ae8:	a53fffcc 	andi	r20,r20,65535
80097aec:	423fffcc 	andi	r8,r8,65535
80097af0:	4519383a 	mul	r12,r8,r20
80097af4:	4147383a 	mul	r3,r8,r5
80097af8:	6d09383a 	mul	r4,r13,r20
80097afc:	600cd43a 	srli	r6,r12,16
80097b00:	2b5d383a 	mul	r14,r5,r13
80097b04:	20c9883a 	add	r4,r4,r3
80097b08:	310d883a 	add	r6,r6,r4
80097b0c:	30c0022e 	bgeu	r6,r3,80097b18 <__muldf3+0x378>
80097b10:	00c00074 	movhi	r3,1
80097b14:	70dd883a 	add	r14,r14,r3
80097b18:	8826d43a 	srli	r19,r17,16
80097b1c:	8bffffcc 	andi	r15,r17,65535
80097b20:	7d23383a 	mul	r17,r15,r20
80097b24:	7949383a 	mul	r4,r15,r5
80097b28:	9d29383a 	mul	r20,r19,r20
80097b2c:	8814d43a 	srli	r10,r17,16
80097b30:	3012943a 	slli	r9,r6,16
80097b34:	a129883a 	add	r20,r20,r4
80097b38:	633fffcc 	andi	r12,r12,65535
80097b3c:	5515883a 	add	r10,r10,r20
80097b40:	3006d43a 	srli	r3,r6,16
80097b44:	4b13883a 	add	r9,r9,r12
80097b48:	2ccb383a 	mul	r5,r5,r19
80097b4c:	5100022e 	bgeu	r10,r4,80097b58 <__muldf3+0x3b8>
80097b50:	01000074 	movhi	r4,1
80097b54:	290b883a 	add	r5,r5,r4
80097b58:	802ad43a 	srli	r21,r16,16
80097b5c:	843fffcc 	andi	r16,r16,65535
80097b60:	440d383a 	mul	r6,r8,r16
80097b64:	4565383a 	mul	r18,r8,r21
80097b68:	8349383a 	mul	r4,r16,r13
80097b6c:	500e943a 	slli	r7,r10,16
80097b70:	3010d43a 	srli	r8,r6,16
80097b74:	5028d43a 	srli	r20,r10,16
80097b78:	2489883a 	add	r4,r4,r18
80097b7c:	8abfffcc 	andi	r10,r17,65535
80097b80:	3a95883a 	add	r10,r7,r10
80097b84:	4119883a 	add	r12,r8,r4
80097b88:	a169883a 	add	r20,r20,r5
80097b8c:	1a87883a 	add	r3,r3,r10
80097b90:	6d5b383a 	mul	r13,r13,r21
80097b94:	6480022e 	bgeu	r12,r18,80097ba0 <__muldf3+0x400>
80097b98:	01000074 	movhi	r4,1
80097b9c:	691b883a 	add	r13,r13,r4
80097ba0:	7c25383a 	mul	r18,r15,r16
80097ba4:	7d4b383a 	mul	r5,r15,r21
80097ba8:	84cf383a 	mul	r7,r16,r19
80097bac:	901ed43a 	srli	r15,r18,16
80097bb0:	6008d43a 	srli	r4,r12,16
80097bb4:	6010943a 	slli	r8,r12,16
80097bb8:	394f883a 	add	r7,r7,r5
80097bbc:	333fffcc 	andi	r12,r6,65535
80097bc0:	79df883a 	add	r15,r15,r7
80097bc4:	235b883a 	add	r13,r4,r13
80097bc8:	9d63383a 	mul	r17,r19,r21
80097bcc:	4309883a 	add	r4,r8,r12
80097bd0:	7940022e 	bgeu	r15,r5,80097bdc <__muldf3+0x43c>
80097bd4:	01400074 	movhi	r5,1
80097bd8:	8963883a 	add	r17,r17,r5
80097bdc:	780a943a 	slli	r5,r15,16
80097be0:	91bfffcc 	andi	r6,r18,65535
80097be4:	70c7883a 	add	r3,r14,r3
80097be8:	298d883a 	add	r6,r5,r6
80097bec:	1a8f803a 	cmpltu	r7,r3,r10
80097bf0:	350b883a 	add	r5,r6,r20
80097bf4:	20c7883a 	add	r3,r4,r3
80097bf8:	3955883a 	add	r10,r7,r5
80097bfc:	1909803a 	cmpltu	r4,r3,r4
80097c00:	6a91883a 	add	r8,r13,r10
80097c04:	780cd43a 	srli	r6,r15,16
80097c08:	2219883a 	add	r12,r4,r8
80097c0c:	2d0b803a 	cmpltu	r5,r5,r20
80097c10:	51cf803a 	cmpltu	r7,r10,r7
80097c14:	29ceb03a 	or	r7,r5,r7
80097c18:	4351803a 	cmpltu	r8,r8,r13
80097c1c:	610b803a 	cmpltu	r5,r12,r4
80097c20:	4148b03a 	or	r4,r8,r5
80097c24:	398f883a 	add	r7,r7,r6
80097c28:	3909883a 	add	r4,r7,r4
80097c2c:	1810927a 	slli	r8,r3,9
80097c30:	2449883a 	add	r4,r4,r17
80097c34:	2008927a 	slli	r4,r4,9
80097c38:	6022d5fa 	srli	r17,r12,23
80097c3c:	1806d5fa 	srli	r3,r3,23
80097c40:	4252b03a 	or	r9,r8,r9
80097c44:	600a927a 	slli	r5,r12,9
80097c48:	4810c03a 	cmpne	r8,r9,zero
80097c4c:	2462b03a 	or	r17,r4,r17
80097c50:	40c6b03a 	or	r3,r8,r3
80097c54:	8900402c 	andhi	r4,r17,256
80097c58:	1950b03a 	or	r8,r3,r5
80097c5c:	20000726 	beq	r4,zero,80097c7c <__muldf3+0x4dc>
80097c60:	4006d07a 	srli	r3,r8,1
80097c64:	880497fa 	slli	r2,r17,31
80097c68:	4200004c 	andi	r8,r8,1
80097c6c:	8822d07a 	srli	r17,r17,1
80097c70:	1a10b03a 	or	r8,r3,r8
80097c74:	1210b03a 	or	r8,r2,r8
80097c78:	5805883a 	mov	r2,r11
80097c7c:	1140ffc4 	addi	r5,r2,1023
80097c80:	0140440e 	bge	zero,r5,80097d94 <__muldf3+0x5f4>
80097c84:	40c001cc 	andi	r3,r8,7
80097c88:	18000726 	beq	r3,zero,80097ca8 <__muldf3+0x508>
80097c8c:	40c003cc 	andi	r3,r8,15
80097c90:	01000104 	movi	r4,4
80097c94:	19000426 	beq	r3,r4,80097ca8 <__muldf3+0x508>
80097c98:	4107883a 	add	r3,r8,r4
80097c9c:	1a11803a 	cmpltu	r8,r3,r8
80097ca0:	8a23883a 	add	r17,r17,r8
80097ca4:	1811883a 	mov	r8,r3
80097ca8:	88c0402c 	andhi	r3,r17,256
80097cac:	18000426 	beq	r3,zero,80097cc0 <__muldf3+0x520>
80097cb0:	11410004 	addi	r5,r2,1024
80097cb4:	00bfc034 	movhi	r2,65280
80097cb8:	10bfffc4 	addi	r2,r2,-1
80097cbc:	88a2703a 	and	r17,r17,r2
80097cc0:	0081ff84 	movi	r2,2046
80097cc4:	117f6416 	blt	r2,r5,80097a58 <__muldf3+0x2b8>
80097cc8:	8828977a 	slli	r20,r17,29
80097ccc:	4010d0fa 	srli	r8,r8,3
80097cd0:	8822927a 	slli	r17,r17,9
80097cd4:	2881ffcc 	andi	r2,r5,2047
80097cd8:	a228b03a 	or	r20,r20,r8
80097cdc:	880ad33a 	srli	r5,r17,12
80097ce0:	b02b883a 	mov	r21,r22
80097ce4:	003f0d06 	br	8009791c <__muldf3+0x17c>
80097ce8:	8080022c 	andhi	r2,r16,8
80097cec:	10000926 	beq	r2,zero,80097d14 <__muldf3+0x574>
80097cf0:	8880022c 	andhi	r2,r17,8
80097cf4:	1000071e 	bne	r2,zero,80097d14 <__muldf3+0x574>
80097cf8:	00800434 	movhi	r2,16
80097cfc:	89400234 	orhi	r5,r17,8
80097d00:	10bfffc4 	addi	r2,r2,-1
80097d04:	b82b883a 	mov	r21,r23
80097d08:	288a703a 	and	r5,r5,r2
80097d0c:	4029883a 	mov	r20,r8
80097d10:	003f6806 	br	80097ab4 <__muldf3+0x314>
80097d14:	00800434 	movhi	r2,16
80097d18:	81400234 	orhi	r5,r16,8
80097d1c:	10bfffc4 	addi	r2,r2,-1
80097d20:	288a703a 	and	r5,r5,r2
80097d24:	003f6306 	br	80097ab4 <__muldf3+0x314>
80097d28:	147ff604 	addi	r17,r2,-40
80097d2c:	3462983a 	sll	r17,r6,r17
80097d30:	0011883a 	mov	r8,zero
80097d34:	003f4406 	br	80097a48 <__muldf3+0x2a8>
80097d38:	3009883a 	mov	r4,r6
80097d3c:	d9800215 	stw	r6,8(sp)
80097d40:	da400115 	stw	r9,4(sp)
80097d44:	da800015 	stw	r10,0(sp)
80097d48:	0098b600 	call	80098b60 <__clzsi2>
80097d4c:	10800804 	addi	r2,r2,32
80097d50:	da800017 	ldw	r10,0(sp)
80097d54:	da400117 	ldw	r9,4(sp)
80097d58:	d9800217 	ldw	r6,8(sp)
80097d5c:	003f3006 	br	80097a20 <__muldf3+0x280>
80097d60:	143ff604 	addi	r16,r2,-40
80097d64:	9c20983a 	sll	r16,r19,r16
80097d68:	0029883a 	mov	r20,zero
80097d6c:	003f1606 	br	800979c8 <__muldf3+0x228>
80097d70:	d9800215 	stw	r6,8(sp)
80097d74:	d9c00015 	stw	r7,0(sp)
80097d78:	da400115 	stw	r9,4(sp)
80097d7c:	0098b600 	call	80098b60 <__clzsi2>
80097d80:	10800804 	addi	r2,r2,32
80097d84:	da400117 	ldw	r9,4(sp)
80097d88:	d9c00017 	ldw	r7,0(sp)
80097d8c:	d9800217 	ldw	r6,8(sp)
80097d90:	003f0306 	br	800979a0 <__muldf3+0x200>
80097d94:	00c00044 	movi	r3,1
80097d98:	1947c83a 	sub	r3,r3,r5
80097d9c:	00800e04 	movi	r2,56
80097da0:	10feda16 	blt	r2,r3,8009790c <__muldf3+0x16c>
80097da4:	008007c4 	movi	r2,31
80097da8:	10c01b16 	blt	r2,r3,80097e18 <__muldf3+0x678>
80097dac:	00800804 	movi	r2,32
80097db0:	10c5c83a 	sub	r2,r2,r3
80097db4:	888a983a 	sll	r5,r17,r2
80097db8:	40c8d83a 	srl	r4,r8,r3
80097dbc:	4084983a 	sll	r2,r8,r2
80097dc0:	88e2d83a 	srl	r17,r17,r3
80097dc4:	2906b03a 	or	r3,r5,r4
80097dc8:	1004c03a 	cmpne	r2,r2,zero
80097dcc:	1886b03a 	or	r3,r3,r2
80097dd0:	188001cc 	andi	r2,r3,7
80097dd4:	10000726 	beq	r2,zero,80097df4 <__muldf3+0x654>
80097dd8:	188003cc 	andi	r2,r3,15
80097ddc:	01000104 	movi	r4,4
80097de0:	11000426 	beq	r2,r4,80097df4 <__muldf3+0x654>
80097de4:	1805883a 	mov	r2,r3
80097de8:	10c00104 	addi	r3,r2,4
80097dec:	1885803a 	cmpltu	r2,r3,r2
80097df0:	88a3883a 	add	r17,r17,r2
80097df4:	8880202c 	andhi	r2,r17,128
80097df8:	10001c26 	beq	r2,zero,80097e6c <__muldf3+0x6cc>
80097dfc:	b02b883a 	mov	r21,r22
80097e00:	00800044 	movi	r2,1
80097e04:	000b883a 	mov	r5,zero
80097e08:	0029883a 	mov	r20,zero
80097e0c:	003ec306 	br	8009791c <__muldf3+0x17c>
80097e10:	5805883a 	mov	r2,r11
80097e14:	003f9906 	br	80097c7c <__muldf3+0x4dc>
80097e18:	00bff844 	movi	r2,-31
80097e1c:	1145c83a 	sub	r2,r2,r5
80097e20:	8888d83a 	srl	r4,r17,r2
80097e24:	00800804 	movi	r2,32
80097e28:	18801a26 	beq	r3,r2,80097e94 <__muldf3+0x6f4>
80097e2c:	00801004 	movi	r2,64
80097e30:	10c5c83a 	sub	r2,r2,r3
80097e34:	8884983a 	sll	r2,r17,r2
80097e38:	1204b03a 	or	r2,r2,r8
80097e3c:	1004c03a 	cmpne	r2,r2,zero
80097e40:	2084b03a 	or	r2,r4,r2
80097e44:	144001cc 	andi	r17,r2,7
80097e48:	88000d1e 	bne	r17,zero,80097e80 <__muldf3+0x6e0>
80097e4c:	000b883a 	mov	r5,zero
80097e50:	1028d0fa 	srli	r20,r2,3
80097e54:	b02b883a 	mov	r21,r22
80097e58:	0005883a 	mov	r2,zero
80097e5c:	a468b03a 	or	r20,r20,r17
80097e60:	003eae06 	br	8009791c <__muldf3+0x17c>
80097e64:	1007883a 	mov	r3,r2
80097e68:	0023883a 	mov	r17,zero
80097e6c:	880a927a 	slli	r5,r17,9
80097e70:	1805883a 	mov	r2,r3
80097e74:	8822977a 	slli	r17,r17,29
80097e78:	280ad33a 	srli	r5,r5,12
80097e7c:	003ff406 	br	80097e50 <__muldf3+0x6b0>
80097e80:	10c003cc 	andi	r3,r2,15
80097e84:	01000104 	movi	r4,4
80097e88:	193ff626 	beq	r3,r4,80097e64 <__muldf3+0x6c4>
80097e8c:	0023883a 	mov	r17,zero
80097e90:	003fd506 	br	80097de8 <__muldf3+0x648>
80097e94:	0005883a 	mov	r2,zero
80097e98:	003fe706 	br	80097e38 <__muldf3+0x698>
80097e9c:	00800434 	movhi	r2,16
80097ea0:	89400234 	orhi	r5,r17,8
80097ea4:	10bfffc4 	addi	r2,r2,-1
80097ea8:	b02b883a 	mov	r21,r22
80097eac:	288a703a 	and	r5,r5,r2
80097eb0:	4029883a 	mov	r20,r8
80097eb4:	003eff06 	br	80097ab4 <__muldf3+0x314>

80097eb8 <__subdf3>:
80097eb8:	02000434 	movhi	r8,16
80097ebc:	423fffc4 	addi	r8,r8,-1
80097ec0:	defffb04 	addi	sp,sp,-20
80097ec4:	2a14703a 	and	r10,r5,r8
80097ec8:	3812d53a 	srli	r9,r7,20
80097ecc:	3a10703a 	and	r8,r7,r8
80097ed0:	2006d77a 	srli	r3,r4,29
80097ed4:	3004d77a 	srli	r2,r6,29
80097ed8:	dc000015 	stw	r16,0(sp)
80097edc:	501490fa 	slli	r10,r10,3
80097ee0:	2820d53a 	srli	r16,r5,20
80097ee4:	401090fa 	slli	r8,r8,3
80097ee8:	dc800215 	stw	r18,8(sp)
80097eec:	dc400115 	stw	r17,4(sp)
80097ef0:	dfc00415 	stw	ra,16(sp)
80097ef4:	202290fa 	slli	r17,r4,3
80097ef8:	dcc00315 	stw	r19,12(sp)
80097efc:	4a41ffcc 	andi	r9,r9,2047
80097f00:	0101ffc4 	movi	r4,2047
80097f04:	2824d7fa 	srli	r18,r5,31
80097f08:	8401ffcc 	andi	r16,r16,2047
80097f0c:	50c6b03a 	or	r3,r10,r3
80097f10:	380ed7fa 	srli	r7,r7,31
80097f14:	408ab03a 	or	r5,r8,r2
80097f18:	300c90fa 	slli	r6,r6,3
80097f1c:	49009626 	beq	r9,r4,80098178 <__subdf3+0x2c0>
80097f20:	39c0005c 	xori	r7,r7,1
80097f24:	8245c83a 	sub	r2,r16,r9
80097f28:	3c807426 	beq	r7,r18,800980fc <__subdf3+0x244>
80097f2c:	0080af0e 	bge	zero,r2,800981ec <__subdf3+0x334>
80097f30:	48002a1e 	bne	r9,zero,80097fdc <__subdf3+0x124>
80097f34:	2988b03a 	or	r4,r5,r6
80097f38:	20009a1e 	bne	r4,zero,800981a4 <__subdf3+0x2ec>
80097f3c:	888001cc 	andi	r2,r17,7
80097f40:	10000726 	beq	r2,zero,80097f60 <__subdf3+0xa8>
80097f44:	888003cc 	andi	r2,r17,15
80097f48:	01000104 	movi	r4,4
80097f4c:	11000426 	beq	r2,r4,80097f60 <__subdf3+0xa8>
80097f50:	890b883a 	add	r5,r17,r4
80097f54:	2c63803a 	cmpltu	r17,r5,r17
80097f58:	1c47883a 	add	r3,r3,r17
80097f5c:	2823883a 	mov	r17,r5
80097f60:	1880202c 	andhi	r2,r3,128
80097f64:	10005926 	beq	r2,zero,800980cc <__subdf3+0x214>
80097f68:	84000044 	addi	r16,r16,1
80097f6c:	0081ffc4 	movi	r2,2047
80097f70:	8080be26 	beq	r16,r2,8009826c <__subdf3+0x3b4>
80097f74:	017fe034 	movhi	r5,65408
80097f78:	297fffc4 	addi	r5,r5,-1
80097f7c:	1946703a 	and	r3,r3,r5
80097f80:	1804977a 	slli	r2,r3,29
80097f84:	1806927a 	slli	r3,r3,9
80097f88:	8822d0fa 	srli	r17,r17,3
80097f8c:	8401ffcc 	andi	r16,r16,2047
80097f90:	180ad33a 	srli	r5,r3,12
80097f94:	9100004c 	andi	r4,r18,1
80097f98:	1444b03a 	or	r2,r2,r17
80097f9c:	80c1ffcc 	andi	r3,r16,2047
80097fa0:	1820953a 	slli	r16,r3,20
80097fa4:	20c03fcc 	andi	r3,r4,255
80097fa8:	180897fa 	slli	r4,r3,31
80097fac:	00c00434 	movhi	r3,16
80097fb0:	18ffffc4 	addi	r3,r3,-1
80097fb4:	28c6703a 	and	r3,r5,r3
80097fb8:	1c06b03a 	or	r3,r3,r16
80097fbc:	1906b03a 	or	r3,r3,r4
80097fc0:	dfc00417 	ldw	ra,16(sp)
80097fc4:	dcc00317 	ldw	r19,12(sp)
80097fc8:	dc800217 	ldw	r18,8(sp)
80097fcc:	dc400117 	ldw	r17,4(sp)
80097fd0:	dc000017 	ldw	r16,0(sp)
80097fd4:	dec00504 	addi	sp,sp,20
80097fd8:	f800283a 	ret
80097fdc:	0101ffc4 	movi	r4,2047
80097fe0:	813fd626 	beq	r16,r4,80097f3c <__subdf3+0x84>
80097fe4:	29402034 	orhi	r5,r5,128
80097fe8:	01000e04 	movi	r4,56
80097fec:	2080a316 	blt	r4,r2,8009827c <__subdf3+0x3c4>
80097ff0:	010007c4 	movi	r4,31
80097ff4:	2080c616 	blt	r4,r2,80098310 <__subdf3+0x458>
80097ff8:	01000804 	movi	r4,32
80097ffc:	2089c83a 	sub	r4,r4,r2
80098000:	2910983a 	sll	r8,r5,r4
80098004:	308ed83a 	srl	r7,r6,r2
80098008:	3108983a 	sll	r4,r6,r4
8009800c:	2884d83a 	srl	r2,r5,r2
80098010:	41ccb03a 	or	r6,r8,r7
80098014:	2008c03a 	cmpne	r4,r4,zero
80098018:	310cb03a 	or	r6,r6,r4
8009801c:	898dc83a 	sub	r6,r17,r6
80098020:	89a3803a 	cmpltu	r17,r17,r6
80098024:	1887c83a 	sub	r3,r3,r2
80098028:	1c47c83a 	sub	r3,r3,r17
8009802c:	3023883a 	mov	r17,r6
80098030:	1880202c 	andhi	r2,r3,128
80098034:	10002326 	beq	r2,zero,800980c4 <__subdf3+0x20c>
80098038:	04c02034 	movhi	r19,128
8009803c:	9cffffc4 	addi	r19,r19,-1
80098040:	1ce6703a 	and	r19,r3,r19
80098044:	98007a26 	beq	r19,zero,80098230 <__subdf3+0x378>
80098048:	9809883a 	mov	r4,r19
8009804c:	0098b600 	call	80098b60 <__clzsi2>
80098050:	113ffe04 	addi	r4,r2,-8
80098054:	00c007c4 	movi	r3,31
80098058:	19007b16 	blt	r3,r4,80098248 <__subdf3+0x390>
8009805c:	00800804 	movi	r2,32
80098060:	1105c83a 	sub	r2,r2,r4
80098064:	8884d83a 	srl	r2,r17,r2
80098068:	9906983a 	sll	r3,r19,r4
8009806c:	8922983a 	sll	r17,r17,r4
80098070:	10c4b03a 	or	r2,r2,r3
80098074:	24007816 	blt	r4,r16,80098258 <__subdf3+0x3a0>
80098078:	2421c83a 	sub	r16,r4,r16
8009807c:	80c00044 	addi	r3,r16,1
80098080:	010007c4 	movi	r4,31
80098084:	20c09516 	blt	r4,r3,800982dc <__subdf3+0x424>
80098088:	01400804 	movi	r5,32
8009808c:	28cbc83a 	sub	r5,r5,r3
80098090:	88c8d83a 	srl	r4,r17,r3
80098094:	8962983a 	sll	r17,r17,r5
80098098:	114a983a 	sll	r5,r2,r5
8009809c:	10c6d83a 	srl	r3,r2,r3
800980a0:	8804c03a 	cmpne	r2,r17,zero
800980a4:	290ab03a 	or	r5,r5,r4
800980a8:	28a2b03a 	or	r17,r5,r2
800980ac:	0021883a 	mov	r16,zero
800980b0:	003fa206 	br	80097f3c <__subdf3+0x84>
800980b4:	2090b03a 	or	r8,r4,r2
800980b8:	40018e26 	beq	r8,zero,800986f4 <__subdf3+0x83c>
800980bc:	1007883a 	mov	r3,r2
800980c0:	2023883a 	mov	r17,r4
800980c4:	888001cc 	andi	r2,r17,7
800980c8:	103f9e1e 	bne	r2,zero,80097f44 <__subdf3+0x8c>
800980cc:	1804977a 	slli	r2,r3,29
800980d0:	8822d0fa 	srli	r17,r17,3
800980d4:	1810d0fa 	srli	r8,r3,3
800980d8:	9100004c 	andi	r4,r18,1
800980dc:	1444b03a 	or	r2,r2,r17
800980e0:	00c1ffc4 	movi	r3,2047
800980e4:	80c02826 	beq	r16,r3,80098188 <__subdf3+0x2d0>
800980e8:	01400434 	movhi	r5,16
800980ec:	297fffc4 	addi	r5,r5,-1
800980f0:	80e0703a 	and	r16,r16,r3
800980f4:	414a703a 	and	r5,r8,r5
800980f8:	003fa806 	br	80097f9c <__subdf3+0xe4>
800980fc:	0080630e 	bge	zero,r2,8009828c <__subdf3+0x3d4>
80098100:	48003026 	beq	r9,zero,800981c4 <__subdf3+0x30c>
80098104:	0101ffc4 	movi	r4,2047
80098108:	813f8c26 	beq	r16,r4,80097f3c <__subdf3+0x84>
8009810c:	29402034 	orhi	r5,r5,128
80098110:	01000e04 	movi	r4,56
80098114:	2080a90e 	bge	r4,r2,800983bc <__subdf3+0x504>
80098118:	298cb03a 	or	r6,r5,r6
8009811c:	3012c03a 	cmpne	r9,r6,zero
80098120:	0005883a 	mov	r2,zero
80098124:	4c53883a 	add	r9,r9,r17
80098128:	4c63803a 	cmpltu	r17,r9,r17
8009812c:	10c7883a 	add	r3,r2,r3
80098130:	88c7883a 	add	r3,r17,r3
80098134:	4823883a 	mov	r17,r9
80098138:	1880202c 	andhi	r2,r3,128
8009813c:	1000d026 	beq	r2,zero,80098480 <__subdf3+0x5c8>
80098140:	84000044 	addi	r16,r16,1
80098144:	0081ffc4 	movi	r2,2047
80098148:	8080fe26 	beq	r16,r2,80098544 <__subdf3+0x68c>
8009814c:	00bfe034 	movhi	r2,65408
80098150:	10bfffc4 	addi	r2,r2,-1
80098154:	1886703a 	and	r3,r3,r2
80098158:	880ad07a 	srli	r5,r17,1
8009815c:	180497fa 	slli	r2,r3,31
80098160:	8900004c 	andi	r4,r17,1
80098164:	2922b03a 	or	r17,r5,r4
80098168:	1806d07a 	srli	r3,r3,1
8009816c:	1462b03a 	or	r17,r2,r17
80098170:	3825883a 	mov	r18,r7
80098174:	003f7106 	br	80097f3c <__subdf3+0x84>
80098178:	2984b03a 	or	r2,r5,r6
8009817c:	103f6826 	beq	r2,zero,80097f20 <__subdf3+0x68>
80098180:	39c03fcc 	andi	r7,r7,255
80098184:	003f6706 	br	80097f24 <__subdf3+0x6c>
80098188:	4086b03a 	or	r3,r8,r2
8009818c:	18015226 	beq	r3,zero,800986d8 <__subdf3+0x820>
80098190:	00c00434 	movhi	r3,16
80098194:	41400234 	orhi	r5,r8,8
80098198:	18ffffc4 	addi	r3,r3,-1
8009819c:	28ca703a 	and	r5,r5,r3
800981a0:	003f7e06 	br	80097f9c <__subdf3+0xe4>
800981a4:	10bfffc4 	addi	r2,r2,-1
800981a8:	1000491e 	bne	r2,zero,800982d0 <__subdf3+0x418>
800981ac:	898fc83a 	sub	r7,r17,r6
800981b0:	89e3803a 	cmpltu	r17,r17,r7
800981b4:	1947c83a 	sub	r3,r3,r5
800981b8:	1c47c83a 	sub	r3,r3,r17
800981bc:	3823883a 	mov	r17,r7
800981c0:	003f9b06 	br	80098030 <__subdf3+0x178>
800981c4:	2988b03a 	or	r4,r5,r6
800981c8:	203f5c26 	beq	r4,zero,80097f3c <__subdf3+0x84>
800981cc:	10bfffc4 	addi	r2,r2,-1
800981d0:	1000931e 	bne	r2,zero,80098420 <__subdf3+0x568>
800981d4:	898d883a 	add	r6,r17,r6
800981d8:	3463803a 	cmpltu	r17,r6,r17
800981dc:	1947883a 	add	r3,r3,r5
800981e0:	88c7883a 	add	r3,r17,r3
800981e4:	3023883a 	mov	r17,r6
800981e8:	003fd306 	br	80098138 <__subdf3+0x280>
800981ec:	1000541e 	bne	r2,zero,80098340 <__subdf3+0x488>
800981f0:	80800044 	addi	r2,r16,1
800981f4:	1081ffcc 	andi	r2,r2,2047
800981f8:	01000044 	movi	r4,1
800981fc:	2080a20e 	bge	r4,r2,80098488 <__subdf3+0x5d0>
80098200:	8989c83a 	sub	r4,r17,r6
80098204:	8905803a 	cmpltu	r2,r17,r4
80098208:	1967c83a 	sub	r19,r3,r5
8009820c:	98a7c83a 	sub	r19,r19,r2
80098210:	9880202c 	andhi	r2,r19,128
80098214:	10006326 	beq	r2,zero,800983a4 <__subdf3+0x4ec>
80098218:	3463c83a 	sub	r17,r6,r17
8009821c:	28c7c83a 	sub	r3,r5,r3
80098220:	344d803a 	cmpltu	r6,r6,r17
80098224:	19a7c83a 	sub	r19,r3,r6
80098228:	3825883a 	mov	r18,r7
8009822c:	983f861e 	bne	r19,zero,80098048 <__subdf3+0x190>
80098230:	8809883a 	mov	r4,r17
80098234:	0098b600 	call	80098b60 <__clzsi2>
80098238:	10800804 	addi	r2,r2,32
8009823c:	113ffe04 	addi	r4,r2,-8
80098240:	00c007c4 	movi	r3,31
80098244:	193f850e 	bge	r3,r4,8009805c <__subdf3+0x1a4>
80098248:	10bff604 	addi	r2,r2,-40
8009824c:	8884983a 	sll	r2,r17,r2
80098250:	0023883a 	mov	r17,zero
80098254:	243f880e 	bge	r4,r16,80098078 <__subdf3+0x1c0>
80098258:	00ffe034 	movhi	r3,65408
8009825c:	18ffffc4 	addi	r3,r3,-1
80098260:	8121c83a 	sub	r16,r16,r4
80098264:	10c6703a 	and	r3,r2,r3
80098268:	003f3406 	br	80097f3c <__subdf3+0x84>
8009826c:	9100004c 	andi	r4,r18,1
80098270:	000b883a 	mov	r5,zero
80098274:	0005883a 	mov	r2,zero
80098278:	003f4806 	br	80097f9c <__subdf3+0xe4>
8009827c:	298cb03a 	or	r6,r5,r6
80098280:	300cc03a 	cmpne	r6,r6,zero
80098284:	0005883a 	mov	r2,zero
80098288:	003f6406 	br	8009801c <__subdf3+0x164>
8009828c:	10009a1e 	bne	r2,zero,800984f8 <__subdf3+0x640>
80098290:	82400044 	addi	r9,r16,1
80098294:	4881ffcc 	andi	r2,r9,2047
80098298:	02800044 	movi	r10,1
8009829c:	5080670e 	bge	r10,r2,8009843c <__subdf3+0x584>
800982a0:	0081ffc4 	movi	r2,2047
800982a4:	4880af26 	beq	r9,r2,80098564 <__subdf3+0x6ac>
800982a8:	898d883a 	add	r6,r17,r6
800982ac:	1945883a 	add	r2,r3,r5
800982b0:	3447803a 	cmpltu	r3,r6,r17
800982b4:	1887883a 	add	r3,r3,r2
800982b8:	182297fa 	slli	r17,r3,31
800982bc:	300cd07a 	srli	r6,r6,1
800982c0:	1806d07a 	srli	r3,r3,1
800982c4:	4821883a 	mov	r16,r9
800982c8:	89a2b03a 	or	r17,r17,r6
800982cc:	003f1b06 	br	80097f3c <__subdf3+0x84>
800982d0:	0101ffc4 	movi	r4,2047
800982d4:	813f441e 	bne	r16,r4,80097fe8 <__subdf3+0x130>
800982d8:	003f1806 	br	80097f3c <__subdf3+0x84>
800982dc:	843ff844 	addi	r16,r16,-31
800982e0:	01400804 	movi	r5,32
800982e4:	1408d83a 	srl	r4,r2,r16
800982e8:	19405026 	beq	r3,r5,8009842c <__subdf3+0x574>
800982ec:	01401004 	movi	r5,64
800982f0:	28c7c83a 	sub	r3,r5,r3
800982f4:	10c4983a 	sll	r2,r2,r3
800982f8:	88a2b03a 	or	r17,r17,r2
800982fc:	8822c03a 	cmpne	r17,r17,zero
80098300:	2462b03a 	or	r17,r4,r17
80098304:	0007883a 	mov	r3,zero
80098308:	0021883a 	mov	r16,zero
8009830c:	003f6d06 	br	800980c4 <__subdf3+0x20c>
80098310:	11fff804 	addi	r7,r2,-32
80098314:	01000804 	movi	r4,32
80098318:	29ced83a 	srl	r7,r5,r7
8009831c:	11004526 	beq	r2,r4,80098434 <__subdf3+0x57c>
80098320:	01001004 	movi	r4,64
80098324:	2089c83a 	sub	r4,r4,r2
80098328:	2904983a 	sll	r2,r5,r4
8009832c:	118cb03a 	or	r6,r2,r6
80098330:	300cc03a 	cmpne	r6,r6,zero
80098334:	398cb03a 	or	r6,r7,r6
80098338:	0005883a 	mov	r2,zero
8009833c:	003f3706 	br	8009801c <__subdf3+0x164>
80098340:	80002a26 	beq	r16,zero,800983ec <__subdf3+0x534>
80098344:	0101ffc4 	movi	r4,2047
80098348:	49006626 	beq	r9,r4,800984e4 <__subdf3+0x62c>
8009834c:	0085c83a 	sub	r2,zero,r2
80098350:	18c02034 	orhi	r3,r3,128
80098354:	01000e04 	movi	r4,56
80098358:	20807e16 	blt	r4,r2,80098554 <__subdf3+0x69c>
8009835c:	010007c4 	movi	r4,31
80098360:	2080e716 	blt	r4,r2,80098700 <__subdf3+0x848>
80098364:	01000804 	movi	r4,32
80098368:	2089c83a 	sub	r4,r4,r2
8009836c:	1914983a 	sll	r10,r3,r4
80098370:	8890d83a 	srl	r8,r17,r2
80098374:	8908983a 	sll	r4,r17,r4
80098378:	1884d83a 	srl	r2,r3,r2
8009837c:	5222b03a 	or	r17,r10,r8
80098380:	2006c03a 	cmpne	r3,r4,zero
80098384:	88e2b03a 	or	r17,r17,r3
80098388:	3463c83a 	sub	r17,r6,r17
8009838c:	2885c83a 	sub	r2,r5,r2
80098390:	344d803a 	cmpltu	r6,r6,r17
80098394:	1187c83a 	sub	r3,r2,r6
80098398:	4821883a 	mov	r16,r9
8009839c:	3825883a 	mov	r18,r7
800983a0:	003f2306 	br	80098030 <__subdf3+0x178>
800983a4:	24d0b03a 	or	r8,r4,r19
800983a8:	40001b1e 	bne	r8,zero,80098418 <__subdf3+0x560>
800983ac:	0005883a 	mov	r2,zero
800983b0:	0009883a 	mov	r4,zero
800983b4:	0021883a 	mov	r16,zero
800983b8:	003f4906 	br	800980e0 <__subdf3+0x228>
800983bc:	010007c4 	movi	r4,31
800983c0:	20803a16 	blt	r4,r2,800984ac <__subdf3+0x5f4>
800983c4:	01000804 	movi	r4,32
800983c8:	2089c83a 	sub	r4,r4,r2
800983cc:	2912983a 	sll	r9,r5,r4
800983d0:	3090d83a 	srl	r8,r6,r2
800983d4:	3108983a 	sll	r4,r6,r4
800983d8:	2884d83a 	srl	r2,r5,r2
800983dc:	4a12b03a 	or	r9,r9,r8
800983e0:	2008c03a 	cmpne	r4,r4,zero
800983e4:	4912b03a 	or	r9,r9,r4
800983e8:	003f4e06 	br	80098124 <__subdf3+0x26c>
800983ec:	1c48b03a 	or	r4,r3,r17
800983f0:	20003c26 	beq	r4,zero,800984e4 <__subdf3+0x62c>
800983f4:	0084303a 	nor	r2,zero,r2
800983f8:	1000381e 	bne	r2,zero,800984dc <__subdf3+0x624>
800983fc:	3463c83a 	sub	r17,r6,r17
80098400:	28c5c83a 	sub	r2,r5,r3
80098404:	344d803a 	cmpltu	r6,r6,r17
80098408:	1187c83a 	sub	r3,r2,r6
8009840c:	4821883a 	mov	r16,r9
80098410:	3825883a 	mov	r18,r7
80098414:	003f0606 	br	80098030 <__subdf3+0x178>
80098418:	2023883a 	mov	r17,r4
8009841c:	003f0906 	br	80098044 <__subdf3+0x18c>
80098420:	0101ffc4 	movi	r4,2047
80098424:	813f3a1e 	bne	r16,r4,80098110 <__subdf3+0x258>
80098428:	003ec406 	br	80097f3c <__subdf3+0x84>
8009842c:	0005883a 	mov	r2,zero
80098430:	003fb106 	br	800982f8 <__subdf3+0x440>
80098434:	0005883a 	mov	r2,zero
80098438:	003fbc06 	br	8009832c <__subdf3+0x474>
8009843c:	1c44b03a 	or	r2,r3,r17
80098440:	80008e1e 	bne	r16,zero,8009867c <__subdf3+0x7c4>
80098444:	1000c826 	beq	r2,zero,80098768 <__subdf3+0x8b0>
80098448:	2984b03a 	or	r2,r5,r6
8009844c:	103ebb26 	beq	r2,zero,80097f3c <__subdf3+0x84>
80098450:	8989883a 	add	r4,r17,r6
80098454:	1945883a 	add	r2,r3,r5
80098458:	2447803a 	cmpltu	r3,r4,r17
8009845c:	1887883a 	add	r3,r3,r2
80098460:	1880202c 	andhi	r2,r3,128
80098464:	2023883a 	mov	r17,r4
80098468:	103f1626 	beq	r2,zero,800980c4 <__subdf3+0x20c>
8009846c:	00bfe034 	movhi	r2,65408
80098470:	10bfffc4 	addi	r2,r2,-1
80098474:	5021883a 	mov	r16,r10
80098478:	1886703a 	and	r3,r3,r2
8009847c:	003eaf06 	br	80097f3c <__subdf3+0x84>
80098480:	3825883a 	mov	r18,r7
80098484:	003f0f06 	br	800980c4 <__subdf3+0x20c>
80098488:	1c44b03a 	or	r2,r3,r17
8009848c:	8000251e 	bne	r16,zero,80098524 <__subdf3+0x66c>
80098490:	1000661e 	bne	r2,zero,8009862c <__subdf3+0x774>
80098494:	2990b03a 	or	r8,r5,r6
80098498:	40009626 	beq	r8,zero,800986f4 <__subdf3+0x83c>
8009849c:	2807883a 	mov	r3,r5
800984a0:	3023883a 	mov	r17,r6
800984a4:	3825883a 	mov	r18,r7
800984a8:	003ea406 	br	80097f3c <__subdf3+0x84>
800984ac:	127ff804 	addi	r9,r2,-32
800984b0:	01000804 	movi	r4,32
800984b4:	2a52d83a 	srl	r9,r5,r9
800984b8:	11008c26 	beq	r2,r4,800986ec <__subdf3+0x834>
800984bc:	01001004 	movi	r4,64
800984c0:	2085c83a 	sub	r2,r4,r2
800984c4:	2884983a 	sll	r2,r5,r2
800984c8:	118cb03a 	or	r6,r2,r6
800984cc:	300cc03a 	cmpne	r6,r6,zero
800984d0:	4992b03a 	or	r9,r9,r6
800984d4:	0005883a 	mov	r2,zero
800984d8:	003f1206 	br	80098124 <__subdf3+0x26c>
800984dc:	0101ffc4 	movi	r4,2047
800984e0:	493f9c1e 	bne	r9,r4,80098354 <__subdf3+0x49c>
800984e4:	2807883a 	mov	r3,r5
800984e8:	3023883a 	mov	r17,r6
800984ec:	4821883a 	mov	r16,r9
800984f0:	3825883a 	mov	r18,r7
800984f4:	003e9106 	br	80097f3c <__subdf3+0x84>
800984f8:	80001f1e 	bne	r16,zero,80098578 <__subdf3+0x6c0>
800984fc:	1c48b03a 	or	r4,r3,r17
80098500:	20005a26 	beq	r4,zero,8009866c <__subdf3+0x7b4>
80098504:	0084303a 	nor	r2,zero,r2
80098508:	1000561e 	bne	r2,zero,80098664 <__subdf3+0x7ac>
8009850c:	89a3883a 	add	r17,r17,r6
80098510:	1945883a 	add	r2,r3,r5
80098514:	898d803a 	cmpltu	r6,r17,r6
80098518:	3087883a 	add	r3,r6,r2
8009851c:	4821883a 	mov	r16,r9
80098520:	003f0506 	br	80098138 <__subdf3+0x280>
80098524:	10002b1e 	bne	r2,zero,800985d4 <__subdf3+0x71c>
80098528:	2984b03a 	or	r2,r5,r6
8009852c:	10008026 	beq	r2,zero,80098730 <__subdf3+0x878>
80098530:	2807883a 	mov	r3,r5
80098534:	3023883a 	mov	r17,r6
80098538:	3825883a 	mov	r18,r7
8009853c:	0401ffc4 	movi	r16,2047
80098540:	003e7e06 	br	80097f3c <__subdf3+0x84>
80098544:	3809883a 	mov	r4,r7
80098548:	0011883a 	mov	r8,zero
8009854c:	0005883a 	mov	r2,zero
80098550:	003ee306 	br	800980e0 <__subdf3+0x228>
80098554:	1c62b03a 	or	r17,r3,r17
80098558:	8822c03a 	cmpne	r17,r17,zero
8009855c:	0005883a 	mov	r2,zero
80098560:	003f8906 	br	80098388 <__subdf3+0x4d0>
80098564:	3809883a 	mov	r4,r7
80098568:	4821883a 	mov	r16,r9
8009856c:	0011883a 	mov	r8,zero
80098570:	0005883a 	mov	r2,zero
80098574:	003eda06 	br	800980e0 <__subdf3+0x228>
80098578:	0101ffc4 	movi	r4,2047
8009857c:	49003b26 	beq	r9,r4,8009866c <__subdf3+0x7b4>
80098580:	0085c83a 	sub	r2,zero,r2
80098584:	18c02034 	orhi	r3,r3,128
80098588:	01000e04 	movi	r4,56
8009858c:	20806e16 	blt	r4,r2,80098748 <__subdf3+0x890>
80098590:	010007c4 	movi	r4,31
80098594:	20807716 	blt	r4,r2,80098774 <__subdf3+0x8bc>
80098598:	01000804 	movi	r4,32
8009859c:	2089c83a 	sub	r4,r4,r2
800985a0:	1914983a 	sll	r10,r3,r4
800985a4:	8890d83a 	srl	r8,r17,r2
800985a8:	8908983a 	sll	r4,r17,r4
800985ac:	1884d83a 	srl	r2,r3,r2
800985b0:	5222b03a 	or	r17,r10,r8
800985b4:	2006c03a 	cmpne	r3,r4,zero
800985b8:	88e2b03a 	or	r17,r17,r3
800985bc:	89a3883a 	add	r17,r17,r6
800985c0:	1145883a 	add	r2,r2,r5
800985c4:	898d803a 	cmpltu	r6,r17,r6
800985c8:	3087883a 	add	r3,r6,r2
800985cc:	4821883a 	mov	r16,r9
800985d0:	003ed906 	br	80098138 <__subdf3+0x280>
800985d4:	2984b03a 	or	r2,r5,r6
800985d8:	10004226 	beq	r2,zero,800986e4 <__subdf3+0x82c>
800985dc:	1808d0fa 	srli	r4,r3,3
800985e0:	8822d0fa 	srli	r17,r17,3
800985e4:	1806977a 	slli	r3,r3,29
800985e8:	2080022c 	andhi	r2,r4,8
800985ec:	1c62b03a 	or	r17,r3,r17
800985f0:	10000826 	beq	r2,zero,80098614 <__subdf3+0x75c>
800985f4:	2812d0fa 	srli	r9,r5,3
800985f8:	4880022c 	andhi	r2,r9,8
800985fc:	1000051e 	bne	r2,zero,80098614 <__subdf3+0x75c>
80098600:	300cd0fa 	srli	r6,r6,3
80098604:	2804977a 	slli	r2,r5,29
80098608:	4809883a 	mov	r4,r9
8009860c:	3825883a 	mov	r18,r7
80098610:	11a2b03a 	or	r17,r2,r6
80098614:	8806d77a 	srli	r3,r17,29
80098618:	200890fa 	slli	r4,r4,3
8009861c:	882290fa 	slli	r17,r17,3
80098620:	0401ffc4 	movi	r16,2047
80098624:	1906b03a 	or	r3,r3,r4
80098628:	003e4406 	br	80097f3c <__subdf3+0x84>
8009862c:	2984b03a 	or	r2,r5,r6
80098630:	103e4226 	beq	r2,zero,80097f3c <__subdf3+0x84>
80098634:	8989c83a 	sub	r4,r17,r6
80098638:	8911803a 	cmpltu	r8,r17,r4
8009863c:	1945c83a 	sub	r2,r3,r5
80098640:	1205c83a 	sub	r2,r2,r8
80098644:	1200202c 	andhi	r8,r2,128
80098648:	403e9a26 	beq	r8,zero,800980b4 <__subdf3+0x1fc>
8009864c:	3463c83a 	sub	r17,r6,r17
80098650:	28c5c83a 	sub	r2,r5,r3
80098654:	344d803a 	cmpltu	r6,r6,r17
80098658:	1187c83a 	sub	r3,r2,r6
8009865c:	3825883a 	mov	r18,r7
80098660:	003e3606 	br	80097f3c <__subdf3+0x84>
80098664:	0101ffc4 	movi	r4,2047
80098668:	493fc71e 	bne	r9,r4,80098588 <__subdf3+0x6d0>
8009866c:	2807883a 	mov	r3,r5
80098670:	3023883a 	mov	r17,r6
80098674:	4821883a 	mov	r16,r9
80098678:	003e3006 	br	80097f3c <__subdf3+0x84>
8009867c:	10003626 	beq	r2,zero,80098758 <__subdf3+0x8a0>
80098680:	2984b03a 	or	r2,r5,r6
80098684:	10001726 	beq	r2,zero,800986e4 <__subdf3+0x82c>
80098688:	1808d0fa 	srli	r4,r3,3
8009868c:	8822d0fa 	srli	r17,r17,3
80098690:	1806977a 	slli	r3,r3,29
80098694:	2080022c 	andhi	r2,r4,8
80098698:	1c62b03a 	or	r17,r3,r17
8009869c:	10000726 	beq	r2,zero,800986bc <__subdf3+0x804>
800986a0:	2812d0fa 	srli	r9,r5,3
800986a4:	4880022c 	andhi	r2,r9,8
800986a8:	1000041e 	bne	r2,zero,800986bc <__subdf3+0x804>
800986ac:	300cd0fa 	srli	r6,r6,3
800986b0:	2804977a 	slli	r2,r5,29
800986b4:	4809883a 	mov	r4,r9
800986b8:	11a2b03a 	or	r17,r2,r6
800986bc:	8806d77a 	srli	r3,r17,29
800986c0:	200890fa 	slli	r4,r4,3
800986c4:	882290fa 	slli	r17,r17,3
800986c8:	3825883a 	mov	r18,r7
800986cc:	1906b03a 	or	r3,r3,r4
800986d0:	0401ffc4 	movi	r16,2047
800986d4:	003e1906 	br	80097f3c <__subdf3+0x84>
800986d8:	000b883a 	mov	r5,zero
800986dc:	0005883a 	mov	r2,zero
800986e0:	003e2e06 	br	80097f9c <__subdf3+0xe4>
800986e4:	0401ffc4 	movi	r16,2047
800986e8:	003e1406 	br	80097f3c <__subdf3+0x84>
800986ec:	0005883a 	mov	r2,zero
800986f0:	003f7506 	br	800984c8 <__subdf3+0x610>
800986f4:	0005883a 	mov	r2,zero
800986f8:	0009883a 	mov	r4,zero
800986fc:	003e7806 	br	800980e0 <__subdf3+0x228>
80098700:	123ff804 	addi	r8,r2,-32
80098704:	01000804 	movi	r4,32
80098708:	1a10d83a 	srl	r8,r3,r8
8009870c:	11002526 	beq	r2,r4,800987a4 <__subdf3+0x8ec>
80098710:	01001004 	movi	r4,64
80098714:	2085c83a 	sub	r2,r4,r2
80098718:	1884983a 	sll	r2,r3,r2
8009871c:	1444b03a 	or	r2,r2,r17
80098720:	1004c03a 	cmpne	r2,r2,zero
80098724:	40a2b03a 	or	r17,r8,r2
80098728:	0005883a 	mov	r2,zero
8009872c:	003f1606 	br	80098388 <__subdf3+0x4d0>
80098730:	02000434 	movhi	r8,16
80098734:	0009883a 	mov	r4,zero
80098738:	423fffc4 	addi	r8,r8,-1
8009873c:	00bfffc4 	movi	r2,-1
80098740:	0401ffc4 	movi	r16,2047
80098744:	003e6606 	br	800980e0 <__subdf3+0x228>
80098748:	1c62b03a 	or	r17,r3,r17
8009874c:	8822c03a 	cmpne	r17,r17,zero
80098750:	0005883a 	mov	r2,zero
80098754:	003f9906 	br	800985bc <__subdf3+0x704>
80098758:	2807883a 	mov	r3,r5
8009875c:	3023883a 	mov	r17,r6
80098760:	0401ffc4 	movi	r16,2047
80098764:	003df506 	br	80097f3c <__subdf3+0x84>
80098768:	2807883a 	mov	r3,r5
8009876c:	3023883a 	mov	r17,r6
80098770:	003df206 	br	80097f3c <__subdf3+0x84>
80098774:	123ff804 	addi	r8,r2,-32
80098778:	01000804 	movi	r4,32
8009877c:	1a10d83a 	srl	r8,r3,r8
80098780:	11000a26 	beq	r2,r4,800987ac <__subdf3+0x8f4>
80098784:	01001004 	movi	r4,64
80098788:	2085c83a 	sub	r2,r4,r2
8009878c:	1884983a 	sll	r2,r3,r2
80098790:	1444b03a 	or	r2,r2,r17
80098794:	1004c03a 	cmpne	r2,r2,zero
80098798:	40a2b03a 	or	r17,r8,r2
8009879c:	0005883a 	mov	r2,zero
800987a0:	003f8606 	br	800985bc <__subdf3+0x704>
800987a4:	0005883a 	mov	r2,zero
800987a8:	003fdc06 	br	8009871c <__subdf3+0x864>
800987ac:	0005883a 	mov	r2,zero
800987b0:	003ff706 	br	80098790 <__subdf3+0x8d8>

800987b4 <__fixdfsi>:
800987b4:	280cd53a 	srli	r6,r5,20
800987b8:	00c00434 	movhi	r3,16
800987bc:	18ffffc4 	addi	r3,r3,-1
800987c0:	3181ffcc 	andi	r6,r6,2047
800987c4:	01c0ff84 	movi	r7,1022
800987c8:	28c6703a 	and	r3,r5,r3
800987cc:	280ad7fa 	srli	r5,r5,31
800987d0:	3980120e 	bge	r7,r6,8009881c <__fixdfsi+0x68>
800987d4:	00810744 	movi	r2,1053
800987d8:	11800c16 	blt	r2,r6,8009880c <__fixdfsi+0x58>
800987dc:	00810cc4 	movi	r2,1075
800987e0:	1185c83a 	sub	r2,r2,r6
800987e4:	01c007c4 	movi	r7,31
800987e8:	18c00434 	orhi	r3,r3,16
800987ec:	38800d16 	blt	r7,r2,80098824 <__fixdfsi+0x70>
800987f0:	31befb44 	addi	r6,r6,-1043
800987f4:	2084d83a 	srl	r2,r4,r2
800987f8:	1986983a 	sll	r3,r3,r6
800987fc:	1884b03a 	or	r2,r3,r2
80098800:	28000726 	beq	r5,zero,80098820 <__fixdfsi+0x6c>
80098804:	0085c83a 	sub	r2,zero,r2
80098808:	f800283a 	ret
8009880c:	00a00034 	movhi	r2,32768
80098810:	10bfffc4 	addi	r2,r2,-1
80098814:	2885883a 	add	r2,r5,r2
80098818:	f800283a 	ret
8009881c:	0005883a 	mov	r2,zero
80098820:	f800283a 	ret
80098824:	008104c4 	movi	r2,1043
80098828:	1185c83a 	sub	r2,r2,r6
8009882c:	1884d83a 	srl	r2,r3,r2
80098830:	003ff306 	br	80098800 <__fixdfsi+0x4c>

80098834 <__floatsidf>:
80098834:	defffd04 	addi	sp,sp,-12
80098838:	dfc00215 	stw	ra,8(sp)
8009883c:	dc400115 	stw	r17,4(sp)
80098840:	dc000015 	stw	r16,0(sp)
80098844:	20002b26 	beq	r4,zero,800988f4 <__floatsidf+0xc0>
80098848:	2023883a 	mov	r17,r4
8009884c:	2020d7fa 	srli	r16,r4,31
80098850:	20002d16 	blt	r4,zero,80098908 <__floatsidf+0xd4>
80098854:	8809883a 	mov	r4,r17
80098858:	0098b600 	call	80098b60 <__clzsi2>
8009885c:	01410784 	movi	r5,1054
80098860:	288bc83a 	sub	r5,r5,r2
80098864:	01010cc4 	movi	r4,1075
80098868:	2149c83a 	sub	r4,r4,r5
8009886c:	00c007c4 	movi	r3,31
80098870:	1900160e 	bge	r3,r4,800988cc <__floatsidf+0x98>
80098874:	00c104c4 	movi	r3,1043
80098878:	1947c83a 	sub	r3,r3,r5
8009887c:	88c6983a 	sll	r3,r17,r3
80098880:	00800434 	movhi	r2,16
80098884:	10bfffc4 	addi	r2,r2,-1
80098888:	1886703a 	and	r3,r3,r2
8009888c:	2941ffcc 	andi	r5,r5,2047
80098890:	800d883a 	mov	r6,r16
80098894:	0005883a 	mov	r2,zero
80098898:	280a953a 	slli	r5,r5,20
8009889c:	31803fcc 	andi	r6,r6,255
800988a0:	01000434 	movhi	r4,16
800988a4:	300c97fa 	slli	r6,r6,31
800988a8:	213fffc4 	addi	r4,r4,-1
800988ac:	1906703a 	and	r3,r3,r4
800988b0:	1946b03a 	or	r3,r3,r5
800988b4:	1986b03a 	or	r3,r3,r6
800988b8:	dfc00217 	ldw	ra,8(sp)
800988bc:	dc400117 	ldw	r17,4(sp)
800988c0:	dc000017 	ldw	r16,0(sp)
800988c4:	dec00304 	addi	sp,sp,12
800988c8:	f800283a 	ret
800988cc:	00c002c4 	movi	r3,11
800988d0:	1887c83a 	sub	r3,r3,r2
800988d4:	88c6d83a 	srl	r3,r17,r3
800988d8:	8904983a 	sll	r2,r17,r4
800988dc:	01000434 	movhi	r4,16
800988e0:	213fffc4 	addi	r4,r4,-1
800988e4:	2941ffcc 	andi	r5,r5,2047
800988e8:	1906703a 	and	r3,r3,r4
800988ec:	800d883a 	mov	r6,r16
800988f0:	003fe906 	br	80098898 <__floatsidf+0x64>
800988f4:	000d883a 	mov	r6,zero
800988f8:	000b883a 	mov	r5,zero
800988fc:	0007883a 	mov	r3,zero
80098900:	0005883a 	mov	r2,zero
80098904:	003fe406 	br	80098898 <__floatsidf+0x64>
80098908:	0123c83a 	sub	r17,zero,r4
8009890c:	003fd106 	br	80098854 <__floatsidf+0x20>

80098910 <__floatunsidf>:
80098910:	defffe04 	addi	sp,sp,-8
80098914:	dc000015 	stw	r16,0(sp)
80098918:	dfc00115 	stw	ra,4(sp)
8009891c:	2021883a 	mov	r16,r4
80098920:	20002226 	beq	r4,zero,800989ac <__floatunsidf+0x9c>
80098924:	0098b600 	call	80098b60 <__clzsi2>
80098928:	01010784 	movi	r4,1054
8009892c:	2089c83a 	sub	r4,r4,r2
80098930:	01810cc4 	movi	r6,1075
80098934:	310dc83a 	sub	r6,r6,r4
80098938:	00c007c4 	movi	r3,31
8009893c:	1980120e 	bge	r3,r6,80098988 <__floatunsidf+0x78>
80098940:	00c104c4 	movi	r3,1043
80098944:	1907c83a 	sub	r3,r3,r4
80098948:	80ca983a 	sll	r5,r16,r3
8009894c:	00800434 	movhi	r2,16
80098950:	10bfffc4 	addi	r2,r2,-1
80098954:	2101ffcc 	andi	r4,r4,2047
80098958:	0021883a 	mov	r16,zero
8009895c:	288a703a 	and	r5,r5,r2
80098960:	2008953a 	slli	r4,r4,20
80098964:	00c00434 	movhi	r3,16
80098968:	18ffffc4 	addi	r3,r3,-1
8009896c:	28c6703a 	and	r3,r5,r3
80098970:	8005883a 	mov	r2,r16
80098974:	1906b03a 	or	r3,r3,r4
80098978:	dfc00117 	ldw	ra,4(sp)
8009897c:	dc000017 	ldw	r16,0(sp)
80098980:	dec00204 	addi	sp,sp,8
80098984:	f800283a 	ret
80098988:	00c002c4 	movi	r3,11
8009898c:	188bc83a 	sub	r5,r3,r2
80098990:	814ad83a 	srl	r5,r16,r5
80098994:	00c00434 	movhi	r3,16
80098998:	18ffffc4 	addi	r3,r3,-1
8009899c:	81a0983a 	sll	r16,r16,r6
800989a0:	2101ffcc 	andi	r4,r4,2047
800989a4:	28ca703a 	and	r5,r5,r3
800989a8:	003fed06 	br	80098960 <__floatunsidf+0x50>
800989ac:	0009883a 	mov	r4,zero
800989b0:	000b883a 	mov	r5,zero
800989b4:	003fea06 	br	80098960 <__floatunsidf+0x50>

800989b8 <__truncdfsf2>:
800989b8:	2810d53a 	srli	r8,r5,20
800989bc:	01c00434 	movhi	r7,16
800989c0:	39ffffc4 	addi	r7,r7,-1
800989c4:	29ce703a 	and	r7,r5,r7
800989c8:	4201ffcc 	andi	r8,r8,2047
800989cc:	380e90fa 	slli	r7,r7,3
800989d0:	200cd77a 	srli	r6,r4,29
800989d4:	42400044 	addi	r9,r8,1
800989d8:	4a41ffcc 	andi	r9,r9,2047
800989dc:	00c00044 	movi	r3,1
800989e0:	280ad7fa 	srli	r5,r5,31
800989e4:	31ceb03a 	or	r7,r6,r7
800989e8:	200490fa 	slli	r2,r4,3
800989ec:	1a40230e 	bge	r3,r9,80098a7c <__truncdfsf2+0xc4>
800989f0:	40ff2004 	addi	r3,r8,-896
800989f4:	01803f84 	movi	r6,254
800989f8:	30c01516 	blt	r6,r3,80098a50 <__truncdfsf2+0x98>
800989fc:	00c0380e 	bge	zero,r3,80098ae0 <__truncdfsf2+0x128>
80098a00:	200c91ba 	slli	r6,r4,6
80098a04:	380e90fa 	slli	r7,r7,3
80098a08:	1004d77a 	srli	r2,r2,29
80098a0c:	300cc03a 	cmpne	r6,r6,zero
80098a10:	31ccb03a 	or	r6,r6,r7
80098a14:	308cb03a 	or	r6,r6,r2
80098a18:	308001cc 	andi	r2,r6,7
80098a1c:	10000426 	beq	r2,zero,80098a30 <__truncdfsf2+0x78>
80098a20:	308003cc 	andi	r2,r6,15
80098a24:	01000104 	movi	r4,4
80098a28:	11000126 	beq	r2,r4,80098a30 <__truncdfsf2+0x78>
80098a2c:	31800104 	addi	r6,r6,4
80098a30:	3081002c 	andhi	r2,r6,1024
80098a34:	10001626 	beq	r2,zero,80098a90 <__truncdfsf2+0xd8>
80098a38:	18c00044 	addi	r3,r3,1
80098a3c:	00803fc4 	movi	r2,255
80098a40:	18800326 	beq	r3,r2,80098a50 <__truncdfsf2+0x98>
80098a44:	300c91ba 	slli	r6,r6,6
80098a48:	300cd27a 	srli	r6,r6,9
80098a4c:	00000206 	br	80098a58 <__truncdfsf2+0xa0>
80098a50:	00ffffc4 	movi	r3,-1
80098a54:	000d883a 	mov	r6,zero
80098a58:	18c03fcc 	andi	r3,r3,255
80098a5c:	180895fa 	slli	r4,r3,23
80098a60:	00c02034 	movhi	r3,128
80098a64:	280a97fa 	slli	r5,r5,31
80098a68:	18ffffc4 	addi	r3,r3,-1
80098a6c:	30c6703a 	and	r3,r6,r3
80098a70:	1906b03a 	or	r3,r3,r4
80098a74:	1944b03a 	or	r2,r3,r5
80098a78:	f800283a 	ret
80098a7c:	40000b1e 	bne	r8,zero,80098aac <__truncdfsf2+0xf4>
80098a80:	388cb03a 	or	r6,r7,r2
80098a84:	0007883a 	mov	r3,zero
80098a88:	30000426 	beq	r6,zero,80098a9c <__truncdfsf2+0xe4>
80098a8c:	01800144 	movi	r6,5
80098a90:	00803fc4 	movi	r2,255
80098a94:	300cd0fa 	srli	r6,r6,3
80098a98:	18800a26 	beq	r3,r2,80098ac4 <__truncdfsf2+0x10c>
80098a9c:	00802034 	movhi	r2,128
80098aa0:	10bfffc4 	addi	r2,r2,-1
80098aa4:	308c703a 	and	r6,r6,r2
80098aa8:	003feb06 	br	80098a58 <__truncdfsf2+0xa0>
80098aac:	3888b03a 	or	r4,r7,r2
80098ab0:	203fe726 	beq	r4,zero,80098a50 <__truncdfsf2+0x98>
80098ab4:	380c90fa 	slli	r6,r7,3
80098ab8:	00c03fc4 	movi	r3,255
80098abc:	31808034 	orhi	r6,r6,512
80098ac0:	003fd506 	br	80098a18 <__truncdfsf2+0x60>
80098ac4:	303fe226 	beq	r6,zero,80098a50 <__truncdfsf2+0x98>
80098ac8:	00802034 	movhi	r2,128
80098acc:	31801034 	orhi	r6,r6,64
80098ad0:	10bfffc4 	addi	r2,r2,-1
80098ad4:	00ffffc4 	movi	r3,-1
80098ad8:	308c703a 	and	r6,r6,r2
80098adc:	003fde06 	br	80098a58 <__truncdfsf2+0xa0>
80098ae0:	013ffa44 	movi	r4,-23
80098ae4:	19000e16 	blt	r3,r4,80098b20 <__truncdfsf2+0x168>
80098ae8:	01000784 	movi	r4,30
80098aec:	20c9c83a 	sub	r4,r4,r3
80098af0:	018007c4 	movi	r6,31
80098af4:	39c02034 	orhi	r7,r7,128
80098af8:	31000b16 	blt	r6,r4,80098b28 <__truncdfsf2+0x170>
80098afc:	423f2084 	addi	r8,r8,-894
80098b00:	120c983a 	sll	r6,r2,r8
80098b04:	3a0e983a 	sll	r7,r7,r8
80098b08:	1104d83a 	srl	r2,r2,r4
80098b0c:	300cc03a 	cmpne	r6,r6,zero
80098b10:	31ceb03a 	or	r7,r6,r7
80098b14:	388cb03a 	or	r6,r7,r2
80098b18:	0007883a 	mov	r3,zero
80098b1c:	003fbe06 	br	80098a18 <__truncdfsf2+0x60>
80098b20:	0007883a 	mov	r3,zero
80098b24:	003fd906 	br	80098a8c <__truncdfsf2+0xd4>
80098b28:	01bfff84 	movi	r6,-2
80098b2c:	30cdc83a 	sub	r6,r6,r3
80098b30:	00c00804 	movi	r3,32
80098b34:	398cd83a 	srl	r6,r7,r6
80098b38:	20c00726 	beq	r4,r3,80098b58 <__truncdfsf2+0x1a0>
80098b3c:	423f2884 	addi	r8,r8,-862
80098b40:	3a0e983a 	sll	r7,r7,r8
80098b44:	3884b03a 	or	r2,r7,r2
80098b48:	1004c03a 	cmpne	r2,r2,zero
80098b4c:	118cb03a 	or	r6,r2,r6
80098b50:	0007883a 	mov	r3,zero
80098b54:	003fb006 	br	80098a18 <__truncdfsf2+0x60>
80098b58:	000f883a 	mov	r7,zero
80098b5c:	003ff906 	br	80098b44 <__truncdfsf2+0x18c>

80098b60 <__clzsi2>:
80098b60:	00bfffd4 	movui	r2,65535
80098b64:	11000536 	bltu	r2,r4,80098b7c <__clzsi2+0x1c>
80098b68:	00803fc4 	movi	r2,255
80098b6c:	11000f36 	bltu	r2,r4,80098bac <__clzsi2+0x4c>
80098b70:	00800804 	movi	r2,32
80098b74:	0007883a 	mov	r3,zero
80098b78:	00000506 	br	80098b90 <__clzsi2+0x30>
80098b7c:	00804034 	movhi	r2,256
80098b80:	10bfffc4 	addi	r2,r2,-1
80098b84:	11000c2e 	bgeu	r2,r4,80098bb8 <__clzsi2+0x58>
80098b88:	00800204 	movi	r2,8
80098b8c:	00c00604 	movi	r3,24
80098b90:	20c8d83a 	srl	r4,r4,r3
80098b94:	00e002b4 	movhi	r3,32778
80098b98:	18f9e084 	addi	r3,r3,-6270
80098b9c:	1909883a 	add	r4,r3,r4
80098ba0:	20c00003 	ldbu	r3,0(r4)
80098ba4:	10c5c83a 	sub	r2,r2,r3
80098ba8:	f800283a 	ret
80098bac:	00800604 	movi	r2,24
80098bb0:	00c00204 	movi	r3,8
80098bb4:	003ff606 	br	80098b90 <__clzsi2+0x30>
80098bb8:	00800404 	movi	r2,16
80098bbc:	1007883a 	mov	r3,r2
80098bc0:	003ff306 	br	80098b90 <__clzsi2+0x30>

80098bc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80098bc4:	defffe04 	addi	sp,sp,-8
80098bc8:	dfc00115 	stw	ra,4(sp)
80098bcc:	df000015 	stw	fp,0(sp)
80098bd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80098bd4:	d0a00d17 	ldw	r2,-32716(gp)
80098bd8:	10000326 	beq	r2,zero,80098be8 <alt_get_errno+0x24>
80098bdc:	d0a00d17 	ldw	r2,-32716(gp)
80098be0:	103ee83a 	callr	r2
80098be4:	00000106 	br	80098bec <alt_get_errno+0x28>
80098be8:	d0a72404 	addi	r2,gp,-25456
}
80098bec:	e037883a 	mov	sp,fp
80098bf0:	dfc00117 	ldw	ra,4(sp)
80098bf4:	df000017 	ldw	fp,0(sp)
80098bf8:	dec00204 	addi	sp,sp,8
80098bfc:	f800283a 	ret

80098c00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
80098c00:	defffb04 	addi	sp,sp,-20
80098c04:	dfc00415 	stw	ra,16(sp)
80098c08:	df000315 	stw	fp,12(sp)
80098c0c:	df000304 	addi	fp,sp,12
80098c10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
80098c14:	e0bfff17 	ldw	r2,-4(fp)
80098c18:	10000616 	blt	r2,zero,80098c34 <close+0x34>
80098c1c:	e0bfff17 	ldw	r2,-4(fp)
80098c20:	10c00324 	muli	r3,r2,12
80098c24:	00a002b4 	movhi	r2,32778
80098c28:	10bcfe04 	addi	r2,r2,-3080
80098c2c:	1885883a 	add	r2,r3,r2
80098c30:	00000106 	br	80098c38 <close+0x38>
80098c34:	0005883a 	mov	r2,zero
80098c38:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
80098c3c:	e0bffd17 	ldw	r2,-12(fp)
80098c40:	10001926 	beq	r2,zero,80098ca8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
80098c44:	e0bffd17 	ldw	r2,-12(fp)
80098c48:	10800017 	ldw	r2,0(r2)
80098c4c:	10800417 	ldw	r2,16(r2)
80098c50:	10000626 	beq	r2,zero,80098c6c <close+0x6c>
80098c54:	e0bffd17 	ldw	r2,-12(fp)
80098c58:	10800017 	ldw	r2,0(r2)
80098c5c:	10800417 	ldw	r2,16(r2)
80098c60:	e13ffd17 	ldw	r4,-12(fp)
80098c64:	103ee83a 	callr	r2
80098c68:	00000106 	br	80098c70 <close+0x70>
80098c6c:	0005883a 	mov	r2,zero
80098c70:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
80098c74:	e13fff17 	ldw	r4,-4(fp)
80098c78:	009937c0 	call	8009937c <alt_release_fd>
    if (rval < 0)
80098c7c:	e0bffe17 	ldw	r2,-8(fp)
80098c80:	1000070e 	bge	r2,zero,80098ca0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
80098c84:	0098bc40 	call	80098bc4 <alt_get_errno>
80098c88:	1007883a 	mov	r3,r2
80098c8c:	e0bffe17 	ldw	r2,-8(fp)
80098c90:	0085c83a 	sub	r2,zero,r2
80098c94:	18800015 	stw	r2,0(r3)
      return -1;
80098c98:	00bfffc4 	movi	r2,-1
80098c9c:	00000706 	br	80098cbc <close+0xbc>
    }
    return 0;
80098ca0:	0005883a 	mov	r2,zero
80098ca4:	00000506 	br	80098cbc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
80098ca8:	0098bc40 	call	80098bc4 <alt_get_errno>
80098cac:	1007883a 	mov	r3,r2
80098cb0:	00801444 	movi	r2,81
80098cb4:	18800015 	stw	r2,0(r3)
    return -1;
80098cb8:	00bfffc4 	movi	r2,-1
  }
}
80098cbc:	e037883a 	mov	sp,fp
80098cc0:	dfc00117 	ldw	ra,4(sp)
80098cc4:	df000017 	ldw	fp,0(sp)
80098cc8:	dec00204 	addi	sp,sp,8
80098ccc:	f800283a 	ret

80098cd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
80098cd0:	defffc04 	addi	sp,sp,-16
80098cd4:	df000315 	stw	fp,12(sp)
80098cd8:	df000304 	addi	fp,sp,12
80098cdc:	e13ffd15 	stw	r4,-12(fp)
80098ce0:	e17ffe15 	stw	r5,-8(fp)
80098ce4:	e1bfff15 	stw	r6,-4(fp)
  return len;
80098ce8:	e0bfff17 	ldw	r2,-4(fp)
}
80098cec:	e037883a 	mov	sp,fp
80098cf0:	df000017 	ldw	fp,0(sp)
80098cf4:	dec00104 	addi	sp,sp,4
80098cf8:	f800283a 	ret

80098cfc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
80098cfc:	defffc04 	addi	sp,sp,-16
80098d00:	dfc00315 	stw	ra,12(sp)
80098d04:	df000215 	stw	fp,8(sp)
80098d08:	df000204 	addi	fp,sp,8
80098d0c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
80098d10:	d1600e04 	addi	r5,gp,-32712
80098d14:	e13fff17 	ldw	r4,-4(fp)
80098d18:	009c5580 	call	8009c558 <alt_find_dev>
80098d1c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
80098d20:	e0bffe17 	ldw	r2,-8(fp)
80098d24:	10000926 	beq	r2,zero,80098d4c <alt_flash_open_dev+0x50>
80098d28:	e0bffe17 	ldw	r2,-8(fp)
80098d2c:	10800317 	ldw	r2,12(r2)
80098d30:	10000626 	beq	r2,zero,80098d4c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
80098d34:	e0bffe17 	ldw	r2,-8(fp)
80098d38:	10800317 	ldw	r2,12(r2)
80098d3c:	e17fff17 	ldw	r5,-4(fp)
80098d40:	e13ffe17 	ldw	r4,-8(fp)
80098d44:	103ee83a 	callr	r2
80098d48:	00000106 	br	80098d50 <alt_flash_open_dev+0x54>
  }

  return dev;
80098d4c:	e0bffe17 	ldw	r2,-8(fp)
}
80098d50:	e037883a 	mov	sp,fp
80098d54:	dfc00117 	ldw	ra,4(sp)
80098d58:	df000017 	ldw	fp,0(sp)
80098d5c:	dec00204 	addi	sp,sp,8
80098d60:	f800283a 	ret

80098d64 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
80098d64:	defffd04 	addi	sp,sp,-12
80098d68:	dfc00215 	stw	ra,8(sp)
80098d6c:	df000115 	stw	fp,4(sp)
80098d70:	df000104 	addi	fp,sp,4
80098d74:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
80098d78:	e0bfff17 	ldw	r2,-4(fp)
80098d7c:	10000826 	beq	r2,zero,80098da0 <alt_flash_close_dev+0x3c>
80098d80:	e0bfff17 	ldw	r2,-4(fp)
80098d84:	10800417 	ldw	r2,16(r2)
80098d88:	10000526 	beq	r2,zero,80098da0 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
80098d8c:	e0bfff17 	ldw	r2,-4(fp)
80098d90:	10800417 	ldw	r2,16(r2)
80098d94:	e13fff17 	ldw	r4,-4(fp)
80098d98:	103ee83a 	callr	r2
  }
  return;
80098d9c:	0001883a 	nop
80098da0:	0001883a 	nop
}
80098da4:	e037883a 	mov	sp,fp
80098da8:	dfc00117 	ldw	ra,4(sp)
80098dac:	df000017 	ldw	fp,0(sp)
80098db0:	dec00204 	addi	sp,sp,8
80098db4:	f800283a 	ret

80098db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80098db8:	defffe04 	addi	sp,sp,-8
80098dbc:	dfc00115 	stw	ra,4(sp)
80098dc0:	df000015 	stw	fp,0(sp)
80098dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80098dc8:	d0a00d17 	ldw	r2,-32716(gp)
80098dcc:	10000326 	beq	r2,zero,80098ddc <alt_get_errno+0x24>
80098dd0:	d0a00d17 	ldw	r2,-32716(gp)
80098dd4:	103ee83a 	callr	r2
80098dd8:	00000106 	br	80098de0 <alt_get_errno+0x28>
80098ddc:	d0a72404 	addi	r2,gp,-25456
}
80098de0:	e037883a 	mov	sp,fp
80098de4:	dfc00117 	ldw	ra,4(sp)
80098de8:	df000017 	ldw	fp,0(sp)
80098dec:	dec00204 	addi	sp,sp,8
80098df0:	f800283a 	ret

80098df4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
80098df4:	defffb04 	addi	sp,sp,-20
80098df8:	dfc00415 	stw	ra,16(sp)
80098dfc:	df000315 	stw	fp,12(sp)
80098e00:	df000304 	addi	fp,sp,12
80098e04:	e13ffe15 	stw	r4,-8(fp)
80098e08:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80098e0c:	e0bffe17 	ldw	r2,-8(fp)
80098e10:	10000616 	blt	r2,zero,80098e2c <fstat+0x38>
80098e14:	e0bffe17 	ldw	r2,-8(fp)
80098e18:	10c00324 	muli	r3,r2,12
80098e1c:	00a002b4 	movhi	r2,32778
80098e20:	10bcfe04 	addi	r2,r2,-3080
80098e24:	1885883a 	add	r2,r3,r2
80098e28:	00000106 	br	80098e30 <fstat+0x3c>
80098e2c:	0005883a 	mov	r2,zero
80098e30:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
80098e34:	e0bffd17 	ldw	r2,-12(fp)
80098e38:	10001026 	beq	r2,zero,80098e7c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
80098e3c:	e0bffd17 	ldw	r2,-12(fp)
80098e40:	10800017 	ldw	r2,0(r2)
80098e44:	10800817 	ldw	r2,32(r2)
80098e48:	10000726 	beq	r2,zero,80098e68 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
80098e4c:	e0bffd17 	ldw	r2,-12(fp)
80098e50:	10800017 	ldw	r2,0(r2)
80098e54:	10800817 	ldw	r2,32(r2)
80098e58:	e17fff17 	ldw	r5,-4(fp)
80098e5c:	e13ffd17 	ldw	r4,-12(fp)
80098e60:	103ee83a 	callr	r2
80098e64:	00000a06 	br	80098e90 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
80098e68:	e0bfff17 	ldw	r2,-4(fp)
80098e6c:	00c80004 	movi	r3,8192
80098e70:	10c00115 	stw	r3,4(r2)
      return 0;
80098e74:	0005883a 	mov	r2,zero
80098e78:	00000506 	br	80098e90 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80098e7c:	0098db80 	call	80098db8 <alt_get_errno>
80098e80:	1007883a 	mov	r3,r2
80098e84:	00801444 	movi	r2,81
80098e88:	18800015 	stw	r2,0(r3)
    return -1;
80098e8c:	00bfffc4 	movi	r2,-1
  }
}
80098e90:	e037883a 	mov	sp,fp
80098e94:	dfc00117 	ldw	ra,4(sp)
80098e98:	df000017 	ldw	fp,0(sp)
80098e9c:	dec00204 	addi	sp,sp,8
80098ea0:	f800283a 	ret

80098ea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80098ea4:	defffe04 	addi	sp,sp,-8
80098ea8:	dfc00115 	stw	ra,4(sp)
80098eac:	df000015 	stw	fp,0(sp)
80098eb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80098eb4:	d0a00d17 	ldw	r2,-32716(gp)
80098eb8:	10000326 	beq	r2,zero,80098ec8 <alt_get_errno+0x24>
80098ebc:	d0a00d17 	ldw	r2,-32716(gp)
80098ec0:	103ee83a 	callr	r2
80098ec4:	00000106 	br	80098ecc <alt_get_errno+0x28>
80098ec8:	d0a72404 	addi	r2,gp,-25456
}
80098ecc:	e037883a 	mov	sp,fp
80098ed0:	dfc00117 	ldw	ra,4(sp)
80098ed4:	df000017 	ldw	fp,0(sp)
80098ed8:	dec00204 	addi	sp,sp,8
80098edc:	f800283a 	ret

80098ee0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
80098ee0:	deffed04 	addi	sp,sp,-76
80098ee4:	dfc01215 	stw	ra,72(sp)
80098ee8:	df001115 	stw	fp,68(sp)
80098eec:	df001104 	addi	fp,sp,68
80098ef0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80098ef4:	e0bfff17 	ldw	r2,-4(fp)
80098ef8:	10000616 	blt	r2,zero,80098f14 <isatty+0x34>
80098efc:	e0bfff17 	ldw	r2,-4(fp)
80098f00:	10c00324 	muli	r3,r2,12
80098f04:	00a002b4 	movhi	r2,32778
80098f08:	10bcfe04 	addi	r2,r2,-3080
80098f0c:	1885883a 	add	r2,r3,r2
80098f10:	00000106 	br	80098f18 <isatty+0x38>
80098f14:	0005883a 	mov	r2,zero
80098f18:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
80098f1c:	e0bfef17 	ldw	r2,-68(fp)
80098f20:	10000e26 	beq	r2,zero,80098f5c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
80098f24:	e0bfef17 	ldw	r2,-68(fp)
80098f28:	10800017 	ldw	r2,0(r2)
80098f2c:	10800817 	ldw	r2,32(r2)
80098f30:	1000021e 	bne	r2,zero,80098f3c <isatty+0x5c>
    {
      return 1;
80098f34:	00800044 	movi	r2,1
80098f38:	00000d06 	br	80098f70 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
80098f3c:	e0bff004 	addi	r2,fp,-64
80098f40:	100b883a 	mov	r5,r2
80098f44:	e13fff17 	ldw	r4,-4(fp)
80098f48:	0098df40 	call	80098df4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
80098f4c:	e0bff117 	ldw	r2,-60(fp)
80098f50:	10880020 	cmpeqi	r2,r2,8192
80098f54:	10803fcc 	andi	r2,r2,255
80098f58:	00000506 	br	80098f70 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80098f5c:	0098ea40 	call	80098ea4 <alt_get_errno>
80098f60:	1007883a 	mov	r3,r2
80098f64:	00801444 	movi	r2,81
80098f68:	18800015 	stw	r2,0(r3)
    return 0;
80098f6c:	0005883a 	mov	r2,zero
  }
}
80098f70:	e037883a 	mov	sp,fp
80098f74:	dfc00117 	ldw	ra,4(sp)
80098f78:	df000017 	ldw	fp,0(sp)
80098f7c:	dec00204 	addi	sp,sp,8
80098f80:	f800283a 	ret

80098f84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
80098f84:	defffc04 	addi	sp,sp,-16
80098f88:	df000315 	stw	fp,12(sp)
80098f8c:	df000304 	addi	fp,sp,12
80098f90:	e13ffd15 	stw	r4,-12(fp)
80098f94:	e17ffe15 	stw	r5,-8(fp)
80098f98:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
80098f9c:	e0fffe17 	ldw	r3,-8(fp)
80098fa0:	e0bffd17 	ldw	r2,-12(fp)
80098fa4:	18800c26 	beq	r3,r2,80098fd8 <alt_load_section+0x54>
  {
    while( to != end )
80098fa8:	00000806 	br	80098fcc <alt_load_section+0x48>
    {
      *to++ = *from++;
80098fac:	e0bffe17 	ldw	r2,-8(fp)
80098fb0:	10c00104 	addi	r3,r2,4
80098fb4:	e0fffe15 	stw	r3,-8(fp)
80098fb8:	e0fffd17 	ldw	r3,-12(fp)
80098fbc:	19000104 	addi	r4,r3,4
80098fc0:	e13ffd15 	stw	r4,-12(fp)
80098fc4:	18c00017 	ldw	r3,0(r3)
80098fc8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
80098fcc:	e0fffe17 	ldw	r3,-8(fp)
80098fd0:	e0bfff17 	ldw	r2,-4(fp)
80098fd4:	18bff51e 	bne	r3,r2,80098fac <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
80098fd8:	0001883a 	nop
80098fdc:	e037883a 	mov	sp,fp
80098fe0:	df000017 	ldw	fp,0(sp)
80098fe4:	dec00104 	addi	sp,sp,4
80098fe8:	f800283a 	ret

80098fec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
80098fec:	defffe04 	addi	sp,sp,-8
80098ff0:	dfc00115 	stw	ra,4(sp)
80098ff4:	df000015 	stw	fp,0(sp)
80098ff8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
80098ffc:	01a002b4 	movhi	r6,32778
80099000:	3181d404 	addi	r6,r6,1872
80099004:	016002b4 	movhi	r5,32778
80099008:	297acb04 	addi	r5,r5,-5332
8009900c:	012002b4 	movhi	r4,32778
80099010:	2101d404 	addi	r4,r4,1872
80099014:	0098f840 	call	80098f84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
80099018:	01a00234 	movhi	r6,32776
8009901c:	31809104 	addi	r6,r6,580
80099020:	01600234 	movhi	r5,32776
80099024:	29400804 	addi	r5,r5,32
80099028:	01200234 	movhi	r4,32776
8009902c:	21000804 	addi	r4,r4,32
80099030:	0098f840 	call	80098f84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
80099034:	01a002b4 	movhi	r6,32778
80099038:	31bacb04 	addi	r6,r6,-5332
8009903c:	016002b4 	movhi	r5,32778
80099040:	29759c04 	addi	r5,r5,-10640
80099044:	012002b4 	movhi	r4,32778
80099048:	21359c04 	addi	r4,r4,-10640
8009904c:	0098f840 	call	80098f84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
80099050:	009c3700 	call	8009c370 <alt_dcache_flush_all>
  alt_icache_flush_all();
80099054:	009c5e80 	call	8009c5e8 <alt_icache_flush_all>
}
80099058:	0001883a 	nop
8009905c:	e037883a 	mov	sp,fp
80099060:	dfc00117 	ldw	ra,4(sp)
80099064:	df000017 	ldw	fp,0(sp)
80099068:	dec00204 	addi	sp,sp,8
8009906c:	f800283a 	ret

80099070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80099070:	defffe04 	addi	sp,sp,-8
80099074:	dfc00115 	stw	ra,4(sp)
80099078:	df000015 	stw	fp,0(sp)
8009907c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80099080:	d0a00d17 	ldw	r2,-32716(gp)
80099084:	10000326 	beq	r2,zero,80099094 <alt_get_errno+0x24>
80099088:	d0a00d17 	ldw	r2,-32716(gp)
8009908c:	103ee83a 	callr	r2
80099090:	00000106 	br	80099098 <alt_get_errno+0x28>
80099094:	d0a72404 	addi	r2,gp,-25456
}
80099098:	e037883a 	mov	sp,fp
8009909c:	dfc00117 	ldw	ra,4(sp)
800990a0:	df000017 	ldw	fp,0(sp)
800990a4:	dec00204 	addi	sp,sp,8
800990a8:	f800283a 	ret

800990ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
800990ac:	defff904 	addi	sp,sp,-28
800990b0:	dfc00615 	stw	ra,24(sp)
800990b4:	df000515 	stw	fp,20(sp)
800990b8:	df000504 	addi	fp,sp,20
800990bc:	e13ffd15 	stw	r4,-12(fp)
800990c0:	e17ffe15 	stw	r5,-8(fp)
800990c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
800990c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
800990cc:	e0bffd17 	ldw	r2,-12(fp)
800990d0:	10000616 	blt	r2,zero,800990ec <lseek+0x40>
800990d4:	e0bffd17 	ldw	r2,-12(fp)
800990d8:	10c00324 	muli	r3,r2,12
800990dc:	00a002b4 	movhi	r2,32778
800990e0:	10bcfe04 	addi	r2,r2,-3080
800990e4:	1885883a 	add	r2,r3,r2
800990e8:	00000106 	br	800990f0 <lseek+0x44>
800990ec:	0005883a 	mov	r2,zero
800990f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
800990f4:	e0bffc17 	ldw	r2,-16(fp)
800990f8:	10001026 	beq	r2,zero,8009913c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
800990fc:	e0bffc17 	ldw	r2,-16(fp)
80099100:	10800017 	ldw	r2,0(r2)
80099104:	10800717 	ldw	r2,28(r2)
80099108:	10000926 	beq	r2,zero,80099130 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8009910c:	e0bffc17 	ldw	r2,-16(fp)
80099110:	10800017 	ldw	r2,0(r2)
80099114:	10800717 	ldw	r2,28(r2)
80099118:	e1bfff17 	ldw	r6,-4(fp)
8009911c:	e17ffe17 	ldw	r5,-8(fp)
80099120:	e13ffc17 	ldw	r4,-16(fp)
80099124:	103ee83a 	callr	r2
80099128:	e0bffb15 	stw	r2,-20(fp)
8009912c:	00000506 	br	80099144 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
80099130:	00bfde84 	movi	r2,-134
80099134:	e0bffb15 	stw	r2,-20(fp)
80099138:	00000206 	br	80099144 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8009913c:	00bfebc4 	movi	r2,-81
80099140:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
80099144:	e0bffb17 	ldw	r2,-20(fp)
80099148:	1000070e 	bge	r2,zero,80099168 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
8009914c:	00990700 	call	80099070 <alt_get_errno>
80099150:	1007883a 	mov	r3,r2
80099154:	e0bffb17 	ldw	r2,-20(fp)
80099158:	0085c83a 	sub	r2,zero,r2
8009915c:	18800015 	stw	r2,0(r3)
    rc = -1;
80099160:	00bfffc4 	movi	r2,-1
80099164:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
80099168:	e0bffb17 	ldw	r2,-20(fp)
}
8009916c:	e037883a 	mov	sp,fp
80099170:	dfc00117 	ldw	ra,4(sp)
80099174:	df000017 	ldw	fp,0(sp)
80099178:	dec00204 	addi	sp,sp,8
8009917c:	f800283a 	ret

80099180 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80099180:	defffd04 	addi	sp,sp,-12
80099184:	dfc00215 	stw	ra,8(sp)
80099188:	df000115 	stw	fp,4(sp)
8009918c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
80099190:	0009883a 	mov	r4,zero
80099194:	00995f80 	call	800995f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
80099198:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
8009919c:	00996300 	call	80099630 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
800991a0:	01a002b4 	movhi	r6,32778
800991a4:	31ba2404 	addi	r6,r6,-6000
800991a8:	016002b4 	movhi	r5,32778
800991ac:	297a2404 	addi	r5,r5,-6000
800991b0:	012002b4 	movhi	r4,32778
800991b4:	213a2404 	addi	r4,r4,-6000
800991b8:	009c9800 	call	8009c980 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
800991bc:	009c4980 	call	8009c498 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
800991c0:	012002b4 	movhi	r4,32778
800991c4:	21313e04 	addi	r4,r4,-15112
800991c8:	009d3580 	call	8009d358 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
800991cc:	d0a72817 	ldw	r2,-25440(gp)
800991d0:	d0e72917 	ldw	r3,-25436(gp)
800991d4:	d1272a17 	ldw	r4,-25432(gp)
800991d8:	200d883a 	mov	r6,r4
800991dc:	180b883a 	mov	r5,r3
800991e0:	1009883a 	mov	r4,r2
800991e4:	00821f80 	call	800821f8 <main>
800991e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
800991ec:	01000044 	movi	r4,1
800991f0:	0098c000 	call	80098c00 <close>
  exit (result);
800991f4:	e13fff17 	ldw	r4,-4(fp)
800991f8:	009d36c0 	call	8009d36c <exit>

800991fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
800991fc:	defffe04 	addi	sp,sp,-8
80099200:	df000115 	stw	fp,4(sp)
80099204:	df000104 	addi	fp,sp,4
80099208:	e13fff15 	stw	r4,-4(fp)
}
8009920c:	0001883a 	nop
80099210:	e037883a 	mov	sp,fp
80099214:	df000017 	ldw	fp,0(sp)
80099218:	dec00104 	addi	sp,sp,4
8009921c:	f800283a 	ret

80099220 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80099220:	defffe04 	addi	sp,sp,-8
80099224:	df000115 	stw	fp,4(sp)
80099228:	df000104 	addi	fp,sp,4
8009922c:	e13fff15 	stw	r4,-4(fp)
}
80099230:	0001883a 	nop
80099234:	e037883a 	mov	sp,fp
80099238:	df000017 	ldw	fp,0(sp)
8009923c:	dec00104 	addi	sp,sp,4
80099240:	f800283a 	ret

80099244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80099244:	defffe04 	addi	sp,sp,-8
80099248:	dfc00115 	stw	ra,4(sp)
8009924c:	df000015 	stw	fp,0(sp)
80099250:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80099254:	d0a00d17 	ldw	r2,-32716(gp)
80099258:	10000326 	beq	r2,zero,80099268 <alt_get_errno+0x24>
8009925c:	d0a00d17 	ldw	r2,-32716(gp)
80099260:	103ee83a 	callr	r2
80099264:	00000106 	br	8009926c <alt_get_errno+0x28>
80099268:	d0a72404 	addi	r2,gp,-25456
}
8009926c:	e037883a 	mov	sp,fp
80099270:	dfc00117 	ldw	ra,4(sp)
80099274:	df000017 	ldw	fp,0(sp)
80099278:	dec00204 	addi	sp,sp,8
8009927c:	f800283a 	ret

80099280 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80099280:	defff904 	addi	sp,sp,-28
80099284:	dfc00615 	stw	ra,24(sp)
80099288:	df000515 	stw	fp,20(sp)
8009928c:	df000504 	addi	fp,sp,20
80099290:	e13ffd15 	stw	r4,-12(fp)
80099294:	e17ffe15 	stw	r5,-8(fp)
80099298:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8009929c:	e0bffd17 	ldw	r2,-12(fp)
800992a0:	10000616 	blt	r2,zero,800992bc <read+0x3c>
800992a4:	e0bffd17 	ldw	r2,-12(fp)
800992a8:	10c00324 	muli	r3,r2,12
800992ac:	00a002b4 	movhi	r2,32778
800992b0:	10bcfe04 	addi	r2,r2,-3080
800992b4:	1885883a 	add	r2,r3,r2
800992b8:	00000106 	br	800992c0 <read+0x40>
800992bc:	0005883a 	mov	r2,zero
800992c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
800992c4:	e0bffb17 	ldw	r2,-20(fp)
800992c8:	10002226 	beq	r2,zero,80099354 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
800992cc:	e0bffb17 	ldw	r2,-20(fp)
800992d0:	10800217 	ldw	r2,8(r2)
800992d4:	108000cc 	andi	r2,r2,3
800992d8:	10800060 	cmpeqi	r2,r2,1
800992dc:	1000181e 	bne	r2,zero,80099340 <read+0xc0>
        (fd->dev->read))
800992e0:	e0bffb17 	ldw	r2,-20(fp)
800992e4:	10800017 	ldw	r2,0(r2)
800992e8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
800992ec:	10001426 	beq	r2,zero,80099340 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
800992f0:	e0bffb17 	ldw	r2,-20(fp)
800992f4:	10800017 	ldw	r2,0(r2)
800992f8:	10800517 	ldw	r2,20(r2)
800992fc:	e0ffff17 	ldw	r3,-4(fp)
80099300:	180d883a 	mov	r6,r3
80099304:	e17ffe17 	ldw	r5,-8(fp)
80099308:	e13ffb17 	ldw	r4,-20(fp)
8009930c:	103ee83a 	callr	r2
80099310:	e0bffc15 	stw	r2,-16(fp)
80099314:	e0bffc17 	ldw	r2,-16(fp)
80099318:	1000070e 	bge	r2,zero,80099338 <read+0xb8>
        {
          ALT_ERRNO = -rval;
8009931c:	00992440 	call	80099244 <alt_get_errno>
80099320:	1007883a 	mov	r3,r2
80099324:	e0bffc17 	ldw	r2,-16(fp)
80099328:	0085c83a 	sub	r2,zero,r2
8009932c:	18800015 	stw	r2,0(r3)
          return -1;
80099330:	00bfffc4 	movi	r2,-1
80099334:	00000c06 	br	80099368 <read+0xe8>
        }
        return rval;
80099338:	e0bffc17 	ldw	r2,-16(fp)
8009933c:	00000a06 	br	80099368 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
80099340:	00992440 	call	80099244 <alt_get_errno>
80099344:	1007883a 	mov	r3,r2
80099348:	00800344 	movi	r2,13
8009934c:	18800015 	stw	r2,0(r3)
80099350:	00000406 	br	80099364 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
80099354:	00992440 	call	80099244 <alt_get_errno>
80099358:	1007883a 	mov	r3,r2
8009935c:	00801444 	movi	r2,81
80099360:	18800015 	stw	r2,0(r3)
  }
  return -1;
80099364:	00bfffc4 	movi	r2,-1
}
80099368:	e037883a 	mov	sp,fp
8009936c:	dfc00117 	ldw	ra,4(sp)
80099370:	df000017 	ldw	fp,0(sp)
80099374:	dec00204 	addi	sp,sp,8
80099378:	f800283a 	ret

8009937c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8009937c:	defffe04 	addi	sp,sp,-8
80099380:	df000115 	stw	fp,4(sp)
80099384:	df000104 	addi	fp,sp,4
80099388:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8009938c:	e0bfff17 	ldw	r2,-4(fp)
80099390:	108000d0 	cmplti	r2,r2,3
80099394:	10000d1e 	bne	r2,zero,800993cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
80099398:	00a002b4 	movhi	r2,32778
8009939c:	10bcfe04 	addi	r2,r2,-3080
800993a0:	e0ffff17 	ldw	r3,-4(fp)
800993a4:	18c00324 	muli	r3,r3,12
800993a8:	10c5883a 	add	r2,r2,r3
800993ac:	10800204 	addi	r2,r2,8
800993b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
800993b4:	00a002b4 	movhi	r2,32778
800993b8:	10bcfe04 	addi	r2,r2,-3080
800993bc:	e0ffff17 	ldw	r3,-4(fp)
800993c0:	18c00324 	muli	r3,r3,12
800993c4:	10c5883a 	add	r2,r2,r3
800993c8:	10000015 	stw	zero,0(r2)
  }
}
800993cc:	0001883a 	nop
800993d0:	e037883a 	mov	sp,fp
800993d4:	df000017 	ldw	fp,0(sp)
800993d8:	dec00104 	addi	sp,sp,4
800993dc:	f800283a 	ret

800993e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
800993e0:	defff904 	addi	sp,sp,-28
800993e4:	df000615 	stw	fp,24(sp)
800993e8:	df000604 	addi	fp,sp,24
800993ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800993f0:	0005303a 	rdctl	r2,status
800993f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800993f8:	e0fffe17 	ldw	r3,-8(fp)
800993fc:	00bfff84 	movi	r2,-2
80099400:	1884703a 	and	r2,r3,r2
80099404:	1001703a 	wrctl	status,r2
  
  return context;
80099408:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8009940c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80099410:	d0a01017 	ldw	r2,-32704(gp)
80099414:	10c000c4 	addi	r3,r2,3
80099418:	00bfff04 	movi	r2,-4
8009941c:	1884703a 	and	r2,r3,r2
80099420:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80099424:	d0e01017 	ldw	r3,-32704(gp)
80099428:	e0bfff17 	ldw	r2,-4(fp)
8009942c:	1887883a 	add	r3,r3,r2
80099430:	00a00434 	movhi	r2,32784
80099434:	10b40004 	addi	r2,r2,-12288
80099438:	10c0062e 	bgeu	r2,r3,80099454 <sbrk+0x74>
8009943c:	e0bffb17 	ldw	r2,-20(fp)
80099440:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80099444:	e0bffa17 	ldw	r2,-24(fp)
80099448:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8009944c:	00bfffc4 	movi	r2,-1
80099450:	00000b06 	br	80099480 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
80099454:	d0a01017 	ldw	r2,-32704(gp)
80099458:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
8009945c:	d0e01017 	ldw	r3,-32704(gp)
80099460:	e0bfff17 	ldw	r2,-4(fp)
80099464:	1885883a 	add	r2,r3,r2
80099468:	d0a01015 	stw	r2,-32704(gp)
8009946c:	e0bffb17 	ldw	r2,-20(fp)
80099470:	e0bffc15 	stw	r2,-16(fp)
80099474:	e0bffc17 	ldw	r2,-16(fp)
80099478:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8009947c:	e0bffd17 	ldw	r2,-12(fp)
} 
80099480:	e037883a 	mov	sp,fp
80099484:	df000017 	ldw	fp,0(sp)
80099488:	dec00104 	addi	sp,sp,4
8009948c:	f800283a 	ret

80099490 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80099490:	defffe04 	addi	sp,sp,-8
80099494:	dfc00115 	stw	ra,4(sp)
80099498:	df000015 	stw	fp,0(sp)
8009949c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
800994a0:	d0a00d17 	ldw	r2,-32716(gp)
800994a4:	10000326 	beq	r2,zero,800994b4 <alt_get_errno+0x24>
800994a8:	d0a00d17 	ldw	r2,-32716(gp)
800994ac:	103ee83a 	callr	r2
800994b0:	00000106 	br	800994b8 <alt_get_errno+0x28>
800994b4:	d0a72404 	addi	r2,gp,-25456
}
800994b8:	e037883a 	mov	sp,fp
800994bc:	dfc00117 	ldw	ra,4(sp)
800994c0:	df000017 	ldw	fp,0(sp)
800994c4:	dec00204 	addi	sp,sp,8
800994c8:	f800283a 	ret

800994cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
800994cc:	defff904 	addi	sp,sp,-28
800994d0:	dfc00615 	stw	ra,24(sp)
800994d4:	df000515 	stw	fp,20(sp)
800994d8:	df000504 	addi	fp,sp,20
800994dc:	e13ffd15 	stw	r4,-12(fp)
800994e0:	e17ffe15 	stw	r5,-8(fp)
800994e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
800994e8:	e0bffd17 	ldw	r2,-12(fp)
800994ec:	10000616 	blt	r2,zero,80099508 <write+0x3c>
800994f0:	e0bffd17 	ldw	r2,-12(fp)
800994f4:	10c00324 	muli	r3,r2,12
800994f8:	00a002b4 	movhi	r2,32778
800994fc:	10bcfe04 	addi	r2,r2,-3080
80099500:	1885883a 	add	r2,r3,r2
80099504:	00000106 	br	8009950c <write+0x40>
80099508:	0005883a 	mov	r2,zero
8009950c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80099510:	e0bffb17 	ldw	r2,-20(fp)
80099514:	10002126 	beq	r2,zero,8009959c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
80099518:	e0bffb17 	ldw	r2,-20(fp)
8009951c:	10800217 	ldw	r2,8(r2)
80099520:	108000cc 	andi	r2,r2,3
80099524:	10001826 	beq	r2,zero,80099588 <write+0xbc>
80099528:	e0bffb17 	ldw	r2,-20(fp)
8009952c:	10800017 	ldw	r2,0(r2)
80099530:	10800617 	ldw	r2,24(r2)
80099534:	10001426 	beq	r2,zero,80099588 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
80099538:	e0bffb17 	ldw	r2,-20(fp)
8009953c:	10800017 	ldw	r2,0(r2)
80099540:	10800617 	ldw	r2,24(r2)
80099544:	e0ffff17 	ldw	r3,-4(fp)
80099548:	180d883a 	mov	r6,r3
8009954c:	e17ffe17 	ldw	r5,-8(fp)
80099550:	e13ffb17 	ldw	r4,-20(fp)
80099554:	103ee83a 	callr	r2
80099558:	e0bffc15 	stw	r2,-16(fp)
8009955c:	e0bffc17 	ldw	r2,-16(fp)
80099560:	1000070e 	bge	r2,zero,80099580 <write+0xb4>
      {
        ALT_ERRNO = -rval;
80099564:	00994900 	call	80099490 <alt_get_errno>
80099568:	1007883a 	mov	r3,r2
8009956c:	e0bffc17 	ldw	r2,-16(fp)
80099570:	0085c83a 	sub	r2,zero,r2
80099574:	18800015 	stw	r2,0(r3)
        return -1;
80099578:	00bfffc4 	movi	r2,-1
8009957c:	00000c06 	br	800995b0 <write+0xe4>
      }
      return rval;
80099580:	e0bffc17 	ldw	r2,-16(fp)
80099584:	00000a06 	br	800995b0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
80099588:	00994900 	call	80099490 <alt_get_errno>
8009958c:	1007883a 	mov	r3,r2
80099590:	00800344 	movi	r2,13
80099594:	18800015 	stw	r2,0(r3)
80099598:	00000406 	br	800995ac <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8009959c:	00994900 	call	80099490 <alt_get_errno>
800995a0:	1007883a 	mov	r3,r2
800995a4:	00801444 	movi	r2,81
800995a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
800995ac:	00bfffc4 	movi	r2,-1
}
800995b0:	e037883a 	mov	sp,fp
800995b4:	dfc00117 	ldw	ra,4(sp)
800995b8:	df000017 	ldw	fp,0(sp)
800995bc:	dec00204 	addi	sp,sp,8
800995c0:	f800283a 	ret

800995c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
800995c4:	defffd04 	addi	sp,sp,-12
800995c8:	dfc00215 	stw	ra,8(sp)
800995cc:	df000115 	stw	fp,4(sp)
800995d0:	df000104 	addi	fp,sp,4
800995d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
800995d8:	d1600a04 	addi	r5,gp,-32728
800995dc:	e13fff17 	ldw	r4,-4(fp)
800995e0:	009c3f40 	call	8009c3f4 <alt_dev_llist_insert>
}
800995e4:	e037883a 	mov	sp,fp
800995e8:	dfc00117 	ldw	ra,4(sp)
800995ec:	df000017 	ldw	fp,0(sp)
800995f0:	dec00204 	addi	sp,sp,8
800995f4:	f800283a 	ret

800995f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
800995f8:	defffd04 	addi	sp,sp,-12
800995fc:	dfc00215 	stw	ra,8(sp)
80099600:	df000115 	stw	fp,4(sp)
80099604:	df000104 	addi	fp,sp,4
80099608:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
8009960c:	009d05c0 	call	8009d05c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
80099610:	00800044 	movi	r2,1
80099614:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
80099618:	0001883a 	nop
8009961c:	e037883a 	mov	sp,fp
80099620:	dfc00117 	ldw	ra,4(sp)
80099624:	df000017 	ldw	fp,0(sp)
80099628:	dec00204 	addi	sp,sp,8
8009962c:	f800283a 	ret

80099630 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80099630:	defffe04 	addi	sp,sp,-8
80099634:	dfc00115 	stw	ra,4(sp)
80099638:	df000015 	stw	fp,0(sp)
8009963c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
80099640:	01c0fa04 	movi	r7,1000
80099644:	01800084 	movi	r6,2
80099648:	000b883a 	mov	r5,zero
8009964c:	01200434 	movhi	r4,32784
80099650:	21041004 	addi	r4,r4,4160
80099654:	009a1f40 	call	8009a1f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
80099658:	01800044 	movi	r6,1
8009965c:	000b883a 	mov	r5,zero
80099660:	012002b4 	movhi	r4,32778
80099664:	213d6804 	addi	r4,r4,-2656
80099668:	00998780 	call	80099878 <altera_avalon_jtag_uart_init>
8009966c:	012002b4 	movhi	r4,32778
80099670:	213d5e04 	addi	r4,r4,-2696
80099674:	00995c40 	call	800995c4 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_1_DMA, dma_fifo_subsystem_1_dma);
80099678:	00a002b4 	movhi	r2,32778
8009967c:	10817604 	addi	r2,r2,1496
80099680:	10c00717 	ldw	r3,28(r2)
80099684:	00a002b4 	movhi	r2,32778
80099688:	10817604 	addi	r2,r2,1496
8009968c:	10800817 	ldw	r2,32(r2)
80099690:	100d883a 	mov	r6,r2
80099694:	180b883a 	mov	r5,r3
80099698:	012002b4 	movhi	r4,32778
8009969c:	21017604 	addi	r4,r4,1496
800996a0:	009be3c0 	call	8009be3c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUSBYSTEM_DMA, dma_fifo_susbystem_dma);
800996a4:	00a002b4 	movhi	r2,32778
800996a8:	10818e04 	addi	r2,r2,1592
800996ac:	10c00717 	ldw	r3,28(r2)
800996b0:	00a002b4 	movhi	r2,32778
800996b4:	10818e04 	addi	r2,r2,1592
800996b8:	10800817 	ldw	r2,32(r2)
800996bc:	100d883a 	mov	r6,r2
800996c0:	180b883a 	mov	r5,r3
800996c4:	012002b4 	movhi	r4,32778
800996c8:	21018e04 	addi	r4,r4,1592
800996cc:	009be3c0 	call	8009be3c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( FROM_ETH_TO_DDR_ETH_DMA, from_ETH_to_DDR_ETH_DMA);
800996d0:	00a002b4 	movhi	r2,32778
800996d4:	1081a604 	addi	r2,r2,1688
800996d8:	10c00717 	ldw	r3,28(r2)
800996dc:	00a002b4 	movhi	r2,32778
800996e0:	1081a604 	addi	r2,r2,1688
800996e4:	10800817 	ldw	r2,32(r2)
800996e8:	100d883a 	mov	r6,r2
800996ec:	180b883a 	mov	r5,r3
800996f0:	012002b4 	movhi	r4,32778
800996f4:	2101a604 	addi	r4,r4,1688
800996f8:	009be3c0 	call	8009be3c <alt_msgdma_init>
}
800996fc:	0001883a 	nop
80099700:	e037883a 	mov	sp,fp
80099704:	dfc00117 	ldw	ra,4(sp)
80099708:	df000017 	ldw	fp,0(sp)
8009970c:	dec00204 	addi	sp,sp,8
80099710:	f800283a 	ret

80099714 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
80099714:	defffa04 	addi	sp,sp,-24
80099718:	dfc00515 	stw	ra,20(sp)
8009971c:	df000415 	stw	fp,16(sp)
80099720:	df000404 	addi	fp,sp,16
80099724:	e13ffd15 	stw	r4,-12(fp)
80099728:	e17ffe15 	stw	r5,-8(fp)
8009972c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80099730:	e0bffd17 	ldw	r2,-12(fp)
80099734:	10800017 	ldw	r2,0(r2)
80099738:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8009973c:	e0bffc17 	ldw	r2,-16(fp)
80099740:	10c00a04 	addi	r3,r2,40
80099744:	e0bffd17 	ldw	r2,-12(fp)
80099748:	10800217 	ldw	r2,8(r2)
8009974c:	100f883a 	mov	r7,r2
80099750:	e1bfff17 	ldw	r6,-4(fp)
80099754:	e17ffe17 	ldw	r5,-8(fp)
80099758:	1809883a 	mov	r4,r3
8009975c:	0099d3c0 	call	80099d3c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
80099760:	e037883a 	mov	sp,fp
80099764:	dfc00117 	ldw	ra,4(sp)
80099768:	df000017 	ldw	fp,0(sp)
8009976c:	dec00204 	addi	sp,sp,8
80099770:	f800283a 	ret

80099774 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80099774:	defffa04 	addi	sp,sp,-24
80099778:	dfc00515 	stw	ra,20(sp)
8009977c:	df000415 	stw	fp,16(sp)
80099780:	df000404 	addi	fp,sp,16
80099784:	e13ffd15 	stw	r4,-12(fp)
80099788:	e17ffe15 	stw	r5,-8(fp)
8009978c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80099790:	e0bffd17 	ldw	r2,-12(fp)
80099794:	10800017 	ldw	r2,0(r2)
80099798:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8009979c:	e0bffc17 	ldw	r2,-16(fp)
800997a0:	10c00a04 	addi	r3,r2,40
800997a4:	e0bffd17 	ldw	r2,-12(fp)
800997a8:	10800217 	ldw	r2,8(r2)
800997ac:	100f883a 	mov	r7,r2
800997b0:	e1bfff17 	ldw	r6,-4(fp)
800997b4:	e17ffe17 	ldw	r5,-8(fp)
800997b8:	1809883a 	mov	r4,r3
800997bc:	0099f580 	call	80099f58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
800997c0:	e037883a 	mov	sp,fp
800997c4:	dfc00117 	ldw	ra,4(sp)
800997c8:	df000017 	ldw	fp,0(sp)
800997cc:	dec00204 	addi	sp,sp,8
800997d0:	f800283a 	ret

800997d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
800997d4:	defffc04 	addi	sp,sp,-16
800997d8:	dfc00315 	stw	ra,12(sp)
800997dc:	df000215 	stw	fp,8(sp)
800997e0:	df000204 	addi	fp,sp,8
800997e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
800997e8:	e0bfff17 	ldw	r2,-4(fp)
800997ec:	10800017 	ldw	r2,0(r2)
800997f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
800997f4:	e0bffe17 	ldw	r2,-8(fp)
800997f8:	10c00a04 	addi	r3,r2,40
800997fc:	e0bfff17 	ldw	r2,-4(fp)
80099800:	10800217 	ldw	r2,8(r2)
80099804:	100b883a 	mov	r5,r2
80099808:	1809883a 	mov	r4,r3
8009980c:	0099be40 	call	80099be4 <altera_avalon_jtag_uart_close>
}
80099810:	e037883a 	mov	sp,fp
80099814:	dfc00117 	ldw	ra,4(sp)
80099818:	df000017 	ldw	fp,0(sp)
8009981c:	dec00204 	addi	sp,sp,8
80099820:	f800283a 	ret

80099824 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
80099824:	defffa04 	addi	sp,sp,-24
80099828:	dfc00515 	stw	ra,20(sp)
8009982c:	df000415 	stw	fp,16(sp)
80099830:	df000404 	addi	fp,sp,16
80099834:	e13ffd15 	stw	r4,-12(fp)
80099838:	e17ffe15 	stw	r5,-8(fp)
8009983c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80099840:	e0bffd17 	ldw	r2,-12(fp)
80099844:	10800017 	ldw	r2,0(r2)
80099848:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8009984c:	e0bffc17 	ldw	r2,-16(fp)
80099850:	10800a04 	addi	r2,r2,40
80099854:	e1bfff17 	ldw	r6,-4(fp)
80099858:	e17ffe17 	ldw	r5,-8(fp)
8009985c:	1009883a 	mov	r4,r2
80099860:	0099c4c0 	call	80099c4c <altera_avalon_jtag_uart_ioctl>
}
80099864:	e037883a 	mov	sp,fp
80099868:	dfc00117 	ldw	ra,4(sp)
8009986c:	df000017 	ldw	fp,0(sp)
80099870:	dec00204 	addi	sp,sp,8
80099874:	f800283a 	ret

80099878 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80099878:	defffa04 	addi	sp,sp,-24
8009987c:	dfc00515 	stw	ra,20(sp)
80099880:	df000415 	stw	fp,16(sp)
80099884:	df000404 	addi	fp,sp,16
80099888:	e13ffd15 	stw	r4,-12(fp)
8009988c:	e17ffe15 	stw	r5,-8(fp)
80099890:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099894:	e0bffd17 	ldw	r2,-12(fp)
80099898:	00c00044 	movi	r3,1
8009989c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
800998a0:	e0bffd17 	ldw	r2,-12(fp)
800998a4:	10800017 	ldw	r2,0(r2)
800998a8:	10800104 	addi	r2,r2,4
800998ac:	1007883a 	mov	r3,r2
800998b0:	e0bffd17 	ldw	r2,-12(fp)
800998b4:	10800817 	ldw	r2,32(r2)
800998b8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
800998bc:	e0bffe17 	ldw	r2,-8(fp)
800998c0:	e0ffff17 	ldw	r3,-4(fp)
800998c4:	d8000015 	stw	zero,0(sp)
800998c8:	e1fffd17 	ldw	r7,-12(fp)
800998cc:	01a002b4 	movhi	r6,32778
800998d0:	31a64e04 	addi	r6,r6,-26312
800998d4:	180b883a 	mov	r5,r3
800998d8:	1009883a 	mov	r4,r2
800998dc:	009c61c0 	call	8009c61c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
800998e0:	e0bffd17 	ldw	r2,-12(fp)
800998e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
800998e8:	e0bffd17 	ldw	r2,-12(fp)
800998ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
800998f0:	d0e72c17 	ldw	r3,-25424(gp)
800998f4:	e1fffd17 	ldw	r7,-12(fp)
800998f8:	01a002b4 	movhi	r6,32778
800998fc:	31a6d104 	addi	r6,r6,-25788
80099900:	180b883a 	mov	r5,r3
80099904:	1009883a 	mov	r4,r2
80099908:	009c0ec0 	call	8009c0ec <alt_alarm_start>
8009990c:	1000040e 	bge	r2,zero,80099920 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
80099910:	e0fffd17 	ldw	r3,-12(fp)
80099914:	00a00034 	movhi	r2,32768
80099918:	10bfffc4 	addi	r2,r2,-1
8009991c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
80099920:	0001883a 	nop
80099924:	e037883a 	mov	sp,fp
80099928:	dfc00117 	ldw	ra,4(sp)
8009992c:	df000017 	ldw	fp,0(sp)
80099930:	dec00204 	addi	sp,sp,8
80099934:	f800283a 	ret

80099938 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80099938:	defff804 	addi	sp,sp,-32
8009993c:	df000715 	stw	fp,28(sp)
80099940:	df000704 	addi	fp,sp,28
80099944:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80099948:	e0bfff17 	ldw	r2,-4(fp)
8009994c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
80099950:	e0bffb17 	ldw	r2,-20(fp)
80099954:	10800017 	ldw	r2,0(r2)
80099958:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8009995c:	e0bffc17 	ldw	r2,-16(fp)
80099960:	10800104 	addi	r2,r2,4
80099964:	10800037 	ldwio	r2,0(r2)
80099968:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8009996c:	e0bffd17 	ldw	r2,-12(fp)
80099970:	1080c00c 	andi	r2,r2,768
80099974:	10006d26 	beq	r2,zero,80099b2c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80099978:	e0bffd17 	ldw	r2,-12(fp)
8009997c:	1080400c 	andi	r2,r2,256
80099980:	10003526 	beq	r2,zero,80099a58 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
80099984:	00800074 	movhi	r2,1
80099988:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8009998c:	e0bffb17 	ldw	r2,-20(fp)
80099990:	10800a17 	ldw	r2,40(r2)
80099994:	10800044 	addi	r2,r2,1
80099998:	1081ffcc 	andi	r2,r2,2047
8009999c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
800999a0:	e0bffb17 	ldw	r2,-20(fp)
800999a4:	10c00b17 	ldw	r3,44(r2)
800999a8:	e0bffe17 	ldw	r2,-8(fp)
800999ac:	18801526 	beq	r3,r2,80099a04 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
800999b0:	e0bffc17 	ldw	r2,-16(fp)
800999b4:	10800037 	ldwio	r2,0(r2)
800999b8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
800999bc:	e0bff917 	ldw	r2,-28(fp)
800999c0:	10a0000c 	andi	r2,r2,32768
800999c4:	10001126 	beq	r2,zero,80099a0c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
800999c8:	e0bffb17 	ldw	r2,-20(fp)
800999cc:	10800a17 	ldw	r2,40(r2)
800999d0:	e0fff917 	ldw	r3,-28(fp)
800999d4:	1809883a 	mov	r4,r3
800999d8:	e0fffb17 	ldw	r3,-20(fp)
800999dc:	1885883a 	add	r2,r3,r2
800999e0:	10800e04 	addi	r2,r2,56
800999e4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800999e8:	e0bffb17 	ldw	r2,-20(fp)
800999ec:	10800a17 	ldw	r2,40(r2)
800999f0:	10800044 	addi	r2,r2,1
800999f4:	10c1ffcc 	andi	r3,r2,2047
800999f8:	e0bffb17 	ldw	r2,-20(fp)
800999fc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
80099a00:	003fe206 	br	8009998c <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
80099a04:	0001883a 	nop
80099a08:	00000106 	br	80099a10 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
80099a0c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
80099a10:	e0bff917 	ldw	r2,-28(fp)
80099a14:	10bfffec 	andhi	r2,r2,65535
80099a18:	10000f26 	beq	r2,zero,80099a58 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099a1c:	e0bffb17 	ldw	r2,-20(fp)
80099a20:	10c00817 	ldw	r3,32(r2)
80099a24:	00bfff84 	movi	r2,-2
80099a28:	1886703a 	and	r3,r3,r2
80099a2c:	e0bffb17 	ldw	r2,-20(fp)
80099a30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
80099a34:	e0bffc17 	ldw	r2,-16(fp)
80099a38:	10800104 	addi	r2,r2,4
80099a3c:	1007883a 	mov	r3,r2
80099a40:	e0bffb17 	ldw	r2,-20(fp)
80099a44:	10800817 	ldw	r2,32(r2)
80099a48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80099a4c:	e0bffc17 	ldw	r2,-16(fp)
80099a50:	10800104 	addi	r2,r2,4
80099a54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80099a58:	e0bffd17 	ldw	r2,-12(fp)
80099a5c:	1080800c 	andi	r2,r2,512
80099a60:	103fbe26 	beq	r2,zero,8009995c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
80099a64:	e0bffd17 	ldw	r2,-12(fp)
80099a68:	1004d43a 	srli	r2,r2,16
80099a6c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
80099a70:	00001406 	br	80099ac4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
80099a74:	e0bffc17 	ldw	r2,-16(fp)
80099a78:	e0fffb17 	ldw	r3,-20(fp)
80099a7c:	18c00d17 	ldw	r3,52(r3)
80099a80:	e13ffb17 	ldw	r4,-20(fp)
80099a84:	20c7883a 	add	r3,r4,r3
80099a88:	18c20e04 	addi	r3,r3,2104
80099a8c:	18c00003 	ldbu	r3,0(r3)
80099a90:	18c03fcc 	andi	r3,r3,255
80099a94:	18c0201c 	xori	r3,r3,128
80099a98:	18ffe004 	addi	r3,r3,-128
80099a9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80099aa0:	e0bffb17 	ldw	r2,-20(fp)
80099aa4:	10800d17 	ldw	r2,52(r2)
80099aa8:	10800044 	addi	r2,r2,1
80099aac:	10c1ffcc 	andi	r3,r2,2047
80099ab0:	e0bffb17 	ldw	r2,-20(fp)
80099ab4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
80099ab8:	e0bffa17 	ldw	r2,-24(fp)
80099abc:	10bfffc4 	addi	r2,r2,-1
80099ac0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
80099ac4:	e0bffa17 	ldw	r2,-24(fp)
80099ac8:	10000526 	beq	r2,zero,80099ae0 <altera_avalon_jtag_uart_irq+0x1a8>
80099acc:	e0bffb17 	ldw	r2,-20(fp)
80099ad0:	10c00d17 	ldw	r3,52(r2)
80099ad4:	e0bffb17 	ldw	r2,-20(fp)
80099ad8:	10800c17 	ldw	r2,48(r2)
80099adc:	18bfe51e 	bne	r3,r2,80099a74 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
80099ae0:	e0bffa17 	ldw	r2,-24(fp)
80099ae4:	103f9d26 	beq	r2,zero,8009995c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80099ae8:	e0bffb17 	ldw	r2,-20(fp)
80099aec:	10c00817 	ldw	r3,32(r2)
80099af0:	00bfff44 	movi	r2,-3
80099af4:	1886703a 	and	r3,r3,r2
80099af8:	e0bffb17 	ldw	r2,-20(fp)
80099afc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80099b00:	e0bffb17 	ldw	r2,-20(fp)
80099b04:	10800017 	ldw	r2,0(r2)
80099b08:	10800104 	addi	r2,r2,4
80099b0c:	1007883a 	mov	r3,r2
80099b10:	e0bffb17 	ldw	r2,-20(fp)
80099b14:	10800817 	ldw	r2,32(r2)
80099b18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80099b1c:	e0bffc17 	ldw	r2,-16(fp)
80099b20:	10800104 	addi	r2,r2,4
80099b24:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
80099b28:	003f8c06 	br	8009995c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
80099b2c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
80099b30:	0001883a 	nop
80099b34:	e037883a 	mov	sp,fp
80099b38:	df000017 	ldw	fp,0(sp)
80099b3c:	dec00104 	addi	sp,sp,4
80099b40:	f800283a 	ret

80099b44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
80099b44:	defff804 	addi	sp,sp,-32
80099b48:	df000715 	stw	fp,28(sp)
80099b4c:	df000704 	addi	fp,sp,28
80099b50:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
80099b54:	e0bffb17 	ldw	r2,-20(fp)
80099b58:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
80099b5c:	e0bff917 	ldw	r2,-28(fp)
80099b60:	10800017 	ldw	r2,0(r2)
80099b64:	10800104 	addi	r2,r2,4
80099b68:	10800037 	ldwio	r2,0(r2)
80099b6c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
80099b70:	e0bffa17 	ldw	r2,-24(fp)
80099b74:	1081000c 	andi	r2,r2,1024
80099b78:	10000b26 	beq	r2,zero,80099ba8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80099b7c:	e0bff917 	ldw	r2,-28(fp)
80099b80:	10800017 	ldw	r2,0(r2)
80099b84:	10800104 	addi	r2,r2,4
80099b88:	1007883a 	mov	r3,r2
80099b8c:	e0bff917 	ldw	r2,-28(fp)
80099b90:	10800817 	ldw	r2,32(r2)
80099b94:	10810014 	ori	r2,r2,1024
80099b98:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
80099b9c:	e0bff917 	ldw	r2,-28(fp)
80099ba0:	10000915 	stw	zero,36(r2)
80099ba4:	00000a06 	br	80099bd0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
80099ba8:	e0bff917 	ldw	r2,-28(fp)
80099bac:	10c00917 	ldw	r3,36(r2)
80099bb0:	00a00034 	movhi	r2,32768
80099bb4:	10bfff04 	addi	r2,r2,-4
80099bb8:	10c00536 	bltu	r2,r3,80099bd0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
80099bbc:	e0bff917 	ldw	r2,-28(fp)
80099bc0:	10800917 	ldw	r2,36(r2)
80099bc4:	10c00044 	addi	r3,r2,1
80099bc8:	e0bff917 	ldw	r2,-28(fp)
80099bcc:	10c00915 	stw	r3,36(r2)
80099bd0:	d0a72c17 	ldw	r2,-25424(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
80099bd4:	e037883a 	mov	sp,fp
80099bd8:	df000017 	ldw	fp,0(sp)
80099bdc:	dec00104 	addi	sp,sp,4
80099be0:	f800283a 	ret

80099be4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
80099be4:	defffd04 	addi	sp,sp,-12
80099be8:	df000215 	stw	fp,8(sp)
80099bec:	df000204 	addi	fp,sp,8
80099bf0:	e13ffe15 	stw	r4,-8(fp)
80099bf4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80099bf8:	00000506 	br	80099c10 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80099bfc:	e0bfff17 	ldw	r2,-4(fp)
80099c00:	1090000c 	andi	r2,r2,16384
80099c04:	10000226 	beq	r2,zero,80099c10 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
80099c08:	00bffd44 	movi	r2,-11
80099c0c:	00000b06 	br	80099c3c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80099c10:	e0bffe17 	ldw	r2,-8(fp)
80099c14:	10c00d17 	ldw	r3,52(r2)
80099c18:	e0bffe17 	ldw	r2,-8(fp)
80099c1c:	10800c17 	ldw	r2,48(r2)
80099c20:	18800526 	beq	r3,r2,80099c38 <altera_avalon_jtag_uart_close+0x54>
80099c24:	e0bffe17 	ldw	r2,-8(fp)
80099c28:	10c00917 	ldw	r3,36(r2)
80099c2c:	e0bffe17 	ldw	r2,-8(fp)
80099c30:	10800117 	ldw	r2,4(r2)
80099c34:	18bff136 	bltu	r3,r2,80099bfc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80099c38:	0005883a 	mov	r2,zero
}
80099c3c:	e037883a 	mov	sp,fp
80099c40:	df000017 	ldw	fp,0(sp)
80099c44:	dec00104 	addi	sp,sp,4
80099c48:	f800283a 	ret

80099c4c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
80099c4c:	defffa04 	addi	sp,sp,-24
80099c50:	df000515 	stw	fp,20(sp)
80099c54:	df000504 	addi	fp,sp,20
80099c58:	e13ffd15 	stw	r4,-12(fp)
80099c5c:	e17ffe15 	stw	r5,-8(fp)
80099c60:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
80099c64:	00bff9c4 	movi	r2,-25
80099c68:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
80099c6c:	e0bffe17 	ldw	r2,-8(fp)
80099c70:	10da8060 	cmpeqi	r3,r2,27137
80099c74:	1800031e 	bne	r3,zero,80099c84 <altera_avalon_jtag_uart_ioctl+0x38>
80099c78:	109a80a0 	cmpeqi	r2,r2,27138
80099c7c:	1000181e 	bne	r2,zero,80099ce0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
80099c80:	00002906 	br	80099d28 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
80099c84:	e0bffd17 	ldw	r2,-12(fp)
80099c88:	10c00117 	ldw	r3,4(r2)
80099c8c:	00a00034 	movhi	r2,32768
80099c90:	10bfffc4 	addi	r2,r2,-1
80099c94:	18802126 	beq	r3,r2,80099d1c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
80099c98:	e0bfff17 	ldw	r2,-4(fp)
80099c9c:	10800017 	ldw	r2,0(r2)
80099ca0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
80099ca4:	e0bffc17 	ldw	r2,-16(fp)
80099ca8:	10800090 	cmplti	r2,r2,2
80099cac:	1000061e 	bne	r2,zero,80099cc8 <altera_avalon_jtag_uart_ioctl+0x7c>
80099cb0:	e0fffc17 	ldw	r3,-16(fp)
80099cb4:	00a00034 	movhi	r2,32768
80099cb8:	10bfffc4 	addi	r2,r2,-1
80099cbc:	18800226 	beq	r3,r2,80099cc8 <altera_avalon_jtag_uart_ioctl+0x7c>
80099cc0:	e0bffc17 	ldw	r2,-16(fp)
80099cc4:	00000206 	br	80099cd0 <altera_avalon_jtag_uart_ioctl+0x84>
80099cc8:	00a00034 	movhi	r2,32768
80099ccc:	10bfff84 	addi	r2,r2,-2
80099cd0:	e0fffd17 	ldw	r3,-12(fp)
80099cd4:	18800115 	stw	r2,4(r3)
      rc = 0;
80099cd8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80099cdc:	00000f06 	br	80099d1c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
80099ce0:	e0bffd17 	ldw	r2,-12(fp)
80099ce4:	10c00117 	ldw	r3,4(r2)
80099ce8:	00a00034 	movhi	r2,32768
80099cec:	10bfffc4 	addi	r2,r2,-1
80099cf0:	18800c26 	beq	r3,r2,80099d24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
80099cf4:	e0bffd17 	ldw	r2,-12(fp)
80099cf8:	10c00917 	ldw	r3,36(r2)
80099cfc:	e0bffd17 	ldw	r2,-12(fp)
80099d00:	10800117 	ldw	r2,4(r2)
80099d04:	1885803a 	cmpltu	r2,r3,r2
80099d08:	10c03fcc 	andi	r3,r2,255
80099d0c:	e0bfff17 	ldw	r2,-4(fp)
80099d10:	10c00015 	stw	r3,0(r2)
      rc = 0;
80099d14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80099d18:	00000206 	br	80099d24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
80099d1c:	0001883a 	nop
80099d20:	00000106 	br	80099d28 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
80099d24:	0001883a 	nop

  default:
    break;
  }

  return rc;
80099d28:	e0bffb17 	ldw	r2,-20(fp)
}
80099d2c:	e037883a 	mov	sp,fp
80099d30:	df000017 	ldw	fp,0(sp)
80099d34:	dec00104 	addi	sp,sp,4
80099d38:	f800283a 	ret

80099d3c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
80099d3c:	defff304 	addi	sp,sp,-52
80099d40:	dfc00c15 	stw	ra,48(sp)
80099d44:	df000b15 	stw	fp,44(sp)
80099d48:	df000b04 	addi	fp,sp,44
80099d4c:	e13ffc15 	stw	r4,-16(fp)
80099d50:	e17ffd15 	stw	r5,-12(fp)
80099d54:	e1bffe15 	stw	r6,-8(fp)
80099d58:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
80099d5c:	e0bffd17 	ldw	r2,-12(fp)
80099d60:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80099d64:	00004706 	br	80099e84 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
80099d68:	e0bffc17 	ldw	r2,-16(fp)
80099d6c:	10800a17 	ldw	r2,40(r2)
80099d70:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
80099d74:	e0bffc17 	ldw	r2,-16(fp)
80099d78:	10800b17 	ldw	r2,44(r2)
80099d7c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
80099d80:	e0fff717 	ldw	r3,-36(fp)
80099d84:	e0bff817 	ldw	r2,-32(fp)
80099d88:	18800536 	bltu	r3,r2,80099da0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
80099d8c:	e0fff717 	ldw	r3,-36(fp)
80099d90:	e0bff817 	ldw	r2,-32(fp)
80099d94:	1885c83a 	sub	r2,r3,r2
80099d98:	e0bff615 	stw	r2,-40(fp)
80099d9c:	00000406 	br	80099db0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
80099da0:	00c20004 	movi	r3,2048
80099da4:	e0bff817 	ldw	r2,-32(fp)
80099da8:	1885c83a 	sub	r2,r3,r2
80099dac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80099db0:	e0bff617 	ldw	r2,-40(fp)
80099db4:	10001e26 	beq	r2,zero,80099e30 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
80099db8:	e0fffe17 	ldw	r3,-8(fp)
80099dbc:	e0bff617 	ldw	r2,-40(fp)
80099dc0:	1880022e 	bgeu	r3,r2,80099dcc <altera_avalon_jtag_uart_read+0x90>
        n = space;
80099dc4:	e0bffe17 	ldw	r2,-8(fp)
80099dc8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
80099dcc:	e0bffc17 	ldw	r2,-16(fp)
80099dd0:	10c00e04 	addi	r3,r2,56
80099dd4:	e0bff817 	ldw	r2,-32(fp)
80099dd8:	1885883a 	add	r2,r3,r2
80099ddc:	e1bff617 	ldw	r6,-40(fp)
80099de0:	100b883a 	mov	r5,r2
80099de4:	e13ff517 	ldw	r4,-44(fp)
80099de8:	0082da40 	call	80082da4 <memcpy>
      ptr   += n;
80099dec:	e0fff517 	ldw	r3,-44(fp)
80099df0:	e0bff617 	ldw	r2,-40(fp)
80099df4:	1885883a 	add	r2,r3,r2
80099df8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
80099dfc:	e0fffe17 	ldw	r3,-8(fp)
80099e00:	e0bff617 	ldw	r2,-40(fp)
80099e04:	1885c83a 	sub	r2,r3,r2
80099e08:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80099e0c:	e0fff817 	ldw	r3,-32(fp)
80099e10:	e0bff617 	ldw	r2,-40(fp)
80099e14:	1885883a 	add	r2,r3,r2
80099e18:	10c1ffcc 	andi	r3,r2,2047
80099e1c:	e0bffc17 	ldw	r2,-16(fp)
80099e20:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
80099e24:	e0bffe17 	ldw	r2,-8(fp)
80099e28:	00bfcf16 	blt	zero,r2,80099d68 <altera_avalon_jtag_uart_read+0x2c>
80099e2c:	00000106 	br	80099e34 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
80099e30:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80099e34:	e0fff517 	ldw	r3,-44(fp)
80099e38:	e0bffd17 	ldw	r2,-12(fp)
80099e3c:	1880141e 	bne	r3,r2,80099e90 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
80099e40:	e0bfff17 	ldw	r2,-4(fp)
80099e44:	1090000c 	andi	r2,r2,16384
80099e48:	1000131e 	bne	r2,zero,80099e98 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
80099e4c:	0001883a 	nop
80099e50:	e0bffc17 	ldw	r2,-16(fp)
80099e54:	10c00a17 	ldw	r3,40(r2)
80099e58:	e0bff717 	ldw	r2,-36(fp)
80099e5c:	1880051e 	bne	r3,r2,80099e74 <altera_avalon_jtag_uart_read+0x138>
80099e60:	e0bffc17 	ldw	r2,-16(fp)
80099e64:	10c00917 	ldw	r3,36(r2)
80099e68:	e0bffc17 	ldw	r2,-16(fp)
80099e6c:	10800117 	ldw	r2,4(r2)
80099e70:	18bff736 	bltu	r3,r2,80099e50 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80099e74:	e0bffc17 	ldw	r2,-16(fp)
80099e78:	10c00a17 	ldw	r3,40(r2)
80099e7c:	e0bff717 	ldw	r2,-36(fp)
80099e80:	18800726 	beq	r3,r2,80099ea0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80099e84:	e0bffe17 	ldw	r2,-8(fp)
80099e88:	00bfb716 	blt	zero,r2,80099d68 <altera_avalon_jtag_uart_read+0x2c>
80099e8c:	00000506 	br	80099ea4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
80099e90:	0001883a 	nop
80099e94:	00000306 	br	80099ea4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
80099e98:	0001883a 	nop
80099e9c:	00000106 	br	80099ea4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
80099ea0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80099ea4:	e0fff517 	ldw	r3,-44(fp)
80099ea8:	e0bffd17 	ldw	r2,-12(fp)
80099eac:	18801826 	beq	r3,r2,80099f10 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80099eb0:	0005303a 	rdctl	r2,status
80099eb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80099eb8:	e0fffb17 	ldw	r3,-20(fp)
80099ebc:	00bfff84 	movi	r2,-2
80099ec0:	1884703a 	and	r2,r3,r2
80099ec4:	1001703a 	wrctl	status,r2
  
  return context;
80099ec8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
80099ecc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099ed0:	e0bffc17 	ldw	r2,-16(fp)
80099ed4:	10800817 	ldw	r2,32(r2)
80099ed8:	10c00054 	ori	r3,r2,1
80099edc:	e0bffc17 	ldw	r2,-16(fp)
80099ee0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80099ee4:	e0bffc17 	ldw	r2,-16(fp)
80099ee8:	10800017 	ldw	r2,0(r2)
80099eec:	10800104 	addi	r2,r2,4
80099ef0:	1007883a 	mov	r3,r2
80099ef4:	e0bffc17 	ldw	r2,-16(fp)
80099ef8:	10800817 	ldw	r2,32(r2)
80099efc:	18800035 	stwio	r2,0(r3)
80099f00:	e0bffa17 	ldw	r2,-24(fp)
80099f04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80099f08:	e0bff917 	ldw	r2,-28(fp)
80099f0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
80099f10:	e0fff517 	ldw	r3,-44(fp)
80099f14:	e0bffd17 	ldw	r2,-12(fp)
80099f18:	18800426 	beq	r3,r2,80099f2c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
80099f1c:	e0fff517 	ldw	r3,-44(fp)
80099f20:	e0bffd17 	ldw	r2,-12(fp)
80099f24:	1885c83a 	sub	r2,r3,r2
80099f28:	00000606 	br	80099f44 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
80099f2c:	e0bfff17 	ldw	r2,-4(fp)
80099f30:	1090000c 	andi	r2,r2,16384
80099f34:	10000226 	beq	r2,zero,80099f40 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80099f38:	00bffd44 	movi	r2,-11
80099f3c:	00000106 	br	80099f44 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
80099f40:	00bffec4 	movi	r2,-5
}
80099f44:	e037883a 	mov	sp,fp
80099f48:	dfc00117 	ldw	ra,4(sp)
80099f4c:	df000017 	ldw	fp,0(sp)
80099f50:	dec00204 	addi	sp,sp,8
80099f54:	f800283a 	ret

80099f58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80099f58:	defff304 	addi	sp,sp,-52
80099f5c:	dfc00c15 	stw	ra,48(sp)
80099f60:	df000b15 	stw	fp,44(sp)
80099f64:	df000b04 	addi	fp,sp,44
80099f68:	e13ffc15 	stw	r4,-16(fp)
80099f6c:	e17ffd15 	stw	r5,-12(fp)
80099f70:	e1bffe15 	stw	r6,-8(fp)
80099f74:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
80099f78:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
80099f7c:	e0bffd17 	ldw	r2,-12(fp)
80099f80:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80099f84:	00003706 	br	8009a064 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
80099f88:	e0bffc17 	ldw	r2,-16(fp)
80099f8c:	10800c17 	ldw	r2,48(r2)
80099f90:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
80099f94:	e0bffc17 	ldw	r2,-16(fp)
80099f98:	10800d17 	ldw	r2,52(r2)
80099f9c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
80099fa0:	e0fff917 	ldw	r3,-28(fp)
80099fa4:	e0bff517 	ldw	r2,-44(fp)
80099fa8:	1880062e 	bgeu	r3,r2,80099fc4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
80099fac:	e0fff517 	ldw	r3,-44(fp)
80099fb0:	e0bff917 	ldw	r2,-28(fp)
80099fb4:	1885c83a 	sub	r2,r3,r2
80099fb8:	10bfffc4 	addi	r2,r2,-1
80099fbc:	e0bff615 	stw	r2,-40(fp)
80099fc0:	00000b06 	br	80099ff0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
80099fc4:	e0bff517 	ldw	r2,-44(fp)
80099fc8:	10000526 	beq	r2,zero,80099fe0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80099fcc:	00c20004 	movi	r3,2048
80099fd0:	e0bff917 	ldw	r2,-28(fp)
80099fd4:	1885c83a 	sub	r2,r3,r2
80099fd8:	e0bff615 	stw	r2,-40(fp)
80099fdc:	00000406 	br	80099ff0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
80099fe0:	00c1ffc4 	movi	r3,2047
80099fe4:	e0bff917 	ldw	r2,-28(fp)
80099fe8:	1885c83a 	sub	r2,r3,r2
80099fec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80099ff0:	e0bff617 	ldw	r2,-40(fp)
80099ff4:	10001e26 	beq	r2,zero,8009a070 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
80099ff8:	e0fffe17 	ldw	r3,-8(fp)
80099ffc:	e0bff617 	ldw	r2,-40(fp)
8009a000:	1880022e 	bgeu	r3,r2,8009a00c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
8009a004:	e0bffe17 	ldw	r2,-8(fp)
8009a008:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8009a00c:	e0bffc17 	ldw	r2,-16(fp)
8009a010:	10c20e04 	addi	r3,r2,2104
8009a014:	e0bff917 	ldw	r2,-28(fp)
8009a018:	1885883a 	add	r2,r3,r2
8009a01c:	e1bff617 	ldw	r6,-40(fp)
8009a020:	e17ffd17 	ldw	r5,-12(fp)
8009a024:	1009883a 	mov	r4,r2
8009a028:	0082da40 	call	80082da4 <memcpy>
      ptr   += n;
8009a02c:	e0fffd17 	ldw	r3,-12(fp)
8009a030:	e0bff617 	ldw	r2,-40(fp)
8009a034:	1885883a 	add	r2,r3,r2
8009a038:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8009a03c:	e0fffe17 	ldw	r3,-8(fp)
8009a040:	e0bff617 	ldw	r2,-40(fp)
8009a044:	1885c83a 	sub	r2,r3,r2
8009a048:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8009a04c:	e0fff917 	ldw	r3,-28(fp)
8009a050:	e0bff617 	ldw	r2,-40(fp)
8009a054:	1885883a 	add	r2,r3,r2
8009a058:	10c1ffcc 	andi	r3,r2,2047
8009a05c:	e0bffc17 	ldw	r2,-16(fp)
8009a060:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8009a064:	e0bffe17 	ldw	r2,-8(fp)
8009a068:	00bfc716 	blt	zero,r2,80099f88 <altera_avalon_jtag_uart_write+0x30>
8009a06c:	00000106 	br	8009a074 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8009a070:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a074:	0005303a 	rdctl	r2,status
8009a078:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a07c:	e0fffb17 	ldw	r3,-20(fp)
8009a080:	00bfff84 	movi	r2,-2
8009a084:	1884703a 	and	r2,r3,r2
8009a088:	1001703a 	wrctl	status,r2
  
  return context;
8009a08c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8009a090:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8009a094:	e0bffc17 	ldw	r2,-16(fp)
8009a098:	10800817 	ldw	r2,32(r2)
8009a09c:	10c00094 	ori	r3,r2,2
8009a0a0:	e0bffc17 	ldw	r2,-16(fp)
8009a0a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8009a0a8:	e0bffc17 	ldw	r2,-16(fp)
8009a0ac:	10800017 	ldw	r2,0(r2)
8009a0b0:	10800104 	addi	r2,r2,4
8009a0b4:	1007883a 	mov	r3,r2
8009a0b8:	e0bffc17 	ldw	r2,-16(fp)
8009a0bc:	10800817 	ldw	r2,32(r2)
8009a0c0:	18800035 	stwio	r2,0(r3)
8009a0c4:	e0bffa17 	ldw	r2,-24(fp)
8009a0c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a0cc:	e0bff817 	ldw	r2,-32(fp)
8009a0d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8009a0d4:	e0bffe17 	ldw	r2,-8(fp)
8009a0d8:	0080100e 	bge	zero,r2,8009a11c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
8009a0dc:	e0bfff17 	ldw	r2,-4(fp)
8009a0e0:	1090000c 	andi	r2,r2,16384
8009a0e4:	1000101e 	bne	r2,zero,8009a128 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8009a0e8:	0001883a 	nop
8009a0ec:	e0bffc17 	ldw	r2,-16(fp)
8009a0f0:	10c00d17 	ldw	r3,52(r2)
8009a0f4:	e0bff517 	ldw	r2,-44(fp)
8009a0f8:	1880051e 	bne	r3,r2,8009a110 <altera_avalon_jtag_uart_write+0x1b8>
8009a0fc:	e0bffc17 	ldw	r2,-16(fp)
8009a100:	10c00917 	ldw	r3,36(r2)
8009a104:	e0bffc17 	ldw	r2,-16(fp)
8009a108:	10800117 	ldw	r2,4(r2)
8009a10c:	18bff736 	bltu	r3,r2,8009a0ec <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8009a110:	e0bffc17 	ldw	r2,-16(fp)
8009a114:	10800917 	ldw	r2,36(r2)
8009a118:	1000051e 	bne	r2,zero,8009a130 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
8009a11c:	e0bffe17 	ldw	r2,-8(fp)
8009a120:	00bfd016 	blt	zero,r2,8009a064 <altera_avalon_jtag_uart_write+0x10c>
8009a124:	00000306 	br	8009a134 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8009a128:	0001883a 	nop
8009a12c:	00000106 	br	8009a134 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8009a130:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
8009a134:	e0fffd17 	ldw	r3,-12(fp)
8009a138:	e0bff717 	ldw	r2,-36(fp)
8009a13c:	18800426 	beq	r3,r2,8009a150 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8009a140:	e0fffd17 	ldw	r3,-12(fp)
8009a144:	e0bff717 	ldw	r2,-36(fp)
8009a148:	1885c83a 	sub	r2,r3,r2
8009a14c:	00000606 	br	8009a168 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8009a150:	e0bfff17 	ldw	r2,-4(fp)
8009a154:	1090000c 	andi	r2,r2,16384
8009a158:	10000226 	beq	r2,zero,8009a164 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
8009a15c:	00bffd44 	movi	r2,-11
8009a160:	00000106 	br	8009a168 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8009a164:	00bffec4 	movi	r2,-5
}
8009a168:	e037883a 	mov	sp,fp
8009a16c:	dfc00117 	ldw	ra,4(sp)
8009a170:	df000017 	ldw	fp,0(sp)
8009a174:	dec00204 	addi	sp,sp,8
8009a178:	f800283a 	ret

8009a17c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8009a17c:	defffa04 	addi	sp,sp,-24
8009a180:	dfc00515 	stw	ra,20(sp)
8009a184:	df000415 	stw	fp,16(sp)
8009a188:	df000404 	addi	fp,sp,16
8009a18c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8009a190:	0007883a 	mov	r3,zero
8009a194:	e0bfff17 	ldw	r2,-4(fp)
8009a198:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8009a19c:	e0bfff17 	ldw	r2,-4(fp)
8009a1a0:	10800104 	addi	r2,r2,4
8009a1a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a1a8:	0005303a 	rdctl	r2,status
8009a1ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a1b0:	e0fffd17 	ldw	r3,-12(fp)
8009a1b4:	00bfff84 	movi	r2,-2
8009a1b8:	1884703a 	and	r2,r3,r2
8009a1bc:	1001703a 	wrctl	status,r2
  
  return context;
8009a1c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8009a1c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8009a1c8:	009cf540 	call	8009cf54 <alt_tick>
8009a1cc:	e0bffc17 	ldw	r2,-16(fp)
8009a1d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a1d4:	e0bffe17 	ldw	r2,-8(fp)
8009a1d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8009a1dc:	0001883a 	nop
8009a1e0:	e037883a 	mov	sp,fp
8009a1e4:	dfc00117 	ldw	ra,4(sp)
8009a1e8:	df000017 	ldw	fp,0(sp)
8009a1ec:	dec00204 	addi	sp,sp,8
8009a1f0:	f800283a 	ret

8009a1f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8009a1f4:	defff804 	addi	sp,sp,-32
8009a1f8:	dfc00715 	stw	ra,28(sp)
8009a1fc:	df000615 	stw	fp,24(sp)
8009a200:	df000604 	addi	fp,sp,24
8009a204:	e13ffc15 	stw	r4,-16(fp)
8009a208:	e17ffd15 	stw	r5,-12(fp)
8009a20c:	e1bffe15 	stw	r6,-8(fp)
8009a210:	e1ffff15 	stw	r7,-4(fp)
8009a214:	e0bfff17 	ldw	r2,-4(fp)
8009a218:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8009a21c:	d0a72c17 	ldw	r2,-25424(gp)
8009a220:	1000021e 	bne	r2,zero,8009a22c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8009a224:	e0bffb17 	ldw	r2,-20(fp)
8009a228:	d0a72c15 	stw	r2,-25424(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8009a22c:	e0bffc17 	ldw	r2,-16(fp)
8009a230:	10800104 	addi	r2,r2,4
8009a234:	00c001c4 	movi	r3,7
8009a238:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8009a23c:	d8000015 	stw	zero,0(sp)
8009a240:	e1fffc17 	ldw	r7,-16(fp)
8009a244:	01a002b4 	movhi	r6,32778
8009a248:	31a85f04 	addi	r6,r6,-24196
8009a24c:	e17ffe17 	ldw	r5,-8(fp)
8009a250:	e13ffd17 	ldw	r4,-12(fp)
8009a254:	009c61c0 	call	8009c61c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8009a258:	0001883a 	nop
8009a25c:	e037883a 	mov	sp,fp
8009a260:	dfc00117 	ldw	ra,4(sp)
8009a264:	df000017 	ldw	fp,0(sp)
8009a268:	dec00204 	addi	sp,sp,8
8009a26c:	f800283a 	ret

8009a270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8009a270:	defffe04 	addi	sp,sp,-8
8009a274:	dfc00115 	stw	ra,4(sp)
8009a278:	df000015 	stw	fp,0(sp)
8009a27c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8009a280:	d0a00d17 	ldw	r2,-32716(gp)
8009a284:	10000326 	beq	r2,zero,8009a294 <alt_get_errno+0x24>
8009a288:	d0a00d17 	ldw	r2,-32716(gp)
8009a28c:	103ee83a 	callr	r2
8009a290:	00000106 	br	8009a298 <alt_get_errno+0x28>
8009a294:	d0a72404 	addi	r2,gp,-25456
}
8009a298:	e037883a 	mov	sp,fp
8009a29c:	dfc00117 	ldw	ra,4(sp)
8009a2a0:	df000017 	ldw	fp,0(sp)
8009a2a4:	dec00204 	addi	sp,sp,8
8009a2a8:	f800283a 	ret

8009a2ac <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
8009a2ac:	defffc04 	addi	sp,sp,-16
8009a2b0:	df000315 	stw	fp,12(sp)
8009a2b4:	df000304 	addi	fp,sp,12
8009a2b8:	e13ffd15 	stw	r4,-12(fp)
8009a2bc:	e17ffe15 	stw	r5,-8(fp)
8009a2c0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8009a2c4:	e0bffd17 	ldw	r2,-12(fp)
8009a2c8:	10800037 	ldwio	r2,0(r2)
8009a2cc:	1080010c 	andi	r2,r2,4
8009a2d0:	10000226 	beq	r2,zero,8009a2dc <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
8009a2d4:	00bff904 	movi	r2,-28
8009a2d8:	00001506 	br	8009a330 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8009a2dc:	e0bfff17 	ldw	r2,-4(fp)
8009a2e0:	10800017 	ldw	r2,0(r2)
8009a2e4:	1007883a 	mov	r3,r2
8009a2e8:	e0bffe17 	ldw	r2,-8(fp)
8009a2ec:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8009a2f0:	e0bffe17 	ldw	r2,-8(fp)
8009a2f4:	10800104 	addi	r2,r2,4
8009a2f8:	e0ffff17 	ldw	r3,-4(fp)
8009a2fc:	18c00117 	ldw	r3,4(r3)
8009a300:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8009a304:	e0bffe17 	ldw	r2,-8(fp)
8009a308:	10800204 	addi	r2,r2,8
8009a30c:	e0ffff17 	ldw	r3,-4(fp)
8009a310:	18c00217 	ldw	r3,8(r3)
8009a314:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8009a318:	e0bffe17 	ldw	r2,-8(fp)
8009a31c:	10800304 	addi	r2,r2,12
8009a320:	e0ffff17 	ldw	r3,-4(fp)
8009a324:	18c00317 	ldw	r3,12(r3)
8009a328:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
8009a32c:	0005883a 	mov	r2,zero
}
8009a330:	e037883a 	mov	sp,fp
8009a334:	df000017 	ldw	fp,0(sp)
8009a338:	dec00104 	addi	sp,sp,4
8009a33c:	f800283a 	ret

8009a340 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8009a340:	defffc04 	addi	sp,sp,-16
8009a344:	df000315 	stw	fp,12(sp)
8009a348:	df000304 	addi	fp,sp,12
8009a34c:	e13ffd15 	stw	r4,-12(fp)
8009a350:	e17ffe15 	stw	r5,-8(fp)
8009a354:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8009a358:	e0bffd17 	ldw	r2,-12(fp)
8009a35c:	10800037 	ldwio	r2,0(r2)
8009a360:	1080010c 	andi	r2,r2,4
8009a364:	10000226 	beq	r2,zero,8009a370 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8009a368:	00bff904 	movi	r2,-28
8009a36c:	00003b06 	br	8009a45c <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8009a370:	e0bfff17 	ldw	r2,-4(fp)
8009a374:	10800017 	ldw	r2,0(r2)
8009a378:	1007883a 	mov	r3,r2
8009a37c:	e0bffe17 	ldw	r2,-8(fp)
8009a380:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8009a384:	e0bffe17 	ldw	r2,-8(fp)
8009a388:	10800104 	addi	r2,r2,4
8009a38c:	e0ffff17 	ldw	r3,-4(fp)
8009a390:	18c00117 	ldw	r3,4(r3)
8009a394:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8009a398:	e0bffe17 	ldw	r2,-8(fp)
8009a39c:	10800204 	addi	r2,r2,8
8009a3a0:	e0ffff17 	ldw	r3,-4(fp)
8009a3a4:	18c00217 	ldw	r3,8(r3)
8009a3a8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8009a3ac:	e0bffe17 	ldw	r2,-8(fp)
8009a3b0:	10800304 	addi	r2,r2,12
8009a3b4:	e0ffff17 	ldw	r3,-4(fp)
8009a3b8:	18c0030b 	ldhu	r3,12(r3)
8009a3bc:	18ffffcc 	andi	r3,r3,65535
8009a3c0:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8009a3c4:	e0bffe17 	ldw	r2,-8(fp)
8009a3c8:	10800384 	addi	r2,r2,14
8009a3cc:	e0ffff17 	ldw	r3,-4(fp)
8009a3d0:	18c00383 	ldbu	r3,14(r3)
8009a3d4:	18c03fcc 	andi	r3,r3,255
8009a3d8:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8009a3dc:	e0bffe17 	ldw	r2,-8(fp)
8009a3e0:	108003c4 	addi	r2,r2,15
8009a3e4:	e0ffff17 	ldw	r3,-4(fp)
8009a3e8:	18c003c3 	ldbu	r3,15(r3)
8009a3ec:	18c03fcc 	andi	r3,r3,255
8009a3f0:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8009a3f4:	e0bffe17 	ldw	r2,-8(fp)
8009a3f8:	10800404 	addi	r2,r2,16
8009a3fc:	e0ffff17 	ldw	r3,-4(fp)
8009a400:	18c0040b 	ldhu	r3,16(r3)
8009a404:	18ffffcc 	andi	r3,r3,65535
8009a408:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8009a40c:	e0bffe17 	ldw	r2,-8(fp)
8009a410:	10800484 	addi	r2,r2,18
8009a414:	e0ffff17 	ldw	r3,-4(fp)
8009a418:	18c0048b 	ldhu	r3,18(r3)
8009a41c:	18ffffcc 	andi	r3,r3,65535
8009a420:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8009a424:	e0bffe17 	ldw	r2,-8(fp)
8009a428:	10800504 	addi	r2,r2,20
8009a42c:	0007883a 	mov	r3,zero
8009a430:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8009a434:	e0bffe17 	ldw	r2,-8(fp)
8009a438:	10800604 	addi	r2,r2,24
8009a43c:	0007883a 	mov	r3,zero
8009a440:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8009a444:	e0bffe17 	ldw	r2,-8(fp)
8009a448:	10800704 	addi	r2,r2,28
8009a44c:	e0ffff17 	ldw	r3,-4(fp)
8009a450:	18c00717 	ldw	r3,28(r3)
8009a454:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8009a458:	0005883a 	mov	r2,zero
}
8009a45c:	e037883a 	mov	sp,fp
8009a460:	df000017 	ldw	fp,0(sp)
8009a464:	dec00104 	addi	sp,sp,4
8009a468:	f800283a 	ret

8009a46c <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8009a46c:	defff804 	addi	sp,sp,-32
8009a470:	dfc00715 	stw	ra,28(sp)
8009a474:	df000615 	stw	fp,24(sp)
8009a478:	df000604 	addi	fp,sp,24
8009a47c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8009a480:	e0bfff17 	ldw	r2,-4(fp)
8009a484:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8009a488:	e0bffa17 	ldw	r2,-24(fp)
8009a48c:	10801783 	ldbu	r2,94(r2)
8009a490:	10803fcc 	andi	r2,r2,255
8009a494:	10001126 	beq	r2,zero,8009a4dc <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8009a498:	e0bffa17 	ldw	r2,-24(fp)
8009a49c:	10800617 	ldw	r2,24(r2)
8009a4a0:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8009a4a4:	1007883a 	mov	r3,r2
8009a4a8:	00bffdc4 	movi	r2,-9
8009a4ac:	1884703a 	and	r2,r3,r2
8009a4b0:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8009a4b4:	e0bffa17 	ldw	r2,-24(fp)
8009a4b8:	10800617 	ldw	r2,24(r2)
8009a4bc:	e0fffb17 	ldw	r3,-20(fp)
8009a4c0:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8009a4c4:	e0bffa17 	ldw	r2,-24(fp)
8009a4c8:	10800617 	ldw	r2,24(r2)
8009a4cc:	10800404 	addi	r2,r2,16
8009a4d0:	00c00044 	movi	r3,1
8009a4d4:	10c00035 	stwio	r3,0(r2)
8009a4d8:	00001106 	br	8009a520 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8009a4dc:	e0bffa17 	ldw	r2,-24(fp)
8009a4e0:	10800317 	ldw	r2,12(r2)
8009a4e4:	10800104 	addi	r2,r2,4
8009a4e8:	10800037 	ldwio	r2,0(r2)
8009a4ec:	1007883a 	mov	r3,r2
8009a4f0:	00bffbc4 	movi	r2,-17
8009a4f4:	1884703a 	and	r2,r3,r2
8009a4f8:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8009a4fc:	e0bffa17 	ldw	r2,-24(fp)
8009a500:	10800317 	ldw	r2,12(r2)
8009a504:	10800104 	addi	r2,r2,4
8009a508:	e0fffb17 	ldw	r3,-20(fp)
8009a50c:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8009a510:	e0bffa17 	ldw	r2,-24(fp)
8009a514:	10800317 	ldw	r2,12(r2)
8009a518:	00c08004 	movi	r3,512
8009a51c:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8009a520:	e0bffa17 	ldw	r2,-24(fp)
8009a524:	10800b17 	ldw	r2,44(r2)
8009a528:	10001226 	beq	r2,zero,8009a574 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a52c:	0005303a 	rdctl	r2,status
8009a530:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a534:	e0fffd17 	ldw	r3,-12(fp)
8009a538:	00bfff84 	movi	r2,-2
8009a53c:	1884703a 	and	r2,r3,r2
8009a540:	1001703a 	wrctl	status,r2
  
  return context;
8009a544:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8009a548:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8009a54c:	e0bffa17 	ldw	r2,-24(fp)
8009a550:	10800b17 	ldw	r2,44(r2)
8009a554:	e0fffa17 	ldw	r3,-24(fp)
8009a558:	18c00c17 	ldw	r3,48(r3)
8009a55c:	1809883a 	mov	r4,r3
8009a560:	103ee83a 	callr	r2
8009a564:	e0bffc17 	ldw	r2,-16(fp)
8009a568:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a56c:	e0bffe17 	ldw	r2,-8(fp)
8009a570:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8009a574:	e0bffa17 	ldw	r2,-24(fp)
8009a578:	10801783 	ldbu	r2,94(r2)
8009a57c:	10803fcc 	andi	r2,r2,255
8009a580:	10000a26 	beq	r2,zero,8009a5ac <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8009a584:	e0bffa17 	ldw	r2,-24(fp)
8009a588:	10800617 	ldw	r2,24(r2)
8009a58c:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8009a590:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8009a594:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8009a598:	e0bffa17 	ldw	r2,-24(fp)
8009a59c:	10800617 	ldw	r2,24(r2)
8009a5a0:	e0fffb17 	ldw	r3,-20(fp)
8009a5a4:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8009a5a8:	00000c06 	br	8009a5dc <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8009a5ac:	e0bffa17 	ldw	r2,-24(fp)
8009a5b0:	10800317 	ldw	r2,12(r2)
8009a5b4:	10800104 	addi	r2,r2,4
8009a5b8:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8009a5bc:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8009a5c0:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8009a5c4:	e0bffa17 	ldw	r2,-24(fp)
8009a5c8:	10800317 	ldw	r2,12(r2)
8009a5cc:	10800104 	addi	r2,r2,4
8009a5d0:	e0fffb17 	ldw	r3,-20(fp)
8009a5d4:	10c00035 	stwio	r3,0(r2)
    }

    return;
8009a5d8:	0001883a 	nop
}
8009a5dc:	e037883a 	mov	sp,fp
8009a5e0:	dfc00117 	ldw	ra,4(sp)
8009a5e4:	df000017 	ldw	fp,0(sp)
8009a5e8:	dec00204 	addi	sp,sp,8
8009a5ec:	f800283a 	ret

8009a5f0 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8009a5f0:	defffb04 	addi	sp,sp,-20
8009a5f4:	df000415 	stw	fp,16(sp)
8009a5f8:	df000404 	addi	fp,sp,16
8009a5fc:	e13ffc15 	stw	r4,-16(fp)
8009a600:	e17ffd15 	stw	r5,-12(fp)
8009a604:	e1bffe15 	stw	r6,-8(fp)
8009a608:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8009a60c:	e0bffc17 	ldw	r2,-16(fp)
8009a610:	10c01217 	ldw	r3,72(r2)
8009a614:	e0800117 	ldw	r2,4(fp)
8009a618:	18800436 	bltu	r3,r2,8009a62c <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8009a61c:	e0bffc17 	ldw	r2,-16(fp)
8009a620:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8009a624:	10803fcc 	andi	r2,r2,255
8009a628:	10000226 	beq	r2,zero,8009a634 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8009a62c:	00bffa84 	movi	r2,-22
8009a630:	00000e06 	br	8009a66c <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
8009a634:	e0bffd17 	ldw	r2,-12(fp)
8009a638:	e0fffe17 	ldw	r3,-8(fp)
8009a63c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8009a640:	e0bffd17 	ldw	r2,-12(fp)
8009a644:	e0ffff17 	ldw	r3,-4(fp)
8009a648:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8009a64c:	e0bffd17 	ldw	r2,-12(fp)
8009a650:	e0c00117 	ldw	r3,4(fp)
8009a654:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8009a658:	e0800217 	ldw	r2,8(fp)
8009a65c:	10e00034 	orhi	r3,r2,32768
8009a660:	e0bffd17 	ldw	r2,-12(fp)
8009a664:	10c00315 	stw	r3,12(r2)
    
    return 0;
8009a668:	0005883a 	mov	r2,zero
}
8009a66c:	e037883a 	mov	sp,fp
8009a670:	df000017 	ldw	fp,0(sp)
8009a674:	dec00104 	addi	sp,sp,4
8009a678:	f800283a 	ret

8009a67c <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8009a67c:	defff604 	addi	sp,sp,-40
8009a680:	df000915 	stw	fp,36(sp)
8009a684:	df000904 	addi	fp,sp,36
8009a688:	e13ff715 	stw	r4,-36(fp)
8009a68c:	e17ff815 	stw	r5,-32(fp)
8009a690:	e1bff915 	stw	r6,-28(fp)
8009a694:	e1fffa15 	stw	r7,-24(fp)
8009a698:	e1800317 	ldw	r6,12(fp)
8009a69c:	e1400417 	ldw	r5,16(fp)
8009a6a0:	e1000517 	ldw	r4,20(fp)
8009a6a4:	e0c00617 	ldw	r3,24(fp)
8009a6a8:	e0800717 	ldw	r2,28(fp)
8009a6ac:	e1bffb0d 	sth	r6,-20(fp)
8009a6b0:	e17ffc05 	stb	r5,-16(fp)
8009a6b4:	e13ffd05 	stb	r4,-12(fp)
8009a6b8:	e0fffe0d 	sth	r3,-8(fp)
8009a6bc:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8009a6c0:	e0bff717 	ldw	r2,-36(fp)
8009a6c4:	10c01217 	ldw	r3,72(r2)
8009a6c8:	e0800117 	ldw	r2,4(fp)
8009a6cc:	18801936 	bltu	r3,r2,8009a734 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8009a6d0:	e13ff717 	ldw	r4,-36(fp)
8009a6d4:	20801317 	ldw	r2,76(r4)
8009a6d8:	20c01417 	ldw	r3,80(r4)
8009a6dc:	e13ffe0b 	ldhu	r4,-8(fp)
8009a6e0:	213fffcc 	andi	r4,r4,65535
8009a6e4:	2015883a 	mov	r10,r4
8009a6e8:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8009a6ec:	1ac01136 	bltu	r3,r11,8009a734 <alt_msgdma_construct_extended_descriptor+0xb8>
8009a6f0:	58c0011e 	bne	r11,r3,8009a6f8 <alt_msgdma_construct_extended_descriptor+0x7c>
8009a6f4:	12800f36 	bltu	r2,r10,8009a734 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8009a6f8:	e13ff717 	ldw	r4,-36(fp)
8009a6fc:	20801317 	ldw	r2,76(r4)
8009a700:	20c01417 	ldw	r3,80(r4)
8009a704:	e13fff0b 	ldhu	r4,-4(fp)
8009a708:	213fffcc 	andi	r4,r4,65535
8009a70c:	2011883a 	mov	r8,r4
8009a710:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8009a714:	1a400736 	bltu	r3,r9,8009a734 <alt_msgdma_construct_extended_descriptor+0xb8>
8009a718:	48c0011e 	bne	r9,r3,8009a720 <alt_msgdma_construct_extended_descriptor+0xa4>
8009a71c:	12000536 	bltu	r2,r8,8009a734 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8009a720:	e0bff717 	ldw	r2,-36(fp)
8009a724:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8009a728:	10803fcc 	andi	r2,r2,255
8009a72c:	10800060 	cmpeqi	r2,r2,1
8009a730:	1000021e 	bne	r2,zero,8009a73c <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8009a734:	00bffa84 	movi	r2,-22
8009a738:	00002106 	br	8009a7c0 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8009a73c:	e0bff817 	ldw	r2,-32(fp)
8009a740:	e0fff917 	ldw	r3,-28(fp)
8009a744:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8009a748:	e0bff817 	ldw	r2,-32(fp)
8009a74c:	e0fffa17 	ldw	r3,-24(fp)
8009a750:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8009a754:	e0bff817 	ldw	r2,-32(fp)
8009a758:	e0c00117 	ldw	r3,4(fp)
8009a75c:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8009a760:	e0bff817 	ldw	r2,-32(fp)
8009a764:	e0fffb0b 	ldhu	r3,-20(fp)
8009a768:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8009a76c:	e0bff817 	ldw	r2,-32(fp)
8009a770:	e0fffc03 	ldbu	r3,-16(fp)
8009a774:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8009a778:	e0bff817 	ldw	r2,-32(fp)
8009a77c:	e0fffd03 	ldbu	r3,-12(fp)
8009a780:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8009a784:	e0bff817 	ldw	r2,-32(fp)
8009a788:	e0fffe0b 	ldhu	r3,-8(fp)
8009a78c:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8009a790:	e0bff817 	ldw	r2,-32(fp)
8009a794:	e0ffff0b 	ldhu	r3,-4(fp)
8009a798:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8009a79c:	e0bff817 	ldw	r2,-32(fp)
8009a7a0:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8009a7a4:	e0bff817 	ldw	r2,-32(fp)
8009a7a8:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8009a7ac:	e0800217 	ldw	r2,8(fp)
8009a7b0:	10e00034 	orhi	r3,r2,32768
8009a7b4:	e0bff817 	ldw	r2,-32(fp)
8009a7b8:	10c00715 	stw	r3,28(r2)

  return 0 ;
8009a7bc:	0005883a 	mov	r2,zero

}
8009a7c0:	e037883a 	mov	sp,fp
8009a7c4:	df000017 	ldw	fp,0(sp)
8009a7c8:	dec00104 	addi	sp,sp,4
8009a7cc:	f800283a 	ret

8009a7d0 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8009a7d0:	defff004 	addi	sp,sp,-64
8009a7d4:	dfc00f15 	stw	ra,60(sp)
8009a7d8:	df000e15 	stw	fp,56(sp)
8009a7dc:	df000e04 	addi	fp,sp,56
8009a7e0:	e13ffd15 	stw	r4,-12(fp)
8009a7e4:	e17ffe15 	stw	r5,-8(fp)
8009a7e8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8009a7ec:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8009a7f0:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
8009a7f4:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a7f8:	e0bffd17 	ldw	r2,-12(fp)
8009a7fc:	10800317 	ldw	r2,12(r2)
8009a800:	10800204 	addi	r2,r2,8
8009a804:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8009a808:	10bfffcc 	andi	r2,r2,65535
8009a80c:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a810:	e0bffd17 	ldw	r2,-12(fp)
8009a814:	10800317 	ldw	r2,12(r2)
8009a818:	10800204 	addi	r2,r2,8
8009a81c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8009a820:	1004d43a 	srli	r2,r2,16
8009a824:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009a828:	e0bffd17 	ldw	r2,-12(fp)
8009a82c:	10800917 	ldw	r2,36(r2)
8009a830:	e0fff617 	ldw	r3,-40(fp)
8009a834:	1880042e 	bgeu	r3,r2,8009a848 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8009a838:	e0bffd17 	ldw	r2,-12(fp)
8009a83c:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009a840:	e0fff517 	ldw	r3,-44(fp)
8009a844:	18800236 	bltu	r3,r2,8009a850 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8009a848:	00bff904 	movi	r2,-28
8009a84c:	00008f06 	br	8009aa8c <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8009a850:	00800804 	movi	r2,32
8009a854:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a858:	0005303a 	rdctl	r2,status
8009a85c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a860:	e0fff717 	ldw	r3,-36(fp)
8009a864:	00bfff84 	movi	r2,-2
8009a868:	1884703a 	and	r2,r3,r2
8009a86c:	1001703a 	wrctl	status,r2
  
  return context;
8009a870:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8009a874:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009a878:	e0bffd17 	ldw	r2,-12(fp)
8009a87c:	10800317 	ldw	r2,12(r2)
8009a880:	10800104 	addi	r2,r2,4
8009a884:	e0fff317 	ldw	r3,-52(fp)
8009a888:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009a88c:	e0bffd17 	ldw	r2,-12(fp)
8009a890:	10800317 	ldw	r2,12(r2)
8009a894:	e0fffd17 	ldw	r3,-12(fp)
8009a898:	18c00317 	ldw	r3,12(r3)
8009a89c:	18c00037 	ldwio	r3,0(r3)
8009a8a0:	10c00035 	stwio	r3,0(r2)
8009a8a4:	e0bff417 	ldw	r2,-48(fp)
8009a8a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a8ac:	e0bffc17 	ldw	r2,-16(fp)
8009a8b0:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8009a8b4:	e0bffe17 	ldw	r2,-8(fp)
8009a8b8:	10001a26 	beq	r2,zero,8009a924 <alt_msgdma_descriptor_async_transfer+0x154>
8009a8bc:	e0bfff17 	ldw	r2,-4(fp)
8009a8c0:	1000181e 	bne	r2,zero,8009a924 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8009a8c4:	00000d06 	br	8009a8fc <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8009a8c8:	01000044 	movi	r4,1
8009a8cc:	009c2180 	call	8009c218 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a8d0:	e0bff20b 	ldhu	r2,-56(fp)
8009a8d4:	1084e230 	cmpltui	r2,r2,5000
8009a8d8:	1000051e 	bne	r2,zero,8009a8f0 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8009a8dc:	012002b4 	movhi	r4,32778
8009a8e0:	213a4f04 	addi	r4,r4,-5828
8009a8e4:	009cc500 	call	8009cc50 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009a8e8:	00bff084 	movi	r2,-62
8009a8ec:	00006706 	br	8009aa8c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8009a8f0:	e0bff20b 	ldhu	r2,-56(fp)
8009a8f4:	10800044 	addi	r2,r2,1
8009a8f8:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8009a8fc:	e0bffd17 	ldw	r2,-12(fp)
8009a900:	10c00317 	ldw	r3,12(r2)
8009a904:	e0bffd17 	ldw	r2,-12(fp)
8009a908:	10800417 	ldw	r2,16(r2)
8009a90c:	e1bffe17 	ldw	r6,-8(fp)
8009a910:	100b883a 	mov	r5,r2
8009a914:	1809883a 	mov	r4,r3
8009a918:	009a2ac0 	call	8009a2ac <alt_msgdma_write_standard_descriptor>
8009a91c:	103fea1e 	bne	r2,zero,8009a8c8 <alt_msgdma_descriptor_async_transfer+0xf8>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8009a920:	00001f06 	br	8009a9a0 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8009a924:	e0bffe17 	ldw	r2,-8(fp)
8009a928:	10001b1e 	bne	r2,zero,8009a998 <alt_msgdma_descriptor_async_transfer+0x1c8>
8009a92c:	e0bfff17 	ldw	r2,-4(fp)
8009a930:	10001926 	beq	r2,zero,8009a998 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
8009a934:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8009a938:	00000d06 	br	8009a970 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8009a93c:	01000044 	movi	r4,1
8009a940:	009c2180 	call	8009c218 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a944:	e0bff20b 	ldhu	r2,-56(fp)
8009a948:	1084e230 	cmpltui	r2,r2,5000
8009a94c:	1000051e 	bne	r2,zero,8009a964 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8009a950:	012002b4 	movhi	r4,32778
8009a954:	213a6504 	addi	r4,r4,-5740
8009a958:	009cc500 	call	8009cc50 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009a95c:	00bff084 	movi	r2,-62
8009a960:	00004a06 	br	8009aa8c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8009a964:	e0bff20b 	ldhu	r2,-56(fp)
8009a968:	10800044 	addi	r2,r2,1
8009a96c:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8009a970:	e0bffd17 	ldw	r2,-12(fp)
8009a974:	10c00317 	ldw	r3,12(r2)
8009a978:	e0bffd17 	ldw	r2,-12(fp)
8009a97c:	10800417 	ldw	r2,16(r2)
8009a980:	e1bfff17 	ldw	r6,-4(fp)
8009a984:	100b883a 	mov	r5,r2
8009a988:	1809883a 	mov	r4,r3
8009a98c:	009a3400 	call	8009a340 <alt_msgdma_write_extended_descriptor>
8009a990:	103fea1e 	bne	r2,zero,8009a93c <alt_msgdma_descriptor_async_transfer+0x16c>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8009a994:	00000206 	br	8009a9a0 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8009a998:	00bfffc4 	movi	r2,-1
8009a99c:	00003b06 	br	8009aa8c <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8009a9a0:	e0bffd17 	ldw	r2,-12(fp)
8009a9a4:	10800b17 	ldw	r2,44(r2)
8009a9a8:	10001c26 	beq	r2,zero,8009aa1c <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
8009a9ac:	e0bffd17 	ldw	r2,-12(fp)
8009a9b0:	10c00d17 	ldw	r3,52(r2)
8009a9b4:	e0bff317 	ldw	r2,-52(fp)
8009a9b8:	1884b03a 	or	r2,r3,r2
8009a9bc:	10800514 	ori	r2,r2,20
8009a9c0:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009a9c4:	e0fff317 	ldw	r3,-52(fp)
8009a9c8:	00bff7c4 	movi	r2,-33
8009a9cc:	1884703a 	and	r2,r3,r2
8009a9d0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a9d4:	0005303a 	rdctl	r2,status
8009a9d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a9dc:	e0fffa17 	ldw	r3,-24(fp)
8009a9e0:	00bfff84 	movi	r2,-2
8009a9e4:	1884703a 	and	r2,r3,r2
8009a9e8:	1001703a 	wrctl	status,r2
  
  return context;
8009a9ec:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8009a9f0:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009a9f4:	e0bffd17 	ldw	r2,-12(fp)
8009a9f8:	10800317 	ldw	r2,12(r2)
8009a9fc:	10800104 	addi	r2,r2,4
8009aa00:	e0fff317 	ldw	r3,-52(fp)
8009aa04:	10c00035 	stwio	r3,0(r2)
8009aa08:	e0bff417 	ldw	r2,-48(fp)
8009aa0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009aa10:	e0bff817 	ldw	r2,-32(fp)
8009aa14:	1001703a 	wrctl	status,r2
8009aa18:	00001b06 	br	8009aa88 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8009aa1c:	e0bffd17 	ldw	r2,-12(fp)
8009aa20:	10c00d17 	ldw	r3,52(r2)
8009aa24:	e0bff317 	ldw	r2,-52(fp)
8009aa28:	1884b03a 	or	r2,r3,r2
8009aa2c:	10800114 	ori	r2,r2,4
8009aa30:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8009aa34:	e0fff317 	ldw	r3,-52(fp)
8009aa38:	00bff3c4 	movi	r2,-49
8009aa3c:	1884703a 	and	r2,r3,r2
8009aa40:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009aa44:	0005303a 	rdctl	r2,status
8009aa48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009aa4c:	e0fffb17 	ldw	r3,-20(fp)
8009aa50:	00bfff84 	movi	r2,-2
8009aa54:	1884703a 	and	r2,r3,r2
8009aa58:	1001703a 	wrctl	status,r2
  
  return context;
8009aa5c:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8009aa60:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009aa64:	e0bffd17 	ldw	r2,-12(fp)
8009aa68:	10800317 	ldw	r2,12(r2)
8009aa6c:	10800104 	addi	r2,r2,4
8009aa70:	e0fff317 	ldw	r3,-52(fp)
8009aa74:	10c00035 	stwio	r3,0(r2)
8009aa78:	e0bff417 	ldw	r2,-48(fp)
8009aa7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009aa80:	e0bff917 	ldw	r2,-28(fp)
8009aa84:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8009aa88:	0005883a 	mov	r2,zero
}
8009aa8c:	e037883a 	mov	sp,fp
8009aa90:	dfc00117 	ldw	ra,4(sp)
8009aa94:	df000017 	ldw	fp,0(sp)
8009aa98:	dec00204 	addi	sp,sp,8
8009aa9c:	f800283a 	ret

8009aaa0 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8009aaa0:	defff004 	addi	sp,sp,-64
8009aaa4:	dfc00f15 	stw	ra,60(sp)
8009aaa8:	df000e15 	stw	fp,56(sp)
8009aaac:	df000e04 	addi	fp,sp,56
8009aab0:	e13ffd15 	stw	r4,-12(fp)
8009aab4:	e17ffe15 	stw	r5,-8(fp)
8009aab8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8009aabc:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8009aac0:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
8009aac4:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8009aac8:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009aacc:	e0bffd17 	ldw	r2,-12(fp)
8009aad0:	10800317 	ldw	r2,12(r2)
8009aad4:	10800204 	addi	r2,r2,8
8009aad8:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8009aadc:	10bfffcc 	andi	r2,r2,65535
8009aae0:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009aae4:	e0bffd17 	ldw	r2,-12(fp)
8009aae8:	10800317 	ldw	r2,12(r2)
8009aaec:	10800204 	addi	r2,r2,8
8009aaf0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8009aaf4:	1004d43a 	srli	r2,r2,16
8009aaf8:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8009aafc:	00807804 	movi	r2,480
8009ab00:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009ab04:	00001906 	br	8009ab6c <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8009ab08:	01000044 	movi	r4,1
8009ab0c:	009c2180 	call	8009c218 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009ab10:	e0bff30b 	ldhu	r2,-52(fp)
8009ab14:	1084e230 	cmpltui	r2,r2,5000
8009ab18:	1000051e 	bne	r2,zero,8009ab30 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8009ab1c:	012002b4 	movhi	r4,32778
8009ab20:	213a7b04 	addi	r4,r4,-5652
8009ab24:	009cc500 	call	8009cc50 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
8009ab28:	00bff084 	movi	r2,-62
8009ab2c:	0000b506 	br	8009ae04 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
8009ab30:	e0bff30b 	ldhu	r2,-52(fp)
8009ab34:	10800044 	addi	r2,r2,1
8009ab38:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009ab3c:	e0bffd17 	ldw	r2,-12(fp)
8009ab40:	10800317 	ldw	r2,12(r2)
8009ab44:	10800204 	addi	r2,r2,8
8009ab48:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8009ab4c:	10bfffcc 	andi	r2,r2,65535
8009ab50:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009ab54:	e0bffd17 	ldw	r2,-12(fp)
8009ab58:	10800317 	ldw	r2,12(r2)
8009ab5c:	10800204 	addi	r2,r2,8
8009ab60:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8009ab64:	1004d43a 	srli	r2,r2,16
8009ab68:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009ab6c:	e0bffd17 	ldw	r2,-12(fp)
8009ab70:	10800917 	ldw	r2,36(r2)
8009ab74:	e0fff517 	ldw	r3,-44(fp)
8009ab78:	18bfe32e 	bgeu	r3,r2,8009ab08 <alt_msgdma_descriptor_sync_transfer+0x68>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8009ab7c:	e0bffd17 	ldw	r2,-12(fp)
8009ab80:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009ab84:	e0fff417 	ldw	r3,-48(fp)
8009ab88:	18bfdf2e 	bgeu	r3,r2,8009ab08 <alt_msgdma_descriptor_sync_transfer+0x68>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009ab8c:	0005303a 	rdctl	r2,status
8009ab90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009ab94:	e0fffc17 	ldw	r3,-16(fp)
8009ab98:	00bfff84 	movi	r2,-2
8009ab9c:	1884703a 	and	r2,r3,r2
8009aba0:	1001703a 	wrctl	status,r2
  
  return context;
8009aba4:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8009aba8:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8009abac:	e0bffd17 	ldw	r2,-12(fp)
8009abb0:	10800317 	ldw	r2,12(r2)
8009abb4:	10800104 	addi	r2,r2,4
8009abb8:	00c00804 	movi	r3,32
8009abbc:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009abc0:	e0bffd17 	ldw	r2,-12(fp)
8009abc4:	10800317 	ldw	r2,12(r2)
8009abc8:	e0fffd17 	ldw	r3,-12(fp)
8009abcc:	18c00317 	ldw	r3,12(r3)
8009abd0:	18c00037 	ldwio	r3,0(r3)
8009abd4:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8009abd8:	e0bffe17 	ldw	r2,-8(fp)
8009abdc:	10001b26 	beq	r2,zero,8009ac4c <alt_msgdma_descriptor_sync_transfer+0x1ac>
8009abe0:	e0bfff17 	ldw	r2,-4(fp)
8009abe4:	1000191e 	bne	r2,zero,8009ac4c <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
8009abe8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8009abec:	00000d06 	br	8009ac24 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8009abf0:	01000044 	movi	r4,1
8009abf4:	009c2180 	call	8009c218 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009abf8:	e0bff30b 	ldhu	r2,-52(fp)
8009abfc:	1084e230 	cmpltui	r2,r2,5000
8009ac00:	1000051e 	bne	r2,zero,8009ac18 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
8009ac04:	012002b4 	movhi	r4,32778
8009ac08:	213a8f04 	addi	r4,r4,-5572
8009ac0c:	009cc500 	call	8009cc50 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009ac10:	00bff084 	movi	r2,-62
8009ac14:	00007b06 	br	8009ae04 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
8009ac18:	e0bff30b 	ldhu	r2,-52(fp)
8009ac1c:	10800044 	addi	r2,r2,1
8009ac20:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8009ac24:	e0bffd17 	ldw	r2,-12(fp)
8009ac28:	10c00317 	ldw	r3,12(r2)
8009ac2c:	e0bffd17 	ldw	r2,-12(fp)
8009ac30:	10800417 	ldw	r2,16(r2)
8009ac34:	e1bffe17 	ldw	r6,-8(fp)
8009ac38:	100b883a 	mov	r5,r2
8009ac3c:	1809883a 	mov	r4,r3
8009ac40:	009a2ac0 	call	8009a2ac <alt_msgdma_write_standard_descriptor>
8009ac44:	103fea1e 	bne	r2,zero,8009abf0 <alt_msgdma_descriptor_sync_transfer+0x150>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8009ac48:	00001f06 	br	8009acc8 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8009ac4c:	e0bffe17 	ldw	r2,-8(fp)
8009ac50:	10001b1e 	bne	r2,zero,8009acc0 <alt_msgdma_descriptor_sync_transfer+0x220>
8009ac54:	e0bfff17 	ldw	r2,-4(fp)
8009ac58:	10001926 	beq	r2,zero,8009acc0 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8009ac5c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8009ac60:	00000d06 	br	8009ac98 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8009ac64:	01000044 	movi	r4,1
8009ac68:	009c2180 	call	8009c218 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009ac6c:	e0bff30b 	ldhu	r2,-52(fp)
8009ac70:	1084e230 	cmpltui	r2,r2,5000
8009ac74:	1000051e 	bne	r2,zero,8009ac8c <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
8009ac78:	012002b4 	movhi	r4,32778
8009ac7c:	213aa004 	addi	r4,r4,-5504
8009ac80:	009cc500 	call	8009cc50 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009ac84:	00bff084 	movi	r2,-62
8009ac88:	00005e06 	br	8009ae04 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8009ac8c:	e0bff30b 	ldhu	r2,-52(fp)
8009ac90:	10800044 	addi	r2,r2,1
8009ac94:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8009ac98:	e0bffd17 	ldw	r2,-12(fp)
8009ac9c:	10c00317 	ldw	r3,12(r2)
8009aca0:	e0bffd17 	ldw	r2,-12(fp)
8009aca4:	10800417 	ldw	r2,16(r2)
8009aca8:	e1bfff17 	ldw	r6,-4(fp)
8009acac:	100b883a 	mov	r5,r2
8009acb0:	1809883a 	mov	r4,r3
8009acb4:	009a3400 	call	8009a340 <alt_msgdma_write_extended_descriptor>
8009acb8:	103fea1e 	bne	r2,zero,8009ac64 <alt_msgdma_descriptor_sync_transfer+0x1c4>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8009acbc:	00000206 	br	8009acc8 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8009acc0:	00bfffc4 	movi	r2,-1
8009acc4:	00004f06 	br	8009ae04 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8009acc8:	e0bffd17 	ldw	r2,-12(fp)
8009accc:	10800317 	ldw	r2,12(r2)
8009acd0:	10800104 	addi	r2,r2,4
8009acd4:	e0fffd17 	ldw	r3,-12(fp)
8009acd8:	19000d17 	ldw	r4,52(r3)
8009acdc:	00fff2c4 	movi	r3,-53
8009ace0:	20c6703a 	and	r3,r4,r3
8009ace4:	18c00114 	ori	r3,r3,4
8009ace8:	10c00035 	stwio	r3,0(r2)
8009acec:	e0bff717 	ldw	r2,-36(fp)
8009acf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009acf4:	e0bff917 	ldw	r2,-28(fp)
8009acf8:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8009acfc:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8009ad00:	e0bffd17 	ldw	r2,-12(fp)
8009ad04:	10800317 	ldw	r2,12(r2)
8009ad08:	10800037 	ldwio	r2,0(r2)
8009ad0c:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8009ad10:	00001106 	br	8009ad58 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
8009ad14:	01000044 	movi	r4,1
8009ad18:	009c2180 	call	8009c218 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009ad1c:	e0bff30b 	ldhu	r2,-52(fp)
8009ad20:	1084e230 	cmpltui	r2,r2,5000
8009ad24:	1000051e 	bne	r2,zero,8009ad3c <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8009ad28:	012002b4 	movhi	r4,32778
8009ad2c:	213ab104 	addi	r4,r4,-5436
8009ad30:	009cc500 	call	8009cc50 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
8009ad34:	00bff084 	movi	r2,-62
8009ad38:	00003206 	br	8009ae04 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8009ad3c:	e0bff30b 	ldhu	r2,-52(fp)
8009ad40:	10800044 	addi	r2,r2,1
8009ad44:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8009ad48:	e0bffd17 	ldw	r2,-12(fp)
8009ad4c:	10800317 	ldw	r2,12(r2)
8009ad50:	10800037 	ldwio	r2,0(r2)
8009ad54:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8009ad58:	e0fff217 	ldw	r3,-56(fp)
8009ad5c:	e0bff817 	ldw	r2,-32(fp)
8009ad60:	1884703a 	and	r2,r3,r2
8009ad64:	1000031e 	bne	r2,zero,8009ad74 <alt_msgdma_descriptor_sync_transfer+0x2d4>
8009ad68:	e0bff217 	ldw	r2,-56(fp)
8009ad6c:	1080004c 	andi	r2,r2,1
8009ad70:	103fe81e 	bne	r2,zero,8009ad14 <alt_msgdma_descriptor_sync_transfer+0x274>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8009ad74:	e0fff217 	ldw	r3,-56(fp)
8009ad78:	e0bff817 	ldw	r2,-32(fp)
8009ad7c:	1884703a 	and	r2,r3,r2
8009ad80:	10000226 	beq	r2,zero,8009ad8c <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
8009ad84:	e0bff817 	ldw	r2,-32(fp)
8009ad88:	00001e06 	br	8009ae04 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8009ad8c:	e0bffd17 	ldw	r2,-12(fp)
8009ad90:	10800317 	ldw	r2,12(r2)
8009ad94:	10800104 	addi	r2,r2,4
8009ad98:	10800037 	ldwio	r2,0(r2)
8009ad9c:	10800814 	ori	r2,r2,32
8009ada0:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009ada4:	0005303a 	rdctl	r2,status
8009ada8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009adac:	e0fffa17 	ldw	r3,-24(fp)
8009adb0:	00bfff84 	movi	r2,-2
8009adb4:	1884703a 	and	r2,r3,r2
8009adb8:	1001703a 	wrctl	status,r2
  
  return context;
8009adbc:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8009adc0:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009adc4:	e0bffd17 	ldw	r2,-12(fp)
8009adc8:	10800317 	ldw	r2,12(r2)
8009adcc:	10800104 	addi	r2,r2,4
8009add0:	e0fff617 	ldw	r3,-40(fp)
8009add4:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009add8:	e0bffd17 	ldw	r2,-12(fp)
8009addc:	10800317 	ldw	r2,12(r2)
8009ade0:	e0fffd17 	ldw	r3,-12(fp)
8009ade4:	18c00317 	ldw	r3,12(r3)
8009ade8:	18c00037 	ldwio	r3,0(r3)
8009adec:	10c00035 	stwio	r3,0(r2)
8009adf0:	e0bff717 	ldw	r2,-36(fp)
8009adf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009adf8:	e0bffb17 	ldw	r2,-20(fp)
8009adfc:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8009ae00:	0005883a 	mov	r2,zero

}
8009ae04:	e037883a 	mov	sp,fp
8009ae08:	dfc00117 	ldw	ra,4(sp)
8009ae0c:	df000017 	ldw	fp,0(sp)
8009ae10:	dec00204 	addi	sp,sp,8
8009ae14:	f800283a 	ret

8009ae18 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8009ae18:	defff804 	addi	sp,sp,-32
8009ae1c:	dfc00715 	stw	ra,28(sp)
8009ae20:	df000615 	stw	fp,24(sp)
8009ae24:	df000604 	addi	fp,sp,24
8009ae28:	e13ffc15 	stw	r4,-16(fp)
8009ae2c:	e17ffd15 	stw	r5,-12(fp)
8009ae30:	e1bffe15 	stw	r6,-8(fp)
8009ae34:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8009ae38:	e0800217 	ldw	r2,8(fp)
8009ae3c:	d8800115 	stw	r2,4(sp)
8009ae40:	e0bfff17 	ldw	r2,-4(fp)
8009ae44:	d8800015 	stw	r2,0(sp)
8009ae48:	e1fffe17 	ldw	r7,-8(fp)
8009ae4c:	000d883a 	mov	r6,zero
8009ae50:	e17ffd17 	ldw	r5,-12(fp)
8009ae54:	e13ffc17 	ldw	r4,-16(fp)
8009ae58:	009a5f00 	call	8009a5f0 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8009ae5c:	e037883a 	mov	sp,fp
8009ae60:	dfc00117 	ldw	ra,4(sp)
8009ae64:	df000017 	ldw	fp,0(sp)
8009ae68:	dec00204 	addi	sp,sp,8
8009ae6c:	f800283a 	ret

8009ae70 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8009ae70:	defff804 	addi	sp,sp,-32
8009ae74:	dfc00715 	stw	ra,28(sp)
8009ae78:	df000615 	stw	fp,24(sp)
8009ae7c:	df000604 	addi	fp,sp,24
8009ae80:	e13ffc15 	stw	r4,-16(fp)
8009ae84:	e17ffd15 	stw	r5,-12(fp)
8009ae88:	e1bffe15 	stw	r6,-8(fp)
8009ae8c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8009ae90:	e0800217 	ldw	r2,8(fp)
8009ae94:	d8800115 	stw	r2,4(sp)
8009ae98:	e0bfff17 	ldw	r2,-4(fp)
8009ae9c:	d8800015 	stw	r2,0(sp)
8009aea0:	000f883a 	mov	r7,zero
8009aea4:	e1bffe17 	ldw	r6,-8(fp)
8009aea8:	e17ffd17 	ldw	r5,-12(fp)
8009aeac:	e13ffc17 	ldw	r4,-16(fp)
8009aeb0:	009a5f00 	call	8009a5f0 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8009aeb4:	e037883a 	mov	sp,fp
8009aeb8:	dfc00117 	ldw	ra,4(sp)
8009aebc:	df000017 	ldw	fp,0(sp)
8009aec0:	dec00204 	addi	sp,sp,8
8009aec4:	f800283a 	ret

8009aec8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8009aec8:	defff804 	addi	sp,sp,-32
8009aecc:	dfc00715 	stw	ra,28(sp)
8009aed0:	df000615 	stw	fp,24(sp)
8009aed4:	df000604 	addi	fp,sp,24
8009aed8:	e13ffc15 	stw	r4,-16(fp)
8009aedc:	e17ffd15 	stw	r5,-12(fp)
8009aee0:	e1bffe15 	stw	r6,-8(fp)
8009aee4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8009aee8:	e0800317 	ldw	r2,12(fp)
8009aeec:	d8800115 	stw	r2,4(sp)
8009aef0:	e0800217 	ldw	r2,8(fp)
8009aef4:	d8800015 	stw	r2,0(sp)
8009aef8:	e1ffff17 	ldw	r7,-4(fp)
8009aefc:	e1bffe17 	ldw	r6,-8(fp)
8009af00:	e17ffd17 	ldw	r5,-12(fp)
8009af04:	e13ffc17 	ldw	r4,-16(fp)
8009af08:	009a5f00 	call	8009a5f0 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8009af0c:	e037883a 	mov	sp,fp
8009af10:	dfc00117 	ldw	ra,4(sp)
8009af14:	df000017 	ldw	fp,0(sp)
8009af18:	dec00204 	addi	sp,sp,8
8009af1c:	f800283a 	ret

8009af20 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8009af20:	defff004 	addi	sp,sp,-64
8009af24:	dfc00f15 	stw	ra,60(sp)
8009af28:	df000e15 	stw	fp,56(sp)
8009af2c:	df000e04 	addi	fp,sp,56
8009af30:	e13ff915 	stw	r4,-28(fp)
8009af34:	e17ffa15 	stw	r5,-24(fp)
8009af38:	e1bffb15 	stw	r6,-20(fp)
8009af3c:	e1fffc15 	stw	r7,-16(fp)
8009af40:	e1000317 	ldw	r4,12(fp)
8009af44:	e0c00417 	ldw	r3,16(fp)
8009af48:	e0800517 	ldw	r2,20(fp)
8009af4c:	e13ffd0d 	sth	r4,-12(fp)
8009af50:	e0fffe05 	stb	r3,-8(fp)
8009af54:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8009af58:	e0bffd0b 	ldhu	r2,-12(fp)
8009af5c:	e0fffe03 	ldbu	r3,-8(fp)
8009af60:	e13fff0b 	ldhu	r4,-4(fp)
8009af64:	d9000615 	stw	r4,24(sp)
8009af68:	d8000515 	stw	zero,20(sp)
8009af6c:	d8c00415 	stw	r3,16(sp)
8009af70:	d8000315 	stw	zero,12(sp)
8009af74:	d8800215 	stw	r2,8(sp)
8009af78:	e0800217 	ldw	r2,8(fp)
8009af7c:	d8800115 	stw	r2,4(sp)
8009af80:	e0bffc17 	ldw	r2,-16(fp)
8009af84:	d8800015 	stw	r2,0(sp)
8009af88:	e1fffb17 	ldw	r7,-20(fp)
8009af8c:	000d883a 	mov	r6,zero
8009af90:	e17ffa17 	ldw	r5,-24(fp)
8009af94:	e13ff917 	ldw	r4,-28(fp)
8009af98:	009a67c0 	call	8009a67c <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8009af9c:	e037883a 	mov	sp,fp
8009afa0:	dfc00117 	ldw	ra,4(sp)
8009afa4:	df000017 	ldw	fp,0(sp)
8009afa8:	dec00204 	addi	sp,sp,8
8009afac:	f800283a 	ret

8009afb0 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8009afb0:	defff004 	addi	sp,sp,-64
8009afb4:	dfc00f15 	stw	ra,60(sp)
8009afb8:	df000e15 	stw	fp,56(sp)
8009afbc:	df000e04 	addi	fp,sp,56
8009afc0:	e13ff915 	stw	r4,-28(fp)
8009afc4:	e17ffa15 	stw	r5,-24(fp)
8009afc8:	e1bffb15 	stw	r6,-20(fp)
8009afcc:	e1fffc15 	stw	r7,-16(fp)
8009afd0:	e1000317 	ldw	r4,12(fp)
8009afd4:	e0c00417 	ldw	r3,16(fp)
8009afd8:	e0800517 	ldw	r2,20(fp)
8009afdc:	e13ffd0d 	sth	r4,-12(fp)
8009afe0:	e0fffe05 	stb	r3,-8(fp)
8009afe4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8009afe8:	e0bffd0b 	ldhu	r2,-12(fp)
8009afec:	e0fffe03 	ldbu	r3,-8(fp)
8009aff0:	e13fff0b 	ldhu	r4,-4(fp)
8009aff4:	d8000615 	stw	zero,24(sp)
8009aff8:	d9000515 	stw	r4,20(sp)
8009affc:	d8000415 	stw	zero,16(sp)
8009b000:	d8c00315 	stw	r3,12(sp)
8009b004:	d8800215 	stw	r2,8(sp)
8009b008:	e0800217 	ldw	r2,8(fp)
8009b00c:	d8800115 	stw	r2,4(sp)
8009b010:	e0bffc17 	ldw	r2,-16(fp)
8009b014:	d8800015 	stw	r2,0(sp)
8009b018:	000f883a 	mov	r7,zero
8009b01c:	e1bffb17 	ldw	r6,-20(fp)
8009b020:	e17ffa17 	ldw	r5,-24(fp)
8009b024:	e13ff917 	ldw	r4,-28(fp)
8009b028:	009a67c0 	call	8009a67c <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8009b02c:	e037883a 	mov	sp,fp
8009b030:	dfc00117 	ldw	ra,4(sp)
8009b034:	df000017 	ldw	fp,0(sp)
8009b038:	dec00204 	addi	sp,sp,8
8009b03c:	f800283a 	ret

8009b040 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8009b040:	deffee04 	addi	sp,sp,-72
8009b044:	dfc01115 	stw	ra,68(sp)
8009b048:	df001015 	stw	fp,64(sp)
8009b04c:	df001004 	addi	fp,sp,64
8009b050:	e13ff715 	stw	r4,-36(fp)
8009b054:	e17ff815 	stw	r5,-32(fp)
8009b058:	e1bff915 	stw	r6,-28(fp)
8009b05c:	e1fffa15 	stw	r7,-24(fp)
8009b060:	e1800417 	ldw	r6,16(fp)
8009b064:	e1400517 	ldw	r5,20(fp)
8009b068:	e1000617 	ldw	r4,24(fp)
8009b06c:	e0c00717 	ldw	r3,28(fp)
8009b070:	e0800817 	ldw	r2,32(fp)
8009b074:	e1bffb0d 	sth	r6,-20(fp)
8009b078:	e17ffc05 	stb	r5,-16(fp)
8009b07c:	e13ffd05 	stb	r4,-12(fp)
8009b080:	e0fffe0d 	sth	r3,-8(fp)
8009b084:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8009b088:	e0bffb0b 	ldhu	r2,-20(fp)
8009b08c:	e0fffc03 	ldbu	r3,-16(fp)
8009b090:	e13ffd03 	ldbu	r4,-12(fp)
8009b094:	e17ffe0b 	ldhu	r5,-8(fp)
8009b098:	e1bfff0b 	ldhu	r6,-4(fp)
8009b09c:	d9800615 	stw	r6,24(sp)
8009b0a0:	d9400515 	stw	r5,20(sp)
8009b0a4:	d9000415 	stw	r4,16(sp)
8009b0a8:	d8c00315 	stw	r3,12(sp)
8009b0ac:	d8800215 	stw	r2,8(sp)
8009b0b0:	e0800317 	ldw	r2,12(fp)
8009b0b4:	d8800115 	stw	r2,4(sp)
8009b0b8:	e0800217 	ldw	r2,8(fp)
8009b0bc:	d8800015 	stw	r2,0(sp)
8009b0c0:	e1fffa17 	ldw	r7,-24(fp)
8009b0c4:	e1bff917 	ldw	r6,-28(fp)
8009b0c8:	e17ff817 	ldw	r5,-32(fp)
8009b0cc:	e13ff717 	ldw	r4,-36(fp)
8009b0d0:	009a67c0 	call	8009a67c <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8009b0d4:	e037883a 	mov	sp,fp
8009b0d8:	dfc00117 	ldw	ra,4(sp)
8009b0dc:	df000017 	ldw	fp,0(sp)
8009b0e0:	dec00204 	addi	sp,sp,8
8009b0e4:	f800283a 	ret

8009b0e8 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8009b0e8:	defffb04 	addi	sp,sp,-20
8009b0ec:	df000415 	stw	fp,16(sp)
8009b0f0:	df000404 	addi	fp,sp,16
8009b0f4:	e13ffc15 	stw	r4,-16(fp)
8009b0f8:	e17ffd15 	stw	r5,-12(fp)
8009b0fc:	e1bffe15 	stw	r6,-8(fp)
8009b100:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8009b104:	e0bffc17 	ldw	r2,-16(fp)
8009b108:	10c01217 	ldw	r3,72(r2)
8009b10c:	e0800117 	ldw	r2,4(fp)
8009b110:	18800436 	bltu	r3,r2,8009b124 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8009b114:	e0bffc17 	ldw	r2,-16(fp)
8009b118:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8009b11c:	10803fcc 	andi	r2,r2,255
8009b120:	10000226 	beq	r2,zero,8009b12c <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8009b124:	00bffa84 	movi	r2,-22
8009b128:	00001406 	br	8009b17c <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
8009b12c:	e0bffd17 	ldw	r2,-12(fp)
8009b130:	e0fffe17 	ldw	r3,-8(fp)
8009b134:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8009b138:	e0bffd17 	ldw	r2,-12(fp)
8009b13c:	e0ffff17 	ldw	r3,-4(fp)
8009b140:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8009b144:	e0bffd17 	ldw	r2,-12(fp)
8009b148:	e0c00117 	ldw	r3,4(fp)
8009b14c:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8009b150:	e0fffd17 	ldw	r3,-12(fp)
8009b154:	e0bffd17 	ldw	r2,-12(fp)
8009b158:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8009b15c:	e0c00217 	ldw	r3,8(fp)
8009b160:	00900034 	movhi	r2,16384
8009b164:	10bfffc4 	addi	r2,r2,-1
8009b168:	1884703a 	and	r2,r3,r2
8009b16c:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8009b170:	e0bffd17 	ldw	r2,-12(fp)
8009b174:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8009b178:	0005883a 	mov	r2,zero
}
8009b17c:	e037883a 	mov	sp,fp
8009b180:	df000017 	ldw	fp,0(sp)
8009b184:	dec00104 	addi	sp,sp,4
8009b188:	f800283a 	ret

8009b18c <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8009b18c:	defff404 	addi	sp,sp,-48
8009b190:	df000b15 	stw	fp,44(sp)
8009b194:	df000b04 	addi	fp,sp,44
8009b198:	e13ff715 	stw	r4,-36(fp)
8009b19c:	e17ff815 	stw	r5,-32(fp)
8009b1a0:	e1bff915 	stw	r6,-28(fp)
8009b1a4:	e1fffa15 	stw	r7,-24(fp)
8009b1a8:	e1800517 	ldw	r6,20(fp)
8009b1ac:	e1400617 	ldw	r5,24(fp)
8009b1b0:	e1000717 	ldw	r4,28(fp)
8009b1b4:	e0c00817 	ldw	r3,32(fp)
8009b1b8:	e0800917 	ldw	r2,36(fp)
8009b1bc:	e1bffb0d 	sth	r6,-20(fp)
8009b1c0:	e17ffc05 	stb	r5,-16(fp)
8009b1c4:	e13ffd05 	stb	r4,-12(fp)
8009b1c8:	e0fffe0d 	sth	r3,-8(fp)
8009b1cc:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8009b1d0:	e0bff717 	ldw	r2,-36(fp)
8009b1d4:	10c01217 	ldw	r3,72(r2)
8009b1d8:	e0800317 	ldw	r2,12(fp)
8009b1dc:	18801936 	bltu	r3,r2,8009b244 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8009b1e0:	e13ff717 	ldw	r4,-36(fp)
8009b1e4:	20801317 	ldw	r2,76(r4)
8009b1e8:	20c01417 	ldw	r3,80(r4)
8009b1ec:	e13ffe0b 	ldhu	r4,-8(fp)
8009b1f0:	213fffcc 	andi	r4,r4,65535
8009b1f4:	2015883a 	mov	r10,r4
8009b1f8:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8009b1fc:	1ac01136 	bltu	r3,r11,8009b244 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8009b200:	58c0011e 	bne	r11,r3,8009b208 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8009b204:	12800f36 	bltu	r2,r10,8009b244 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8009b208:	e13ff717 	ldw	r4,-36(fp)
8009b20c:	20801317 	ldw	r2,76(r4)
8009b210:	20c01417 	ldw	r3,80(r4)
8009b214:	e13fff0b 	ldhu	r4,-4(fp)
8009b218:	213fffcc 	andi	r4,r4,65535
8009b21c:	2011883a 	mov	r8,r4
8009b220:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8009b224:	1a400736 	bltu	r3,r9,8009b244 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8009b228:	48c0011e 	bne	r9,r3,8009b230 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
8009b22c:	12000536 	bltu	r2,r8,8009b244 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8009b230:	e0bff717 	ldw	r2,-36(fp)
8009b234:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8009b238:	10803fcc 	andi	r2,r2,255
8009b23c:	10800060 	cmpeqi	r2,r2,1
8009b240:	1000021e 	bne	r2,zero,8009b24c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8009b244:	00bffa84 	movi	r2,-22
8009b248:	00003106 	br	8009b310 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
8009b24c:	e0bff817 	ldw	r2,-32(fp)
8009b250:	e0fff917 	ldw	r3,-28(fp)
8009b254:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8009b258:	e0bff817 	ldw	r2,-32(fp)
8009b25c:	e0fffa17 	ldw	r3,-24(fp)
8009b260:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8009b264:	e0bff817 	ldw	r2,-32(fp)
8009b268:	e0c00117 	ldw	r3,4(fp)
8009b26c:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8009b270:	e0bff817 	ldw	r2,-32(fp)
8009b274:	e0c00217 	ldw	r3,8(fp)
8009b278:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8009b27c:	e0bff817 	ldw	r2,-32(fp)
8009b280:	e0c00317 	ldw	r3,12(fp)
8009b284:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8009b288:	e0bff817 	ldw	r2,-32(fp)
8009b28c:	e0fffb0b 	ldhu	r3,-20(fp)
8009b290:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8009b294:	e0bff817 	ldw	r2,-32(fp)
8009b298:	e0fffc03 	ldbu	r3,-16(fp)
8009b29c:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8009b2a0:	e0bff817 	ldw	r2,-32(fp)
8009b2a4:	e0fffd03 	ldbu	r3,-12(fp)
8009b2a8:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8009b2ac:	e0bff817 	ldw	r2,-32(fp)
8009b2b0:	e0fffe0b 	ldhu	r3,-8(fp)
8009b2b4:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8009b2b8:	e0bff817 	ldw	r2,-32(fp)
8009b2bc:	e0ffff0b 	ldhu	r3,-4(fp)
8009b2c0:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8009b2c4:	e0bff817 	ldw	r2,-32(fp)
8009b2c8:	1019883a 	mov	r12,r2
8009b2cc:	001b883a 	mov	r13,zero
8009b2d0:	e33ff515 	stw	r12,-44(fp)
8009b2d4:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8009b2d8:	e0fff517 	ldw	r3,-44(fp)
8009b2dc:	e0bff817 	ldw	r2,-32(fp)
8009b2e0:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8009b2e4:	e0fff617 	ldw	r3,-40(fp)
8009b2e8:	e0bff817 	ldw	r2,-32(fp)
8009b2ec:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8009b2f0:	e0c00417 	ldw	r3,16(fp)
8009b2f4:	00900034 	movhi	r2,16384
8009b2f8:	10bfffc4 	addi	r2,r2,-1
8009b2fc:	1884703a 	and	r2,r3,r2
8009b300:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8009b304:	e0bff817 	ldw	r2,-32(fp)
8009b308:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8009b30c:	0005883a 	mov	r2,zero
}
8009b310:	e037883a 	mov	sp,fp
8009b314:	df000017 	ldw	fp,0(sp)
8009b318:	dec00104 	addi	sp,sp,4
8009b31c:	f800283a 	ret

8009b320 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8009b320:	defff804 	addi	sp,sp,-32
8009b324:	dfc00715 	stw	ra,28(sp)
8009b328:	df000615 	stw	fp,24(sp)
8009b32c:	df000604 	addi	fp,sp,24
8009b330:	e13ffc15 	stw	r4,-16(fp)
8009b334:	e17ffd15 	stw	r5,-12(fp)
8009b338:	e1bffe15 	stw	r6,-8(fp)
8009b33c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8009b340:	e0800317 	ldw	r2,12(fp)
8009b344:	d8800115 	stw	r2,4(sp)
8009b348:	e0800217 	ldw	r2,8(fp)
8009b34c:	d8800015 	stw	r2,0(sp)
8009b350:	e1ffff17 	ldw	r7,-4(fp)
8009b354:	e1bffe17 	ldw	r6,-8(fp)
8009b358:	e17ffd17 	ldw	r5,-12(fp)
8009b35c:	e13ffc17 	ldw	r4,-16(fp)
8009b360:	009b0e80 	call	8009b0e8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8009b364:	e037883a 	mov	sp,fp
8009b368:	dfc00117 	ldw	ra,4(sp)
8009b36c:	df000017 	ldw	fp,0(sp)
8009b370:	dec00204 	addi	sp,sp,8
8009b374:	f800283a 	ret

8009b378 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8009b378:	defff804 	addi	sp,sp,-32
8009b37c:	dfc00715 	stw	ra,28(sp)
8009b380:	df000615 	stw	fp,24(sp)
8009b384:	df000604 	addi	fp,sp,24
8009b388:	e13ffc15 	stw	r4,-16(fp)
8009b38c:	e17ffd15 	stw	r5,-12(fp)
8009b390:	e1bffe15 	stw	r6,-8(fp)
8009b394:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8009b398:	e0800217 	ldw	r2,8(fp)
8009b39c:	d8800115 	stw	r2,4(sp)
8009b3a0:	e0bfff17 	ldw	r2,-4(fp)
8009b3a4:	d8800015 	stw	r2,0(sp)
8009b3a8:	e1fffe17 	ldw	r7,-8(fp)
8009b3ac:	000d883a 	mov	r6,zero
8009b3b0:	e17ffd17 	ldw	r5,-12(fp)
8009b3b4:	e13ffc17 	ldw	r4,-16(fp)
8009b3b8:	009b0e80 	call	8009b0e8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8009b3bc:	e037883a 	mov	sp,fp
8009b3c0:	dfc00117 	ldw	ra,4(sp)
8009b3c4:	df000017 	ldw	fp,0(sp)
8009b3c8:	dec00204 	addi	sp,sp,8
8009b3cc:	f800283a 	ret

8009b3d0 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8009b3d0:	defff804 	addi	sp,sp,-32
8009b3d4:	dfc00715 	stw	ra,28(sp)
8009b3d8:	df000615 	stw	fp,24(sp)
8009b3dc:	df000604 	addi	fp,sp,24
8009b3e0:	e13ffc15 	stw	r4,-16(fp)
8009b3e4:	e17ffd15 	stw	r5,-12(fp)
8009b3e8:	e1bffe15 	stw	r6,-8(fp)
8009b3ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8009b3f0:	e0800217 	ldw	r2,8(fp)
8009b3f4:	d8800115 	stw	r2,4(sp)
8009b3f8:	e0bfff17 	ldw	r2,-4(fp)
8009b3fc:	d8800015 	stw	r2,0(sp)
8009b400:	000f883a 	mov	r7,zero
8009b404:	e1bffe17 	ldw	r6,-8(fp)
8009b408:	e17ffd17 	ldw	r5,-12(fp)
8009b40c:	e13ffc17 	ldw	r4,-16(fp)
8009b410:	009b0e80 	call	8009b0e8 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8009b414:	e037883a 	mov	sp,fp
8009b418:	dfc00117 	ldw	ra,4(sp)
8009b41c:	df000017 	ldw	fp,0(sp)
8009b420:	dec00204 	addi	sp,sp,8
8009b424:	f800283a 	ret

8009b428 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8009b428:	deffee04 	addi	sp,sp,-72
8009b42c:	dfc01115 	stw	ra,68(sp)
8009b430:	df001015 	stw	fp,64(sp)
8009b434:	df001004 	addi	fp,sp,64
8009b438:	e13ff915 	stw	r4,-28(fp)
8009b43c:	e17ffa15 	stw	r5,-24(fp)
8009b440:	e1bffb15 	stw	r6,-20(fp)
8009b444:	e1fffc15 	stw	r7,-16(fp)
8009b448:	e1000417 	ldw	r4,16(fp)
8009b44c:	e0c00517 	ldw	r3,20(fp)
8009b450:	e0800617 	ldw	r2,24(fp)
8009b454:	e13ffd0d 	sth	r4,-12(fp)
8009b458:	e0fffe05 	stb	r3,-8(fp)
8009b45c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8009b460:	e0bffd0b 	ldhu	r2,-12(fp)
8009b464:	e0fffe03 	ldbu	r3,-8(fp)
8009b468:	e13fff0b 	ldhu	r4,-4(fp)
8009b46c:	d9000815 	stw	r4,32(sp)
8009b470:	d8000715 	stw	zero,28(sp)
8009b474:	d8c00615 	stw	r3,24(sp)
8009b478:	d8000515 	stw	zero,20(sp)
8009b47c:	d8800415 	stw	r2,16(sp)
8009b480:	e0800317 	ldw	r2,12(fp)
8009b484:	d8800315 	stw	r2,12(sp)
8009b488:	e0800217 	ldw	r2,8(fp)
8009b48c:	d8800215 	stw	r2,8(sp)
8009b490:	e0bffc17 	ldw	r2,-16(fp)
8009b494:	d8800115 	stw	r2,4(sp)
8009b498:	e0bffb17 	ldw	r2,-20(fp)
8009b49c:	d8800015 	stw	r2,0(sp)
8009b4a0:	000f883a 	mov	r7,zero
8009b4a4:	000d883a 	mov	r6,zero
8009b4a8:	e17ffa17 	ldw	r5,-24(fp)
8009b4ac:	e13ff917 	ldw	r4,-28(fp)
8009b4b0:	009b18c0 	call	8009b18c <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8009b4b4:	e037883a 	mov	sp,fp
8009b4b8:	dfc00117 	ldw	ra,4(sp)
8009b4bc:	df000017 	ldw	fp,0(sp)
8009b4c0:	dec00204 	addi	sp,sp,8
8009b4c4:	f800283a 	ret

8009b4c8 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8009b4c8:	deffee04 	addi	sp,sp,-72
8009b4cc:	dfc01115 	stw	ra,68(sp)
8009b4d0:	df001015 	stw	fp,64(sp)
8009b4d4:	df001004 	addi	fp,sp,64
8009b4d8:	e13ff915 	stw	r4,-28(fp)
8009b4dc:	e17ffa15 	stw	r5,-24(fp)
8009b4e0:	e1bffb15 	stw	r6,-20(fp)
8009b4e4:	e1fffc15 	stw	r7,-16(fp)
8009b4e8:	e1000417 	ldw	r4,16(fp)
8009b4ec:	e0c00517 	ldw	r3,20(fp)
8009b4f0:	e0800617 	ldw	r2,24(fp)
8009b4f4:	e13ffd0d 	sth	r4,-12(fp)
8009b4f8:	e0fffe05 	stb	r3,-8(fp)
8009b4fc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8009b500:	e0bffd0b 	ldhu	r2,-12(fp)
8009b504:	e0fffe03 	ldbu	r3,-8(fp)
8009b508:	e13fff0b 	ldhu	r4,-4(fp)
8009b50c:	d8000815 	stw	zero,32(sp)
8009b510:	d9000715 	stw	r4,28(sp)
8009b514:	d8000615 	stw	zero,24(sp)
8009b518:	d8c00515 	stw	r3,20(sp)
8009b51c:	d8800415 	stw	r2,16(sp)
8009b520:	e0800317 	ldw	r2,12(fp)
8009b524:	d8800315 	stw	r2,12(sp)
8009b528:	e0800217 	ldw	r2,8(fp)
8009b52c:	d8800215 	stw	r2,8(sp)
8009b530:	d8000115 	stw	zero,4(sp)
8009b534:	d8000015 	stw	zero,0(sp)
8009b538:	e1fffc17 	ldw	r7,-16(fp)
8009b53c:	e1bffb17 	ldw	r6,-20(fp)
8009b540:	e17ffa17 	ldw	r5,-24(fp)
8009b544:	e13ff917 	ldw	r4,-28(fp)
8009b548:	009b18c0 	call	8009b18c <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8009b54c:	e037883a 	mov	sp,fp
8009b550:	dfc00117 	ldw	ra,4(sp)
8009b554:	df000017 	ldw	fp,0(sp)
8009b558:	dec00204 	addi	sp,sp,8
8009b55c:	f800283a 	ret

8009b560 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8009b560:	deffec04 	addi	sp,sp,-80
8009b564:	dfc01315 	stw	ra,76(sp)
8009b568:	df001215 	stw	fp,72(sp)
8009b56c:	df001204 	addi	fp,sp,72
8009b570:	e13ff715 	stw	r4,-36(fp)
8009b574:	e17ff815 	stw	r5,-32(fp)
8009b578:	e1bff915 	stw	r6,-28(fp)
8009b57c:	e1fffa15 	stw	r7,-24(fp)
8009b580:	e1800617 	ldw	r6,24(fp)
8009b584:	e1400717 	ldw	r5,28(fp)
8009b588:	e1000817 	ldw	r4,32(fp)
8009b58c:	e0c00917 	ldw	r3,36(fp)
8009b590:	e0800a17 	ldw	r2,40(fp)
8009b594:	e1bffb0d 	sth	r6,-20(fp)
8009b598:	e17ffc05 	stb	r5,-16(fp)
8009b59c:	e13ffd05 	stb	r4,-12(fp)
8009b5a0:	e0fffe0d 	sth	r3,-8(fp)
8009b5a4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8009b5a8:	e0bffb0b 	ldhu	r2,-20(fp)
8009b5ac:	e0fffc03 	ldbu	r3,-16(fp)
8009b5b0:	e13ffd03 	ldbu	r4,-12(fp)
8009b5b4:	e17ffe0b 	ldhu	r5,-8(fp)
8009b5b8:	e1bfff0b 	ldhu	r6,-4(fp)
8009b5bc:	d9800815 	stw	r6,32(sp)
8009b5c0:	d9400715 	stw	r5,28(sp)
8009b5c4:	d9000615 	stw	r4,24(sp)
8009b5c8:	d8c00515 	stw	r3,20(sp)
8009b5cc:	d8800415 	stw	r2,16(sp)
8009b5d0:	e0800517 	ldw	r2,20(fp)
8009b5d4:	d8800315 	stw	r2,12(sp)
8009b5d8:	e0800417 	ldw	r2,16(fp)
8009b5dc:	d8800215 	stw	r2,8(sp)
8009b5e0:	e0800317 	ldw	r2,12(fp)
8009b5e4:	d8800115 	stw	r2,4(sp)
8009b5e8:	e0800217 	ldw	r2,8(fp)
8009b5ec:	d8800015 	stw	r2,0(sp)
8009b5f0:	e1fffa17 	ldw	r7,-24(fp)
8009b5f4:	e1bff917 	ldw	r6,-28(fp)
8009b5f8:	e17ff817 	ldw	r5,-32(fp)
8009b5fc:	e13ff717 	ldw	r4,-36(fp)
8009b600:	009b18c0 	call	8009b18c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8009b604:	e037883a 	mov	sp,fp
8009b608:	dfc00117 	ldw	ra,4(sp)
8009b60c:	df000017 	ldw	fp,0(sp)
8009b610:	dec00204 	addi	sp,sp,8
8009b614:	f800283a 	ret

8009b618 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8009b618:	defffc04 	addi	sp,sp,-16
8009b61c:	df000315 	stw	fp,12(sp)
8009b620:	df000304 	addi	fp,sp,12
8009b624:	e13ffe15 	stw	r4,-8(fp)
8009b628:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8009b62c:	e0bfff17 	ldw	r2,-4(fp)
8009b630:	1000021e 	bne	r2,zero,8009b63c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8009b634:	00bffa84 	movi	r2,-22
8009b638:	00002f06 	br	8009b6f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8009b63c:	e0bfff17 	ldw	r2,-4(fp)
8009b640:	10c00317 	ldw	r3,12(r2)
8009b644:	e0bfff17 	ldw	r2,-4(fp)
8009b648:	18800226 	beq	r3,r2,8009b654 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8009b64c:	00bffa84 	movi	r2,-22
8009b650:	00002906 	br	8009b6f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
8009b654:	e0bffe17 	ldw	r2,-8(fp)
8009b658:	10800017 	ldw	r2,0(r2)
8009b65c:	1000051e 	bne	r2,zero,8009b674 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8009b660:	e0bffe17 	ldw	r2,-8(fp)
8009b664:	e0ffff17 	ldw	r3,-4(fp)
8009b668:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8009b66c:	0005883a 	mov	r2,zero
8009b670:	00002106 	br	8009b6f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
8009b674:	e0bffe17 	ldw	r2,-8(fp)
8009b678:	10c00017 	ldw	r3,0(r2)
8009b67c:	e0bfff17 	ldw	r2,-4(fp)
8009b680:	1880021e 	bne	r3,r2,8009b68c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8009b684:	00bffa84 	movi	r2,-22
8009b688:	00001b06 	br	8009b6f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8009b68c:	e0bffe17 	ldw	r2,-8(fp)
8009b690:	10800017 	ldw	r2,0(r2)
8009b694:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8009b698:	00000906 	br	8009b6c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8009b69c:	e0bffd17 	ldw	r2,-12(fp)
8009b6a0:	10c00317 	ldw	r3,12(r2)
8009b6a4:	e0bfff17 	ldw	r2,-4(fp)
8009b6a8:	1880021e 	bne	r3,r2,8009b6b4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8009b6ac:	00bffa84 	movi	r2,-22
8009b6b0:	00001106 	br	8009b6f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8009b6b4:	e0bffd17 	ldw	r2,-12(fp)
8009b6b8:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8009b6bc:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8009b6c0:	e0bffd17 	ldw	r2,-12(fp)
8009b6c4:	10800317 	ldw	r2,12(r2)
8009b6c8:	e0fffe17 	ldw	r3,-8(fp)
8009b6cc:	18c00017 	ldw	r3,0(r3)
8009b6d0:	10fff21e 	bne	r2,r3,8009b69c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x84>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8009b6d4:	e0ffff17 	ldw	r3,-4(fp)
8009b6d8:	e0bffd17 	ldw	r2,-12(fp)
8009b6dc:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8009b6e0:	e0bffe17 	ldw	r2,-8(fp)
8009b6e4:	10800017 	ldw	r2,0(r2)
8009b6e8:	1007883a 	mov	r3,r2
8009b6ec:	e0bfff17 	ldw	r2,-4(fp)
8009b6f0:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8009b6f4:	0005883a 	mov	r2,zero
}
8009b6f8:	e037883a 	mov	sp,fp
8009b6fc:	df000017 	ldw	fp,0(sp)
8009b700:	dec00104 	addi	sp,sp,4
8009b704:	f800283a 	ret

8009b708 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8009b708:	defff804 	addi	sp,sp,-32
8009b70c:	df000715 	stw	fp,28(sp)
8009b710:	df000704 	addi	fp,sp,28
8009b714:	e13ffe15 	stw	r4,-8(fp)
8009b718:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8009b71c:	e13fff17 	ldw	r4,-4(fp)
8009b720:	2000021e 	bne	r4,zero,8009b72c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8009b724:	00bffa84 	movi	r2,-22
8009b728:	00005906 	br	8009b890 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8009b72c:	e13fff17 	ldw	r4,-4(fp)
8009b730:	2015883a 	mov	r10,r4
8009b734:	0017883a 	mov	r11,zero
8009b738:	e2bffc15 	stw	r10,-16(fp)
8009b73c:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8009b740:	e13fff17 	ldw	r4,-4(fp)
8009b744:	21400317 	ldw	r5,12(r4)
8009b748:	e13ffc17 	ldw	r4,-16(fp)
8009b74c:	29000626 	beq	r5,r4,8009b768 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8009b750:	e13fff17 	ldw	r4,-4(fp)
8009b754:	21400b17 	ldw	r5,44(r4)
8009b758:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8009b75c:	29000226 	beq	r5,r4,8009b768 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8009b760:	00bffa84 	movi	r2,-22
8009b764:	00004a06 	br	8009b890 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
8009b768:	e13ffe17 	ldw	r4,-8(fp)
8009b76c:	21000017 	ldw	r4,0(r4)
8009b770:	2000051e 	bne	r4,zero,8009b788 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8009b774:	e0bffe17 	ldw	r2,-8(fp)
8009b778:	e0ffff17 	ldw	r3,-4(fp)
8009b77c:	10c00015 	stw	r3,0(r2)
		return 0;
8009b780:	0005883a 	mov	r2,zero
8009b784:	00004206 	br	8009b890 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
8009b788:	e13ffe17 	ldw	r4,-8(fp)
8009b78c:	21400017 	ldw	r5,0(r4)
8009b790:	e13fff17 	ldw	r4,-4(fp)
8009b794:	2900021e 	bne	r5,r4,8009b7a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8009b798:	00bffa84 	movi	r2,-22
8009b79c:	00003c06 	br	8009b890 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8009b7a0:	e13ffe17 	ldw	r4,-8(fp)
8009b7a4:	21000017 	ldw	r4,0(r4)
8009b7a8:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8009b7ac:	e13ffe17 	ldw	r4,-8(fp)
8009b7b0:	21000017 	ldw	r4,0(r4)
8009b7b4:	2011883a 	mov	r8,r4
8009b7b8:	0013883a 	mov	r9,zero
8009b7bc:	e23ffa15 	stw	r8,-24(fp)
8009b7c0:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8009b7c4:	00001806 	br	8009b828 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8009b7c8:	e13fff17 	ldw	r4,-4(fp)
8009b7cc:	200d883a 	mov	r6,r4
8009b7d0:	000f883a 	mov	r7,zero
8009b7d4:	e1bffc15 	stw	r6,-16(fp)
8009b7d8:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8009b7dc:	e13ff917 	ldw	r4,-28(fp)
8009b7e0:	21400317 	ldw	r5,12(r4)
8009b7e4:	e13ffc17 	ldw	r4,-16(fp)
8009b7e8:	2900061e 	bne	r5,r4,8009b804 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8009b7ec:	e13ff917 	ldw	r4,-28(fp)
8009b7f0:	21400b17 	ldw	r5,44(r4)
8009b7f4:	e13ffd17 	ldw	r4,-12(fp)
8009b7f8:	2900021e 	bne	r5,r4,8009b804 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8009b7fc:	00bffa84 	movi	r2,-22
8009b800:	00002306 	br	8009b890 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8009b804:	e13ff917 	ldw	r4,-28(fp)
8009b808:	21000317 	ldw	r4,12(r4)
8009b80c:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8009b810:	e13ff917 	ldw	r4,-28(fp)
8009b814:	21000b17 	ldw	r4,44(r4)
8009b818:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8009b81c:	e13ffc17 	ldw	r4,-16(fp)
8009b820:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8009b824:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8009b828:	e13ff917 	ldw	r4,-28(fp)
8009b82c:	21400317 	ldw	r5,12(r4)
8009b830:	e13ffa17 	ldw	r4,-24(fp)
8009b834:	29000426 	beq	r5,r4,8009b848 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8009b838:	e13ff917 	ldw	r4,-28(fp)
8009b83c:	21400b17 	ldw	r5,44(r4)
8009b840:	e13ffb17 	ldw	r4,-20(fp)
8009b844:	293fe01e 	bne	r5,r4,8009b7c8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
8009b848:	e13fff17 	ldw	r4,-4(fp)
8009b84c:	2005883a 	mov	r2,r4
8009b850:	0007883a 	mov	r3,zero
8009b854:	e0bffc15 	stw	r2,-16(fp)
8009b858:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8009b85c:	e0fffc17 	ldw	r3,-16(fp)
8009b860:	e0bff917 	ldw	r2,-28(fp)
8009b864:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8009b868:	e0fffd17 	ldw	r3,-12(fp)
8009b86c:	e0bff917 	ldw	r2,-28(fp)
8009b870:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8009b874:	e0fffa17 	ldw	r3,-24(fp)
8009b878:	e0bfff17 	ldw	r2,-4(fp)
8009b87c:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8009b880:	e0fffb17 	ldw	r3,-20(fp)
8009b884:	e0bfff17 	ldw	r2,-4(fp)
8009b888:	10c00b15 	stw	r3,44(r2)
	return 0;
8009b88c:	0005883a 	mov	r2,zero
}
8009b890:	e037883a 	mov	sp,fp
8009b894:	df000017 	ldw	fp,0(sp)
8009b898:	dec00104 	addi	sp,sp,4
8009b89c:	f800283a 	ret

8009b8a0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8009b8a0:	defffc04 	addi	sp,sp,-16
8009b8a4:	df000315 	stw	fp,12(sp)
8009b8a8:	df000304 	addi	fp,sp,12
8009b8ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8009b8b0:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8009b8b4:	e0bfff17 	ldw	r2,-4(fp)
8009b8b8:	1000021e 	bne	r2,zero,8009b8c4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8009b8bc:	00bffa84 	movi	r2,-22
8009b8c0:	00001906 	br	8009b928 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8009b8c4:	e0bfff17 	ldw	r2,-4(fp)
8009b8c8:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8009b8cc:	00000a06 	br	8009b8f8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8009b8d0:	e0bffd17 	ldw	r2,-12(fp)
8009b8d4:	10800717 	ldw	r2,28(r2)
8009b8d8:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8009b8dc:	e0bffe17 	ldw	r2,-8(fp)
8009b8e0:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8009b8e4:	e0bffd17 	ldw	r2,-12(fp)
8009b8e8:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8009b8ec:	e0bffd17 	ldw	r2,-12(fp)
8009b8f0:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8009b8f4:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8009b8f8:	e0bffd17 	ldw	r2,-12(fp)
8009b8fc:	10c00317 	ldw	r3,12(r2)
8009b900:	e0bfff17 	ldw	r2,-4(fp)
8009b904:	18bff21e 	bne	r3,r2,8009b8d0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x30>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8009b908:	e0bffd17 	ldw	r2,-12(fp)
8009b90c:	10800717 	ldw	r2,28(r2)
8009b910:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8009b914:	e0bffe17 	ldw	r2,-8(fp)
8009b918:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8009b91c:	e0bffd17 	ldw	r2,-12(fp)
8009b920:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8009b924:	0005883a 	mov	r2,zero
}
8009b928:	e037883a 	mov	sp,fp
8009b92c:	df000017 	ldw	fp,0(sp)
8009b930:	dec00104 	addi	sp,sp,4
8009b934:	f800283a 	ret

8009b938 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8009b938:	defff804 	addi	sp,sp,-32
8009b93c:	df000715 	stw	fp,28(sp)
8009b940:	df000704 	addi	fp,sp,28
8009b944:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8009b948:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8009b94c:	e13fff17 	ldw	r4,-4(fp)
8009b950:	2000021e 	bne	r4,zero,8009b95c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8009b954:	00bffa84 	movi	r2,-22
8009b958:	00002806 	br	8009b9fc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8009b95c:	e13fff17 	ldw	r4,-4(fp)
8009b960:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8009b964:	e13fff17 	ldw	r4,-4(fp)
8009b968:	2005883a 	mov	r2,r4
8009b96c:	0007883a 	mov	r3,zero
8009b970:	e0bffb15 	stw	r2,-20(fp)
8009b974:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8009b978:	00001006 	br	8009b9bc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8009b97c:	e0bff917 	ldw	r2,-28(fp)
8009b980:	10800f17 	ldw	r2,60(r2)
8009b984:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8009b988:	e0bffa17 	ldw	r2,-24(fp)
8009b98c:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8009b990:	e0bff917 	ldw	r2,-28(fp)
8009b994:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8009b998:	e0bff917 	ldw	r2,-28(fp)
8009b99c:	10800317 	ldw	r2,12(r2)
8009b9a0:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8009b9a4:	e0bff917 	ldw	r2,-28(fp)
8009b9a8:	10800b17 	ldw	r2,44(r2)
8009b9ac:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8009b9b0:	e0bffd17 	ldw	r2,-12(fp)
8009b9b4:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8009b9b8:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8009b9bc:	e0bff917 	ldw	r2,-28(fp)
8009b9c0:	10c00317 	ldw	r3,12(r2)
8009b9c4:	e0bffb17 	ldw	r2,-20(fp)
8009b9c8:	18800426 	beq	r3,r2,8009b9dc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8009b9cc:	e0bff917 	ldw	r2,-28(fp)
8009b9d0:	10c00b17 	ldw	r3,44(r2)
8009b9d4:	e0bffc17 	ldw	r2,-16(fp)
8009b9d8:	18bfe81e 	bne	r3,r2,8009b97c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x44>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8009b9dc:	e0bff917 	ldw	r2,-28(fp)
8009b9e0:	10800f17 	ldw	r2,60(r2)
8009b9e4:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8009b9e8:	e0bffa17 	ldw	r2,-24(fp)
8009b9ec:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8009b9f0:	e0bff917 	ldw	r2,-28(fp)
8009b9f4:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8009b9f8:	0005883a 	mov	r2,zero
}
8009b9fc:	e037883a 	mov	sp,fp
8009ba00:	df000017 	ldw	fp,0(sp)
8009ba04:	dec00104 	addi	sp,sp,4
8009ba08:	f800283a 	ret

8009ba0c <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8009ba0c:	deffef04 	addi	sp,sp,-68
8009ba10:	df001015 	stw	fp,64(sp)
8009ba14:	df001004 	addi	fp,sp,64
8009ba18:	e13ffb15 	stw	r4,-20(fp)
8009ba1c:	e17ffc15 	stw	r5,-16(fp)
8009ba20:	e1bffd15 	stw	r6,-12(fp)
8009ba24:	3807883a 	mov	r3,r7
8009ba28:	e0800117 	ldw	r2,4(fp)
8009ba2c:	e0fffe05 	stb	r3,-8(fp)
8009ba30:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8009ba34:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
8009ba38:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
8009ba3c:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8009ba40:	e0bffc17 	ldw	r2,-16(fp)
8009ba44:	e0bff915 	stw	r2,-28(fp)
8009ba48:	e0bffd17 	ldw	r2,-12(fp)
8009ba4c:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8009ba50:	e0bffb17 	ldw	r2,-20(fp)
8009ba54:	10800617 	ldw	r2,24(r2)
8009ba58:	10800037 	ldwio	r2,0(r2)
8009ba5c:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8009ba60:	e0bff017 	ldw	r2,-64(fp)
8009ba64:	1080004c 	andi	r2,r2,1
8009ba68:	10000226 	beq	r2,zero,8009ba74 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
8009ba6c:	00bffc04 	movi	r2,-16
8009ba70:	00009206 	br	8009bcbc <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8009ba74:	00800804 	movi	r2,32
8009ba78:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009ba7c:	0005303a 	rdctl	r2,status
8009ba80:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009ba84:	e0fff517 	ldw	r3,-44(fp)
8009ba88:	00bfff84 	movi	r2,-2
8009ba8c:	1884703a 	and	r2,r3,r2
8009ba90:	1001703a 	wrctl	status,r2
  
  return context;
8009ba94:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8009ba98:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8009ba9c:	e0bffb17 	ldw	r2,-20(fp)
8009baa0:	10800317 	ldw	r2,12(r2)
8009baa4:	10800104 	addi	r2,r2,4
8009baa8:	e0fff117 	ldw	r3,-60(fp)
8009baac:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8009bab0:	e0bffb17 	ldw	r2,-20(fp)
8009bab4:	10800317 	ldw	r2,12(r2)
8009bab8:	e0fffb17 	ldw	r3,-20(fp)
8009babc:	18c00317 	ldw	r3,12(r3)
8009bac0:	18c00037 	ldwio	r3,0(r3)
8009bac4:	10c00035 	stwio	r3,0(r2)
8009bac8:	e0bff217 	ldw	r2,-56(fp)
8009bacc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009bad0:	e0bff317 	ldw	r2,-52(fp)
8009bad4:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8009bad8:	e0bffb17 	ldw	r2,-20(fp)
8009badc:	10800b17 	ldw	r2,44(r2)
8009bae0:	10002326 	beq	r2,zero,8009bb70 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8009bae4:	e0bffb17 	ldw	r2,-20(fp)
8009bae8:	10c00d17 	ldw	r3,52(r2)
8009baec:	e0bff117 	ldw	r2,-60(fp)
8009baf0:	1884b03a 	or	r2,r3,r2
8009baf4:	10800514 	ori	r2,r2,20
8009baf8:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009bafc:	e0fff117 	ldw	r3,-60(fp)
8009bb00:	00bff7c4 	movi	r2,-33
8009bb04:	1884703a 	and	r2,r3,r2
8009bb08:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8009bb0c:	e0bff017 	ldw	r2,-64(fp)
8009bb10:	10800214 	ori	r2,r2,8
8009bb14:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009bb18:	0005303a 	rdctl	r2,status
8009bb1c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009bb20:	e0fff717 	ldw	r3,-36(fp)
8009bb24:	00bfff84 	movi	r2,-2
8009bb28:	1884703a 	and	r2,r3,r2
8009bb2c:	1001703a 	wrctl	status,r2
  
  return context;
8009bb30:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
8009bb34:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8009bb38:	e0bffb17 	ldw	r2,-20(fp)
8009bb3c:	10800317 	ldw	r2,12(r2)
8009bb40:	10800104 	addi	r2,r2,4
8009bb44:	e0fff117 	ldw	r3,-60(fp)
8009bb48:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8009bb4c:	e0bffb17 	ldw	r2,-20(fp)
8009bb50:	10800617 	ldw	r2,24(r2)
8009bb54:	e0fff017 	ldw	r3,-64(fp)
8009bb58:	10c00035 	stwio	r3,0(r2)
8009bb5c:	e0bff217 	ldw	r2,-56(fp)
8009bb60:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009bb64:	e0bff417 	ldw	r2,-48(fp)
8009bb68:	1001703a 	wrctl	status,r2
8009bb6c:	00002306 	br	8009bbfc <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8009bb70:	e0bffb17 	ldw	r2,-20(fp)
8009bb74:	10c00d17 	ldw	r3,52(r2)
8009bb78:	e0bff117 	ldw	r2,-60(fp)
8009bb7c:	1884b03a 	or	r2,r3,r2
8009bb80:	10800114 	ori	r2,r2,4
8009bb84:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8009bb88:	e0fff117 	ldw	r3,-60(fp)
8009bb8c:	00bff3c4 	movi	r2,-49
8009bb90:	1884703a 	and	r2,r3,r2
8009bb94:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8009bb98:	e0fff017 	ldw	r3,-64(fp)
8009bb9c:	00bffdc4 	movi	r2,-9
8009bba0:	1884703a 	and	r2,r3,r2
8009bba4:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009bba8:	0005303a 	rdctl	r2,status
8009bbac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009bbb0:	e0fff817 	ldw	r3,-32(fp)
8009bbb4:	00bfff84 	movi	r2,-2
8009bbb8:	1884703a 	and	r2,r3,r2
8009bbbc:	1001703a 	wrctl	status,r2
  
  return context;
8009bbc0:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8009bbc4:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8009bbc8:	e0bffb17 	ldw	r2,-20(fp)
8009bbcc:	10800317 	ldw	r2,12(r2)
8009bbd0:	10800104 	addi	r2,r2,4
8009bbd4:	e0fff117 	ldw	r3,-60(fp)
8009bbd8:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8009bbdc:	e0bffb17 	ldw	r2,-20(fp)
8009bbe0:	10800617 	ldw	r2,24(r2)
8009bbe4:	e0fff017 	ldw	r3,-64(fp)
8009bbe8:	10c00035 	stwio	r3,0(r2)
8009bbec:	e0bff217 	ldw	r2,-56(fp)
8009bbf0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009bbf4:	e0bff617 	ldw	r2,-40(fp)
8009bbf8:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8009bbfc:	e0bffb17 	ldw	r2,-20(fp)
8009bc00:	10800617 	ldw	r2,24(r2)
8009bc04:	10800104 	addi	r2,r2,4
8009bc08:	e0fff917 	ldw	r3,-28(fp)
8009bc0c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8009bc10:	e0bffb17 	ldw	r2,-20(fp)
8009bc14:	10800617 	ldw	r2,24(r2)
8009bc18:	10800204 	addi	r2,r2,8
8009bc1c:	e0fffa17 	ldw	r3,-24(fp)
8009bc20:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8009bc24:	e0bffe03 	ldbu	r2,-8(fp)
8009bc28:	10000426 	beq	r2,zero,8009bc3c <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8009bc2c:	e0bff017 	ldw	r2,-64(fp)
8009bc30:	10800414 	ori	r2,r2,16
8009bc34:	e0bff015 	stw	r2,-64(fp)
8009bc38:	00000406 	br	8009bc4c <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8009bc3c:	e0fff017 	ldw	r3,-64(fp)
8009bc40:	00bffbc4 	movi	r2,-17
8009bc44:	1884703a 	and	r2,r3,r2
8009bc48:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8009bc4c:	e0bfff03 	ldbu	r2,-4(fp)
8009bc50:	10000e26 	beq	r2,zero,8009bc8c <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8009bc54:	e0bff017 	ldw	r2,-64(fp)
8009bc58:	10800094 	ori	r2,r2,2
8009bc5c:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009bc60:	e0bffb17 	ldw	r2,-20(fp)
8009bc64:	10800617 	ldw	r2,24(r2)
8009bc68:	10800304 	addi	r2,r2,12
8009bc6c:	10800037 	ldwio	r2,0(r2)
8009bc70:	10000a1e 	bne	r2,zero,8009bc9c <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009bc74:	e0bffb17 	ldw	r2,-20(fp)
8009bc78:	10800617 	ldw	r2,24(r2)
8009bc7c:	10800304 	addi	r2,r2,12
8009bc80:	00c03fc4 	movi	r3,255
8009bc84:	10c00035 	stwio	r3,0(r2)
8009bc88:	00000406 	br	8009bc9c <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8009bc8c:	e0fff017 	ldw	r3,-64(fp)
8009bc90:	00bfff44 	movi	r2,-3
8009bc94:	1884703a 	and	r2,r3,r2
8009bc98:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8009bc9c:	e0bff017 	ldw	r2,-64(fp)
8009bca0:	10800054 	ori	r2,r2,1
8009bca4:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8009bca8:	e0bffb17 	ldw	r2,-20(fp)
8009bcac:	10800617 	ldw	r2,24(r2)
8009bcb0:	e0fff017 	ldw	r3,-64(fp)
8009bcb4:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
8009bcb8:	0005883a 	mov	r2,zero
}
8009bcbc:	e037883a 	mov	sp,fp
8009bcc0:	df000017 	ldw	fp,0(sp)
8009bcc4:	dec00104 	addi	sp,sp,4
8009bcc8:	f800283a 	ret

8009bccc <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8009bccc:	defff704 	addi	sp,sp,-36
8009bcd0:	dfc00815 	stw	ra,32(sp)
8009bcd4:	df000715 	stw	fp,28(sp)
8009bcd8:	dc400615 	stw	r17,24(sp)
8009bcdc:	dc000515 	stw	r16,20(sp)
8009bce0:	df000704 	addi	fp,sp,28
8009bce4:	e13ffa15 	stw	r4,-24(fp)
8009bce8:	e17ffb15 	stw	r5,-20(fp)
8009bcec:	3007883a 	mov	r3,r6
8009bcf0:	3805883a 	mov	r2,r7
8009bcf4:	e0fffc05 	stb	r3,-16(fp)
8009bcf8:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8009bcfc:	e13ffb17 	ldw	r4,-20(fp)
8009bd00:	009b8a00 	call	8009b8a0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8009bd04:	10000226 	beq	r2,zero,8009bd10 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
8009bd08:	00bffa84 	movi	r2,-22
8009bd0c:	00000b06 	br	8009bd3c <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8009bd10:	e0bffb17 	ldw	r2,-20(fp)
8009bd14:	1021883a 	mov	r16,r2
8009bd18:	0023883a 	mov	r17,zero
8009bd1c:	e0fffc03 	ldbu	r3,-16(fp)
8009bd20:	e0bffd03 	ldbu	r2,-12(fp)
8009bd24:	d8800015 	stw	r2,0(sp)
8009bd28:	180f883a 	mov	r7,r3
8009bd2c:	800b883a 	mov	r5,r16
8009bd30:	880d883a 	mov	r6,r17
8009bd34:	e13ffa17 	ldw	r4,-24(fp)
8009bd38:	009ba0c0 	call	8009ba0c <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8009bd3c:	e6fffe04 	addi	sp,fp,-8
8009bd40:	dfc00317 	ldw	ra,12(sp)
8009bd44:	df000217 	ldw	fp,8(sp)
8009bd48:	dc400117 	ldw	r17,4(sp)
8009bd4c:	dc000017 	ldw	r16,0(sp)
8009bd50:	dec00404 	addi	sp,sp,16
8009bd54:	f800283a 	ret

8009bd58 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8009bd58:	defff704 	addi	sp,sp,-36
8009bd5c:	dfc00815 	stw	ra,32(sp)
8009bd60:	df000715 	stw	fp,28(sp)
8009bd64:	dc400615 	stw	r17,24(sp)
8009bd68:	dc000515 	stw	r16,20(sp)
8009bd6c:	df000704 	addi	fp,sp,28
8009bd70:	e13ffa15 	stw	r4,-24(fp)
8009bd74:	e17ffb15 	stw	r5,-20(fp)
8009bd78:	3007883a 	mov	r3,r6
8009bd7c:	3805883a 	mov	r2,r7
8009bd80:	e0fffc05 	stb	r3,-16(fp)
8009bd84:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8009bd88:	e13ffb17 	ldw	r4,-20(fp)
8009bd8c:	009b9380 	call	8009b938 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8009bd90:	10000226 	beq	r2,zero,8009bd9c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
8009bd94:	00bffa84 	movi	r2,-22
8009bd98:	00000b06 	br	8009bdc8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8009bd9c:	e0bffb17 	ldw	r2,-20(fp)
8009bda0:	1021883a 	mov	r16,r2
8009bda4:	0023883a 	mov	r17,zero
8009bda8:	e0fffc03 	ldbu	r3,-16(fp)
8009bdac:	e0bffd03 	ldbu	r2,-12(fp)
8009bdb0:	d8800015 	stw	r2,0(sp)
8009bdb4:	180f883a 	mov	r7,r3
8009bdb8:	800b883a 	mov	r5,r16
8009bdbc:	880d883a 	mov	r6,r17
8009bdc0:	e13ffa17 	ldw	r4,-24(fp)
8009bdc4:	009ba0c0 	call	8009ba0c <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8009bdc8:	e6fffe04 	addi	sp,fp,-8
8009bdcc:	dfc00317 	ldw	ra,12(sp)
8009bdd0:	df000217 	ldw	fp,8(sp)
8009bdd4:	dc400117 	ldw	r17,4(sp)
8009bdd8:	dc000017 	ldw	r16,0(sp)
8009bddc:	dec00404 	addi	sp,sp,16
8009bde0:	f800283a 	ret

8009bde4 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8009bde4:	defffc04 	addi	sp,sp,-16
8009bde8:	dfc00315 	stw	ra,12(sp)
8009bdec:	df000215 	stw	fp,8(sp)
8009bdf0:	df000204 	addi	fp,sp,8
8009bdf4:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8009bdf8:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8009bdfc:	d1601104 	addi	r5,gp,-32700
8009be00:	e13fff17 	ldw	r4,-4(fp)
8009be04:	009c5580 	call	8009c558 <alt_find_dev>
8009be08:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8009be0c:	e0bffe17 	ldw	r2,-8(fp)
8009be10:	1000041e 	bne	r2,zero,8009be24 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
8009be14:	009a2700 	call	8009a270 <alt_get_errno>
8009be18:	1007883a 	mov	r3,r2
8009be1c:	008004c4 	movi	r2,19
8009be20:	18800015 	stw	r2,0(r3)
    }

    return dev;
8009be24:	e0bffe17 	ldw	r2,-8(fp)
}
8009be28:	e037883a 	mov	sp,fp
8009be2c:	dfc00117 	ldw	ra,4(sp)
8009be30:	df000017 	ldw	fp,0(sp)
8009be34:	dec00204 	addi	sp,sp,8
8009be38:	f800283a 	ret

8009be3c <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8009be3c:	defff804 	addi	sp,sp,-32
8009be40:	dfc00715 	stw	ra,28(sp)
8009be44:	df000615 	stw	fp,24(sp)
8009be48:	df000604 	addi	fp,sp,24
8009be4c:	e13ffd15 	stw	r4,-12(fp)
8009be50:	e17ffe15 	stw	r5,-8(fp)
8009be54:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8009be58:	e0bffd17 	ldw	r2,-12(fp)
8009be5c:	10801783 	ldbu	r2,94(r2)
8009be60:	10803fcc 	andi	r2,r2,255
8009be64:	10000b26 	beq	r2,zero,8009be94 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8009be68:	e0bffd17 	ldw	r2,-12(fp)
8009be6c:	10800617 	ldw	r2,24(r2)
8009be70:	00c00104 	movi	r3,4
8009be74:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8009be78:	0001883a 	nop
8009be7c:	e0bffd17 	ldw	r2,-12(fp)
8009be80:	10800617 	ldw	r2,24(r2)
8009be84:	10800037 	ldwio	r2,0(r2)
8009be88:	1080010c 	andi	r2,r2,4
8009be8c:	1005d0ba 	srai	r2,r2,2
8009be90:	103ffa1e 	bne	r2,zero,8009be7c <alt_msgdma_init+0x40>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8009be94:	e0bffd17 	ldw	r2,-12(fp)
8009be98:	10800317 	ldw	r2,12(r2)
8009be9c:	10800104 	addi	r2,r2,4
8009bea0:	00c00084 	movi	r3,2
8009bea4:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8009bea8:	0001883a 	nop
8009beac:	e0bffd17 	ldw	r2,-12(fp)
8009beb0:	10800317 	ldw	r2,12(r2)
8009beb4:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8009beb8:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8009bebc:	103ffb1e 	bne	r2,zero,8009beac <alt_msgdma_init+0x70>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8009bec0:	e0bffd17 	ldw	r2,-12(fp)
8009bec4:	10800317 	ldw	r2,12(r2)
8009bec8:	10800104 	addi	r2,r2,4
8009becc:	10800037 	ldwio	r2,0(r2)
8009bed0:	1007883a 	mov	r3,r2
8009bed4:	00bffbc4 	movi	r2,-17
8009bed8:	1884703a 	and	r2,r3,r2
8009bedc:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8009bee0:	e0bffb17 	ldw	r2,-20(fp)
8009bee4:	10800814 	ori	r2,r2,32
8009bee8:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8009beec:	e0bffd17 	ldw	r2,-12(fp)
8009bef0:	10800317 	ldw	r2,12(r2)
8009bef4:	10800104 	addi	r2,r2,4
8009bef8:	e0fffb17 	ldw	r3,-20(fp)
8009befc:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8009bf00:	e0bffd17 	ldw	r2,-12(fp)
8009bf04:	10800317 	ldw	r2,12(r2)
8009bf08:	e0fffd17 	ldw	r3,-12(fp)
8009bf0c:	18c00317 	ldw	r3,12(r3)
8009bf10:	18c00037 	ldwio	r3,0(r3)
8009bf14:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8009bf18:	e0bffd17 	ldw	r2,-12(fp)
8009bf1c:	10801783 	ldbu	r2,94(r2)
8009bf20:	10803fcc 	andi	r2,r2,255
8009bf24:	10000826 	beq	r2,zero,8009bf48 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8009bf28:	e0bffd17 	ldw	r2,-12(fp)
8009bf2c:	10800617 	ldw	r2,24(r2)
8009bf30:	10800404 	addi	r2,r2,16
8009bf34:	e0fffd17 	ldw	r3,-12(fp)
8009bf38:	18c00617 	ldw	r3,24(r3)
8009bf3c:	18c00404 	addi	r3,r3,16
8009bf40:	18c00037 	ldwio	r3,0(r3)
8009bf44:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8009bf48:	d1601104 	addi	r5,gp,-32700
8009bf4c:	e13ffd17 	ldw	r4,-12(fp)
8009bf50:	009c3f40 	call	8009c3f4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
8009bf54:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8009bf58:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
8009bf5c:	e0bffc17 	ldw	r2,-16(fp)
8009bf60:	1000081e 	bne	r2,zero,8009bf84 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8009bf64:	d8000015 	stw	zero,0(sp)
8009bf68:	e1fffd17 	ldw	r7,-12(fp)
8009bf6c:	01a002b4 	movhi	r6,32778
8009bf70:	31a91b04 	addi	r6,r6,-23444
8009bf74:	e17fff17 	ldw	r5,-4(fp)
8009bf78:	e13ffe17 	ldw	r4,-8(fp)
8009bf7c:	009c61c0 	call	8009c61c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8009bf80:	00000406 	br	8009bf94 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8009bf84:	012002b4 	movhi	r4,32778
8009bf88:	213ac304 	addi	r4,r4,-5364
8009bf8c:	009cc500 	call	8009cc50 <alt_printf>
    }
    
    return;
8009bf90:	0001883a 	nop

}
8009bf94:	e037883a 	mov	sp,fp
8009bf98:	dfc00117 	ldw	ra,4(sp)
8009bf9c:	df000017 	ldw	fp,0(sp)
8009bfa0:	dec00204 	addi	sp,sp,8
8009bfa4:	f800283a 	ret

8009bfa8 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8009bfa8:	defffb04 	addi	sp,sp,-20
8009bfac:	df000415 	stw	fp,16(sp)
8009bfb0:	df000404 	addi	fp,sp,16
8009bfb4:	e13ffc15 	stw	r4,-16(fp)
8009bfb8:	e17ffd15 	stw	r5,-12(fp)
8009bfbc:	e1bffe15 	stw	r6,-8(fp)
8009bfc0:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8009bfc4:	e0bffc17 	ldw	r2,-16(fp)
8009bfc8:	e0fffd17 	ldw	r3,-12(fp)
8009bfcc:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8009bfd0:	e0bffc17 	ldw	r2,-16(fp)
8009bfd4:	e0ffff17 	ldw	r3,-4(fp)
8009bfd8:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8009bfdc:	e0bffc17 	ldw	r2,-16(fp)
8009bfe0:	e0fffe17 	ldw	r3,-8(fp)
8009bfe4:	10c00d15 	stw	r3,52(r2)

    return ;
8009bfe8:	0001883a 	nop
}
8009bfec:	e037883a 	mov	sp,fp
8009bff0:	df000017 	ldw	fp,0(sp)
8009bff4:	dec00104 	addi	sp,sp,4
8009bff8:	f800283a 	ret

8009bffc <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8009bffc:	defffc04 	addi	sp,sp,-16
8009c000:	dfc00315 	stw	ra,12(sp)
8009c004:	df000215 	stw	fp,8(sp)
8009c008:	df000204 	addi	fp,sp,8
8009c00c:	e13ffe15 	stw	r4,-8(fp)
8009c010:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8009c014:	000d883a 	mov	r6,zero
8009c018:	e17fff17 	ldw	r5,-4(fp)
8009c01c:	e13ffe17 	ldw	r4,-8(fp)
8009c020:	009a7d00 	call	8009a7d0 <alt_msgdma_descriptor_async_transfer>

}
8009c024:	e037883a 	mov	sp,fp
8009c028:	dfc00117 	ldw	ra,4(sp)
8009c02c:	df000017 	ldw	fp,0(sp)
8009c030:	dec00204 	addi	sp,sp,8
8009c034:	f800283a 	ret

8009c038 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8009c038:	defffc04 	addi	sp,sp,-16
8009c03c:	dfc00315 	stw	ra,12(sp)
8009c040:	df000215 	stw	fp,8(sp)
8009c044:	df000204 	addi	fp,sp,8
8009c048:	e13ffe15 	stw	r4,-8(fp)
8009c04c:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8009c050:	e1bfff17 	ldw	r6,-4(fp)
8009c054:	000b883a 	mov	r5,zero
8009c058:	e13ffe17 	ldw	r4,-8(fp)
8009c05c:	009a7d00 	call	8009a7d0 <alt_msgdma_descriptor_async_transfer>
}
8009c060:	e037883a 	mov	sp,fp
8009c064:	dfc00117 	ldw	ra,4(sp)
8009c068:	df000017 	ldw	fp,0(sp)
8009c06c:	dec00204 	addi	sp,sp,8
8009c070:	f800283a 	ret

8009c074 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8009c074:	defffc04 	addi	sp,sp,-16
8009c078:	dfc00315 	stw	ra,12(sp)
8009c07c:	df000215 	stw	fp,8(sp)
8009c080:	df000204 	addi	fp,sp,8
8009c084:	e13ffe15 	stw	r4,-8(fp)
8009c088:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8009c08c:	000d883a 	mov	r6,zero
8009c090:	e17fff17 	ldw	r5,-4(fp)
8009c094:	e13ffe17 	ldw	r4,-8(fp)
8009c098:	009aaa00 	call	8009aaa0 <alt_msgdma_descriptor_sync_transfer>
}
8009c09c:	e037883a 	mov	sp,fp
8009c0a0:	dfc00117 	ldw	ra,4(sp)
8009c0a4:	df000017 	ldw	fp,0(sp)
8009c0a8:	dec00204 	addi	sp,sp,8
8009c0ac:	f800283a 	ret

8009c0b0 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8009c0b0:	defffc04 	addi	sp,sp,-16
8009c0b4:	dfc00315 	stw	ra,12(sp)
8009c0b8:	df000215 	stw	fp,8(sp)
8009c0bc:	df000204 	addi	fp,sp,8
8009c0c0:	e13ffe15 	stw	r4,-8(fp)
8009c0c4:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8009c0c8:	e1bfff17 	ldw	r6,-4(fp)
8009c0cc:	000b883a 	mov	r5,zero
8009c0d0:	e13ffe17 	ldw	r4,-8(fp)
8009c0d4:	009aaa00 	call	8009aaa0 <alt_msgdma_descriptor_sync_transfer>
}
8009c0d8:	e037883a 	mov	sp,fp
8009c0dc:	dfc00117 	ldw	ra,4(sp)
8009c0e0:	df000017 	ldw	fp,0(sp)
8009c0e4:	dec00204 	addi	sp,sp,8
8009c0e8:	f800283a 	ret

8009c0ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8009c0ec:	defff504 	addi	sp,sp,-44
8009c0f0:	df000a15 	stw	fp,40(sp)
8009c0f4:	df000a04 	addi	fp,sp,40
8009c0f8:	e13ffc15 	stw	r4,-16(fp)
8009c0fc:	e17ffd15 	stw	r5,-12(fp)
8009c100:	e1bffe15 	stw	r6,-8(fp)
8009c104:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8009c108:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8009c10c:	d0a72c17 	ldw	r2,-25424(gp)
  
  if (alt_ticks_per_second ())
8009c110:	10003c26 	beq	r2,zero,8009c204 <alt_alarm_start+0x118>
  {
    if (alarm)
8009c114:	e0bffc17 	ldw	r2,-16(fp)
8009c118:	10003826 	beq	r2,zero,8009c1fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
8009c11c:	e0bffc17 	ldw	r2,-16(fp)
8009c120:	e0fffe17 	ldw	r3,-8(fp)
8009c124:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8009c128:	e0bffc17 	ldw	r2,-16(fp)
8009c12c:	e0ffff17 	ldw	r3,-4(fp)
8009c130:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009c134:	0005303a 	rdctl	r2,status
8009c138:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009c13c:	e0fff917 	ldw	r3,-28(fp)
8009c140:	00bfff84 	movi	r2,-2
8009c144:	1884703a 	and	r2,r3,r2
8009c148:	1001703a 	wrctl	status,r2
  
  return context;
8009c14c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8009c150:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8009c154:	d0a72d17 	ldw	r2,-25420(gp)
      
      current_nticks = alt_nticks();
8009c158:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8009c15c:	e0fffd17 	ldw	r3,-12(fp)
8009c160:	e0bff617 	ldw	r2,-40(fp)
8009c164:	1885883a 	add	r2,r3,r2
8009c168:	10c00044 	addi	r3,r2,1
8009c16c:	e0bffc17 	ldw	r2,-16(fp)
8009c170:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8009c174:	e0bffc17 	ldw	r2,-16(fp)
8009c178:	10c00217 	ldw	r3,8(r2)
8009c17c:	e0bff617 	ldw	r2,-40(fp)
8009c180:	1880042e 	bgeu	r3,r2,8009c194 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8009c184:	e0bffc17 	ldw	r2,-16(fp)
8009c188:	00c00044 	movi	r3,1
8009c18c:	10c00405 	stb	r3,16(r2)
8009c190:	00000206 	br	8009c19c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8009c194:	e0bffc17 	ldw	r2,-16(fp)
8009c198:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8009c19c:	e0bffc17 	ldw	r2,-16(fp)
8009c1a0:	d0e01404 	addi	r3,gp,-32688
8009c1a4:	e0fffa15 	stw	r3,-24(fp)
8009c1a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8009c1ac:	e0bffb17 	ldw	r2,-20(fp)
8009c1b0:	e0fffa17 	ldw	r3,-24(fp)
8009c1b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8009c1b8:	e0bffa17 	ldw	r2,-24(fp)
8009c1bc:	10c00017 	ldw	r3,0(r2)
8009c1c0:	e0bffb17 	ldw	r2,-20(fp)
8009c1c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8009c1c8:	e0bffa17 	ldw	r2,-24(fp)
8009c1cc:	10800017 	ldw	r2,0(r2)
8009c1d0:	e0fffb17 	ldw	r3,-20(fp)
8009c1d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8009c1d8:	e0bffa17 	ldw	r2,-24(fp)
8009c1dc:	e0fffb17 	ldw	r3,-20(fp)
8009c1e0:	10c00015 	stw	r3,0(r2)
8009c1e4:	e0bff817 	ldw	r2,-32(fp)
8009c1e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009c1ec:	e0bff717 	ldw	r2,-36(fp)
8009c1f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8009c1f4:	0005883a 	mov	r2,zero
8009c1f8:	00000306 	br	8009c208 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
8009c1fc:	00bffa84 	movi	r2,-22
8009c200:	00000106 	br	8009c208 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
8009c204:	00bfde84 	movi	r2,-134
  }
}
8009c208:	e037883a 	mov	sp,fp
8009c20c:	df000017 	ldw	fp,0(sp)
8009c210:	dec00104 	addi	sp,sp,4
8009c214:	f800283a 	ret

8009c218 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
8009c218:	defffa04 	addi	sp,sp,-24
8009c21c:	dfc00515 	stw	ra,20(sp)
8009c220:	df000415 	stw	fp,16(sp)
8009c224:	df000404 	addi	fp,sp,16
8009c228:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
8009c22c:	008000c4 	movi	r2,3
8009c230:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
8009c234:	e0fffd17 	ldw	r3,-12(fp)
8009c238:	008003f4 	movhi	r2,15
8009c23c:	10909004 	addi	r2,r2,16960
8009c240:	1885383a 	mul	r2,r3,r2
8009c244:	100b883a 	mov	r5,r2
8009c248:	0102fb34 	movhi	r4,3052
8009c24c:	21308004 	addi	r4,r4,-15872
8009c250:	00823400 	call	80082340 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
8009c254:	100b883a 	mov	r5,r2
8009c258:	01200034 	movhi	r4,32768
8009c25c:	213fffc4 	addi	r4,r4,-1
8009c260:	00823400 	call	80082340 <__udivsi3>
8009c264:	100b883a 	mov	r5,r2
8009c268:	e13fff17 	ldw	r4,-4(fp)
8009c26c:	00823400 	call	80082340 <__udivsi3>
8009c270:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
8009c274:	e0bffe17 	ldw	r2,-8(fp)
8009c278:	10002a26 	beq	r2,zero,8009c324 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
8009c27c:	e03ffc15 	stw	zero,-16(fp)
8009c280:	00001706 	br	8009c2e0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8009c284:	00a00034 	movhi	r2,32768
8009c288:	10bfffc4 	addi	r2,r2,-1
8009c28c:	10bfffc4 	addi	r2,r2,-1
8009c290:	103ffe1e 	bne	r2,zero,8009c28c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
8009c294:	e0fffd17 	ldw	r3,-12(fp)
8009c298:	008003f4 	movhi	r2,15
8009c29c:	10909004 	addi	r2,r2,16960
8009c2a0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8009c2a4:	100b883a 	mov	r5,r2
8009c2a8:	0102fb34 	movhi	r4,3052
8009c2ac:	21308004 	addi	r4,r4,-15872
8009c2b0:	00823400 	call	80082340 <__udivsi3>
8009c2b4:	100b883a 	mov	r5,r2
8009c2b8:	01200034 	movhi	r4,32768
8009c2bc:	213fffc4 	addi	r4,r4,-1
8009c2c0:	00823400 	call	80082340 <__udivsi3>
8009c2c4:	1007883a 	mov	r3,r2
8009c2c8:	e0bfff17 	ldw	r2,-4(fp)
8009c2cc:	10c5c83a 	sub	r2,r2,r3
8009c2d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
8009c2d4:	e0bffc17 	ldw	r2,-16(fp)
8009c2d8:	10800044 	addi	r2,r2,1
8009c2dc:	e0bffc15 	stw	r2,-16(fp)
8009c2e0:	e0fffc17 	ldw	r3,-16(fp)
8009c2e4:	e0bffe17 	ldw	r2,-8(fp)
8009c2e8:	18bfe616 	blt	r3,r2,8009c284 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
8009c2ec:	e0fffd17 	ldw	r3,-12(fp)
8009c2f0:	008003f4 	movhi	r2,15
8009c2f4:	10909004 	addi	r2,r2,16960
8009c2f8:	1885383a 	mul	r2,r3,r2
8009c2fc:	100b883a 	mov	r5,r2
8009c300:	0102fb34 	movhi	r4,3052
8009c304:	21308004 	addi	r4,r4,-15872
8009c308:	00823400 	call	80082340 <__udivsi3>
8009c30c:	1007883a 	mov	r3,r2
8009c310:	e0bfff17 	ldw	r2,-4(fp)
8009c314:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8009c318:	10bfffc4 	addi	r2,r2,-1
8009c31c:	103ffe1e 	bne	r2,zero,8009c318 <alt_busy_sleep+0x100>
8009c320:	00000d06 	br	8009c358 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
8009c324:	e0fffd17 	ldw	r3,-12(fp)
8009c328:	008003f4 	movhi	r2,15
8009c32c:	10909004 	addi	r2,r2,16960
8009c330:	1885383a 	mul	r2,r3,r2
8009c334:	100b883a 	mov	r5,r2
8009c338:	0102fb34 	movhi	r4,3052
8009c33c:	21308004 	addi	r4,r4,-15872
8009c340:	00823400 	call	80082340 <__udivsi3>
8009c344:	1007883a 	mov	r3,r2
8009c348:	e0bfff17 	ldw	r2,-4(fp)
8009c34c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8009c350:	10bfffc4 	addi	r2,r2,-1
8009c354:	00bffe16 	blt	zero,r2,8009c350 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
8009c358:	0005883a 	mov	r2,zero
}
8009c35c:	e037883a 	mov	sp,fp
8009c360:	dfc00117 	ldw	ra,4(sp)
8009c364:	df000017 	ldw	fp,0(sp)
8009c368:	dec00204 	addi	sp,sp,8
8009c36c:	f800283a 	ret

8009c370 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
8009c370:	defffe04 	addi	sp,sp,-8
8009c374:	df000115 	stw	fp,4(sp)
8009c378:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
8009c37c:	e03fff15 	stw	zero,-4(fp)
8009c380:	00000506 	br	8009c398 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
8009c384:	e0bfff17 	ldw	r2,-4(fp)
8009c388:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
8009c38c:	e0bfff17 	ldw	r2,-4(fp)
8009c390:	10800804 	addi	r2,r2,32
8009c394:	e0bfff15 	stw	r2,-4(fp)
8009c398:	e0bfff17 	ldw	r2,-4(fp)
8009c39c:	10820030 	cmpltui	r2,r2,2048
8009c3a0:	103ff81e 	bne	r2,zero,8009c384 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8009c3a4:	0001883a 	nop
8009c3a8:	e037883a 	mov	sp,fp
8009c3ac:	df000017 	ldw	fp,0(sp)
8009c3b0:	dec00104 	addi	sp,sp,4
8009c3b4:	f800283a 	ret

8009c3b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8009c3b8:	defffe04 	addi	sp,sp,-8
8009c3bc:	dfc00115 	stw	ra,4(sp)
8009c3c0:	df000015 	stw	fp,0(sp)
8009c3c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8009c3c8:	d0a00d17 	ldw	r2,-32716(gp)
8009c3cc:	10000326 	beq	r2,zero,8009c3dc <alt_get_errno+0x24>
8009c3d0:	d0a00d17 	ldw	r2,-32716(gp)
8009c3d4:	103ee83a 	callr	r2
8009c3d8:	00000106 	br	8009c3e0 <alt_get_errno+0x28>
8009c3dc:	d0a72404 	addi	r2,gp,-25456
}
8009c3e0:	e037883a 	mov	sp,fp
8009c3e4:	dfc00117 	ldw	ra,4(sp)
8009c3e8:	df000017 	ldw	fp,0(sp)
8009c3ec:	dec00204 	addi	sp,sp,8
8009c3f0:	f800283a 	ret

8009c3f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8009c3f4:	defffa04 	addi	sp,sp,-24
8009c3f8:	dfc00515 	stw	ra,20(sp)
8009c3fc:	df000415 	stw	fp,16(sp)
8009c400:	df000404 	addi	fp,sp,16
8009c404:	e13ffe15 	stw	r4,-8(fp)
8009c408:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8009c40c:	e0bffe17 	ldw	r2,-8(fp)
8009c410:	10000326 	beq	r2,zero,8009c420 <alt_dev_llist_insert+0x2c>
8009c414:	e0bffe17 	ldw	r2,-8(fp)
8009c418:	10800217 	ldw	r2,8(r2)
8009c41c:	1000061e 	bne	r2,zero,8009c438 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
8009c420:	009c3b80 	call	8009c3b8 <alt_get_errno>
8009c424:	1007883a 	mov	r3,r2
8009c428:	00800584 	movi	r2,22
8009c42c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8009c430:	00bffa84 	movi	r2,-22
8009c434:	00001306 	br	8009c484 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8009c438:	e0bffe17 	ldw	r2,-8(fp)
8009c43c:	e0ffff17 	ldw	r3,-4(fp)
8009c440:	e0fffc15 	stw	r3,-16(fp)
8009c444:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8009c448:	e0bffd17 	ldw	r2,-12(fp)
8009c44c:	e0fffc17 	ldw	r3,-16(fp)
8009c450:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8009c454:	e0bffc17 	ldw	r2,-16(fp)
8009c458:	10c00017 	ldw	r3,0(r2)
8009c45c:	e0bffd17 	ldw	r2,-12(fp)
8009c460:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8009c464:	e0bffc17 	ldw	r2,-16(fp)
8009c468:	10800017 	ldw	r2,0(r2)
8009c46c:	e0fffd17 	ldw	r3,-12(fp)
8009c470:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8009c474:	e0bffc17 	ldw	r2,-16(fp)
8009c478:	e0fffd17 	ldw	r3,-12(fp)
8009c47c:	10c00015 	stw	r3,0(r2)

  return 0;  
8009c480:	0005883a 	mov	r2,zero
}
8009c484:	e037883a 	mov	sp,fp
8009c488:	dfc00117 	ldw	ra,4(sp)
8009c48c:	df000017 	ldw	fp,0(sp)
8009c490:	dec00204 	addi	sp,sp,8
8009c494:	f800283a 	ret

8009c498 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8009c498:	defffd04 	addi	sp,sp,-12
8009c49c:	dfc00215 	stw	ra,8(sp)
8009c4a0:	df000115 	stw	fp,4(sp)
8009c4a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8009c4a8:	00a002b4 	movhi	r2,32778
8009c4ac:	10b59b04 	addi	r2,r2,-10644
8009c4b0:	e0bfff15 	stw	r2,-4(fp)
8009c4b4:	00000606 	br	8009c4d0 <_do_ctors+0x38>
        (*ctor) (); 
8009c4b8:	e0bfff17 	ldw	r2,-4(fp)
8009c4bc:	10800017 	ldw	r2,0(r2)
8009c4c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8009c4c4:	e0bfff17 	ldw	r2,-4(fp)
8009c4c8:	10bfff04 	addi	r2,r2,-4
8009c4cc:	e0bfff15 	stw	r2,-4(fp)
8009c4d0:	e0ffff17 	ldw	r3,-4(fp)
8009c4d4:	00a002b4 	movhi	r2,32778
8009c4d8:	10b59c04 	addi	r2,r2,-10640
8009c4dc:	18bff62e 	bgeu	r3,r2,8009c4b8 <_do_ctors+0x20>
        (*ctor) (); 
}
8009c4e0:	0001883a 	nop
8009c4e4:	e037883a 	mov	sp,fp
8009c4e8:	dfc00117 	ldw	ra,4(sp)
8009c4ec:	df000017 	ldw	fp,0(sp)
8009c4f0:	dec00204 	addi	sp,sp,8
8009c4f4:	f800283a 	ret

8009c4f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8009c4f8:	defffd04 	addi	sp,sp,-12
8009c4fc:	dfc00215 	stw	ra,8(sp)
8009c500:	df000115 	stw	fp,4(sp)
8009c504:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8009c508:	00a002b4 	movhi	r2,32778
8009c50c:	10b59b04 	addi	r2,r2,-10644
8009c510:	e0bfff15 	stw	r2,-4(fp)
8009c514:	00000606 	br	8009c530 <_do_dtors+0x38>
        (*dtor) (); 
8009c518:	e0bfff17 	ldw	r2,-4(fp)
8009c51c:	10800017 	ldw	r2,0(r2)
8009c520:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8009c524:	e0bfff17 	ldw	r2,-4(fp)
8009c528:	10bfff04 	addi	r2,r2,-4
8009c52c:	e0bfff15 	stw	r2,-4(fp)
8009c530:	e0ffff17 	ldw	r3,-4(fp)
8009c534:	00a002b4 	movhi	r2,32778
8009c538:	10b59c04 	addi	r2,r2,-10640
8009c53c:	18bff62e 	bgeu	r3,r2,8009c518 <_do_dtors+0x20>
        (*dtor) (); 
}
8009c540:	0001883a 	nop
8009c544:	e037883a 	mov	sp,fp
8009c548:	dfc00117 	ldw	ra,4(sp)
8009c54c:	df000017 	ldw	fp,0(sp)
8009c550:	dec00204 	addi	sp,sp,8
8009c554:	f800283a 	ret

8009c558 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8009c558:	defffa04 	addi	sp,sp,-24
8009c55c:	dfc00515 	stw	ra,20(sp)
8009c560:	df000415 	stw	fp,16(sp)
8009c564:	df000404 	addi	fp,sp,16
8009c568:	e13ffe15 	stw	r4,-8(fp)
8009c56c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8009c570:	e0bfff17 	ldw	r2,-4(fp)
8009c574:	10800017 	ldw	r2,0(r2)
8009c578:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8009c57c:	e13ffe17 	ldw	r4,-8(fp)
8009c580:	00833580 	call	80083358 <strlen>
8009c584:	10800044 	addi	r2,r2,1
8009c588:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8009c58c:	00000d06 	br	8009c5c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8009c590:	e0bffc17 	ldw	r2,-16(fp)
8009c594:	10800217 	ldw	r2,8(r2)
8009c598:	e0fffd17 	ldw	r3,-12(fp)
8009c59c:	180d883a 	mov	r6,r3
8009c5a0:	e17ffe17 	ldw	r5,-8(fp)
8009c5a4:	1009883a 	mov	r4,r2
8009c5a8:	0082d280 	call	80082d28 <memcmp>
8009c5ac:	1000021e 	bne	r2,zero,8009c5b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
8009c5b0:	e0bffc17 	ldw	r2,-16(fp)
8009c5b4:	00000706 	br	8009c5d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
8009c5b8:	e0bffc17 	ldw	r2,-16(fp)
8009c5bc:	10800017 	ldw	r2,0(r2)
8009c5c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8009c5c4:	e0fffc17 	ldw	r3,-16(fp)
8009c5c8:	e0bfff17 	ldw	r2,-4(fp)
8009c5cc:	18bff01e 	bne	r3,r2,8009c590 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8009c5d0:	0005883a 	mov	r2,zero
}
8009c5d4:	e037883a 	mov	sp,fp
8009c5d8:	dfc00117 	ldw	ra,4(sp)
8009c5dc:	df000017 	ldw	fp,0(sp)
8009c5e0:	dec00204 	addi	sp,sp,8
8009c5e4:	f800283a 	ret

8009c5e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
8009c5e8:	defffe04 	addi	sp,sp,-8
8009c5ec:	dfc00115 	stw	ra,4(sp)
8009c5f0:	df000015 	stw	fp,0(sp)
8009c5f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
8009c5f8:	01440004 	movi	r5,4096
8009c5fc:	0009883a 	mov	r4,zero
8009c600:	009d22c0 	call	8009d22c <alt_icache_flush>
#endif
}
8009c604:	0001883a 	nop
8009c608:	e037883a 	mov	sp,fp
8009c60c:	dfc00117 	ldw	ra,4(sp)
8009c610:	df000017 	ldw	fp,0(sp)
8009c614:	dec00204 	addi	sp,sp,8
8009c618:	f800283a 	ret

8009c61c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8009c61c:	defff904 	addi	sp,sp,-28
8009c620:	dfc00615 	stw	ra,24(sp)
8009c624:	df000515 	stw	fp,20(sp)
8009c628:	df000504 	addi	fp,sp,20
8009c62c:	e13ffc15 	stw	r4,-16(fp)
8009c630:	e17ffd15 	stw	r5,-12(fp)
8009c634:	e1bffe15 	stw	r6,-8(fp)
8009c638:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8009c63c:	e0800217 	ldw	r2,8(fp)
8009c640:	d8800015 	stw	r2,0(sp)
8009c644:	e1ffff17 	ldw	r7,-4(fp)
8009c648:	e1bffe17 	ldw	r6,-8(fp)
8009c64c:	e17ffd17 	ldw	r5,-12(fp)
8009c650:	e13ffc17 	ldw	r4,-16(fp)
8009c654:	009c7cc0 	call	8009c7cc <alt_iic_isr_register>
}  
8009c658:	e037883a 	mov	sp,fp
8009c65c:	dfc00117 	ldw	ra,4(sp)
8009c660:	df000017 	ldw	fp,0(sp)
8009c664:	dec00204 	addi	sp,sp,8
8009c668:	f800283a 	ret

8009c66c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8009c66c:	defff904 	addi	sp,sp,-28
8009c670:	df000615 	stw	fp,24(sp)
8009c674:	df000604 	addi	fp,sp,24
8009c678:	e13ffe15 	stw	r4,-8(fp)
8009c67c:	e17fff15 	stw	r5,-4(fp)
8009c680:	e0bfff17 	ldw	r2,-4(fp)
8009c684:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009c688:	0005303a 	rdctl	r2,status
8009c68c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009c690:	e0fffb17 	ldw	r3,-20(fp)
8009c694:	00bfff84 	movi	r2,-2
8009c698:	1884703a 	and	r2,r3,r2
8009c69c:	1001703a 	wrctl	status,r2
  
  return context;
8009c6a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8009c6a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8009c6a8:	00c00044 	movi	r3,1
8009c6ac:	e0bffa17 	ldw	r2,-24(fp)
8009c6b0:	1884983a 	sll	r2,r3,r2
8009c6b4:	1007883a 	mov	r3,r2
8009c6b8:	d0a72b17 	ldw	r2,-25428(gp)
8009c6bc:	1884b03a 	or	r2,r3,r2
8009c6c0:	d0a72b15 	stw	r2,-25428(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8009c6c4:	d0a72b17 	ldw	r2,-25428(gp)
8009c6c8:	100170fa 	wrctl	ienable,r2
8009c6cc:	e0bffc17 	ldw	r2,-16(fp)
8009c6d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009c6d4:	e0bffd17 	ldw	r2,-12(fp)
8009c6d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8009c6dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8009c6e0:	0001883a 	nop
}
8009c6e4:	e037883a 	mov	sp,fp
8009c6e8:	df000017 	ldw	fp,0(sp)
8009c6ec:	dec00104 	addi	sp,sp,4
8009c6f0:	f800283a 	ret

8009c6f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8009c6f4:	defff904 	addi	sp,sp,-28
8009c6f8:	df000615 	stw	fp,24(sp)
8009c6fc:	df000604 	addi	fp,sp,24
8009c700:	e13ffe15 	stw	r4,-8(fp)
8009c704:	e17fff15 	stw	r5,-4(fp)
8009c708:	e0bfff17 	ldw	r2,-4(fp)
8009c70c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009c710:	0005303a 	rdctl	r2,status
8009c714:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009c718:	e0fffb17 	ldw	r3,-20(fp)
8009c71c:	00bfff84 	movi	r2,-2
8009c720:	1884703a 	and	r2,r3,r2
8009c724:	1001703a 	wrctl	status,r2
  
  return context;
8009c728:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8009c72c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8009c730:	00c00044 	movi	r3,1
8009c734:	e0bffa17 	ldw	r2,-24(fp)
8009c738:	1884983a 	sll	r2,r3,r2
8009c73c:	0084303a 	nor	r2,zero,r2
8009c740:	1007883a 	mov	r3,r2
8009c744:	d0a72b17 	ldw	r2,-25428(gp)
8009c748:	1884703a 	and	r2,r3,r2
8009c74c:	d0a72b15 	stw	r2,-25428(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8009c750:	d0a72b17 	ldw	r2,-25428(gp)
8009c754:	100170fa 	wrctl	ienable,r2
8009c758:	e0bffc17 	ldw	r2,-16(fp)
8009c75c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009c760:	e0bffd17 	ldw	r2,-12(fp)
8009c764:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8009c768:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8009c76c:	0001883a 	nop
}
8009c770:	e037883a 	mov	sp,fp
8009c774:	df000017 	ldw	fp,0(sp)
8009c778:	dec00104 	addi	sp,sp,4
8009c77c:	f800283a 	ret

8009c780 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8009c780:	defffc04 	addi	sp,sp,-16
8009c784:	df000315 	stw	fp,12(sp)
8009c788:	df000304 	addi	fp,sp,12
8009c78c:	e13ffe15 	stw	r4,-8(fp)
8009c790:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8009c794:	000530fa 	rdctl	r2,ienable
8009c798:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8009c79c:	00c00044 	movi	r3,1
8009c7a0:	e0bfff17 	ldw	r2,-4(fp)
8009c7a4:	1884983a 	sll	r2,r3,r2
8009c7a8:	1007883a 	mov	r3,r2
8009c7ac:	e0bffd17 	ldw	r2,-12(fp)
8009c7b0:	1884703a 	and	r2,r3,r2
8009c7b4:	1004c03a 	cmpne	r2,r2,zero
8009c7b8:	10803fcc 	andi	r2,r2,255
}
8009c7bc:	e037883a 	mov	sp,fp
8009c7c0:	df000017 	ldw	fp,0(sp)
8009c7c4:	dec00104 	addi	sp,sp,4
8009c7c8:	f800283a 	ret

8009c7cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8009c7cc:	defff504 	addi	sp,sp,-44
8009c7d0:	dfc00a15 	stw	ra,40(sp)
8009c7d4:	df000915 	stw	fp,36(sp)
8009c7d8:	df000904 	addi	fp,sp,36
8009c7dc:	e13ffc15 	stw	r4,-16(fp)
8009c7e0:	e17ffd15 	stw	r5,-12(fp)
8009c7e4:	e1bffe15 	stw	r6,-8(fp)
8009c7e8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8009c7ec:	00bffa84 	movi	r2,-22
8009c7f0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8009c7f4:	e0bffd17 	ldw	r2,-12(fp)
8009c7f8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8009c7fc:	e0bff817 	ldw	r2,-32(fp)
8009c800:	10800808 	cmpgei	r2,r2,32
8009c804:	1000271e 	bne	r2,zero,8009c8a4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009c808:	0005303a 	rdctl	r2,status
8009c80c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009c810:	e0fffb17 	ldw	r3,-20(fp)
8009c814:	00bfff84 	movi	r2,-2
8009c818:	1884703a 	and	r2,r3,r2
8009c81c:	1001703a 	wrctl	status,r2
  
  return context;
8009c820:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8009c824:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8009c828:	00a002b4 	movhi	r2,32778
8009c82c:	1088f704 	addi	r2,r2,9180
8009c830:	e0fff817 	ldw	r3,-32(fp)
8009c834:	180690fa 	slli	r3,r3,3
8009c838:	10c5883a 	add	r2,r2,r3
8009c83c:	e0fffe17 	ldw	r3,-8(fp)
8009c840:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8009c844:	00a002b4 	movhi	r2,32778
8009c848:	1088f704 	addi	r2,r2,9180
8009c84c:	e0fff817 	ldw	r3,-32(fp)
8009c850:	180690fa 	slli	r3,r3,3
8009c854:	10c5883a 	add	r2,r2,r3
8009c858:	10800104 	addi	r2,r2,4
8009c85c:	e0ffff17 	ldw	r3,-4(fp)
8009c860:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8009c864:	e0bffe17 	ldw	r2,-8(fp)
8009c868:	10000526 	beq	r2,zero,8009c880 <alt_iic_isr_register+0xb4>
8009c86c:	e0bff817 	ldw	r2,-32(fp)
8009c870:	100b883a 	mov	r5,r2
8009c874:	e13ffc17 	ldw	r4,-16(fp)
8009c878:	009c66c0 	call	8009c66c <alt_ic_irq_enable>
8009c87c:	00000406 	br	8009c890 <alt_iic_isr_register+0xc4>
8009c880:	e0bff817 	ldw	r2,-32(fp)
8009c884:	100b883a 	mov	r5,r2
8009c888:	e13ffc17 	ldw	r4,-16(fp)
8009c88c:	009c6f40 	call	8009c6f4 <alt_ic_irq_disable>
8009c890:	e0bff715 	stw	r2,-36(fp)
8009c894:	e0bffa17 	ldw	r2,-24(fp)
8009c898:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009c89c:	e0bff917 	ldw	r2,-28(fp)
8009c8a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8009c8a4:	e0bff717 	ldw	r2,-36(fp)
}
8009c8a8:	e037883a 	mov	sp,fp
8009c8ac:	dfc00117 	ldw	ra,4(sp)
8009c8b0:	df000017 	ldw	fp,0(sp)
8009c8b4:	dec00204 	addi	sp,sp,8
8009c8b8:	f800283a 	ret

8009c8bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8009c8bc:	defff904 	addi	sp,sp,-28
8009c8c0:	dfc00615 	stw	ra,24(sp)
8009c8c4:	df000515 	stw	fp,20(sp)
8009c8c8:	df000504 	addi	fp,sp,20
8009c8cc:	e13ffc15 	stw	r4,-16(fp)
8009c8d0:	e17ffd15 	stw	r5,-12(fp)
8009c8d4:	e1bffe15 	stw	r6,-8(fp)
8009c8d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8009c8dc:	e1bfff17 	ldw	r6,-4(fp)
8009c8e0:	e17ffe17 	ldw	r5,-8(fp)
8009c8e4:	e13ffd17 	ldw	r4,-12(fp)
8009c8e8:	009cafc0 	call	8009cafc <open>
8009c8ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8009c8f0:	e0bffb17 	ldw	r2,-20(fp)
8009c8f4:	10001c16 	blt	r2,zero,8009c968 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
8009c8f8:	00a002b4 	movhi	r2,32778
8009c8fc:	10bcfe04 	addi	r2,r2,-3080
8009c900:	e0fffb17 	ldw	r3,-20(fp)
8009c904:	18c00324 	muli	r3,r3,12
8009c908:	10c5883a 	add	r2,r2,r3
8009c90c:	10c00017 	ldw	r3,0(r2)
8009c910:	e0bffc17 	ldw	r2,-16(fp)
8009c914:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8009c918:	00a002b4 	movhi	r2,32778
8009c91c:	10bcfe04 	addi	r2,r2,-3080
8009c920:	e0fffb17 	ldw	r3,-20(fp)
8009c924:	18c00324 	muli	r3,r3,12
8009c928:	10c5883a 	add	r2,r2,r3
8009c92c:	10800104 	addi	r2,r2,4
8009c930:	10c00017 	ldw	r3,0(r2)
8009c934:	e0bffc17 	ldw	r2,-16(fp)
8009c938:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8009c93c:	00a002b4 	movhi	r2,32778
8009c940:	10bcfe04 	addi	r2,r2,-3080
8009c944:	e0fffb17 	ldw	r3,-20(fp)
8009c948:	18c00324 	muli	r3,r3,12
8009c94c:	10c5883a 	add	r2,r2,r3
8009c950:	10800204 	addi	r2,r2,8
8009c954:	10c00017 	ldw	r3,0(r2)
8009c958:	e0bffc17 	ldw	r2,-16(fp)
8009c95c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8009c960:	e13ffb17 	ldw	r4,-20(fp)
8009c964:	009937c0 	call	8009937c <alt_release_fd>
  }
} 
8009c968:	0001883a 	nop
8009c96c:	e037883a 	mov	sp,fp
8009c970:	dfc00117 	ldw	ra,4(sp)
8009c974:	df000017 	ldw	fp,0(sp)
8009c978:	dec00204 	addi	sp,sp,8
8009c97c:	f800283a 	ret

8009c980 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8009c980:	defffb04 	addi	sp,sp,-20
8009c984:	dfc00415 	stw	ra,16(sp)
8009c988:	df000315 	stw	fp,12(sp)
8009c98c:	df000304 	addi	fp,sp,12
8009c990:	e13ffd15 	stw	r4,-12(fp)
8009c994:	e17ffe15 	stw	r5,-8(fp)
8009c998:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8009c99c:	01c07fc4 	movi	r7,511
8009c9a0:	01800044 	movi	r6,1
8009c9a4:	e17ffd17 	ldw	r5,-12(fp)
8009c9a8:	012002b4 	movhi	r4,32778
8009c9ac:	213d0104 	addi	r4,r4,-3068
8009c9b0:	009c8bc0 	call	8009c8bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8009c9b4:	01c07fc4 	movi	r7,511
8009c9b8:	000d883a 	mov	r6,zero
8009c9bc:	e17ffe17 	ldw	r5,-8(fp)
8009c9c0:	012002b4 	movhi	r4,32778
8009c9c4:	213cfe04 	addi	r4,r4,-3080
8009c9c8:	009c8bc0 	call	8009c8bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8009c9cc:	01c07fc4 	movi	r7,511
8009c9d0:	01800044 	movi	r6,1
8009c9d4:	e17fff17 	ldw	r5,-4(fp)
8009c9d8:	012002b4 	movhi	r4,32778
8009c9dc:	213d0404 	addi	r4,r4,-3056
8009c9e0:	009c8bc0 	call	8009c8bc <alt_open_fd>
}  
8009c9e4:	0001883a 	nop
8009c9e8:	e037883a 	mov	sp,fp
8009c9ec:	dfc00117 	ldw	ra,4(sp)
8009c9f0:	df000017 	ldw	fp,0(sp)
8009c9f4:	dec00204 	addi	sp,sp,8
8009c9f8:	f800283a 	ret

8009c9fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8009c9fc:	defffe04 	addi	sp,sp,-8
8009ca00:	dfc00115 	stw	ra,4(sp)
8009ca04:	df000015 	stw	fp,0(sp)
8009ca08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8009ca0c:	d0a00d17 	ldw	r2,-32716(gp)
8009ca10:	10000326 	beq	r2,zero,8009ca20 <alt_get_errno+0x24>
8009ca14:	d0a00d17 	ldw	r2,-32716(gp)
8009ca18:	103ee83a 	callr	r2
8009ca1c:	00000106 	br	8009ca24 <alt_get_errno+0x28>
8009ca20:	d0a72404 	addi	r2,gp,-25456
}
8009ca24:	e037883a 	mov	sp,fp
8009ca28:	dfc00117 	ldw	ra,4(sp)
8009ca2c:	df000017 	ldw	fp,0(sp)
8009ca30:	dec00204 	addi	sp,sp,8
8009ca34:	f800283a 	ret

8009ca38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8009ca38:	defffd04 	addi	sp,sp,-12
8009ca3c:	df000215 	stw	fp,8(sp)
8009ca40:	df000204 	addi	fp,sp,8
8009ca44:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8009ca48:	e0bfff17 	ldw	r2,-4(fp)
8009ca4c:	10800217 	ldw	r2,8(r2)
8009ca50:	10d00034 	orhi	r3,r2,16384
8009ca54:	e0bfff17 	ldw	r2,-4(fp)
8009ca58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8009ca5c:	e03ffe15 	stw	zero,-8(fp)
8009ca60:	00001d06 	br	8009cad8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8009ca64:	00a002b4 	movhi	r2,32778
8009ca68:	10bcfe04 	addi	r2,r2,-3080
8009ca6c:	e0fffe17 	ldw	r3,-8(fp)
8009ca70:	18c00324 	muli	r3,r3,12
8009ca74:	10c5883a 	add	r2,r2,r3
8009ca78:	10c00017 	ldw	r3,0(r2)
8009ca7c:	e0bfff17 	ldw	r2,-4(fp)
8009ca80:	10800017 	ldw	r2,0(r2)
8009ca84:	1880111e 	bne	r3,r2,8009cacc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8009ca88:	00a002b4 	movhi	r2,32778
8009ca8c:	10bcfe04 	addi	r2,r2,-3080
8009ca90:	e0fffe17 	ldw	r3,-8(fp)
8009ca94:	18c00324 	muli	r3,r3,12
8009ca98:	10c5883a 	add	r2,r2,r3
8009ca9c:	10800204 	addi	r2,r2,8
8009caa0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8009caa4:	1000090e 	bge	r2,zero,8009cacc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8009caa8:	e0bffe17 	ldw	r2,-8(fp)
8009caac:	10c00324 	muli	r3,r2,12
8009cab0:	00a002b4 	movhi	r2,32778
8009cab4:	10bcfe04 	addi	r2,r2,-3080
8009cab8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8009cabc:	e0bfff17 	ldw	r2,-4(fp)
8009cac0:	18800226 	beq	r3,r2,8009cacc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8009cac4:	00bffcc4 	movi	r2,-13
8009cac8:	00000806 	br	8009caec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8009cacc:	e0bffe17 	ldw	r2,-8(fp)
8009cad0:	10800044 	addi	r2,r2,1
8009cad4:	e0bffe15 	stw	r2,-8(fp)
8009cad8:	d0a00c17 	ldw	r2,-32720(gp)
8009cadc:	1007883a 	mov	r3,r2
8009cae0:	e0bffe17 	ldw	r2,-8(fp)
8009cae4:	18bfdf2e 	bgeu	r3,r2,8009ca64 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8009cae8:	0005883a 	mov	r2,zero
}
8009caec:	e037883a 	mov	sp,fp
8009caf0:	df000017 	ldw	fp,0(sp)
8009caf4:	dec00104 	addi	sp,sp,4
8009caf8:	f800283a 	ret

8009cafc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8009cafc:	defff604 	addi	sp,sp,-40
8009cb00:	dfc00915 	stw	ra,36(sp)
8009cb04:	df000815 	stw	fp,32(sp)
8009cb08:	df000804 	addi	fp,sp,32
8009cb0c:	e13ffd15 	stw	r4,-12(fp)
8009cb10:	e17ffe15 	stw	r5,-8(fp)
8009cb14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8009cb18:	00bfffc4 	movi	r2,-1
8009cb1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8009cb20:	00bffb44 	movi	r2,-19
8009cb24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8009cb28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8009cb2c:	d1600a04 	addi	r5,gp,-32728
8009cb30:	e13ffd17 	ldw	r4,-12(fp)
8009cb34:	009c5580 	call	8009c558 <alt_find_dev>
8009cb38:	e0bff815 	stw	r2,-32(fp)
8009cb3c:	e0bff817 	ldw	r2,-32(fp)
8009cb40:	1000051e 	bne	r2,zero,8009cb58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8009cb44:	e13ffd17 	ldw	r4,-12(fp)
8009cb48:	009d0800 	call	8009d080 <alt_find_file>
8009cb4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8009cb50:	00800044 	movi	r2,1
8009cb54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8009cb58:	e0bff817 	ldw	r2,-32(fp)
8009cb5c:	10002926 	beq	r2,zero,8009cc04 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8009cb60:	e13ff817 	ldw	r4,-32(fp)
8009cb64:	009d1880 	call	8009d188 <alt_get_fd>
8009cb68:	e0bff915 	stw	r2,-28(fp)
8009cb6c:	e0bff917 	ldw	r2,-28(fp)
8009cb70:	1000030e 	bge	r2,zero,8009cb80 <open+0x84>
    {
      status = index;
8009cb74:	e0bff917 	ldw	r2,-28(fp)
8009cb78:	e0bffa15 	stw	r2,-24(fp)
8009cb7c:	00002306 	br	8009cc0c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8009cb80:	e0bff917 	ldw	r2,-28(fp)
8009cb84:	10c00324 	muli	r3,r2,12
8009cb88:	00a002b4 	movhi	r2,32778
8009cb8c:	10bcfe04 	addi	r2,r2,-3080
8009cb90:	1885883a 	add	r2,r3,r2
8009cb94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8009cb98:	e0fffe17 	ldw	r3,-8(fp)
8009cb9c:	00900034 	movhi	r2,16384
8009cba0:	10bfffc4 	addi	r2,r2,-1
8009cba4:	1886703a 	and	r3,r3,r2
8009cba8:	e0bffc17 	ldw	r2,-16(fp)
8009cbac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8009cbb0:	e0bffb17 	ldw	r2,-20(fp)
8009cbb4:	1000051e 	bne	r2,zero,8009cbcc <open+0xd0>
8009cbb8:	e13ffc17 	ldw	r4,-16(fp)
8009cbbc:	009ca380 	call	8009ca38 <alt_file_locked>
8009cbc0:	e0bffa15 	stw	r2,-24(fp)
8009cbc4:	e0bffa17 	ldw	r2,-24(fp)
8009cbc8:	10001016 	blt	r2,zero,8009cc0c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8009cbcc:	e0bff817 	ldw	r2,-32(fp)
8009cbd0:	10800317 	ldw	r2,12(r2)
8009cbd4:	10000826 	beq	r2,zero,8009cbf8 <open+0xfc>
8009cbd8:	e0bff817 	ldw	r2,-32(fp)
8009cbdc:	10800317 	ldw	r2,12(r2)
8009cbe0:	e1ffff17 	ldw	r7,-4(fp)
8009cbe4:	e1bffe17 	ldw	r6,-8(fp)
8009cbe8:	e17ffd17 	ldw	r5,-12(fp)
8009cbec:	e13ffc17 	ldw	r4,-16(fp)
8009cbf0:	103ee83a 	callr	r2
8009cbf4:	00000106 	br	8009cbfc <open+0x100>
8009cbf8:	0005883a 	mov	r2,zero
8009cbfc:	e0bffa15 	stw	r2,-24(fp)
8009cc00:	00000206 	br	8009cc0c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8009cc04:	00bffb44 	movi	r2,-19
8009cc08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8009cc0c:	e0bffa17 	ldw	r2,-24(fp)
8009cc10:	1000090e 	bge	r2,zero,8009cc38 <open+0x13c>
  {
    alt_release_fd (index);  
8009cc14:	e13ff917 	ldw	r4,-28(fp)
8009cc18:	009937c0 	call	8009937c <alt_release_fd>
    ALT_ERRNO = -status;
8009cc1c:	009c9fc0 	call	8009c9fc <alt_get_errno>
8009cc20:	1007883a 	mov	r3,r2
8009cc24:	e0bffa17 	ldw	r2,-24(fp)
8009cc28:	0085c83a 	sub	r2,zero,r2
8009cc2c:	18800015 	stw	r2,0(r3)
    return -1;
8009cc30:	00bfffc4 	movi	r2,-1
8009cc34:	00000106 	br	8009cc3c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8009cc38:	e0bff917 	ldw	r2,-28(fp)
}
8009cc3c:	e037883a 	mov	sp,fp
8009cc40:	dfc00117 	ldw	ra,4(sp)
8009cc44:	df000017 	ldw	fp,0(sp)
8009cc48:	dec00204 	addi	sp,sp,8
8009cc4c:	f800283a 	ret

8009cc50 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8009cc50:	defff204 	addi	sp,sp,-56
8009cc54:	dfc00a15 	stw	ra,40(sp)
8009cc58:	df000915 	stw	fp,36(sp)
8009cc5c:	df000904 	addi	fp,sp,36
8009cc60:	e13fff15 	stw	r4,-4(fp)
8009cc64:	e1400215 	stw	r5,8(fp)
8009cc68:	e1800315 	stw	r6,12(fp)
8009cc6c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8009cc70:	e0800204 	addi	r2,fp,8
8009cc74:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8009cc78:	e0bfff17 	ldw	r2,-4(fp)
8009cc7c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8009cc80:	00006f06 	br	8009ce40 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8009cc84:	e0bff807 	ldb	r2,-32(fp)
8009cc88:	10800960 	cmpeqi	r2,r2,37
8009cc8c:	1000041e 	bne	r2,zero,8009cca0 <alt_printf+0x50>
        {
            alt_putchar(c);
8009cc90:	e0bff807 	ldb	r2,-32(fp)
8009cc94:	1009883a 	mov	r4,r2
8009cc98:	009ce7c0 	call	8009ce7c <alt_putchar>
8009cc9c:	00006806 	br	8009ce40 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8009cca0:	e0bff717 	ldw	r2,-36(fp)
8009cca4:	10c00044 	addi	r3,r2,1
8009cca8:	e0fff715 	stw	r3,-36(fp)
8009ccac:	10800003 	ldbu	r2,0(r2)
8009ccb0:	e0bff805 	stb	r2,-32(fp)
8009ccb4:	e0bff807 	ldb	r2,-32(fp)
8009ccb8:	10006926 	beq	r2,zero,8009ce60 <alt_printf+0x210>
            {
                if (c == '%')
8009ccbc:	e0bff807 	ldb	r2,-32(fp)
8009ccc0:	10800958 	cmpnei	r2,r2,37
8009ccc4:	1000041e 	bne	r2,zero,8009ccd8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8009ccc8:	e0bff807 	ldb	r2,-32(fp)
8009cccc:	1009883a 	mov	r4,r2
8009ccd0:	009ce7c0 	call	8009ce7c <alt_putchar>
8009ccd4:	00005a06 	br	8009ce40 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
8009ccd8:	e0bff807 	ldb	r2,-32(fp)
8009ccdc:	108018d8 	cmpnei	r2,r2,99
8009cce0:	1000081e 	bne	r2,zero,8009cd04 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
8009cce4:	e0bffe17 	ldw	r2,-8(fp)
8009cce8:	10c00104 	addi	r3,r2,4
8009ccec:	e0fffe15 	stw	r3,-8(fp)
8009ccf0:	10800017 	ldw	r2,0(r2)
8009ccf4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8009ccf8:	e13ffd17 	ldw	r4,-12(fp)
8009ccfc:	009ce7c0 	call	8009ce7c <alt_putchar>
8009cd00:	00004f06 	br	8009ce40 <alt_printf+0x1f0>
                }
                else if (c == 'x')
8009cd04:	e0bff807 	ldb	r2,-32(fp)
8009cd08:	10801e18 	cmpnei	r2,r2,120
8009cd0c:	1000341e 	bne	r2,zero,8009cde0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8009cd10:	e0bffe17 	ldw	r2,-8(fp)
8009cd14:	10c00104 	addi	r3,r2,4
8009cd18:	e0fffe15 	stw	r3,-8(fp)
8009cd1c:	10800017 	ldw	r2,0(r2)
8009cd20:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8009cd24:	e0bffb17 	ldw	r2,-20(fp)
8009cd28:	1000031e 	bne	r2,zero,8009cd38 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8009cd2c:	01000c04 	movi	r4,48
8009cd30:	009ce7c0 	call	8009ce7c <alt_putchar>
                        continue;
8009cd34:	00004206 	br	8009ce40 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8009cd38:	00800704 	movi	r2,28
8009cd3c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8009cd40:	00000306 	br	8009cd50 <alt_printf+0x100>
                        digit_shift -= 4;
8009cd44:	e0bff917 	ldw	r2,-28(fp)
8009cd48:	10bfff04 	addi	r2,r2,-4
8009cd4c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8009cd50:	00c003c4 	movi	r3,15
8009cd54:	e0bff917 	ldw	r2,-28(fp)
8009cd58:	1884983a 	sll	r2,r3,r2
8009cd5c:	1007883a 	mov	r3,r2
8009cd60:	e0bffb17 	ldw	r2,-20(fp)
8009cd64:	1884703a 	and	r2,r3,r2
8009cd68:	103ff626 	beq	r2,zero,8009cd44 <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8009cd6c:	00001906 	br	8009cdd4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8009cd70:	00c003c4 	movi	r3,15
8009cd74:	e0bff917 	ldw	r2,-28(fp)
8009cd78:	1884983a 	sll	r2,r3,r2
8009cd7c:	1007883a 	mov	r3,r2
8009cd80:	e0bffb17 	ldw	r2,-20(fp)
8009cd84:	1886703a 	and	r3,r3,r2
8009cd88:	e0bff917 	ldw	r2,-28(fp)
8009cd8c:	1884d83a 	srl	r2,r3,r2
8009cd90:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8009cd94:	e0bffc17 	ldw	r2,-16(fp)
8009cd98:	108002a8 	cmpgeui	r2,r2,10
8009cd9c:	1000041e 	bne	r2,zero,8009cdb0 <alt_printf+0x160>
                            c = '0' + digit;
8009cda0:	e0bffc17 	ldw	r2,-16(fp)
8009cda4:	10800c04 	addi	r2,r2,48
8009cda8:	e0bff805 	stb	r2,-32(fp)
8009cdac:	00000306 	br	8009cdbc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
8009cdb0:	e0bffc17 	ldw	r2,-16(fp)
8009cdb4:	108015c4 	addi	r2,r2,87
8009cdb8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8009cdbc:	e0bff807 	ldb	r2,-32(fp)
8009cdc0:	1009883a 	mov	r4,r2
8009cdc4:	009ce7c0 	call	8009ce7c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8009cdc8:	e0bff917 	ldw	r2,-28(fp)
8009cdcc:	10bfff04 	addi	r2,r2,-4
8009cdd0:	e0bff915 	stw	r2,-28(fp)
8009cdd4:	e0bff917 	ldw	r2,-28(fp)
8009cdd8:	103fe50e 	bge	r2,zero,8009cd70 <alt_printf+0x120>
8009cddc:	00001806 	br	8009ce40 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8009cde0:	e0bff807 	ldb	r2,-32(fp)
8009cde4:	10801cd8 	cmpnei	r2,r2,115
8009cde8:	1000151e 	bne	r2,zero,8009ce40 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8009cdec:	e0bffe17 	ldw	r2,-8(fp)
8009cdf0:	10c00104 	addi	r3,r2,4
8009cdf4:	e0fffe15 	stw	r3,-8(fp)
8009cdf8:	10800017 	ldw	r2,0(r2)
8009cdfc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8009ce00:	00000906 	br	8009ce28 <alt_printf+0x1d8>
                      alt_putchar(*s++);
8009ce04:	e0bffa17 	ldw	r2,-24(fp)
8009ce08:	10c00044 	addi	r3,r2,1
8009ce0c:	e0fffa15 	stw	r3,-24(fp)
8009ce10:	10800003 	ldbu	r2,0(r2)
8009ce14:	10803fcc 	andi	r2,r2,255
8009ce18:	1080201c 	xori	r2,r2,128
8009ce1c:	10bfe004 	addi	r2,r2,-128
8009ce20:	1009883a 	mov	r4,r2
8009ce24:	009ce7c0 	call	8009ce7c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8009ce28:	e0bffa17 	ldw	r2,-24(fp)
8009ce2c:	10800003 	ldbu	r2,0(r2)
8009ce30:	10803fcc 	andi	r2,r2,255
8009ce34:	1080201c 	xori	r2,r2,128
8009ce38:	10bfe004 	addi	r2,r2,-128
8009ce3c:	103ff11e 	bne	r2,zero,8009ce04 <alt_printf+0x1b4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8009ce40:	e0bff717 	ldw	r2,-36(fp)
8009ce44:	10c00044 	addi	r3,r2,1
8009ce48:	e0fff715 	stw	r3,-36(fp)
8009ce4c:	10800003 	ldbu	r2,0(r2)
8009ce50:	e0bff805 	stb	r2,-32(fp)
8009ce54:	e0bff807 	ldb	r2,-32(fp)
8009ce58:	103f8a1e 	bne	r2,zero,8009cc84 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8009ce5c:	00000106 	br	8009ce64 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8009ce60:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8009ce64:	0001883a 	nop
8009ce68:	e037883a 	mov	sp,fp
8009ce6c:	dfc00117 	ldw	ra,4(sp)
8009ce70:	df000017 	ldw	fp,0(sp)
8009ce74:	dec00504 	addi	sp,sp,20
8009ce78:	f800283a 	ret

8009ce7c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8009ce7c:	defffd04 	addi	sp,sp,-12
8009ce80:	dfc00215 	stw	ra,8(sp)
8009ce84:	df000115 	stw	fp,4(sp)
8009ce88:	df000104 	addi	fp,sp,4
8009ce8c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8009ce90:	d0a00117 	ldw	r2,-32764(gp)
8009ce94:	10800217 	ldw	r2,8(r2)
8009ce98:	100b883a 	mov	r5,r2
8009ce9c:	e13fff17 	ldw	r4,-4(fp)
8009cea0:	008b31c0 	call	8008b31c <putc>
#endif
#endif
}
8009cea4:	e037883a 	mov	sp,fp
8009cea8:	dfc00117 	ldw	ra,4(sp)
8009ceac:	df000017 	ldw	fp,0(sp)
8009ceb0:	dec00204 	addi	sp,sp,8
8009ceb4:	f800283a 	ret

8009ceb8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
8009ceb8:	defffa04 	addi	sp,sp,-24
8009cebc:	df000515 	stw	fp,20(sp)
8009cec0:	df000504 	addi	fp,sp,20
8009cec4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009cec8:	0005303a 	rdctl	r2,status
8009cecc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009ced0:	e0fffc17 	ldw	r3,-16(fp)
8009ced4:	00bfff84 	movi	r2,-2
8009ced8:	1884703a 	and	r2,r3,r2
8009cedc:	1001703a 	wrctl	status,r2
  
  return context;
8009cee0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
8009cee4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
8009cee8:	e0bfff17 	ldw	r2,-4(fp)
8009ceec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
8009cef0:	e0bffd17 	ldw	r2,-12(fp)
8009cef4:	10800017 	ldw	r2,0(r2)
8009cef8:	e0fffd17 	ldw	r3,-12(fp)
8009cefc:	18c00117 	ldw	r3,4(r3)
8009cf00:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
8009cf04:	e0bffd17 	ldw	r2,-12(fp)
8009cf08:	10800117 	ldw	r2,4(r2)
8009cf0c:	e0fffd17 	ldw	r3,-12(fp)
8009cf10:	18c00017 	ldw	r3,0(r3)
8009cf14:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8009cf18:	e0bffd17 	ldw	r2,-12(fp)
8009cf1c:	e0fffd17 	ldw	r3,-12(fp)
8009cf20:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
8009cf24:	e0bffd17 	ldw	r2,-12(fp)
8009cf28:	e0fffd17 	ldw	r3,-12(fp)
8009cf2c:	10c00015 	stw	r3,0(r2)
8009cf30:	e0bffb17 	ldw	r2,-20(fp)
8009cf34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009cf38:	e0bffe17 	ldw	r2,-8(fp)
8009cf3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
8009cf40:	0001883a 	nop
8009cf44:	e037883a 	mov	sp,fp
8009cf48:	df000017 	ldw	fp,0(sp)
8009cf4c:	dec00104 	addi	sp,sp,4
8009cf50:	f800283a 	ret

8009cf54 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8009cf54:	defffb04 	addi	sp,sp,-20
8009cf58:	dfc00415 	stw	ra,16(sp)
8009cf5c:	df000315 	stw	fp,12(sp)
8009cf60:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8009cf64:	d0a01417 	ldw	r2,-32688(gp)
8009cf68:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8009cf6c:	d0a72d17 	ldw	r2,-25420(gp)
8009cf70:	10800044 	addi	r2,r2,1
8009cf74:	d0a72d15 	stw	r2,-25420(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8009cf78:	00002e06 	br	8009d034 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
8009cf7c:	e0bffd17 	ldw	r2,-12(fp)
8009cf80:	10800017 	ldw	r2,0(r2)
8009cf84:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
8009cf88:	e0bffd17 	ldw	r2,-12(fp)
8009cf8c:	10800403 	ldbu	r2,16(r2)
8009cf90:	10803fcc 	andi	r2,r2,255
8009cf94:	10000426 	beq	r2,zero,8009cfa8 <alt_tick+0x54>
8009cf98:	d0a72d17 	ldw	r2,-25420(gp)
8009cf9c:	1000021e 	bne	r2,zero,8009cfa8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
8009cfa0:	e0bffd17 	ldw	r2,-12(fp)
8009cfa4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
8009cfa8:	e0bffd17 	ldw	r2,-12(fp)
8009cfac:	10800217 	ldw	r2,8(r2)
8009cfb0:	d0e72d17 	ldw	r3,-25420(gp)
8009cfb4:	18801d36 	bltu	r3,r2,8009d02c <alt_tick+0xd8>
8009cfb8:	e0bffd17 	ldw	r2,-12(fp)
8009cfbc:	10800403 	ldbu	r2,16(r2)
8009cfc0:	10803fcc 	andi	r2,r2,255
8009cfc4:	1000191e 	bne	r2,zero,8009d02c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
8009cfc8:	e0bffd17 	ldw	r2,-12(fp)
8009cfcc:	10800317 	ldw	r2,12(r2)
8009cfd0:	e0fffd17 	ldw	r3,-12(fp)
8009cfd4:	18c00517 	ldw	r3,20(r3)
8009cfd8:	1809883a 	mov	r4,r3
8009cfdc:	103ee83a 	callr	r2
8009cfe0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8009cfe4:	e0bfff17 	ldw	r2,-4(fp)
8009cfe8:	1000031e 	bne	r2,zero,8009cff8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
8009cfec:	e13ffd17 	ldw	r4,-12(fp)
8009cff0:	009ceb80 	call	8009ceb8 <alt_alarm_stop>
8009cff4:	00000d06 	br	8009d02c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
8009cff8:	e0bffd17 	ldw	r2,-12(fp)
8009cffc:	10c00217 	ldw	r3,8(r2)
8009d000:	e0bfff17 	ldw	r2,-4(fp)
8009d004:	1887883a 	add	r3,r3,r2
8009d008:	e0bffd17 	ldw	r2,-12(fp)
8009d00c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8009d010:	e0bffd17 	ldw	r2,-12(fp)
8009d014:	10c00217 	ldw	r3,8(r2)
8009d018:	d0a72d17 	ldw	r2,-25420(gp)
8009d01c:	1880032e 	bgeu	r3,r2,8009d02c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
8009d020:	e0bffd17 	ldw	r2,-12(fp)
8009d024:	00c00044 	movi	r3,1
8009d028:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
8009d02c:	e0bffe17 	ldw	r2,-8(fp)
8009d030:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8009d034:	e0fffd17 	ldw	r3,-12(fp)
8009d038:	d0a01404 	addi	r2,gp,-32688
8009d03c:	18bfcf1e 	bne	r3,r2,8009cf7c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
8009d040:	0001883a 	nop
}
8009d044:	0001883a 	nop
8009d048:	e037883a 	mov	sp,fp
8009d04c:	dfc00117 	ldw	ra,4(sp)
8009d050:	df000017 	ldw	fp,0(sp)
8009d054:	dec00204 	addi	sp,sp,8
8009d058:	f800283a 	ret

8009d05c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8009d05c:	deffff04 	addi	sp,sp,-4
8009d060:	df000015 	stw	fp,0(sp)
8009d064:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8009d068:	000170fa 	wrctl	ienable,zero
}
8009d06c:	0001883a 	nop
8009d070:	e037883a 	mov	sp,fp
8009d074:	df000017 	ldw	fp,0(sp)
8009d078:	dec00104 	addi	sp,sp,4
8009d07c:	f800283a 	ret

8009d080 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8009d080:	defffb04 	addi	sp,sp,-20
8009d084:	dfc00415 	stw	ra,16(sp)
8009d088:	df000315 	stw	fp,12(sp)
8009d08c:	df000304 	addi	fp,sp,12
8009d090:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8009d094:	d0a00817 	ldw	r2,-32736(gp)
8009d098:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8009d09c:	00003106 	br	8009d164 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8009d0a0:	e0bffd17 	ldw	r2,-12(fp)
8009d0a4:	10800217 	ldw	r2,8(r2)
8009d0a8:	1009883a 	mov	r4,r2
8009d0ac:	00833580 	call	80083358 <strlen>
8009d0b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8009d0b4:	e0bffd17 	ldw	r2,-12(fp)
8009d0b8:	10c00217 	ldw	r3,8(r2)
8009d0bc:	e0bffe17 	ldw	r2,-8(fp)
8009d0c0:	10bfffc4 	addi	r2,r2,-1
8009d0c4:	1885883a 	add	r2,r3,r2
8009d0c8:	10800003 	ldbu	r2,0(r2)
8009d0cc:	10803fcc 	andi	r2,r2,255
8009d0d0:	1080201c 	xori	r2,r2,128
8009d0d4:	10bfe004 	addi	r2,r2,-128
8009d0d8:	10800bd8 	cmpnei	r2,r2,47
8009d0dc:	1000031e 	bne	r2,zero,8009d0ec <alt_find_file+0x6c>
    {
      len -= 1;
8009d0e0:	e0bffe17 	ldw	r2,-8(fp)
8009d0e4:	10bfffc4 	addi	r2,r2,-1
8009d0e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8009d0ec:	e0bffe17 	ldw	r2,-8(fp)
8009d0f0:	e0ffff17 	ldw	r3,-4(fp)
8009d0f4:	1885883a 	add	r2,r3,r2
8009d0f8:	10800003 	ldbu	r2,0(r2)
8009d0fc:	10803fcc 	andi	r2,r2,255
8009d100:	1080201c 	xori	r2,r2,128
8009d104:	10bfe004 	addi	r2,r2,-128
8009d108:	10800be0 	cmpeqi	r2,r2,47
8009d10c:	1000081e 	bne	r2,zero,8009d130 <alt_find_file+0xb0>
8009d110:	e0bffe17 	ldw	r2,-8(fp)
8009d114:	e0ffff17 	ldw	r3,-4(fp)
8009d118:	1885883a 	add	r2,r3,r2
8009d11c:	10800003 	ldbu	r2,0(r2)
8009d120:	10803fcc 	andi	r2,r2,255
8009d124:	1080201c 	xori	r2,r2,128
8009d128:	10bfe004 	addi	r2,r2,-128
8009d12c:	10000a1e 	bne	r2,zero,8009d158 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
8009d130:	e0bffd17 	ldw	r2,-12(fp)
8009d134:	10800217 	ldw	r2,8(r2)
8009d138:	e0fffe17 	ldw	r3,-8(fp)
8009d13c:	180d883a 	mov	r6,r3
8009d140:	e17fff17 	ldw	r5,-4(fp)
8009d144:	1009883a 	mov	r4,r2
8009d148:	0082d280 	call	80082d28 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8009d14c:	1000021e 	bne	r2,zero,8009d158 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8009d150:	e0bffd17 	ldw	r2,-12(fp)
8009d154:	00000706 	br	8009d174 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
8009d158:	e0bffd17 	ldw	r2,-12(fp)
8009d15c:	10800017 	ldw	r2,0(r2)
8009d160:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8009d164:	e0fffd17 	ldw	r3,-12(fp)
8009d168:	d0a00804 	addi	r2,gp,-32736
8009d16c:	18bfcc1e 	bne	r3,r2,8009d0a0 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8009d170:	0005883a 	mov	r2,zero
}
8009d174:	e037883a 	mov	sp,fp
8009d178:	dfc00117 	ldw	ra,4(sp)
8009d17c:	df000017 	ldw	fp,0(sp)
8009d180:	dec00204 	addi	sp,sp,8
8009d184:	f800283a 	ret

8009d188 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8009d188:	defffc04 	addi	sp,sp,-16
8009d18c:	df000315 	stw	fp,12(sp)
8009d190:	df000304 	addi	fp,sp,12
8009d194:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8009d198:	00bffa04 	movi	r2,-24
8009d19c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8009d1a0:	e03ffd15 	stw	zero,-12(fp)
8009d1a4:	00001906 	br	8009d20c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
8009d1a8:	00a002b4 	movhi	r2,32778
8009d1ac:	10bcfe04 	addi	r2,r2,-3080
8009d1b0:	e0fffd17 	ldw	r3,-12(fp)
8009d1b4:	18c00324 	muli	r3,r3,12
8009d1b8:	10c5883a 	add	r2,r2,r3
8009d1bc:	10800017 	ldw	r2,0(r2)
8009d1c0:	10000f1e 	bne	r2,zero,8009d200 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
8009d1c4:	00a002b4 	movhi	r2,32778
8009d1c8:	10bcfe04 	addi	r2,r2,-3080
8009d1cc:	e0fffd17 	ldw	r3,-12(fp)
8009d1d0:	18c00324 	muli	r3,r3,12
8009d1d4:	10c5883a 	add	r2,r2,r3
8009d1d8:	e0ffff17 	ldw	r3,-4(fp)
8009d1dc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8009d1e0:	d0e00c17 	ldw	r3,-32720(gp)
8009d1e4:	e0bffd17 	ldw	r2,-12(fp)
8009d1e8:	1880020e 	bge	r3,r2,8009d1f4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
8009d1ec:	e0bffd17 	ldw	r2,-12(fp)
8009d1f0:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
8009d1f4:	e0bffd17 	ldw	r2,-12(fp)
8009d1f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
8009d1fc:	00000606 	br	8009d218 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8009d200:	e0bffd17 	ldw	r2,-12(fp)
8009d204:	10800044 	addi	r2,r2,1
8009d208:	e0bffd15 	stw	r2,-12(fp)
8009d20c:	e0bffd17 	ldw	r2,-12(fp)
8009d210:	10800810 	cmplti	r2,r2,32
8009d214:	103fe41e 	bne	r2,zero,8009d1a8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8009d218:	e0bffe17 	ldw	r2,-8(fp)
}
8009d21c:	e037883a 	mov	sp,fp
8009d220:	df000017 	ldw	fp,0(sp)
8009d224:	dec00104 	addi	sp,sp,4
8009d228:	f800283a 	ret

8009d22c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
8009d22c:	defffb04 	addi	sp,sp,-20
8009d230:	df000415 	stw	fp,16(sp)
8009d234:	df000404 	addi	fp,sp,16
8009d238:	e13ffe15 	stw	r4,-8(fp)
8009d23c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
8009d240:	e0bfff17 	ldw	r2,-4(fp)
8009d244:	10840070 	cmpltui	r2,r2,4097
8009d248:	1000021e 	bne	r2,zero,8009d254 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
8009d24c:	00840004 	movi	r2,4096
8009d250:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
8009d254:	e0fffe17 	ldw	r3,-8(fp)
8009d258:	e0bfff17 	ldw	r2,-4(fp)
8009d25c:	1885883a 	add	r2,r3,r2
8009d260:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
8009d264:	e0bffe17 	ldw	r2,-8(fp)
8009d268:	e0bffc15 	stw	r2,-16(fp)
8009d26c:	00000506 	br	8009d284 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
8009d270:	e0bffc17 	ldw	r2,-16(fp)
8009d274:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
8009d278:	e0bffc17 	ldw	r2,-16(fp)
8009d27c:	10800804 	addi	r2,r2,32
8009d280:	e0bffc15 	stw	r2,-16(fp)
8009d284:	e0fffc17 	ldw	r3,-16(fp)
8009d288:	e0bffd17 	ldw	r2,-12(fp)
8009d28c:	18bff836 	bltu	r3,r2,8009d270 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
8009d290:	e0bffe17 	ldw	r2,-8(fp)
8009d294:	108007cc 	andi	r2,r2,31
8009d298:	10000226 	beq	r2,zero,8009d2a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
8009d29c:	e0bffc17 	ldw	r2,-16(fp)
8009d2a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
8009d2a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
8009d2a8:	0001883a 	nop
8009d2ac:	e037883a 	mov	sp,fp
8009d2b0:	df000017 	ldw	fp,0(sp)
8009d2b4:	dec00104 	addi	sp,sp,4
8009d2b8:	f800283a 	ret

8009d2bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8009d2bc:	defffe04 	addi	sp,sp,-8
8009d2c0:	df000115 	stw	fp,4(sp)
8009d2c4:	df000104 	addi	fp,sp,4
8009d2c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8009d2cc:	e0bfff17 	ldw	r2,-4(fp)
8009d2d0:	10bffe84 	addi	r2,r2,-6
8009d2d4:	10c00428 	cmpgeui	r3,r2,16
8009d2d8:	18001a1e 	bne	r3,zero,8009d344 <alt_exception_cause_generated_bad_addr+0x88>
8009d2dc:	100690ba 	slli	r3,r2,2
8009d2e0:	00a002b4 	movhi	r2,32778
8009d2e4:	10b4bd04 	addi	r2,r2,-11532
8009d2e8:	1885883a 	add	r2,r3,r2
8009d2ec:	10800017 	ldw	r2,0(r2)
8009d2f0:	1000683a 	jmp	r2
8009d2f4:	8009d334 	orhi	zero,r16,10060
8009d2f8:	8009d334 	orhi	zero,r16,10060
8009d2fc:	8009d344 	addi	zero,r16,10061
8009d300:	8009d344 	addi	zero,r16,10061
8009d304:	8009d344 	addi	zero,r16,10061
8009d308:	8009d334 	orhi	zero,r16,10060
8009d30c:	8009d33c 	xorhi	zero,r16,10060
8009d310:	8009d344 	addi	zero,r16,10061
8009d314:	8009d334 	orhi	zero,r16,10060
8009d318:	8009d334 	orhi	zero,r16,10060
8009d31c:	8009d344 	addi	zero,r16,10061
8009d320:	8009d334 	orhi	zero,r16,10060
8009d324:	8009d33c 	xorhi	zero,r16,10060
8009d328:	8009d344 	addi	zero,r16,10061
8009d32c:	8009d344 	addi	zero,r16,10061
8009d330:	8009d334 	orhi	zero,r16,10060
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8009d334:	00800044 	movi	r2,1
8009d338:	00000306 	br	8009d348 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8009d33c:	0005883a 	mov	r2,zero
8009d340:	00000106 	br	8009d348 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
8009d344:	0005883a 	mov	r2,zero
  }
}
8009d348:	e037883a 	mov	sp,fp
8009d34c:	df000017 	ldw	fp,0(sp)
8009d350:	dec00104 	addi	sp,sp,4
8009d354:	f800283a 	ret

8009d358 <atexit>:
8009d358:	200b883a 	mov	r5,r4
8009d35c:	000f883a 	mov	r7,zero
8009d360:	000d883a 	mov	r6,zero
8009d364:	0009883a 	mov	r4,zero
8009d368:	009d3a41 	jmpi	8009d3a4 <__register_exitproc>

8009d36c <exit>:
8009d36c:	defffe04 	addi	sp,sp,-8
8009d370:	000b883a 	mov	r5,zero
8009d374:	dc000015 	stw	r16,0(sp)
8009d378:	dfc00115 	stw	ra,4(sp)
8009d37c:	2021883a 	mov	r16,r4
8009d380:	009d4bc0 	call	8009d4bc <__call_exitprocs>
8009d384:	00a002b4 	movhi	r2,32778
8009d388:	1081be04 	addi	r2,r2,1784
8009d38c:	11000017 	ldw	r4,0(r2)
8009d390:	20800f17 	ldw	r2,60(r4)
8009d394:	10000126 	beq	r2,zero,8009d39c <exit+0x30>
8009d398:	103ee83a 	callr	r2
8009d39c:	8009883a 	mov	r4,r16
8009d3a0:	009d63c0 	call	8009d63c <_exit>

8009d3a4 <__register_exitproc>:
8009d3a4:	defffa04 	addi	sp,sp,-24
8009d3a8:	dc000315 	stw	r16,12(sp)
8009d3ac:	042002b4 	movhi	r16,32778
8009d3b0:	8401be04 	addi	r16,r16,1784
8009d3b4:	80c00017 	ldw	r3,0(r16)
8009d3b8:	dc400415 	stw	r17,16(sp)
8009d3bc:	dfc00515 	stw	ra,20(sp)
8009d3c0:	18805217 	ldw	r2,328(r3)
8009d3c4:	2023883a 	mov	r17,r4
8009d3c8:	10003726 	beq	r2,zero,8009d4a8 <__register_exitproc+0x104>
8009d3cc:	10c00117 	ldw	r3,4(r2)
8009d3d0:	010007c4 	movi	r4,31
8009d3d4:	20c00e16 	blt	r4,r3,8009d410 <__register_exitproc+0x6c>
8009d3d8:	1a000044 	addi	r8,r3,1
8009d3dc:	8800221e 	bne	r17,zero,8009d468 <__register_exitproc+0xc4>
8009d3e0:	18c00084 	addi	r3,r3,2
8009d3e4:	18c7883a 	add	r3,r3,r3
8009d3e8:	18c7883a 	add	r3,r3,r3
8009d3ec:	12000115 	stw	r8,4(r2)
8009d3f0:	10c7883a 	add	r3,r2,r3
8009d3f4:	19400015 	stw	r5,0(r3)
8009d3f8:	0005883a 	mov	r2,zero
8009d3fc:	dfc00517 	ldw	ra,20(sp)
8009d400:	dc400417 	ldw	r17,16(sp)
8009d404:	dc000317 	ldw	r16,12(sp)
8009d408:	dec00604 	addi	sp,sp,24
8009d40c:	f800283a 	ret
8009d410:	00a00234 	movhi	r2,32776
8009d414:	10893d04 	addi	r2,r2,9460
8009d418:	10002626 	beq	r2,zero,8009d4b4 <__register_exitproc+0x110>
8009d41c:	01006404 	movi	r4,400
8009d420:	d9400015 	stw	r5,0(sp)
8009d424:	d9800115 	stw	r6,4(sp)
8009d428:	d9c00215 	stw	r7,8(sp)
8009d42c:	00824f40 	call	800824f4 <malloc>
8009d430:	d9400017 	ldw	r5,0(sp)
8009d434:	d9800117 	ldw	r6,4(sp)
8009d438:	d9c00217 	ldw	r7,8(sp)
8009d43c:	10001d26 	beq	r2,zero,8009d4b4 <__register_exitproc+0x110>
8009d440:	81000017 	ldw	r4,0(r16)
8009d444:	10000115 	stw	zero,4(r2)
8009d448:	02000044 	movi	r8,1
8009d44c:	22405217 	ldw	r9,328(r4)
8009d450:	0007883a 	mov	r3,zero
8009d454:	12400015 	stw	r9,0(r2)
8009d458:	20805215 	stw	r2,328(r4)
8009d45c:	10006215 	stw	zero,392(r2)
8009d460:	10006315 	stw	zero,396(r2)
8009d464:	883fde26 	beq	r17,zero,8009d3e0 <__register_exitproc+0x3c>
8009d468:	18c9883a 	add	r4,r3,r3
8009d46c:	2109883a 	add	r4,r4,r4
8009d470:	1109883a 	add	r4,r2,r4
8009d474:	21802215 	stw	r6,136(r4)
8009d478:	01800044 	movi	r6,1
8009d47c:	12406217 	ldw	r9,392(r2)
8009d480:	30cc983a 	sll	r6,r6,r3
8009d484:	4992b03a 	or	r9,r9,r6
8009d488:	12406215 	stw	r9,392(r2)
8009d48c:	21c04215 	stw	r7,264(r4)
8009d490:	01000084 	movi	r4,2
8009d494:	893fd21e 	bne	r17,r4,8009d3e0 <__register_exitproc+0x3c>
8009d498:	11006317 	ldw	r4,396(r2)
8009d49c:	218cb03a 	or	r6,r4,r6
8009d4a0:	11806315 	stw	r6,396(r2)
8009d4a4:	003fce06 	br	8009d3e0 <__register_exitproc+0x3c>
8009d4a8:	18805304 	addi	r2,r3,332
8009d4ac:	18805215 	stw	r2,328(r3)
8009d4b0:	003fc606 	br	8009d3cc <__register_exitproc+0x28>
8009d4b4:	00bfffc4 	movi	r2,-1
8009d4b8:	003fd006 	br	8009d3fc <__register_exitproc+0x58>

8009d4bc <__call_exitprocs>:
8009d4bc:	defff504 	addi	sp,sp,-44
8009d4c0:	df000915 	stw	fp,36(sp)
8009d4c4:	dd400615 	stw	r21,24(sp)
8009d4c8:	dc800315 	stw	r18,12(sp)
8009d4cc:	dfc00a15 	stw	ra,40(sp)
8009d4d0:	ddc00815 	stw	r23,32(sp)
8009d4d4:	dd800715 	stw	r22,28(sp)
8009d4d8:	dd000515 	stw	r20,20(sp)
8009d4dc:	dcc00415 	stw	r19,16(sp)
8009d4e0:	dc400215 	stw	r17,8(sp)
8009d4e4:	dc000115 	stw	r16,4(sp)
8009d4e8:	d9000015 	stw	r4,0(sp)
8009d4ec:	2839883a 	mov	fp,r5
8009d4f0:	04800044 	movi	r18,1
8009d4f4:	057fffc4 	movi	r21,-1
8009d4f8:	00a002b4 	movhi	r2,32778
8009d4fc:	1081be04 	addi	r2,r2,1784
8009d500:	12000017 	ldw	r8,0(r2)
8009d504:	45005217 	ldw	r20,328(r8)
8009d508:	44c05204 	addi	r19,r8,328
8009d50c:	a0001c26 	beq	r20,zero,8009d580 <__call_exitprocs+0xc4>
8009d510:	a0800117 	ldw	r2,4(r20)
8009d514:	15ffffc4 	addi	r23,r2,-1
8009d518:	b8000d16 	blt	r23,zero,8009d550 <__call_exitprocs+0x94>
8009d51c:	14000044 	addi	r16,r2,1
8009d520:	8421883a 	add	r16,r16,r16
8009d524:	8421883a 	add	r16,r16,r16
8009d528:	84402004 	addi	r17,r16,128
8009d52c:	a463883a 	add	r17,r20,r17
8009d530:	a421883a 	add	r16,r20,r16
8009d534:	e0001e26 	beq	fp,zero,8009d5b0 <__call_exitprocs+0xf4>
8009d538:	80804017 	ldw	r2,256(r16)
8009d53c:	e0801c26 	beq	fp,r2,8009d5b0 <__call_exitprocs+0xf4>
8009d540:	bdffffc4 	addi	r23,r23,-1
8009d544:	843fff04 	addi	r16,r16,-4
8009d548:	8c7fff04 	addi	r17,r17,-4
8009d54c:	bd7ff91e 	bne	r23,r21,8009d534 <__call_exitprocs+0x78>
8009d550:	00a00234 	movhi	r2,32776
8009d554:	10894204 	addi	r2,r2,9480
8009d558:	10000926 	beq	r2,zero,8009d580 <__call_exitprocs+0xc4>
8009d55c:	a0800117 	ldw	r2,4(r20)
8009d560:	1000301e 	bne	r2,zero,8009d624 <__call_exitprocs+0x168>
8009d564:	a0800017 	ldw	r2,0(r20)
8009d568:	10003226 	beq	r2,zero,8009d634 <__call_exitprocs+0x178>
8009d56c:	a009883a 	mov	r4,r20
8009d570:	98800015 	stw	r2,0(r19)
8009d574:	00825080 	call	80082508 <free>
8009d578:	9d000017 	ldw	r20,0(r19)
8009d57c:	a03fe41e 	bne	r20,zero,8009d510 <__call_exitprocs+0x54>
8009d580:	dfc00a17 	ldw	ra,40(sp)
8009d584:	df000917 	ldw	fp,36(sp)
8009d588:	ddc00817 	ldw	r23,32(sp)
8009d58c:	dd800717 	ldw	r22,28(sp)
8009d590:	dd400617 	ldw	r21,24(sp)
8009d594:	dd000517 	ldw	r20,20(sp)
8009d598:	dcc00417 	ldw	r19,16(sp)
8009d59c:	dc800317 	ldw	r18,12(sp)
8009d5a0:	dc400217 	ldw	r17,8(sp)
8009d5a4:	dc000117 	ldw	r16,4(sp)
8009d5a8:	dec00b04 	addi	sp,sp,44
8009d5ac:	f800283a 	ret
8009d5b0:	a0800117 	ldw	r2,4(r20)
8009d5b4:	80c00017 	ldw	r3,0(r16)
8009d5b8:	10bfffc4 	addi	r2,r2,-1
8009d5bc:	15c01426 	beq	r2,r23,8009d610 <__call_exitprocs+0x154>
8009d5c0:	80000015 	stw	zero,0(r16)
8009d5c4:	183fde26 	beq	r3,zero,8009d540 <__call_exitprocs+0x84>
8009d5c8:	95c8983a 	sll	r4,r18,r23
8009d5cc:	a0806217 	ldw	r2,392(r20)
8009d5d0:	a5800117 	ldw	r22,4(r20)
8009d5d4:	2084703a 	and	r2,r4,r2
8009d5d8:	10000b26 	beq	r2,zero,8009d608 <__call_exitprocs+0x14c>
8009d5dc:	a0806317 	ldw	r2,396(r20)
8009d5e0:	2088703a 	and	r4,r4,r2
8009d5e4:	20000c1e 	bne	r4,zero,8009d618 <__call_exitprocs+0x15c>
8009d5e8:	89400017 	ldw	r5,0(r17)
8009d5ec:	d9000017 	ldw	r4,0(sp)
8009d5f0:	183ee83a 	callr	r3
8009d5f4:	a0800117 	ldw	r2,4(r20)
8009d5f8:	15bfbf1e 	bne	r2,r22,8009d4f8 <__call_exitprocs+0x3c>
8009d5fc:	98800017 	ldw	r2,0(r19)
8009d600:	153fcf26 	beq	r2,r20,8009d540 <__call_exitprocs+0x84>
8009d604:	003fbc06 	br	8009d4f8 <__call_exitprocs+0x3c>
8009d608:	183ee83a 	callr	r3
8009d60c:	003ff906 	br	8009d5f4 <__call_exitprocs+0x138>
8009d610:	a5c00115 	stw	r23,4(r20)
8009d614:	003feb06 	br	8009d5c4 <__call_exitprocs+0x108>
8009d618:	89000017 	ldw	r4,0(r17)
8009d61c:	183ee83a 	callr	r3
8009d620:	003ff406 	br	8009d5f4 <__call_exitprocs+0x138>
8009d624:	a0800017 	ldw	r2,0(r20)
8009d628:	a027883a 	mov	r19,r20
8009d62c:	1029883a 	mov	r20,r2
8009d630:	003fb606 	br	8009d50c <__call_exitprocs+0x50>
8009d634:	0005883a 	mov	r2,zero
8009d638:	003ffb06 	br	8009d628 <__call_exitprocs+0x16c>

8009d63c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8009d63c:	defffd04 	addi	sp,sp,-12
8009d640:	df000215 	stw	fp,8(sp)
8009d644:	df000204 	addi	fp,sp,8
8009d648:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8009d64c:	0001883a 	nop
8009d650:	e0bfff17 	ldw	r2,-4(fp)
8009d654:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8009d658:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8009d65c:	10000226 	beq	r2,zero,8009d668 <_exit+0x2c>
    ALT_SIM_FAIL();
8009d660:	002af070 	cmpltui	zero,zero,43969
8009d664:	00000106 	br	8009d66c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8009d668:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8009d66c:	003fff06 	br	8009d66c <_exit+0x30>
