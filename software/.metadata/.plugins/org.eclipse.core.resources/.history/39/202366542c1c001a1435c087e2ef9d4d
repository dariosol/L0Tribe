#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <io.h>
#include <time.h>
#include "altera_msgdma_descriptor_regs.h"
#include "altera_msgdma_csr_regs.h"
#include "altera_msgdma_response_regs.h"
#include "altera_msgdma.h"
#include "sys/alt_irq.h"
#include "alt_types.h"
#include <sys/alt_alarm.h>
#include "sys/alt_cache.h"
#include "sys/alt_errno.h"

alt_msgdma_standard_descriptor a_descriptor;
alt_msgdma_standard_descriptor * a_descriptor_ptr = &a_descriptor;
alt_msgdma_dev dev;
alt_msgdma_dev *dev_ptr = &dev;
alt_u32 control = 0;
alt_u32 rd_addr = 0, len=1024;
alt_u32 * rd_adr_p = 0x0;
alt_u32 * ram_access_ptr = &rd_addr;

////////////////////////////////////////
alt_msgdma_standard_descriptor a_descriptor_wr;
alt_msgdma_standard_descriptor * a_descriptor_ptr_wr = &a_descriptor_wr;
alt_msgdma_dev dev_wr;
alt_msgdma_dev *dev_ptr_wr = &dev_wr;
alt_u32 control_wr = 0;
alt_u32 wr_addr = 0, len_wr=256;
alt_u32 * wr_adr_p = 0x0;
alt_u32 * ram_access_ptr_wr = &wr_adr_p;

alt_u32 status;
int main()
{


	 ///////////////////////////
	  //Test RAM INITIALIZATION:
	  printf("Starting RAM INIT\n");
	  ///////////////////////////
	  alt_u32 SOB = alt_nticks() * alt_ticks_per_second();
	  alt_u32 EOB = alt_nticks() * alt_ticks_per_second();

	  IOWR(CTRL_SIG_BASE,0,1); //SOB
	  printf("%lu \n", SOB);
	  //wait 5 second for PHY initialisation
	  while(EOB-SOB<5e6) {
	 	  	  EOB = alt_nticks() * alt_ticks_per_second();
	       }
	  printf("%lu \n", EOB);
	  IOWR(CTRL_SIG_BASE,0,0); //EOB

	  dev_ptr_wr = alt_msgdma_open(ETH_DMA_CSR_NAME);

	  while(EOB-SOB<10e6){
	  if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
	  alt_dcache_flush_all();
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  wr_adr_p+=64;
	  EOB = alt_nticks() * alt_ticks_per_second();
    }
	if(0 == status)
	  	          {
	  		  	  	  printf("transfer complete, status %ld\n",status);
	  	          }
	  	          else if(-EPERM == status)
	  	          {
	  	              printf("operation not permitted due to descriptor type conflict\n");
	  	          }
	  	          else if (-ETIME == status)
	  	          {
	  	              printf("Time out and skipping the looping after 5 msec\n");
	  	          }
	  	          else
	  	          {
	  	              printf("Errors flag = %ld\n", status);
	  	          }
	  	      }

  //Read back what I have written
	  unsigned int write;

 	  for (unsigned int i = 0; i < 1024*2;i+=4)
 	          {
 	            write = IORD_32DIRECT(DDR2_RAM_BASE, i);

 	            printf("%x: %x\n",i,write);
 	          }
 	      printf("UDP download to RAM success\n");

 	while(EOB-SOB<11e6){
 	  	 EOB = alt_nticks() * alt_ticks_per_second();
 	     }

  IOWR(CTRL_SIG_BASE,0,1); //SOB
  printf("Initializing DATA transfer...\n");
  printf("%x\n",rd_adr_p);
  /*alt_u32 szData[4];
  for(int i = 0; i<4;i++){
	  szData[i]= 0xFFFFFFFF & i;
	  printf("%ld\n",szData[i]);
  }
  alt_u32 nAccessLen = sizeof(szData);
  memcpy(ram_access_ptr, szData, nAccessLen);*/
  unsigned int nBytes = 64;//DDR2_SPAN;
  unsigned int offset;
  unsigned int read;
 /*
  for (LTS = 0x0, offset = 0; offset < nBytes; LTS++, offset+=4)
      {

    	IOWR_8DIRECT(DDR2_RAM_BASE, offset, finetime);
      	IOWR_8DIRECT(DDR2_RAM_BASE, offset+1, LTS);
      	IOWR_16DIRECT(DDR2_RAM_BASE, offset+2, primID);
      }
  alt_dcache_flush_all();
  */
  /*
  for (offset = 0; offset < nBytes;offset+=4)
        {
          read = IORD_32DIRECT(DDR2_RAM_BASE, offset);
          printf("%x: %x\n",offset,read);
        }
    printf("ram has been primed\n");
*/

  dev_ptr = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);

  alt_u32 startpacket = alt_nticks() * alt_ticks_per_second();
  alt_u32 endpacket = alt_nticks() * alt_ticks_per_second();

  printf("SOB, time: %lu \n",alt_nticks()* alt_ticks_per_second());
  IOWR(CTRL_SIG_BASE,0,1);
  len=1024;
  float pippo=0;

  //-----------------MAIN SEND LOOP AFTER THIS LINE----------------------------
  int g,addr1,addr2;
  int iaddr=0;
  alt_u8 ISR_transfer_flag = 0;
  alt_u8 addr_update = 1;
  int addr1_le=0;
  int addr2_le=0;
  addr2 = IORD_32DIRECT(DDR2_RAM_BASE,iaddr);
  while(1){
	  if(addr_update){
		  addr1=addr2;
		  iaddr += 4;
		  addr2=IORD_32DIRECT(DDR2_RAM_BASE,iaddr);
		  g=addr2-addr1;
		  printf("ADDR: %d\tlen: %d\n",addr1,g);
		  if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr,a_descriptor_ptr,addr1,g,control)==-EINVAL) printf("invalid arg\n");
		  addr_update = 0;
	  }
	  if(ISR_transfer_flag){
		  printf("ISR Send packet\n");
		  IOWR_8DIRECT(PRIMITIVEINPACKET0_BASE,0,g/8);
		  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr,a_descriptor_ptr);
		  ISR_transfer_flag = 0;
		  addr_update = 1;
	  }
  }
  /*
  for (int i=0;i<2048*16;i+=len) {
  //for (int i=0;i<40;i+=1) {
  startpacket = alt_nticks() * alt_ticks_per_second();
  endpacket = alt_nticks() * alt_ticks_per_second();
  addr2 = IORD_32DIRECT(DDR2_RAM_BASE, iaddr);
  addr1 = IORD_32DIRECT(DDR2_RAM_BASE, iaddr+4);

  //printf("%x - %x\n",addr2,addr1);
  g = addr2-addr1;
  //printf("packet len: %d\n",g);
  IOWR_8DIRECT(PRIMITIVEINPACKET0_BASE,0,len/8);
  if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr,a_descriptor_ptr,rd_adr_p,len,control)==-EINVAL) printf("invalid arg\n");
   //if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr,a_descriptor_ptr,addr1,g,control)==-EINVAL) printf("invalid arg\n");
  //printf("control: %ld",control);
  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr,a_descriptor_ptr); // updated to async to enhance speed

  //a_descriptor_ptr+=len;
  rd_adr_p +=len/4;
  iaddr+=4;
  while(1) {
 	  if(IORD(PILOT_SIG_BASE,0) !=0 || IORD(PILOT_SIG_BASE,1) !=0 || IORD(PILOT_SIG_BASE,2) !=0 || IORD(PILOT_SIG_BASE,3) !=0) {
 		break;
 	  }
   }

  while(endpacket-startpacket<6){
  	  endpacket = alt_nticks() * alt_ticks_per_second();
    }

  //printf("%d) time after dma: %lu \n",i/len,alt_nticks()* alt_ticks_per_second());
  }
*/


  while(EOB-SOB<16e6){
	  EOB = alt_nticks() * alt_ticks_per_second();
  }

printf("pippo %f\n",pippo);
  IOWR(CTRL_SIG_BASE,0,0);
  printf("EOB sent\n %lu seconds\n",(EOB-SOB));
  return 0;
}
