
TestBench_FW.elf:     file format elf32-littlenios2
TestBench_FW.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80080244

Program Header:
    LOAD off    0x00001000 vaddr 0x80080000 paddr 0x80080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x80080020 paddr 0x80080020 align 2**12
         filesz 0x00016e4c memsz 0x00016e4c flags r-x
    LOAD off    0x00017e6c vaddr 0x80096e6c paddr 0x80098abc align 2**12
         filesz 0x00001c50 memsz 0x00001c50 flags rw-
    LOAD off    0x0001a70c vaddr 0x8009a70c paddr 0x8009a70c align 2**12
         filesz 0x00000000 memsz 0x00000304 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  80080000  80080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80080020  80080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016178  80080244  80080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ab0  800963bc  800963bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c50  80096e6c  80098abc  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000304  8009a70c  8009a70c  0001a70c  2**4
                  ALLOC, SMALL_DATA
  6 .ddr2_ram     00000000  00000000  00000000  00019abc  2**0
                  CONTENTS
  7 .ddr2_ram_1   00000000  40000000  40000000  00019abc  2**0
                  CONTENTS
  8 .system_ram   00000000  8009aa10  8009aa10  00019abc  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00019abc  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001090  00000000  00000000  00019ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002ca2b  00000000  00000000  0001ab70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000ac57  00000000  00000000  0004759b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e657  00000000  00000000  000521f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002aa8  00000000  00000000  0006084c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000047f8  00000000  00000000  000632f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001cdd8  00000000  00000000  00067aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000848c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001b90  00000000  00000000  00084928  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0008a5ee  2**0
                  CONTENTS, READONLY
 20 .cpu          00000008  00000000  00000000  0008a5f1  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0008a5f9  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0008a5fa  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0008a5fb  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0008a5ff  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  0008a603  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  0008a607  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  0008a613  2**0
                  CONTENTS, READONLY
 28 .jdi          0000a553  00000000  00000000  0008a642  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     001b85f3  00000000  00000000  00094b95  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80080000 l    d  .entry	00000000 .entry
80080020 l    d  .exceptions	00000000 .exceptions
80080244 l    d  .text	00000000 .text
800963bc l    d  .rodata	00000000 .rodata
80096e6c l    d  .rwdata	00000000 .rwdata
8009a70c l    d  .bss	00000000 .bss
00000000 l    d  .ddr2_ram	00000000 .ddr2_ram
40000000 l    d  .ddr2_ram_1	00000000 .ddr2_ram_1
8009aa10 l    d  .system_ram	00000000 .system_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testbench_ls_bsp//obj/HAL/src/crt0.o
8008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
80080290 l     F .text	0000005c ISR_transfer_callback
00000000 l    df *ABS*	00000000 terasic_debug.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
80096e78 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
80096a02 l     O .rodata	00000010 zeroes.4389
80096a12 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
80096a22 l     O .rodata	00000010 zeroes.4404
80086494 l     F .text	000000bc __sbprintf
80096a32 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
800867c8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
800882f8 l     F .text	00000008 __fp_unlock
8008830c l     F .text	0000019c __sinit.part.1
800884a8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
800972bc l     O .rwdata	00000020 lc_ctype_charset
8009729c l     O .rwdata	00000020 lc_message_charset
800972dc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
80096a60 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
8008b5c4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
80096b94 l     O .rodata	00000010 blanks.4332
80096b84 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
8008cea0 l     F .text	000000fc __sprint_r.part.0
80096bb4 l     O .rodata	00000010 blanks.4348
80096ba4 l     O .rodata	00000010 zeroes.4349
8008e42c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
800917e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
800918f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
80091920 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
80091cac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
80091d8c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
80091e78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
8009204c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
80098aa8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
8009243c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
80092570 l     F .text	00000034 alt_dev_reg
800978c4 l     O .rwdata	00001060 jtag
80098924 l     O .rwdata	00000060 dma_fifo_subsystem_1_dma
80098984 l     O .rwdata	00000060 dma_fifo_susbystem_dma
800989e4 l     O .rwdata	00000060 from_ETH_to_DDR_ETH_DMA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
800928e4 l     F .text	0000020c altera_avalon_jtag_uart_irq
80092af0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
80093128 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
8009321c l     F .text	0000003c alt_get_errno
80093258 l     F .text	00000094 alt_msgdma_write_standard_descriptor
800932ec l     F .text	0000012c alt_msgdma_write_extended_descriptor
80093418 l     F .text	00000184 alt_msgdma_irq
8009359c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
80093628 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8009377c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
80093a4c l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
80094094 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
80094138 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
80095364 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
80095664 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
800957a4 l     F .text	0000003c alt_get_errno
800957e0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8009a774 g     O .bss	00000004 alt_instruction_exception_handler
80094fa8 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8008aee8 g     F .text	00000074 _mprec_log10
8009a71c g     O .bss	00000004 entry
80098a58 g     O .rwdata	00000004 wr_addr
8008afd4 g     F .text	0000008c __any_on
8008e9c8 g     F .text	00000054 _isatty_r
80096a6c g     O .rodata	00000028 __mprec_tinytens
80091f88 g     F .text	0000007c alt_main
80081df0 g     F .text	000000c0 _puts_r
8009a910 g     O .bss	00000100 alt_irq
8008ea1c g     F .text	00000060 _lseek_r
80098abc g       *ABS*	00000000 __flash_rwdata_start
80090c14 g     F .text	00000088 .hidden __eqdf2
80093e74 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8009aa10 g       *ABS*	00000000 __alt_heap_start
80081db4 g     F .text	0000003c printf
8009a70c g     O .bss	00000004 control
8008ec34 g     F .text	0000009c _wcrtomb_r
8008b954 g     F .text	0000005c __sseek
80088648 g     F .text	00000010 __sinit
8008eadc g     F .text	00000140 __swbuf_r
8009a7a0 g     O .bss	000000c0 dev
80089110 g     F .text	0000007c _setlocale_r
800884b0 g     F .text	00000068 __sfmoreglue
80092028 g     F .text	00000024 __malloc_unlock
800802ec g     F .text	00000090 GetInputString
80089de0 g     F .text	0000015c memmove
8009a710 g     O .bss	00000004 control_wr
80088630 g     F .text	00000018 _cleanup
8008a064 g     F .text	000000a8 _Balloc
80093dc4 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
80098a64 g     O .rwdata	00000004 ram_access_ptr_wr
8009a720 g     O .bss	00000008 dev_ptr
8008138c g     F .text	000000dc .hidden __gtdf2
80095c60 g     F .text	00000024 altera_nios2_gen2_irq_init
80080000 g     F .entry	0000001c __reset
80080020 g       *ABS*	00000000 __flash_exceptions_start
8008e96c g     F .text	0000005c _fstat_r
8009a758 g     O .bss	00000004 errno
80081f38 g     F .text	00000014 __srget
8008b8d0 g     F .text	00000008 __seofread
8008bc64 g     F .text	0000123c ___svfiprintf_internal_r
8009a764 g     O .bss	00000004 alt_argv
800a0a44 g       *ABS*	00000000 _gp
80098a5c g     O .rwdata	00000004 len_wr
800948e4 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
80097744 g     O .rwdata	00000180 alt_fd_list
80081c8c g     F .text	00000070 _getc_r
80081cfc g     F .text	00000088 getc
80095504 g     F .text	00000090 alt_find_dev
80089c98 g     F .text	00000148 memcpy
8009a728 g     O .bss	00000008 rd_addr
80098a50 g     O .rwdata	00000004 a_descriptor_ptr_wr
80088300 g     F .text	0000000c _cleanup_r
8009170c g     F .text	000000dc .hidden __floatsidf
80095728 g     F .text	0000007c alt_io_redirect
80090c9c g     F .text	000000f4 .hidden __ltdf2
800963bc g       *ABS*	00000000 __DTOR_END__
80094d04 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
80094fe4 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8009a730 g     O .bss	00000008 a_descriptor_ptr
80094f54 g     F .text	00000054 alt_msgdma_register_callback
80081eb0 g     F .text	00000014 puts
800955c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8008b7b4 g     F .text	00000074 __fpclassifyd
8008ae44 g     F .text	000000a4 __ratio
8008e410 g     F .text	0000001c __vfiprintf_internal
80098a6c g     O .rwdata	00000001 detectorUnderInit
80092ce8 g     F .text	0000021c altera_avalon_jtag_uart_read
800945c4 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
80081d84 g     F .text	00000030 _printf_r
8008f9c4 g     F .text	00000064 .hidden __udivsi3
80091ce8 g     F .text	000000a4 isatty
80096abc g     O .rodata	000000c8 __mprec_tens
8008918c g     F .text	0000000c __locale_charset
80086640 g     F .text	00000034 vsnprintf
8009a718 g     O .bss	00000004 ISR_input_val
80095e30 g     F .text	00000090 alt_icache_flush
8009a754 g     O .bss	00000004 __malloc_top_pad
80098a7c g     O .rwdata	00000004 __mb_cur_max
800891bc g     F .text	0000000c _localeconv_r
8008a470 g     F .text	0000003c __i2b
80088acc g     F .text	000004bc __sfvwrite_r
8008b828 g     F .text	00000054 _sbrk_r
8008ea7c g     F .text	00000060 _read_r
80098a9c g     O .rwdata	00000004 alt_max_fd
8008e660 g     F .text	000000f0 _fclose_r
800882c8 g     F .text	00000030 fflush
8009a750 g     O .bss	00000004 __malloc_max_sbrked_mem
8008fa80 g     F .text	000008ac .hidden __adddf3
8008abec g     F .text	0000010c __b2d
80094324 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8008f394 g     F .text	00000538 .hidden __umoddi3
80091eb4 g     F .text	000000d4 lseek
80098a74 g     O .rwdata	00000004 _global_impure_ptr
8008b060 g     F .text	00000564 _realloc_r
8009aa10 g       *ABS*	00000000 __bss_end
80091bbc g     F .text	000000f0 alt_iic_isr_register
80092334 g     F .text	00000108 alt_tick
80094de8 g     F .text	0000016c alt_msgdma_init
8008ee1c g     F .text	00000578 .hidden __udivdi3
8008e8c8 g     F .text	00000024 _fputwc_r
80096a94 g     O .rodata	00000028 __mprec_bigtens
8008a254 g     F .text	00000104 __s2b
80081b80 g     F .text	000000a8 .hidden __floatunsidf
8008a92c g     F .text	00000060 __mcmp
8009505c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
8009a860 g     O .bss	00000010 a_descriptor_wr
80088668 g     F .text	00000018 __fp_lock_all
80091b70 g     F .text	0000004c alt_ic_irq_enabled
80092298 g     F .text	0000009c alt_alarm_stop
8009a75c g     O .bss	00000004 alt_irq_active
80098a70 g     O .rwdata	00000004 ISR_input_ptr
800800fc g     F .exceptions	000000d4 alt_irq_handler
8009771c g     O .rwdata	00000028 alt_dev_null
80093f5c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
80094c78 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
80080000 g       *ABS*	00000000 __alt_mem_system_ram
8009531c g     F .text	00000048 alt_dcache_flush_all
8008a358 g     F .text	00000068 __hi0bits
8009168c g     F .text	00000080 .hidden __fixdfsi
80098abc g       *ABS*	00000000 __ram_rwdata_end
80098a94 g     O .rwdata	00000008 alt_dev_list
80092478 g     F .text	000000f8 write
80095f88 g     F .text	000000a0 _putc_r
80096e6c g       *ABS*	00000000 __ram_rodata_end
8009195c g     F .text	000000b0 fstat
80090c9c g     F .text	000000f4 .hidden __ledf2
80081208 g     F .text	0000006c myprintf
8008a6a4 g     F .text	00000140 __pow5mult
8008cfb4 g     F .text	0000145c ___vfiprintf_internal_r
8009a748 g     O .bss	00000004 __nlocale_changed
8008fa28 g     F .text	00000058 .hidden __umodsi3
8009437c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8009aa10 g       *ABS*	00000000 end
80092824 g     F .text	000000c0 altera_avalon_jtag_uart_init
800801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
800963bc g       *ABS*	00000000 __CTOR_LIST__
800fd000 g       *ABS*	00000000 __alt_stack_pointer
800931a0 g     F .text	0000007c alt_avalon_timer_sc_init
80081c28 g     F .text	00000064 .hidden __clzsi2
80092f04 g     F .text	00000224 altera_avalon_jtag_uart_write
80088658 g     F .text	00000004 __sfp_lock_acquire
80089bb4 g     F .text	000000e4 memchr
80084280 g     F .text	000021f8 ___vfprintf_internal_r
80081f4c g     F .text	00000058 _sprintf_r
800887bc g     F .text	00000310 _free_r
800959f8 g     F .text	0000022c alt_printf
80096e6c g     O .rwdata	0000000c addressRAM0
80089198 g     F .text	00000010 __locale_mb_cur_max
80096208 g     F .text	00000180 __call_exitprocs
80081ec4 g     F .text	00000074 __srget_r
8009a744 g     O .bss	00000004 __mlocale_changed
80098a54 g     O .rwdata	00000004 dev_ptr_wr
80098a80 g     O .rwdata	00000004 __malloc_sbrk_base
80080244 g     F .text	0000004c _start
8009a76c g     O .bss	00000004 _alt_tick_rate
8008a7e4 g     F .text	00000148 __lshift
80093e1c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8009a770 g     O .bss	00000004 _alt_nticks
80092088 g     F .text	000000fc read
800925dc g     F .text	000000e4 alt_sys_init
8008ba94 g     F .text	000001d0 __ssprint_r
800960f0 g     F .text	00000118 __register_exitproc
8008a4ac g     F .text	000001f8 __multiply
80092b90 g     F .text	00000068 altera_avalon_jtag_uart_close
80096e6c g       *ABS*	00000000 __ram_rwdata_start
800963bc g       *ABS*	00000000 __ram_rodata_start
8009a778 g     O .bss	00000028 __malloc_current_mallinfo
80098a60 g     O .rwdata	00000004 wr_adr_p
8008acf8 g     F .text	0000014c __d2b
800926c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
80095d8c g     F .text	000000a4 alt_get_fd
800951c4 g     F .text	00000158 alt_busy_sleep
8008e548 g     F .text	00000054 _close_r
40000000 g       *ABS*	00000000 __alt_mem_ddr2_ram_1
800942cc g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
80095f0c g     F .text	0000007c memcmp
80092780 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8009aa10 g       *ABS*	00000000 __alt_stack_base
800927d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
800943d4 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
80086674 g     F .text	00000154 __swsetup_r
8009032c g     F .text	000008e8 .hidden __divdf3
80088518 g     F .text	00000118 __sfp
8008af5c g     F .text	00000078 __copybits
80097314 g     O .rwdata	00000408 __malloc_av_
80088664 g     F .text	00000004 __sinit_lock_release
80086550 g     F .text	000000f0 _vsnprintf_r
80081468 g     F .text	00000718 .hidden __muldf3
8008b87c g     F .text	00000054 __sread
8009a870 g     O .bss	00000060 dev_wr
80095c84 g     F .text	00000108 alt_find_file
800953a0 g     F .text	000000a4 alt_dev_llist_insert
80092004 g     F .text	00000024 __malloc_lock
800921e8 g     F .text	000000b0 sbrk
800820a8 g     F .text	000021d8 ___svfprintf_internal_r
80098a44 g     O .rwdata	00000008 addressRAM1
8008826c g     F .text	0000005c _fflush_r
8008e59c g     F .text	000000c4 _calloc_r
8009a70c g       *ABS*	00000000 __bss_start
80089f3c g     F .text	00000128 memset
80094d90 g     F .text	00000058 alt_msgdma_open
8008037c g     F .text	00000e58 main
8009a768 g     O .bss	00000004 alt_envp
8009a74c g     O .bss	00000004 __malloc_max_total_mem
800946b4 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
80081274 g     F .text	00000088 myprintf_hexarray
80092720 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
8008ec1c g     F .text	00000018 __swbuf
8008b9b0 g     F .text	00000008 __sclose
800fd000 g       *ABS*	00000000 __alt_heap_limit
8008e750 g     F .text	00000014 fclose
800869c8 g     F .text	00001688 _dtoa_r
800949b8 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
800893a8 g     F .text	0000080c _malloc_r
8008ed90 g     F .text	00000030 __ascii_wctomb
80098aa0 g     O .rwdata	00000004 alt_errno
8009450c g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
80088f88 g     F .text	000000c4 _fwalk
80096028 g     F .text	000000c8 putc
8008f8cc g     F .text	00000084 .hidden __divsi3
80088698 g     F .text	00000124 _malloc_trim_r
800963bc g       *ABS*	00000000 __CTOR_END__
8008b9b8 g     F .text	000000dc strcmp
800963bc g       *ABS*	00000000 __flash_rodata_start
800963bc g       *ABS*	00000000 __DTOR_LIST__
80090c14 g     F .text	00000088 .hidden __nedf2
800925a4 g     F .text	00000038 alt_irq_init
80092184 g     F .text	00000064 alt_release_fd
80095020 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
80081fa4 g     F .text	0000006c sprintf
800968b7 g     O .rodata	00000100 .hidden __clz_tab
800811d4 g     F .text	00000034 debug_output
8009a740 g     O .bss	00000004 _PathLocale
80095ec0 g     F .text	00000014 atexit
8008e4e8 g     F .text	00000060 _write_r
800891c8 g     F .text	00000018 setlocale
80094474 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
80098a78 g     O .rwdata	00000004 _impure_ptr
8009a760 g     O .bss	00000004 alt_argc
80088050 g     F .text	0000021c __sflush_r
800954a4 g     F .text	00000060 _do_dtors
800891b4 g     F .text	00000008 __locale_cjk_lang
800812fc g     F .text	00000090 myprintf_dwordarray
8008b5e0 g     F .text	000001d4 __srefill_r
80080020 g       .exceptions	00000000 alt_irq_entry
8008ab88 g     F .text	00000064 __ulp
80088680 g     F .text	00000018 __fp_unlock_all
80098a8c g     O .rwdata	00000008 alt_fs_list
8009a8d0 g     O .bss	00000014 rd_adr_p
80080020 g       *ABS*	00000000 __ram_exceptions_start
800891e0 g     F .text	0000000c localeconv
80091a0c g     F .text	00000050 alt_ic_isr_register
8009a8f0 g     O .bss	00000020 a_descriptor
80098abc g       *ABS*	00000000 _edata
8009aa10 g       *ABS*	00000000 _end
8008e764 g     F .text	00000164 __fputwc
80080244 g       *ABS*	00000000 __ram_exceptions_end
80092bf8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
8009a738 g     O .bss	00000008 ram_access_ptr
80091ae4 g     F .text	0000008c alt_ic_irq_disable
8008b8d8 g     F .text	0000007c __swrite
80098a84 g     O .rwdata	00000004 __malloc_trim_threshold
800891a8 g     F .text	0000000c __locale_msgcharset
80095ed4 g     F .text	00000038 exit
8008904c g     F .text	000000c4 _fwalk_reent
8009484c g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8008a98c g     F .text	000001fc __mdiff
8008f950 g     F .text	00000074 .hidden __modsi3
800fd000 g       *ABS*	00000000 __alt_data_end
80080020 g     F .exceptions	00000000 alt_exception
8008865c g     F .text	00000004 __sfp_lock_release
80093fec g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
80093ecc g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
80096388 g     F .text	00000034 _exit
80095098 g     F .text	0000012c alt_alarm_start
00000000 g       *ABS*	00000000 __alt_mem_ddr2_ram
800891ec g     F .text	000001bc __smakebuf_r
80098ab4 g     O .rwdata	00000008 alt_msgdma_list
80082010 g     F .text	00000098 strlen
800958a4 g     F .text	00000154 open
8008138c g     F .text	000000dc .hidden __gedf2
80095c24 g     F .text	0000003c alt_putchar
80098a88 g     O .rwdata	00000004 __wctomb
8008cf9c g     F .text	00000018 __sprint_r
80095594 g     F .text	00000034 alt_icache_flush_all
80098aa4 g     O .rwdata	00000004 alt_priority_mask
80098a4c g     O .rwdata	00000004 len
80091a5c g     F .text	00000088 alt_ic_irq_enable
80086478 g     F .text	0000001c __vfprintf_internal
8008edc0 g     F .text	0000005c _wctomb_r
8009a714 g     O .bss	00000001 ISR_transfer_flag
80090d90 g     F .text	000008fc .hidden __subdf3
8008a3c0 g     F .text	000000b0 __lo0bits
80098aac g     O .rwdata	00000008 alt_alarm_list
80095444 g     F .text	00000060 _do_ctors
80098a68 g     O .rwdata	00000004 status
8008ecd0 g     F .text	000000c0 wcrtomb
80091824 g     F .text	000000d0 close
80091df4 g     F .text	00000084 alt_load
8008e8ec g     F .text	00000080 fputwc
80088660 g     F .text	00000004 __sinit_lock_acquire
8008a134 g     F .text	00000120 __multadd
8008a10c g     F .text	00000028 _Bfree



Disassembly of section .entry:

80080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
80080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
80080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
80080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
8008000c:	00bffd16 	blt	zero,r2,80080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
80080010:	00600234 	movhi	at,32776
    ori r1, r1, %lo(_start)
80080014:	08409114 	ori	at,at,580
    jmp r1
80080018:	0800683a 	jmp	at
8008001c:	00000000 	call	80000000 <__alt_mem_ddr2_ram_1+0x40000000>

Disassembly of section .exceptions:

80080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8008007c:	10000326 	beq	r2,zero,8008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80080080:	20000226 	beq	r4,zero,8008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80080084:	00800fc0 	call	800800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80080088:	00000706 	br	800800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8008008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80080098:	00801d00 	call	800801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8008009c:	1000021e 	bne	r2,zero,800800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
800800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
800800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
800800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
800800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
800800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
800800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
800800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
800800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
800800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
800800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
800800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
800800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
800800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
800800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
800800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
800800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
800800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
800800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
800800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
800800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
800800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
800800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
800800f8:	ef80083a 	eret

800800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
800800fc:	defff904 	addi	sp,sp,-28
80080100:	dfc00615 	stw	ra,24(sp)
80080104:	df000515 	stw	fp,20(sp)
80080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80080110:	0005313a 	rdctl	r2,ipending
80080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80080124:	00800044 	movi	r2,1
80080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8008012c:	e0fffb17 	ldw	r3,-20(fp)
80080130:	e0bffc17 	ldw	r2,-16(fp)
80080134:	1884703a 	and	r2,r3,r2
80080138:	10001426 	beq	r2,zero,8008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8008013c:	00a002b4 	movhi	r2,32778
80080140:	10aa4404 	addi	r2,r2,-22256
80080144:	e0fffd17 	ldw	r3,-12(fp)
80080148:	180690fa 	slli	r3,r3,3
8008014c:	10c5883a 	add	r2,r2,r3
80080150:	10c00017 	ldw	r3,0(r2)
80080154:	00a002b4 	movhi	r2,32778
80080158:	10aa4404 	addi	r2,r2,-22256
8008015c:	e13ffd17 	ldw	r4,-12(fp)
80080160:	200890fa 	slli	r4,r4,3
80080164:	1105883a 	add	r2,r2,r4
80080168:	10800104 	addi	r2,r2,4
8008016c:	10800017 	ldw	r2,0(r2)
80080170:	1009883a 	mov	r4,r2
80080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8008017c:	0005313a 	rdctl	r2,ipending
80080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80080184:	e0bfff17 	ldw	r2,-4(fp)
80080188:	00000706 	br	800801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8008018c:	e0bffc17 	ldw	r2,-16(fp)
80080190:	1085883a 	add	r2,r2,r2
80080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80080198:	e0bffd17 	ldw	r2,-12(fp)
8008019c:	10800044 	addi	r2,r2,1
800801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
800801a4:	003fe106 	br	8008012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
800801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
800801ac:	e0bffb17 	ldw	r2,-20(fp)
800801b0:	103fdb1e 	bne	r2,zero,80080120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
800801b4:	0001883a 	nop
}
800801b8:	0001883a 	nop
800801bc:	e037883a 	mov	sp,fp
800801c0:	dfc00117 	ldw	ra,4(sp)
800801c4:	df000017 	ldw	fp,0(sp)
800801c8:	dec00204 	addi	sp,sp,8
800801cc:	f800283a 	ret

800801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
800801d0:	defffb04 	addi	sp,sp,-20
800801d4:	dfc00415 	stw	ra,16(sp)
800801d8:	df000315 	stw	fp,12(sp)
800801dc:	df000304 	addi	fp,sp,12
800801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
800801e4:	000531fa 	rdctl	r2,exception
800801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
800801ec:	e0bffd17 	ldw	r2,-12(fp)
800801f0:	10801f0c 	andi	r2,r2,124
800801f4:	1004d0ba 	srli	r2,r2,2
800801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
800801fc:	0005333a 	rdctl	r2,badaddr
80080200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80080204:	d0a74c17 	ldw	r2,-25296(gp)
80080208:	10000726 	beq	r2,zero,80080228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8008020c:	d0a74c17 	ldw	r2,-25296(gp)
80080210:	e0fffd17 	ldw	r3,-12(fp)
80080214:	e1bffe17 	ldw	r6,-8(fp)
80080218:	e17fff17 	ldw	r5,-4(fp)
8008021c:	1809883a 	mov	r4,r3
80080220:	103ee83a 	callr	r2
80080224:	00000206 	br	80080230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80080228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8008022c:	0005883a 	mov	r2,zero
}
80080230:	e037883a 	mov	sp,fp
80080234:	dfc00117 	ldw	ra,4(sp)
80080238:	df000017 	ldw	fp,0(sp)
8008023c:	dec00204 	addi	sp,sp,8
80080240:	f800283a 	ret

Disassembly of section .text:

80080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
80080244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
80080248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
8008024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
80080250:	00bffd16 	blt	zero,r2,80080248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80080254:	06e003f4 	movhi	sp,32783
    ori sp, sp, %lo(__alt_stack_pointer)
80080258:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
8008025c:	06a002b4 	movhi	gp,32778
    ori gp, gp, %lo(_gp)
80080260:	d6829114 	ori	gp,gp,2628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80080264:	00a00274 	movhi	r2,32777
    ori r2, r2, %lo(__bss_start)
80080268:	10a9c314 	ori	r2,r2,42764

    movhi r3, %hi(__bss_end)
8008026c:	00e00274 	movhi	r3,32777
    ori r3, r3, %lo(__bss_end)
80080270:	18ea8414 	ori	r3,r3,43536

    beq r2, r3, 1f
80080274:	10c00326 	beq	r2,r3,80080284 <_start+0x40>

0:
    stw zero, (r2)
80080278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8008027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80080280:	10fffd36 	bltu	r2,r3,80080278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
80080284:	0091df40 	call	80091df4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80080288:	0091f880 	call	80091f88 <alt_main>

8008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
8008028c:	003fff06 	br	8008028c <alt_after_alt_main>

80080290 <ISR_transfer_callback>:
////////////////////////////////////////
volatile alt_u8 ISR_transfer_flag = 0;
volatile int ISR_input_val = 0;

void * ISR_input_ptr = (void *) &ISR_input_val;
static void ISR_transfer_callback(void * context){
80080290:	defffd04 	addi	sp,sp,-12
80080294:	df000215 	stw	fp,8(sp)
80080298:	df000204 	addi	fp,sp,8
8008029c:	e13fff15 	stw	r4,-4(fp)
  volatile int* ISR_input_ptr = (volatile int *) context;
800802a0:	e0bfff17 	ldw	r2,-4(fp)
800802a4:	e0bffe15 	stw	r2,-8(fp)

  *ISR_input_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE);
800802a8:	00a00434 	movhi	r2,32784
800802ac:	10842704 	addi	r2,r2,4252
800802b0:	10c00037 	ldwio	r3,0(r2)
800802b4:	e0bffe17 	ldw	r2,-8(fp)
800802b8:	10c00015 	stw	r3,0(r2)

  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE,0xf);
800802bc:	00c003c4 	movi	r3,15
800802c0:	00a00434 	movhi	r2,32784
800802c4:	10842704 	addi	r2,r2,4252
800802c8:	10c00035 	stwio	r3,0(r2)
  ISR_transfer_flag = *ISR_input_ptr;
800802cc:	e0bffe17 	ldw	r2,-8(fp)
800802d0:	10800017 	ldw	r2,0(r2)
800802d4:	d0a73405 	stb	r2,-25392(gp)
  //printf("ISR_transfer_flag %d\n",ISR_transfer_flag );

}
800802d8:	0001883a 	nop
800802dc:	e037883a 	mov	sp,fp
800802e0:	df000017 	ldw	fp,0(sp)
800802e4:	dec00104 	addi	sp,sp,4
800802e8:	f800283a 	ret

800802ec <GetInputString>:
 *           encounters.
 *
 ******************************************************************/
char entry[4];
void GetInputString( char* entry, int size, FILE * stream )
{
800802ec:	defff904 	addi	sp,sp,-28
800802f0:	dfc00615 	stw	ra,24(sp)
800802f4:	df000515 	stw	fp,20(sp)
800802f8:	df000504 	addi	fp,sp,20
800802fc:	e13ffd15 	stw	r4,-12(fp)
80080300:	e17ffe15 	stw	r5,-8(fp)
80080304:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
80080308:	e03ffc15 	stw	zero,-16(fp)

  for(i = 0; (ch != '\n') && (i < size); )
8008030c:	e03ffb15 	stw	zero,-20(fp)
80080310:	00000e06 	br	8008034c <GetInputString+0x60>
    {
      if( (ch = getc(stream)) != '\r')
80080314:	e13fff17 	ldw	r4,-4(fp)
80080318:	0081cfc0 	call	80081cfc <getc>
8008031c:	e0bffc15 	stw	r2,-16(fp)
80080320:	e0bffc17 	ldw	r2,-16(fp)
80080324:	10800360 	cmpeqi	r2,r2,13
80080328:	1000081e 	bne	r2,zero,8008034c <GetInputString+0x60>
	{
	  entry[i] = ch;
8008032c:	e0bffb17 	ldw	r2,-20(fp)
80080330:	e0fffd17 	ldw	r3,-12(fp)
80080334:	1885883a 	add	r2,r3,r2
80080338:	e0fffc17 	ldw	r3,-16(fp)
8008033c:	10c00005 	stb	r3,0(r2)
	  i++;
80080340:	e0bffb17 	ldw	r2,-20(fp)
80080344:	10800044 	addi	r2,r2,1
80080348:	e0bffb15 	stw	r2,-20(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
8008034c:	e0bffc17 	ldw	r2,-16(fp)
80080350:	108002a0 	cmpeqi	r2,r2,10
80080354:	1000031e 	bne	r2,zero,80080364 <GetInputString+0x78>
80080358:	e0fffb17 	ldw	r3,-20(fp)
8008035c:	e0bffe17 	ldw	r2,-8(fp)
80080360:	18bfec16 	blt	r3,r2,80080314 <GetInputString+0x28>
	{
	  entry[i] = ch;
	  i++;
	}
    }
}
80080364:	0001883a 	nop
80080368:	e037883a 	mov	sp,fp
8008036c:	dfc00117 	ldw	ra,4(sp)
80080370:	df000017 	ldw	fp,0(sp)
80080374:	dec00204 	addi	sp,sp,8
80080378:	f800283a 	ret

8008037c <main>:


int main()
{
8008037c:	deffe604 	addi	sp,sp,-104
80080380:	dfc01915 	stw	ra,100(sp)
80080384:	df001815 	stw	fp,96(sp)
80080388:	df001804 	addi	fp,sp,96
  printf("Welcome to the L0Tribe initializer program\n\n");
8008038c:	01200274 	movhi	r4,32777
80080390:	2118ef04 	addi	r4,r4,25532
80080394:	0081eb00 	call	80081eb0 <puts>
  printf("You should have the ethernet connection correctly setup to send primitives to the L0Tribe RAM\n");
80080398:	01200274 	movhi	r4,32777
8008039c:	2118fa04 	addi	r4,r4,25576
800803a0:	0081eb00 	call	80081eb0 <puts>
  printf("Primitives to the L0Tribe RAM pass from the eth link 0: configured as 192.168.1.8; mac: 00:01:02:03:04:08\n\n");
800803a4:	01200274 	movhi	r4,32777
800803a8:	21191204 	addi	r4,r4,25672
800803ac:	0081eb00 	call	80081eb0 <puts>

  IOWR(CTRL_SIG_BASE,0,0);
800803b0:	0007883a 	mov	r3,zero
800803b4:	00a00434 	movhi	r2,32784
800803b8:	10842804 	addi	r2,r2,4256
800803bc:	10c00035 	stwio	r3,0(r2)
  printf("Type y when you are ready to start\n");
800803c0:	01200274 	movhi	r4,32777
800803c4:	21192d04 	addi	r4,r4,25780
800803c8:	0081eb00 	call	80081eb0 <puts>

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
800803cc:	d0a00d17 	ldw	r2,-32716(gp)
800803d0:	10800117 	ldw	r2,4(r2)
800803d4:	100d883a 	mov	r6,r2
800803d8:	01400104 	movi	r5,4
800803dc:	d1273604 	addi	r4,gp,-25384
800803e0:	00802ec0 	call	800802ec <GetInputString>
    printf("you wrote: %c, type y when you are ready to start\n", entry[0]);
800803e4:	d0a73603 	ldbu	r2,-25384(gp)
800803e8:	10803fcc 	andi	r2,r2,255
800803ec:	1080201c 	xori	r2,r2,128
800803f0:	10bfe004 	addi	r2,r2,-128
800803f4:	100b883a 	mov	r5,r2
800803f8:	01200274 	movhi	r4,32777
800803fc:	21193604 	addi	r4,r4,25816
80080400:	0081db40 	call	80081db4 <printf>
    detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080404:	00a00434 	movhi	r2,32784
80080408:	10842004 	addi	r2,r2,4224
8008040c:	10800037 	ldwio	r2,0(r2)
80080410:	d0a00a05 	stb	r2,-32728(gp)
    printf("Input from IO: %d\n",(int)detectorUnderInit);
80080414:	d0a00a03 	ldbu	r2,-32728(gp)
80080418:	10803fcc 	andi	r2,r2,255
8008041c:	100b883a 	mov	r5,r2
80080420:	01200274 	movhi	r4,32777
80080424:	21194304 	addi	r4,r4,25868
80080428:	0081db40 	call	80081db4 <printf>
    if(entry[0] == 'y')
8008042c:	d0a73603 	ldbu	r2,-25384(gp)
80080430:	10803fcc 	andi	r2,r2,255
80080434:	1080201c 	xori	r2,r2,128
80080438:	10bfe004 	addi	r2,r2,-128
8008043c:	10801e58 	cmpnei	r2,r2,121
80080440:	103fe21e 	bne	r2,zero,800803cc <main+0x50>
      {
	printf(" OK!\n ");
80080444:	01200274 	movhi	r4,32777
80080448:	21194804 	addi	r4,r4,25888
8008044c:	0081db40 	call	80081db4 <printf>
	break;
80080450:	0001883a 	nop
      }
  }

  for (int i=0; i < nrams; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
80080454:	e03fe915 	stw	zero,-92(fp)
80080458:	00000e06 	br	80080494 <main+0x118>
8008045c:	e0bfe917 	ldw	r2,-92(fp)
80080460:	1006913a 	slli	r3,r2,4
80080464:	00a002b4 	movhi	r2,32778
80080468:	10aa3c04 	addi	r2,r2,-22288
8008046c:	1887883a 	add	r3,r3,r2
80080470:	e0bfe917 	ldw	r2,-92(fp)
80080474:	1085883a 	add	r2,r2,r2
80080478:	1089883a 	add	r4,r2,r2
8008047c:	d0a73b04 	addi	r2,gp,-25364
80080480:	2085883a 	add	r2,r4,r2
80080484:	10c00015 	stw	r3,0(r2)
80080488:	e0bfe917 	ldw	r2,-92(fp)
8008048c:	10800044 	addi	r2,r2,1
80080490:	e0bfe915 	stw	r2,-92(fp)
80080494:	e0bfe917 	ldw	r2,-92(fp)
80080498:	10800090 	cmplti	r2,r2,2
8008049c:	103fef1e 	bne	r2,zero,8008045c <main+0xe0>
  for (int i=0;i<nrams;++i) dev_ptr[i]= &dev[i];
800804a0:	e03fea15 	stw	zero,-88(fp)
800804a4:	00000e06 	br	800804e0 <main+0x164>
800804a8:	e0bfea17 	ldw	r2,-88(fp)
800804ac:	10c01824 	muli	r3,r2,96
800804b0:	00a002b4 	movhi	r2,32778
800804b4:	10a9e804 	addi	r2,r2,-22624
800804b8:	1887883a 	add	r3,r3,r2
800804bc:	e0bfea17 	ldw	r2,-88(fp)
800804c0:	1085883a 	add	r2,r2,r2
800804c4:	1089883a 	add	r4,r2,r2
800804c8:	d0a73704 	addi	r2,gp,-25380
800804cc:	2085883a 	add	r2,r4,r2
800804d0:	10c00015 	stw	r3,0(r2)
800804d4:	e0bfea17 	ldw	r2,-88(fp)
800804d8:	10800044 	addi	r2,r2,1
800804dc:	e0bfea15 	stw	r2,-88(fp)
800804e0:	e0bfea17 	ldw	r2,-88(fp)
800804e4:	10800090 	cmplti	r2,r2,2
800804e8:	103fef1e 	bne	r2,zero,800804a8 <main+0x12c>
  for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
800804ec:	e03feb15 	stw	zero,-84(fp)
800804f0:	00000a06 	br	8008051c <main+0x1a0>
800804f4:	00a002b4 	movhi	r2,32778
800804f8:	10aa3404 	addi	r2,r2,-22320
800804fc:	e0ffeb17 	ldw	r3,-84(fp)
80080500:	18c7883a 	add	r3,r3,r3
80080504:	18c7883a 	add	r3,r3,r3
80080508:	10c5883a 	add	r2,r2,r3
8008050c:	10000015 	stw	zero,0(r2)
80080510:	e0bfeb17 	ldw	r2,-84(fp)
80080514:	10800044 	addi	r2,r2,1
80080518:	e0bfeb15 	stw	r2,-84(fp)
8008051c:	e0bfeb17 	ldw	r2,-84(fp)
80080520:	10800150 	cmplti	r2,r2,5
80080524:	103ff31e 	bne	r2,zero,800804f4 <main+0x178>
  for (int i=0;i<nrams;++i) rd_addr[i] = 0x0;
80080528:	e03fec15 	stw	zero,-80(fp)
8008052c:	00000906 	br	80080554 <main+0x1d8>
80080530:	e0bfec17 	ldw	r2,-80(fp)
80080534:	1085883a 	add	r2,r2,r2
80080538:	1087883a 	add	r3,r2,r2
8008053c:	d0a73904 	addi	r2,gp,-25372
80080540:	1885883a 	add	r2,r3,r2
80080544:	10000015 	stw	zero,0(r2)
80080548:	e0bfec17 	ldw	r2,-80(fp)
8008054c:	10800044 	addi	r2,r2,1
80080550:	e0bfec15 	stw	r2,-80(fp)
80080554:	e0bfec17 	ldw	r2,-80(fp)
80080558:	10800090 	cmplti	r2,r2,2
8008055c:	103ff41e 	bne	r2,zero,80080530 <main+0x1b4>
  for (int i=0;i<nrams;++i) ram_access_ptr[i] = &rd_addr[i];
80080560:	e03fed15 	stw	zero,-76(fp)
80080564:	00000e06 	br	800805a0 <main+0x224>
80080568:	e0bfed17 	ldw	r2,-76(fp)
8008056c:	1085883a 	add	r2,r2,r2
80080570:	1087883a 	add	r3,r2,r2
80080574:	d0a73904 	addi	r2,gp,-25372
80080578:	1887883a 	add	r3,r3,r2
8008057c:	e0bfed17 	ldw	r2,-76(fp)
80080580:	1085883a 	add	r2,r2,r2
80080584:	1089883a 	add	r4,r2,r2
80080588:	d0a73d04 	addi	r2,gp,-25356
8008058c:	2085883a 	add	r2,r4,r2
80080590:	10c00015 	stw	r3,0(r2)
80080594:	e0bfed17 	ldw	r2,-76(fp)
80080598:	10800044 	addi	r2,r2,1
8008059c:	e0bfed15 	stw	r2,-76(fp)
800805a0:	e0bfed17 	ldw	r2,-76(fp)
800805a4:	10800090 	cmplti	r2,r2,2
800805a8:	103fef1e 	bne	r2,zero,80080568 <main+0x1ec>

  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PILOT_SIG_BASE,0xf); //enabling interrupt on all 4 inputs
800805ac:	00c003c4 	movi	r3,15
800805b0:	00a00434 	movhi	r2,32784
800805b4:	10842604 	addi	r2,r2,4248
800805b8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE,0xf); //clearing older interrupts
800805bc:	00c003c4 	movi	r3,15
800805c0:	00a00434 	movhi	r2,32784
800805c4:	10842704 	addi	r2,r2,4252
800805c8:	10c00035 	stwio	r3,0(r2)
  alt_ic_isr_register(PILOT_SIG_IRQ_INTERRUPT_CONTROLLER_ID, PILOT_SIG_IRQ, ISR_transfer_callback, ISR_input_ptr,0x0);//setting interrupt callback
800805cc:	d0a00b17 	ldw	r2,-32724(gp)
800805d0:	d8000015 	stw	zero,0(sp)
800805d4:	100f883a 	mov	r7,r2
800805d8:	01a00234 	movhi	r6,32776
800805dc:	3180a404 	addi	r6,r6,656
800805e0:	01400104 	movi	r5,4
800805e4:	0009883a 	mov	r4,zero
800805e8:	0091a0c0 	call	80091a0c <alt_ic_isr_register>


  ///////////////////////////
  //Test RAM INITIALIZATION:
  printf("Starting RAM INIT\n");
800805ec:	01200274 	movhi	r4,32777
800805f0:	21194a04 	addi	r4,r4,25896
800805f4:	0081eb00 	call	80081eb0 <puts>
  ///////////////////////////


  printf("would you like to clean the ram? y/n\n ");
800805f8:	01200274 	movhi	r4,32777
800805fc:	21194f04 	addi	r4,r4,25916
80080600:	0081db40 	call	80081db4 <printf>
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
80080604:	d0a00d17 	ldw	r2,-32716(gp)
80080608:	10800117 	ldw	r2,4(r2)
8008060c:	100d883a 	mov	r6,r2
80080610:	01400104 	movi	r5,4
80080614:	d1273604 	addi	r4,gp,-25384
80080618:	00802ec0 	call	800802ec <GetInputString>
    printf("you wrote: %c\n",entry[0]);
8008061c:	d0a73603 	ldbu	r2,-25384(gp)
80080620:	10803fcc 	andi	r2,r2,255
80080624:	1080201c 	xori	r2,r2,128
80080628:	10bfe004 	addi	r2,r2,-128
8008062c:	100b883a 	mov	r5,r2
80080630:	01200274 	movhi	r4,32777
80080634:	21195904 	addi	r4,r4,25956
80080638:	0081db40 	call	80081db4 <printf>
    if(entry[0] == 'y') {
8008063c:	d0a73603 	ldbu	r2,-25384(gp)
80080640:	10803fcc 	andi	r2,r2,255
80080644:	1080201c 	xori	r2,r2,128
80080648:	10bfe004 	addi	r2,r2,-128
8008064c:	10801e58 	cmpnei	r2,r2,121
80080650:	10000726 	beq	r2,zero,80080670 <main+0x2f4>
      break;
    }
    if(entry[0] == 'n') {
80080654:	d0a73603 	ldbu	r2,-25384(gp)
80080658:	10803fcc 	andi	r2,r2,255
8008065c:	1080201c 	xori	r2,r2,128
80080660:	10bfe004 	addi	r2,r2,-128
80080664:	10801b98 	cmpnei	r2,r2,110
80080668:	10000326 	beq	r2,zero,80080678 <main+0x2fc>
      break;
    }
  }
8008066c:	003fe506 	br	80080604 <main+0x288>
  printf("would you like to clean the ram? y/n\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
    if(entry[0] == 'y') {
      break;
80080670:	0001883a 	nop
80080674:	00000106 	br	8008067c <main+0x300>
    }
    if(entry[0] == 'n') {
      break;
80080678:	0001883a 	nop
    }
  }

  if(entry[0] == 'y') {
8008067c:	d0a73603 	ldbu	r2,-25384(gp)
80080680:	10803fcc 	andi	r2,r2,255
80080684:	1080201c 	xori	r2,r2,128
80080688:	10bfe004 	addi	r2,r2,-128
8008068c:	10801e58 	cmpnei	r2,r2,121
80080690:	10001f1e 	bne	r2,zero,80080710 <main+0x394>
    printf("OK! cleaning RAM0...\n ");
80080694:	01200274 	movhi	r4,32777
80080698:	21195d04 	addi	r4,r4,25972
8008069c:	0081db40 	call	80081db4 <printf>

    for (unsigned int i = 0x0; i < DDR2_RAM_SPAN; i+=4)
800806a0:	e03fee15 	stw	zero,-72(fp)
800806a4:	00000606 	br	800806c0 <main+0x344>
      {
	IOWR_32DIRECT(DDR2_RAM_BASE, i,0x0);
800806a8:	e0bfee17 	ldw	r2,-72(fp)
800806ac:	0007883a 	mov	r3,zero
800806b0:	10c00035 	stwio	r3,0(r2)
  }

  if(entry[0] == 'y') {
    printf("OK! cleaning RAM0...\n ");

    for (unsigned int i = 0x0; i < DDR2_RAM_SPAN; i+=4)
800806b4:	e0bfee17 	ldw	r2,-72(fp)
800806b8:	10800104 	addi	r2,r2,4
800806bc:	e0bfee15 	stw	r2,-72(fp)
800806c0:	e0ffee17 	ldw	r3,-72(fp)
800806c4:	00900034 	movhi	r2,16384
800806c8:	18bff736 	bltu	r3,r2,800806a8 <main+0x32c>
      {
	IOWR_32DIRECT(DDR2_RAM_BASE, i,0x0);
      }

    printf("OK! cleaning RAM1...\n ");
800806cc:	01200274 	movhi	r4,32777
800806d0:	21196304 	addi	r4,r4,25996
800806d4:	0081db40 	call	80081db4 <printf>

    for (unsigned int i = 0x0; i < DDR2_RAM_1_SPAN; i+=4)
800806d8:	e03fef15 	stw	zero,-68(fp)
800806dc:	00000806 	br	80080700 <main+0x384>
      {
	IOWR_32DIRECT(DDR2_RAM_1_BASE, i,0x0);
800806e0:	e0ffef17 	ldw	r3,-68(fp)
800806e4:	00900034 	movhi	r2,16384
800806e8:	1885883a 	add	r2,r3,r2
800806ec:	0007883a 	mov	r3,zero
800806f0:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(DDR2_RAM_BASE, i,0x0);
      }

    printf("OK! cleaning RAM1...\n ");

    for (unsigned int i = 0x0; i < DDR2_RAM_1_SPAN; i+=4)
800806f4:	e0bfef17 	ldw	r2,-68(fp)
800806f8:	10800104 	addi	r2,r2,4
800806fc:	e0bfef15 	stw	r2,-68(fp)
80080700:	e0ffef17 	ldw	r3,-68(fp)
80080704:	00900034 	movhi	r2,16384
80080708:	18bff536 	bltu	r3,r2,800806e0 <main+0x364>
8008070c:	00000306 	br	8008071c <main+0x3a0>
      {
	IOWR_32DIRECT(DDR2_RAM_1_BASE, i,0x0);
      }
  }
  else printf("OK! continuing without clean\n ");
80080710:	01200274 	movhi	r4,32777
80080714:	21196904 	addi	r4,r4,26020
80080718:	0081db40 	call	80081db4 <printf>
  //L0Tribe receives primitives from workstation.
  //Every 8 bytes it write a primitive in the FifoToRAM
  //When the ethernet packet is finished: a signal called ToRamFULL
  //says to the DMA to start moving data to the DDR.

  dev_ptr_wr = alt_msgdma_open(FROM_ETH_TO_DDR_ETH_DMA_CSR_NAME);
8008071c:	01200274 	movhi	r4,32777
80080720:	21197104 	addi	r4,r4,26052
80080724:	0094d900 	call	80094d90 <alt_msgdma_open>
80080728:	d0a00415 	stw	r2,-32752(gp)

  wr_adr_p=0x80;//skip first addresses: they are reset every time
8008072c:	00802004 	movi	r2,128
80080730:	d0a00715 	stw	r2,-32740(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80080734:	d0e74b17 	ldw	r3,-25300(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80080738:	d0a74a17 	ldw	r2,-25304(gp)

  alt_u32 time0 = alt_nticks() * alt_ticks_per_second();
8008073c:	1885383a 	mul	r2,r3,r2
80080740:	e0bff315 	stw	r2,-52(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80080744:	d0e74b17 	ldw	r3,-25300(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80080748:	d0a74a17 	ldw	r2,-25304(gp)
  alt_u32 time1 = alt_nticks() * alt_ticks_per_second();
8008074c:	1885383a 	mul	r2,r3,r2
80080750:	e0bff415 	stw	r2,-48(fp)


  while(1) {
    printf("which detector you like to write into the ram (0-4)? n to skip\n");
80080754:	01200274 	movhi	r4,32777
80080758:	21197a04 	addi	r4,r4,26088
8008075c:	0081eb00 	call	80081eb0 <puts>
    GetInputString( entry, sizeof(entry), stdin );
80080760:	d0a00d17 	ldw	r2,-32716(gp)
80080764:	10800117 	ldw	r2,4(r2)
80080768:	100d883a 	mov	r6,r2
8008076c:	01400104 	movi	r5,4
80080770:	d1273604 	addi	r4,gp,-25384
80080774:	00802ec0 	call	800802ec <GetInputString>
    printf("you wrote: %c\n",entry[0]);
80080778:	d0a73603 	ldbu	r2,-25384(gp)
8008077c:	10803fcc 	andi	r2,r2,255
80080780:	1080201c 	xori	r2,r2,128
80080784:	10bfe004 	addi	r2,r2,-128
80080788:	100b883a 	mov	r5,r2
8008078c:	01200274 	movhi	r4,32777
80080790:	21195904 	addi	r4,r4,25956
80080794:	0081db40 	call	80081db4 <printf>

    if(entry[0] == '0') {
80080798:	d0a73603 	ldbu	r2,-25384(gp)
8008079c:	10803fcc 	andi	r2,r2,255
800807a0:	1080201c 	xori	r2,r2,128
800807a4:	10bfe004 	addi	r2,r2,-128
800807a8:	10800c18 	cmpnei	r2,r2,48
800807ac:	1000241e 	bne	r2,zero,80080840 <main+0x4c4>
      wr_adr_p = addressRAM0[0];
800807b0:	00a00274 	movhi	r2,32777
800807b4:	109b9b04 	addi	r2,r2,28268
800807b8:	10800017 	ldw	r2,0(r2)
800807bc:	d0a00715 	stw	r2,-32740(gp)
      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
800807c0:	d0e00417 	ldw	r3,-32752(gp)
800807c4:	d1200317 	ldw	r4,-32756(gp)
800807c8:	d1600717 	ldw	r5,-32740(gp)
800807cc:	d1a00617 	ldw	r6,-32744(gp)
800807d0:	d0a73317 	ldw	r2,-25396(gp)
800807d4:	d8800015 	stw	r2,0(sp)
800807d8:	300f883a 	mov	r7,r6
800807dc:	280d883a 	mov	r6,r5
800807e0:	200b883a 	mov	r5,r4
800807e4:	1809883a 	mov	r4,r3
800807e8:	0093dc40 	call	80093dc4 <alt_msgdma_construct_standard_st_to_mm_descriptor>
800807ec:	10bffaa0 	cmpeqi	r2,r2,-22
800807f0:	103ff31e 	bne	r2,zero,800807c0 <main+0x444>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
800807f4:	d0a00417 	ldw	r2,-32752(gp)
800807f8:	d0e00317 	ldw	r3,-32756(gp)
800807fc:	180b883a 	mov	r5,r3
80080800:	1009883a 	mov	r4,r2
80080804:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
80080808:	d0a00915 	stw	r2,-32732(gp)
	  if(status==0){
8008080c:	d0a00917 	ldw	r2,-32732(gp)
80080810:	1000031e 	bne	r2,zero,80080820 <main+0x4a4>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080814:	d0a00717 	ldw	r2,-32740(gp)
80080818:	10804004 	addi	r2,r2,256
8008081c:	d0a00715 	stw	r2,-32740(gp)
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080820:	00a00434 	movhi	r2,32784
80080824:	10842004 	addi	r2,r2,4224
80080828:	10800037 	ldwio	r2,0(r2)
8008082c:	d0a00a05 	stb	r2,-32728(gp)
	  if(detectorUnderInit!=0) break;
80080830:	d0a00a03 	ldbu	r2,-32728(gp)
80080834:	10803fcc 	andi	r2,r2,255
80080838:	1000b41e 	bne	r2,zero,80080b0c <main+0x790>
	}
      }
8008083c:	003fe006 	br	800807c0 <main+0x444>
    }
    else if(entry[0] == '1') {
80080840:	d0a73603 	ldbu	r2,-25384(gp)
80080844:	10803fcc 	andi	r2,r2,255
80080848:	1080201c 	xori	r2,r2,128
8008084c:	10bfe004 	addi	r2,r2,-128
80080850:	10800c58 	cmpnei	r2,r2,49
80080854:	1000251e 	bne	r2,zero,800808ec <main+0x570>
      wr_adr_p = addressRAM0[1];
80080858:	00a00274 	movhi	r2,32777
8008085c:	109b9b04 	addi	r2,r2,28268
80080860:	10800117 	ldw	r2,4(r2)
80080864:	d0a00715 	stw	r2,-32740(gp)
      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
80080868:	d0e00417 	ldw	r3,-32752(gp)
8008086c:	d1200317 	ldw	r4,-32756(gp)
80080870:	d1600717 	ldw	r5,-32740(gp)
80080874:	d1a00617 	ldw	r6,-32744(gp)
80080878:	d0a73317 	ldw	r2,-25396(gp)
8008087c:	d8800015 	stw	r2,0(sp)
80080880:	300f883a 	mov	r7,r6
80080884:	280d883a 	mov	r6,r5
80080888:	200b883a 	mov	r5,r4
8008088c:	1809883a 	mov	r4,r3
80080890:	0093dc40 	call	80093dc4 <alt_msgdma_construct_standard_st_to_mm_descriptor>
80080894:	10bffaa0 	cmpeqi	r2,r2,-22
80080898:	103ff31e 	bne	r2,zero,80080868 <main+0x4ec>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
8008089c:	d0a00417 	ldw	r2,-32752(gp)
800808a0:	d0e00317 	ldw	r3,-32756(gp)
800808a4:	180b883a 	mov	r5,r3
800808a8:	1009883a 	mov	r4,r2
800808ac:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
800808b0:	d0a00915 	stw	r2,-32732(gp)
	  if(status==0){
800808b4:	d0a00917 	ldw	r2,-32732(gp)
800808b8:	1000031e 	bne	r2,zero,800808c8 <main+0x54c>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
800808bc:	d0a00717 	ldw	r2,-32740(gp)
800808c0:	10804004 	addi	r2,r2,256
800808c4:	d0a00715 	stw	r2,-32740(gp)
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
800808c8:	00a00434 	movhi	r2,32784
800808cc:	10842004 	addi	r2,r2,4224
800808d0:	10800037 	ldwio	r2,0(r2)
800808d4:	d0a00a05 	stb	r2,-32728(gp)
	  if(detectorUnderInit!=1) break;
800808d8:	d0a00a03 	ldbu	r2,-32728(gp)
800808dc:	10803fcc 	andi	r2,r2,255
800808e0:	10800060 	cmpeqi	r2,r2,1
800808e4:	10008b26 	beq	r2,zero,80080b14 <main+0x798>
	}
      }
800808e8:	003fdf06 	br	80080868 <main+0x4ec>
    }
    else if(entry[0] == '2') {
800808ec:	d0a73603 	ldbu	r2,-25384(gp)
800808f0:	10803fcc 	andi	r2,r2,255
800808f4:	1080201c 	xori	r2,r2,128
800808f8:	10bfe004 	addi	r2,r2,-128
800808fc:	10800c98 	cmpnei	r2,r2,50
80080900:	1000251e 	bne	r2,zero,80080998 <main+0x61c>
      wr_adr_p = addressRAM0[2];
80080904:	00a00274 	movhi	r2,32777
80080908:	109b9b04 	addi	r2,r2,28268
8008090c:	10800217 	ldw	r2,8(r2)
80080910:	d0a00715 	stw	r2,-32740(gp)
      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
80080914:	d0e00417 	ldw	r3,-32752(gp)
80080918:	d1200317 	ldw	r4,-32756(gp)
8008091c:	d1600717 	ldw	r5,-32740(gp)
80080920:	d1a00617 	ldw	r6,-32744(gp)
80080924:	d0a73317 	ldw	r2,-25396(gp)
80080928:	d8800015 	stw	r2,0(sp)
8008092c:	300f883a 	mov	r7,r6
80080930:	280d883a 	mov	r6,r5
80080934:	200b883a 	mov	r5,r4
80080938:	1809883a 	mov	r4,r3
8008093c:	0093dc40 	call	80093dc4 <alt_msgdma_construct_standard_st_to_mm_descriptor>
80080940:	10bffaa0 	cmpeqi	r2,r2,-22
80080944:	103ff31e 	bne	r2,zero,80080914 <main+0x598>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
80080948:	d0a00417 	ldw	r2,-32752(gp)
8008094c:	d0e00317 	ldw	r3,-32756(gp)
80080950:	180b883a 	mov	r5,r3
80080954:	1009883a 	mov	r4,r2
80080958:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
8008095c:	d0a00915 	stw	r2,-32732(gp)
	  if(status==0){
80080960:	d0a00917 	ldw	r2,-32732(gp)
80080964:	1000031e 	bne	r2,zero,80080974 <main+0x5f8>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080968:	d0a00717 	ldw	r2,-32740(gp)
8008096c:	10804004 	addi	r2,r2,256
80080970:	d0a00715 	stw	r2,-32740(gp)
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080974:	00a00434 	movhi	r2,32784
80080978:	10842004 	addi	r2,r2,4224
8008097c:	10800037 	ldwio	r2,0(r2)
80080980:	d0a00a05 	stb	r2,-32728(gp)
	  if(detectorUnderInit!=2) break;
80080984:	d0a00a03 	ldbu	r2,-32728(gp)
80080988:	10803fcc 	andi	r2,r2,255
8008098c:	108000a0 	cmpeqi	r2,r2,2
80080990:	10006226 	beq	r2,zero,80080b1c <main+0x7a0>
	}
      }
80080994:	003fdf06 	br	80080914 <main+0x598>
    }

    else if(entry[0] == '3') {
80080998:	d0a73603 	ldbu	r2,-25384(gp)
8008099c:	10803fcc 	andi	r2,r2,255
800809a0:	1080201c 	xori	r2,r2,128
800809a4:	10bfe004 	addi	r2,r2,-128
800809a8:	10800cd8 	cmpnei	r2,r2,51
800809ac:	1000251e 	bne	r2,zero,80080a44 <main+0x6c8>
      wr_adr_p = addressRAM1[0]+DDR2_RAM_1_BASE;
800809b0:	d0e00017 	ldw	r3,-32768(gp)
800809b4:	00900034 	movhi	r2,16384
800809b8:	1885883a 	add	r2,r3,r2
800809bc:	d0a00715 	stw	r2,-32740(gp)
      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
800809c0:	d0e00417 	ldw	r3,-32752(gp)
800809c4:	d1200317 	ldw	r4,-32756(gp)
800809c8:	d1600717 	ldw	r5,-32740(gp)
800809cc:	d1a00617 	ldw	r6,-32744(gp)
800809d0:	d0a73317 	ldw	r2,-25396(gp)
800809d4:	d8800015 	stw	r2,0(sp)
800809d8:	300f883a 	mov	r7,r6
800809dc:	280d883a 	mov	r6,r5
800809e0:	200b883a 	mov	r5,r4
800809e4:	1809883a 	mov	r4,r3
800809e8:	0093dc40 	call	80093dc4 <alt_msgdma_construct_standard_st_to_mm_descriptor>
800809ec:	10bffaa0 	cmpeqi	r2,r2,-22
800809f0:	103ff31e 	bne	r2,zero,800809c0 <main+0x644>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
800809f4:	d0a00417 	ldw	r2,-32752(gp)
800809f8:	d0e00317 	ldw	r3,-32756(gp)
800809fc:	180b883a 	mov	r5,r3
80080a00:	1009883a 	mov	r4,r2
80080a04:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
80080a08:	d0a00915 	stw	r2,-32732(gp)
	  if(status==0){
80080a0c:	d0a00917 	ldw	r2,-32732(gp)
80080a10:	1000031e 	bne	r2,zero,80080a20 <main+0x6a4>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080a14:	d0a00717 	ldw	r2,-32740(gp)
80080a18:	10804004 	addi	r2,r2,256
80080a1c:	d0a00715 	stw	r2,-32740(gp)
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080a20:	00a00434 	movhi	r2,32784
80080a24:	10842004 	addi	r2,r2,4224
80080a28:	10800037 	ldwio	r2,0(r2)
80080a2c:	d0a00a05 	stb	r2,-32728(gp)
	  if(detectorUnderInit!=3) break;
80080a30:	d0a00a03 	ldbu	r2,-32728(gp)
80080a34:	10803fcc 	andi	r2,r2,255
80080a38:	108000e0 	cmpeqi	r2,r2,3
80080a3c:	10003926 	beq	r2,zero,80080b24 <main+0x7a8>
	}
      }
80080a40:	003fdf06 	br	800809c0 <main+0x644>
    }

    else if(entry[0] == '4') {
80080a44:	d0a73603 	ldbu	r2,-25384(gp)
80080a48:	10803fcc 	andi	r2,r2,255
80080a4c:	1080201c 	xori	r2,r2,128
80080a50:	10bfe004 	addi	r2,r2,-128
80080a54:	10800d18 	cmpnei	r2,r2,52
80080a58:	1000251e 	bne	r2,zero,80080af0 <main+0x774>
      wr_adr_p = addressRAM1[1]+DDR2_RAM_1_BASE;
80080a5c:	d0e00117 	ldw	r3,-32764(gp)
80080a60:	00900034 	movhi	r2,16384
80080a64:	1885883a 	add	r2,r3,r2
80080a68:	d0a00715 	stw	r2,-32740(gp)
      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
80080a6c:	d0e00417 	ldw	r3,-32752(gp)
80080a70:	d1200317 	ldw	r4,-32756(gp)
80080a74:	d1600717 	ldw	r5,-32740(gp)
80080a78:	d1a00617 	ldw	r6,-32744(gp)
80080a7c:	d0a73317 	ldw	r2,-25396(gp)
80080a80:	d8800015 	stw	r2,0(sp)
80080a84:	300f883a 	mov	r7,r6
80080a88:	280d883a 	mov	r6,r5
80080a8c:	200b883a 	mov	r5,r4
80080a90:	1809883a 	mov	r4,r3
80080a94:	0093dc40 	call	80093dc4 <alt_msgdma_construct_standard_st_to_mm_descriptor>
80080a98:	10bffaa0 	cmpeqi	r2,r2,-22
80080a9c:	103ff31e 	bne	r2,zero,80080a6c <main+0x6f0>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
80080aa0:	d0a00417 	ldw	r2,-32752(gp)
80080aa4:	d0e00317 	ldw	r3,-32756(gp)
80080aa8:	180b883a 	mov	r5,r3
80080aac:	1009883a 	mov	r4,r2
80080ab0:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
80080ab4:	d0a00915 	stw	r2,-32732(gp)
	  if(status==0){
80080ab8:	d0a00917 	ldw	r2,-32732(gp)
80080abc:	1000031e 	bne	r2,zero,80080acc <main+0x750>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080ac0:	d0a00717 	ldw	r2,-32740(gp)
80080ac4:	10804004 	addi	r2,r2,256
80080ac8:	d0a00715 	stw	r2,-32740(gp)
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080acc:	00a00434 	movhi	r2,32784
80080ad0:	10842004 	addi	r2,r2,4224
80080ad4:	10800037 	ldwio	r2,0(r2)
80080ad8:	d0a00a05 	stb	r2,-32728(gp)
	  if(detectorUnderInit!=4) break;
80080adc:	d0a00a03 	ldbu	r2,-32728(gp)
80080ae0:	10803fcc 	andi	r2,r2,255
80080ae4:	10800120 	cmpeqi	r2,r2,4
80080ae8:	10001026 	beq	r2,zero,80080b2c <main+0x7b0>
	}
      }
80080aec:	003fdf06 	br	80080a6c <main+0x6f0>
    }


    else if(entry[0] == 'n') {
80080af0:	d0a73603 	ldbu	r2,-25384(gp)
80080af4:	10803fcc 	andi	r2,r2,255
80080af8:	1080201c 	xori	r2,r2,128
80080afc:	10bfe004 	addi	r2,r2,-128
80080b00:	10801b98 	cmpnei	r2,r2,110
80080b04:	10000b26 	beq	r2,zero,80080b34 <main+0x7b8>
80080b08:	003f1206 	br	80080754 <main+0x3d8>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
	  if(detectorUnderInit!=0) break;
80080b0c:	0001883a 	nop
80080b10:	003f1006 	br	80080754 <main+0x3d8>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
	  if(detectorUnderInit!=1) break;
80080b14:	0001883a 	nop
80080b18:	003f0e06 	br	80080754 <main+0x3d8>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
	  if(detectorUnderInit!=2) break;
80080b1c:	0001883a 	nop
80080b20:	003f0c06 	br	80080754 <main+0x3d8>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
	  if(detectorUnderInit!=3) break;
80080b24:	0001883a 	nop
80080b28:	003f0a06 	br	80080754 <main+0x3d8>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
	  if(detectorUnderInit!=4) break;
80080b2c:	0001883a 	nop


    else if(entry[0] == 'n') {
      break;
    }
  }
80080b30:	003f0806 	br	80080754 <main+0x3d8>
      }
    }


    else if(entry[0] == 'n') {
      break;
80080b34:	0001883a 	nop
  //			  }
  //		  }
  //	  }
  //	  else  printf("OK continuing without write\n ");

  printf("Fill complete\n");
80080b38:	01200274 	movhi	r4,32777
80080b3c:	21198a04 	addi	r4,r4,26152
80080b40:	0081eb00 	call	80081eb0 <puts>
  //Read back what I have written
  unsigned int write;



  for (unsigned int i = addressRAM0[2]-0x100; i < addressRAM0[2] + 0x100 ; i+=4)
80080b44:	00a00274 	movhi	r2,32777
80080b48:	109b9b04 	addi	r2,r2,28268
80080b4c:	10800217 	ldw	r2,8(r2)
80080b50:	10bfc004 	addi	r2,r2,-256
80080b54:	e0bff015 	stw	r2,-64(fp)
80080b58:	00000c06 	br	80080b8c <main+0x810>
    {
      write = IORD_32DIRECT(DDR2_RAM_BASE, i);
80080b5c:	e0bff017 	ldw	r2,-64(fp)
80080b60:	10800037 	ldwio	r2,0(r2)
80080b64:	e0bff515 	stw	r2,-44(fp)

      printf("LKR address: %x; octal-base: %o; data: %x\n",i,i,write);
80080b68:	e1fff517 	ldw	r7,-44(fp)
80080b6c:	e1bff017 	ldw	r6,-64(fp)
80080b70:	e17ff017 	ldw	r5,-64(fp)
80080b74:	01200274 	movhi	r4,32777
80080b78:	21198e04 	addi	r4,r4,26168
80080b7c:	0081db40 	call	80081db4 <printf>
  //Read back what I have written
  unsigned int write;



  for (unsigned int i = addressRAM0[2]-0x100; i < addressRAM0[2] + 0x100 ; i+=4)
80080b80:	e0bff017 	ldw	r2,-64(fp)
80080b84:	10800104 	addi	r2,r2,4
80080b88:	e0bff015 	stw	r2,-64(fp)
80080b8c:	00a00274 	movhi	r2,32777
80080b90:	109b9b04 	addi	r2,r2,28268
80080b94:	10800217 	ldw	r2,8(r2)
80080b98:	10804004 	addi	r2,r2,256
80080b9c:	e0fff017 	ldw	r3,-64(fp)
80080ba0:	18bfee36 	bltu	r3,r2,80080b5c <main+0x7e0>
      write = IORD_32DIRECT(DDR2_RAM_BASE, i);

      printf("LKR address: %x; octal-base: %o; data: %x\n",i,i,write);
    }

  printf("UDP download PORT0 to RAM success\n");
80080ba4:	01200274 	movhi	r4,32777
80080ba8:	21199904 	addi	r4,r4,26212
80080bac:	0081eb00 	call	80081eb0 <puts>

  for (unsigned int i = addressRAM1[1]-0x100; i <  addressRAM1[1] + 0x100 ; i+=4)
80080bb0:	d0a00117 	ldw	r2,-32764(gp)
80080bb4:	10bfc004 	addi	r2,r2,-256
80080bb8:	e0bff115 	stw	r2,-60(fp)
80080bbc:	00000e06 	br	80080bf8 <main+0x87c>
    {
      write = IORD_32DIRECT(DDR2_RAM_1_BASE, i);
80080bc0:	e0fff117 	ldw	r3,-60(fp)
80080bc4:	00900034 	movhi	r2,16384
80080bc8:	1885883a 	add	r2,r3,r2
80080bcc:	10800037 	ldwio	r2,0(r2)
80080bd0:	e0bff515 	stw	r2,-44(fp)

      printf("NewCHOD address: %x; octal-base: %o; data: %x\n",i,i,write);
80080bd4:	e1fff517 	ldw	r7,-44(fp)
80080bd8:	e1bff117 	ldw	r6,-60(fp)
80080bdc:	e17ff117 	ldw	r5,-60(fp)
80080be0:	01200274 	movhi	r4,32777
80080be4:	2119a204 	addi	r4,r4,26248
80080be8:	0081db40 	call	80081db4 <printf>
      printf("LKR address: %x; octal-base: %o; data: %x\n",i,i,write);
    }

  printf("UDP download PORT0 to RAM success\n");

  for (unsigned int i = addressRAM1[1]-0x100; i <  addressRAM1[1] + 0x100 ; i+=4)
80080bec:	e0bff117 	ldw	r2,-60(fp)
80080bf0:	10800104 	addi	r2,r2,4
80080bf4:	e0bff115 	stw	r2,-60(fp)
80080bf8:	d0a00117 	ldw	r2,-32764(gp)
80080bfc:	10804004 	addi	r2,r2,256
80080c00:	e0fff117 	ldw	r3,-60(fp)
80080c04:	18bfee36 	bltu	r3,r2,80080bc0 <main+0x844>
      write = IORD_32DIRECT(DDR2_RAM_1_BASE, i);

      printf("NewCHOD address: %x; octal-base: %o; data: %x\n",i,i,write);
    }

  printf("UDP download PORT1 to RAM success\n");
80080c08:	01200274 	movhi	r4,32777
80080c0c:	2119ae04 	addi	r4,r4,26296
80080c10:	0081eb00 	call	80081eb0 <puts>


  printf("Initializing DATA transfer to ethernet...\n");
80080c14:	01200274 	movhi	r4,32777
80080c18:	2119b704 	addi	r4,r4,26332
80080c1c:	0081eb00 	call	80081eb0 <puts>

  dev_ptr[0] = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);
80080c20:	01200274 	movhi	r4,32777
80080c24:	2119c204 	addi	r4,r4,26376
80080c28:	0094d900 	call	80094d90 <alt_msgdma_open>
80080c2c:	d0a73715 	stw	r2,-25380(gp)
  dev_ptr[1] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_1_DMA_CSR_NAME);
80080c30:	01200274 	movhi	r4,32777
80080c34:	2119ca04 	addi	r4,r4,26408
80080c38:	0094d900 	call	80094d90 <alt_msgdma_open>
80080c3c:	d0a73815 	stw	r2,-25376(gp)


  //-----------------MAIN SEND LOOP AFTER THIS LINE----------------------------


  len=1024;
80080c40:	00810004 	movi	r2,1024
80080c44:	d0a00215 	stw	r2,-32760(gp)
  alt_u32 g,addr1,addr2;
  g=4096;
80080c48:	00840004 	movi	r2,4096
80080c4c:	e0bff615 	stw	r2,-40(fp)

  alt_u8  addr_update[ndet];
  alt_u32 ninterrupt[ndet];

  ISR_transfer_flag = 0;
80080c50:	d0273405 	stb	zero,-25392(gp)

  //INIT DETECTORS
  for(int i = 0; i < ndet; ++i) {
80080c54:	e03ff215 	stw	zero,-56(fp)
80080c58:	00001006 	br	80080c9c <main+0x920>
    addr_update[i] =1;
80080c5c:	e0fff904 	addi	r3,fp,-28
80080c60:	e0bff217 	ldw	r2,-56(fp)
80080c64:	1885883a 	add	r2,r3,r2
80080c68:	00c00044 	movi	r3,1
80080c6c:	10c00005 	stb	r3,0(r2)
    ninterrupt[i]  =1;
80080c70:	e0bff217 	ldw	r2,-56(fp)
80080c74:	1085883a 	add	r2,r2,r2
80080c78:	1085883a 	add	r2,r2,r2
80080c7c:	e0ffe904 	addi	r3,fp,-92
80080c80:	1885883a 	add	r2,r3,r2
80080c84:	10801204 	addi	r2,r2,72
80080c88:	00c00044 	movi	r3,1
80080c8c:	10c00015 	stw	r3,0(r2)
  alt_u32 ninterrupt[ndet];

  ISR_transfer_flag = 0;

  //INIT DETECTORS
  for(int i = 0; i < ndet; ++i) {
80080c90:	e0bff217 	ldw	r2,-56(fp)
80080c94:	10800044 	addi	r2,r2,1
80080c98:	e0bff215 	stw	r2,-56(fp)
80080c9c:	e0bff217 	ldw	r2,-56(fp)
80080ca0:	10800150 	cmplti	r2,r2,5
80080ca4:	103fed1e 	bne	r2,zero,80080c5c <main+0x8e0>

  //NOTE: TO BE CHANGED!!!!!!!!!!!
  //18-june-2020 I am testing the writing process in the right ram addresses,
  //but i still have only 2 DMA interfaces and 2 eth ports: dev_ptr and a_descriptor_ptr cannot be changed.

  rd_adr_p[2] = (alt_u32 *) addressRAM0[2];
80080ca8:	00a00274 	movhi	r2,32777
80080cac:	109b9b04 	addi	r2,r2,28268
80080cb0:	10800217 	ldw	r2,8(r2)
80080cb4:	1007883a 	mov	r3,r2
80080cb8:	00a002b4 	movhi	r2,32778
80080cbc:	10aa3404 	addi	r2,r2,-22320
80080cc0:	10c00215 	stw	r3,8(r2)
  rd_adr_p[4] = (alt_u32 *) addressRAM1[1];
80080cc4:	d0a00117 	ldw	r2,-32764(gp)
80080cc8:	1007883a 	mov	r3,r2
80080ccc:	00a002b4 	movhi	r2,32778
80080cd0:	10aa3404 	addi	r2,r2,-22320
80080cd4:	10c00415 	stw	r3,16(r2)

  printf("Port 0: First init starting from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[2],g,IORD_32DIRECT(DDR2_RAM_BASE,addressRAM0[2]));
80080cd8:	00a002b4 	movhi	r2,32778
80080cdc:	10aa3404 	addi	r2,r2,-22320
80080ce0:	10800217 	ldw	r2,8(r2)
80080ce4:	1007883a 	mov	r3,r2
80080ce8:	00a00274 	movhi	r2,32777
80080cec:	109b9b04 	addi	r2,r2,28268
80080cf0:	10800217 	ldw	r2,8(r2)
80080cf4:	10800037 	ldwio	r2,0(r2)
80080cf8:	100f883a 	mov	r7,r2
80080cfc:	e1bff617 	ldw	r6,-40(fp)
80080d00:	180b883a 	mov	r5,r3
80080d04:	01200274 	movhi	r4,32777
80080d08:	2119d304 	addi	r4,r4,26444
80080d0c:	0081db40 	call	80081db4 <printf>
  printf("Port 1: First init starting from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[4],g,IORD_32DIRECT(DDR2_RAM_1_BASE,addressRAM1[1]));
80080d10:	00a002b4 	movhi	r2,32778
80080d14:	10aa3404 	addi	r2,r2,-22320
80080d18:	10800417 	ldw	r2,16(r2)
80080d1c:	1009883a 	mov	r4,r2
80080d20:	d0e00117 	ldw	r3,-32764(gp)
80080d24:	00900034 	movhi	r2,16384
80080d28:	1885883a 	add	r2,r3,r2
80080d2c:	10800037 	ldwio	r2,0(r2)
80080d30:	100f883a 	mov	r7,r2
80080d34:	e1bff617 	ldw	r6,-40(fp)
80080d38:	200b883a 	mov	r5,r4
80080d3c:	01200274 	movhi	r4,32777
80080d40:	2119e304 	addi	r4,r4,26508
80080d44:	0081db40 	call	80081db4 <printf>

  if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[0], a_descriptor_ptr[0], rd_adr_p[2], g, control)==-EINVAL) printf("invalid arg\n");
80080d48:	d0e73717 	ldw	r3,-25380(gp)
80080d4c:	d1273b17 	ldw	r4,-25364(gp)
80080d50:	00a002b4 	movhi	r2,32778
80080d54:	10aa3404 	addi	r2,r2,-22320
80080d58:	11400217 	ldw	r5,8(r2)
80080d5c:	d0a73217 	ldw	r2,-25400(gp)
80080d60:	d8800015 	stw	r2,0(sp)
80080d64:	e1fff617 	ldw	r7,-40(fp)
80080d68:	280d883a 	mov	r6,r5
80080d6c:	200b883a 	mov	r5,r4
80080d70:	1809883a 	mov	r4,r3
80080d74:	0093e1c0 	call	80093e1c <alt_msgdma_construct_standard_mm_to_st_descriptor>
80080d78:	10bffa98 	cmpnei	r2,r2,-22
80080d7c:	1000031e 	bne	r2,zero,80080d8c <main+0xa10>
80080d80:	01200274 	movhi	r4,32777
80080d84:	2119f304 	addi	r4,r4,26572
80080d88:	0081eb00 	call	80081eb0 <puts>
  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[0],a_descriptor_ptr[0]);
80080d8c:	d0a73717 	ldw	r2,-25380(gp)
80080d90:	d0e73b17 	ldw	r3,-25364(gp)
80080d94:	180b883a 	mov	r5,r3
80080d98:	1009883a 	mov	r4,r2
80080d9c:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
80080da0:	d0a00915 	stw	r2,-32732(gp)
  printf ("Port 0 status: %d\n", (int)status);
80080da4:	d0a00917 	ldw	r2,-32732(gp)
80080da8:	100b883a 	mov	r5,r2
80080dac:	01200274 	movhi	r4,32777
80080db0:	2119f604 	addi	r4,r4,26584
80080db4:	0081db40 	call	80081db4 <printf>

  if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[1], a_descriptor_ptr[1], rd_adr_p[4], g, control)==-EINVAL) printf("invalid arg\n");
80080db8:	d0e73817 	ldw	r3,-25376(gp)
80080dbc:	d1273c17 	ldw	r4,-25360(gp)
80080dc0:	00a002b4 	movhi	r2,32778
80080dc4:	10aa3404 	addi	r2,r2,-22320
80080dc8:	11400417 	ldw	r5,16(r2)
80080dcc:	d0a73217 	ldw	r2,-25400(gp)
80080dd0:	d8800015 	stw	r2,0(sp)
80080dd4:	e1fff617 	ldw	r7,-40(fp)
80080dd8:	280d883a 	mov	r6,r5
80080ddc:	200b883a 	mov	r5,r4
80080de0:	1809883a 	mov	r4,r3
80080de4:	0093e1c0 	call	80093e1c <alt_msgdma_construct_standard_mm_to_st_descriptor>
80080de8:	10bffa98 	cmpnei	r2,r2,-22
80080dec:	1000031e 	bne	r2,zero,80080dfc <main+0xa80>
80080df0:	01200274 	movhi	r4,32777
80080df4:	2119f304 	addi	r4,r4,26572
80080df8:	0081eb00 	call	80081eb0 <puts>
  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[1],a_descriptor_ptr[1]);
80080dfc:	d0a73817 	ldw	r2,-25376(gp)
80080e00:	d0e73c17 	ldw	r3,-25360(gp)
80080e04:	180b883a 	mov	r5,r3
80080e08:	1009883a 	mov	r4,r2
80080e0c:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
80080e10:	d0a00915 	stw	r2,-32732(gp)
  printf ("Port 1 status: %d\n", (int)status);
80080e14:	d0a00917 	ldw	r2,-32732(gp)
80080e18:	100b883a 	mov	r5,r2
80080e1c:	01200274 	movhi	r4,32777
80080e20:	2119fb04 	addi	r4,r4,26604
80080e24:	0081db40 	call	80081db4 <printf>

  printf(" Are you ready to start the burst? ");
80080e28:	01200274 	movhi	r4,32777
80080e2c:	211a0004 	addi	r4,r4,26624
80080e30:	0081db40 	call	80081db4 <printf>

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
80080e34:	d0a00d17 	ldw	r2,-32716(gp)
80080e38:	10800117 	ldw	r2,4(r2)
80080e3c:	100d883a 	mov	r6,r2
80080e40:	01400104 	movi	r5,4
80080e44:	d1273604 	addi	r4,gp,-25384
80080e48:	00802ec0 	call	800802ec <GetInputString>
    printf("you wrote: %c\n",entry[0]);
80080e4c:	d0a73603 	ldbu	r2,-25384(gp)
80080e50:	10803fcc 	andi	r2,r2,255
80080e54:	1080201c 	xori	r2,r2,128
80080e58:	10bfe004 	addi	r2,r2,-128
80080e5c:	100b883a 	mov	r5,r2
80080e60:	01200274 	movhi	r4,32777
80080e64:	21195904 	addi	r4,r4,25956
80080e68:	0081db40 	call	80081db4 <printf>
    if(entry[0] == 'y') {
80080e6c:	d0a73603 	ldbu	r2,-25384(gp)
80080e70:	10803fcc 	andi	r2,r2,255
80080e74:	1080201c 	xori	r2,r2,128
80080e78:	10bfe004 	addi	r2,r2,-128
80080e7c:	10801e58 	cmpnei	r2,r2,121
80080e80:	10000126 	beq	r2,zero,80080e88 <main+0xb0c>
      break;
    }
  }
80080e84:	003feb06 	br	80080e34 <main+0xab8>

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
    if(entry[0] == 'y') {
      break;
80080e88:	0001883a 	nop
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80080e8c:	d0e74b17 	ldw	r3,-25300(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80080e90:	d0a74a17 	ldw	r2,-25304(gp)
    }
  }

  alt_u32 SOB = alt_nticks() * alt_ticks_per_second();
80080e94:	1885383a 	mul	r2,r3,r2
80080e98:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80080e9c:	d0e74b17 	ldw	r3,-25300(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80080ea0:	d0a74a17 	ldw	r2,-25304(gp)
  alt_u32 EOB = alt_nticks() * alt_ticks_per_second();
80080ea4:	1885383a 	mul	r2,r3,r2
80080ea8:	e0bff815 	stw	r2,-32(fp)



  IOWR(CTRL_SIG_BASE,0,1); //SOB
80080eac:	00c00044 	movi	r3,1
80080eb0:	00a00434 	movhi	r2,32784
80080eb4:	10842804 	addi	r2,r2,4256
80080eb8:	10c00035 	stwio	r3,0(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80080ebc:	d0e74b17 	ldw	r3,-25300(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80080ec0:	d0a74a17 	ldw	r2,-25304(gp)
  printf("SOB, time: %lu \n",alt_nticks()* alt_ticks_per_second());
80080ec4:	1885383a 	mul	r2,r3,r2
80080ec8:	100b883a 	mov	r5,r2
80080ecc:	01200274 	movhi	r4,32777
80080ed0:	211a0904 	addi	r4,r4,26660
80080ed4:	0081db40 	call	80081db4 <printf>

  while(1) {

    if(addr_update[2]) {
80080ed8:	e0bff983 	ldbu	r2,-26(fp)
80080edc:	10803fcc 	andi	r2,r2,255
80080ee0:	10001f26 	beq	r2,zero,80080f60 <main+0xbe4>
      //Preparing new transer and waiting for ISR
      g=4096;
80080ee4:	00840004 	movi	r2,4096
80080ee8:	e0bff615 	stw	r2,-40(fp)
      rd_adr_p[2] = rd_adr_p[2] + g/4;
80080eec:	00a002b4 	movhi	r2,32778
80080ef0:	10aa3404 	addi	r2,r2,-22320
80080ef4:	10c00217 	ldw	r3,8(r2)
80080ef8:	e0bff617 	ldw	r2,-40(fp)
80080efc:	1004d0ba 	srli	r2,r2,2
80080f00:	1085883a 	add	r2,r2,r2
80080f04:	1085883a 	add	r2,r2,r2
80080f08:	1887883a 	add	r3,r3,r2
80080f0c:	00a002b4 	movhi	r2,32778
80080f10:	10aa3404 	addi	r2,r2,-22320
80080f14:	10c00215 	stw	r3,8(r2)
      // printf("ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p,g,IORD_32DIRECT(DDR2_RAM_BASE, rd_adr_p[0] + g/4));
      if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[0], a_descriptor_ptr[0], rd_adr_p[2], g, control)==-EINVAL) printf("invalid arg\n");
80080f18:	d0e73717 	ldw	r3,-25380(gp)
80080f1c:	d1273b17 	ldw	r4,-25364(gp)
80080f20:	00a002b4 	movhi	r2,32778
80080f24:	10aa3404 	addi	r2,r2,-22320
80080f28:	11400217 	ldw	r5,8(r2)
80080f2c:	d0a73217 	ldw	r2,-25400(gp)
80080f30:	d8800015 	stw	r2,0(sp)
80080f34:	e1fff617 	ldw	r7,-40(fp)
80080f38:	280d883a 	mov	r6,r5
80080f3c:	200b883a 	mov	r5,r4
80080f40:	1809883a 	mov	r4,r3
80080f44:	0093e1c0 	call	80093e1c <alt_msgdma_construct_standard_mm_to_st_descriptor>
80080f48:	10bffa98 	cmpnei	r2,r2,-22
80080f4c:	1000031e 	bne	r2,zero,80080f5c <main+0xbe0>
80080f50:	01200274 	movhi	r4,32777
80080f54:	2119f304 	addi	r4,r4,26572
80080f58:	0081eb00 	call	80081eb0 <puts>
      addr_update[2] = 0;
80080f5c:	e03ff985 	stb	zero,-26(fp)
    }

    if(addr_update[4]) {
80080f60:	e0bffa03 	ldbu	r2,-24(fp)
80080f64:	10803fcc 	andi	r2,r2,255
80080f68:	10001f26 	beq	r2,zero,80080fe8 <main+0xc6c>
      //Preparing new transer and waiting for ISR
      g=4096;
80080f6c:	00840004 	movi	r2,4096
80080f70:	e0bff615 	stw	r2,-40(fp)
      // rd_adr_p = (alt_u32 *) addr2 + g*ninterrupt; //address: starting point + fix transfering
      rd_adr_p[4] = rd_adr_p[4] + g/4;
80080f74:	00a002b4 	movhi	r2,32778
80080f78:	10aa3404 	addi	r2,r2,-22320
80080f7c:	10c00417 	ldw	r3,16(r2)
80080f80:	e0bff617 	ldw	r2,-40(fp)
80080f84:	1004d0ba 	srli	r2,r2,2
80080f88:	1085883a 	add	r2,r2,r2
80080f8c:	1085883a 	add	r2,r2,r2
80080f90:	1887883a 	add	r3,r3,r2
80080f94:	00a002b4 	movhi	r2,32778
80080f98:	10aa3404 	addi	r2,r2,-22320
80080f9c:	10c00415 	stw	r3,16(r2)
      // printf("ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p,g,IORD_32DIRECT(DDR2_RAM_BASE, rd_adr_p[0] + g/4));
      if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[1], a_descriptor_ptr[1], rd_adr_p[4], g, control)==-EINVAL) printf("invalid arg\n");
80080fa0:	d0e73817 	ldw	r3,-25376(gp)
80080fa4:	d1273c17 	ldw	r4,-25360(gp)
80080fa8:	00a002b4 	movhi	r2,32778
80080fac:	10aa3404 	addi	r2,r2,-22320
80080fb0:	11400417 	ldw	r5,16(r2)
80080fb4:	d0a73217 	ldw	r2,-25400(gp)
80080fb8:	d8800015 	stw	r2,0(sp)
80080fbc:	e1fff617 	ldw	r7,-40(fp)
80080fc0:	280d883a 	mov	r6,r5
80080fc4:	200b883a 	mov	r5,r4
80080fc8:	1809883a 	mov	r4,r3
80080fcc:	0093e1c0 	call	80093e1c <alt_msgdma_construct_standard_mm_to_st_descriptor>
80080fd0:	10bffa98 	cmpnei	r2,r2,-22
80080fd4:	1000031e 	bne	r2,zero,80080fe4 <main+0xc68>
80080fd8:	01200274 	movhi	r4,32777
80080fdc:	2119f304 	addi	r4,r4,26572
80080fe0:	0081eb00 	call	80081eb0 <puts>
      addr_update[4] = 0;
80080fe4:	e03ffa05 	stb	zero,-24(fp)
    }

    if((ISR_transfer_flag&1) == 1 ) { //Primitive FIFO usedw < 0x80: send new data
80080fe8:	d0a73403 	ldbu	r2,-25392(gp)
80080fec:	10803fcc 	andi	r2,r2,255
80080ff0:	1080004c 	andi	r2,r2,1
80080ff4:	10000f26 	beq	r2,zero,80081034 <main+0xcb8>
      // printf("!!!!!!!!!!!!ISR Send packet\n");
      status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[0],a_descriptor_ptr[0]);
80080ff8:	d0a73717 	ldw	r2,-25380(gp)
80080ffc:	d0e73b17 	ldw	r3,-25364(gp)
80081000:	180b883a 	mov	r5,r3
80081004:	1009883a 	mov	r4,r2
80081008:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
8008100c:	d0a00915 	stw	r2,-32732(gp)
      ISR_transfer_flag &= ~(1UL << 0);
80081010:	d0e73403 	ldbu	r3,-25392(gp)
80081014:	00bfff84 	movi	r2,-2
80081018:	1884703a 	and	r2,r3,r2
8008101c:	d0a73405 	stb	r2,-25392(gp)
      addr_update[2] = 1;
80081020:	00800044 	movi	r2,1
80081024:	e0bff985 	stb	r2,-26(fp)
      ninterrupt[0]+=1;
80081028:	e0bffb17 	ldw	r2,-20(fp)
8008102c:	10800044 	addi	r2,r2,1
80081030:	e0bffb15 	stw	r2,-20(fp)
    }

    if((ISR_transfer_flag&2) == 2 ) { //Primitive FIFO usedw < 0x80: send new data
80081034:	d0a73403 	ldbu	r2,-25392(gp)
80081038:	10803fcc 	andi	r2,r2,255
8008103c:	1080008c 	andi	r2,r2,2
80081040:	10000f26 	beq	r2,zero,80081080 <main+0xd04>
      // printf("!!!!!!!!!!!!ISR Send packet\n");
      status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[1],a_descriptor_ptr[1]);
80081044:	d0a73817 	ldw	r2,-25376(gp)
80081048:	d0e73c17 	ldw	r3,-25360(gp)
8008104c:	180b883a 	mov	r5,r3
80081050:	1009883a 	mov	r4,r2
80081054:	0094fa80 	call	80094fa8 <alt_msgdma_standard_descriptor_async_transfer>
80081058:	d0a00915 	stw	r2,-32732(gp)
      ISR_transfer_flag &= ~(1UL << 1);
8008105c:	d0e73403 	ldbu	r3,-25392(gp)
80081060:	00bfff44 	movi	r2,-3
80081064:	1884703a 	and	r2,r3,r2
80081068:	d0a73405 	stb	r2,-25392(gp)
      addr_update[4] = 1;
8008106c:	00800044 	movi	r2,1
80081070:	e0bffa05 	stb	r2,-24(fp)
      ninterrupt[1]+=1;
80081074:	e0bffc17 	ldw	r2,-16(fp)
80081078:	10800044 	addi	r2,r2,1
8008107c:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80081080:	d0e74b17 	ldw	r3,-25300(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80081084:	d0a74a17 	ldw	r2,-25304(gp)
    }

    EOB = alt_nticks() * alt_ticks_per_second();
80081088:	1885383a 	mul	r2,r3,r2
8008108c:	e0bff815 	stw	r2,-32(fp)
    if(EOB-SOB > 6.5e6) break;
80081090:	e0fff817 	ldw	r3,-32(fp)
80081094:	e0bff717 	ldw	r2,-36(fp)
80081098:	1885c83a 	sub	r2,r3,r2
8008109c:	1009883a 	mov	r4,r2
800810a0:	0081b800 	call	80081b80 <__floatunsidf>
800810a4:	1011883a 	mov	r8,r2
800810a8:	1813883a 	mov	r9,r3
800810ac:	000d883a 	mov	r6,zero
800810b0:	01d05674 	movhi	r7,16729
800810b4:	39f2ea04 	addi	r7,r7,-13400
800810b8:	4009883a 	mov	r4,r8
800810bc:	480b883a 	mov	r5,r9
800810c0:	008138c0 	call	8008138c <__gedf2>
800810c4:	00800116 	blt	zero,r2,800810cc <main+0xd50>
  }
800810c8:	003f8306 	br	80080ed8 <main+0xb5c>
      addr_update[4] = 1;
      ninterrupt[1]+=1;
    }

    EOB = alt_nticks() * alt_ticks_per_second();
    if(EOB-SOB > 6.5e6) break;
800810cc:	0001883a 	nop
  }

  IOWR(CTRL_SIG_BASE,0,0);
800810d0:	0007883a 	mov	r3,zero
800810d4:	00a00434 	movhi	r2,32784
800810d8:	10842804 	addi	r2,r2,4256
800810dc:	10c00035 	stwio	r3,0(r2)

  printf("Port0: ninterrupt: %d \n",ninterrupt[0]);
800810e0:	e0bffb17 	ldw	r2,-20(fp)
800810e4:	100b883a 	mov	r5,r2
800810e8:	01200274 	movhi	r4,32777
800810ec:	211a0e04 	addi	r4,r4,26680
800810f0:	0081db40 	call	80081db4 <printf>
  printf("Port1: ninterrupt: %d \n",ninterrupt[1]);
800810f4:	e0bffc17 	ldw	r2,-16(fp)
800810f8:	100b883a 	mov	r5,r2
800810fc:	01200274 	movhi	r4,32777
80081100:	211a1404 	addi	r4,r4,26704
80081104:	0081db40 	call	80081db4 <printf>
  printf("EOB sent: burst long %f seconds\n",(EOB-SOB)*0.000001);
80081108:	e0fff817 	ldw	r3,-32(fp)
8008110c:	e0bff717 	ldw	r2,-36(fp)
80081110:	1885c83a 	sub	r2,r3,r2
80081114:	1009883a 	mov	r4,r2
80081118:	0081b800 	call	80081b80 <__floatunsidf>
8008111c:	1011883a 	mov	r8,r2
80081120:	1813883a 	mov	r9,r3
80081124:	01a82db4 	movhi	r6,41142
80081128:	31bb6344 	addi	r6,r6,-4723
8008112c:	01cfac74 	movhi	r7,16049
80081130:	39f1bdc4 	addi	r7,r7,-14601
80081134:	4009883a 	mov	r4,r8
80081138:	480b883a 	mov	r5,r9
8008113c:	00814680 	call	80081468 <__muldf3>
80081140:	1009883a 	mov	r4,r2
80081144:	180b883a 	mov	r5,r3
80081148:	2005883a 	mov	r2,r4
8008114c:	2807883a 	mov	r3,r5
80081150:	100b883a 	mov	r5,r2
80081154:	180d883a 	mov	r6,r3
80081158:	01200274 	movhi	r4,32777
8008115c:	211a1a04 	addi	r4,r4,26728
80081160:	0081db40 	call	80081db4 <printf>


  printf(" Would you like to reset?\n ");
80081164:	01200274 	movhi	r4,32777
80081168:	211a2304 	addi	r4,r4,26764
8008116c:	0081db40 	call	80081db4 <printf>
   while(1) {
     GetInputString( entry, sizeof(entry), stdin );
80081170:	d0a00d17 	ldw	r2,-32716(gp)
80081174:	10800117 	ldw	r2,4(r2)
80081178:	100d883a 	mov	r6,r2
8008117c:	01400104 	movi	r5,4
80081180:	d1273604 	addi	r4,gp,-25384
80081184:	00802ec0 	call	800802ec <GetInputString>
     printf("you wrote: %c\n",entry[0]);
80081188:	d0a73603 	ldbu	r2,-25384(gp)
8008118c:	10803fcc 	andi	r2,r2,255
80081190:	1080201c 	xori	r2,r2,128
80081194:	10bfe004 	addi	r2,r2,-128
80081198:	100b883a 	mov	r5,r2
8008119c:	01200274 	movhi	r4,32777
800811a0:	21195904 	addi	r4,r4,25956
800811a4:	0081db40 	call	80081db4 <printf>
     if(entry[0] == 'y') {
800811a8:	d0a73603 	ldbu	r2,-25384(gp)
800811ac:	10803fcc 	andi	r2,r2,255
800811b0:	1080201c 	xori	r2,r2,128
800811b4:	10bfe004 	addi	r2,r2,-128
800811b8:	10801e58 	cmpnei	r2,r2,121
800811bc:	103fec1e 	bne	r2,zero,80081170 <main+0xdf4>
    	 HAL_PLATFORM_RESET();
800811c0:	0001703a 	wrctl	status,zero
800811c4:	000170fa 	wrctl	ienable,zero
800811c8:	00a00234 	movhi	r2,32776
800811cc:	103ee83a 	callr	r2
     }
   }
800811d0:	003fe706 	br	80081170 <main+0xdf4>

800811d4 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
800811d4:	defffd04 	addi	sp,sp,-12
800811d8:	dfc00215 	stw	ra,8(sp)
800811dc:	df000115 	stw	fp,4(sp)
800811e0:	df000104 	addi	fp,sp,4
800811e4:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
800811e8:	e13fff17 	ldw	r4,-4(fp)
800811ec:	0081db40 	call	80081db4 <printf>
}
800811f0:	0001883a 	nop
800811f4:	e037883a 	mov	sp,fp
800811f8:	dfc00117 	ldw	ra,4(sp)
800811fc:	df000017 	ldw	fp,0(sp)
80081200:	dec00204 	addi	sp,sp,8
80081204:	f800283a 	ret

80081208 <myprintf>:





int myprintf(char *format, ...){
80081208:	deff7804 	addi	sp,sp,-544
8008120c:	dfc08415 	stw	ra,528(sp)
80081210:	df008315 	stw	fp,524(sp)
80081214:	df008304 	addi	fp,sp,524
80081218:	e13fff15 	stw	r4,-4(fp)
8008121c:	e1400215 	stw	r5,8(fp)
80081220:	e1800315 	stw	r6,12(fp)
80081224:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
80081228:	e0800204 	addi	r2,fp,8
8008122c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
80081230:	e0fffe17 	ldw	r3,-8(fp)
80081234:	e0bf7e04 	addi	r2,fp,-520
80081238:	180f883a 	mov	r7,r3
8008123c:	e1bfff17 	ldw	r6,-4(fp)
80081240:	01408004 	movi	r5,512
80081244:	1009883a 	mov	r4,r2
80081248:	00866400 	call	80086640 <vsnprintf>
8008124c:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
80081250:	e0bf7e04 	addi	r2,fp,-520
80081254:	1009883a 	mov	r4,r2
80081258:	00811d40 	call	800811d4 <debug_output>

    return rc;    
8008125c:	e0bf7d17 	ldw	r2,-524(fp)
}
80081260:	e037883a 	mov	sp,fp
80081264:	dfc00117 	ldw	ra,4(sp)
80081268:	df000017 	ldw	fp,0(sp)
8008126c:	dec00504 	addi	sp,sp,20
80081270:	f800283a 	ret

80081274 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
80081274:	defff704 	addi	sp,sp,-36
80081278:	dfc00815 	stw	ra,32(sp)
8008127c:	df000715 	stw	fp,28(sp)
80081280:	df000704 	addi	fp,sp,28
80081284:	e13ffe15 	stw	r4,-8(fp)
80081288:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
8008128c:	e03ff915 	stw	zero,-28(fp)
80081290:	00001106 	br	800812d8 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
80081294:	e0bff917 	ldw	r2,-28(fp)
80081298:	e0fffe17 	ldw	r3,-8(fp)
8008129c:	1885883a 	add	r2,r3,r2
800812a0:	10800003 	ldbu	r2,0(r2)
800812a4:	10c03fcc 	andi	r3,r2,255
800812a8:	e0bffa04 	addi	r2,fp,-24
800812ac:	180d883a 	mov	r6,r3
800812b0:	01600274 	movhi	r5,32777
800812b4:	295a2a04 	addi	r5,r5,26792
800812b8:	1009883a 	mov	r4,r2
800812bc:	0081fa40 	call	80081fa4 <sprintf>
        DEBUG((szText));
800812c0:	e0bffa04 	addi	r2,fp,-24
800812c4:	1009883a 	mov	r4,r2
800812c8:	00812080 	call	80081208 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
800812cc:	e0bff917 	ldw	r2,-28(fp)
800812d0:	10800044 	addi	r2,r2,1
800812d4:	e0bff915 	stw	r2,-28(fp)
800812d8:	e0fff917 	ldw	r3,-28(fp)
800812dc:	e0bfff17 	ldw	r2,-4(fp)
800812e0:	18bfec16 	blt	r3,r2,80081294 <myprintf_hexarray+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
800812e4:	e0bfff17 	ldw	r2,-4(fp)
}
800812e8:	e037883a 	mov	sp,fp
800812ec:	dfc00117 	ldw	ra,4(sp)
800812f0:	df000017 	ldw	fp,0(sp)
800812f4:	dec00204 	addi	sp,sp,8
800812f8:	f800283a 	ret

800812fc <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
800812fc:	defff704 	addi	sp,sp,-36
80081300:	dfc00815 	stw	ra,32(sp)
80081304:	df000715 	stw	fp,28(sp)
80081308:	df000704 	addi	fp,sp,28
8008130c:	e13ffe15 	stw	r4,-8(fp)
80081310:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
80081314:	e03ff915 	stw	zero,-28(fp)
80081318:	00001306 	br	80081368 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
8008131c:	e0bff917 	ldw	r2,-28(fp)
80081320:	1085883a 	add	r2,r2,r2
80081324:	1085883a 	add	r2,r2,r2
80081328:	1007883a 	mov	r3,r2
8008132c:	e0bffe17 	ldw	r2,-8(fp)
80081330:	10c5883a 	add	r2,r2,r3
80081334:	10c00017 	ldw	r3,0(r2)
80081338:	e0bffa04 	addi	r2,fp,-24
8008133c:	180d883a 	mov	r6,r3
80081340:	01600274 	movhi	r5,32777
80081344:	295a2c04 	addi	r5,r5,26800
80081348:	1009883a 	mov	r4,r2
8008134c:	0081fa40 	call	80081fa4 <sprintf>
        DEBUG((szText));
80081350:	e0bffa04 	addi	r2,fp,-24
80081354:	1009883a 	mov	r4,r2
80081358:	00812080 	call	80081208 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
8008135c:	e0bff917 	ldw	r2,-28(fp)
80081360:	10800044 	addi	r2,r2,1
80081364:	e0bff915 	stw	r2,-28(fp)
80081368:	e0fff917 	ldw	r3,-28(fp)
8008136c:	e0bfff17 	ldw	r2,-4(fp)
80081370:	18bfea16 	blt	r3,r2,8008131c <myprintf_dwordarray+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
80081374:	e0bfff17 	ldw	r2,-4(fp)
}
80081378:	e037883a 	mov	sp,fp
8008137c:	dfc00117 	ldw	ra,4(sp)
80081380:	df000017 	ldw	fp,0(sp)
80081384:	dec00204 	addi	sp,sp,8
80081388:	f800283a 	ret

8008138c <__gedf2>:
8008138c:	2804d53a 	srli	r2,r5,20
80081390:	3806d53a 	srli	r3,r7,20
80081394:	02000434 	movhi	r8,16
80081398:	423fffc4 	addi	r8,r8,-1
8008139c:	1081ffcc 	andi	r2,r2,2047
800813a0:	0241ffc4 	movi	r9,2047
800813a4:	2a14703a 	and	r10,r5,r8
800813a8:	18c1ffcc 	andi	r3,r3,2047
800813ac:	3a10703a 	and	r8,r7,r8
800813b0:	280ad7fa 	srli	r5,r5,31
800813b4:	380ed7fa 	srli	r7,r7,31
800813b8:	12401d26 	beq	r2,r9,80081430 <__gedf2+0xa4>
800813bc:	0241ffc4 	movi	r9,2047
800813c0:	1a401226 	beq	r3,r9,8008140c <__gedf2+0x80>
800813c4:	1000081e 	bne	r2,zero,800813e8 <__gedf2+0x5c>
800813c8:	2296b03a 	or	r11,r4,r10
800813cc:	5813003a 	cmpeq	r9,r11,zero
800813d0:	1800091e 	bne	r3,zero,800813f8 <__gedf2+0x6c>
800813d4:	3218b03a 	or	r12,r6,r8
800813d8:	6000071e 	bne	r12,zero,800813f8 <__gedf2+0x6c>
800813dc:	0005883a 	mov	r2,zero
800813e0:	5800101e 	bne	r11,zero,80081424 <__gedf2+0x98>
800813e4:	f800283a 	ret
800813e8:	18000c1e 	bne	r3,zero,8008141c <__gedf2+0x90>
800813ec:	3212b03a 	or	r9,r6,r8
800813f0:	48000c26 	beq	r9,zero,80081424 <__gedf2+0x98>
800813f4:	0013883a 	mov	r9,zero
800813f8:	39c03fcc 	andi	r7,r7,255
800813fc:	48000826 	beq	r9,zero,80081420 <__gedf2+0x94>
80081400:	38000926 	beq	r7,zero,80081428 <__gedf2+0x9c>
80081404:	00800044 	movi	r2,1
80081408:	f800283a 	ret
8008140c:	3212b03a 	or	r9,r6,r8
80081410:	483fec26 	beq	r9,zero,800813c4 <__gedf2+0x38>
80081414:	00bfff84 	movi	r2,-2
80081418:	f800283a 	ret
8008141c:	39c03fcc 	andi	r7,r7,255
80081420:	29c00626 	beq	r5,r7,8008143c <__gedf2+0xb0>
80081424:	283ff726 	beq	r5,zero,80081404 <__gedf2+0x78>
80081428:	00bfffc4 	movi	r2,-1
8008142c:	f800283a 	ret
80081430:	2292b03a 	or	r9,r4,r10
80081434:	483fe126 	beq	r9,zero,800813bc <__gedf2+0x30>
80081438:	003ff606 	br	80081414 <__gedf2+0x88>
8008143c:	18bff916 	blt	r3,r2,80081424 <__gedf2+0x98>
80081440:	10c00316 	blt	r2,r3,80081450 <__gedf2+0xc4>
80081444:	42bff736 	bltu	r8,r10,80081424 <__gedf2+0x98>
80081448:	52000326 	beq	r10,r8,80081458 <__gedf2+0xcc>
8008144c:	5200042e 	bgeu	r10,r8,80081460 <__gedf2+0xd4>
80081450:	283fec1e 	bne	r5,zero,80081404 <__gedf2+0x78>
80081454:	003ff406 	br	80081428 <__gedf2+0x9c>
80081458:	313ff236 	bltu	r6,r4,80081424 <__gedf2+0x98>
8008145c:	21bffc36 	bltu	r4,r6,80081450 <__gedf2+0xc4>
80081460:	0005883a 	mov	r2,zero
80081464:	f800283a 	ret

80081468 <__muldf3>:
80081468:	defff304 	addi	sp,sp,-52
8008146c:	2804d53a 	srli	r2,r5,20
80081470:	dd800915 	stw	r22,36(sp)
80081474:	282cd7fa 	srli	r22,r5,31
80081478:	dc000315 	stw	r16,12(sp)
8008147c:	04000434 	movhi	r16,16
80081480:	dd400815 	stw	r21,32(sp)
80081484:	dc800515 	stw	r18,20(sp)
80081488:	843fffc4 	addi	r16,r16,-1
8008148c:	dfc00c15 	stw	ra,48(sp)
80081490:	df000b15 	stw	fp,44(sp)
80081494:	ddc00a15 	stw	r23,40(sp)
80081498:	dd000715 	stw	r20,28(sp)
8008149c:	dcc00615 	stw	r19,24(sp)
800814a0:	dc400415 	stw	r17,16(sp)
800814a4:	1481ffcc 	andi	r18,r2,2047
800814a8:	2c20703a 	and	r16,r5,r16
800814ac:	b02b883a 	mov	r21,r22
800814b0:	b2403fcc 	andi	r9,r22,255
800814b4:	90006026 	beq	r18,zero,80081638 <__muldf3+0x1d0>
800814b8:	0081ffc4 	movi	r2,2047
800814bc:	2029883a 	mov	r20,r4
800814c0:	90803626 	beq	r18,r2,8008159c <__muldf3+0x134>
800814c4:	80800434 	orhi	r2,r16,16
800814c8:	100490fa 	slli	r2,r2,3
800814cc:	2020d77a 	srli	r16,r4,29
800814d0:	202890fa 	slli	r20,r4,3
800814d4:	94bf0044 	addi	r18,r18,-1023
800814d8:	80a0b03a 	or	r16,r16,r2
800814dc:	0027883a 	mov	r19,zero
800814e0:	0039883a 	mov	fp,zero
800814e4:	3804d53a 	srli	r2,r7,20
800814e8:	382ed7fa 	srli	r23,r7,31
800814ec:	04400434 	movhi	r17,16
800814f0:	8c7fffc4 	addi	r17,r17,-1
800814f4:	1081ffcc 	andi	r2,r2,2047
800814f8:	3011883a 	mov	r8,r6
800814fc:	3c62703a 	and	r17,r7,r17
80081500:	ba803fcc 	andi	r10,r23,255
80081504:	10006d26 	beq	r2,zero,800816bc <__muldf3+0x254>
80081508:	00c1ffc4 	movi	r3,2047
8008150c:	10c06526 	beq	r2,r3,800816a4 <__muldf3+0x23c>
80081510:	88c00434 	orhi	r3,r17,16
80081514:	180690fa 	slli	r3,r3,3
80081518:	3022d77a 	srli	r17,r6,29
8008151c:	301090fa 	slli	r8,r6,3
80081520:	10bf0044 	addi	r2,r2,-1023
80081524:	88e2b03a 	or	r17,r17,r3
80081528:	000b883a 	mov	r5,zero
8008152c:	9085883a 	add	r2,r18,r2
80081530:	2cc8b03a 	or	r4,r5,r19
80081534:	00c003c4 	movi	r3,15
80081538:	bdacf03a 	xor	r22,r23,r22
8008153c:	12c00044 	addi	r11,r2,1
80081540:	19009936 	bltu	r3,r4,800817a8 <__muldf3+0x340>
80081544:	200890ba 	slli	r4,r4,2
80081548:	00e00234 	movhi	r3,32776
8008154c:	18c55704 	addi	r3,r3,5468
80081550:	20c9883a 	add	r4,r4,r3
80081554:	20c00017 	ldw	r3,0(r4)
80081558:	1800683a 	jmp	r3
8008155c:	800817a8 	cmpgeui	zero,r16,8286
80081560:	800815bc 	xorhi	zero,r16,8278
80081564:	800815bc 	xorhi	zero,r16,8278
80081568:	800815b8 	rdprs	zero,r16,8278
8008156c:	80081784 	addi	zero,r16,8286
80081570:	80081784 	addi	zero,r16,8286
80081574:	8008176c 	andhi	zero,r16,8285
80081578:	800815b8 	rdprs	zero,r16,8278
8008157c:	80081784 	addi	zero,r16,8286
80081580:	8008176c 	andhi	zero,r16,8285
80081584:	80081784 	addi	zero,r16,8286
80081588:	800815b8 	rdprs	zero,r16,8278
8008158c:	80081794 	ori	zero,r16,8286
80081590:	80081794 	ori	zero,r16,8286
80081594:	80081794 	ori	zero,r16,8286
80081598:	800819b0 	cmpltui	zero,r16,8294
8008159c:	2404b03a 	or	r2,r4,r16
800815a0:	10006f1e 	bne	r2,zero,80081760 <__muldf3+0x2f8>
800815a4:	04c00204 	movi	r19,8
800815a8:	0021883a 	mov	r16,zero
800815ac:	0029883a 	mov	r20,zero
800815b0:	07000084 	movi	fp,2
800815b4:	003fcb06 	br	800814e4 <__muldf3+0x7c>
800815b8:	502d883a 	mov	r22,r10
800815bc:	00800084 	movi	r2,2
800815c0:	28805726 	beq	r5,r2,80081720 <__muldf3+0x2b8>
800815c4:	008000c4 	movi	r2,3
800815c8:	28816626 	beq	r5,r2,80081b64 <__muldf3+0x6fc>
800815cc:	00800044 	movi	r2,1
800815d0:	2881411e 	bne	r5,r2,80081ad8 <__muldf3+0x670>
800815d4:	b02b883a 	mov	r21,r22
800815d8:	0005883a 	mov	r2,zero
800815dc:	000b883a 	mov	r5,zero
800815e0:	0029883a 	mov	r20,zero
800815e4:	1004953a 	slli	r2,r2,20
800815e8:	a8c03fcc 	andi	r3,r21,255
800815ec:	04400434 	movhi	r17,16
800815f0:	8c7fffc4 	addi	r17,r17,-1
800815f4:	180697fa 	slli	r3,r3,31
800815f8:	2c4a703a 	and	r5,r5,r17
800815fc:	288ab03a 	or	r5,r5,r2
80081600:	28c6b03a 	or	r3,r5,r3
80081604:	a005883a 	mov	r2,r20
80081608:	dfc00c17 	ldw	ra,48(sp)
8008160c:	df000b17 	ldw	fp,44(sp)
80081610:	ddc00a17 	ldw	r23,40(sp)
80081614:	dd800917 	ldw	r22,36(sp)
80081618:	dd400817 	ldw	r21,32(sp)
8008161c:	dd000717 	ldw	r20,28(sp)
80081620:	dcc00617 	ldw	r19,24(sp)
80081624:	dc800517 	ldw	r18,20(sp)
80081628:	dc400417 	ldw	r17,16(sp)
8008162c:	dc000317 	ldw	r16,12(sp)
80081630:	dec00d04 	addi	sp,sp,52
80081634:	f800283a 	ret
80081638:	2404b03a 	or	r2,r4,r16
8008163c:	2027883a 	mov	r19,r4
80081640:	10004226 	beq	r2,zero,8008174c <__muldf3+0x2e4>
80081644:	8000fc26 	beq	r16,zero,80081a38 <__muldf3+0x5d0>
80081648:	8009883a 	mov	r4,r16
8008164c:	d9800215 	stw	r6,8(sp)
80081650:	d9c00015 	stw	r7,0(sp)
80081654:	da400115 	stw	r9,4(sp)
80081658:	0081c280 	call	80081c28 <__clzsi2>
8008165c:	d9800217 	ldw	r6,8(sp)
80081660:	d9c00017 	ldw	r7,0(sp)
80081664:	da400117 	ldw	r9,4(sp)
80081668:	113ffd44 	addi	r4,r2,-11
8008166c:	00c00704 	movi	r3,28
80081670:	1900ed16 	blt	r3,r4,80081a28 <__muldf3+0x5c0>
80081674:	00c00744 	movi	r3,29
80081678:	147ffe04 	addi	r17,r2,-8
8008167c:	1907c83a 	sub	r3,r3,r4
80081680:	8460983a 	sll	r16,r16,r17
80081684:	98c6d83a 	srl	r3,r19,r3
80081688:	9c68983a 	sll	r20,r19,r17
8008168c:	1c20b03a 	or	r16,r3,r16
80081690:	1080fcc4 	addi	r2,r2,1011
80081694:	00a5c83a 	sub	r18,zero,r2
80081698:	0027883a 	mov	r19,zero
8008169c:	0039883a 	mov	fp,zero
800816a0:	003f9006 	br	800814e4 <__muldf3+0x7c>
800816a4:	3446b03a 	or	r3,r6,r17
800816a8:	1800261e 	bne	r3,zero,80081744 <__muldf3+0x2dc>
800816ac:	0023883a 	mov	r17,zero
800816b0:	0011883a 	mov	r8,zero
800816b4:	01400084 	movi	r5,2
800816b8:	003f9c06 	br	8008152c <__muldf3+0xc4>
800816bc:	3446b03a 	or	r3,r6,r17
800816c0:	18001c26 	beq	r3,zero,80081734 <__muldf3+0x2cc>
800816c4:	8800ce26 	beq	r17,zero,80081a00 <__muldf3+0x598>
800816c8:	8809883a 	mov	r4,r17
800816cc:	d9800215 	stw	r6,8(sp)
800816d0:	da400115 	stw	r9,4(sp)
800816d4:	da800015 	stw	r10,0(sp)
800816d8:	0081c280 	call	80081c28 <__clzsi2>
800816dc:	d9800217 	ldw	r6,8(sp)
800816e0:	da400117 	ldw	r9,4(sp)
800816e4:	da800017 	ldw	r10,0(sp)
800816e8:	113ffd44 	addi	r4,r2,-11
800816ec:	00c00704 	movi	r3,28
800816f0:	1900bf16 	blt	r3,r4,800819f0 <__muldf3+0x588>
800816f4:	00c00744 	movi	r3,29
800816f8:	123ffe04 	addi	r8,r2,-8
800816fc:	1907c83a 	sub	r3,r3,r4
80081700:	8a22983a 	sll	r17,r17,r8
80081704:	30c6d83a 	srl	r3,r6,r3
80081708:	3210983a 	sll	r8,r6,r8
8008170c:	1c62b03a 	or	r17,r3,r17
80081710:	1080fcc4 	addi	r2,r2,1011
80081714:	0085c83a 	sub	r2,zero,r2
80081718:	000b883a 	mov	r5,zero
8008171c:	003f8306 	br	8008152c <__muldf3+0xc4>
80081720:	b02b883a 	mov	r21,r22
80081724:	0081ffc4 	movi	r2,2047
80081728:	000b883a 	mov	r5,zero
8008172c:	0029883a 	mov	r20,zero
80081730:	003fac06 	br	800815e4 <__muldf3+0x17c>
80081734:	0023883a 	mov	r17,zero
80081738:	0011883a 	mov	r8,zero
8008173c:	01400044 	movi	r5,1
80081740:	003f7a06 	br	8008152c <__muldf3+0xc4>
80081744:	014000c4 	movi	r5,3
80081748:	003f7806 	br	8008152c <__muldf3+0xc4>
8008174c:	04c00104 	movi	r19,4
80081750:	0021883a 	mov	r16,zero
80081754:	0029883a 	mov	r20,zero
80081758:	07000044 	movi	fp,1
8008175c:	003f6106 	br	800814e4 <__muldf3+0x7c>
80081760:	04c00304 	movi	r19,12
80081764:	070000c4 	movi	fp,3
80081768:	003f5e06 	br	800814e4 <__muldf3+0x7c>
8008176c:	01400434 	movhi	r5,16
80081770:	002b883a 	mov	r21,zero
80081774:	297fffc4 	addi	r5,r5,-1
80081778:	053fffc4 	movi	r20,-1
8008177c:	0081ffc4 	movi	r2,2047
80081780:	003f9806 	br	800815e4 <__muldf3+0x17c>
80081784:	8023883a 	mov	r17,r16
80081788:	a011883a 	mov	r8,r20
8008178c:	e00b883a 	mov	r5,fp
80081790:	003f8a06 	br	800815bc <__muldf3+0x154>
80081794:	8023883a 	mov	r17,r16
80081798:	a011883a 	mov	r8,r20
8008179c:	482d883a 	mov	r22,r9
800817a0:	e00b883a 	mov	r5,fp
800817a4:	003f8506 	br	800815bc <__muldf3+0x154>
800817a8:	a00ad43a 	srli	r5,r20,16
800817ac:	401ad43a 	srli	r13,r8,16
800817b0:	a53fffcc 	andi	r20,r20,65535
800817b4:	423fffcc 	andi	r8,r8,65535
800817b8:	4519383a 	mul	r12,r8,r20
800817bc:	4147383a 	mul	r3,r8,r5
800817c0:	6d09383a 	mul	r4,r13,r20
800817c4:	600cd43a 	srli	r6,r12,16
800817c8:	2b5d383a 	mul	r14,r5,r13
800817cc:	20c9883a 	add	r4,r4,r3
800817d0:	310d883a 	add	r6,r6,r4
800817d4:	30c0022e 	bgeu	r6,r3,800817e0 <__muldf3+0x378>
800817d8:	00c00074 	movhi	r3,1
800817dc:	70dd883a 	add	r14,r14,r3
800817e0:	8826d43a 	srli	r19,r17,16
800817e4:	8bffffcc 	andi	r15,r17,65535
800817e8:	7d23383a 	mul	r17,r15,r20
800817ec:	7949383a 	mul	r4,r15,r5
800817f0:	9d29383a 	mul	r20,r19,r20
800817f4:	8814d43a 	srli	r10,r17,16
800817f8:	3012943a 	slli	r9,r6,16
800817fc:	a129883a 	add	r20,r20,r4
80081800:	633fffcc 	andi	r12,r12,65535
80081804:	5515883a 	add	r10,r10,r20
80081808:	3006d43a 	srli	r3,r6,16
8008180c:	4b13883a 	add	r9,r9,r12
80081810:	2ccb383a 	mul	r5,r5,r19
80081814:	5100022e 	bgeu	r10,r4,80081820 <__muldf3+0x3b8>
80081818:	01000074 	movhi	r4,1
8008181c:	290b883a 	add	r5,r5,r4
80081820:	802ad43a 	srli	r21,r16,16
80081824:	843fffcc 	andi	r16,r16,65535
80081828:	440d383a 	mul	r6,r8,r16
8008182c:	4565383a 	mul	r18,r8,r21
80081830:	8349383a 	mul	r4,r16,r13
80081834:	500e943a 	slli	r7,r10,16
80081838:	3010d43a 	srli	r8,r6,16
8008183c:	5028d43a 	srli	r20,r10,16
80081840:	2489883a 	add	r4,r4,r18
80081844:	8abfffcc 	andi	r10,r17,65535
80081848:	3a95883a 	add	r10,r7,r10
8008184c:	4119883a 	add	r12,r8,r4
80081850:	a169883a 	add	r20,r20,r5
80081854:	1a87883a 	add	r3,r3,r10
80081858:	6d5b383a 	mul	r13,r13,r21
8008185c:	6480022e 	bgeu	r12,r18,80081868 <__muldf3+0x400>
80081860:	01000074 	movhi	r4,1
80081864:	691b883a 	add	r13,r13,r4
80081868:	7c25383a 	mul	r18,r15,r16
8008186c:	7d4b383a 	mul	r5,r15,r21
80081870:	84cf383a 	mul	r7,r16,r19
80081874:	901ed43a 	srli	r15,r18,16
80081878:	6008d43a 	srli	r4,r12,16
8008187c:	6010943a 	slli	r8,r12,16
80081880:	394f883a 	add	r7,r7,r5
80081884:	333fffcc 	andi	r12,r6,65535
80081888:	79df883a 	add	r15,r15,r7
8008188c:	235b883a 	add	r13,r4,r13
80081890:	9d63383a 	mul	r17,r19,r21
80081894:	4309883a 	add	r4,r8,r12
80081898:	7940022e 	bgeu	r15,r5,800818a4 <__muldf3+0x43c>
8008189c:	01400074 	movhi	r5,1
800818a0:	8963883a 	add	r17,r17,r5
800818a4:	780a943a 	slli	r5,r15,16
800818a8:	91bfffcc 	andi	r6,r18,65535
800818ac:	70c7883a 	add	r3,r14,r3
800818b0:	298d883a 	add	r6,r5,r6
800818b4:	1a8f803a 	cmpltu	r7,r3,r10
800818b8:	350b883a 	add	r5,r6,r20
800818bc:	20c7883a 	add	r3,r4,r3
800818c0:	3955883a 	add	r10,r7,r5
800818c4:	1909803a 	cmpltu	r4,r3,r4
800818c8:	6a91883a 	add	r8,r13,r10
800818cc:	780cd43a 	srli	r6,r15,16
800818d0:	2219883a 	add	r12,r4,r8
800818d4:	2d0b803a 	cmpltu	r5,r5,r20
800818d8:	51cf803a 	cmpltu	r7,r10,r7
800818dc:	29ceb03a 	or	r7,r5,r7
800818e0:	4351803a 	cmpltu	r8,r8,r13
800818e4:	610b803a 	cmpltu	r5,r12,r4
800818e8:	4148b03a 	or	r4,r8,r5
800818ec:	398f883a 	add	r7,r7,r6
800818f0:	3909883a 	add	r4,r7,r4
800818f4:	1810927a 	slli	r8,r3,9
800818f8:	2449883a 	add	r4,r4,r17
800818fc:	2008927a 	slli	r4,r4,9
80081900:	6022d5fa 	srli	r17,r12,23
80081904:	1806d5fa 	srli	r3,r3,23
80081908:	4252b03a 	or	r9,r8,r9
8008190c:	600a927a 	slli	r5,r12,9
80081910:	4810c03a 	cmpne	r8,r9,zero
80081914:	2462b03a 	or	r17,r4,r17
80081918:	40c6b03a 	or	r3,r8,r3
8008191c:	8900402c 	andhi	r4,r17,256
80081920:	1950b03a 	or	r8,r3,r5
80081924:	20000726 	beq	r4,zero,80081944 <__muldf3+0x4dc>
80081928:	4006d07a 	srli	r3,r8,1
8008192c:	880497fa 	slli	r2,r17,31
80081930:	4200004c 	andi	r8,r8,1
80081934:	8822d07a 	srli	r17,r17,1
80081938:	1a10b03a 	or	r8,r3,r8
8008193c:	1210b03a 	or	r8,r2,r8
80081940:	5805883a 	mov	r2,r11
80081944:	1140ffc4 	addi	r5,r2,1023
80081948:	0140440e 	bge	zero,r5,80081a5c <__muldf3+0x5f4>
8008194c:	40c001cc 	andi	r3,r8,7
80081950:	18000726 	beq	r3,zero,80081970 <__muldf3+0x508>
80081954:	40c003cc 	andi	r3,r8,15
80081958:	01000104 	movi	r4,4
8008195c:	19000426 	beq	r3,r4,80081970 <__muldf3+0x508>
80081960:	4107883a 	add	r3,r8,r4
80081964:	1a11803a 	cmpltu	r8,r3,r8
80081968:	8a23883a 	add	r17,r17,r8
8008196c:	1811883a 	mov	r8,r3
80081970:	88c0402c 	andhi	r3,r17,256
80081974:	18000426 	beq	r3,zero,80081988 <__muldf3+0x520>
80081978:	11410004 	addi	r5,r2,1024
8008197c:	00bfc034 	movhi	r2,65280
80081980:	10bfffc4 	addi	r2,r2,-1
80081984:	88a2703a 	and	r17,r17,r2
80081988:	0081ff84 	movi	r2,2046
8008198c:	117f6416 	blt	r2,r5,80081720 <__muldf3+0x2b8>
80081990:	8828977a 	slli	r20,r17,29
80081994:	4010d0fa 	srli	r8,r8,3
80081998:	8822927a 	slli	r17,r17,9
8008199c:	2881ffcc 	andi	r2,r5,2047
800819a0:	a228b03a 	or	r20,r20,r8
800819a4:	880ad33a 	srli	r5,r17,12
800819a8:	b02b883a 	mov	r21,r22
800819ac:	003f0d06 	br	800815e4 <__muldf3+0x17c>
800819b0:	8080022c 	andhi	r2,r16,8
800819b4:	10000926 	beq	r2,zero,800819dc <__muldf3+0x574>
800819b8:	8880022c 	andhi	r2,r17,8
800819bc:	1000071e 	bne	r2,zero,800819dc <__muldf3+0x574>
800819c0:	00800434 	movhi	r2,16
800819c4:	89400234 	orhi	r5,r17,8
800819c8:	10bfffc4 	addi	r2,r2,-1
800819cc:	b82b883a 	mov	r21,r23
800819d0:	288a703a 	and	r5,r5,r2
800819d4:	4029883a 	mov	r20,r8
800819d8:	003f6806 	br	8008177c <__muldf3+0x314>
800819dc:	00800434 	movhi	r2,16
800819e0:	81400234 	orhi	r5,r16,8
800819e4:	10bfffc4 	addi	r2,r2,-1
800819e8:	288a703a 	and	r5,r5,r2
800819ec:	003f6306 	br	8008177c <__muldf3+0x314>
800819f0:	147ff604 	addi	r17,r2,-40
800819f4:	3462983a 	sll	r17,r6,r17
800819f8:	0011883a 	mov	r8,zero
800819fc:	003f4406 	br	80081710 <__muldf3+0x2a8>
80081a00:	3009883a 	mov	r4,r6
80081a04:	d9800215 	stw	r6,8(sp)
80081a08:	da400115 	stw	r9,4(sp)
80081a0c:	da800015 	stw	r10,0(sp)
80081a10:	0081c280 	call	80081c28 <__clzsi2>
80081a14:	10800804 	addi	r2,r2,32
80081a18:	da800017 	ldw	r10,0(sp)
80081a1c:	da400117 	ldw	r9,4(sp)
80081a20:	d9800217 	ldw	r6,8(sp)
80081a24:	003f3006 	br	800816e8 <__muldf3+0x280>
80081a28:	143ff604 	addi	r16,r2,-40
80081a2c:	9c20983a 	sll	r16,r19,r16
80081a30:	0029883a 	mov	r20,zero
80081a34:	003f1606 	br	80081690 <__muldf3+0x228>
80081a38:	d9800215 	stw	r6,8(sp)
80081a3c:	d9c00015 	stw	r7,0(sp)
80081a40:	da400115 	stw	r9,4(sp)
80081a44:	0081c280 	call	80081c28 <__clzsi2>
80081a48:	10800804 	addi	r2,r2,32
80081a4c:	da400117 	ldw	r9,4(sp)
80081a50:	d9c00017 	ldw	r7,0(sp)
80081a54:	d9800217 	ldw	r6,8(sp)
80081a58:	003f0306 	br	80081668 <__muldf3+0x200>
80081a5c:	00c00044 	movi	r3,1
80081a60:	1947c83a 	sub	r3,r3,r5
80081a64:	00800e04 	movi	r2,56
80081a68:	10feda16 	blt	r2,r3,800815d4 <__muldf3+0x16c>
80081a6c:	008007c4 	movi	r2,31
80081a70:	10c01b16 	blt	r2,r3,80081ae0 <__muldf3+0x678>
80081a74:	00800804 	movi	r2,32
80081a78:	10c5c83a 	sub	r2,r2,r3
80081a7c:	888a983a 	sll	r5,r17,r2
80081a80:	40c8d83a 	srl	r4,r8,r3
80081a84:	4084983a 	sll	r2,r8,r2
80081a88:	88e2d83a 	srl	r17,r17,r3
80081a8c:	2906b03a 	or	r3,r5,r4
80081a90:	1004c03a 	cmpne	r2,r2,zero
80081a94:	1886b03a 	or	r3,r3,r2
80081a98:	188001cc 	andi	r2,r3,7
80081a9c:	10000726 	beq	r2,zero,80081abc <__muldf3+0x654>
80081aa0:	188003cc 	andi	r2,r3,15
80081aa4:	01000104 	movi	r4,4
80081aa8:	11000426 	beq	r2,r4,80081abc <__muldf3+0x654>
80081aac:	1805883a 	mov	r2,r3
80081ab0:	10c00104 	addi	r3,r2,4
80081ab4:	1885803a 	cmpltu	r2,r3,r2
80081ab8:	88a3883a 	add	r17,r17,r2
80081abc:	8880202c 	andhi	r2,r17,128
80081ac0:	10001c26 	beq	r2,zero,80081b34 <__muldf3+0x6cc>
80081ac4:	b02b883a 	mov	r21,r22
80081ac8:	00800044 	movi	r2,1
80081acc:	000b883a 	mov	r5,zero
80081ad0:	0029883a 	mov	r20,zero
80081ad4:	003ec306 	br	800815e4 <__muldf3+0x17c>
80081ad8:	5805883a 	mov	r2,r11
80081adc:	003f9906 	br	80081944 <__muldf3+0x4dc>
80081ae0:	00bff844 	movi	r2,-31
80081ae4:	1145c83a 	sub	r2,r2,r5
80081ae8:	8888d83a 	srl	r4,r17,r2
80081aec:	00800804 	movi	r2,32
80081af0:	18801a26 	beq	r3,r2,80081b5c <__muldf3+0x6f4>
80081af4:	00801004 	movi	r2,64
80081af8:	10c5c83a 	sub	r2,r2,r3
80081afc:	8884983a 	sll	r2,r17,r2
80081b00:	1204b03a 	or	r2,r2,r8
80081b04:	1004c03a 	cmpne	r2,r2,zero
80081b08:	2084b03a 	or	r2,r4,r2
80081b0c:	144001cc 	andi	r17,r2,7
80081b10:	88000d1e 	bne	r17,zero,80081b48 <__muldf3+0x6e0>
80081b14:	000b883a 	mov	r5,zero
80081b18:	1028d0fa 	srli	r20,r2,3
80081b1c:	b02b883a 	mov	r21,r22
80081b20:	0005883a 	mov	r2,zero
80081b24:	a468b03a 	or	r20,r20,r17
80081b28:	003eae06 	br	800815e4 <__muldf3+0x17c>
80081b2c:	1007883a 	mov	r3,r2
80081b30:	0023883a 	mov	r17,zero
80081b34:	880a927a 	slli	r5,r17,9
80081b38:	1805883a 	mov	r2,r3
80081b3c:	8822977a 	slli	r17,r17,29
80081b40:	280ad33a 	srli	r5,r5,12
80081b44:	003ff406 	br	80081b18 <__muldf3+0x6b0>
80081b48:	10c003cc 	andi	r3,r2,15
80081b4c:	01000104 	movi	r4,4
80081b50:	193ff626 	beq	r3,r4,80081b2c <__muldf3+0x6c4>
80081b54:	0023883a 	mov	r17,zero
80081b58:	003fd506 	br	80081ab0 <__muldf3+0x648>
80081b5c:	0005883a 	mov	r2,zero
80081b60:	003fe706 	br	80081b00 <__muldf3+0x698>
80081b64:	00800434 	movhi	r2,16
80081b68:	89400234 	orhi	r5,r17,8
80081b6c:	10bfffc4 	addi	r2,r2,-1
80081b70:	b02b883a 	mov	r21,r22
80081b74:	288a703a 	and	r5,r5,r2
80081b78:	4029883a 	mov	r20,r8
80081b7c:	003eff06 	br	8008177c <__muldf3+0x314>

80081b80 <__floatunsidf>:
80081b80:	defffe04 	addi	sp,sp,-8
80081b84:	dc000015 	stw	r16,0(sp)
80081b88:	dfc00115 	stw	ra,4(sp)
80081b8c:	2021883a 	mov	r16,r4
80081b90:	20002226 	beq	r4,zero,80081c1c <__floatunsidf+0x9c>
80081b94:	0081c280 	call	80081c28 <__clzsi2>
80081b98:	01010784 	movi	r4,1054
80081b9c:	2089c83a 	sub	r4,r4,r2
80081ba0:	01810cc4 	movi	r6,1075
80081ba4:	310dc83a 	sub	r6,r6,r4
80081ba8:	00c007c4 	movi	r3,31
80081bac:	1980120e 	bge	r3,r6,80081bf8 <__floatunsidf+0x78>
80081bb0:	00c104c4 	movi	r3,1043
80081bb4:	1907c83a 	sub	r3,r3,r4
80081bb8:	80ca983a 	sll	r5,r16,r3
80081bbc:	00800434 	movhi	r2,16
80081bc0:	10bfffc4 	addi	r2,r2,-1
80081bc4:	2101ffcc 	andi	r4,r4,2047
80081bc8:	0021883a 	mov	r16,zero
80081bcc:	288a703a 	and	r5,r5,r2
80081bd0:	2008953a 	slli	r4,r4,20
80081bd4:	00c00434 	movhi	r3,16
80081bd8:	18ffffc4 	addi	r3,r3,-1
80081bdc:	28c6703a 	and	r3,r5,r3
80081be0:	8005883a 	mov	r2,r16
80081be4:	1906b03a 	or	r3,r3,r4
80081be8:	dfc00117 	ldw	ra,4(sp)
80081bec:	dc000017 	ldw	r16,0(sp)
80081bf0:	dec00204 	addi	sp,sp,8
80081bf4:	f800283a 	ret
80081bf8:	00c002c4 	movi	r3,11
80081bfc:	188bc83a 	sub	r5,r3,r2
80081c00:	814ad83a 	srl	r5,r16,r5
80081c04:	00c00434 	movhi	r3,16
80081c08:	18ffffc4 	addi	r3,r3,-1
80081c0c:	81a0983a 	sll	r16,r16,r6
80081c10:	2101ffcc 	andi	r4,r4,2047
80081c14:	28ca703a 	and	r5,r5,r3
80081c18:	003fed06 	br	80081bd0 <__floatunsidf+0x50>
80081c1c:	0009883a 	mov	r4,zero
80081c20:	000b883a 	mov	r5,zero
80081c24:	003fea06 	br	80081bd0 <__floatunsidf+0x50>

80081c28 <__clzsi2>:
80081c28:	00bfffd4 	movui	r2,65535
80081c2c:	11000536 	bltu	r2,r4,80081c44 <__clzsi2+0x1c>
80081c30:	00803fc4 	movi	r2,255
80081c34:	11000f36 	bltu	r2,r4,80081c74 <__clzsi2+0x4c>
80081c38:	00800804 	movi	r2,32
80081c3c:	0007883a 	mov	r3,zero
80081c40:	00000506 	br	80081c58 <__clzsi2+0x30>
80081c44:	00804034 	movhi	r2,256
80081c48:	10bfffc4 	addi	r2,r2,-1
80081c4c:	11000c2e 	bgeu	r2,r4,80081c80 <__clzsi2+0x58>
80081c50:	00800204 	movi	r2,8
80081c54:	00c00604 	movi	r3,24
80081c58:	20c8d83a 	srl	r4,r4,r3
80081c5c:	00e00274 	movhi	r3,32777
80081c60:	18da2dc4 	addi	r3,r3,26807
80081c64:	1909883a 	add	r4,r3,r4
80081c68:	20c00003 	ldbu	r3,0(r4)
80081c6c:	10c5c83a 	sub	r2,r2,r3
80081c70:	f800283a 	ret
80081c74:	00800604 	movi	r2,24
80081c78:	00c00204 	movi	r3,8
80081c7c:	003ff606 	br	80081c58 <__clzsi2+0x30>
80081c80:	00800404 	movi	r2,16
80081c84:	1007883a 	mov	r3,r2
80081c88:	003ff306 	br	80081c58 <__clzsi2+0x30>

80081c8c <_getc_r>:
80081c8c:	defffd04 	addi	sp,sp,-12
80081c90:	dc000115 	stw	r16,4(sp)
80081c94:	dfc00215 	stw	ra,8(sp)
80081c98:	2021883a 	mov	r16,r4
80081c9c:	20000226 	beq	r4,zero,80081ca8 <_getc_r+0x1c>
80081ca0:	20800e17 	ldw	r2,56(r4)
80081ca4:	10000c26 	beq	r2,zero,80081cd8 <_getc_r+0x4c>
80081ca8:	28800117 	ldw	r2,4(r5)
80081cac:	10bfffc4 	addi	r2,r2,-1
80081cb0:	28800115 	stw	r2,4(r5)
80081cb4:	10000c16 	blt	r2,zero,80081ce8 <_getc_r+0x5c>
80081cb8:	28800017 	ldw	r2,0(r5)
80081cbc:	10c00044 	addi	r3,r2,1
80081cc0:	28c00015 	stw	r3,0(r5)
80081cc4:	10800003 	ldbu	r2,0(r2)
80081cc8:	dfc00217 	ldw	ra,8(sp)
80081ccc:	dc000117 	ldw	r16,4(sp)
80081cd0:	dec00304 	addi	sp,sp,12
80081cd4:	f800283a 	ret
80081cd8:	d9400015 	stw	r5,0(sp)
80081cdc:	00886480 	call	80088648 <__sinit>
80081ce0:	d9400017 	ldw	r5,0(sp)
80081ce4:	003ff006 	br	80081ca8 <_getc_r+0x1c>
80081ce8:	8009883a 	mov	r4,r16
80081cec:	dfc00217 	ldw	ra,8(sp)
80081cf0:	dc000117 	ldw	r16,4(sp)
80081cf4:	dec00304 	addi	sp,sp,12
80081cf8:	0081ec41 	jmpi	80081ec4 <__srget_r>

80081cfc <getc>:
80081cfc:	00a002b4 	movhi	r2,32778
80081d00:	defffd04 	addi	sp,sp,-12
80081d04:	10a29e04 	addi	r2,r2,-30088
80081d08:	dc400115 	stw	r17,4(sp)
80081d0c:	14400017 	ldw	r17,0(r2)
80081d10:	dc000015 	stw	r16,0(sp)
80081d14:	dfc00215 	stw	ra,8(sp)
80081d18:	2021883a 	mov	r16,r4
80081d1c:	88000226 	beq	r17,zero,80081d28 <getc+0x2c>
80081d20:	88800e17 	ldw	r2,56(r17)
80081d24:	10000d26 	beq	r2,zero,80081d5c <getc+0x60>
80081d28:	80800117 	ldw	r2,4(r16)
80081d2c:	10bfffc4 	addi	r2,r2,-1
80081d30:	80800115 	stw	r2,4(r16)
80081d34:	10000c16 	blt	r2,zero,80081d68 <getc+0x6c>
80081d38:	80800017 	ldw	r2,0(r16)
80081d3c:	10c00044 	addi	r3,r2,1
80081d40:	80c00015 	stw	r3,0(r16)
80081d44:	10800003 	ldbu	r2,0(r2)
80081d48:	dfc00217 	ldw	ra,8(sp)
80081d4c:	dc400117 	ldw	r17,4(sp)
80081d50:	dc000017 	ldw	r16,0(sp)
80081d54:	dec00304 	addi	sp,sp,12
80081d58:	f800283a 	ret
80081d5c:	8809883a 	mov	r4,r17
80081d60:	00886480 	call	80088648 <__sinit>
80081d64:	003ff006 	br	80081d28 <getc+0x2c>
80081d68:	800b883a 	mov	r5,r16
80081d6c:	8809883a 	mov	r4,r17
80081d70:	dfc00217 	ldw	ra,8(sp)
80081d74:	dc400117 	ldw	r17,4(sp)
80081d78:	dc000017 	ldw	r16,0(sp)
80081d7c:	dec00304 	addi	sp,sp,12
80081d80:	0081ec41 	jmpi	80081ec4 <__srget_r>

80081d84 <_printf_r>:
80081d84:	defffd04 	addi	sp,sp,-12
80081d88:	2805883a 	mov	r2,r5
80081d8c:	dfc00015 	stw	ra,0(sp)
80081d90:	d9800115 	stw	r6,4(sp)
80081d94:	d9c00215 	stw	r7,8(sp)
80081d98:	21400217 	ldw	r5,8(r4)
80081d9c:	d9c00104 	addi	r7,sp,4
80081da0:	100d883a 	mov	r6,r2
80081da4:	00842800 	call	80084280 <___vfprintf_internal_r>
80081da8:	dfc00017 	ldw	ra,0(sp)
80081dac:	dec00304 	addi	sp,sp,12
80081db0:	f800283a 	ret

80081db4 <printf>:
80081db4:	defffc04 	addi	sp,sp,-16
80081db8:	dfc00015 	stw	ra,0(sp)
80081dbc:	d9400115 	stw	r5,4(sp)
80081dc0:	d9800215 	stw	r6,8(sp)
80081dc4:	d9c00315 	stw	r7,12(sp)
80081dc8:	00a002b4 	movhi	r2,32778
80081dcc:	10a29e04 	addi	r2,r2,-30088
80081dd0:	10800017 	ldw	r2,0(r2)
80081dd4:	200b883a 	mov	r5,r4
80081dd8:	d9800104 	addi	r6,sp,4
80081ddc:	11000217 	ldw	r4,8(r2)
80081de0:	00864780 	call	80086478 <__vfprintf_internal>
80081de4:	dfc00017 	ldw	ra,0(sp)
80081de8:	dec00404 	addi	sp,sp,16
80081dec:	f800283a 	ret

80081df0 <_puts_r>:
80081df0:	defff604 	addi	sp,sp,-40
80081df4:	dc000715 	stw	r16,28(sp)
80081df8:	2021883a 	mov	r16,r4
80081dfc:	2809883a 	mov	r4,r5
80081e00:	dc400815 	stw	r17,32(sp)
80081e04:	dfc00915 	stw	ra,36(sp)
80081e08:	2823883a 	mov	r17,r5
80081e0c:	00820100 	call	80082010 <strlen>
80081e10:	10c00044 	addi	r3,r2,1
80081e14:	d8800115 	stw	r2,4(sp)
80081e18:	00a00274 	movhi	r2,32777
80081e1c:	109a6f04 	addi	r2,r2,27068
80081e20:	d8800215 	stw	r2,8(sp)
80081e24:	00800044 	movi	r2,1
80081e28:	d8800315 	stw	r2,12(sp)
80081e2c:	00800084 	movi	r2,2
80081e30:	dc400015 	stw	r17,0(sp)
80081e34:	d8c00615 	stw	r3,24(sp)
80081e38:	dec00415 	stw	sp,16(sp)
80081e3c:	d8800515 	stw	r2,20(sp)
80081e40:	80000226 	beq	r16,zero,80081e4c <_puts_r+0x5c>
80081e44:	80800e17 	ldw	r2,56(r16)
80081e48:	10001426 	beq	r2,zero,80081e9c <_puts_r+0xac>
80081e4c:	81400217 	ldw	r5,8(r16)
80081e50:	2880030b 	ldhu	r2,12(r5)
80081e54:	10c8000c 	andi	r3,r2,8192
80081e58:	1800061e 	bne	r3,zero,80081e74 <_puts_r+0x84>
80081e5c:	29001917 	ldw	r4,100(r5)
80081e60:	00f7ffc4 	movi	r3,-8193
80081e64:	10880014 	ori	r2,r2,8192
80081e68:	20c6703a 	and	r3,r4,r3
80081e6c:	2880030d 	sth	r2,12(r5)
80081e70:	28c01915 	stw	r3,100(r5)
80081e74:	d9800404 	addi	r6,sp,16
80081e78:	8009883a 	mov	r4,r16
80081e7c:	0088acc0 	call	80088acc <__sfvwrite_r>
80081e80:	1000091e 	bne	r2,zero,80081ea8 <_puts_r+0xb8>
80081e84:	00800284 	movi	r2,10
80081e88:	dfc00917 	ldw	ra,36(sp)
80081e8c:	dc400817 	ldw	r17,32(sp)
80081e90:	dc000717 	ldw	r16,28(sp)
80081e94:	dec00a04 	addi	sp,sp,40
80081e98:	f800283a 	ret
80081e9c:	8009883a 	mov	r4,r16
80081ea0:	00886480 	call	80088648 <__sinit>
80081ea4:	003fe906 	br	80081e4c <_puts_r+0x5c>
80081ea8:	00bfffc4 	movi	r2,-1
80081eac:	003ff606 	br	80081e88 <_puts_r+0x98>

80081eb0 <puts>:
80081eb0:	00a002b4 	movhi	r2,32778
80081eb4:	10a29e04 	addi	r2,r2,-30088
80081eb8:	200b883a 	mov	r5,r4
80081ebc:	11000017 	ldw	r4,0(r2)
80081ec0:	0081df01 	jmpi	80081df0 <_puts_r>

80081ec4 <__srget_r>:
80081ec4:	defffd04 	addi	sp,sp,-12
80081ec8:	dc400115 	stw	r17,4(sp)
80081ecc:	dc000015 	stw	r16,0(sp)
80081ed0:	dfc00215 	stw	ra,8(sp)
80081ed4:	2023883a 	mov	r17,r4
80081ed8:	2821883a 	mov	r16,r5
80081edc:	20000226 	beq	r4,zero,80081ee8 <__srget_r+0x24>
80081ee0:	20800e17 	ldw	r2,56(r4)
80081ee4:	10001026 	beq	r2,zero,80081f28 <__srget_r+0x64>
80081ee8:	800b883a 	mov	r5,r16
80081eec:	8809883a 	mov	r4,r17
80081ef0:	008b5e00 	call	8008b5e0 <__srefill_r>
80081ef4:	10000e1e 	bne	r2,zero,80081f30 <__srget_r+0x6c>
80081ef8:	80c00017 	ldw	r3,0(r16)
80081efc:	80800117 	ldw	r2,4(r16)
80081f00:	19000044 	addi	r4,r3,1
80081f04:	10bfffc4 	addi	r2,r2,-1
80081f08:	80800115 	stw	r2,4(r16)
80081f0c:	81000015 	stw	r4,0(r16)
80081f10:	18800003 	ldbu	r2,0(r3)
80081f14:	dfc00217 	ldw	ra,8(sp)
80081f18:	dc400117 	ldw	r17,4(sp)
80081f1c:	dc000017 	ldw	r16,0(sp)
80081f20:	dec00304 	addi	sp,sp,12
80081f24:	f800283a 	ret
80081f28:	00886480 	call	80088648 <__sinit>
80081f2c:	003fee06 	br	80081ee8 <__srget_r+0x24>
80081f30:	00bfffc4 	movi	r2,-1
80081f34:	003ff706 	br	80081f14 <__srget_r+0x50>

80081f38 <__srget>:
80081f38:	00a002b4 	movhi	r2,32778
80081f3c:	10a29e04 	addi	r2,r2,-30088
80081f40:	200b883a 	mov	r5,r4
80081f44:	11000017 	ldw	r4,0(r2)
80081f48:	0081ec41 	jmpi	80081ec4 <__srget_r>

80081f4c <_sprintf_r>:
80081f4c:	deffe404 	addi	sp,sp,-112
80081f50:	2807883a 	mov	r3,r5
80081f54:	dfc01a15 	stw	ra,104(sp)
80081f58:	d9c01b15 	stw	r7,108(sp)
80081f5c:	00a00034 	movhi	r2,32768
80081f60:	10bfffc4 	addi	r2,r2,-1
80081f64:	02008204 	movi	r8,520
80081f68:	d8800215 	stw	r2,8(sp)
80081f6c:	d8800515 	stw	r2,20(sp)
80081f70:	d9c01b04 	addi	r7,sp,108
80081f74:	d80b883a 	mov	r5,sp
80081f78:	00bfffc4 	movi	r2,-1
80081f7c:	d8c00015 	stw	r3,0(sp)
80081f80:	d8c00415 	stw	r3,16(sp)
80081f84:	da00030d 	sth	r8,12(sp)
80081f88:	d880038d 	sth	r2,14(sp)
80081f8c:	00820a80 	call	800820a8 <___svfprintf_internal_r>
80081f90:	d8c00017 	ldw	r3,0(sp)
80081f94:	18000005 	stb	zero,0(r3)
80081f98:	dfc01a17 	ldw	ra,104(sp)
80081f9c:	dec01c04 	addi	sp,sp,112
80081fa0:	f800283a 	ret

80081fa4 <sprintf>:
80081fa4:	deffe304 	addi	sp,sp,-116
80081fa8:	2007883a 	mov	r3,r4
80081fac:	dfc01a15 	stw	ra,104(sp)
80081fb0:	d9801b15 	stw	r6,108(sp)
80081fb4:	d9c01c15 	stw	r7,112(sp)
80081fb8:	012002b4 	movhi	r4,32778
80081fbc:	21229e04 	addi	r4,r4,-30088
80081fc0:	21000017 	ldw	r4,0(r4)
80081fc4:	00a00034 	movhi	r2,32768
80081fc8:	10bfffc4 	addi	r2,r2,-1
80081fcc:	280d883a 	mov	r6,r5
80081fd0:	02008204 	movi	r8,520
80081fd4:	d8800215 	stw	r2,8(sp)
80081fd8:	d8800515 	stw	r2,20(sp)
80081fdc:	d9c01b04 	addi	r7,sp,108
80081fe0:	d80b883a 	mov	r5,sp
80081fe4:	00bfffc4 	movi	r2,-1
80081fe8:	d8c00015 	stw	r3,0(sp)
80081fec:	d8c00415 	stw	r3,16(sp)
80081ff0:	da00030d 	sth	r8,12(sp)
80081ff4:	d880038d 	sth	r2,14(sp)
80081ff8:	00820a80 	call	800820a8 <___svfprintf_internal_r>
80081ffc:	d8c00017 	ldw	r3,0(sp)
80082000:	18000005 	stb	zero,0(r3)
80082004:	dfc01a17 	ldw	ra,104(sp)
80082008:	dec01d04 	addi	sp,sp,116
8008200c:	f800283a 	ret

80082010 <strlen>:
80082010:	208000cc 	andi	r2,r4,3
80082014:	10002026 	beq	r2,zero,80082098 <strlen+0x88>
80082018:	20800007 	ldb	r2,0(r4)
8008201c:	10002026 	beq	r2,zero,800820a0 <strlen+0x90>
80082020:	2005883a 	mov	r2,r4
80082024:	00000206 	br	80082030 <strlen+0x20>
80082028:	10c00007 	ldb	r3,0(r2)
8008202c:	18001826 	beq	r3,zero,80082090 <strlen+0x80>
80082030:	10800044 	addi	r2,r2,1
80082034:	10c000cc 	andi	r3,r2,3
80082038:	183ffb1e 	bne	r3,zero,80082028 <strlen+0x18>
8008203c:	10c00017 	ldw	r3,0(r2)
80082040:	01ffbff4 	movhi	r7,65279
80082044:	39ffbfc4 	addi	r7,r7,-257
80082048:	00ca303a 	nor	r5,zero,r3
8008204c:	01a02074 	movhi	r6,32897
80082050:	19c7883a 	add	r3,r3,r7
80082054:	31a02004 	addi	r6,r6,-32640
80082058:	1946703a 	and	r3,r3,r5
8008205c:	1986703a 	and	r3,r3,r6
80082060:	1800091e 	bne	r3,zero,80082088 <strlen+0x78>
80082064:	10800104 	addi	r2,r2,4
80082068:	10c00017 	ldw	r3,0(r2)
8008206c:	19cb883a 	add	r5,r3,r7
80082070:	00c6303a 	nor	r3,zero,r3
80082074:	28c6703a 	and	r3,r5,r3
80082078:	1986703a 	and	r3,r3,r6
8008207c:	183ff926 	beq	r3,zero,80082064 <strlen+0x54>
80082080:	00000106 	br	80082088 <strlen+0x78>
80082084:	10800044 	addi	r2,r2,1
80082088:	10c00007 	ldb	r3,0(r2)
8008208c:	183ffd1e 	bne	r3,zero,80082084 <strlen+0x74>
80082090:	1105c83a 	sub	r2,r2,r4
80082094:	f800283a 	ret
80082098:	2005883a 	mov	r2,r4
8008209c:	003fe706 	br	8008203c <strlen+0x2c>
800820a0:	0005883a 	mov	r2,zero
800820a4:	f800283a 	ret

800820a8 <___svfprintf_internal_r>:
800820a8:	deffb704 	addi	sp,sp,-292
800820ac:	dfc04815 	stw	ra,288(sp)
800820b0:	ddc04615 	stw	r23,280(sp)
800820b4:	d9402c15 	stw	r5,176(sp)
800820b8:	d9003915 	stw	r4,228(sp)
800820bc:	302f883a 	mov	r23,r6
800820c0:	d9c02d15 	stw	r7,180(sp)
800820c4:	df004715 	stw	fp,284(sp)
800820c8:	dd804515 	stw	r22,276(sp)
800820cc:	dd404415 	stw	r21,272(sp)
800820d0:	dd004315 	stw	r20,268(sp)
800820d4:	dcc04215 	stw	r19,264(sp)
800820d8:	dc804115 	stw	r18,260(sp)
800820dc:	dc404015 	stw	r17,256(sp)
800820e0:	dc003f15 	stw	r16,252(sp)
800820e4:	00891bc0 	call	800891bc <_localeconv_r>
800820e8:	10800017 	ldw	r2,0(r2)
800820ec:	1009883a 	mov	r4,r2
800820f0:	d8803415 	stw	r2,208(sp)
800820f4:	00820100 	call	80082010 <strlen>
800820f8:	d8c02c17 	ldw	r3,176(sp)
800820fc:	d8803815 	stw	r2,224(sp)
80082100:	1880030b 	ldhu	r2,12(r3)
80082104:	1080200c 	andi	r2,r2,128
80082108:	10000226 	beq	r2,zero,80082114 <___svfprintf_internal_r+0x6c>
8008210c:	18800417 	ldw	r2,16(r3)
80082110:	10067f26 	beq	r2,zero,80083b10 <___svfprintf_internal_r+0x1a68>
80082114:	dcc03917 	ldw	r19,228(sp)
80082118:	d8c00404 	addi	r3,sp,16
8008211c:	05600274 	movhi	r21,32777
80082120:	d9001e04 	addi	r4,sp,120
80082124:	ad5a8084 	addi	r21,r21,27138
80082128:	d8c01e15 	stw	r3,120(sp)
8008212c:	d8002015 	stw	zero,128(sp)
80082130:	d8001f15 	stw	zero,124(sp)
80082134:	d8003315 	stw	zero,204(sp)
80082138:	d8003615 	stw	zero,216(sp)
8008213c:	d8003715 	stw	zero,220(sp)
80082140:	1811883a 	mov	r8,r3
80082144:	d8003a15 	stw	zero,232(sp)
80082148:	d8003b15 	stw	zero,236(sp)
8008214c:	d8002f15 	stw	zero,188(sp)
80082150:	d9002815 	stw	r4,160(sp)
80082154:	b8800007 	ldb	r2,0(r23)
80082158:	10026726 	beq	r2,zero,80082af8 <___svfprintf_internal_r+0xa50>
8008215c:	00c00944 	movi	r3,37
80082160:	b821883a 	mov	r16,r23
80082164:	10c0021e 	bne	r2,r3,80082170 <___svfprintf_internal_r+0xc8>
80082168:	00001406 	br	800821bc <___svfprintf_internal_r+0x114>
8008216c:	10c00326 	beq	r2,r3,8008217c <___svfprintf_internal_r+0xd4>
80082170:	84000044 	addi	r16,r16,1
80082174:	80800007 	ldb	r2,0(r16)
80082178:	103ffc1e 	bne	r2,zero,8008216c <___svfprintf_internal_r+0xc4>
8008217c:	85e3c83a 	sub	r17,r16,r23
80082180:	88000e26 	beq	r17,zero,800821bc <___svfprintf_internal_r+0x114>
80082184:	d8c02017 	ldw	r3,128(sp)
80082188:	d8801f17 	ldw	r2,124(sp)
8008218c:	45c00015 	stw	r23,0(r8)
80082190:	1c47883a 	add	r3,r3,r17
80082194:	10800044 	addi	r2,r2,1
80082198:	d8c02015 	stw	r3,128(sp)
8008219c:	44400115 	stw	r17,4(r8)
800821a0:	d8801f15 	stw	r2,124(sp)
800821a4:	00c001c4 	movi	r3,7
800821a8:	18809716 	blt	r3,r2,80082408 <___svfprintf_internal_r+0x360>
800821ac:	42000204 	addi	r8,r8,8
800821b0:	d9402f17 	ldw	r5,188(sp)
800821b4:	2c4b883a 	add	r5,r5,r17
800821b8:	d9402f15 	stw	r5,188(sp)
800821bc:	80800007 	ldb	r2,0(r16)
800821c0:	10009826 	beq	r2,zero,80082424 <___svfprintf_internal_r+0x37c>
800821c4:	84400047 	ldb	r17,1(r16)
800821c8:	00bfffc4 	movi	r2,-1
800821cc:	85c00044 	addi	r23,r16,1
800821d0:	d8002785 	stb	zero,158(sp)
800821d4:	0007883a 	mov	r3,zero
800821d8:	000f883a 	mov	r7,zero
800821dc:	d8802915 	stw	r2,164(sp)
800821e0:	d8003115 	stw	zero,196(sp)
800821e4:	0025883a 	mov	r18,zero
800821e8:	01401604 	movi	r5,88
800821ec:	01800244 	movi	r6,9
800821f0:	02800a84 	movi	r10,42
800821f4:	02401b04 	movi	r9,108
800821f8:	bdc00044 	addi	r23,r23,1
800821fc:	88bff804 	addi	r2,r17,-32
80082200:	2882f036 	bltu	r5,r2,80082dc4 <___svfprintf_internal_r+0xd1c>
80082204:	100490ba 	slli	r2,r2,2
80082208:	01200234 	movhi	r4,32776
8008220c:	21088704 	addi	r4,r4,8732
80082210:	1105883a 	add	r2,r2,r4
80082214:	10800017 	ldw	r2,0(r2)
80082218:	1000683a 	jmp	r2
8008221c:	80082d2c 	andhi	zero,r16,8372
80082220:	80082dc4 	addi	zero,r16,8375
80082224:	80082dc4 	addi	zero,r16,8375
80082228:	80082d20 	cmpeqi	zero,r16,8372
8008222c:	80082dc4 	addi	zero,r16,8375
80082230:	80082dc4 	addi	zero,r16,8375
80082234:	80082dc4 	addi	zero,r16,8375
80082238:	80082dc4 	addi	zero,r16,8375
8008223c:	80082dc4 	addi	zero,r16,8375
80082240:	80082dc4 	addi	zero,r16,8375
80082244:	80082480 	call	88008248 <__alt_data_end+0x7f0b248>
80082248:	80082c5c 	xori	zero,r16,8369
8008224c:	80082dc4 	addi	zero,r16,8375
80082250:	80082390 	cmplti	zero,r16,8334
80082254:	800824a8 	cmpgeui	zero,r16,8338
80082258:	80082dc4 	addi	zero,r16,8375
8008225c:	8008251c 	xori	zero,r16,8340
80082260:	800824e8 	cmpgeui	zero,r16,8339
80082264:	800824e8 	cmpgeui	zero,r16,8339
80082268:	800824e8 	cmpgeui	zero,r16,8339
8008226c:	800824e8 	cmpgeui	zero,r16,8339
80082270:	800824e8 	cmpgeui	zero,r16,8339
80082274:	800824e8 	cmpgeui	zero,r16,8339
80082278:	800824e8 	cmpgeui	zero,r16,8339
8008227c:	800824e8 	cmpgeui	zero,r16,8339
80082280:	800824e8 	cmpgeui	zero,r16,8339
80082284:	80082dc4 	addi	zero,r16,8375
80082288:	80082dc4 	addi	zero,r16,8375
8008228c:	80082dc4 	addi	zero,r16,8375
80082290:	80082dc4 	addi	zero,r16,8375
80082294:	80082dc4 	addi	zero,r16,8375
80082298:	80082dc4 	addi	zero,r16,8375
8008229c:	80082dc4 	addi	zero,r16,8375
800822a0:	80082dc4 	addi	zero,r16,8375
800822a4:	80082dc4 	addi	zero,r16,8375
800822a8:	80082dc4 	addi	zero,r16,8375
800822ac:	800825d4 	ori	zero,r16,8343
800822b0:	80082528 	cmpgeui	zero,r16,8340
800822b4:	80082dc4 	addi	zero,r16,8375
800822b8:	80082528 	cmpgeui	zero,r16,8340
800822bc:	80082dc4 	addi	zero,r16,8375
800822c0:	80082dc4 	addi	zero,r16,8375
800822c4:	80082dc4 	addi	zero,r16,8375
800822c8:	80082dc4 	addi	zero,r16,8375
800822cc:	800825c8 	cmpgei	zero,r16,8343
800822d0:	80082dc4 	addi	zero,r16,8375
800822d4:	80082dc4 	addi	zero,r16,8375
800822d8:	80082690 	cmplti	zero,r16,8346
800822dc:	80082dc4 	addi	zero,r16,8375
800822e0:	80082dc4 	addi	zero,r16,8375
800822e4:	80082dc4 	addi	zero,r16,8375
800822e8:	80082dc4 	addi	zero,r16,8375
800822ec:	80082dc4 	addi	zero,r16,8375
800822f0:	80082b00 	call	880082b0 <__alt_data_end+0x7f0b2b0>
800822f4:	80082dc4 	addi	zero,r16,8375
800822f8:	80082dc4 	addi	zero,r16,8375
800822fc:	80082b60 	cmpeqi	zero,r16,8365
80082300:	80082dc4 	addi	zero,r16,8375
80082304:	80082dc4 	addi	zero,r16,8375
80082308:	80082dc4 	addi	zero,r16,8375
8008230c:	80082dc4 	addi	zero,r16,8375
80082310:	80082dc4 	addi	zero,r16,8375
80082314:	80082dc4 	addi	zero,r16,8375
80082318:	80082dc4 	addi	zero,r16,8375
8008231c:	80082dc4 	addi	zero,r16,8375
80082320:	80082dc4 	addi	zero,r16,8375
80082324:	80082dc4 	addi	zero,r16,8375
80082328:	80082c10 	cmplti	zero,r16,8368
8008232c:	80082d4c 	andi	zero,r16,8373
80082330:	80082528 	cmpgeui	zero,r16,8340
80082334:	80082528 	cmpgeui	zero,r16,8340
80082338:	80082528 	cmpgeui	zero,r16,8340
8008233c:	80082da0 	cmpeqi	zero,r16,8374
80082340:	80082d4c 	andi	zero,r16,8373
80082344:	80082dc4 	addi	zero,r16,8375
80082348:	80082dc4 	addi	zero,r16,8375
8008234c:	80082d5c 	xori	zero,r16,8373
80082350:	80082dc4 	addi	zero,r16,8375
80082354:	80082d6c 	andhi	zero,r16,8373
80082358:	80082c4c 	andi	zero,r16,8369
8008235c:	8008239c 	xori	zero,r16,8334
80082360:	80082c6c 	andhi	zero,r16,8369
80082364:	80082dc4 	addi	zero,r16,8375
80082368:	80082c78 	rdprs	zero,r16,8369
8008236c:	80082dc4 	addi	zero,r16,8375
80082370:	80082cd4 	ori	zero,r16,8371
80082374:	80082dc4 	addi	zero,r16,8375
80082378:	80082dc4 	addi	zero,r16,8375
8008237c:	80082ce4 	muli	zero,r16,8371
80082380:	d9003117 	ldw	r4,196(sp)
80082384:	d8802d15 	stw	r2,180(sp)
80082388:	0109c83a 	sub	r4,zero,r4
8008238c:	d9003115 	stw	r4,196(sp)
80082390:	94800114 	ori	r18,r18,4
80082394:	bc400007 	ldb	r17,0(r23)
80082398:	003f9706 	br	800821f8 <___svfprintf_internal_r+0x150>
8008239c:	00800c04 	movi	r2,48
800823a0:	d9002d17 	ldw	r4,180(sp)
800823a4:	d9402917 	ldw	r5,164(sp)
800823a8:	d8802705 	stb	r2,156(sp)
800823ac:	00801e04 	movi	r2,120
800823b0:	d8802745 	stb	r2,157(sp)
800823b4:	d8002785 	stb	zero,158(sp)
800823b8:	20c00104 	addi	r3,r4,4
800823bc:	25000017 	ldw	r20,0(r4)
800823c0:	002d883a 	mov	r22,zero
800823c4:	90800094 	ori	r2,r18,2
800823c8:	28028616 	blt	r5,zero,80082de4 <___svfprintf_internal_r+0xd3c>
800823cc:	00bfdfc4 	movi	r2,-129
800823d0:	90a4703a 	and	r18,r18,r2
800823d4:	d8c02d15 	stw	r3,180(sp)
800823d8:	94800094 	ori	r18,r18,2
800823dc:	a002731e 	bne	r20,zero,80082dac <___svfprintf_internal_r+0xd04>
800823e0:	00a00274 	movhi	r2,32777
800823e4:	109a7904 	addi	r2,r2,27108
800823e8:	d8803a15 	stw	r2,232(sp)
800823ec:	04401e04 	movi	r17,120
800823f0:	d8c02917 	ldw	r3,164(sp)
800823f4:	0039883a 	mov	fp,zero
800823f8:	1801d526 	beq	r3,zero,80082b50 <___svfprintf_internal_r+0xaa8>
800823fc:	0029883a 	mov	r20,zero
80082400:	002d883a 	mov	r22,zero
80082404:	0001f106 	br	80082bcc <___svfprintf_internal_r+0xb24>
80082408:	d9402c17 	ldw	r5,176(sp)
8008240c:	d9801e04 	addi	r6,sp,120
80082410:	9809883a 	mov	r4,r19
80082414:	008ba940 	call	8008ba94 <__ssprint_r>
80082418:	1000081e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
8008241c:	da000404 	addi	r8,sp,16
80082420:	003f6306 	br	800821b0 <___svfprintf_internal_r+0x108>
80082424:	d8802017 	ldw	r2,128(sp)
80082428:	10000426 	beq	r2,zero,8008243c <___svfprintf_internal_r+0x394>
8008242c:	d9402c17 	ldw	r5,176(sp)
80082430:	d9003917 	ldw	r4,228(sp)
80082434:	d9801e04 	addi	r6,sp,120
80082438:	008ba940 	call	8008ba94 <__ssprint_r>
8008243c:	d8802c17 	ldw	r2,176(sp)
80082440:	10c0030b 	ldhu	r3,12(r2)
80082444:	d8802f17 	ldw	r2,188(sp)
80082448:	18c0100c 	andi	r3,r3,64
8008244c:	1805f51e 	bne	r3,zero,80083c24 <___svfprintf_internal_r+0x1b7c>
80082450:	dfc04817 	ldw	ra,288(sp)
80082454:	df004717 	ldw	fp,284(sp)
80082458:	ddc04617 	ldw	r23,280(sp)
8008245c:	dd804517 	ldw	r22,276(sp)
80082460:	dd404417 	ldw	r21,272(sp)
80082464:	dd004317 	ldw	r20,268(sp)
80082468:	dcc04217 	ldw	r19,264(sp)
8008246c:	dc804117 	ldw	r18,260(sp)
80082470:	dc404017 	ldw	r17,256(sp)
80082474:	dc003f17 	ldw	r16,252(sp)
80082478:	dec04904 	addi	sp,sp,292
8008247c:	f800283a 	ret
80082480:	d8802d17 	ldw	r2,180(sp)
80082484:	d9002d17 	ldw	r4,180(sp)
80082488:	10800017 	ldw	r2,0(r2)
8008248c:	d8803115 	stw	r2,196(sp)
80082490:	20800104 	addi	r2,r4,4
80082494:	d9003117 	ldw	r4,196(sp)
80082498:	203fb916 	blt	r4,zero,80082380 <___svfprintf_internal_r+0x2d8>
8008249c:	d8802d15 	stw	r2,180(sp)
800824a0:	bc400007 	ldb	r17,0(r23)
800824a4:	003f5406 	br	800821f8 <___svfprintf_internal_r+0x150>
800824a8:	bc400007 	ldb	r17,0(r23)
800824ac:	bac00044 	addi	r11,r23,1
800824b0:	8a873926 	beq	r17,r10,80084198 <___svfprintf_internal_r+0x20f0>
800824b4:	88bff404 	addi	r2,r17,-48
800824b8:	0009883a 	mov	r4,zero
800824bc:	30868836 	bltu	r6,r2,80083ee0 <___svfprintf_internal_r+0x1e38>
800824c0:	5c400007 	ldb	r17,0(r11)
800824c4:	210002a4 	muli	r4,r4,10
800824c8:	5dc00044 	addi	r23,r11,1
800824cc:	b817883a 	mov	r11,r23
800824d0:	2089883a 	add	r4,r4,r2
800824d4:	88bff404 	addi	r2,r17,-48
800824d8:	30bff92e 	bgeu	r6,r2,800824c0 <___svfprintf_internal_r+0x418>
800824dc:	2005d716 	blt	r4,zero,80083c3c <___svfprintf_internal_r+0x1b94>
800824e0:	d9002915 	stw	r4,164(sp)
800824e4:	003f4506 	br	800821fc <___svfprintf_internal_r+0x154>
800824e8:	b809883a 	mov	r4,r23
800824ec:	d8003115 	stw	zero,196(sp)
800824f0:	88bff404 	addi	r2,r17,-48
800824f4:	0017883a 	mov	r11,zero
800824f8:	24400007 	ldb	r17,0(r4)
800824fc:	5ac002a4 	muli	r11,r11,10
80082500:	bdc00044 	addi	r23,r23,1
80082504:	b809883a 	mov	r4,r23
80082508:	12d7883a 	add	r11,r2,r11
8008250c:	88bff404 	addi	r2,r17,-48
80082510:	30bff92e 	bgeu	r6,r2,800824f8 <___svfprintf_internal_r+0x450>
80082514:	dac03115 	stw	r11,196(sp)
80082518:	003f3806 	br	800821fc <___svfprintf_internal_r+0x154>
8008251c:	94802014 	ori	r18,r18,128
80082520:	bc400007 	ldb	r17,0(r23)
80082524:	003f3406 	br	800821f8 <___svfprintf_internal_r+0x150>
80082528:	18c03fcc 	andi	r3,r3,255
8008252c:	1807471e 	bne	r3,zero,8008424c <___svfprintf_internal_r+0x21a4>
80082530:	9080020c 	andi	r2,r18,8
80082534:	10047d26 	beq	r2,zero,8008372c <___svfprintf_internal_r+0x1684>
80082538:	d8c02d17 	ldw	r3,180(sp)
8008253c:	d9002d17 	ldw	r4,180(sp)
80082540:	d9402d17 	ldw	r5,180(sp)
80082544:	18c00017 	ldw	r3,0(r3)
80082548:	21000117 	ldw	r4,4(r4)
8008254c:	29400204 	addi	r5,r5,8
80082550:	d8c03615 	stw	r3,216(sp)
80082554:	d9003715 	stw	r4,220(sp)
80082558:	d9402d15 	stw	r5,180(sp)
8008255c:	d9003617 	ldw	r4,216(sp)
80082560:	d9403717 	ldw	r5,220(sp)
80082564:	da003e15 	stw	r8,248(sp)
80082568:	04000044 	movi	r16,1
8008256c:	008b7b40 	call	8008b7b4 <__fpclassifyd>
80082570:	da003e17 	ldw	r8,248(sp)
80082574:	14044b1e 	bne	r2,r16,800836a4 <___svfprintf_internal_r+0x15fc>
80082578:	d9003617 	ldw	r4,216(sp)
8008257c:	d9403717 	ldw	r5,220(sp)
80082580:	000d883a 	mov	r6,zero
80082584:	000f883a 	mov	r7,zero
80082588:	0090c9c0 	call	80090c9c <__ledf2>
8008258c:	da003e17 	ldw	r8,248(sp)
80082590:	1005f316 	blt	r2,zero,80083d60 <___svfprintf_internal_r+0x1cb8>
80082594:	df002783 	ldbu	fp,158(sp)
80082598:	008011c4 	movi	r2,71
8008259c:	1445590e 	bge	r2,r17,80083b04 <___svfprintf_internal_r+0x1a5c>
800825a0:	04200274 	movhi	r16,32777
800825a4:	841a7104 	addi	r16,r16,27076
800825a8:	00c000c4 	movi	r3,3
800825ac:	00bfdfc4 	movi	r2,-129
800825b0:	d8c02a15 	stw	r3,168(sp)
800825b4:	90a4703a 	and	r18,r18,r2
800825b8:	d8c02e15 	stw	r3,184(sp)
800825bc:	d8002915 	stw	zero,164(sp)
800825c0:	d8003215 	stw	zero,200(sp)
800825c4:	00006606 	br	80082760 <___svfprintf_internal_r+0x6b8>
800825c8:	94800214 	ori	r18,r18,8
800825cc:	bc400007 	ldb	r17,0(r23)
800825d0:	003f0906 	br	800821f8 <___svfprintf_internal_r+0x150>
800825d4:	18c03fcc 	andi	r3,r3,255
800825d8:	1807181e 	bne	r3,zero,8008423c <___svfprintf_internal_r+0x2194>
800825dc:	94800414 	ori	r18,r18,16
800825e0:	9080080c 	andi	r2,r18,32
800825e4:	10039626 	beq	r2,zero,80083440 <___svfprintf_internal_r+0x1398>
800825e8:	d9402d17 	ldw	r5,180(sp)
800825ec:	28800117 	ldw	r2,4(r5)
800825f0:	2d000017 	ldw	r20,0(r5)
800825f4:	29400204 	addi	r5,r5,8
800825f8:	d9402d15 	stw	r5,180(sp)
800825fc:	102d883a 	mov	r22,r2
80082600:	10039816 	blt	r2,zero,80083464 <___svfprintf_internal_r+0x13bc>
80082604:	d9402917 	ldw	r5,164(sp)
80082608:	df002783 	ldbu	fp,158(sp)
8008260c:	2803ab16 	blt	r5,zero,800834bc <___svfprintf_internal_r+0x1414>
80082610:	00ffdfc4 	movi	r3,-129
80082614:	a584b03a 	or	r2,r20,r22
80082618:	90e4703a 	and	r18,r18,r3
8008261c:	10014a26 	beq	r2,zero,80082b48 <___svfprintf_internal_r+0xaa0>
80082620:	b0034b26 	beq	r22,zero,80083350 <___svfprintf_internal_r+0x12a8>
80082624:	dc402a15 	stw	r17,168(sp)
80082628:	dc001e04 	addi	r16,sp,120
8008262c:	b023883a 	mov	r17,r22
80082630:	402d883a 	mov	r22,r8
80082634:	a009883a 	mov	r4,r20
80082638:	880b883a 	mov	r5,r17
8008263c:	01800284 	movi	r6,10
80082640:	000f883a 	mov	r7,zero
80082644:	008f3940 	call	8008f394 <__umoddi3>
80082648:	10800c04 	addi	r2,r2,48
8008264c:	843fffc4 	addi	r16,r16,-1
80082650:	a009883a 	mov	r4,r20
80082654:	880b883a 	mov	r5,r17
80082658:	80800005 	stb	r2,0(r16)
8008265c:	01800284 	movi	r6,10
80082660:	000f883a 	mov	r7,zero
80082664:	008ee1c0 	call	8008ee1c <__udivdi3>
80082668:	1029883a 	mov	r20,r2
8008266c:	10c4b03a 	or	r2,r2,r3
80082670:	1823883a 	mov	r17,r3
80082674:	103fef1e 	bne	r2,zero,80082634 <___svfprintf_internal_r+0x58c>
80082678:	d8c02817 	ldw	r3,160(sp)
8008267c:	dc402a17 	ldw	r17,168(sp)
80082680:	b011883a 	mov	r8,r22
80082684:	1c07c83a 	sub	r3,r3,r16
80082688:	d8c02e15 	stw	r3,184(sp)
8008268c:	00002e06 	br	80082748 <___svfprintf_internal_r+0x6a0>
80082690:	18c03fcc 	andi	r3,r3,255
80082694:	1806e71e 	bne	r3,zero,80084234 <___svfprintf_internal_r+0x218c>
80082698:	94800414 	ori	r18,r18,16
8008269c:	9080080c 	andi	r2,r18,32
800826a0:	1002d426 	beq	r2,zero,800831f4 <___svfprintf_internal_r+0x114c>
800826a4:	d9402d17 	ldw	r5,180(sp)
800826a8:	d8c02917 	ldw	r3,164(sp)
800826ac:	d8002785 	stb	zero,158(sp)
800826b0:	28800204 	addi	r2,r5,8
800826b4:	2d000017 	ldw	r20,0(r5)
800826b8:	2d800117 	ldw	r22,4(r5)
800826bc:	18041516 	blt	r3,zero,80083714 <___svfprintf_internal_r+0x166c>
800826c0:	013fdfc4 	movi	r4,-129
800826c4:	a586b03a 	or	r3,r20,r22
800826c8:	d8802d15 	stw	r2,180(sp)
800826cc:	9124703a 	and	r18,r18,r4
800826d0:	1802d51e 	bne	r3,zero,80083228 <___svfprintf_internal_r+0x1180>
800826d4:	d9402917 	ldw	r5,164(sp)
800826d8:	0039883a 	mov	fp,zero
800826dc:	2806be26 	beq	r5,zero,800841d8 <___svfprintf_internal_r+0x2130>
800826e0:	0029883a 	mov	r20,zero
800826e4:	002d883a 	mov	r22,zero
800826e8:	dc001e04 	addi	r16,sp,120
800826ec:	a006d0fa 	srli	r3,r20,3
800826f0:	b008977a 	slli	r4,r22,29
800826f4:	b02cd0fa 	srli	r22,r22,3
800826f8:	a50001cc 	andi	r20,r20,7
800826fc:	a0800c04 	addi	r2,r20,48
80082700:	843fffc4 	addi	r16,r16,-1
80082704:	20e8b03a 	or	r20,r4,r3
80082708:	80800005 	stb	r2,0(r16)
8008270c:	a586b03a 	or	r3,r20,r22
80082710:	183ff61e 	bne	r3,zero,800826ec <___svfprintf_internal_r+0x644>
80082714:	90c0004c 	andi	r3,r18,1
80082718:	18013926 	beq	r3,zero,80082c00 <___svfprintf_internal_r+0xb58>
8008271c:	10803fcc 	andi	r2,r2,255
80082720:	1080201c 	xori	r2,r2,128
80082724:	10bfe004 	addi	r2,r2,-128
80082728:	00c00c04 	movi	r3,48
8008272c:	10c13426 	beq	r2,r3,80082c00 <___svfprintf_internal_r+0xb58>
80082730:	80ffffc5 	stb	r3,-1(r16)
80082734:	d8c02817 	ldw	r3,160(sp)
80082738:	80bfffc4 	addi	r2,r16,-1
8008273c:	1021883a 	mov	r16,r2
80082740:	1887c83a 	sub	r3,r3,r2
80082744:	d8c02e15 	stw	r3,184(sp)
80082748:	d8802e17 	ldw	r2,184(sp)
8008274c:	d9002917 	ldw	r4,164(sp)
80082750:	1100010e 	bge	r2,r4,80082758 <___svfprintf_internal_r+0x6b0>
80082754:	2005883a 	mov	r2,r4
80082758:	d8802a15 	stw	r2,168(sp)
8008275c:	d8003215 	stw	zero,200(sp)
80082760:	e7003fcc 	andi	fp,fp,255
80082764:	e700201c 	xori	fp,fp,128
80082768:	e73fe004 	addi	fp,fp,-128
8008276c:	e0000326 	beq	fp,zero,8008277c <___svfprintf_internal_r+0x6d4>
80082770:	d8c02a17 	ldw	r3,168(sp)
80082774:	18c00044 	addi	r3,r3,1
80082778:	d8c02a15 	stw	r3,168(sp)
8008277c:	90c0008c 	andi	r3,r18,2
80082780:	d8c02b15 	stw	r3,172(sp)
80082784:	18000326 	beq	r3,zero,80082794 <___svfprintf_internal_r+0x6ec>
80082788:	d8c02a17 	ldw	r3,168(sp)
8008278c:	18c00084 	addi	r3,r3,2
80082790:	d8c02a15 	stw	r3,168(sp)
80082794:	90c0210c 	andi	r3,r18,132
80082798:	d8c03015 	stw	r3,192(sp)
8008279c:	1801a11e 	bne	r3,zero,80082e24 <___svfprintf_internal_r+0xd7c>
800827a0:	d9003117 	ldw	r4,196(sp)
800827a4:	d8c02a17 	ldw	r3,168(sp)
800827a8:	20e9c83a 	sub	r20,r4,r3
800827ac:	05019d0e 	bge	zero,r20,80082e24 <___svfprintf_internal_r+0xd7c>
800827b0:	02400404 	movi	r9,16
800827b4:	d8c02017 	ldw	r3,128(sp)
800827b8:	d8801f17 	ldw	r2,124(sp)
800827bc:	4d051b0e 	bge	r9,r20,80083c2c <___svfprintf_internal_r+0x1b84>
800827c0:	01600274 	movhi	r5,32777
800827c4:	295a8484 	addi	r5,r5,27154
800827c8:	dc403c15 	stw	r17,240(sp)
800827cc:	d9403515 	stw	r5,212(sp)
800827d0:	a023883a 	mov	r17,r20
800827d4:	482d883a 	mov	r22,r9
800827d8:	9029883a 	mov	r20,r18
800827dc:	070001c4 	movi	fp,7
800827e0:	8025883a 	mov	r18,r16
800827e4:	dc002c17 	ldw	r16,176(sp)
800827e8:	00000306 	br	800827f8 <___svfprintf_internal_r+0x750>
800827ec:	8c7ffc04 	addi	r17,r17,-16
800827f0:	42000204 	addi	r8,r8,8
800827f4:	b440130e 	bge	r22,r17,80082844 <___svfprintf_internal_r+0x79c>
800827f8:	01200274 	movhi	r4,32777
800827fc:	18c00404 	addi	r3,r3,16
80082800:	10800044 	addi	r2,r2,1
80082804:	211a8484 	addi	r4,r4,27154
80082808:	41000015 	stw	r4,0(r8)
8008280c:	45800115 	stw	r22,4(r8)
80082810:	d8c02015 	stw	r3,128(sp)
80082814:	d8801f15 	stw	r2,124(sp)
80082818:	e0bff40e 	bge	fp,r2,800827ec <___svfprintf_internal_r+0x744>
8008281c:	d9801e04 	addi	r6,sp,120
80082820:	800b883a 	mov	r5,r16
80082824:	9809883a 	mov	r4,r19
80082828:	008ba940 	call	8008ba94 <__ssprint_r>
8008282c:	103f031e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80082830:	8c7ffc04 	addi	r17,r17,-16
80082834:	d8c02017 	ldw	r3,128(sp)
80082838:	d8801f17 	ldw	r2,124(sp)
8008283c:	da000404 	addi	r8,sp,16
80082840:	b47fed16 	blt	r22,r17,800827f8 <___svfprintf_internal_r+0x750>
80082844:	9021883a 	mov	r16,r18
80082848:	a025883a 	mov	r18,r20
8008284c:	8829883a 	mov	r20,r17
80082850:	dc403c17 	ldw	r17,240(sp)
80082854:	d9403517 	ldw	r5,212(sp)
80082858:	a0c7883a 	add	r3,r20,r3
8008285c:	10800044 	addi	r2,r2,1
80082860:	41400015 	stw	r5,0(r8)
80082864:	45000115 	stw	r20,4(r8)
80082868:	d8c02015 	stw	r3,128(sp)
8008286c:	d8801f15 	stw	r2,124(sp)
80082870:	010001c4 	movi	r4,7
80082874:	20829f16 	blt	r4,r2,800832f4 <___svfprintf_internal_r+0x124c>
80082878:	df002787 	ldb	fp,158(sp)
8008287c:	42000204 	addi	r8,r8,8
80082880:	e0000c26 	beq	fp,zero,800828b4 <___svfprintf_internal_r+0x80c>
80082884:	d8801f17 	ldw	r2,124(sp)
80082888:	d9002784 	addi	r4,sp,158
8008288c:	18c00044 	addi	r3,r3,1
80082890:	10800044 	addi	r2,r2,1
80082894:	41000015 	stw	r4,0(r8)
80082898:	01000044 	movi	r4,1
8008289c:	41000115 	stw	r4,4(r8)
800828a0:	d8c02015 	stw	r3,128(sp)
800828a4:	d8801f15 	stw	r2,124(sp)
800828a8:	010001c4 	movi	r4,7
800828ac:	20823816 	blt	r4,r2,80083190 <___svfprintf_internal_r+0x10e8>
800828b0:	42000204 	addi	r8,r8,8
800828b4:	d8802b17 	ldw	r2,172(sp)
800828b8:	10000c26 	beq	r2,zero,800828ec <___svfprintf_internal_r+0x844>
800828bc:	d8801f17 	ldw	r2,124(sp)
800828c0:	d9002704 	addi	r4,sp,156
800828c4:	18c00084 	addi	r3,r3,2
800828c8:	10800044 	addi	r2,r2,1
800828cc:	41000015 	stw	r4,0(r8)
800828d0:	01000084 	movi	r4,2
800828d4:	41000115 	stw	r4,4(r8)
800828d8:	d8c02015 	stw	r3,128(sp)
800828dc:	d8801f15 	stw	r2,124(sp)
800828e0:	010001c4 	movi	r4,7
800828e4:	20823216 	blt	r4,r2,800831b0 <___svfprintf_internal_r+0x1108>
800828e8:	42000204 	addi	r8,r8,8
800828ec:	d9003017 	ldw	r4,192(sp)
800828f0:	00802004 	movi	r2,128
800828f4:	20819726 	beq	r4,r2,80082f54 <___svfprintf_internal_r+0xeac>
800828f8:	d9402917 	ldw	r5,164(sp)
800828fc:	d8802e17 	ldw	r2,184(sp)
80082900:	28adc83a 	sub	r22,r5,r2
80082904:	05802f0e 	bge	zero,r22,800829c4 <___svfprintf_internal_r+0x91c>
80082908:	07000404 	movi	fp,16
8008290c:	d8801f17 	ldw	r2,124(sp)
80082910:	e583c00e 	bge	fp,r22,80083814 <___svfprintf_internal_r+0x176c>
80082914:	01600274 	movhi	r5,32777
80082918:	295a8084 	addi	r5,r5,27138
8008291c:	dc402915 	stw	r17,164(sp)
80082920:	d9402b15 	stw	r5,172(sp)
80082924:	b023883a 	mov	r17,r22
80082928:	050001c4 	movi	r20,7
8008292c:	902d883a 	mov	r22,r18
80082930:	8025883a 	mov	r18,r16
80082934:	dc002c17 	ldw	r16,176(sp)
80082938:	00000306 	br	80082948 <___svfprintf_internal_r+0x8a0>
8008293c:	8c7ffc04 	addi	r17,r17,-16
80082940:	42000204 	addi	r8,r8,8
80082944:	e440110e 	bge	fp,r17,8008298c <___svfprintf_internal_r+0x8e4>
80082948:	18c00404 	addi	r3,r3,16
8008294c:	10800044 	addi	r2,r2,1
80082950:	45400015 	stw	r21,0(r8)
80082954:	47000115 	stw	fp,4(r8)
80082958:	d8c02015 	stw	r3,128(sp)
8008295c:	d8801f15 	stw	r2,124(sp)
80082960:	a0bff60e 	bge	r20,r2,8008293c <___svfprintf_internal_r+0x894>
80082964:	d9801e04 	addi	r6,sp,120
80082968:	800b883a 	mov	r5,r16
8008296c:	9809883a 	mov	r4,r19
80082970:	008ba940 	call	8008ba94 <__ssprint_r>
80082974:	103eb11e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80082978:	8c7ffc04 	addi	r17,r17,-16
8008297c:	d8c02017 	ldw	r3,128(sp)
80082980:	d8801f17 	ldw	r2,124(sp)
80082984:	da000404 	addi	r8,sp,16
80082988:	e47fef16 	blt	fp,r17,80082948 <___svfprintf_internal_r+0x8a0>
8008298c:	9021883a 	mov	r16,r18
80082990:	b025883a 	mov	r18,r22
80082994:	882d883a 	mov	r22,r17
80082998:	dc402917 	ldw	r17,164(sp)
8008299c:	d9002b17 	ldw	r4,172(sp)
800829a0:	1d87883a 	add	r3,r3,r22
800829a4:	10800044 	addi	r2,r2,1
800829a8:	41000015 	stw	r4,0(r8)
800829ac:	45800115 	stw	r22,4(r8)
800829b0:	d8c02015 	stw	r3,128(sp)
800829b4:	d8801f15 	stw	r2,124(sp)
800829b8:	010001c4 	movi	r4,7
800829bc:	2081ec16 	blt	r4,r2,80083170 <___svfprintf_internal_r+0x10c8>
800829c0:	42000204 	addi	r8,r8,8
800829c4:	9080400c 	andi	r2,r18,256
800829c8:	1001181e 	bne	r2,zero,80082e2c <___svfprintf_internal_r+0xd84>
800829cc:	d9402e17 	ldw	r5,184(sp)
800829d0:	d8801f17 	ldw	r2,124(sp)
800829d4:	44000015 	stw	r16,0(r8)
800829d8:	1947883a 	add	r3,r3,r5
800829dc:	10800044 	addi	r2,r2,1
800829e0:	41400115 	stw	r5,4(r8)
800829e4:	d8c02015 	stw	r3,128(sp)
800829e8:	d8801f15 	stw	r2,124(sp)
800829ec:	010001c4 	movi	r4,7
800829f0:	2081d116 	blt	r4,r2,80083138 <___svfprintf_internal_r+0x1090>
800829f4:	42000204 	addi	r8,r8,8
800829f8:	9480010c 	andi	r18,r18,4
800829fc:	90003226 	beq	r18,zero,80082ac8 <___svfprintf_internal_r+0xa20>
80082a00:	d9403117 	ldw	r5,196(sp)
80082a04:	d8802a17 	ldw	r2,168(sp)
80082a08:	28a1c83a 	sub	r16,r5,r2
80082a0c:	04002e0e 	bge	zero,r16,80082ac8 <___svfprintf_internal_r+0xa20>
80082a10:	04400404 	movi	r17,16
80082a14:	d8801f17 	ldw	r2,124(sp)
80082a18:	8c04b90e 	bge	r17,r16,80083d00 <___svfprintf_internal_r+0x1c58>
80082a1c:	01600274 	movhi	r5,32777
80082a20:	295a8484 	addi	r5,r5,27154
80082a24:	d9403515 	stw	r5,212(sp)
80082a28:	048001c4 	movi	r18,7
80082a2c:	dd002c17 	ldw	r20,176(sp)
80082a30:	00000306 	br	80082a40 <___svfprintf_internal_r+0x998>
80082a34:	843ffc04 	addi	r16,r16,-16
80082a38:	42000204 	addi	r8,r8,8
80082a3c:	8c00130e 	bge	r17,r16,80082a8c <___svfprintf_internal_r+0x9e4>
80082a40:	01200274 	movhi	r4,32777
80082a44:	18c00404 	addi	r3,r3,16
80082a48:	10800044 	addi	r2,r2,1
80082a4c:	211a8484 	addi	r4,r4,27154
80082a50:	41000015 	stw	r4,0(r8)
80082a54:	44400115 	stw	r17,4(r8)
80082a58:	d8c02015 	stw	r3,128(sp)
80082a5c:	d8801f15 	stw	r2,124(sp)
80082a60:	90bff40e 	bge	r18,r2,80082a34 <___svfprintf_internal_r+0x98c>
80082a64:	d9801e04 	addi	r6,sp,120
80082a68:	a00b883a 	mov	r5,r20
80082a6c:	9809883a 	mov	r4,r19
80082a70:	008ba940 	call	8008ba94 <__ssprint_r>
80082a74:	103e711e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80082a78:	843ffc04 	addi	r16,r16,-16
80082a7c:	d8c02017 	ldw	r3,128(sp)
80082a80:	d8801f17 	ldw	r2,124(sp)
80082a84:	da000404 	addi	r8,sp,16
80082a88:	8c3fed16 	blt	r17,r16,80082a40 <___svfprintf_internal_r+0x998>
80082a8c:	d9403517 	ldw	r5,212(sp)
80082a90:	1c07883a 	add	r3,r3,r16
80082a94:	10800044 	addi	r2,r2,1
80082a98:	41400015 	stw	r5,0(r8)
80082a9c:	44000115 	stw	r16,4(r8)
80082aa0:	d8c02015 	stw	r3,128(sp)
80082aa4:	d8801f15 	stw	r2,124(sp)
80082aa8:	010001c4 	movi	r4,7
80082aac:	2080060e 	bge	r4,r2,80082ac8 <___svfprintf_internal_r+0xa20>
80082ab0:	d9402c17 	ldw	r5,176(sp)
80082ab4:	d9801e04 	addi	r6,sp,120
80082ab8:	9809883a 	mov	r4,r19
80082abc:	008ba940 	call	8008ba94 <__ssprint_r>
80082ac0:	103e5e1e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80082ac4:	d8c02017 	ldw	r3,128(sp)
80082ac8:	d8803117 	ldw	r2,196(sp)
80082acc:	d9002a17 	ldw	r4,168(sp)
80082ad0:	1100010e 	bge	r2,r4,80082ad8 <___svfprintf_internal_r+0xa30>
80082ad4:	2005883a 	mov	r2,r4
80082ad8:	d9402f17 	ldw	r5,188(sp)
80082adc:	288b883a 	add	r5,r5,r2
80082ae0:	d9402f15 	stw	r5,188(sp)
80082ae4:	18019c1e 	bne	r3,zero,80083158 <___svfprintf_internal_r+0x10b0>
80082ae8:	b8800007 	ldb	r2,0(r23)
80082aec:	d8001f15 	stw	zero,124(sp)
80082af0:	da000404 	addi	r8,sp,16
80082af4:	103d991e 	bne	r2,zero,8008215c <___svfprintf_internal_r+0xb4>
80082af8:	b821883a 	mov	r16,r23
80082afc:	003daf06 	br	800821bc <___svfprintf_internal_r+0x114>
80082b00:	18c03fcc 	andi	r3,r3,255
80082b04:	1805c71e 	bne	r3,zero,80084224 <___svfprintf_internal_r+0x217c>
80082b08:	94800414 	ori	r18,r18,16
80082b0c:	9080080c 	andi	r2,r18,32
80082b10:	10020126 	beq	r2,zero,80083318 <___svfprintf_internal_r+0x1270>
80082b14:	d8802d17 	ldw	r2,180(sp)
80082b18:	d9002917 	ldw	r4,164(sp)
80082b1c:	d8002785 	stb	zero,158(sp)
80082b20:	10c00204 	addi	r3,r2,8
80082b24:	15000017 	ldw	r20,0(r2)
80082b28:	15800117 	ldw	r22,4(r2)
80082b2c:	20038e16 	blt	r4,zero,80083968 <___svfprintf_internal_r+0x18c0>
80082b30:	013fdfc4 	movi	r4,-129
80082b34:	a584b03a 	or	r2,r20,r22
80082b38:	d8c02d15 	stw	r3,180(sp)
80082b3c:	9124703a 	and	r18,r18,r4
80082b40:	0039883a 	mov	fp,zero
80082b44:	103eb61e 	bne	r2,zero,80082620 <___svfprintf_internal_r+0x578>
80082b48:	d8802917 	ldw	r2,164(sp)
80082b4c:	1002c81e 	bne	r2,zero,80083670 <___svfprintf_internal_r+0x15c8>
80082b50:	d8002915 	stw	zero,164(sp)
80082b54:	d8002e15 	stw	zero,184(sp)
80082b58:	dc001e04 	addi	r16,sp,120
80082b5c:	003efa06 	br	80082748 <___svfprintf_internal_r+0x6a0>
80082b60:	18c03fcc 	andi	r3,r3,255
80082b64:	1805ad1e 	bne	r3,zero,8008421c <___svfprintf_internal_r+0x2174>
80082b68:	01600274 	movhi	r5,32777
80082b6c:	295a7404 	addi	r5,r5,27088
80082b70:	d9403a15 	stw	r5,232(sp)
80082b74:	9080080c 	andi	r2,r18,32
80082b78:	10006126 	beq	r2,zero,80082d00 <___svfprintf_internal_r+0xc58>
80082b7c:	d8802d17 	ldw	r2,180(sp)
80082b80:	15000017 	ldw	r20,0(r2)
80082b84:	15800117 	ldw	r22,4(r2)
80082b88:	10800204 	addi	r2,r2,8
80082b8c:	d8802d15 	stw	r2,180(sp)
80082b90:	9080004c 	andi	r2,r18,1
80082b94:	10018e26 	beq	r2,zero,800831d0 <___svfprintf_internal_r+0x1128>
80082b98:	a584b03a 	or	r2,r20,r22
80082b9c:	10030926 	beq	r2,zero,800837c4 <___svfprintf_internal_r+0x171c>
80082ba0:	d8c02917 	ldw	r3,164(sp)
80082ba4:	00800c04 	movi	r2,48
80082ba8:	d8802705 	stb	r2,156(sp)
80082bac:	dc402745 	stb	r17,157(sp)
80082bb0:	d8002785 	stb	zero,158(sp)
80082bb4:	90800094 	ori	r2,r18,2
80082bb8:	18048716 	blt	r3,zero,80083dd8 <___svfprintf_internal_r+0x1d30>
80082bbc:	00bfdfc4 	movi	r2,-129
80082bc0:	90a4703a 	and	r18,r18,r2
80082bc4:	94800094 	ori	r18,r18,2
80082bc8:	0039883a 	mov	fp,zero
80082bcc:	d9003a17 	ldw	r4,232(sp)
80082bd0:	dc001e04 	addi	r16,sp,120
80082bd4:	a08003cc 	andi	r2,r20,15
80082bd8:	b006973a 	slli	r3,r22,28
80082bdc:	2085883a 	add	r2,r4,r2
80082be0:	a028d13a 	srli	r20,r20,4
80082be4:	10800003 	ldbu	r2,0(r2)
80082be8:	b02cd13a 	srli	r22,r22,4
80082bec:	843fffc4 	addi	r16,r16,-1
80082bf0:	1d28b03a 	or	r20,r3,r20
80082bf4:	80800005 	stb	r2,0(r16)
80082bf8:	a584b03a 	or	r2,r20,r22
80082bfc:	103ff51e 	bne	r2,zero,80082bd4 <___svfprintf_internal_r+0xb2c>
80082c00:	d8c02817 	ldw	r3,160(sp)
80082c04:	1c07c83a 	sub	r3,r3,r16
80082c08:	d8c02e15 	stw	r3,184(sp)
80082c0c:	003ece06 	br	80082748 <___svfprintf_internal_r+0x6a0>
80082c10:	d8c02d17 	ldw	r3,180(sp)
80082c14:	d9002d17 	ldw	r4,180(sp)
80082c18:	d8002785 	stb	zero,158(sp)
80082c1c:	18800017 	ldw	r2,0(r3)
80082c20:	21000104 	addi	r4,r4,4
80082c24:	00c00044 	movi	r3,1
80082c28:	d8c02a15 	stw	r3,168(sp)
80082c2c:	d8801405 	stb	r2,80(sp)
80082c30:	d9002d15 	stw	r4,180(sp)
80082c34:	d8c02e15 	stw	r3,184(sp)
80082c38:	d8002915 	stw	zero,164(sp)
80082c3c:	d8003215 	stw	zero,200(sp)
80082c40:	dc001404 	addi	r16,sp,80
80082c44:	0039883a 	mov	fp,zero
80082c48:	003ecc06 	br	8008277c <___svfprintf_internal_r+0x6d4>
80082c4c:	18c03fcc 	andi	r3,r3,255
80082c50:	183e9226 	beq	r3,zero,8008269c <___svfprintf_internal_r+0x5f4>
80082c54:	d9c02785 	stb	r7,158(sp)
80082c58:	003e9006 	br	8008269c <___svfprintf_internal_r+0x5f4>
80082c5c:	00c00044 	movi	r3,1
80082c60:	01c00ac4 	movi	r7,43
80082c64:	bc400007 	ldb	r17,0(r23)
80082c68:	003d6306 	br	800821f8 <___svfprintf_internal_r+0x150>
80082c6c:	94800814 	ori	r18,r18,32
80082c70:	bc400007 	ldb	r17,0(r23)
80082c74:	003d6006 	br	800821f8 <___svfprintf_internal_r+0x150>
80082c78:	d8c02d17 	ldw	r3,180(sp)
80082c7c:	d8002785 	stb	zero,158(sp)
80082c80:	1c000017 	ldw	r16,0(r3)
80082c84:	1d000104 	addi	r20,r3,4
80082c88:	80040f26 	beq	r16,zero,80083cc8 <___svfprintf_internal_r+0x1c20>
80082c8c:	d9002917 	ldw	r4,164(sp)
80082c90:	2003dc16 	blt	r4,zero,80083c04 <___svfprintf_internal_r+0x1b5c>
80082c94:	200d883a 	mov	r6,r4
80082c98:	000b883a 	mov	r5,zero
80082c9c:	8009883a 	mov	r4,r16
80082ca0:	da003e15 	stw	r8,248(sp)
80082ca4:	0089bb40 	call	80089bb4 <memchr>
80082ca8:	da003e17 	ldw	r8,248(sp)
80082cac:	10045826 	beq	r2,zero,80083e10 <___svfprintf_internal_r+0x1d68>
80082cb0:	1405c83a 	sub	r2,r2,r16
80082cb4:	d8802e15 	stw	r2,184(sp)
80082cb8:	1003d816 	blt	r2,zero,80083c1c <___svfprintf_internal_r+0x1b74>
80082cbc:	df002783 	ldbu	fp,158(sp)
80082cc0:	d8802a15 	stw	r2,168(sp)
80082cc4:	dd002d15 	stw	r20,180(sp)
80082cc8:	d8002915 	stw	zero,164(sp)
80082ccc:	d8003215 	stw	zero,200(sp)
80082cd0:	003ea306 	br	80082760 <___svfprintf_internal_r+0x6b8>
80082cd4:	18c03fcc 	andi	r3,r3,255
80082cd8:	183f8c26 	beq	r3,zero,80082b0c <___svfprintf_internal_r+0xa64>
80082cdc:	d9c02785 	stb	r7,158(sp)
80082ce0:	003f8a06 	br	80082b0c <___svfprintf_internal_r+0xa64>
80082ce4:	18c03fcc 	andi	r3,r3,255
80082ce8:	1805631e 	bne	r3,zero,80084278 <___svfprintf_internal_r+0x21d0>
80082cec:	01600274 	movhi	r5,32777
80082cf0:	295a7904 	addi	r5,r5,27108
80082cf4:	d9403a15 	stw	r5,232(sp)
80082cf8:	9080080c 	andi	r2,r18,32
80082cfc:	103f9f1e 	bne	r2,zero,80082b7c <___svfprintf_internal_r+0xad4>
80082d00:	9080040c 	andi	r2,r18,16
80082d04:	10029c26 	beq	r2,zero,80083778 <___svfprintf_internal_r+0x16d0>
80082d08:	d8c02d17 	ldw	r3,180(sp)
80082d0c:	002d883a 	mov	r22,zero
80082d10:	1d000017 	ldw	r20,0(r3)
80082d14:	18c00104 	addi	r3,r3,4
80082d18:	d8c02d15 	stw	r3,180(sp)
80082d1c:	003f9c06 	br	80082b90 <___svfprintf_internal_r+0xae8>
80082d20:	94800054 	ori	r18,r18,1
80082d24:	bc400007 	ldb	r17,0(r23)
80082d28:	003d3306 	br	800821f8 <___svfprintf_internal_r+0x150>
80082d2c:	38803fcc 	andi	r2,r7,255
80082d30:	1080201c 	xori	r2,r2,128
80082d34:	10bfe004 	addi	r2,r2,-128
80082d38:	1002971e 	bne	r2,zero,80083798 <___svfprintf_internal_r+0x16f0>
80082d3c:	00c00044 	movi	r3,1
80082d40:	01c00804 	movi	r7,32
80082d44:	bc400007 	ldb	r17,0(r23)
80082d48:	003d2b06 	br	800821f8 <___svfprintf_internal_r+0x150>
80082d4c:	18c03fcc 	andi	r3,r3,255
80082d50:	183e2326 	beq	r3,zero,800825e0 <___svfprintf_internal_r+0x538>
80082d54:	d9c02785 	stb	r7,158(sp)
80082d58:	003e2106 	br	800825e0 <___svfprintf_internal_r+0x538>
80082d5c:	bc400007 	ldb	r17,0(r23)
80082d60:	8a430426 	beq	r17,r9,80083974 <___svfprintf_internal_r+0x18cc>
80082d64:	94800414 	ori	r18,r18,16
80082d68:	003d2306 	br	800821f8 <___svfprintf_internal_r+0x150>
80082d6c:	18c03fcc 	andi	r3,r3,255
80082d70:	18053f1e 	bne	r3,zero,80084270 <___svfprintf_internal_r+0x21c8>
80082d74:	9080080c 	andi	r2,r18,32
80082d78:	10028926 	beq	r2,zero,800837a0 <___svfprintf_internal_r+0x16f8>
80082d7c:	d9402d17 	ldw	r5,180(sp)
80082d80:	d9002f17 	ldw	r4,188(sp)
80082d84:	28800017 	ldw	r2,0(r5)
80082d88:	2007d7fa 	srai	r3,r4,31
80082d8c:	29400104 	addi	r5,r5,4
80082d90:	d9402d15 	stw	r5,180(sp)
80082d94:	11000015 	stw	r4,0(r2)
80082d98:	10c00115 	stw	r3,4(r2)
80082d9c:	003ced06 	br	80082154 <___svfprintf_internal_r+0xac>
80082da0:	94801014 	ori	r18,r18,64
80082da4:	bc400007 	ldb	r17,0(r23)
80082da8:	003d1306 	br	800821f8 <___svfprintf_internal_r+0x150>
80082dac:	01200274 	movhi	r4,32777
80082db0:	211a7904 	addi	r4,r4,27108
80082db4:	0039883a 	mov	fp,zero
80082db8:	d9003a15 	stw	r4,232(sp)
80082dbc:	04401e04 	movi	r17,120
80082dc0:	003f8206 	br	80082bcc <___svfprintf_internal_r+0xb24>
80082dc4:	18c03fcc 	andi	r3,r3,255
80082dc8:	1805221e 	bne	r3,zero,80084254 <___svfprintf_internal_r+0x21ac>
80082dcc:	883d9526 	beq	r17,zero,80082424 <___svfprintf_internal_r+0x37c>
80082dd0:	00c00044 	movi	r3,1
80082dd4:	d8c02a15 	stw	r3,168(sp)
80082dd8:	dc401405 	stb	r17,80(sp)
80082ddc:	d8002785 	stb	zero,158(sp)
80082de0:	003f9406 	br	80082c34 <___svfprintf_internal_r+0xb8c>
80082de4:	01200274 	movhi	r4,32777
80082de8:	211a7904 	addi	r4,r4,27108
80082dec:	d9003a15 	stw	r4,232(sp)
80082df0:	d8c02d15 	stw	r3,180(sp)
80082df4:	1025883a 	mov	r18,r2
80082df8:	04401e04 	movi	r17,120
80082dfc:	a584b03a 	or	r2,r20,r22
80082e00:	1000fa1e 	bne	r2,zero,800831ec <___svfprintf_internal_r+0x1144>
80082e04:	0039883a 	mov	fp,zero
80082e08:	00800084 	movi	r2,2
80082e0c:	10803fcc 	andi	r2,r2,255
80082e10:	00c00044 	movi	r3,1
80082e14:	10c21626 	beq	r2,r3,80083670 <___svfprintf_internal_r+0x15c8>
80082e18:	00c00084 	movi	r3,2
80082e1c:	10fe301e 	bne	r2,r3,800826e0 <___svfprintf_internal_r+0x638>
80082e20:	003d7606 	br	800823fc <___svfprintf_internal_r+0x354>
80082e24:	d8c02017 	ldw	r3,128(sp)
80082e28:	003e9506 	br	80082880 <___svfprintf_internal_r+0x7d8>
80082e2c:	00801944 	movi	r2,101
80082e30:	14407c0e 	bge	r2,r17,80083024 <___svfprintf_internal_r+0xf7c>
80082e34:	d9003617 	ldw	r4,216(sp)
80082e38:	d9403717 	ldw	r5,220(sp)
80082e3c:	000d883a 	mov	r6,zero
80082e40:	000f883a 	mov	r7,zero
80082e44:	d8c03d15 	stw	r3,244(sp)
80082e48:	da003e15 	stw	r8,248(sp)
80082e4c:	0090c140 	call	80090c14 <__eqdf2>
80082e50:	d8c03d17 	ldw	r3,244(sp)
80082e54:	da003e17 	ldw	r8,248(sp)
80082e58:	1000f51e 	bne	r2,zero,80083230 <___svfprintf_internal_r+0x1188>
80082e5c:	d8801f17 	ldw	r2,124(sp)
80082e60:	01200274 	movhi	r4,32777
80082e64:	211a8004 	addi	r4,r4,27136
80082e68:	18c00044 	addi	r3,r3,1
80082e6c:	10800044 	addi	r2,r2,1
80082e70:	41000015 	stw	r4,0(r8)
80082e74:	01000044 	movi	r4,1
80082e78:	41000115 	stw	r4,4(r8)
80082e7c:	d8c02015 	stw	r3,128(sp)
80082e80:	d8801f15 	stw	r2,124(sp)
80082e84:	010001c4 	movi	r4,7
80082e88:	20826616 	blt	r4,r2,80083824 <___svfprintf_internal_r+0x177c>
80082e8c:	42000204 	addi	r8,r8,8
80082e90:	d8802617 	ldw	r2,152(sp)
80082e94:	d9403317 	ldw	r5,204(sp)
80082e98:	11400216 	blt	r2,r5,80082ea4 <___svfprintf_internal_r+0xdfc>
80082e9c:	9080004c 	andi	r2,r18,1
80082ea0:	103ed526 	beq	r2,zero,800829f8 <___svfprintf_internal_r+0x950>
80082ea4:	d8803817 	ldw	r2,224(sp)
80082ea8:	d9003417 	ldw	r4,208(sp)
80082eac:	d9403817 	ldw	r5,224(sp)
80082eb0:	1887883a 	add	r3,r3,r2
80082eb4:	d8801f17 	ldw	r2,124(sp)
80082eb8:	41000015 	stw	r4,0(r8)
80082ebc:	41400115 	stw	r5,4(r8)
80082ec0:	10800044 	addi	r2,r2,1
80082ec4:	d8c02015 	stw	r3,128(sp)
80082ec8:	d8801f15 	stw	r2,124(sp)
80082ecc:	010001c4 	movi	r4,7
80082ed0:	2082af16 	blt	r4,r2,80083990 <___svfprintf_internal_r+0x18e8>
80082ed4:	42000204 	addi	r8,r8,8
80082ed8:	d8803317 	ldw	r2,204(sp)
80082edc:	143fffc4 	addi	r16,r2,-1
80082ee0:	043ec50e 	bge	zero,r16,800829f8 <___svfprintf_internal_r+0x950>
80082ee4:	04400404 	movi	r17,16
80082ee8:	d8801f17 	ldw	r2,124(sp)
80082eec:	8c00860e 	bge	r17,r16,80083108 <___svfprintf_internal_r+0x1060>
80082ef0:	01600274 	movhi	r5,32777
80082ef4:	295a8084 	addi	r5,r5,27138
80082ef8:	d9402b15 	stw	r5,172(sp)
80082efc:	058001c4 	movi	r22,7
80082f00:	dd002c17 	ldw	r20,176(sp)
80082f04:	00000306 	br	80082f14 <___svfprintf_internal_r+0xe6c>
80082f08:	42000204 	addi	r8,r8,8
80082f0c:	843ffc04 	addi	r16,r16,-16
80082f10:	8c00800e 	bge	r17,r16,80083114 <___svfprintf_internal_r+0x106c>
80082f14:	18c00404 	addi	r3,r3,16
80082f18:	10800044 	addi	r2,r2,1
80082f1c:	45400015 	stw	r21,0(r8)
80082f20:	44400115 	stw	r17,4(r8)
80082f24:	d8c02015 	stw	r3,128(sp)
80082f28:	d8801f15 	stw	r2,124(sp)
80082f2c:	b0bff60e 	bge	r22,r2,80082f08 <___svfprintf_internal_r+0xe60>
80082f30:	d9801e04 	addi	r6,sp,120
80082f34:	a00b883a 	mov	r5,r20
80082f38:	9809883a 	mov	r4,r19
80082f3c:	008ba940 	call	8008ba94 <__ssprint_r>
80082f40:	103d3e1e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80082f44:	d8c02017 	ldw	r3,128(sp)
80082f48:	d8801f17 	ldw	r2,124(sp)
80082f4c:	da000404 	addi	r8,sp,16
80082f50:	003fee06 	br	80082f0c <___svfprintf_internal_r+0xe64>
80082f54:	d9403117 	ldw	r5,196(sp)
80082f58:	d8802a17 	ldw	r2,168(sp)
80082f5c:	28adc83a 	sub	r22,r5,r2
80082f60:	05be650e 	bge	zero,r22,800828f8 <___svfprintf_internal_r+0x850>
80082f64:	07000404 	movi	fp,16
80082f68:	d8801f17 	ldw	r2,124(sp)
80082f6c:	e583a20e 	bge	fp,r22,80083df8 <___svfprintf_internal_r+0x1d50>
80082f70:	01600274 	movhi	r5,32777
80082f74:	295a8084 	addi	r5,r5,27138
80082f78:	dc403015 	stw	r17,192(sp)
80082f7c:	d9402b15 	stw	r5,172(sp)
80082f80:	b023883a 	mov	r17,r22
80082f84:	050001c4 	movi	r20,7
80082f88:	902d883a 	mov	r22,r18
80082f8c:	8025883a 	mov	r18,r16
80082f90:	dc002c17 	ldw	r16,176(sp)
80082f94:	00000306 	br	80082fa4 <___svfprintf_internal_r+0xefc>
80082f98:	8c7ffc04 	addi	r17,r17,-16
80082f9c:	42000204 	addi	r8,r8,8
80082fa0:	e440110e 	bge	fp,r17,80082fe8 <___svfprintf_internal_r+0xf40>
80082fa4:	18c00404 	addi	r3,r3,16
80082fa8:	10800044 	addi	r2,r2,1
80082fac:	45400015 	stw	r21,0(r8)
80082fb0:	47000115 	stw	fp,4(r8)
80082fb4:	d8c02015 	stw	r3,128(sp)
80082fb8:	d8801f15 	stw	r2,124(sp)
80082fbc:	a0bff60e 	bge	r20,r2,80082f98 <___svfprintf_internal_r+0xef0>
80082fc0:	d9801e04 	addi	r6,sp,120
80082fc4:	800b883a 	mov	r5,r16
80082fc8:	9809883a 	mov	r4,r19
80082fcc:	008ba940 	call	8008ba94 <__ssprint_r>
80082fd0:	103d1a1e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80082fd4:	8c7ffc04 	addi	r17,r17,-16
80082fd8:	d8c02017 	ldw	r3,128(sp)
80082fdc:	d8801f17 	ldw	r2,124(sp)
80082fe0:	da000404 	addi	r8,sp,16
80082fe4:	e47fef16 	blt	fp,r17,80082fa4 <___svfprintf_internal_r+0xefc>
80082fe8:	9021883a 	mov	r16,r18
80082fec:	b025883a 	mov	r18,r22
80082ff0:	882d883a 	mov	r22,r17
80082ff4:	dc403017 	ldw	r17,192(sp)
80082ff8:	d9002b17 	ldw	r4,172(sp)
80082ffc:	1d87883a 	add	r3,r3,r22
80083000:	10800044 	addi	r2,r2,1
80083004:	41000015 	stw	r4,0(r8)
80083008:	45800115 	stw	r22,4(r8)
8008300c:	d8c02015 	stw	r3,128(sp)
80083010:	d8801f15 	stw	r2,124(sp)
80083014:	010001c4 	movi	r4,7
80083018:	20819a16 	blt	r4,r2,80083684 <___svfprintf_internal_r+0x15dc>
8008301c:	42000204 	addi	r8,r8,8
80083020:	003e3506 	br	800828f8 <___svfprintf_internal_r+0x850>
80083024:	d9403317 	ldw	r5,204(sp)
80083028:	00800044 	movi	r2,1
8008302c:	18c00044 	addi	r3,r3,1
80083030:	1141710e 	bge	r2,r5,800835f8 <___svfprintf_internal_r+0x1550>
80083034:	dc401f17 	ldw	r17,124(sp)
80083038:	00800044 	movi	r2,1
8008303c:	40800115 	stw	r2,4(r8)
80083040:	8c400044 	addi	r17,r17,1
80083044:	44000015 	stw	r16,0(r8)
80083048:	d8c02015 	stw	r3,128(sp)
8008304c:	dc401f15 	stw	r17,124(sp)
80083050:	008001c4 	movi	r2,7
80083054:	14417416 	blt	r2,r17,80083628 <___svfprintf_internal_r+0x1580>
80083058:	42000204 	addi	r8,r8,8
8008305c:	d8803817 	ldw	r2,224(sp)
80083060:	d9003417 	ldw	r4,208(sp)
80083064:	8c400044 	addi	r17,r17,1
80083068:	10c7883a 	add	r3,r2,r3
8008306c:	40800115 	stw	r2,4(r8)
80083070:	41000015 	stw	r4,0(r8)
80083074:	d8c02015 	stw	r3,128(sp)
80083078:	dc401f15 	stw	r17,124(sp)
8008307c:	008001c4 	movi	r2,7
80083080:	14417216 	blt	r2,r17,8008364c <___svfprintf_internal_r+0x15a4>
80083084:	45800204 	addi	r22,r8,8
80083088:	d9003617 	ldw	r4,216(sp)
8008308c:	d9403717 	ldw	r5,220(sp)
80083090:	000d883a 	mov	r6,zero
80083094:	000f883a 	mov	r7,zero
80083098:	d8c03d15 	stw	r3,244(sp)
8008309c:	0090c140 	call	80090c14 <__eqdf2>
800830a0:	d8c03d17 	ldw	r3,244(sp)
800830a4:	1000b326 	beq	r2,zero,80083374 <___svfprintf_internal_r+0x12cc>
800830a8:	d9403317 	ldw	r5,204(sp)
800830ac:	84000044 	addi	r16,r16,1
800830b0:	8c400044 	addi	r17,r17,1
800830b4:	28bfffc4 	addi	r2,r5,-1
800830b8:	1887883a 	add	r3,r3,r2
800830bc:	b0800115 	stw	r2,4(r22)
800830c0:	b4000015 	stw	r16,0(r22)
800830c4:	d8c02015 	stw	r3,128(sp)
800830c8:	dc401f15 	stw	r17,124(sp)
800830cc:	008001c4 	movi	r2,7
800830d0:	1440d216 	blt	r2,r17,8008341c <___svfprintf_internal_r+0x1374>
800830d4:	b5800204 	addi	r22,r22,8
800830d8:	d9003b17 	ldw	r4,236(sp)
800830dc:	df0022c4 	addi	fp,sp,139
800830e0:	8c400044 	addi	r17,r17,1
800830e4:	20c7883a 	add	r3,r4,r3
800830e8:	b7000015 	stw	fp,0(r22)
800830ec:	b1000115 	stw	r4,4(r22)
800830f0:	d8c02015 	stw	r3,128(sp)
800830f4:	dc401f15 	stw	r17,124(sp)
800830f8:	008001c4 	movi	r2,7
800830fc:	14400e16 	blt	r2,r17,80083138 <___svfprintf_internal_r+0x1090>
80083100:	b2000204 	addi	r8,r22,8
80083104:	003e3c06 	br	800829f8 <___svfprintf_internal_r+0x950>
80083108:	01200274 	movhi	r4,32777
8008310c:	211a8084 	addi	r4,r4,27138
80083110:	d9002b15 	stw	r4,172(sp)
80083114:	d9002b17 	ldw	r4,172(sp)
80083118:	1c07883a 	add	r3,r3,r16
8008311c:	44000115 	stw	r16,4(r8)
80083120:	41000015 	stw	r4,0(r8)
80083124:	10800044 	addi	r2,r2,1
80083128:	d8c02015 	stw	r3,128(sp)
8008312c:	d8801f15 	stw	r2,124(sp)
80083130:	010001c4 	movi	r4,7
80083134:	20be2f0e 	bge	r4,r2,800829f4 <___svfprintf_internal_r+0x94c>
80083138:	d9402c17 	ldw	r5,176(sp)
8008313c:	d9801e04 	addi	r6,sp,120
80083140:	9809883a 	mov	r4,r19
80083144:	008ba940 	call	8008ba94 <__ssprint_r>
80083148:	103cbc1e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
8008314c:	d8c02017 	ldw	r3,128(sp)
80083150:	da000404 	addi	r8,sp,16
80083154:	003e2806 	br	800829f8 <___svfprintf_internal_r+0x950>
80083158:	d9402c17 	ldw	r5,176(sp)
8008315c:	d9801e04 	addi	r6,sp,120
80083160:	9809883a 	mov	r4,r19
80083164:	008ba940 	call	8008ba94 <__ssprint_r>
80083168:	103e5f26 	beq	r2,zero,80082ae8 <___svfprintf_internal_r+0xa40>
8008316c:	003cb306 	br	8008243c <___svfprintf_internal_r+0x394>
80083170:	d9402c17 	ldw	r5,176(sp)
80083174:	d9801e04 	addi	r6,sp,120
80083178:	9809883a 	mov	r4,r19
8008317c:	008ba940 	call	8008ba94 <__ssprint_r>
80083180:	103cae1e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083184:	d8c02017 	ldw	r3,128(sp)
80083188:	da000404 	addi	r8,sp,16
8008318c:	003e0d06 	br	800829c4 <___svfprintf_internal_r+0x91c>
80083190:	d9402c17 	ldw	r5,176(sp)
80083194:	d9801e04 	addi	r6,sp,120
80083198:	9809883a 	mov	r4,r19
8008319c:	008ba940 	call	8008ba94 <__ssprint_r>
800831a0:	103ca61e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
800831a4:	d8c02017 	ldw	r3,128(sp)
800831a8:	da000404 	addi	r8,sp,16
800831ac:	003dc106 	br	800828b4 <___svfprintf_internal_r+0x80c>
800831b0:	d9402c17 	ldw	r5,176(sp)
800831b4:	d9801e04 	addi	r6,sp,120
800831b8:	9809883a 	mov	r4,r19
800831bc:	008ba940 	call	8008ba94 <__ssprint_r>
800831c0:	103c9e1e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
800831c4:	d8c02017 	ldw	r3,128(sp)
800831c8:	da000404 	addi	r8,sp,16
800831cc:	003dc706 	br	800828ec <___svfprintf_internal_r+0x844>
800831d0:	d8802917 	ldw	r2,164(sp)
800831d4:	d8002785 	stb	zero,158(sp)
800831d8:	103f0816 	blt	r2,zero,80082dfc <___svfprintf_internal_r+0xd54>
800831dc:	00ffdfc4 	movi	r3,-129
800831e0:	a584b03a 	or	r2,r20,r22
800831e4:	90e4703a 	and	r18,r18,r3
800831e8:	103c8126 	beq	r2,zero,800823f0 <___svfprintf_internal_r+0x348>
800831ec:	0039883a 	mov	fp,zero
800831f0:	003e7606 	br	80082bcc <___svfprintf_internal_r+0xb24>
800831f4:	9080040c 	andi	r2,r18,16
800831f8:	10013d26 	beq	r2,zero,800836f0 <___svfprintf_internal_r+0x1648>
800831fc:	d9002d17 	ldw	r4,180(sp)
80083200:	d9402917 	ldw	r5,164(sp)
80083204:	d8002785 	stb	zero,158(sp)
80083208:	20800104 	addi	r2,r4,4
8008320c:	25000017 	ldw	r20,0(r4)
80083210:	002d883a 	mov	r22,zero
80083214:	28013f16 	blt	r5,zero,80083714 <___svfprintf_internal_r+0x166c>
80083218:	00ffdfc4 	movi	r3,-129
8008321c:	d8802d15 	stw	r2,180(sp)
80083220:	90e4703a 	and	r18,r18,r3
80083224:	a03d2b26 	beq	r20,zero,800826d4 <___svfprintf_internal_r+0x62c>
80083228:	0039883a 	mov	fp,zero
8008322c:	003d2e06 	br	800826e8 <___svfprintf_internal_r+0x640>
80083230:	dc402617 	ldw	r17,152(sp)
80083234:	0441830e 	bge	zero,r17,80083844 <___svfprintf_internal_r+0x179c>
80083238:	dc403217 	ldw	r17,200(sp)
8008323c:	d8803317 	ldw	r2,204(sp)
80083240:	1440010e 	bge	r2,r17,80083248 <___svfprintf_internal_r+0x11a0>
80083244:	1023883a 	mov	r17,r2
80083248:	04400a0e 	bge	zero,r17,80083274 <___svfprintf_internal_r+0x11cc>
8008324c:	d8801f17 	ldw	r2,124(sp)
80083250:	1c47883a 	add	r3,r3,r17
80083254:	44000015 	stw	r16,0(r8)
80083258:	10800044 	addi	r2,r2,1
8008325c:	44400115 	stw	r17,4(r8)
80083260:	d8c02015 	stw	r3,128(sp)
80083264:	d8801f15 	stw	r2,124(sp)
80083268:	010001c4 	movi	r4,7
8008326c:	20827516 	blt	r4,r2,80083c44 <___svfprintf_internal_r+0x1b9c>
80083270:	42000204 	addi	r8,r8,8
80083274:	88027b16 	blt	r17,zero,80083c64 <___svfprintf_internal_r+0x1bbc>
80083278:	d9003217 	ldw	r4,200(sp)
8008327c:	2463c83a 	sub	r17,r4,r17
80083280:	0440990e 	bge	zero,r17,800834e8 <___svfprintf_internal_r+0x1440>
80083284:	05800404 	movi	r22,16
80083288:	d8801f17 	ldw	r2,124(sp)
8008328c:	b441530e 	bge	r22,r17,800837dc <___svfprintf_internal_r+0x1734>
80083290:	01200274 	movhi	r4,32777
80083294:	211a8084 	addi	r4,r4,27138
80083298:	d9002b15 	stw	r4,172(sp)
8008329c:	070001c4 	movi	fp,7
800832a0:	dd002c17 	ldw	r20,176(sp)
800832a4:	00000306 	br	800832b4 <___svfprintf_internal_r+0x120c>
800832a8:	42000204 	addi	r8,r8,8
800832ac:	8c7ffc04 	addi	r17,r17,-16
800832b0:	b4414d0e 	bge	r22,r17,800837e8 <___svfprintf_internal_r+0x1740>
800832b4:	18c00404 	addi	r3,r3,16
800832b8:	10800044 	addi	r2,r2,1
800832bc:	45400015 	stw	r21,0(r8)
800832c0:	45800115 	stw	r22,4(r8)
800832c4:	d8c02015 	stw	r3,128(sp)
800832c8:	d8801f15 	stw	r2,124(sp)
800832cc:	e0bff60e 	bge	fp,r2,800832a8 <___svfprintf_internal_r+0x1200>
800832d0:	d9801e04 	addi	r6,sp,120
800832d4:	a00b883a 	mov	r5,r20
800832d8:	9809883a 	mov	r4,r19
800832dc:	008ba940 	call	8008ba94 <__ssprint_r>
800832e0:	103c561e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
800832e4:	d8c02017 	ldw	r3,128(sp)
800832e8:	d8801f17 	ldw	r2,124(sp)
800832ec:	da000404 	addi	r8,sp,16
800832f0:	003fee06 	br	800832ac <___svfprintf_internal_r+0x1204>
800832f4:	d9402c17 	ldw	r5,176(sp)
800832f8:	d9801e04 	addi	r6,sp,120
800832fc:	9809883a 	mov	r4,r19
80083300:	008ba940 	call	8008ba94 <__ssprint_r>
80083304:	103c4d1e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083308:	d8c02017 	ldw	r3,128(sp)
8008330c:	df002787 	ldb	fp,158(sp)
80083310:	da000404 	addi	r8,sp,16
80083314:	003d5a06 	br	80082880 <___svfprintf_internal_r+0x7d8>
80083318:	9080040c 	andi	r2,r18,16
8008331c:	10005c26 	beq	r2,zero,80083490 <___svfprintf_internal_r+0x13e8>
80083320:	d9402d17 	ldw	r5,180(sp)
80083324:	d8c02917 	ldw	r3,164(sp)
80083328:	d8002785 	stb	zero,158(sp)
8008332c:	28800104 	addi	r2,r5,4
80083330:	2d000017 	ldw	r20,0(r5)
80083334:	002d883a 	mov	r22,zero
80083338:	18005e16 	blt	r3,zero,800834b4 <___svfprintf_internal_r+0x140c>
8008333c:	00ffdfc4 	movi	r3,-129
80083340:	d8802d15 	stw	r2,180(sp)
80083344:	90e4703a 	and	r18,r18,r3
80083348:	0039883a 	mov	fp,zero
8008334c:	a03dfe26 	beq	r20,zero,80082b48 <___svfprintf_internal_r+0xaa0>
80083350:	00800244 	movi	r2,9
80083354:	153cb336 	bltu	r2,r20,80082624 <___svfprintf_internal_r+0x57c>
80083358:	a5000c04 	addi	r20,r20,48
8008335c:	dc001dc4 	addi	r16,sp,119
80083360:	dd001dc5 	stb	r20,119(sp)
80083364:	d8c02817 	ldw	r3,160(sp)
80083368:	1c07c83a 	sub	r3,r3,r16
8008336c:	d8c02e15 	stw	r3,184(sp)
80083370:	003cf506 	br	80082748 <___svfprintf_internal_r+0x6a0>
80083374:	d8803317 	ldw	r2,204(sp)
80083378:	143fffc4 	addi	r16,r2,-1
8008337c:	043f560e 	bge	zero,r16,800830d8 <___svfprintf_internal_r+0x1030>
80083380:	07000404 	movi	fp,16
80083384:	e403530e 	bge	fp,r16,800840d4 <___svfprintf_internal_r+0x202c>
80083388:	01600274 	movhi	r5,32777
8008338c:	295a8084 	addi	r5,r5,27138
80083390:	d9402b15 	stw	r5,172(sp)
80083394:	01c001c4 	movi	r7,7
80083398:	dd002c17 	ldw	r20,176(sp)
8008339c:	00000306 	br	800833ac <___svfprintf_internal_r+0x1304>
800833a0:	843ffc04 	addi	r16,r16,-16
800833a4:	b5800204 	addi	r22,r22,8
800833a8:	e400130e 	bge	fp,r16,800833f8 <___svfprintf_internal_r+0x1350>
800833ac:	18c00404 	addi	r3,r3,16
800833b0:	8c400044 	addi	r17,r17,1
800833b4:	b5400015 	stw	r21,0(r22)
800833b8:	b7000115 	stw	fp,4(r22)
800833bc:	d8c02015 	stw	r3,128(sp)
800833c0:	dc401f15 	stw	r17,124(sp)
800833c4:	3c7ff60e 	bge	r7,r17,800833a0 <___svfprintf_internal_r+0x12f8>
800833c8:	d9801e04 	addi	r6,sp,120
800833cc:	a00b883a 	mov	r5,r20
800833d0:	9809883a 	mov	r4,r19
800833d4:	d9c03d15 	stw	r7,244(sp)
800833d8:	008ba940 	call	8008ba94 <__ssprint_r>
800833dc:	d9c03d17 	ldw	r7,244(sp)
800833e0:	103c161e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
800833e4:	843ffc04 	addi	r16,r16,-16
800833e8:	d8c02017 	ldw	r3,128(sp)
800833ec:	dc401f17 	ldw	r17,124(sp)
800833f0:	dd800404 	addi	r22,sp,16
800833f4:	e43fed16 	blt	fp,r16,800833ac <___svfprintf_internal_r+0x1304>
800833f8:	d8802b17 	ldw	r2,172(sp)
800833fc:	1c07883a 	add	r3,r3,r16
80083400:	8c400044 	addi	r17,r17,1
80083404:	b0800015 	stw	r2,0(r22)
80083408:	b4000115 	stw	r16,4(r22)
8008340c:	d8c02015 	stw	r3,128(sp)
80083410:	dc401f15 	stw	r17,124(sp)
80083414:	008001c4 	movi	r2,7
80083418:	147f2e0e 	bge	r2,r17,800830d4 <___svfprintf_internal_r+0x102c>
8008341c:	d9402c17 	ldw	r5,176(sp)
80083420:	d9801e04 	addi	r6,sp,120
80083424:	9809883a 	mov	r4,r19
80083428:	008ba940 	call	8008ba94 <__ssprint_r>
8008342c:	103c031e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083430:	d8c02017 	ldw	r3,128(sp)
80083434:	dc401f17 	ldw	r17,124(sp)
80083438:	dd800404 	addi	r22,sp,16
8008343c:	003f2606 	br	800830d8 <___svfprintf_internal_r+0x1030>
80083440:	9080040c 	andi	r2,r18,16
80083444:	1000c326 	beq	r2,zero,80083754 <___svfprintf_internal_r+0x16ac>
80083448:	d8802d17 	ldw	r2,180(sp)
8008344c:	15000017 	ldw	r20,0(r2)
80083450:	10800104 	addi	r2,r2,4
80083454:	d8802d15 	stw	r2,180(sp)
80083458:	a02dd7fa 	srai	r22,r20,31
8008345c:	b005883a 	mov	r2,r22
80083460:	103c680e 	bge	r2,zero,80082604 <___svfprintf_internal_r+0x55c>
80083464:	0529c83a 	sub	r20,zero,r20
80083468:	a004c03a 	cmpne	r2,r20,zero
8008346c:	05adc83a 	sub	r22,zero,r22
80083470:	b0adc83a 	sub	r22,r22,r2
80083474:	d8802917 	ldw	r2,164(sp)
80083478:	07000b44 	movi	fp,45
8008347c:	df002785 	stb	fp,158(sp)
80083480:	10022e16 	blt	r2,zero,80083d3c <___svfprintf_internal_r+0x1c94>
80083484:	00bfdfc4 	movi	r2,-129
80083488:	90a4703a 	and	r18,r18,r2
8008348c:	003c6406 	br	80082620 <___svfprintf_internal_r+0x578>
80083490:	9080100c 	andi	r2,r18,64
80083494:	d8002785 	stb	zero,158(sp)
80083498:	10012526 	beq	r2,zero,80083930 <___svfprintf_internal_r+0x1888>
8008349c:	d9002d17 	ldw	r4,180(sp)
800834a0:	d9402917 	ldw	r5,164(sp)
800834a4:	002d883a 	mov	r22,zero
800834a8:	20800104 	addi	r2,r4,4
800834ac:	2500000b 	ldhu	r20,0(r4)
800834b0:	283fa20e 	bge	r5,zero,8008333c <___svfprintf_internal_r+0x1294>
800834b4:	d8802d15 	stw	r2,180(sp)
800834b8:	0039883a 	mov	fp,zero
800834bc:	a584b03a 	or	r2,r20,r22
800834c0:	103c571e 	bne	r2,zero,80082620 <___svfprintf_internal_r+0x578>
800834c4:	00800044 	movi	r2,1
800834c8:	003e5006 	br	80082e0c <___svfprintf_internal_r+0xd64>
800834cc:	d9402c17 	ldw	r5,176(sp)
800834d0:	d9801e04 	addi	r6,sp,120
800834d4:	9809883a 	mov	r4,r19
800834d8:	008ba940 	call	8008ba94 <__ssprint_r>
800834dc:	103bd71e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
800834e0:	d8c02017 	ldw	r3,128(sp)
800834e4:	da000404 	addi	r8,sp,16
800834e8:	d9003217 	ldw	r4,200(sp)
800834ec:	d8802617 	ldw	r2,152(sp)
800834f0:	d9403317 	ldw	r5,204(sp)
800834f4:	8123883a 	add	r17,r16,r4
800834f8:	11400216 	blt	r2,r5,80083504 <___svfprintf_internal_r+0x145c>
800834fc:	9100004c 	andi	r4,r18,1
80083500:	20000d26 	beq	r4,zero,80083538 <___svfprintf_internal_r+0x1490>
80083504:	d9003817 	ldw	r4,224(sp)
80083508:	d9403417 	ldw	r5,208(sp)
8008350c:	1907883a 	add	r3,r3,r4
80083510:	d9001f17 	ldw	r4,124(sp)
80083514:	41400015 	stw	r5,0(r8)
80083518:	d9403817 	ldw	r5,224(sp)
8008351c:	21000044 	addi	r4,r4,1
80083520:	d8c02015 	stw	r3,128(sp)
80083524:	41400115 	stw	r5,4(r8)
80083528:	d9001f15 	stw	r4,124(sp)
8008352c:	014001c4 	movi	r5,7
80083530:	2901dc16 	blt	r5,r4,80083ca4 <___svfprintf_internal_r+0x1bfc>
80083534:	42000204 	addi	r8,r8,8
80083538:	d9003317 	ldw	r4,204(sp)
8008353c:	8121883a 	add	r16,r16,r4
80083540:	2085c83a 	sub	r2,r4,r2
80083544:	8461c83a 	sub	r16,r16,r17
80083548:	1400010e 	bge	r2,r16,80083550 <___svfprintf_internal_r+0x14a8>
8008354c:	1021883a 	mov	r16,r2
80083550:	04000a0e 	bge	zero,r16,8008357c <___svfprintf_internal_r+0x14d4>
80083554:	d9001f17 	ldw	r4,124(sp)
80083558:	1c07883a 	add	r3,r3,r16
8008355c:	44400015 	stw	r17,0(r8)
80083560:	21000044 	addi	r4,r4,1
80083564:	44000115 	stw	r16,4(r8)
80083568:	d8c02015 	stw	r3,128(sp)
8008356c:	d9001f15 	stw	r4,124(sp)
80083570:	014001c4 	movi	r5,7
80083574:	2901e616 	blt	r5,r4,80083d10 <___svfprintf_internal_r+0x1c68>
80083578:	42000204 	addi	r8,r8,8
8008357c:	8001f616 	blt	r16,zero,80083d58 <___svfprintf_internal_r+0x1cb0>
80083580:	1421c83a 	sub	r16,r2,r16
80083584:	043d1c0e 	bge	zero,r16,800829f8 <___svfprintf_internal_r+0x950>
80083588:	04400404 	movi	r17,16
8008358c:	d8801f17 	ldw	r2,124(sp)
80083590:	8c3edd0e 	bge	r17,r16,80083108 <___svfprintf_internal_r+0x1060>
80083594:	01600274 	movhi	r5,32777
80083598:	295a8084 	addi	r5,r5,27138
8008359c:	d9402b15 	stw	r5,172(sp)
800835a0:	058001c4 	movi	r22,7
800835a4:	dd002c17 	ldw	r20,176(sp)
800835a8:	00000306 	br	800835b8 <___svfprintf_internal_r+0x1510>
800835ac:	42000204 	addi	r8,r8,8
800835b0:	843ffc04 	addi	r16,r16,-16
800835b4:	8c3ed70e 	bge	r17,r16,80083114 <___svfprintf_internal_r+0x106c>
800835b8:	18c00404 	addi	r3,r3,16
800835bc:	10800044 	addi	r2,r2,1
800835c0:	45400015 	stw	r21,0(r8)
800835c4:	44400115 	stw	r17,4(r8)
800835c8:	d8c02015 	stw	r3,128(sp)
800835cc:	d8801f15 	stw	r2,124(sp)
800835d0:	b0bff60e 	bge	r22,r2,800835ac <___svfprintf_internal_r+0x1504>
800835d4:	d9801e04 	addi	r6,sp,120
800835d8:	a00b883a 	mov	r5,r20
800835dc:	9809883a 	mov	r4,r19
800835e0:	008ba940 	call	8008ba94 <__ssprint_r>
800835e4:	103b951e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
800835e8:	d8c02017 	ldw	r3,128(sp)
800835ec:	d8801f17 	ldw	r2,124(sp)
800835f0:	da000404 	addi	r8,sp,16
800835f4:	003fee06 	br	800835b0 <___svfprintf_internal_r+0x1508>
800835f8:	9088703a 	and	r4,r18,r2
800835fc:	203e8d1e 	bne	r4,zero,80083034 <___svfprintf_internal_r+0xf8c>
80083600:	dc401f17 	ldw	r17,124(sp)
80083604:	40800115 	stw	r2,4(r8)
80083608:	44000015 	stw	r16,0(r8)
8008360c:	8c400044 	addi	r17,r17,1
80083610:	d8c02015 	stw	r3,128(sp)
80083614:	dc401f15 	stw	r17,124(sp)
80083618:	008001c4 	movi	r2,7
8008361c:	147f7f16 	blt	r2,r17,8008341c <___svfprintf_internal_r+0x1374>
80083620:	45800204 	addi	r22,r8,8
80083624:	003eac06 	br	800830d8 <___svfprintf_internal_r+0x1030>
80083628:	d9402c17 	ldw	r5,176(sp)
8008362c:	d9801e04 	addi	r6,sp,120
80083630:	9809883a 	mov	r4,r19
80083634:	008ba940 	call	8008ba94 <__ssprint_r>
80083638:	103b801e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
8008363c:	d8c02017 	ldw	r3,128(sp)
80083640:	dc401f17 	ldw	r17,124(sp)
80083644:	da000404 	addi	r8,sp,16
80083648:	003e8406 	br	8008305c <___svfprintf_internal_r+0xfb4>
8008364c:	d9402c17 	ldw	r5,176(sp)
80083650:	d9801e04 	addi	r6,sp,120
80083654:	9809883a 	mov	r4,r19
80083658:	008ba940 	call	8008ba94 <__ssprint_r>
8008365c:	103b771e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083660:	d8c02017 	ldw	r3,128(sp)
80083664:	dc401f17 	ldw	r17,124(sp)
80083668:	dd800404 	addi	r22,sp,16
8008366c:	003e8606 	br	80083088 <___svfprintf_internal_r+0xfe0>
80083670:	0029883a 	mov	r20,zero
80083674:	a5000c04 	addi	r20,r20,48
80083678:	dc001dc4 	addi	r16,sp,119
8008367c:	dd001dc5 	stb	r20,119(sp)
80083680:	003f3806 	br	80083364 <___svfprintf_internal_r+0x12bc>
80083684:	d9402c17 	ldw	r5,176(sp)
80083688:	d9801e04 	addi	r6,sp,120
8008368c:	9809883a 	mov	r4,r19
80083690:	008ba940 	call	8008ba94 <__ssprint_r>
80083694:	103b691e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083698:	d8c02017 	ldw	r3,128(sp)
8008369c:	da000404 	addi	r8,sp,16
800836a0:	003c9506 	br	800828f8 <___svfprintf_internal_r+0x850>
800836a4:	d9003617 	ldw	r4,216(sp)
800836a8:	d9403717 	ldw	r5,220(sp)
800836ac:	da003e15 	stw	r8,248(sp)
800836b0:	008b7b40 	call	8008b7b4 <__fpclassifyd>
800836b4:	da003e17 	ldw	r8,248(sp)
800836b8:	1000bd1e 	bne	r2,zero,800839b0 <___svfprintf_internal_r+0x1908>
800836bc:	008011c4 	movi	r2,71
800836c0:	14411e0e 	bge	r2,r17,80083b3c <___svfprintf_internal_r+0x1a94>
800836c4:	04200274 	movhi	r16,32777
800836c8:	841a7304 	addi	r16,r16,27084
800836cc:	00c000c4 	movi	r3,3
800836d0:	00bfdfc4 	movi	r2,-129
800836d4:	d8c02a15 	stw	r3,168(sp)
800836d8:	90a4703a 	and	r18,r18,r2
800836dc:	df002783 	ldbu	fp,158(sp)
800836e0:	d8c02e15 	stw	r3,184(sp)
800836e4:	d8002915 	stw	zero,164(sp)
800836e8:	d8003215 	stw	zero,200(sp)
800836ec:	003c1c06 	br	80082760 <___svfprintf_internal_r+0x6b8>
800836f0:	9080100c 	andi	r2,r18,64
800836f4:	d8002785 	stb	zero,158(sp)
800836f8:	10009426 	beq	r2,zero,8008394c <___svfprintf_internal_r+0x18a4>
800836fc:	d8c02d17 	ldw	r3,180(sp)
80083700:	d9002917 	ldw	r4,164(sp)
80083704:	002d883a 	mov	r22,zero
80083708:	18800104 	addi	r2,r3,4
8008370c:	1d00000b 	ldhu	r20,0(r3)
80083710:	203ec10e 	bge	r4,zero,80083218 <___svfprintf_internal_r+0x1170>
80083714:	a586b03a 	or	r3,r20,r22
80083718:	d8802d15 	stw	r2,180(sp)
8008371c:	183ec21e 	bne	r3,zero,80083228 <___svfprintf_internal_r+0x1180>
80083720:	0039883a 	mov	fp,zero
80083724:	0005883a 	mov	r2,zero
80083728:	003db806 	br	80082e0c <___svfprintf_internal_r+0xd64>
8008372c:	d8802d17 	ldw	r2,180(sp)
80083730:	d8c02d17 	ldw	r3,180(sp)
80083734:	d9002d17 	ldw	r4,180(sp)
80083738:	10800017 	ldw	r2,0(r2)
8008373c:	18c00117 	ldw	r3,4(r3)
80083740:	21000204 	addi	r4,r4,8
80083744:	d8803615 	stw	r2,216(sp)
80083748:	d8c03715 	stw	r3,220(sp)
8008374c:	d9002d15 	stw	r4,180(sp)
80083750:	003b8206 	br	8008255c <___svfprintf_internal_r+0x4b4>
80083754:	9080100c 	andi	r2,r18,64
80083758:	10010726 	beq	r2,zero,80083b78 <___svfprintf_internal_r+0x1ad0>
8008375c:	d8c02d17 	ldw	r3,180(sp)
80083760:	1d00000f 	ldh	r20,0(r3)
80083764:	18c00104 	addi	r3,r3,4
80083768:	d8c02d15 	stw	r3,180(sp)
8008376c:	a02dd7fa 	srai	r22,r20,31
80083770:	b005883a 	mov	r2,r22
80083774:	003ba206 	br	80082600 <___svfprintf_internal_r+0x558>
80083778:	9080100c 	andi	r2,r18,64
8008377c:	10010526 	beq	r2,zero,80083b94 <___svfprintf_internal_r+0x1aec>
80083780:	d9002d17 	ldw	r4,180(sp)
80083784:	002d883a 	mov	r22,zero
80083788:	2500000b 	ldhu	r20,0(r4)
8008378c:	21000104 	addi	r4,r4,4
80083790:	d9002d15 	stw	r4,180(sp)
80083794:	003cfe06 	br	80082b90 <___svfprintf_internal_r+0xae8>
80083798:	bc400007 	ldb	r17,0(r23)
8008379c:	003a9606 	br	800821f8 <___svfprintf_internal_r+0x150>
800837a0:	9080040c 	andi	r2,r18,16
800837a4:	10010126 	beq	r2,zero,80083bac <___svfprintf_internal_r+0x1b04>
800837a8:	d9402d17 	ldw	r5,180(sp)
800837ac:	d8c02f17 	ldw	r3,188(sp)
800837b0:	28800017 	ldw	r2,0(r5)
800837b4:	29400104 	addi	r5,r5,4
800837b8:	d9402d15 	stw	r5,180(sp)
800837bc:	10c00015 	stw	r3,0(r2)
800837c0:	003a6406 	br	80082154 <___svfprintf_internal_r+0xac>
800837c4:	d9002917 	ldw	r4,164(sp)
800837c8:	d8002785 	stb	zero,158(sp)
800837cc:	203d8d16 	blt	r4,zero,80082e04 <___svfprintf_internal_r+0xd5c>
800837d0:	00bfdfc4 	movi	r2,-129
800837d4:	90a4703a 	and	r18,r18,r2
800837d8:	003b0506 	br	800823f0 <___svfprintf_internal_r+0x348>
800837dc:	01600274 	movhi	r5,32777
800837e0:	295a8084 	addi	r5,r5,27138
800837e4:	d9402b15 	stw	r5,172(sp)
800837e8:	d9402b17 	ldw	r5,172(sp)
800837ec:	1c47883a 	add	r3,r3,r17
800837f0:	10800044 	addi	r2,r2,1
800837f4:	41400015 	stw	r5,0(r8)
800837f8:	44400115 	stw	r17,4(r8)
800837fc:	d8c02015 	stw	r3,128(sp)
80083800:	d8801f15 	stw	r2,124(sp)
80083804:	010001c4 	movi	r4,7
80083808:	20bf3016 	blt	r4,r2,800834cc <___svfprintf_internal_r+0x1424>
8008380c:	42000204 	addi	r8,r8,8
80083810:	003f3506 	br	800834e8 <___svfprintf_internal_r+0x1440>
80083814:	01200274 	movhi	r4,32777
80083818:	211a8084 	addi	r4,r4,27138
8008381c:	d9002b15 	stw	r4,172(sp)
80083820:	003c5e06 	br	8008299c <___svfprintf_internal_r+0x8f4>
80083824:	d9402c17 	ldw	r5,176(sp)
80083828:	d9801e04 	addi	r6,sp,120
8008382c:	9809883a 	mov	r4,r19
80083830:	008ba940 	call	8008ba94 <__ssprint_r>
80083834:	103b011e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083838:	d8c02017 	ldw	r3,128(sp)
8008383c:	da000404 	addi	r8,sp,16
80083840:	003d9306 	br	80082e90 <___svfprintf_internal_r+0xde8>
80083844:	d8801f17 	ldw	r2,124(sp)
80083848:	01600274 	movhi	r5,32777
8008384c:	01000044 	movi	r4,1
80083850:	18c00044 	addi	r3,r3,1
80083854:	10800044 	addi	r2,r2,1
80083858:	295a8004 	addi	r5,r5,27136
8008385c:	41000115 	stw	r4,4(r8)
80083860:	41400015 	stw	r5,0(r8)
80083864:	d8c02015 	stw	r3,128(sp)
80083868:	d8801f15 	stw	r2,124(sp)
8008386c:	010001c4 	movi	r4,7
80083870:	2080b516 	blt	r4,r2,80083b48 <___svfprintf_internal_r+0x1aa0>
80083874:	42000204 	addi	r8,r8,8
80083878:	8800041e 	bne	r17,zero,8008388c <___svfprintf_internal_r+0x17e4>
8008387c:	d8803317 	ldw	r2,204(sp)
80083880:	1000021e 	bne	r2,zero,8008388c <___svfprintf_internal_r+0x17e4>
80083884:	9080004c 	andi	r2,r18,1
80083888:	103c5b26 	beq	r2,zero,800829f8 <___svfprintf_internal_r+0x950>
8008388c:	d9003817 	ldw	r4,224(sp)
80083890:	d8801f17 	ldw	r2,124(sp)
80083894:	d9403417 	ldw	r5,208(sp)
80083898:	20c7883a 	add	r3,r4,r3
8008389c:	10800044 	addi	r2,r2,1
800838a0:	41000115 	stw	r4,4(r8)
800838a4:	41400015 	stw	r5,0(r8)
800838a8:	d8c02015 	stw	r3,128(sp)
800838ac:	d8801f15 	stw	r2,124(sp)
800838b0:	010001c4 	movi	r4,7
800838b4:	20818016 	blt	r4,r2,80083eb8 <___svfprintf_internal_r+0x1e10>
800838b8:	42000204 	addi	r8,r8,8
800838bc:	0463c83a 	sub	r17,zero,r17
800838c0:	0440cb0e 	bge	zero,r17,80083bf0 <___svfprintf_internal_r+0x1b48>
800838c4:	05800404 	movi	r22,16
800838c8:	b440e80e 	bge	r22,r17,80083c6c <___svfprintf_internal_r+0x1bc4>
800838cc:	01600274 	movhi	r5,32777
800838d0:	295a8084 	addi	r5,r5,27138
800838d4:	d9402b15 	stw	r5,172(sp)
800838d8:	070001c4 	movi	fp,7
800838dc:	dd002c17 	ldw	r20,176(sp)
800838e0:	00000306 	br	800838f0 <___svfprintf_internal_r+0x1848>
800838e4:	42000204 	addi	r8,r8,8
800838e8:	8c7ffc04 	addi	r17,r17,-16
800838ec:	b440e20e 	bge	r22,r17,80083c78 <___svfprintf_internal_r+0x1bd0>
800838f0:	18c00404 	addi	r3,r3,16
800838f4:	10800044 	addi	r2,r2,1
800838f8:	45400015 	stw	r21,0(r8)
800838fc:	45800115 	stw	r22,4(r8)
80083900:	d8c02015 	stw	r3,128(sp)
80083904:	d8801f15 	stw	r2,124(sp)
80083908:	e0bff60e 	bge	fp,r2,800838e4 <___svfprintf_internal_r+0x183c>
8008390c:	d9801e04 	addi	r6,sp,120
80083910:	a00b883a 	mov	r5,r20
80083914:	9809883a 	mov	r4,r19
80083918:	008ba940 	call	8008ba94 <__ssprint_r>
8008391c:	103ac71e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083920:	d8c02017 	ldw	r3,128(sp)
80083924:	d8801f17 	ldw	r2,124(sp)
80083928:	da000404 	addi	r8,sp,16
8008392c:	003fee06 	br	800838e8 <___svfprintf_internal_r+0x1840>
80083930:	d8c02d17 	ldw	r3,180(sp)
80083934:	d9002917 	ldw	r4,164(sp)
80083938:	002d883a 	mov	r22,zero
8008393c:	18800104 	addi	r2,r3,4
80083940:	1d000017 	ldw	r20,0(r3)
80083944:	203e7d0e 	bge	r4,zero,8008333c <___svfprintf_internal_r+0x1294>
80083948:	003eda06 	br	800834b4 <___svfprintf_internal_r+0x140c>
8008394c:	d9402d17 	ldw	r5,180(sp)
80083950:	d8c02917 	ldw	r3,164(sp)
80083954:	002d883a 	mov	r22,zero
80083958:	28800104 	addi	r2,r5,4
8008395c:	2d000017 	ldw	r20,0(r5)
80083960:	183e2d0e 	bge	r3,zero,80083218 <___svfprintf_internal_r+0x1170>
80083964:	003f6b06 	br	80083714 <___svfprintf_internal_r+0x166c>
80083968:	d8c02d15 	stw	r3,180(sp)
8008396c:	0039883a 	mov	fp,zero
80083970:	003ed206 	br	800834bc <___svfprintf_internal_r+0x1414>
80083974:	bc400043 	ldbu	r17,1(r23)
80083978:	94800814 	ori	r18,r18,32
8008397c:	bdc00044 	addi	r23,r23,1
80083980:	8c403fcc 	andi	r17,r17,255
80083984:	8c40201c 	xori	r17,r17,128
80083988:	8c7fe004 	addi	r17,r17,-128
8008398c:	003a1a06 	br	800821f8 <___svfprintf_internal_r+0x150>
80083990:	d9402c17 	ldw	r5,176(sp)
80083994:	d9801e04 	addi	r6,sp,120
80083998:	9809883a 	mov	r4,r19
8008399c:	008ba940 	call	8008ba94 <__ssprint_r>
800839a0:	103aa61e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
800839a4:	d8c02017 	ldw	r3,128(sp)
800839a8:	da000404 	addi	r8,sp,16
800839ac:	003d4a06 	br	80082ed8 <___svfprintf_internal_r+0xe30>
800839b0:	d9002917 	ldw	r4,164(sp)
800839b4:	05bff7c4 	movi	r22,-33
800839b8:	00bfffc4 	movi	r2,-1
800839bc:	8dac703a 	and	r22,r17,r22
800839c0:	20806a26 	beq	r4,r2,80083b6c <___svfprintf_internal_r+0x1ac4>
800839c4:	008011c4 	movi	r2,71
800839c8:	b0813726 	beq	r22,r2,80083ea8 <___svfprintf_internal_r+0x1e00>
800839cc:	d9003717 	ldw	r4,220(sp)
800839d0:	90c04014 	ori	r3,r18,256
800839d4:	d8c02b15 	stw	r3,172(sp)
800839d8:	20015d16 	blt	r4,zero,80083f50 <___svfprintf_internal_r+0x1ea8>
800839dc:	dd003717 	ldw	r20,220(sp)
800839e0:	d8002a05 	stb	zero,168(sp)
800839e4:	00801984 	movi	r2,102
800839e8:	88814026 	beq	r17,r2,80083eec <___svfprintf_internal_r+0x1e44>
800839ec:	00801184 	movi	r2,70
800839f0:	88817126 	beq	r17,r2,80083fb8 <___svfprintf_internal_r+0x1f10>
800839f4:	00801144 	movi	r2,69
800839f8:	b0816226 	beq	r22,r2,80083f84 <___svfprintf_internal_r+0x1edc>
800839fc:	d8c02917 	ldw	r3,164(sp)
80083a00:	d8802104 	addi	r2,sp,132
80083a04:	d8800315 	stw	r2,12(sp)
80083a08:	d9403617 	ldw	r5,216(sp)
80083a0c:	d8802504 	addi	r2,sp,148
80083a10:	d8800215 	stw	r2,8(sp)
80083a14:	d8802604 	addi	r2,sp,152
80083a18:	d8c00015 	stw	r3,0(sp)
80083a1c:	d8800115 	stw	r2,4(sp)
80083a20:	01c00084 	movi	r7,2
80083a24:	a00d883a 	mov	r6,r20
80083a28:	9809883a 	mov	r4,r19
80083a2c:	d8c03d15 	stw	r3,244(sp)
80083a30:	da003e15 	stw	r8,248(sp)
80083a34:	00869c80 	call	800869c8 <_dtoa_r>
80083a38:	1021883a 	mov	r16,r2
80083a3c:	008019c4 	movi	r2,103
80083a40:	d8c03d17 	ldw	r3,244(sp)
80083a44:	da003e17 	ldw	r8,248(sp)
80083a48:	8880e726 	beq	r17,r2,80083de8 <___svfprintf_internal_r+0x1d40>
80083a4c:	008011c4 	movi	r2,71
80083a50:	8880d426 	beq	r17,r2,80083da4 <___svfprintf_internal_r+0x1cfc>
80083a54:	80f9883a 	add	fp,r16,r3
80083a58:	d9003617 	ldw	r4,216(sp)
80083a5c:	000d883a 	mov	r6,zero
80083a60:	000f883a 	mov	r7,zero
80083a64:	a00b883a 	mov	r5,r20
80083a68:	da003e15 	stw	r8,248(sp)
80083a6c:	0090c140 	call	80090c14 <__eqdf2>
80083a70:	da003e17 	ldw	r8,248(sp)
80083a74:	1000e426 	beq	r2,zero,80083e08 <___svfprintf_internal_r+0x1d60>
80083a78:	d8802117 	ldw	r2,132(sp)
80083a7c:	1700062e 	bgeu	r2,fp,80083a98 <___svfprintf_internal_r+0x19f0>
80083a80:	01000c04 	movi	r4,48
80083a84:	10c00044 	addi	r3,r2,1
80083a88:	d8c02115 	stw	r3,132(sp)
80083a8c:	11000005 	stb	r4,0(r2)
80083a90:	d8802117 	ldw	r2,132(sp)
80083a94:	173ffb36 	bltu	r2,fp,80083a84 <___svfprintf_internal_r+0x19dc>
80083a98:	1405c83a 	sub	r2,r2,r16
80083a9c:	d8803315 	stw	r2,204(sp)
80083aa0:	008011c4 	movi	r2,71
80083aa4:	b080c526 	beq	r22,r2,80083dbc <___svfprintf_internal_r+0x1d14>
80083aa8:	00801944 	movi	r2,101
80083aac:	1441d90e 	bge	r2,r17,80084214 <___svfprintf_internal_r+0x216c>
80083ab0:	d8c02617 	ldw	r3,152(sp)
80083ab4:	00801984 	movi	r2,102
80083ab8:	d8c03215 	stw	r3,200(sp)
80083abc:	88813426 	beq	r17,r2,80083f90 <___svfprintf_internal_r+0x1ee8>
80083ac0:	d8c03217 	ldw	r3,200(sp)
80083ac4:	d9003317 	ldw	r4,204(sp)
80083ac8:	19012516 	blt	r3,r4,80083f60 <___svfprintf_internal_r+0x1eb8>
80083acc:	9480004c 	andi	r18,r18,1
80083ad0:	9001841e 	bne	r18,zero,800840e4 <___svfprintf_internal_r+0x203c>
80083ad4:	1805883a 	mov	r2,r3
80083ad8:	1801cc16 	blt	r3,zero,8008420c <___svfprintf_internal_r+0x2164>
80083adc:	d8c03217 	ldw	r3,200(sp)
80083ae0:	044019c4 	movi	r17,103
80083ae4:	d8c02e15 	stw	r3,184(sp)
80083ae8:	df002a07 	ldb	fp,168(sp)
80083aec:	e000a61e 	bne	fp,zero,80083d88 <___svfprintf_internal_r+0x1ce0>
80083af0:	df002783 	ldbu	fp,158(sp)
80083af4:	d8802a15 	stw	r2,168(sp)
80083af8:	dc802b17 	ldw	r18,172(sp)
80083afc:	d8002915 	stw	zero,164(sp)
80083b00:	003b1706 	br	80082760 <___svfprintf_internal_r+0x6b8>
80083b04:	04200274 	movhi	r16,32777
80083b08:	841a7004 	addi	r16,r16,27072
80083b0c:	003aa606 	br	800825a8 <___svfprintf_internal_r+0x500>
80083b10:	d9003917 	ldw	r4,228(sp)
80083b14:	04001004 	movi	r16,64
80083b18:	800b883a 	mov	r5,r16
80083b1c:	00893a80 	call	800893a8 <_malloc_r>
80083b20:	d9002c17 	ldw	r4,176(sp)
80083b24:	20800015 	stw	r2,0(r4)
80083b28:	20800415 	stw	r2,16(r4)
80083b2c:	1001cb26 	beq	r2,zero,8008425c <___svfprintf_internal_r+0x21b4>
80083b30:	d8802c17 	ldw	r2,176(sp)
80083b34:	14000515 	stw	r16,20(r2)
80083b38:	00397606 	br	80082114 <___svfprintf_internal_r+0x6c>
80083b3c:	04200274 	movhi	r16,32777
80083b40:	841a7204 	addi	r16,r16,27080
80083b44:	003ee106 	br	800836cc <___svfprintf_internal_r+0x1624>
80083b48:	d9402c17 	ldw	r5,176(sp)
80083b4c:	d9801e04 	addi	r6,sp,120
80083b50:	9809883a 	mov	r4,r19
80083b54:	008ba940 	call	8008ba94 <__ssprint_r>
80083b58:	103a381e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083b5c:	dc402617 	ldw	r17,152(sp)
80083b60:	d8c02017 	ldw	r3,128(sp)
80083b64:	da000404 	addi	r8,sp,16
80083b68:	003f4306 	br	80083878 <___svfprintf_internal_r+0x17d0>
80083b6c:	01400184 	movi	r5,6
80083b70:	d9402915 	stw	r5,164(sp)
80083b74:	003f9506 	br	800839cc <___svfprintf_internal_r+0x1924>
80083b78:	d9002d17 	ldw	r4,180(sp)
80083b7c:	25000017 	ldw	r20,0(r4)
80083b80:	21000104 	addi	r4,r4,4
80083b84:	d9002d15 	stw	r4,180(sp)
80083b88:	a02dd7fa 	srai	r22,r20,31
80083b8c:	b005883a 	mov	r2,r22
80083b90:	003a9b06 	br	80082600 <___svfprintf_internal_r+0x558>
80083b94:	d9402d17 	ldw	r5,180(sp)
80083b98:	002d883a 	mov	r22,zero
80083b9c:	2d000017 	ldw	r20,0(r5)
80083ba0:	29400104 	addi	r5,r5,4
80083ba4:	d9402d15 	stw	r5,180(sp)
80083ba8:	003bf906 	br	80082b90 <___svfprintf_internal_r+0xae8>
80083bac:	9480100c 	andi	r18,r18,64
80083bb0:	90006e26 	beq	r18,zero,80083d6c <___svfprintf_internal_r+0x1cc4>
80083bb4:	d9002d17 	ldw	r4,180(sp)
80083bb8:	d9402f17 	ldw	r5,188(sp)
80083bbc:	20800017 	ldw	r2,0(r4)
80083bc0:	21000104 	addi	r4,r4,4
80083bc4:	d9002d15 	stw	r4,180(sp)
80083bc8:	1140000d 	sth	r5,0(r2)
80083bcc:	00396106 	br	80082154 <___svfprintf_internal_r+0xac>
80083bd0:	d9402c17 	ldw	r5,176(sp)
80083bd4:	d9801e04 	addi	r6,sp,120
80083bd8:	9809883a 	mov	r4,r19
80083bdc:	008ba940 	call	8008ba94 <__ssprint_r>
80083be0:	103a161e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083be4:	d8c02017 	ldw	r3,128(sp)
80083be8:	d8801f17 	ldw	r2,124(sp)
80083bec:	da000404 	addi	r8,sp,16
80083bf0:	d9403317 	ldw	r5,204(sp)
80083bf4:	10800044 	addi	r2,r2,1
80083bf8:	44000015 	stw	r16,0(r8)
80083bfc:	28c7883a 	add	r3,r5,r3
80083c00:	003b7706 	br	800829e0 <___svfprintf_internal_r+0x938>
80083c04:	8009883a 	mov	r4,r16
80083c08:	da003e15 	stw	r8,248(sp)
80083c0c:	00820100 	call	80082010 <strlen>
80083c10:	d8802e15 	stw	r2,184(sp)
80083c14:	da003e17 	ldw	r8,248(sp)
80083c18:	103c280e 	bge	r2,zero,80082cbc <___svfprintf_internal_r+0xc14>
80083c1c:	0005883a 	mov	r2,zero
80083c20:	003c2606 	br	80082cbc <___svfprintf_internal_r+0xc14>
80083c24:	00bfffc4 	movi	r2,-1
80083c28:	003a0906 	br	80082450 <___svfprintf_internal_r+0x3a8>
80083c2c:	01200274 	movhi	r4,32777
80083c30:	211a8484 	addi	r4,r4,27154
80083c34:	d9003515 	stw	r4,212(sp)
80083c38:	003b0606 	br	80082854 <___svfprintf_internal_r+0x7ac>
80083c3c:	013fffc4 	movi	r4,-1
80083c40:	003a2706 	br	800824e0 <___svfprintf_internal_r+0x438>
80083c44:	d9402c17 	ldw	r5,176(sp)
80083c48:	d9801e04 	addi	r6,sp,120
80083c4c:	9809883a 	mov	r4,r19
80083c50:	008ba940 	call	8008ba94 <__ssprint_r>
80083c54:	1039f91e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083c58:	d8c02017 	ldw	r3,128(sp)
80083c5c:	da000404 	addi	r8,sp,16
80083c60:	003d8406 	br	80083274 <___svfprintf_internal_r+0x11cc>
80083c64:	0023883a 	mov	r17,zero
80083c68:	003d8306 	br	80083278 <___svfprintf_internal_r+0x11d0>
80083c6c:	01200274 	movhi	r4,32777
80083c70:	211a8084 	addi	r4,r4,27138
80083c74:	d9002b15 	stw	r4,172(sp)
80083c78:	d9002b17 	ldw	r4,172(sp)
80083c7c:	1c47883a 	add	r3,r3,r17
80083c80:	10800044 	addi	r2,r2,1
80083c84:	41000015 	stw	r4,0(r8)
80083c88:	44400115 	stw	r17,4(r8)
80083c8c:	d8c02015 	stw	r3,128(sp)
80083c90:	d8801f15 	stw	r2,124(sp)
80083c94:	010001c4 	movi	r4,7
80083c98:	20bfcd16 	blt	r4,r2,80083bd0 <___svfprintf_internal_r+0x1b28>
80083c9c:	42000204 	addi	r8,r8,8
80083ca0:	003fd306 	br	80083bf0 <___svfprintf_internal_r+0x1b48>
80083ca4:	d9402c17 	ldw	r5,176(sp)
80083ca8:	d9801e04 	addi	r6,sp,120
80083cac:	9809883a 	mov	r4,r19
80083cb0:	008ba940 	call	8008ba94 <__ssprint_r>
80083cb4:	1039e11e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083cb8:	d8802617 	ldw	r2,152(sp)
80083cbc:	d8c02017 	ldw	r3,128(sp)
80083cc0:	da000404 	addi	r8,sp,16
80083cc4:	003e1c06 	br	80083538 <___svfprintf_internal_r+0x1490>
80083cc8:	d8802917 	ldw	r2,164(sp)
80083ccc:	00c00184 	movi	r3,6
80083cd0:	1880012e 	bgeu	r3,r2,80083cd8 <___svfprintf_internal_r+0x1c30>
80083cd4:	1805883a 	mov	r2,r3
80083cd8:	d8802e15 	stw	r2,184(sp)
80083cdc:	1000f316 	blt	r2,zero,800840ac <___svfprintf_internal_r+0x2004>
80083ce0:	04200274 	movhi	r16,32777
80083ce4:	d8802a15 	stw	r2,168(sp)
80083ce8:	dd002d15 	stw	r20,180(sp)
80083cec:	d8002915 	stw	zero,164(sp)
80083cf0:	d8003215 	stw	zero,200(sp)
80083cf4:	841a7e04 	addi	r16,r16,27128
80083cf8:	0039883a 	mov	fp,zero
80083cfc:	003a9f06 	br	8008277c <___svfprintf_internal_r+0x6d4>
80083d00:	01200274 	movhi	r4,32777
80083d04:	211a8484 	addi	r4,r4,27154
80083d08:	d9003515 	stw	r4,212(sp)
80083d0c:	003b5f06 	br	80082a8c <___svfprintf_internal_r+0x9e4>
80083d10:	d9402c17 	ldw	r5,176(sp)
80083d14:	d9801e04 	addi	r6,sp,120
80083d18:	9809883a 	mov	r4,r19
80083d1c:	008ba940 	call	8008ba94 <__ssprint_r>
80083d20:	1039c61e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083d24:	d8802617 	ldw	r2,152(sp)
80083d28:	d9403317 	ldw	r5,204(sp)
80083d2c:	d8c02017 	ldw	r3,128(sp)
80083d30:	da000404 	addi	r8,sp,16
80083d34:	2885c83a 	sub	r2,r5,r2
80083d38:	003e1006 	br	8008357c <___svfprintf_internal_r+0x14d4>
80083d3c:	00800044 	movi	r2,1
80083d40:	10803fcc 	andi	r2,r2,255
80083d44:	00c00044 	movi	r3,1
80083d48:	10fa3526 	beq	r2,r3,80082620 <___svfprintf_internal_r+0x578>
80083d4c:	00c00084 	movi	r3,2
80083d50:	10fb9e26 	beq	r2,r3,80082bcc <___svfprintf_internal_r+0xb24>
80083d54:	003a6406 	br	800826e8 <___svfprintf_internal_r+0x640>
80083d58:	0021883a 	mov	r16,zero
80083d5c:	003e0806 	br	80083580 <___svfprintf_internal_r+0x14d8>
80083d60:	07000b44 	movi	fp,45
80083d64:	df002785 	stb	fp,158(sp)
80083d68:	003a0b06 	br	80082598 <___svfprintf_internal_r+0x4f0>
80083d6c:	d8c02d17 	ldw	r3,180(sp)
80083d70:	d9002f17 	ldw	r4,188(sp)
80083d74:	18800017 	ldw	r2,0(r3)
80083d78:	18c00104 	addi	r3,r3,4
80083d7c:	d8c02d15 	stw	r3,180(sp)
80083d80:	11000015 	stw	r4,0(r2)
80083d84:	0038f306 	br	80082154 <___svfprintf_internal_r+0xac>
80083d88:	00c00b44 	movi	r3,45
80083d8c:	d8c02785 	stb	r3,158(sp)
80083d90:	d8802a15 	stw	r2,168(sp)
80083d94:	dc802b17 	ldw	r18,172(sp)
80083d98:	d8002915 	stw	zero,164(sp)
80083d9c:	07000b44 	movi	fp,45
80083da0:	003a7306 	br	80082770 <___svfprintf_internal_r+0x6c8>
80083da4:	9080004c 	andi	r2,r18,1
80083da8:	1000941e 	bne	r2,zero,80083ffc <___svfprintf_internal_r+0x1f54>
80083dac:	d8802117 	ldw	r2,132(sp)
80083db0:	1405c83a 	sub	r2,r2,r16
80083db4:	d8803315 	stw	r2,204(sp)
80083db8:	b441161e 	bne	r22,r17,80084214 <___svfprintf_internal_r+0x216c>
80083dbc:	dd802617 	ldw	r22,152(sp)
80083dc0:	00bfff44 	movi	r2,-3
80083dc4:	b0801a16 	blt	r22,r2,80083e30 <___svfprintf_internal_r+0x1d88>
80083dc8:	d9402917 	ldw	r5,164(sp)
80083dcc:	2d801816 	blt	r5,r22,80083e30 <___svfprintf_internal_r+0x1d88>
80083dd0:	dd803215 	stw	r22,200(sp)
80083dd4:	003f3a06 	br	80083ac0 <___svfprintf_internal_r+0x1a18>
80083dd8:	1025883a 	mov	r18,r2
80083ddc:	0039883a 	mov	fp,zero
80083de0:	00800084 	movi	r2,2
80083de4:	003fd606 	br	80083d40 <___svfprintf_internal_r+0x1c98>
80083de8:	9080004c 	andi	r2,r18,1
80083dec:	103f191e 	bne	r2,zero,80083a54 <___svfprintf_internal_r+0x19ac>
80083df0:	d8802117 	ldw	r2,132(sp)
80083df4:	003f2806 	br	80083a98 <___svfprintf_internal_r+0x19f0>
80083df8:	01200274 	movhi	r4,32777
80083dfc:	211a8084 	addi	r4,r4,27138
80083e00:	d9002b15 	stw	r4,172(sp)
80083e04:	003c7c06 	br	80082ff8 <___svfprintf_internal_r+0xf50>
80083e08:	e005883a 	mov	r2,fp
80083e0c:	003f2206 	br	80083a98 <___svfprintf_internal_r+0x19f0>
80083e10:	d9402917 	ldw	r5,164(sp)
80083e14:	df002783 	ldbu	fp,158(sp)
80083e18:	dd002d15 	stw	r20,180(sp)
80083e1c:	d9402a15 	stw	r5,168(sp)
80083e20:	d9402e15 	stw	r5,184(sp)
80083e24:	d8002915 	stw	zero,164(sp)
80083e28:	d8003215 	stw	zero,200(sp)
80083e2c:	003a4c06 	br	80082760 <___svfprintf_internal_r+0x6b8>
80083e30:	8c7fff84 	addi	r17,r17,-2
80083e34:	b5bfffc4 	addi	r22,r22,-1
80083e38:	dd802615 	stw	r22,152(sp)
80083e3c:	dc4022c5 	stb	r17,139(sp)
80083e40:	b000c316 	blt	r22,zero,80084150 <___svfprintf_internal_r+0x20a8>
80083e44:	00800ac4 	movi	r2,43
80083e48:	d8802305 	stb	r2,140(sp)
80083e4c:	00800244 	movi	r2,9
80083e50:	15806e16 	blt	r2,r22,8008400c <___svfprintf_internal_r+0x1f64>
80083e54:	00800c04 	movi	r2,48
80083e58:	b5800c04 	addi	r22,r22,48
80083e5c:	d8802345 	stb	r2,141(sp)
80083e60:	dd802385 	stb	r22,142(sp)
80083e64:	d88023c4 	addi	r2,sp,143
80083e68:	df0022c4 	addi	fp,sp,139
80083e6c:	d8c03317 	ldw	r3,204(sp)
80083e70:	1739c83a 	sub	fp,r2,fp
80083e74:	d9003317 	ldw	r4,204(sp)
80083e78:	e0c7883a 	add	r3,fp,r3
80083e7c:	df003b15 	stw	fp,236(sp)
80083e80:	d8c02e15 	stw	r3,184(sp)
80083e84:	00800044 	movi	r2,1
80083e88:	1100b70e 	bge	r2,r4,80084168 <___svfprintf_internal_r+0x20c0>
80083e8c:	d8c02e17 	ldw	r3,184(sp)
80083e90:	18c00044 	addi	r3,r3,1
80083e94:	d8c02e15 	stw	r3,184(sp)
80083e98:	1805883a 	mov	r2,r3
80083e9c:	1800b016 	blt	r3,zero,80084160 <___svfprintf_internal_r+0x20b8>
80083ea0:	d8003215 	stw	zero,200(sp)
80083ea4:	003f1006 	br	80083ae8 <___svfprintf_internal_r+0x1a40>
80083ea8:	d8802917 	ldw	r2,164(sp)
80083eac:	103ec71e 	bne	r2,zero,800839cc <___svfprintf_internal_r+0x1924>
80083eb0:	dc002915 	stw	r16,164(sp)
80083eb4:	003ec506 	br	800839cc <___svfprintf_internal_r+0x1924>
80083eb8:	d9402c17 	ldw	r5,176(sp)
80083ebc:	d9801e04 	addi	r6,sp,120
80083ec0:	9809883a 	mov	r4,r19
80083ec4:	008ba940 	call	8008ba94 <__ssprint_r>
80083ec8:	10395c1e 	bne	r2,zero,8008243c <___svfprintf_internal_r+0x394>
80083ecc:	dc402617 	ldw	r17,152(sp)
80083ed0:	d8c02017 	ldw	r3,128(sp)
80083ed4:	d8801f17 	ldw	r2,124(sp)
80083ed8:	da000404 	addi	r8,sp,16
80083edc:	003e7706 	br	800838bc <___svfprintf_internal_r+0x1814>
80083ee0:	582f883a 	mov	r23,r11
80083ee4:	d8002915 	stw	zero,164(sp)
80083ee8:	0038c406 	br	800821fc <___svfprintf_internal_r+0x154>
80083eec:	d8c02917 	ldw	r3,164(sp)
80083ef0:	d8802104 	addi	r2,sp,132
80083ef4:	d8800315 	stw	r2,12(sp)
80083ef8:	d9403617 	ldw	r5,216(sp)
80083efc:	d8802504 	addi	r2,sp,148
80083f00:	d8800215 	stw	r2,8(sp)
80083f04:	d8802604 	addi	r2,sp,152
80083f08:	d8c00015 	stw	r3,0(sp)
80083f0c:	9809883a 	mov	r4,r19
80083f10:	d8800115 	stw	r2,4(sp)
80083f14:	01c000c4 	movi	r7,3
80083f18:	a00d883a 	mov	r6,r20
80083f1c:	da003e15 	stw	r8,248(sp)
80083f20:	00869c80 	call	800869c8 <_dtoa_r>
80083f24:	d9002917 	ldw	r4,164(sp)
80083f28:	da003e17 	ldw	r8,248(sp)
80083f2c:	1021883a 	mov	r16,r2
80083f30:	1139883a 	add	fp,r2,r4
80083f34:	2007883a 	mov	r3,r4
80083f38:	81000007 	ldb	r4,0(r16)
80083f3c:	00800c04 	movi	r2,48
80083f40:	20806f26 	beq	r4,r2,80084100 <___svfprintf_internal_r+0x2058>
80083f44:	d8c02617 	ldw	r3,152(sp)
80083f48:	e0f9883a 	add	fp,fp,r3
80083f4c:	003ec206 	br	80083a58 <___svfprintf_internal_r+0x19b0>
80083f50:	00c00b44 	movi	r3,45
80083f54:	2520003c 	xorhi	r20,r4,32768
80083f58:	d8c02a05 	stb	r3,168(sp)
80083f5c:	003ea106 	br	800839e4 <___svfprintf_internal_r+0x193c>
80083f60:	d8c03217 	ldw	r3,200(sp)
80083f64:	00c0890e 	bge	zero,r3,8008418c <___svfprintf_internal_r+0x20e4>
80083f68:	00800044 	movi	r2,1
80083f6c:	d9003317 	ldw	r4,204(sp)
80083f70:	1105883a 	add	r2,r2,r4
80083f74:	d8802e15 	stw	r2,184(sp)
80083f78:	10005f16 	blt	r2,zero,800840f8 <___svfprintf_internal_r+0x2050>
80083f7c:	044019c4 	movi	r17,103
80083f80:	003ed906 	br	80083ae8 <___svfprintf_internal_r+0x1a40>
80083f84:	d9002917 	ldw	r4,164(sp)
80083f88:	20c00044 	addi	r3,r4,1
80083f8c:	003e9c06 	br	80083a00 <___svfprintf_internal_r+0x1958>
80083f90:	d9002917 	ldw	r4,164(sp)
80083f94:	00c0680e 	bge	zero,r3,80084138 <___svfprintf_internal_r+0x2090>
80083f98:	2000461e 	bne	r4,zero,800840b4 <___svfprintf_internal_r+0x200c>
80083f9c:	9480004c 	andi	r18,r18,1
80083fa0:	9000441e 	bne	r18,zero,800840b4 <___svfprintf_internal_r+0x200c>
80083fa4:	1805883a 	mov	r2,r3
80083fa8:	1800a016 	blt	r3,zero,8008422c <___svfprintf_internal_r+0x2184>
80083fac:	d8c03217 	ldw	r3,200(sp)
80083fb0:	d8c02e15 	stw	r3,184(sp)
80083fb4:	003ecc06 	br	80083ae8 <___svfprintf_internal_r+0x1a40>
80083fb8:	d9402917 	ldw	r5,164(sp)
80083fbc:	d8802104 	addi	r2,sp,132
80083fc0:	d8800315 	stw	r2,12(sp)
80083fc4:	d9400015 	stw	r5,0(sp)
80083fc8:	d8802504 	addi	r2,sp,148
80083fcc:	d9403617 	ldw	r5,216(sp)
80083fd0:	d8800215 	stw	r2,8(sp)
80083fd4:	d8802604 	addi	r2,sp,152
80083fd8:	d8800115 	stw	r2,4(sp)
80083fdc:	01c000c4 	movi	r7,3
80083fe0:	a00d883a 	mov	r6,r20
80083fe4:	9809883a 	mov	r4,r19
80083fe8:	da003e15 	stw	r8,248(sp)
80083fec:	00869c80 	call	800869c8 <_dtoa_r>
80083ff0:	d8c02917 	ldw	r3,164(sp)
80083ff4:	da003e17 	ldw	r8,248(sp)
80083ff8:	1021883a 	mov	r16,r2
80083ffc:	00801184 	movi	r2,70
80084000:	80f9883a 	add	fp,r16,r3
80084004:	88bfcc26 	beq	r17,r2,80083f38 <___svfprintf_internal_r+0x1e90>
80084008:	003e9306 	br	80083a58 <___svfprintf_internal_r+0x19b0>
8008400c:	df0022c4 	addi	fp,sp,139
80084010:	dc002915 	stw	r16,164(sp)
80084014:	9829883a 	mov	r20,r19
80084018:	e021883a 	mov	r16,fp
8008401c:	4027883a 	mov	r19,r8
80084020:	b009883a 	mov	r4,r22
80084024:	01400284 	movi	r5,10
80084028:	008f9500 	call	8008f950 <__modsi3>
8008402c:	10800c04 	addi	r2,r2,48
80084030:	843fffc4 	addi	r16,r16,-1
80084034:	b009883a 	mov	r4,r22
80084038:	01400284 	movi	r5,10
8008403c:	80800005 	stb	r2,0(r16)
80084040:	008f8cc0 	call	8008f8cc <__divsi3>
80084044:	102d883a 	mov	r22,r2
80084048:	00800244 	movi	r2,9
8008404c:	15bff416 	blt	r2,r22,80084020 <___svfprintf_internal_r+0x1f78>
80084050:	9811883a 	mov	r8,r19
80084054:	b0800c04 	addi	r2,r22,48
80084058:	a027883a 	mov	r19,r20
8008405c:	8029883a 	mov	r20,r16
80084060:	a17fffc4 	addi	r5,r20,-1
80084064:	a0bfffc5 	stb	r2,-1(r20)
80084068:	dc002917 	ldw	r16,164(sp)
8008406c:	2f00752e 	bgeu	r5,fp,80084244 <___svfprintf_internal_r+0x219c>
80084070:	d9c02384 	addi	r7,sp,142
80084074:	3d0fc83a 	sub	r7,r7,r20
80084078:	d9002344 	addi	r4,sp,141
8008407c:	e1cf883a 	add	r7,fp,r7
80084080:	00000106 	br	80084088 <___svfprintf_internal_r+0x1fe0>
80084084:	28800003 	ldbu	r2,0(r5)
80084088:	20800005 	stb	r2,0(r4)
8008408c:	21000044 	addi	r4,r4,1
80084090:	29400044 	addi	r5,r5,1
80084094:	21fffb1e 	bne	r4,r7,80084084 <___svfprintf_internal_r+0x1fdc>
80084098:	d8802304 	addi	r2,sp,140
8008409c:	1505c83a 	sub	r2,r2,r20
800840a0:	d8c02344 	addi	r3,sp,141
800840a4:	1885883a 	add	r2,r3,r2
800840a8:	003f7006 	br	80083e6c <___svfprintf_internal_r+0x1dc4>
800840ac:	0005883a 	mov	r2,zero
800840b0:	003f0b06 	br	80083ce0 <___svfprintf_internal_r+0x1c38>
800840b4:	d9002917 	ldw	r4,164(sp)
800840b8:	d8c03217 	ldw	r3,200(sp)
800840bc:	20800044 	addi	r2,r4,1
800840c0:	1885883a 	add	r2,r3,r2
800840c4:	d8802e15 	stw	r2,184(sp)
800840c8:	103e870e 	bge	r2,zero,80083ae8 <___svfprintf_internal_r+0x1a40>
800840cc:	0005883a 	mov	r2,zero
800840d0:	003e8506 	br	80083ae8 <___svfprintf_internal_r+0x1a40>
800840d4:	01200274 	movhi	r4,32777
800840d8:	211a8084 	addi	r4,r4,27138
800840dc:	d9002b15 	stw	r4,172(sp)
800840e0:	003cc506 	br	800833f8 <___svfprintf_internal_r+0x1350>
800840e4:	d8c03217 	ldw	r3,200(sp)
800840e8:	18c00044 	addi	r3,r3,1
800840ec:	d8c02e15 	stw	r3,184(sp)
800840f0:	1805883a 	mov	r2,r3
800840f4:	183fa10e 	bge	r3,zero,80083f7c <___svfprintf_internal_r+0x1ed4>
800840f8:	0005883a 	mov	r2,zero
800840fc:	003f9f06 	br	80083f7c <___svfprintf_internal_r+0x1ed4>
80084100:	d9003617 	ldw	r4,216(sp)
80084104:	000d883a 	mov	r6,zero
80084108:	000f883a 	mov	r7,zero
8008410c:	a00b883a 	mov	r5,r20
80084110:	d8c03d15 	stw	r3,244(sp)
80084114:	da003e15 	stw	r8,248(sp)
80084118:	0090c140 	call	80090c14 <__eqdf2>
8008411c:	d8c03d17 	ldw	r3,244(sp)
80084120:	da003e17 	ldw	r8,248(sp)
80084124:	103f8726 	beq	r2,zero,80083f44 <___svfprintf_internal_r+0x1e9c>
80084128:	00800044 	movi	r2,1
8008412c:	10c7c83a 	sub	r3,r2,r3
80084130:	d8c02615 	stw	r3,152(sp)
80084134:	003f8406 	br	80083f48 <___svfprintf_internal_r+0x1ea0>
80084138:	20000e1e 	bne	r4,zero,80084174 <___svfprintf_internal_r+0x20cc>
8008413c:	9480004c 	andi	r18,r18,1
80084140:	90000c1e 	bne	r18,zero,80084174 <___svfprintf_internal_r+0x20cc>
80084144:	00800044 	movi	r2,1
80084148:	d8802e15 	stw	r2,184(sp)
8008414c:	003e6606 	br	80083ae8 <___svfprintf_internal_r+0x1a40>
80084150:	00800b44 	movi	r2,45
80084154:	05adc83a 	sub	r22,zero,r22
80084158:	d8802305 	stb	r2,140(sp)
8008415c:	003f3b06 	br	80083e4c <___svfprintf_internal_r+0x1da4>
80084160:	0005883a 	mov	r2,zero
80084164:	003f4e06 	br	80083ea0 <___svfprintf_internal_r+0x1df8>
80084168:	90a4703a 	and	r18,r18,r2
8008416c:	903f4a26 	beq	r18,zero,80083e98 <___svfprintf_internal_r+0x1df0>
80084170:	003f4606 	br	80083e8c <___svfprintf_internal_r+0x1de4>
80084174:	d8c02917 	ldw	r3,164(sp)
80084178:	18c00084 	addi	r3,r3,2
8008417c:	d8c02e15 	stw	r3,184(sp)
80084180:	1805883a 	mov	r2,r3
80084184:	183e580e 	bge	r3,zero,80083ae8 <___svfprintf_internal_r+0x1a40>
80084188:	003fd006 	br	800840cc <___svfprintf_internal_r+0x2024>
8008418c:	00800084 	movi	r2,2
80084190:	10c5c83a 	sub	r2,r2,r3
80084194:	003f7506 	br	80083f6c <___svfprintf_internal_r+0x1ec4>
80084198:	d8802d17 	ldw	r2,180(sp)
8008419c:	d9002d17 	ldw	r4,180(sp)
800841a0:	bc400043 	ldbu	r17,1(r23)
800841a4:	10800017 	ldw	r2,0(r2)
800841a8:	582f883a 	mov	r23,r11
800841ac:	d8802915 	stw	r2,164(sp)
800841b0:	20800104 	addi	r2,r4,4
800841b4:	d9002917 	ldw	r4,164(sp)
800841b8:	d8802d15 	stw	r2,180(sp)
800841bc:	203df00e 	bge	r4,zero,80083980 <___svfprintf_internal_r+0x18d8>
800841c0:	8c403fcc 	andi	r17,r17,255
800841c4:	00bfffc4 	movi	r2,-1
800841c8:	8c40201c 	xori	r17,r17,128
800841cc:	d8802915 	stw	r2,164(sp)
800841d0:	8c7fe004 	addi	r17,r17,-128
800841d4:	00380806 	br	800821f8 <___svfprintf_internal_r+0x150>
800841d8:	9080004c 	andi	r2,r18,1
800841dc:	0039883a 	mov	fp,zero
800841e0:	10000726 	beq	r2,zero,80084200 <___svfprintf_internal_r+0x2158>
800841e4:	d8c02817 	ldw	r3,160(sp)
800841e8:	dc001dc4 	addi	r16,sp,119
800841ec:	00800c04 	movi	r2,48
800841f0:	1c07c83a 	sub	r3,r3,r16
800841f4:	d8801dc5 	stb	r2,119(sp)
800841f8:	d8c02e15 	stw	r3,184(sp)
800841fc:	00395206 	br	80082748 <___svfprintf_internal_r+0x6a0>
80084200:	d8002e15 	stw	zero,184(sp)
80084204:	dc001e04 	addi	r16,sp,120
80084208:	00394f06 	br	80082748 <___svfprintf_internal_r+0x6a0>
8008420c:	0005883a 	mov	r2,zero
80084210:	003e3206 	br	80083adc <___svfprintf_internal_r+0x1a34>
80084214:	dd802617 	ldw	r22,152(sp)
80084218:	003f0606 	br	80083e34 <___svfprintf_internal_r+0x1d8c>
8008421c:	d9c02785 	stb	r7,158(sp)
80084220:	003a5106 	br	80082b68 <___svfprintf_internal_r+0xac0>
80084224:	d9c02785 	stb	r7,158(sp)
80084228:	003a3706 	br	80082b08 <___svfprintf_internal_r+0xa60>
8008422c:	0005883a 	mov	r2,zero
80084230:	003f5e06 	br	80083fac <___svfprintf_internal_r+0x1f04>
80084234:	d9c02785 	stb	r7,158(sp)
80084238:	00391706 	br	80082698 <___svfprintf_internal_r+0x5f0>
8008423c:	d9c02785 	stb	r7,158(sp)
80084240:	0038e606 	br	800825dc <___svfprintf_internal_r+0x534>
80084244:	d8802344 	addi	r2,sp,141
80084248:	003f0806 	br	80083e6c <___svfprintf_internal_r+0x1dc4>
8008424c:	d9c02785 	stb	r7,158(sp)
80084250:	0038b706 	br	80082530 <___svfprintf_internal_r+0x488>
80084254:	d9c02785 	stb	r7,158(sp)
80084258:	003adc06 	br	80082dcc <___svfprintf_internal_r+0xd24>
8008425c:	d9403917 	ldw	r5,228(sp)
80084260:	00800304 	movi	r2,12
80084264:	28800015 	stw	r2,0(r5)
80084268:	00bfffc4 	movi	r2,-1
8008426c:	00387806 	br	80082450 <___svfprintf_internal_r+0x3a8>
80084270:	d9c02785 	stb	r7,158(sp)
80084274:	003abf06 	br	80082d74 <___svfprintf_internal_r+0xccc>
80084278:	d9c02785 	stb	r7,158(sp)
8008427c:	003a9b06 	br	80082cec <___svfprintf_internal_r+0xc44>

80084280 <___vfprintf_internal_r>:
80084280:	deffb804 	addi	sp,sp,-288
80084284:	dfc04715 	stw	ra,284(sp)
80084288:	ddc04515 	stw	r23,276(sp)
8008428c:	dd404315 	stw	r21,268(sp)
80084290:	d9002c15 	stw	r4,176(sp)
80084294:	282f883a 	mov	r23,r5
80084298:	302b883a 	mov	r21,r6
8008429c:	d9c02d15 	stw	r7,180(sp)
800842a0:	df004615 	stw	fp,280(sp)
800842a4:	dd804415 	stw	r22,272(sp)
800842a8:	dd004215 	stw	r20,264(sp)
800842ac:	dcc04115 	stw	r19,260(sp)
800842b0:	dc804015 	stw	r18,256(sp)
800842b4:	dc403f15 	stw	r17,252(sp)
800842b8:	dc003e15 	stw	r16,248(sp)
800842bc:	00891bc0 	call	800891bc <_localeconv_r>
800842c0:	10800017 	ldw	r2,0(r2)
800842c4:	1009883a 	mov	r4,r2
800842c8:	d8803415 	stw	r2,208(sp)
800842cc:	00820100 	call	80082010 <strlen>
800842d0:	d8803715 	stw	r2,220(sp)
800842d4:	d8802c17 	ldw	r2,176(sp)
800842d8:	10000226 	beq	r2,zero,800842e4 <___vfprintf_internal_r+0x64>
800842dc:	10800e17 	ldw	r2,56(r2)
800842e0:	1000f926 	beq	r2,zero,800846c8 <___vfprintf_internal_r+0x448>
800842e4:	b880030b 	ldhu	r2,12(r23)
800842e8:	10c8000c 	andi	r3,r2,8192
800842ec:	1800061e 	bne	r3,zero,80084308 <___vfprintf_internal_r+0x88>
800842f0:	b9001917 	ldw	r4,100(r23)
800842f4:	00f7ffc4 	movi	r3,-8193
800842f8:	10880014 	ori	r2,r2,8192
800842fc:	20c6703a 	and	r3,r4,r3
80084300:	b880030d 	sth	r2,12(r23)
80084304:	b8c01915 	stw	r3,100(r23)
80084308:	10c0020c 	andi	r3,r2,8
8008430c:	1800c126 	beq	r3,zero,80084614 <___vfprintf_internal_r+0x394>
80084310:	b8c00417 	ldw	r3,16(r23)
80084314:	1800bf26 	beq	r3,zero,80084614 <___vfprintf_internal_r+0x394>
80084318:	1080068c 	andi	r2,r2,26
8008431c:	00c00284 	movi	r3,10
80084320:	10c0c426 	beq	r2,r3,80084634 <___vfprintf_internal_r+0x3b4>
80084324:	d8c00404 	addi	r3,sp,16
80084328:	05200274 	movhi	r20,32777
8008432c:	d9001e04 	addi	r4,sp,120
80084330:	a51a8884 	addi	r20,r20,27170
80084334:	d8c01e15 	stw	r3,120(sp)
80084338:	d8002015 	stw	zero,128(sp)
8008433c:	d8001f15 	stw	zero,124(sp)
80084340:	d8003315 	stw	zero,204(sp)
80084344:	d8003615 	stw	zero,216(sp)
80084348:	d8003815 	stw	zero,224(sp)
8008434c:	1811883a 	mov	r8,r3
80084350:	d8003915 	stw	zero,228(sp)
80084354:	d8003a15 	stw	zero,232(sp)
80084358:	d8002f15 	stw	zero,188(sp)
8008435c:	d9002815 	stw	r4,160(sp)
80084360:	a8800007 	ldb	r2,0(r21)
80084364:	10027b26 	beq	r2,zero,80084d54 <___vfprintf_internal_r+0xad4>
80084368:	00c00944 	movi	r3,37
8008436c:	a821883a 	mov	r16,r21
80084370:	10c0021e 	bne	r2,r3,8008437c <___vfprintf_internal_r+0xfc>
80084374:	00001406 	br	800843c8 <___vfprintf_internal_r+0x148>
80084378:	10c00326 	beq	r2,r3,80084388 <___vfprintf_internal_r+0x108>
8008437c:	84000044 	addi	r16,r16,1
80084380:	80800007 	ldb	r2,0(r16)
80084384:	103ffc1e 	bne	r2,zero,80084378 <___vfprintf_internal_r+0xf8>
80084388:	8563c83a 	sub	r17,r16,r21
8008438c:	88000e26 	beq	r17,zero,800843c8 <___vfprintf_internal_r+0x148>
80084390:	d8c02017 	ldw	r3,128(sp)
80084394:	d8801f17 	ldw	r2,124(sp)
80084398:	45400015 	stw	r21,0(r8)
8008439c:	1c47883a 	add	r3,r3,r17
800843a0:	10800044 	addi	r2,r2,1
800843a4:	d8c02015 	stw	r3,128(sp)
800843a8:	44400115 	stw	r17,4(r8)
800843ac:	d8801f15 	stw	r2,124(sp)
800843b0:	00c001c4 	movi	r3,7
800843b4:	1880a716 	blt	r3,r2,80084654 <___vfprintf_internal_r+0x3d4>
800843b8:	42000204 	addi	r8,r8,8
800843bc:	d9402f17 	ldw	r5,188(sp)
800843c0:	2c4b883a 	add	r5,r5,r17
800843c4:	d9402f15 	stw	r5,188(sp)
800843c8:	80800007 	ldb	r2,0(r16)
800843cc:	1000a826 	beq	r2,zero,80084670 <___vfprintf_internal_r+0x3f0>
800843d0:	84400047 	ldb	r17,1(r16)
800843d4:	00bfffc4 	movi	r2,-1
800843d8:	85400044 	addi	r21,r16,1
800843dc:	d8002785 	stb	zero,158(sp)
800843e0:	0007883a 	mov	r3,zero
800843e4:	000f883a 	mov	r7,zero
800843e8:	d8802915 	stw	r2,164(sp)
800843ec:	d8003115 	stw	zero,196(sp)
800843f0:	0025883a 	mov	r18,zero
800843f4:	01401604 	movi	r5,88
800843f8:	01800244 	movi	r6,9
800843fc:	02800a84 	movi	r10,42
80084400:	02401b04 	movi	r9,108
80084404:	ad400044 	addi	r21,r21,1
80084408:	88bff804 	addi	r2,r17,-32
8008440c:	28830436 	bltu	r5,r2,80085020 <___vfprintf_internal_r+0xda0>
80084410:	100490ba 	slli	r2,r2,2
80084414:	01200234 	movhi	r4,32776
80084418:	21110a04 	addi	r4,r4,17448
8008441c:	1105883a 	add	r2,r2,r4
80084420:	10800017 	ldw	r2,0(r2)
80084424:	1000683a 	jmp	r2
80084428:	80084f40 	call	880084f4 <__alt_data_end+0x7f0b4f4>
8008442c:	80085020 	cmpeqi	zero,r16,8512
80084430:	80085020 	cmpeqi	zero,r16,8512
80084434:	80084f60 	cmpeqi	zero,r16,8509
80084438:	80085020 	cmpeqi	zero,r16,8512
8008443c:	80085020 	cmpeqi	zero,r16,8512
80084440:	80085020 	cmpeqi	zero,r16,8512
80084444:	80085020 	cmpeqi	zero,r16,8512
80084448:	80085020 	cmpeqi	zero,r16,8512
8008444c:	80085020 	cmpeqi	zero,r16,8512
80084450:	800846d4 	ori	zero,r16,8475
80084454:	80084e7c 	xorhi	zero,r16,8505
80084458:	80085020 	cmpeqi	zero,r16,8512
8008445c:	8008459c 	xori	zero,r16,8470
80084460:	800846fc 	xorhi	zero,r16,8475
80084464:	80085020 	cmpeqi	zero,r16,8512
80084468:	8008473c 	xorhi	zero,r16,8476
8008446c:	80084748 	cmpgei	zero,r16,8477
80084470:	80084748 	cmpgei	zero,r16,8477
80084474:	80084748 	cmpgei	zero,r16,8477
80084478:	80084748 	cmpgei	zero,r16,8477
8008447c:	80084748 	cmpgei	zero,r16,8477
80084480:	80084748 	cmpgei	zero,r16,8477
80084484:	80084748 	cmpgei	zero,r16,8477
80084488:	80084748 	cmpgei	zero,r16,8477
8008448c:	80084748 	cmpgei	zero,r16,8477
80084490:	80085020 	cmpeqi	zero,r16,8512
80084494:	80085020 	cmpeqi	zero,r16,8512
80084498:	80085020 	cmpeqi	zero,r16,8512
8008449c:	80085020 	cmpeqi	zero,r16,8512
800844a0:	80085020 	cmpeqi	zero,r16,8512
800844a4:	80085020 	cmpeqi	zero,r16,8512
800844a8:	80085020 	cmpeqi	zero,r16,8512
800844ac:	80085020 	cmpeqi	zero,r16,8512
800844b0:	80085020 	cmpeqi	zero,r16,8512
800844b4:	80085020 	cmpeqi	zero,r16,8512
800844b8:	8008477c 	xorhi	zero,r16,8477
800844bc:	80084838 	rdprs	zero,r16,8480
800844c0:	80085020 	cmpeqi	zero,r16,8512
800844c4:	80084838 	rdprs	zero,r16,8480
800844c8:	80085020 	cmpeqi	zero,r16,8512
800844cc:	80085020 	cmpeqi	zero,r16,8512
800844d0:	80085020 	cmpeqi	zero,r16,8512
800844d4:	80085020 	cmpeqi	zero,r16,8512
800844d8:	800848d8 	cmpnei	zero,r16,8483
800844dc:	80085020 	cmpeqi	zero,r16,8512
800844e0:	80085020 	cmpeqi	zero,r16,8512
800844e4:	800848e4 	muli	zero,r16,8483
800844e8:	80085020 	cmpeqi	zero,r16,8512
800844ec:	80085020 	cmpeqi	zero,r16,8512
800844f0:	80085020 	cmpeqi	zero,r16,8512
800844f4:	80085020 	cmpeqi	zero,r16,8512
800844f8:	80085020 	cmpeqi	zero,r16,8512
800844fc:	80084d5c 	xori	zero,r16,8501
80084500:	80085020 	cmpeqi	zero,r16,8512
80084504:	80085020 	cmpeqi	zero,r16,8512
80084508:	80084dbc 	xorhi	zero,r16,8502
8008450c:	80085020 	cmpeqi	zero,r16,8512
80084510:	80085020 	cmpeqi	zero,r16,8512
80084514:	80085020 	cmpeqi	zero,r16,8512
80084518:	80085020 	cmpeqi	zero,r16,8512
8008451c:	80085020 	cmpeqi	zero,r16,8512
80084520:	80085020 	cmpeqi	zero,r16,8512
80084524:	80085020 	cmpeqi	zero,r16,8512
80084528:	80085020 	cmpeqi	zero,r16,8512
8008452c:	80085020 	cmpeqi	zero,r16,8512
80084530:	80085020 	cmpeqi	zero,r16,8512
80084534:	80084fcc 	andi	zero,r16,8511
80084538:	80084f6c 	andhi	zero,r16,8509
8008453c:	80084838 	rdprs	zero,r16,8480
80084540:	80084838 	rdprs	zero,r16,8480
80084544:	80084838 	rdprs	zero,r16,8480
80084548:	80084f7c 	xorhi	zero,r16,8509
8008454c:	80084f6c 	andhi	zero,r16,8509
80084550:	80085020 	cmpeqi	zero,r16,8512
80084554:	80085020 	cmpeqi	zero,r16,8512
80084558:	80084f88 	cmpgei	zero,r16,8510
8008455c:	80085020 	cmpeqi	zero,r16,8512
80084560:	80084f98 	cmpnei	zero,r16,8510
80084564:	80084e6c 	andhi	zero,r16,8505
80084568:	800845a8 	cmpgeui	zero,r16,8470
8008456c:	80084e8c 	andi	zero,r16,8506
80084570:	80085020 	cmpeqi	zero,r16,8512
80084574:	80084e98 	cmpnei	zero,r16,8506
80084578:	80085020 	cmpeqi	zero,r16,8512
8008457c:	80084ef4 	orhi	zero,r16,8507
80084580:	80085020 	cmpeqi	zero,r16,8512
80084584:	80085020 	cmpeqi	zero,r16,8512
80084588:	80084f04 	addi	zero,r16,8508
8008458c:	d9003117 	ldw	r4,196(sp)
80084590:	d8802d15 	stw	r2,180(sp)
80084594:	0109c83a 	sub	r4,zero,r4
80084598:	d9003115 	stw	r4,196(sp)
8008459c:	94800114 	ori	r18,r18,4
800845a0:	ac400007 	ldb	r17,0(r21)
800845a4:	003f9706 	br	80084404 <___vfprintf_internal_r+0x184>
800845a8:	00800c04 	movi	r2,48
800845ac:	d9002d17 	ldw	r4,180(sp)
800845b0:	d9402917 	ldw	r5,164(sp)
800845b4:	d8802705 	stb	r2,156(sp)
800845b8:	00801e04 	movi	r2,120
800845bc:	d8802745 	stb	r2,157(sp)
800845c0:	d8002785 	stb	zero,158(sp)
800845c4:	20c00104 	addi	r3,r4,4
800845c8:	24c00017 	ldw	r19,0(r4)
800845cc:	002d883a 	mov	r22,zero
800845d0:	90800094 	ori	r2,r18,2
800845d4:	28029a16 	blt	r5,zero,80085040 <___vfprintf_internal_r+0xdc0>
800845d8:	00bfdfc4 	movi	r2,-129
800845dc:	90a4703a 	and	r18,r18,r2
800845e0:	d8c02d15 	stw	r3,180(sp)
800845e4:	94800094 	ori	r18,r18,2
800845e8:	9802871e 	bne	r19,zero,80085008 <___vfprintf_internal_r+0xd88>
800845ec:	00a00274 	movhi	r2,32777
800845f0:	109a7904 	addi	r2,r2,27108
800845f4:	d8803915 	stw	r2,228(sp)
800845f8:	04401e04 	movi	r17,120
800845fc:	d8802917 	ldw	r2,164(sp)
80084600:	0039883a 	mov	fp,zero
80084604:	1001e926 	beq	r2,zero,80084dac <___vfprintf_internal_r+0xb2c>
80084608:	0027883a 	mov	r19,zero
8008460c:	002d883a 	mov	r22,zero
80084610:	00020506 	br	80084e28 <___vfprintf_internal_r+0xba8>
80084614:	d9002c17 	ldw	r4,176(sp)
80084618:	b80b883a 	mov	r5,r23
8008461c:	00866740 	call	80086674 <__swsetup_r>
80084620:	1005ac1e 	bne	r2,zero,80085cd4 <___vfprintf_internal_r+0x1a54>
80084624:	b880030b 	ldhu	r2,12(r23)
80084628:	00c00284 	movi	r3,10
8008462c:	1080068c 	andi	r2,r2,26
80084630:	10ff3c1e 	bne	r2,r3,80084324 <___vfprintf_internal_r+0xa4>
80084634:	b880038f 	ldh	r2,14(r23)
80084638:	103f3a16 	blt	r2,zero,80084324 <___vfprintf_internal_r+0xa4>
8008463c:	d9c02d17 	ldw	r7,180(sp)
80084640:	d9002c17 	ldw	r4,176(sp)
80084644:	a80d883a 	mov	r6,r21
80084648:	b80b883a 	mov	r5,r23
8008464c:	00864940 	call	80086494 <__sbprintf>
80084650:	00001106 	br	80084698 <___vfprintf_internal_r+0x418>
80084654:	d9002c17 	ldw	r4,176(sp)
80084658:	d9801e04 	addi	r6,sp,120
8008465c:	b80b883a 	mov	r5,r23
80084660:	008cf9c0 	call	8008cf9c <__sprint_r>
80084664:	1000081e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80084668:	da000404 	addi	r8,sp,16
8008466c:	003f5306 	br	800843bc <___vfprintf_internal_r+0x13c>
80084670:	d8802017 	ldw	r2,128(sp)
80084674:	10000426 	beq	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80084678:	d9002c17 	ldw	r4,176(sp)
8008467c:	d9801e04 	addi	r6,sp,120
80084680:	b80b883a 	mov	r5,r23
80084684:	008cf9c0 	call	8008cf9c <__sprint_r>
80084688:	b880030b 	ldhu	r2,12(r23)
8008468c:	1080100c 	andi	r2,r2,64
80084690:	1005901e 	bne	r2,zero,80085cd4 <___vfprintf_internal_r+0x1a54>
80084694:	d8802f17 	ldw	r2,188(sp)
80084698:	dfc04717 	ldw	ra,284(sp)
8008469c:	df004617 	ldw	fp,280(sp)
800846a0:	ddc04517 	ldw	r23,276(sp)
800846a4:	dd804417 	ldw	r22,272(sp)
800846a8:	dd404317 	ldw	r21,268(sp)
800846ac:	dd004217 	ldw	r20,264(sp)
800846b0:	dcc04117 	ldw	r19,260(sp)
800846b4:	dc804017 	ldw	r18,256(sp)
800846b8:	dc403f17 	ldw	r17,252(sp)
800846bc:	dc003e17 	ldw	r16,248(sp)
800846c0:	dec04804 	addi	sp,sp,288
800846c4:	f800283a 	ret
800846c8:	d9002c17 	ldw	r4,176(sp)
800846cc:	00886480 	call	80088648 <__sinit>
800846d0:	003f0406 	br	800842e4 <___vfprintf_internal_r+0x64>
800846d4:	d8802d17 	ldw	r2,180(sp)
800846d8:	d9002d17 	ldw	r4,180(sp)
800846dc:	10800017 	ldw	r2,0(r2)
800846e0:	d8803115 	stw	r2,196(sp)
800846e4:	20800104 	addi	r2,r4,4
800846e8:	d9003117 	ldw	r4,196(sp)
800846ec:	203fa716 	blt	r4,zero,8008458c <___vfprintf_internal_r+0x30c>
800846f0:	d8802d15 	stw	r2,180(sp)
800846f4:	ac400007 	ldb	r17,0(r21)
800846f8:	003f4206 	br	80084404 <___vfprintf_internal_r+0x184>
800846fc:	ac400007 	ldb	r17,0(r21)
80084700:	aac00044 	addi	r11,r21,1
80084704:	8a872826 	beq	r17,r10,800863a8 <___vfprintf_internal_r+0x2128>
80084708:	88bff404 	addi	r2,r17,-48
8008470c:	0009883a 	mov	r4,zero
80084710:	30867d36 	bltu	r6,r2,80086108 <___vfprintf_internal_r+0x1e88>
80084714:	5c400007 	ldb	r17,0(r11)
80084718:	210002a4 	muli	r4,r4,10
8008471c:	5d400044 	addi	r21,r11,1
80084720:	a817883a 	mov	r11,r21
80084724:	2089883a 	add	r4,r4,r2
80084728:	88bff404 	addi	r2,r17,-48
8008472c:	30bff92e 	bgeu	r6,r2,80084714 <___vfprintf_internal_r+0x494>
80084730:	2005c916 	blt	r4,zero,80085e58 <___vfprintf_internal_r+0x1bd8>
80084734:	d9002915 	stw	r4,164(sp)
80084738:	003f3306 	br	80084408 <___vfprintf_internal_r+0x188>
8008473c:	94802014 	ori	r18,r18,128
80084740:	ac400007 	ldb	r17,0(r21)
80084744:	003f2f06 	br	80084404 <___vfprintf_internal_r+0x184>
80084748:	a809883a 	mov	r4,r21
8008474c:	d8003115 	stw	zero,196(sp)
80084750:	88bff404 	addi	r2,r17,-48
80084754:	0017883a 	mov	r11,zero
80084758:	24400007 	ldb	r17,0(r4)
8008475c:	5ac002a4 	muli	r11,r11,10
80084760:	ad400044 	addi	r21,r21,1
80084764:	a809883a 	mov	r4,r21
80084768:	12d7883a 	add	r11,r2,r11
8008476c:	88bff404 	addi	r2,r17,-48
80084770:	30bff92e 	bgeu	r6,r2,80084758 <___vfprintf_internal_r+0x4d8>
80084774:	dac03115 	stw	r11,196(sp)
80084778:	003f2306 	br	80084408 <___vfprintf_internal_r+0x188>
8008477c:	18c03fcc 	andi	r3,r3,255
80084780:	18072b1e 	bne	r3,zero,80086430 <___vfprintf_internal_r+0x21b0>
80084784:	94800414 	ori	r18,r18,16
80084788:	9080080c 	andi	r2,r18,32
8008478c:	10037b26 	beq	r2,zero,8008557c <___vfprintf_internal_r+0x12fc>
80084790:	d9402d17 	ldw	r5,180(sp)
80084794:	28800117 	ldw	r2,4(r5)
80084798:	2cc00017 	ldw	r19,0(r5)
8008479c:	29400204 	addi	r5,r5,8
800847a0:	d9402d15 	stw	r5,180(sp)
800847a4:	102d883a 	mov	r22,r2
800847a8:	10044b16 	blt	r2,zero,800858d8 <___vfprintf_internal_r+0x1658>
800847ac:	d9402917 	ldw	r5,164(sp)
800847b0:	df002783 	ldbu	fp,158(sp)
800847b4:	2803bc16 	blt	r5,zero,800856a8 <___vfprintf_internal_r+0x1428>
800847b8:	00ffdfc4 	movi	r3,-129
800847bc:	9d84b03a 	or	r2,r19,r22
800847c0:	90e4703a 	and	r18,r18,r3
800847c4:	10017726 	beq	r2,zero,80084da4 <___vfprintf_internal_r+0xb24>
800847c8:	b0038326 	beq	r22,zero,800855d8 <___vfprintf_internal_r+0x1358>
800847cc:	dc402a15 	stw	r17,168(sp)
800847d0:	dc001e04 	addi	r16,sp,120
800847d4:	b023883a 	mov	r17,r22
800847d8:	402d883a 	mov	r22,r8
800847dc:	9809883a 	mov	r4,r19
800847e0:	880b883a 	mov	r5,r17
800847e4:	01800284 	movi	r6,10
800847e8:	000f883a 	mov	r7,zero
800847ec:	008f3940 	call	8008f394 <__umoddi3>
800847f0:	10800c04 	addi	r2,r2,48
800847f4:	843fffc4 	addi	r16,r16,-1
800847f8:	9809883a 	mov	r4,r19
800847fc:	880b883a 	mov	r5,r17
80084800:	80800005 	stb	r2,0(r16)
80084804:	01800284 	movi	r6,10
80084808:	000f883a 	mov	r7,zero
8008480c:	008ee1c0 	call	8008ee1c <__udivdi3>
80084810:	1027883a 	mov	r19,r2
80084814:	10c4b03a 	or	r2,r2,r3
80084818:	1823883a 	mov	r17,r3
8008481c:	103fef1e 	bne	r2,zero,800847dc <___vfprintf_internal_r+0x55c>
80084820:	d8c02817 	ldw	r3,160(sp)
80084824:	dc402a17 	ldw	r17,168(sp)
80084828:	b011883a 	mov	r8,r22
8008482c:	1c07c83a 	sub	r3,r3,r16
80084830:	d8c02e15 	stw	r3,184(sp)
80084834:	00005906 	br	8008499c <___vfprintf_internal_r+0x71c>
80084838:	18c03fcc 	andi	r3,r3,255
8008483c:	1806fa1e 	bne	r3,zero,80086428 <___vfprintf_internal_r+0x21a8>
80084840:	9080020c 	andi	r2,r18,8
80084844:	10048a26 	beq	r2,zero,80085a70 <___vfprintf_internal_r+0x17f0>
80084848:	d8c02d17 	ldw	r3,180(sp)
8008484c:	d9002d17 	ldw	r4,180(sp)
80084850:	d9402d17 	ldw	r5,180(sp)
80084854:	18c00017 	ldw	r3,0(r3)
80084858:	21000117 	ldw	r4,4(r4)
8008485c:	29400204 	addi	r5,r5,8
80084860:	d8c03615 	stw	r3,216(sp)
80084864:	d9003815 	stw	r4,224(sp)
80084868:	d9402d15 	stw	r5,180(sp)
8008486c:	d9003617 	ldw	r4,216(sp)
80084870:	d9403817 	ldw	r5,224(sp)
80084874:	da003d15 	stw	r8,244(sp)
80084878:	04000044 	movi	r16,1
8008487c:	008b7b40 	call	8008b7b4 <__fpclassifyd>
80084880:	da003d17 	ldw	r8,244(sp)
80084884:	14041f1e 	bne	r2,r16,80085904 <___vfprintf_internal_r+0x1684>
80084888:	d9003617 	ldw	r4,216(sp)
8008488c:	d9403817 	ldw	r5,224(sp)
80084890:	000d883a 	mov	r6,zero
80084894:	000f883a 	mov	r7,zero
80084898:	0090c9c0 	call	80090c9c <__ledf2>
8008489c:	da003d17 	ldw	r8,244(sp)
800848a0:	1005be16 	blt	r2,zero,80085f9c <___vfprintf_internal_r+0x1d1c>
800848a4:	df002783 	ldbu	fp,158(sp)
800848a8:	008011c4 	movi	r2,71
800848ac:	1445330e 	bge	r2,r17,80085d7c <___vfprintf_internal_r+0x1afc>
800848b0:	04200274 	movhi	r16,32777
800848b4:	841a7104 	addi	r16,r16,27076
800848b8:	00c000c4 	movi	r3,3
800848bc:	00bfdfc4 	movi	r2,-129
800848c0:	d8c02a15 	stw	r3,168(sp)
800848c4:	90a4703a 	and	r18,r18,r2
800848c8:	d8c02e15 	stw	r3,184(sp)
800848cc:	d8002915 	stw	zero,164(sp)
800848d0:	d8003215 	stw	zero,200(sp)
800848d4:	00003706 	br	800849b4 <___vfprintf_internal_r+0x734>
800848d8:	94800214 	ori	r18,r18,8
800848dc:	ac400007 	ldb	r17,0(r21)
800848e0:	003ec806 	br	80084404 <___vfprintf_internal_r+0x184>
800848e4:	18c03fcc 	andi	r3,r3,255
800848e8:	1806db1e 	bne	r3,zero,80086458 <___vfprintf_internal_r+0x21d8>
800848ec:	94800414 	ori	r18,r18,16
800848f0:	9080080c 	andi	r2,r18,32
800848f4:	1002d826 	beq	r2,zero,80085458 <___vfprintf_internal_r+0x11d8>
800848f8:	d9402d17 	ldw	r5,180(sp)
800848fc:	d8c02917 	ldw	r3,164(sp)
80084900:	d8002785 	stb	zero,158(sp)
80084904:	28800204 	addi	r2,r5,8
80084908:	2cc00017 	ldw	r19,0(r5)
8008490c:	2d800117 	ldw	r22,4(r5)
80084910:	18048f16 	blt	r3,zero,80085b50 <___vfprintf_internal_r+0x18d0>
80084914:	013fdfc4 	movi	r4,-129
80084918:	9d86b03a 	or	r3,r19,r22
8008491c:	d8802d15 	stw	r2,180(sp)
80084920:	9124703a 	and	r18,r18,r4
80084924:	1802d91e 	bne	r3,zero,8008548c <___vfprintf_internal_r+0x120c>
80084928:	d8c02917 	ldw	r3,164(sp)
8008492c:	0039883a 	mov	fp,zero
80084930:	1805c326 	beq	r3,zero,80086040 <___vfprintf_internal_r+0x1dc0>
80084934:	0027883a 	mov	r19,zero
80084938:	002d883a 	mov	r22,zero
8008493c:	dc001e04 	addi	r16,sp,120
80084940:	9806d0fa 	srli	r3,r19,3
80084944:	b008977a 	slli	r4,r22,29
80084948:	b02cd0fa 	srli	r22,r22,3
8008494c:	9cc001cc 	andi	r19,r19,7
80084950:	98800c04 	addi	r2,r19,48
80084954:	843fffc4 	addi	r16,r16,-1
80084958:	20e6b03a 	or	r19,r4,r3
8008495c:	80800005 	stb	r2,0(r16)
80084960:	9d86b03a 	or	r3,r19,r22
80084964:	183ff61e 	bne	r3,zero,80084940 <___vfprintf_internal_r+0x6c0>
80084968:	90c0004c 	andi	r3,r18,1
8008496c:	18013b26 	beq	r3,zero,80084e5c <___vfprintf_internal_r+0xbdc>
80084970:	10803fcc 	andi	r2,r2,255
80084974:	1080201c 	xori	r2,r2,128
80084978:	10bfe004 	addi	r2,r2,-128
8008497c:	00c00c04 	movi	r3,48
80084980:	10c13626 	beq	r2,r3,80084e5c <___vfprintf_internal_r+0xbdc>
80084984:	80ffffc5 	stb	r3,-1(r16)
80084988:	d8c02817 	ldw	r3,160(sp)
8008498c:	80bfffc4 	addi	r2,r16,-1
80084990:	1021883a 	mov	r16,r2
80084994:	1887c83a 	sub	r3,r3,r2
80084998:	d8c02e15 	stw	r3,184(sp)
8008499c:	d8802e17 	ldw	r2,184(sp)
800849a0:	d9002917 	ldw	r4,164(sp)
800849a4:	1100010e 	bge	r2,r4,800849ac <___vfprintf_internal_r+0x72c>
800849a8:	2005883a 	mov	r2,r4
800849ac:	d8802a15 	stw	r2,168(sp)
800849b0:	d8003215 	stw	zero,200(sp)
800849b4:	e7003fcc 	andi	fp,fp,255
800849b8:	e700201c 	xori	fp,fp,128
800849bc:	e73fe004 	addi	fp,fp,-128
800849c0:	e0000326 	beq	fp,zero,800849d0 <___vfprintf_internal_r+0x750>
800849c4:	d8c02a17 	ldw	r3,168(sp)
800849c8:	18c00044 	addi	r3,r3,1
800849cc:	d8c02a15 	stw	r3,168(sp)
800849d0:	90c0008c 	andi	r3,r18,2
800849d4:	d8c02b15 	stw	r3,172(sp)
800849d8:	18000326 	beq	r3,zero,800849e8 <___vfprintf_internal_r+0x768>
800849dc:	d8c02a17 	ldw	r3,168(sp)
800849e0:	18c00084 	addi	r3,r3,2
800849e4:	d8c02a15 	stw	r3,168(sp)
800849e8:	90c0210c 	andi	r3,r18,132
800849ec:	d8c03015 	stw	r3,192(sp)
800849f0:	1801a31e 	bne	r3,zero,80085080 <___vfprintf_internal_r+0xe00>
800849f4:	d9003117 	ldw	r4,196(sp)
800849f8:	d8c02a17 	ldw	r3,168(sp)
800849fc:	20e7c83a 	sub	r19,r4,r3
80084a00:	04c19f0e 	bge	zero,r19,80085080 <___vfprintf_internal_r+0xe00>
80084a04:	02400404 	movi	r9,16
80084a08:	d8c02017 	ldw	r3,128(sp)
80084a0c:	d8801f17 	ldw	r2,124(sp)
80084a10:	4cc50d0e 	bge	r9,r19,80085e48 <___vfprintf_internal_r+0x1bc8>
80084a14:	01600274 	movhi	r5,32777
80084a18:	295a8c84 	addi	r5,r5,27186
80084a1c:	dc403b15 	stw	r17,236(sp)
80084a20:	d9403515 	stw	r5,212(sp)
80084a24:	9823883a 	mov	r17,r19
80084a28:	482d883a 	mov	r22,r9
80084a2c:	9027883a 	mov	r19,r18
80084a30:	070001c4 	movi	fp,7
80084a34:	8025883a 	mov	r18,r16
80084a38:	dc002c17 	ldw	r16,176(sp)
80084a3c:	00000306 	br	80084a4c <___vfprintf_internal_r+0x7cc>
80084a40:	8c7ffc04 	addi	r17,r17,-16
80084a44:	42000204 	addi	r8,r8,8
80084a48:	b440130e 	bge	r22,r17,80084a98 <___vfprintf_internal_r+0x818>
80084a4c:	01200274 	movhi	r4,32777
80084a50:	18c00404 	addi	r3,r3,16
80084a54:	10800044 	addi	r2,r2,1
80084a58:	211a8c84 	addi	r4,r4,27186
80084a5c:	41000015 	stw	r4,0(r8)
80084a60:	45800115 	stw	r22,4(r8)
80084a64:	d8c02015 	stw	r3,128(sp)
80084a68:	d8801f15 	stw	r2,124(sp)
80084a6c:	e0bff40e 	bge	fp,r2,80084a40 <___vfprintf_internal_r+0x7c0>
80084a70:	d9801e04 	addi	r6,sp,120
80084a74:	b80b883a 	mov	r5,r23
80084a78:	8009883a 	mov	r4,r16
80084a7c:	008cf9c0 	call	8008cf9c <__sprint_r>
80084a80:	103f011e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80084a84:	8c7ffc04 	addi	r17,r17,-16
80084a88:	d8c02017 	ldw	r3,128(sp)
80084a8c:	d8801f17 	ldw	r2,124(sp)
80084a90:	da000404 	addi	r8,sp,16
80084a94:	b47fed16 	blt	r22,r17,80084a4c <___vfprintf_internal_r+0x7cc>
80084a98:	9021883a 	mov	r16,r18
80084a9c:	9825883a 	mov	r18,r19
80084aa0:	8827883a 	mov	r19,r17
80084aa4:	dc403b17 	ldw	r17,236(sp)
80084aa8:	d9403517 	ldw	r5,212(sp)
80084aac:	98c7883a 	add	r3,r19,r3
80084ab0:	10800044 	addi	r2,r2,1
80084ab4:	41400015 	stw	r5,0(r8)
80084ab8:	44c00115 	stw	r19,4(r8)
80084abc:	d8c02015 	stw	r3,128(sp)
80084ac0:	d8801f15 	stw	r2,124(sp)
80084ac4:	010001c4 	movi	r4,7
80084ac8:	2082a316 	blt	r4,r2,80085558 <___vfprintf_internal_r+0x12d8>
80084acc:	df002787 	ldb	fp,158(sp)
80084ad0:	42000204 	addi	r8,r8,8
80084ad4:	e0000c26 	beq	fp,zero,80084b08 <___vfprintf_internal_r+0x888>
80084ad8:	d8801f17 	ldw	r2,124(sp)
80084adc:	d9002784 	addi	r4,sp,158
80084ae0:	18c00044 	addi	r3,r3,1
80084ae4:	10800044 	addi	r2,r2,1
80084ae8:	41000015 	stw	r4,0(r8)
80084aec:	01000044 	movi	r4,1
80084af0:	41000115 	stw	r4,4(r8)
80084af4:	d8c02015 	stw	r3,128(sp)
80084af8:	d8801f15 	stw	r2,124(sp)
80084afc:	010001c4 	movi	r4,7
80084b00:	20823c16 	blt	r4,r2,800853f4 <___vfprintf_internal_r+0x1174>
80084b04:	42000204 	addi	r8,r8,8
80084b08:	d8802b17 	ldw	r2,172(sp)
80084b0c:	10000c26 	beq	r2,zero,80084b40 <___vfprintf_internal_r+0x8c0>
80084b10:	d8801f17 	ldw	r2,124(sp)
80084b14:	d9002704 	addi	r4,sp,156
80084b18:	18c00084 	addi	r3,r3,2
80084b1c:	10800044 	addi	r2,r2,1
80084b20:	41000015 	stw	r4,0(r8)
80084b24:	01000084 	movi	r4,2
80084b28:	41000115 	stw	r4,4(r8)
80084b2c:	d8c02015 	stw	r3,128(sp)
80084b30:	d8801f15 	stw	r2,124(sp)
80084b34:	010001c4 	movi	r4,7
80084b38:	20823616 	blt	r4,r2,80085414 <___vfprintf_internal_r+0x1194>
80084b3c:	42000204 	addi	r8,r8,8
80084b40:	d9003017 	ldw	r4,192(sp)
80084b44:	00802004 	movi	r2,128
80084b48:	20819926 	beq	r4,r2,800851b0 <___vfprintf_internal_r+0xf30>
80084b4c:	d9402917 	ldw	r5,164(sp)
80084b50:	d8802e17 	ldw	r2,184(sp)
80084b54:	28adc83a 	sub	r22,r5,r2
80084b58:	0580310e 	bge	zero,r22,80084c20 <___vfprintf_internal_r+0x9a0>
80084b5c:	07000404 	movi	fp,16
80084b60:	d8801f17 	ldw	r2,124(sp)
80084b64:	e584140e 	bge	fp,r22,80085bb8 <___vfprintf_internal_r+0x1938>
80084b68:	01600274 	movhi	r5,32777
80084b6c:	295a8884 	addi	r5,r5,27170
80084b70:	dc402915 	stw	r17,164(sp)
80084b74:	d9402b15 	stw	r5,172(sp)
80084b78:	b023883a 	mov	r17,r22
80084b7c:	04c001c4 	movi	r19,7
80084b80:	a82d883a 	mov	r22,r21
80084b84:	902b883a 	mov	r21,r18
80084b88:	8025883a 	mov	r18,r16
80084b8c:	dc002c17 	ldw	r16,176(sp)
80084b90:	00000306 	br	80084ba0 <___vfprintf_internal_r+0x920>
80084b94:	8c7ffc04 	addi	r17,r17,-16
80084b98:	42000204 	addi	r8,r8,8
80084b9c:	e440110e 	bge	fp,r17,80084be4 <___vfprintf_internal_r+0x964>
80084ba0:	18c00404 	addi	r3,r3,16
80084ba4:	10800044 	addi	r2,r2,1
80084ba8:	45000015 	stw	r20,0(r8)
80084bac:	47000115 	stw	fp,4(r8)
80084bb0:	d8c02015 	stw	r3,128(sp)
80084bb4:	d8801f15 	stw	r2,124(sp)
80084bb8:	98bff60e 	bge	r19,r2,80084b94 <___vfprintf_internal_r+0x914>
80084bbc:	d9801e04 	addi	r6,sp,120
80084bc0:	b80b883a 	mov	r5,r23
80084bc4:	8009883a 	mov	r4,r16
80084bc8:	008cf9c0 	call	8008cf9c <__sprint_r>
80084bcc:	103eae1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80084bd0:	8c7ffc04 	addi	r17,r17,-16
80084bd4:	d8c02017 	ldw	r3,128(sp)
80084bd8:	d8801f17 	ldw	r2,124(sp)
80084bdc:	da000404 	addi	r8,sp,16
80084be0:	e47fef16 	blt	fp,r17,80084ba0 <___vfprintf_internal_r+0x920>
80084be4:	9021883a 	mov	r16,r18
80084be8:	a825883a 	mov	r18,r21
80084bec:	b02b883a 	mov	r21,r22
80084bf0:	882d883a 	mov	r22,r17
80084bf4:	dc402917 	ldw	r17,164(sp)
80084bf8:	d9002b17 	ldw	r4,172(sp)
80084bfc:	1d87883a 	add	r3,r3,r22
80084c00:	10800044 	addi	r2,r2,1
80084c04:	41000015 	stw	r4,0(r8)
80084c08:	45800115 	stw	r22,4(r8)
80084c0c:	d8c02015 	stw	r3,128(sp)
80084c10:	d8801f15 	stw	r2,124(sp)
80084c14:	010001c4 	movi	r4,7
80084c18:	2081ee16 	blt	r4,r2,800853d4 <___vfprintf_internal_r+0x1154>
80084c1c:	42000204 	addi	r8,r8,8
80084c20:	9080400c 	andi	r2,r18,256
80084c24:	1001181e 	bne	r2,zero,80085088 <___vfprintf_internal_r+0xe08>
80084c28:	d9402e17 	ldw	r5,184(sp)
80084c2c:	d8801f17 	ldw	r2,124(sp)
80084c30:	44000015 	stw	r16,0(r8)
80084c34:	1947883a 	add	r3,r3,r5
80084c38:	10800044 	addi	r2,r2,1
80084c3c:	41400115 	stw	r5,4(r8)
80084c40:	d8c02015 	stw	r3,128(sp)
80084c44:	d8801f15 	stw	r2,124(sp)
80084c48:	010001c4 	movi	r4,7
80084c4c:	2081d316 	blt	r4,r2,8008539c <___vfprintf_internal_r+0x111c>
80084c50:	42000204 	addi	r8,r8,8
80084c54:	9480010c 	andi	r18,r18,4
80084c58:	90003226 	beq	r18,zero,80084d24 <___vfprintf_internal_r+0xaa4>
80084c5c:	d9403117 	ldw	r5,196(sp)
80084c60:	d8802a17 	ldw	r2,168(sp)
80084c64:	28a1c83a 	sub	r16,r5,r2
80084c68:	04002e0e 	bge	zero,r16,80084d24 <___vfprintf_internal_r+0xaa4>
80084c6c:	04400404 	movi	r17,16
80084c70:	d8801f17 	ldw	r2,124(sp)
80084c74:	8c04a20e 	bge	r17,r16,80085f00 <___vfprintf_internal_r+0x1c80>
80084c78:	01600274 	movhi	r5,32777
80084c7c:	295a8c84 	addi	r5,r5,27186
80084c80:	d9403515 	stw	r5,212(sp)
80084c84:	048001c4 	movi	r18,7
80084c88:	dcc02c17 	ldw	r19,176(sp)
80084c8c:	00000306 	br	80084c9c <___vfprintf_internal_r+0xa1c>
80084c90:	843ffc04 	addi	r16,r16,-16
80084c94:	42000204 	addi	r8,r8,8
80084c98:	8c00130e 	bge	r17,r16,80084ce8 <___vfprintf_internal_r+0xa68>
80084c9c:	01200274 	movhi	r4,32777
80084ca0:	18c00404 	addi	r3,r3,16
80084ca4:	10800044 	addi	r2,r2,1
80084ca8:	211a8c84 	addi	r4,r4,27186
80084cac:	41000015 	stw	r4,0(r8)
80084cb0:	44400115 	stw	r17,4(r8)
80084cb4:	d8c02015 	stw	r3,128(sp)
80084cb8:	d8801f15 	stw	r2,124(sp)
80084cbc:	90bff40e 	bge	r18,r2,80084c90 <___vfprintf_internal_r+0xa10>
80084cc0:	d9801e04 	addi	r6,sp,120
80084cc4:	b80b883a 	mov	r5,r23
80084cc8:	9809883a 	mov	r4,r19
80084ccc:	008cf9c0 	call	8008cf9c <__sprint_r>
80084cd0:	103e6d1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80084cd4:	843ffc04 	addi	r16,r16,-16
80084cd8:	d8c02017 	ldw	r3,128(sp)
80084cdc:	d8801f17 	ldw	r2,124(sp)
80084ce0:	da000404 	addi	r8,sp,16
80084ce4:	8c3fed16 	blt	r17,r16,80084c9c <___vfprintf_internal_r+0xa1c>
80084ce8:	d9403517 	ldw	r5,212(sp)
80084cec:	1c07883a 	add	r3,r3,r16
80084cf0:	10800044 	addi	r2,r2,1
80084cf4:	41400015 	stw	r5,0(r8)
80084cf8:	44000115 	stw	r16,4(r8)
80084cfc:	d8c02015 	stw	r3,128(sp)
80084d00:	d8801f15 	stw	r2,124(sp)
80084d04:	010001c4 	movi	r4,7
80084d08:	2080060e 	bge	r4,r2,80084d24 <___vfprintf_internal_r+0xaa4>
80084d0c:	d9002c17 	ldw	r4,176(sp)
80084d10:	d9801e04 	addi	r6,sp,120
80084d14:	b80b883a 	mov	r5,r23
80084d18:	008cf9c0 	call	8008cf9c <__sprint_r>
80084d1c:	103e5a1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80084d20:	d8c02017 	ldw	r3,128(sp)
80084d24:	d8803117 	ldw	r2,196(sp)
80084d28:	d9002a17 	ldw	r4,168(sp)
80084d2c:	1100010e 	bge	r2,r4,80084d34 <___vfprintf_internal_r+0xab4>
80084d30:	2005883a 	mov	r2,r4
80084d34:	d9402f17 	ldw	r5,188(sp)
80084d38:	288b883a 	add	r5,r5,r2
80084d3c:	d9402f15 	stw	r5,188(sp)
80084d40:	18019e1e 	bne	r3,zero,800853bc <___vfprintf_internal_r+0x113c>
80084d44:	a8800007 	ldb	r2,0(r21)
80084d48:	d8001f15 	stw	zero,124(sp)
80084d4c:	da000404 	addi	r8,sp,16
80084d50:	103d851e 	bne	r2,zero,80084368 <___vfprintf_internal_r+0xe8>
80084d54:	a821883a 	mov	r16,r21
80084d58:	003d9b06 	br	800843c8 <___vfprintf_internal_r+0x148>
80084d5c:	18c03fcc 	andi	r3,r3,255
80084d60:	1805c11e 	bne	r3,zero,80086468 <___vfprintf_internal_r+0x21e8>
80084d64:	94800414 	ori	r18,r18,16
80084d68:	9080080c 	andi	r2,r18,32
80084d6c:	10020c26 	beq	r2,zero,800855a0 <___vfprintf_internal_r+0x1320>
80084d70:	d8802d17 	ldw	r2,180(sp)
80084d74:	d9002917 	ldw	r4,164(sp)
80084d78:	d8002785 	stb	zero,158(sp)
80084d7c:	10c00204 	addi	r3,r2,8
80084d80:	14c00017 	ldw	r19,0(r2)
80084d84:	15800117 	ldw	r22,4(r2)
80084d88:	20040f16 	blt	r4,zero,80085dc8 <___vfprintf_internal_r+0x1b48>
80084d8c:	013fdfc4 	movi	r4,-129
80084d90:	9d84b03a 	or	r2,r19,r22
80084d94:	d8c02d15 	stw	r3,180(sp)
80084d98:	9124703a 	and	r18,r18,r4
80084d9c:	0039883a 	mov	fp,zero
80084da0:	103e891e 	bne	r2,zero,800847c8 <___vfprintf_internal_r+0x548>
80084da4:	d9002917 	ldw	r4,164(sp)
80084da8:	2002c11e 	bne	r4,zero,800858b0 <___vfprintf_internal_r+0x1630>
80084dac:	d8002915 	stw	zero,164(sp)
80084db0:	d8002e15 	stw	zero,184(sp)
80084db4:	dc001e04 	addi	r16,sp,120
80084db8:	003ef806 	br	8008499c <___vfprintf_internal_r+0x71c>
80084dbc:	18c03fcc 	andi	r3,r3,255
80084dc0:	18059d1e 	bne	r3,zero,80086438 <___vfprintf_internal_r+0x21b8>
80084dc4:	01600274 	movhi	r5,32777
80084dc8:	295a7404 	addi	r5,r5,27088
80084dcc:	d9403915 	stw	r5,228(sp)
80084dd0:	9080080c 	andi	r2,r18,32
80084dd4:	10005226 	beq	r2,zero,80084f20 <___vfprintf_internal_r+0xca0>
80084dd8:	d8802d17 	ldw	r2,180(sp)
80084ddc:	14c00017 	ldw	r19,0(r2)
80084de0:	15800117 	ldw	r22,4(r2)
80084de4:	10800204 	addi	r2,r2,8
80084de8:	d8802d15 	stw	r2,180(sp)
80084dec:	9080004c 	andi	r2,r18,1
80084df0:	10019026 	beq	r2,zero,80085434 <___vfprintf_internal_r+0x11b4>
80084df4:	9d84b03a 	or	r2,r19,r22
80084df8:	10036926 	beq	r2,zero,80085ba0 <___vfprintf_internal_r+0x1920>
80084dfc:	d8c02917 	ldw	r3,164(sp)
80084e00:	00800c04 	movi	r2,48
80084e04:	d8802705 	stb	r2,156(sp)
80084e08:	dc402745 	stb	r17,157(sp)
80084e0c:	d8002785 	stb	zero,158(sp)
80084e10:	90800094 	ori	r2,r18,2
80084e14:	18045d16 	blt	r3,zero,80085f8c <___vfprintf_internal_r+0x1d0c>
80084e18:	00bfdfc4 	movi	r2,-129
80084e1c:	90a4703a 	and	r18,r18,r2
80084e20:	94800094 	ori	r18,r18,2
80084e24:	0039883a 	mov	fp,zero
80084e28:	d9003917 	ldw	r4,228(sp)
80084e2c:	dc001e04 	addi	r16,sp,120
80084e30:	988003cc 	andi	r2,r19,15
80084e34:	b006973a 	slli	r3,r22,28
80084e38:	2085883a 	add	r2,r4,r2
80084e3c:	9826d13a 	srli	r19,r19,4
80084e40:	10800003 	ldbu	r2,0(r2)
80084e44:	b02cd13a 	srli	r22,r22,4
80084e48:	843fffc4 	addi	r16,r16,-1
80084e4c:	1ce6b03a 	or	r19,r3,r19
80084e50:	80800005 	stb	r2,0(r16)
80084e54:	9d84b03a 	or	r2,r19,r22
80084e58:	103ff51e 	bne	r2,zero,80084e30 <___vfprintf_internal_r+0xbb0>
80084e5c:	d8c02817 	ldw	r3,160(sp)
80084e60:	1c07c83a 	sub	r3,r3,r16
80084e64:	d8c02e15 	stw	r3,184(sp)
80084e68:	003ecc06 	br	8008499c <___vfprintf_internal_r+0x71c>
80084e6c:	18c03fcc 	andi	r3,r3,255
80084e70:	183e9f26 	beq	r3,zero,800848f0 <___vfprintf_internal_r+0x670>
80084e74:	d9c02785 	stb	r7,158(sp)
80084e78:	003e9d06 	br	800848f0 <___vfprintf_internal_r+0x670>
80084e7c:	00c00044 	movi	r3,1
80084e80:	01c00ac4 	movi	r7,43
80084e84:	ac400007 	ldb	r17,0(r21)
80084e88:	003d5e06 	br	80084404 <___vfprintf_internal_r+0x184>
80084e8c:	94800814 	ori	r18,r18,32
80084e90:	ac400007 	ldb	r17,0(r21)
80084e94:	003d5b06 	br	80084404 <___vfprintf_internal_r+0x184>
80084e98:	d8c02d17 	ldw	r3,180(sp)
80084e9c:	d8002785 	stb	zero,158(sp)
80084ea0:	1c000017 	ldw	r16,0(r3)
80084ea4:	1cc00104 	addi	r19,r3,4
80084ea8:	80041926 	beq	r16,zero,80085f10 <___vfprintf_internal_r+0x1c90>
80084eac:	d9002917 	ldw	r4,164(sp)
80084eb0:	2003d016 	blt	r4,zero,80085df4 <___vfprintf_internal_r+0x1b74>
80084eb4:	200d883a 	mov	r6,r4
80084eb8:	000b883a 	mov	r5,zero
80084ebc:	8009883a 	mov	r4,r16
80084ec0:	da003d15 	stw	r8,244(sp)
80084ec4:	0089bb40 	call	80089bb4 <memchr>
80084ec8:	da003d17 	ldw	r8,244(sp)
80084ecc:	10045426 	beq	r2,zero,80086020 <___vfprintf_internal_r+0x1da0>
80084ed0:	1405c83a 	sub	r2,r2,r16
80084ed4:	d8802e15 	stw	r2,184(sp)
80084ed8:	1003cc16 	blt	r2,zero,80085e0c <___vfprintf_internal_r+0x1b8c>
80084edc:	df002783 	ldbu	fp,158(sp)
80084ee0:	d8802a15 	stw	r2,168(sp)
80084ee4:	dcc02d15 	stw	r19,180(sp)
80084ee8:	d8002915 	stw	zero,164(sp)
80084eec:	d8003215 	stw	zero,200(sp)
80084ef0:	003eb006 	br	800849b4 <___vfprintf_internal_r+0x734>
80084ef4:	18c03fcc 	andi	r3,r3,255
80084ef8:	183f9b26 	beq	r3,zero,80084d68 <___vfprintf_internal_r+0xae8>
80084efc:	d9c02785 	stb	r7,158(sp)
80084f00:	003f9906 	br	80084d68 <___vfprintf_internal_r+0xae8>
80084f04:	18c03fcc 	andi	r3,r3,255
80084f08:	1805551e 	bne	r3,zero,80086460 <___vfprintf_internal_r+0x21e0>
80084f0c:	01600274 	movhi	r5,32777
80084f10:	295a7904 	addi	r5,r5,27108
80084f14:	d9403915 	stw	r5,228(sp)
80084f18:	9080080c 	andi	r2,r18,32
80084f1c:	103fae1e 	bne	r2,zero,80084dd8 <___vfprintf_internal_r+0xb58>
80084f20:	9080040c 	andi	r2,r18,16
80084f24:	1002de26 	beq	r2,zero,80085aa0 <___vfprintf_internal_r+0x1820>
80084f28:	d8c02d17 	ldw	r3,180(sp)
80084f2c:	002d883a 	mov	r22,zero
80084f30:	1cc00017 	ldw	r19,0(r3)
80084f34:	18c00104 	addi	r3,r3,4
80084f38:	d8c02d15 	stw	r3,180(sp)
80084f3c:	003fab06 	br	80084dec <___vfprintf_internal_r+0xb6c>
80084f40:	38803fcc 	andi	r2,r7,255
80084f44:	1080201c 	xori	r2,r2,128
80084f48:	10bfe004 	addi	r2,r2,-128
80084f4c:	1002d21e 	bne	r2,zero,80085a98 <___vfprintf_internal_r+0x1818>
80084f50:	00c00044 	movi	r3,1
80084f54:	01c00804 	movi	r7,32
80084f58:	ac400007 	ldb	r17,0(r21)
80084f5c:	003d2906 	br	80084404 <___vfprintf_internal_r+0x184>
80084f60:	94800054 	ori	r18,r18,1
80084f64:	ac400007 	ldb	r17,0(r21)
80084f68:	003d2606 	br	80084404 <___vfprintf_internal_r+0x184>
80084f6c:	18c03fcc 	andi	r3,r3,255
80084f70:	183e0526 	beq	r3,zero,80084788 <___vfprintf_internal_r+0x508>
80084f74:	d9c02785 	stb	r7,158(sp)
80084f78:	003e0306 	br	80084788 <___vfprintf_internal_r+0x508>
80084f7c:	94801014 	ori	r18,r18,64
80084f80:	ac400007 	ldb	r17,0(r21)
80084f84:	003d1f06 	br	80084404 <___vfprintf_internal_r+0x184>
80084f88:	ac400007 	ldb	r17,0(r21)
80084f8c:	8a438726 	beq	r17,r9,80085dac <___vfprintf_internal_r+0x1b2c>
80084f90:	94800414 	ori	r18,r18,16
80084f94:	003d1b06 	br	80084404 <___vfprintf_internal_r+0x184>
80084f98:	18c03fcc 	andi	r3,r3,255
80084f9c:	1805341e 	bne	r3,zero,80086470 <___vfprintf_internal_r+0x21f0>
80084fa0:	9080080c 	andi	r2,r18,32
80084fa4:	1002cd26 	beq	r2,zero,80085adc <___vfprintf_internal_r+0x185c>
80084fa8:	d9402d17 	ldw	r5,180(sp)
80084fac:	d9002f17 	ldw	r4,188(sp)
80084fb0:	28800017 	ldw	r2,0(r5)
80084fb4:	2007d7fa 	srai	r3,r4,31
80084fb8:	29400104 	addi	r5,r5,4
80084fbc:	d9402d15 	stw	r5,180(sp)
80084fc0:	11000015 	stw	r4,0(r2)
80084fc4:	10c00115 	stw	r3,4(r2)
80084fc8:	003ce506 	br	80084360 <___vfprintf_internal_r+0xe0>
80084fcc:	d8c02d17 	ldw	r3,180(sp)
80084fd0:	d9002d17 	ldw	r4,180(sp)
80084fd4:	d8002785 	stb	zero,158(sp)
80084fd8:	18800017 	ldw	r2,0(r3)
80084fdc:	21000104 	addi	r4,r4,4
80084fe0:	00c00044 	movi	r3,1
80084fe4:	d8c02a15 	stw	r3,168(sp)
80084fe8:	d8801405 	stb	r2,80(sp)
80084fec:	d9002d15 	stw	r4,180(sp)
80084ff0:	d8c02e15 	stw	r3,184(sp)
80084ff4:	d8002915 	stw	zero,164(sp)
80084ff8:	d8003215 	stw	zero,200(sp)
80084ffc:	dc001404 	addi	r16,sp,80
80085000:	0039883a 	mov	fp,zero
80085004:	003e7206 	br	800849d0 <___vfprintf_internal_r+0x750>
80085008:	01200274 	movhi	r4,32777
8008500c:	211a7904 	addi	r4,r4,27108
80085010:	0039883a 	mov	fp,zero
80085014:	d9003915 	stw	r4,228(sp)
80085018:	04401e04 	movi	r17,120
8008501c:	003f8206 	br	80084e28 <___vfprintf_internal_r+0xba8>
80085020:	18c03fcc 	andi	r3,r3,255
80085024:	1805061e 	bne	r3,zero,80086440 <___vfprintf_internal_r+0x21c0>
80085028:	883d9126 	beq	r17,zero,80084670 <___vfprintf_internal_r+0x3f0>
8008502c:	00c00044 	movi	r3,1
80085030:	d8c02a15 	stw	r3,168(sp)
80085034:	dc401405 	stb	r17,80(sp)
80085038:	d8002785 	stb	zero,158(sp)
8008503c:	003fec06 	br	80084ff0 <___vfprintf_internal_r+0xd70>
80085040:	01600274 	movhi	r5,32777
80085044:	295a7904 	addi	r5,r5,27108
80085048:	d9403915 	stw	r5,228(sp)
8008504c:	d8c02d15 	stw	r3,180(sp)
80085050:	1025883a 	mov	r18,r2
80085054:	04401e04 	movi	r17,120
80085058:	9d84b03a 	or	r2,r19,r22
8008505c:	1000fc1e 	bne	r2,zero,80085450 <___vfprintf_internal_r+0x11d0>
80085060:	0039883a 	mov	fp,zero
80085064:	00800084 	movi	r2,2
80085068:	10803fcc 	andi	r2,r2,255
8008506c:	00c00044 	movi	r3,1
80085070:	10c20f26 	beq	r2,r3,800858b0 <___vfprintf_internal_r+0x1630>
80085074:	00c00084 	movi	r3,2
80085078:	10fd6326 	beq	r2,r3,80084608 <___vfprintf_internal_r+0x388>
8008507c:	003e2d06 	br	80084934 <___vfprintf_internal_r+0x6b4>
80085080:	d8c02017 	ldw	r3,128(sp)
80085084:	003e9306 	br	80084ad4 <___vfprintf_internal_r+0x854>
80085088:	00801944 	movi	r2,101
8008508c:	14407e0e 	bge	r2,r17,80085288 <___vfprintf_internal_r+0x1008>
80085090:	d9003617 	ldw	r4,216(sp)
80085094:	d9403817 	ldw	r5,224(sp)
80085098:	000d883a 	mov	r6,zero
8008509c:	000f883a 	mov	r7,zero
800850a0:	d8c03c15 	stw	r3,240(sp)
800850a4:	da003d15 	stw	r8,244(sp)
800850a8:	0090c140 	call	80090c14 <__eqdf2>
800850ac:	d8c03c17 	ldw	r3,240(sp)
800850b0:	da003d17 	ldw	r8,244(sp)
800850b4:	1000f71e 	bne	r2,zero,80085494 <___vfprintf_internal_r+0x1214>
800850b8:	d8801f17 	ldw	r2,124(sp)
800850bc:	01200274 	movhi	r4,32777
800850c0:	211a8004 	addi	r4,r4,27136
800850c4:	18c00044 	addi	r3,r3,1
800850c8:	10800044 	addi	r2,r2,1
800850cc:	41000015 	stw	r4,0(r8)
800850d0:	01000044 	movi	r4,1
800850d4:	41000115 	stw	r4,4(r8)
800850d8:	d8c02015 	stw	r3,128(sp)
800850dc:	d8801f15 	stw	r2,124(sp)
800850e0:	010001c4 	movi	r4,7
800850e4:	2082b816 	blt	r4,r2,80085bc8 <___vfprintf_internal_r+0x1948>
800850e8:	42000204 	addi	r8,r8,8
800850ec:	d8802617 	ldw	r2,152(sp)
800850f0:	d9403317 	ldw	r5,204(sp)
800850f4:	11400216 	blt	r2,r5,80085100 <___vfprintf_internal_r+0xe80>
800850f8:	9080004c 	andi	r2,r18,1
800850fc:	103ed526 	beq	r2,zero,80084c54 <___vfprintf_internal_r+0x9d4>
80085100:	d8803717 	ldw	r2,220(sp)
80085104:	d9003417 	ldw	r4,208(sp)
80085108:	d9403717 	ldw	r5,220(sp)
8008510c:	1887883a 	add	r3,r3,r2
80085110:	d8801f17 	ldw	r2,124(sp)
80085114:	41000015 	stw	r4,0(r8)
80085118:	41400115 	stw	r5,4(r8)
8008511c:	10800044 	addi	r2,r2,1
80085120:	d8c02015 	stw	r3,128(sp)
80085124:	d8801f15 	stw	r2,124(sp)
80085128:	010001c4 	movi	r4,7
8008512c:	20832916 	blt	r4,r2,80085dd4 <___vfprintf_internal_r+0x1b54>
80085130:	42000204 	addi	r8,r8,8
80085134:	d8803317 	ldw	r2,204(sp)
80085138:	143fffc4 	addi	r16,r2,-1
8008513c:	043ec50e 	bge	zero,r16,80084c54 <___vfprintf_internal_r+0x9d4>
80085140:	04400404 	movi	r17,16
80085144:	d8801f17 	ldw	r2,124(sp)
80085148:	8c00880e 	bge	r17,r16,8008536c <___vfprintf_internal_r+0x10ec>
8008514c:	01600274 	movhi	r5,32777
80085150:	295a8884 	addi	r5,r5,27170
80085154:	d9402b15 	stw	r5,172(sp)
80085158:	058001c4 	movi	r22,7
8008515c:	dcc02c17 	ldw	r19,176(sp)
80085160:	00000306 	br	80085170 <___vfprintf_internal_r+0xef0>
80085164:	42000204 	addi	r8,r8,8
80085168:	843ffc04 	addi	r16,r16,-16
8008516c:	8c00820e 	bge	r17,r16,80085378 <___vfprintf_internal_r+0x10f8>
80085170:	18c00404 	addi	r3,r3,16
80085174:	10800044 	addi	r2,r2,1
80085178:	45000015 	stw	r20,0(r8)
8008517c:	44400115 	stw	r17,4(r8)
80085180:	d8c02015 	stw	r3,128(sp)
80085184:	d8801f15 	stw	r2,124(sp)
80085188:	b0bff60e 	bge	r22,r2,80085164 <___vfprintf_internal_r+0xee4>
8008518c:	d9801e04 	addi	r6,sp,120
80085190:	b80b883a 	mov	r5,r23
80085194:	9809883a 	mov	r4,r19
80085198:	008cf9c0 	call	8008cf9c <__sprint_r>
8008519c:	103d3a1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
800851a0:	d8c02017 	ldw	r3,128(sp)
800851a4:	d8801f17 	ldw	r2,124(sp)
800851a8:	da000404 	addi	r8,sp,16
800851ac:	003fee06 	br	80085168 <___vfprintf_internal_r+0xee8>
800851b0:	d9403117 	ldw	r5,196(sp)
800851b4:	d8802a17 	ldw	r2,168(sp)
800851b8:	28adc83a 	sub	r22,r5,r2
800851bc:	05be630e 	bge	zero,r22,80084b4c <___vfprintf_internal_r+0x8cc>
800851c0:	07000404 	movi	fp,16
800851c4:	d8801f17 	ldw	r2,124(sp)
800851c8:	e5838f0e 	bge	fp,r22,80086008 <___vfprintf_internal_r+0x1d88>
800851cc:	01600274 	movhi	r5,32777
800851d0:	295a8884 	addi	r5,r5,27170
800851d4:	dc403015 	stw	r17,192(sp)
800851d8:	d9402b15 	stw	r5,172(sp)
800851dc:	b023883a 	mov	r17,r22
800851e0:	04c001c4 	movi	r19,7
800851e4:	a82d883a 	mov	r22,r21
800851e8:	902b883a 	mov	r21,r18
800851ec:	8025883a 	mov	r18,r16
800851f0:	dc002c17 	ldw	r16,176(sp)
800851f4:	00000306 	br	80085204 <___vfprintf_internal_r+0xf84>
800851f8:	8c7ffc04 	addi	r17,r17,-16
800851fc:	42000204 	addi	r8,r8,8
80085200:	e440110e 	bge	fp,r17,80085248 <___vfprintf_internal_r+0xfc8>
80085204:	18c00404 	addi	r3,r3,16
80085208:	10800044 	addi	r2,r2,1
8008520c:	45000015 	stw	r20,0(r8)
80085210:	47000115 	stw	fp,4(r8)
80085214:	d8c02015 	stw	r3,128(sp)
80085218:	d8801f15 	stw	r2,124(sp)
8008521c:	98bff60e 	bge	r19,r2,800851f8 <___vfprintf_internal_r+0xf78>
80085220:	d9801e04 	addi	r6,sp,120
80085224:	b80b883a 	mov	r5,r23
80085228:	8009883a 	mov	r4,r16
8008522c:	008cf9c0 	call	8008cf9c <__sprint_r>
80085230:	103d151e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085234:	8c7ffc04 	addi	r17,r17,-16
80085238:	d8c02017 	ldw	r3,128(sp)
8008523c:	d8801f17 	ldw	r2,124(sp)
80085240:	da000404 	addi	r8,sp,16
80085244:	e47fef16 	blt	fp,r17,80085204 <___vfprintf_internal_r+0xf84>
80085248:	9021883a 	mov	r16,r18
8008524c:	a825883a 	mov	r18,r21
80085250:	b02b883a 	mov	r21,r22
80085254:	882d883a 	mov	r22,r17
80085258:	dc403017 	ldw	r17,192(sp)
8008525c:	d9002b17 	ldw	r4,172(sp)
80085260:	1d87883a 	add	r3,r3,r22
80085264:	10800044 	addi	r2,r2,1
80085268:	41000015 	stw	r4,0(r8)
8008526c:	45800115 	stw	r22,4(r8)
80085270:	d8c02015 	stw	r3,128(sp)
80085274:	d8801f15 	stw	r2,124(sp)
80085278:	010001c4 	movi	r4,7
8008527c:	20818e16 	blt	r4,r2,800858b8 <___vfprintf_internal_r+0x1638>
80085280:	42000204 	addi	r8,r8,8
80085284:	003e3106 	br	80084b4c <___vfprintf_internal_r+0x8cc>
80085288:	d9403317 	ldw	r5,204(sp)
8008528c:	00800044 	movi	r2,1
80085290:	18c00044 	addi	r3,r3,1
80085294:	1141530e 	bge	r2,r5,800857e4 <___vfprintf_internal_r+0x1564>
80085298:	dc401f17 	ldw	r17,124(sp)
8008529c:	00800044 	movi	r2,1
800852a0:	40800115 	stw	r2,4(r8)
800852a4:	8c400044 	addi	r17,r17,1
800852a8:	44000015 	stw	r16,0(r8)
800852ac:	d8c02015 	stw	r3,128(sp)
800852b0:	dc401f15 	stw	r17,124(sp)
800852b4:	008001c4 	movi	r2,7
800852b8:	14416b16 	blt	r2,r17,80085868 <___vfprintf_internal_r+0x15e8>
800852bc:	42000204 	addi	r8,r8,8
800852c0:	d8803717 	ldw	r2,220(sp)
800852c4:	d9003417 	ldw	r4,208(sp)
800852c8:	8c400044 	addi	r17,r17,1
800852cc:	10c7883a 	add	r3,r2,r3
800852d0:	40800115 	stw	r2,4(r8)
800852d4:	41000015 	stw	r4,0(r8)
800852d8:	d8c02015 	stw	r3,128(sp)
800852dc:	dc401f15 	stw	r17,124(sp)
800852e0:	008001c4 	movi	r2,7
800852e4:	14416916 	blt	r2,r17,8008588c <___vfprintf_internal_r+0x160c>
800852e8:	45800204 	addi	r22,r8,8
800852ec:	d9003617 	ldw	r4,216(sp)
800852f0:	d9403817 	ldw	r5,224(sp)
800852f4:	000d883a 	mov	r6,zero
800852f8:	000f883a 	mov	r7,zero
800852fc:	d8c03c15 	stw	r3,240(sp)
80085300:	0090c140 	call	80090c14 <__eqdf2>
80085304:	d8c03c17 	ldw	r3,240(sp)
80085308:	1000bc26 	beq	r2,zero,800855fc <___vfprintf_internal_r+0x137c>
8008530c:	d9403317 	ldw	r5,204(sp)
80085310:	84000044 	addi	r16,r16,1
80085314:	8c400044 	addi	r17,r17,1
80085318:	28bfffc4 	addi	r2,r5,-1
8008531c:	1887883a 	add	r3,r3,r2
80085320:	b0800115 	stw	r2,4(r22)
80085324:	b4000015 	stw	r16,0(r22)
80085328:	d8c02015 	stw	r3,128(sp)
8008532c:	dc401f15 	stw	r17,124(sp)
80085330:	008001c4 	movi	r2,7
80085334:	14414316 	blt	r2,r17,80085844 <___vfprintf_internal_r+0x15c4>
80085338:	b5800204 	addi	r22,r22,8
8008533c:	d9003a17 	ldw	r4,232(sp)
80085340:	df0022c4 	addi	fp,sp,139
80085344:	8c400044 	addi	r17,r17,1
80085348:	20c7883a 	add	r3,r4,r3
8008534c:	b7000015 	stw	fp,0(r22)
80085350:	b1000115 	stw	r4,4(r22)
80085354:	d8c02015 	stw	r3,128(sp)
80085358:	dc401f15 	stw	r17,124(sp)
8008535c:	008001c4 	movi	r2,7
80085360:	14400e16 	blt	r2,r17,8008539c <___vfprintf_internal_r+0x111c>
80085364:	b2000204 	addi	r8,r22,8
80085368:	003e3a06 	br	80084c54 <___vfprintf_internal_r+0x9d4>
8008536c:	01200274 	movhi	r4,32777
80085370:	211a8884 	addi	r4,r4,27170
80085374:	d9002b15 	stw	r4,172(sp)
80085378:	d9002b17 	ldw	r4,172(sp)
8008537c:	1c07883a 	add	r3,r3,r16
80085380:	44000115 	stw	r16,4(r8)
80085384:	41000015 	stw	r4,0(r8)
80085388:	10800044 	addi	r2,r2,1
8008538c:	d8c02015 	stw	r3,128(sp)
80085390:	d8801f15 	stw	r2,124(sp)
80085394:	010001c4 	movi	r4,7
80085398:	20be2d0e 	bge	r4,r2,80084c50 <___vfprintf_internal_r+0x9d0>
8008539c:	d9002c17 	ldw	r4,176(sp)
800853a0:	d9801e04 	addi	r6,sp,120
800853a4:	b80b883a 	mov	r5,r23
800853a8:	008cf9c0 	call	8008cf9c <__sprint_r>
800853ac:	103cb61e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
800853b0:	d8c02017 	ldw	r3,128(sp)
800853b4:	da000404 	addi	r8,sp,16
800853b8:	003e2606 	br	80084c54 <___vfprintf_internal_r+0x9d4>
800853bc:	d9002c17 	ldw	r4,176(sp)
800853c0:	d9801e04 	addi	r6,sp,120
800853c4:	b80b883a 	mov	r5,r23
800853c8:	008cf9c0 	call	8008cf9c <__sprint_r>
800853cc:	103e5d26 	beq	r2,zero,80084d44 <___vfprintf_internal_r+0xac4>
800853d0:	003cad06 	br	80084688 <___vfprintf_internal_r+0x408>
800853d4:	d9002c17 	ldw	r4,176(sp)
800853d8:	d9801e04 	addi	r6,sp,120
800853dc:	b80b883a 	mov	r5,r23
800853e0:	008cf9c0 	call	8008cf9c <__sprint_r>
800853e4:	103ca81e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
800853e8:	d8c02017 	ldw	r3,128(sp)
800853ec:	da000404 	addi	r8,sp,16
800853f0:	003e0b06 	br	80084c20 <___vfprintf_internal_r+0x9a0>
800853f4:	d9002c17 	ldw	r4,176(sp)
800853f8:	d9801e04 	addi	r6,sp,120
800853fc:	b80b883a 	mov	r5,r23
80085400:	008cf9c0 	call	8008cf9c <__sprint_r>
80085404:	103ca01e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085408:	d8c02017 	ldw	r3,128(sp)
8008540c:	da000404 	addi	r8,sp,16
80085410:	003dbd06 	br	80084b08 <___vfprintf_internal_r+0x888>
80085414:	d9002c17 	ldw	r4,176(sp)
80085418:	d9801e04 	addi	r6,sp,120
8008541c:	b80b883a 	mov	r5,r23
80085420:	008cf9c0 	call	8008cf9c <__sprint_r>
80085424:	103c981e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085428:	d8c02017 	ldw	r3,128(sp)
8008542c:	da000404 	addi	r8,sp,16
80085430:	003dc306 	br	80084b40 <___vfprintf_internal_r+0x8c0>
80085434:	d8802917 	ldw	r2,164(sp)
80085438:	d8002785 	stb	zero,158(sp)
8008543c:	103f0616 	blt	r2,zero,80085058 <___vfprintf_internal_r+0xdd8>
80085440:	00ffdfc4 	movi	r3,-129
80085444:	9d84b03a 	or	r2,r19,r22
80085448:	90e4703a 	and	r18,r18,r3
8008544c:	103c6b26 	beq	r2,zero,800845fc <___vfprintf_internal_r+0x37c>
80085450:	0039883a 	mov	fp,zero
80085454:	003e7406 	br	80084e28 <___vfprintf_internal_r+0xba8>
80085458:	9080040c 	andi	r2,r18,16
8008545c:	1001b326 	beq	r2,zero,80085b2c <___vfprintf_internal_r+0x18ac>
80085460:	d9002d17 	ldw	r4,180(sp)
80085464:	d9402917 	ldw	r5,164(sp)
80085468:	d8002785 	stb	zero,158(sp)
8008546c:	20800104 	addi	r2,r4,4
80085470:	24c00017 	ldw	r19,0(r4)
80085474:	002d883a 	mov	r22,zero
80085478:	2801b516 	blt	r5,zero,80085b50 <___vfprintf_internal_r+0x18d0>
8008547c:	00ffdfc4 	movi	r3,-129
80085480:	d8802d15 	stw	r2,180(sp)
80085484:	90e4703a 	and	r18,r18,r3
80085488:	983d2726 	beq	r19,zero,80084928 <___vfprintf_internal_r+0x6a8>
8008548c:	0039883a 	mov	fp,zero
80085490:	003d2a06 	br	8008493c <___vfprintf_internal_r+0x6bc>
80085494:	dc402617 	ldw	r17,152(sp)
80085498:	0441d30e 	bge	zero,r17,80085be8 <___vfprintf_internal_r+0x1968>
8008549c:	dc403217 	ldw	r17,200(sp)
800854a0:	d8803317 	ldw	r2,204(sp)
800854a4:	1440010e 	bge	r2,r17,800854ac <___vfprintf_internal_r+0x122c>
800854a8:	1023883a 	mov	r17,r2
800854ac:	04400a0e 	bge	zero,r17,800854d8 <___vfprintf_internal_r+0x1258>
800854b0:	d8801f17 	ldw	r2,124(sp)
800854b4:	1c47883a 	add	r3,r3,r17
800854b8:	44000015 	stw	r16,0(r8)
800854bc:	10800044 	addi	r2,r2,1
800854c0:	44400115 	stw	r17,4(r8)
800854c4:	d8c02015 	stw	r3,128(sp)
800854c8:	d8801f15 	stw	r2,124(sp)
800854cc:	010001c4 	movi	r4,7
800854d0:	20826516 	blt	r4,r2,80085e68 <___vfprintf_internal_r+0x1be8>
800854d4:	42000204 	addi	r8,r8,8
800854d8:	88026116 	blt	r17,zero,80085e60 <___vfprintf_internal_r+0x1be0>
800854dc:	d9003217 	ldw	r4,200(sp)
800854e0:	2463c83a 	sub	r17,r4,r17
800854e4:	04407b0e 	bge	zero,r17,800856d4 <___vfprintf_internal_r+0x1454>
800854e8:	05800404 	movi	r22,16
800854ec:	d8801f17 	ldw	r2,124(sp)
800854f0:	b4419d0e 	bge	r22,r17,80085b68 <___vfprintf_internal_r+0x18e8>
800854f4:	01200274 	movhi	r4,32777
800854f8:	211a8884 	addi	r4,r4,27170
800854fc:	d9002b15 	stw	r4,172(sp)
80085500:	070001c4 	movi	fp,7
80085504:	dcc02c17 	ldw	r19,176(sp)
80085508:	00000306 	br	80085518 <___vfprintf_internal_r+0x1298>
8008550c:	42000204 	addi	r8,r8,8
80085510:	8c7ffc04 	addi	r17,r17,-16
80085514:	b441970e 	bge	r22,r17,80085b74 <___vfprintf_internal_r+0x18f4>
80085518:	18c00404 	addi	r3,r3,16
8008551c:	10800044 	addi	r2,r2,1
80085520:	45000015 	stw	r20,0(r8)
80085524:	45800115 	stw	r22,4(r8)
80085528:	d8c02015 	stw	r3,128(sp)
8008552c:	d8801f15 	stw	r2,124(sp)
80085530:	e0bff60e 	bge	fp,r2,8008550c <___vfprintf_internal_r+0x128c>
80085534:	d9801e04 	addi	r6,sp,120
80085538:	b80b883a 	mov	r5,r23
8008553c:	9809883a 	mov	r4,r19
80085540:	008cf9c0 	call	8008cf9c <__sprint_r>
80085544:	103c501e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085548:	d8c02017 	ldw	r3,128(sp)
8008554c:	d8801f17 	ldw	r2,124(sp)
80085550:	da000404 	addi	r8,sp,16
80085554:	003fee06 	br	80085510 <___vfprintf_internal_r+0x1290>
80085558:	d9002c17 	ldw	r4,176(sp)
8008555c:	d9801e04 	addi	r6,sp,120
80085560:	b80b883a 	mov	r5,r23
80085564:	008cf9c0 	call	8008cf9c <__sprint_r>
80085568:	103c471e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
8008556c:	d8c02017 	ldw	r3,128(sp)
80085570:	df002787 	ldb	fp,158(sp)
80085574:	da000404 	addi	r8,sp,16
80085578:	003d5606 	br	80084ad4 <___vfprintf_internal_r+0x854>
8008557c:	9080040c 	andi	r2,r18,16
80085580:	10016126 	beq	r2,zero,80085b08 <___vfprintf_internal_r+0x1888>
80085584:	d8802d17 	ldw	r2,180(sp)
80085588:	14c00017 	ldw	r19,0(r2)
8008558c:	10800104 	addi	r2,r2,4
80085590:	d8802d15 	stw	r2,180(sp)
80085594:	982dd7fa 	srai	r22,r19,31
80085598:	b005883a 	mov	r2,r22
8008559c:	003c8206 	br	800847a8 <___vfprintf_internal_r+0x528>
800855a0:	9080040c 	andi	r2,r18,16
800855a4:	10003526 	beq	r2,zero,8008567c <___vfprintf_internal_r+0x13fc>
800855a8:	d9402d17 	ldw	r5,180(sp)
800855ac:	d8c02917 	ldw	r3,164(sp)
800855b0:	d8002785 	stb	zero,158(sp)
800855b4:	28800104 	addi	r2,r5,4
800855b8:	2cc00017 	ldw	r19,0(r5)
800855bc:	002d883a 	mov	r22,zero
800855c0:	18003716 	blt	r3,zero,800856a0 <___vfprintf_internal_r+0x1420>
800855c4:	00ffdfc4 	movi	r3,-129
800855c8:	d8802d15 	stw	r2,180(sp)
800855cc:	90e4703a 	and	r18,r18,r3
800855d0:	0039883a 	mov	fp,zero
800855d4:	983df326 	beq	r19,zero,80084da4 <___vfprintf_internal_r+0xb24>
800855d8:	00800244 	movi	r2,9
800855dc:	14fc7b36 	bltu	r2,r19,800847cc <___vfprintf_internal_r+0x54c>
800855e0:	d8c02817 	ldw	r3,160(sp)
800855e4:	dc001dc4 	addi	r16,sp,119
800855e8:	9cc00c04 	addi	r19,r19,48
800855ec:	1c07c83a 	sub	r3,r3,r16
800855f0:	dcc01dc5 	stb	r19,119(sp)
800855f4:	d8c02e15 	stw	r3,184(sp)
800855f8:	003ce806 	br	8008499c <___vfprintf_internal_r+0x71c>
800855fc:	d8803317 	ldw	r2,204(sp)
80085600:	143fffc4 	addi	r16,r2,-1
80085604:	043f4d0e 	bge	zero,r16,8008533c <___vfprintf_internal_r+0x10bc>
80085608:	07000404 	movi	fp,16
8008560c:	e400810e 	bge	fp,r16,80085814 <___vfprintf_internal_r+0x1594>
80085610:	01600274 	movhi	r5,32777
80085614:	295a8884 	addi	r5,r5,27170
80085618:	d9402b15 	stw	r5,172(sp)
8008561c:	01c001c4 	movi	r7,7
80085620:	dcc02c17 	ldw	r19,176(sp)
80085624:	00000306 	br	80085634 <___vfprintf_internal_r+0x13b4>
80085628:	b5800204 	addi	r22,r22,8
8008562c:	843ffc04 	addi	r16,r16,-16
80085630:	e4007b0e 	bge	fp,r16,80085820 <___vfprintf_internal_r+0x15a0>
80085634:	18c00404 	addi	r3,r3,16
80085638:	8c400044 	addi	r17,r17,1
8008563c:	b5000015 	stw	r20,0(r22)
80085640:	b7000115 	stw	fp,4(r22)
80085644:	d8c02015 	stw	r3,128(sp)
80085648:	dc401f15 	stw	r17,124(sp)
8008564c:	3c7ff60e 	bge	r7,r17,80085628 <___vfprintf_internal_r+0x13a8>
80085650:	d9801e04 	addi	r6,sp,120
80085654:	b80b883a 	mov	r5,r23
80085658:	9809883a 	mov	r4,r19
8008565c:	d9c03c15 	stw	r7,240(sp)
80085660:	008cf9c0 	call	8008cf9c <__sprint_r>
80085664:	d9c03c17 	ldw	r7,240(sp)
80085668:	103c071e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
8008566c:	d8c02017 	ldw	r3,128(sp)
80085670:	dc401f17 	ldw	r17,124(sp)
80085674:	dd800404 	addi	r22,sp,16
80085678:	003fec06 	br	8008562c <___vfprintf_internal_r+0x13ac>
8008567c:	9080100c 	andi	r2,r18,64
80085680:	d8002785 	stb	zero,158(sp)
80085684:	10010e26 	beq	r2,zero,80085ac0 <___vfprintf_internal_r+0x1840>
80085688:	d9002d17 	ldw	r4,180(sp)
8008568c:	d9402917 	ldw	r5,164(sp)
80085690:	002d883a 	mov	r22,zero
80085694:	20800104 	addi	r2,r4,4
80085698:	24c0000b 	ldhu	r19,0(r4)
8008569c:	283fc90e 	bge	r5,zero,800855c4 <___vfprintf_internal_r+0x1344>
800856a0:	d8802d15 	stw	r2,180(sp)
800856a4:	0039883a 	mov	fp,zero
800856a8:	9d84b03a 	or	r2,r19,r22
800856ac:	103c461e 	bne	r2,zero,800847c8 <___vfprintf_internal_r+0x548>
800856b0:	00800044 	movi	r2,1
800856b4:	003e6c06 	br	80085068 <___vfprintf_internal_r+0xde8>
800856b8:	d9002c17 	ldw	r4,176(sp)
800856bc:	d9801e04 	addi	r6,sp,120
800856c0:	b80b883a 	mov	r5,r23
800856c4:	008cf9c0 	call	8008cf9c <__sprint_r>
800856c8:	103bef1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
800856cc:	d8c02017 	ldw	r3,128(sp)
800856d0:	da000404 	addi	r8,sp,16
800856d4:	d9003217 	ldw	r4,200(sp)
800856d8:	d8802617 	ldw	r2,152(sp)
800856dc:	d9403317 	ldw	r5,204(sp)
800856e0:	8123883a 	add	r17,r16,r4
800856e4:	11400216 	blt	r2,r5,800856f0 <___vfprintf_internal_r+0x1470>
800856e8:	9100004c 	andi	r4,r18,1
800856ec:	20000d26 	beq	r4,zero,80085724 <___vfprintf_internal_r+0x14a4>
800856f0:	d9003717 	ldw	r4,220(sp)
800856f4:	d9403417 	ldw	r5,208(sp)
800856f8:	1907883a 	add	r3,r3,r4
800856fc:	d9001f17 	ldw	r4,124(sp)
80085700:	41400015 	stw	r5,0(r8)
80085704:	d9403717 	ldw	r5,220(sp)
80085708:	21000044 	addi	r4,r4,1
8008570c:	d8c02015 	stw	r3,128(sp)
80085710:	41400115 	stw	r5,4(r8)
80085714:	d9001f15 	stw	r4,124(sp)
80085718:	014001c4 	movi	r5,7
8008571c:	2901e816 	blt	r5,r4,80085ec0 <___vfprintf_internal_r+0x1c40>
80085720:	42000204 	addi	r8,r8,8
80085724:	d9003317 	ldw	r4,204(sp)
80085728:	8121883a 	add	r16,r16,r4
8008572c:	2085c83a 	sub	r2,r4,r2
80085730:	8461c83a 	sub	r16,r16,r17
80085734:	1400010e 	bge	r2,r16,8008573c <___vfprintf_internal_r+0x14bc>
80085738:	1021883a 	mov	r16,r2
8008573c:	04000a0e 	bge	zero,r16,80085768 <___vfprintf_internal_r+0x14e8>
80085740:	d9001f17 	ldw	r4,124(sp)
80085744:	1c07883a 	add	r3,r3,r16
80085748:	44400015 	stw	r17,0(r8)
8008574c:	21000044 	addi	r4,r4,1
80085750:	44000115 	stw	r16,4(r8)
80085754:	d8c02015 	stw	r3,128(sp)
80085758:	d9001f15 	stw	r4,124(sp)
8008575c:	014001c4 	movi	r5,7
80085760:	2901fb16 	blt	r5,r4,80085f50 <___vfprintf_internal_r+0x1cd0>
80085764:	42000204 	addi	r8,r8,8
80085768:	8001f716 	blt	r16,zero,80085f48 <___vfprintf_internal_r+0x1cc8>
8008576c:	1421c83a 	sub	r16,r2,r16
80085770:	043d380e 	bge	zero,r16,80084c54 <___vfprintf_internal_r+0x9d4>
80085774:	04400404 	movi	r17,16
80085778:	d8801f17 	ldw	r2,124(sp)
8008577c:	8c3efb0e 	bge	r17,r16,8008536c <___vfprintf_internal_r+0x10ec>
80085780:	01600274 	movhi	r5,32777
80085784:	295a8884 	addi	r5,r5,27170
80085788:	d9402b15 	stw	r5,172(sp)
8008578c:	058001c4 	movi	r22,7
80085790:	dcc02c17 	ldw	r19,176(sp)
80085794:	00000306 	br	800857a4 <___vfprintf_internal_r+0x1524>
80085798:	42000204 	addi	r8,r8,8
8008579c:	843ffc04 	addi	r16,r16,-16
800857a0:	8c3ef50e 	bge	r17,r16,80085378 <___vfprintf_internal_r+0x10f8>
800857a4:	18c00404 	addi	r3,r3,16
800857a8:	10800044 	addi	r2,r2,1
800857ac:	45000015 	stw	r20,0(r8)
800857b0:	44400115 	stw	r17,4(r8)
800857b4:	d8c02015 	stw	r3,128(sp)
800857b8:	d8801f15 	stw	r2,124(sp)
800857bc:	b0bff60e 	bge	r22,r2,80085798 <___vfprintf_internal_r+0x1518>
800857c0:	d9801e04 	addi	r6,sp,120
800857c4:	b80b883a 	mov	r5,r23
800857c8:	9809883a 	mov	r4,r19
800857cc:	008cf9c0 	call	8008cf9c <__sprint_r>
800857d0:	103bad1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
800857d4:	d8c02017 	ldw	r3,128(sp)
800857d8:	d8801f17 	ldw	r2,124(sp)
800857dc:	da000404 	addi	r8,sp,16
800857e0:	003fee06 	br	8008579c <___vfprintf_internal_r+0x151c>
800857e4:	9088703a 	and	r4,r18,r2
800857e8:	203eab1e 	bne	r4,zero,80085298 <___vfprintf_internal_r+0x1018>
800857ec:	dc401f17 	ldw	r17,124(sp)
800857f0:	40800115 	stw	r2,4(r8)
800857f4:	44000015 	stw	r16,0(r8)
800857f8:	8c400044 	addi	r17,r17,1
800857fc:	d8c02015 	stw	r3,128(sp)
80085800:	dc401f15 	stw	r17,124(sp)
80085804:	008001c4 	movi	r2,7
80085808:	14400e16 	blt	r2,r17,80085844 <___vfprintf_internal_r+0x15c4>
8008580c:	45800204 	addi	r22,r8,8
80085810:	003eca06 	br	8008533c <___vfprintf_internal_r+0x10bc>
80085814:	01200274 	movhi	r4,32777
80085818:	211a8884 	addi	r4,r4,27170
8008581c:	d9002b15 	stw	r4,172(sp)
80085820:	d8802b17 	ldw	r2,172(sp)
80085824:	1c07883a 	add	r3,r3,r16
80085828:	8c400044 	addi	r17,r17,1
8008582c:	b0800015 	stw	r2,0(r22)
80085830:	b4000115 	stw	r16,4(r22)
80085834:	d8c02015 	stw	r3,128(sp)
80085838:	dc401f15 	stw	r17,124(sp)
8008583c:	008001c4 	movi	r2,7
80085840:	147ebd0e 	bge	r2,r17,80085338 <___vfprintf_internal_r+0x10b8>
80085844:	d9002c17 	ldw	r4,176(sp)
80085848:	d9801e04 	addi	r6,sp,120
8008584c:	b80b883a 	mov	r5,r23
80085850:	008cf9c0 	call	8008cf9c <__sprint_r>
80085854:	103b8c1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085858:	d8c02017 	ldw	r3,128(sp)
8008585c:	dc401f17 	ldw	r17,124(sp)
80085860:	dd800404 	addi	r22,sp,16
80085864:	003eb506 	br	8008533c <___vfprintf_internal_r+0x10bc>
80085868:	d9002c17 	ldw	r4,176(sp)
8008586c:	d9801e04 	addi	r6,sp,120
80085870:	b80b883a 	mov	r5,r23
80085874:	008cf9c0 	call	8008cf9c <__sprint_r>
80085878:	103b831e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
8008587c:	d8c02017 	ldw	r3,128(sp)
80085880:	dc401f17 	ldw	r17,124(sp)
80085884:	da000404 	addi	r8,sp,16
80085888:	003e8d06 	br	800852c0 <___vfprintf_internal_r+0x1040>
8008588c:	d9002c17 	ldw	r4,176(sp)
80085890:	d9801e04 	addi	r6,sp,120
80085894:	b80b883a 	mov	r5,r23
80085898:	008cf9c0 	call	8008cf9c <__sprint_r>
8008589c:	103b7a1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
800858a0:	d8c02017 	ldw	r3,128(sp)
800858a4:	dc401f17 	ldw	r17,124(sp)
800858a8:	dd800404 	addi	r22,sp,16
800858ac:	003e8f06 	br	800852ec <___vfprintf_internal_r+0x106c>
800858b0:	0027883a 	mov	r19,zero
800858b4:	003f4a06 	br	800855e0 <___vfprintf_internal_r+0x1360>
800858b8:	d9002c17 	ldw	r4,176(sp)
800858bc:	d9801e04 	addi	r6,sp,120
800858c0:	b80b883a 	mov	r5,r23
800858c4:	008cf9c0 	call	8008cf9c <__sprint_r>
800858c8:	103b6f1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
800858cc:	d8c02017 	ldw	r3,128(sp)
800858d0:	da000404 	addi	r8,sp,16
800858d4:	003c9d06 	br	80084b4c <___vfprintf_internal_r+0x8cc>
800858d8:	04e7c83a 	sub	r19,zero,r19
800858dc:	9804c03a 	cmpne	r2,r19,zero
800858e0:	05adc83a 	sub	r22,zero,r22
800858e4:	b0adc83a 	sub	r22,r22,r2
800858e8:	d8802917 	ldw	r2,164(sp)
800858ec:	07000b44 	movi	fp,45
800858f0:	df002785 	stb	fp,158(sp)
800858f4:	10017b16 	blt	r2,zero,80085ee4 <___vfprintf_internal_r+0x1c64>
800858f8:	00bfdfc4 	movi	r2,-129
800858fc:	90a4703a 	and	r18,r18,r2
80085900:	003bb106 	br	800847c8 <___vfprintf_internal_r+0x548>
80085904:	d9003617 	ldw	r4,216(sp)
80085908:	d9403817 	ldw	r5,224(sp)
8008590c:	da003d15 	stw	r8,244(sp)
80085910:	008b7b40 	call	8008b7b4 <__fpclassifyd>
80085914:	da003d17 	ldw	r8,244(sp)
80085918:	1000f026 	beq	r2,zero,80085cdc <___vfprintf_internal_r+0x1a5c>
8008591c:	d9002917 	ldw	r4,164(sp)
80085920:	05bff7c4 	movi	r22,-33
80085924:	00bfffc4 	movi	r2,-1
80085928:	8dac703a 	and	r22,r17,r22
8008592c:	20820026 	beq	r4,r2,80086130 <___vfprintf_internal_r+0x1eb0>
80085930:	008011c4 	movi	r2,71
80085934:	b081f726 	beq	r22,r2,80086114 <___vfprintf_internal_r+0x1e94>
80085938:	d9003817 	ldw	r4,224(sp)
8008593c:	90c04014 	ori	r3,r18,256
80085940:	d8c02b15 	stw	r3,172(sp)
80085944:	20021516 	blt	r4,zero,8008619c <___vfprintf_internal_r+0x1f1c>
80085948:	dcc03817 	ldw	r19,224(sp)
8008594c:	d8002a05 	stb	zero,168(sp)
80085950:	00801984 	movi	r2,102
80085954:	8881f926 	beq	r17,r2,8008613c <___vfprintf_internal_r+0x1ebc>
80085958:	00801184 	movi	r2,70
8008595c:	88821c26 	beq	r17,r2,800861d0 <___vfprintf_internal_r+0x1f50>
80085960:	00801144 	movi	r2,69
80085964:	b081ef26 	beq	r22,r2,80086124 <___vfprintf_internal_r+0x1ea4>
80085968:	d8c02917 	ldw	r3,164(sp)
8008596c:	d8802104 	addi	r2,sp,132
80085970:	d8800315 	stw	r2,12(sp)
80085974:	d9403617 	ldw	r5,216(sp)
80085978:	d8802504 	addi	r2,sp,148
8008597c:	d9002c17 	ldw	r4,176(sp)
80085980:	d8800215 	stw	r2,8(sp)
80085984:	d8802604 	addi	r2,sp,152
80085988:	d8c00015 	stw	r3,0(sp)
8008598c:	d8800115 	stw	r2,4(sp)
80085990:	01c00084 	movi	r7,2
80085994:	980d883a 	mov	r6,r19
80085998:	d8c03c15 	stw	r3,240(sp)
8008599c:	da003d15 	stw	r8,244(sp)
800859a0:	00869c80 	call	800869c8 <_dtoa_r>
800859a4:	1021883a 	mov	r16,r2
800859a8:	008019c4 	movi	r2,103
800859ac:	d8c03c17 	ldw	r3,240(sp)
800859b0:	da003d17 	ldw	r8,244(sp)
800859b4:	88817126 	beq	r17,r2,80085f7c <___vfprintf_internal_r+0x1cfc>
800859b8:	008011c4 	movi	r2,71
800859bc:	88829226 	beq	r17,r2,80086408 <___vfprintf_internal_r+0x2188>
800859c0:	80f9883a 	add	fp,r16,r3
800859c4:	d9003617 	ldw	r4,216(sp)
800859c8:	000d883a 	mov	r6,zero
800859cc:	000f883a 	mov	r7,zero
800859d0:	980b883a 	mov	r5,r19
800859d4:	da003d15 	stw	r8,244(sp)
800859d8:	0090c140 	call	80090c14 <__eqdf2>
800859dc:	da003d17 	ldw	r8,244(sp)
800859e0:	10018d26 	beq	r2,zero,80086018 <___vfprintf_internal_r+0x1d98>
800859e4:	d8802117 	ldw	r2,132(sp)
800859e8:	1700062e 	bgeu	r2,fp,80085a04 <___vfprintf_internal_r+0x1784>
800859ec:	01000c04 	movi	r4,48
800859f0:	10c00044 	addi	r3,r2,1
800859f4:	d8c02115 	stw	r3,132(sp)
800859f8:	11000005 	stb	r4,0(r2)
800859fc:	d8802117 	ldw	r2,132(sp)
80085a00:	173ffb36 	bltu	r2,fp,800859f0 <___vfprintf_internal_r+0x1770>
80085a04:	1405c83a 	sub	r2,r2,r16
80085a08:	d8803315 	stw	r2,204(sp)
80085a0c:	008011c4 	movi	r2,71
80085a10:	b0817626 	beq	r22,r2,80085fec <___vfprintf_internal_r+0x1d6c>
80085a14:	00801944 	movi	r2,101
80085a18:	1442810e 	bge	r2,r17,80086420 <___vfprintf_internal_r+0x21a0>
80085a1c:	d8c02617 	ldw	r3,152(sp)
80085a20:	00801984 	movi	r2,102
80085a24:	d8c03215 	stw	r3,200(sp)
80085a28:	8881fe26 	beq	r17,r2,80086224 <___vfprintf_internal_r+0x1fa4>
80085a2c:	d8c03217 	ldw	r3,200(sp)
80085a30:	d9003317 	ldw	r4,204(sp)
80085a34:	1901dd16 	blt	r3,r4,800861ac <___vfprintf_internal_r+0x1f2c>
80085a38:	9480004c 	andi	r18,r18,1
80085a3c:	90022b1e 	bne	r18,zero,800862ec <___vfprintf_internal_r+0x206c>
80085a40:	1805883a 	mov	r2,r3
80085a44:	18028016 	blt	r3,zero,80086448 <___vfprintf_internal_r+0x21c8>
80085a48:	d8c03217 	ldw	r3,200(sp)
80085a4c:	044019c4 	movi	r17,103
80085a50:	d8c02e15 	stw	r3,184(sp)
80085a54:	df002a07 	ldb	fp,168(sp)
80085a58:	e001531e 	bne	fp,zero,80085fa8 <___vfprintf_internal_r+0x1d28>
80085a5c:	df002783 	ldbu	fp,158(sp)
80085a60:	d8802a15 	stw	r2,168(sp)
80085a64:	dc802b17 	ldw	r18,172(sp)
80085a68:	d8002915 	stw	zero,164(sp)
80085a6c:	003bd106 	br	800849b4 <___vfprintf_internal_r+0x734>
80085a70:	d8802d17 	ldw	r2,180(sp)
80085a74:	d8c02d17 	ldw	r3,180(sp)
80085a78:	d9002d17 	ldw	r4,180(sp)
80085a7c:	10800017 	ldw	r2,0(r2)
80085a80:	18c00117 	ldw	r3,4(r3)
80085a84:	21000204 	addi	r4,r4,8
80085a88:	d8803615 	stw	r2,216(sp)
80085a8c:	d8c03815 	stw	r3,224(sp)
80085a90:	d9002d15 	stw	r4,180(sp)
80085a94:	003b7506 	br	8008486c <___vfprintf_internal_r+0x5ec>
80085a98:	ac400007 	ldb	r17,0(r21)
80085a9c:	003a5906 	br	80084404 <___vfprintf_internal_r+0x184>
80085aa0:	9080100c 	andi	r2,r18,64
80085aa4:	1000a826 	beq	r2,zero,80085d48 <___vfprintf_internal_r+0x1ac8>
80085aa8:	d9002d17 	ldw	r4,180(sp)
80085aac:	002d883a 	mov	r22,zero
80085ab0:	24c0000b 	ldhu	r19,0(r4)
80085ab4:	21000104 	addi	r4,r4,4
80085ab8:	d9002d15 	stw	r4,180(sp)
80085abc:	003ccb06 	br	80084dec <___vfprintf_internal_r+0xb6c>
80085ac0:	d8c02d17 	ldw	r3,180(sp)
80085ac4:	d9002917 	ldw	r4,164(sp)
80085ac8:	002d883a 	mov	r22,zero
80085acc:	18800104 	addi	r2,r3,4
80085ad0:	1cc00017 	ldw	r19,0(r3)
80085ad4:	203ebb0e 	bge	r4,zero,800855c4 <___vfprintf_internal_r+0x1344>
80085ad8:	003ef106 	br	800856a0 <___vfprintf_internal_r+0x1420>
80085adc:	9080040c 	andi	r2,r18,16
80085ae0:	1000921e 	bne	r2,zero,80085d2c <___vfprintf_internal_r+0x1aac>
80085ae4:	9480100c 	andi	r18,r18,64
80085ae8:	90013926 	beq	r18,zero,80085fd0 <___vfprintf_internal_r+0x1d50>
80085aec:	d9002d17 	ldw	r4,180(sp)
80085af0:	d9402f17 	ldw	r5,188(sp)
80085af4:	20800017 	ldw	r2,0(r4)
80085af8:	21000104 	addi	r4,r4,4
80085afc:	d9002d15 	stw	r4,180(sp)
80085b00:	1140000d 	sth	r5,0(r2)
80085b04:	003a1606 	br	80084360 <___vfprintf_internal_r+0xe0>
80085b08:	9080100c 	andi	r2,r18,64
80085b0c:	10008026 	beq	r2,zero,80085d10 <___vfprintf_internal_r+0x1a90>
80085b10:	d8c02d17 	ldw	r3,180(sp)
80085b14:	1cc0000f 	ldh	r19,0(r3)
80085b18:	18c00104 	addi	r3,r3,4
80085b1c:	d8c02d15 	stw	r3,180(sp)
80085b20:	982dd7fa 	srai	r22,r19,31
80085b24:	b005883a 	mov	r2,r22
80085b28:	003b1f06 	br	800847a8 <___vfprintf_internal_r+0x528>
80085b2c:	9080100c 	andi	r2,r18,64
80085b30:	d8002785 	stb	zero,158(sp)
80085b34:	10008a1e 	bne	r2,zero,80085d60 <___vfprintf_internal_r+0x1ae0>
80085b38:	d9402d17 	ldw	r5,180(sp)
80085b3c:	d8c02917 	ldw	r3,164(sp)
80085b40:	002d883a 	mov	r22,zero
80085b44:	28800104 	addi	r2,r5,4
80085b48:	2cc00017 	ldw	r19,0(r5)
80085b4c:	183e4b0e 	bge	r3,zero,8008547c <___vfprintf_internal_r+0x11fc>
80085b50:	9d86b03a 	or	r3,r19,r22
80085b54:	d8802d15 	stw	r2,180(sp)
80085b58:	183e4c1e 	bne	r3,zero,8008548c <___vfprintf_internal_r+0x120c>
80085b5c:	0039883a 	mov	fp,zero
80085b60:	0005883a 	mov	r2,zero
80085b64:	003d4006 	br	80085068 <___vfprintf_internal_r+0xde8>
80085b68:	01600274 	movhi	r5,32777
80085b6c:	295a8884 	addi	r5,r5,27170
80085b70:	d9402b15 	stw	r5,172(sp)
80085b74:	d9402b17 	ldw	r5,172(sp)
80085b78:	1c47883a 	add	r3,r3,r17
80085b7c:	10800044 	addi	r2,r2,1
80085b80:	41400015 	stw	r5,0(r8)
80085b84:	44400115 	stw	r17,4(r8)
80085b88:	d8c02015 	stw	r3,128(sp)
80085b8c:	d8801f15 	stw	r2,124(sp)
80085b90:	010001c4 	movi	r4,7
80085b94:	20bec816 	blt	r4,r2,800856b8 <___vfprintf_internal_r+0x1438>
80085b98:	42000204 	addi	r8,r8,8
80085b9c:	003ecd06 	br	800856d4 <___vfprintf_internal_r+0x1454>
80085ba0:	d9002917 	ldw	r4,164(sp)
80085ba4:	d8002785 	stb	zero,158(sp)
80085ba8:	203d2d16 	blt	r4,zero,80085060 <___vfprintf_internal_r+0xde0>
80085bac:	00bfdfc4 	movi	r2,-129
80085bb0:	90a4703a 	and	r18,r18,r2
80085bb4:	003a9106 	br	800845fc <___vfprintf_internal_r+0x37c>
80085bb8:	01200274 	movhi	r4,32777
80085bbc:	211a8884 	addi	r4,r4,27170
80085bc0:	d9002b15 	stw	r4,172(sp)
80085bc4:	003c0c06 	br	80084bf8 <___vfprintf_internal_r+0x978>
80085bc8:	d9002c17 	ldw	r4,176(sp)
80085bcc:	d9801e04 	addi	r6,sp,120
80085bd0:	b80b883a 	mov	r5,r23
80085bd4:	008cf9c0 	call	8008cf9c <__sprint_r>
80085bd8:	103aab1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085bdc:	d8c02017 	ldw	r3,128(sp)
80085be0:	da000404 	addi	r8,sp,16
80085be4:	003d4106 	br	800850ec <___vfprintf_internal_r+0xe6c>
80085be8:	d8801f17 	ldw	r2,124(sp)
80085bec:	01600274 	movhi	r5,32777
80085bf0:	01000044 	movi	r4,1
80085bf4:	18c00044 	addi	r3,r3,1
80085bf8:	10800044 	addi	r2,r2,1
80085bfc:	295a8004 	addi	r5,r5,27136
80085c00:	41000115 	stw	r4,4(r8)
80085c04:	41400015 	stw	r5,0(r8)
80085c08:	d8c02015 	stw	r3,128(sp)
80085c0c:	d8801f15 	stw	r2,124(sp)
80085c10:	010001c4 	movi	r4,7
80085c14:	20805c16 	blt	r4,r2,80085d88 <___vfprintf_internal_r+0x1b08>
80085c18:	42000204 	addi	r8,r8,8
80085c1c:	8800041e 	bne	r17,zero,80085c30 <___vfprintf_internal_r+0x19b0>
80085c20:	d8803317 	ldw	r2,204(sp)
80085c24:	1000021e 	bne	r2,zero,80085c30 <___vfprintf_internal_r+0x19b0>
80085c28:	9080004c 	andi	r2,r18,1
80085c2c:	103c0926 	beq	r2,zero,80084c54 <___vfprintf_internal_r+0x9d4>
80085c30:	d9003717 	ldw	r4,220(sp)
80085c34:	d8801f17 	ldw	r2,124(sp)
80085c38:	d9403417 	ldw	r5,208(sp)
80085c3c:	20c7883a 	add	r3,r4,r3
80085c40:	10800044 	addi	r2,r2,1
80085c44:	41000115 	stw	r4,4(r8)
80085c48:	41400015 	stw	r5,0(r8)
80085c4c:	d8c02015 	stw	r3,128(sp)
80085c50:	d8801f15 	stw	r2,124(sp)
80085c54:	010001c4 	movi	r4,7
80085c58:	20812116 	blt	r4,r2,800860e0 <___vfprintf_internal_r+0x1e60>
80085c5c:	42000204 	addi	r8,r8,8
80085c60:	0463c83a 	sub	r17,zero,r17
80085c64:	0440730e 	bge	zero,r17,80085e34 <___vfprintf_internal_r+0x1bb4>
80085c68:	05800404 	movi	r22,16
80085c6c:	b440860e 	bge	r22,r17,80085e88 <___vfprintf_internal_r+0x1c08>
80085c70:	01600274 	movhi	r5,32777
80085c74:	295a8884 	addi	r5,r5,27170
80085c78:	d9402b15 	stw	r5,172(sp)
80085c7c:	070001c4 	movi	fp,7
80085c80:	dcc02c17 	ldw	r19,176(sp)
80085c84:	00000306 	br	80085c94 <___vfprintf_internal_r+0x1a14>
80085c88:	42000204 	addi	r8,r8,8
80085c8c:	8c7ffc04 	addi	r17,r17,-16
80085c90:	b440800e 	bge	r22,r17,80085e94 <___vfprintf_internal_r+0x1c14>
80085c94:	18c00404 	addi	r3,r3,16
80085c98:	10800044 	addi	r2,r2,1
80085c9c:	45000015 	stw	r20,0(r8)
80085ca0:	45800115 	stw	r22,4(r8)
80085ca4:	d8c02015 	stw	r3,128(sp)
80085ca8:	d8801f15 	stw	r2,124(sp)
80085cac:	e0bff60e 	bge	fp,r2,80085c88 <___vfprintf_internal_r+0x1a08>
80085cb0:	d9801e04 	addi	r6,sp,120
80085cb4:	b80b883a 	mov	r5,r23
80085cb8:	9809883a 	mov	r4,r19
80085cbc:	008cf9c0 	call	8008cf9c <__sprint_r>
80085cc0:	103a711e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085cc4:	d8c02017 	ldw	r3,128(sp)
80085cc8:	d8801f17 	ldw	r2,124(sp)
80085ccc:	da000404 	addi	r8,sp,16
80085cd0:	003fee06 	br	80085c8c <___vfprintf_internal_r+0x1a0c>
80085cd4:	00bfffc4 	movi	r2,-1
80085cd8:	003a6f06 	br	80084698 <___vfprintf_internal_r+0x418>
80085cdc:	008011c4 	movi	r2,71
80085ce0:	1440b816 	blt	r2,r17,80085fc4 <___vfprintf_internal_r+0x1d44>
80085ce4:	04200274 	movhi	r16,32777
80085ce8:	841a7204 	addi	r16,r16,27080
80085cec:	00c000c4 	movi	r3,3
80085cf0:	00bfdfc4 	movi	r2,-129
80085cf4:	d8c02a15 	stw	r3,168(sp)
80085cf8:	90a4703a 	and	r18,r18,r2
80085cfc:	df002783 	ldbu	fp,158(sp)
80085d00:	d8c02e15 	stw	r3,184(sp)
80085d04:	d8002915 	stw	zero,164(sp)
80085d08:	d8003215 	stw	zero,200(sp)
80085d0c:	003b2906 	br	800849b4 <___vfprintf_internal_r+0x734>
80085d10:	d9002d17 	ldw	r4,180(sp)
80085d14:	24c00017 	ldw	r19,0(r4)
80085d18:	21000104 	addi	r4,r4,4
80085d1c:	d9002d15 	stw	r4,180(sp)
80085d20:	982dd7fa 	srai	r22,r19,31
80085d24:	b005883a 	mov	r2,r22
80085d28:	003a9f06 	br	800847a8 <___vfprintf_internal_r+0x528>
80085d2c:	d9402d17 	ldw	r5,180(sp)
80085d30:	d8c02f17 	ldw	r3,188(sp)
80085d34:	28800017 	ldw	r2,0(r5)
80085d38:	29400104 	addi	r5,r5,4
80085d3c:	d9402d15 	stw	r5,180(sp)
80085d40:	10c00015 	stw	r3,0(r2)
80085d44:	00398606 	br	80084360 <___vfprintf_internal_r+0xe0>
80085d48:	d9402d17 	ldw	r5,180(sp)
80085d4c:	002d883a 	mov	r22,zero
80085d50:	2cc00017 	ldw	r19,0(r5)
80085d54:	29400104 	addi	r5,r5,4
80085d58:	d9402d15 	stw	r5,180(sp)
80085d5c:	003c2306 	br	80084dec <___vfprintf_internal_r+0xb6c>
80085d60:	d8c02d17 	ldw	r3,180(sp)
80085d64:	d9002917 	ldw	r4,164(sp)
80085d68:	002d883a 	mov	r22,zero
80085d6c:	18800104 	addi	r2,r3,4
80085d70:	1cc0000b 	ldhu	r19,0(r3)
80085d74:	203dc10e 	bge	r4,zero,8008547c <___vfprintf_internal_r+0x11fc>
80085d78:	003f7506 	br	80085b50 <___vfprintf_internal_r+0x18d0>
80085d7c:	04200274 	movhi	r16,32777
80085d80:	841a7004 	addi	r16,r16,27072
80085d84:	003acc06 	br	800848b8 <___vfprintf_internal_r+0x638>
80085d88:	d9002c17 	ldw	r4,176(sp)
80085d8c:	d9801e04 	addi	r6,sp,120
80085d90:	b80b883a 	mov	r5,r23
80085d94:	008cf9c0 	call	8008cf9c <__sprint_r>
80085d98:	103a3b1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085d9c:	dc402617 	ldw	r17,152(sp)
80085da0:	d8c02017 	ldw	r3,128(sp)
80085da4:	da000404 	addi	r8,sp,16
80085da8:	003f9c06 	br	80085c1c <___vfprintf_internal_r+0x199c>
80085dac:	ac400043 	ldbu	r17,1(r21)
80085db0:	94800814 	ori	r18,r18,32
80085db4:	ad400044 	addi	r21,r21,1
80085db8:	8c403fcc 	andi	r17,r17,255
80085dbc:	8c40201c 	xori	r17,r17,128
80085dc0:	8c7fe004 	addi	r17,r17,-128
80085dc4:	00398f06 	br	80084404 <___vfprintf_internal_r+0x184>
80085dc8:	d8c02d15 	stw	r3,180(sp)
80085dcc:	0039883a 	mov	fp,zero
80085dd0:	003e3506 	br	800856a8 <___vfprintf_internal_r+0x1428>
80085dd4:	d9002c17 	ldw	r4,176(sp)
80085dd8:	d9801e04 	addi	r6,sp,120
80085ddc:	b80b883a 	mov	r5,r23
80085de0:	008cf9c0 	call	8008cf9c <__sprint_r>
80085de4:	103a281e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085de8:	d8c02017 	ldw	r3,128(sp)
80085dec:	da000404 	addi	r8,sp,16
80085df0:	003cd006 	br	80085134 <___vfprintf_internal_r+0xeb4>
80085df4:	8009883a 	mov	r4,r16
80085df8:	da003d15 	stw	r8,244(sp)
80085dfc:	00820100 	call	80082010 <strlen>
80085e00:	d8802e15 	stw	r2,184(sp)
80085e04:	da003d17 	ldw	r8,244(sp)
80085e08:	103c340e 	bge	r2,zero,80084edc <___vfprintf_internal_r+0xc5c>
80085e0c:	0005883a 	mov	r2,zero
80085e10:	003c3206 	br	80084edc <___vfprintf_internal_r+0xc5c>
80085e14:	d9002c17 	ldw	r4,176(sp)
80085e18:	d9801e04 	addi	r6,sp,120
80085e1c:	b80b883a 	mov	r5,r23
80085e20:	008cf9c0 	call	8008cf9c <__sprint_r>
80085e24:	103a181e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085e28:	d8c02017 	ldw	r3,128(sp)
80085e2c:	d8801f17 	ldw	r2,124(sp)
80085e30:	da000404 	addi	r8,sp,16
80085e34:	d9403317 	ldw	r5,204(sp)
80085e38:	10800044 	addi	r2,r2,1
80085e3c:	44000015 	stw	r16,0(r8)
80085e40:	28c7883a 	add	r3,r5,r3
80085e44:	003b7d06 	br	80084c3c <___vfprintf_internal_r+0x9bc>
80085e48:	01200274 	movhi	r4,32777
80085e4c:	211a8c84 	addi	r4,r4,27186
80085e50:	d9003515 	stw	r4,212(sp)
80085e54:	003b1406 	br	80084aa8 <___vfprintf_internal_r+0x828>
80085e58:	013fffc4 	movi	r4,-1
80085e5c:	003a3506 	br	80084734 <___vfprintf_internal_r+0x4b4>
80085e60:	0023883a 	mov	r17,zero
80085e64:	003d9d06 	br	800854dc <___vfprintf_internal_r+0x125c>
80085e68:	d9002c17 	ldw	r4,176(sp)
80085e6c:	d9801e04 	addi	r6,sp,120
80085e70:	b80b883a 	mov	r5,r23
80085e74:	008cf9c0 	call	8008cf9c <__sprint_r>
80085e78:	103a031e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085e7c:	d8c02017 	ldw	r3,128(sp)
80085e80:	da000404 	addi	r8,sp,16
80085e84:	003d9406 	br	800854d8 <___vfprintf_internal_r+0x1258>
80085e88:	01200274 	movhi	r4,32777
80085e8c:	211a8884 	addi	r4,r4,27170
80085e90:	d9002b15 	stw	r4,172(sp)
80085e94:	d9002b17 	ldw	r4,172(sp)
80085e98:	1c47883a 	add	r3,r3,r17
80085e9c:	10800044 	addi	r2,r2,1
80085ea0:	41000015 	stw	r4,0(r8)
80085ea4:	44400115 	stw	r17,4(r8)
80085ea8:	d8c02015 	stw	r3,128(sp)
80085eac:	d8801f15 	stw	r2,124(sp)
80085eb0:	010001c4 	movi	r4,7
80085eb4:	20bfd716 	blt	r4,r2,80085e14 <___vfprintf_internal_r+0x1b94>
80085eb8:	42000204 	addi	r8,r8,8
80085ebc:	003fdd06 	br	80085e34 <___vfprintf_internal_r+0x1bb4>
80085ec0:	d9002c17 	ldw	r4,176(sp)
80085ec4:	d9801e04 	addi	r6,sp,120
80085ec8:	b80b883a 	mov	r5,r23
80085ecc:	008cf9c0 	call	8008cf9c <__sprint_r>
80085ed0:	1039ed1e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085ed4:	d8802617 	ldw	r2,152(sp)
80085ed8:	d8c02017 	ldw	r3,128(sp)
80085edc:	da000404 	addi	r8,sp,16
80085ee0:	003e1006 	br	80085724 <___vfprintf_internal_r+0x14a4>
80085ee4:	00800044 	movi	r2,1
80085ee8:	10803fcc 	andi	r2,r2,255
80085eec:	00c00044 	movi	r3,1
80085ef0:	10fa3526 	beq	r2,r3,800847c8 <___vfprintf_internal_r+0x548>
80085ef4:	00c00084 	movi	r3,2
80085ef8:	10fbcb26 	beq	r2,r3,80084e28 <___vfprintf_internal_r+0xba8>
80085efc:	003a8f06 	br	8008493c <___vfprintf_internal_r+0x6bc>
80085f00:	01200274 	movhi	r4,32777
80085f04:	211a8c84 	addi	r4,r4,27186
80085f08:	d9003515 	stw	r4,212(sp)
80085f0c:	003b7606 	br	80084ce8 <___vfprintf_internal_r+0xa68>
80085f10:	d8802917 	ldw	r2,164(sp)
80085f14:	00c00184 	movi	r3,6
80085f18:	1880012e 	bgeu	r3,r2,80085f20 <___vfprintf_internal_r+0x1ca0>
80085f1c:	1805883a 	mov	r2,r3
80085f20:	d8802e15 	stw	r2,184(sp)
80085f24:	1000ef16 	blt	r2,zero,800862e4 <___vfprintf_internal_r+0x2064>
80085f28:	04200274 	movhi	r16,32777
80085f2c:	d8802a15 	stw	r2,168(sp)
80085f30:	dcc02d15 	stw	r19,180(sp)
80085f34:	d8002915 	stw	zero,164(sp)
80085f38:	d8003215 	stw	zero,200(sp)
80085f3c:	841a7e04 	addi	r16,r16,27128
80085f40:	0039883a 	mov	fp,zero
80085f44:	003aa206 	br	800849d0 <___vfprintf_internal_r+0x750>
80085f48:	0021883a 	mov	r16,zero
80085f4c:	003e0706 	br	8008576c <___vfprintf_internal_r+0x14ec>
80085f50:	d9002c17 	ldw	r4,176(sp)
80085f54:	d9801e04 	addi	r6,sp,120
80085f58:	b80b883a 	mov	r5,r23
80085f5c:	008cf9c0 	call	8008cf9c <__sprint_r>
80085f60:	1039c91e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
80085f64:	d8802617 	ldw	r2,152(sp)
80085f68:	d9403317 	ldw	r5,204(sp)
80085f6c:	d8c02017 	ldw	r3,128(sp)
80085f70:	da000404 	addi	r8,sp,16
80085f74:	2885c83a 	sub	r2,r5,r2
80085f78:	003dfb06 	br	80085768 <___vfprintf_internal_r+0x14e8>
80085f7c:	9080004c 	andi	r2,r18,1
80085f80:	103e8f1e 	bne	r2,zero,800859c0 <___vfprintf_internal_r+0x1740>
80085f84:	d8802117 	ldw	r2,132(sp)
80085f88:	003e9e06 	br	80085a04 <___vfprintf_internal_r+0x1784>
80085f8c:	1025883a 	mov	r18,r2
80085f90:	0039883a 	mov	fp,zero
80085f94:	00800084 	movi	r2,2
80085f98:	003fd306 	br	80085ee8 <___vfprintf_internal_r+0x1c68>
80085f9c:	07000b44 	movi	fp,45
80085fa0:	df002785 	stb	fp,158(sp)
80085fa4:	003a4006 	br	800848a8 <___vfprintf_internal_r+0x628>
80085fa8:	00c00b44 	movi	r3,45
80085fac:	d8c02785 	stb	r3,158(sp)
80085fb0:	d8802a15 	stw	r2,168(sp)
80085fb4:	dc802b17 	ldw	r18,172(sp)
80085fb8:	d8002915 	stw	zero,164(sp)
80085fbc:	07000b44 	movi	fp,45
80085fc0:	003a8006 	br	800849c4 <___vfprintf_internal_r+0x744>
80085fc4:	04200274 	movhi	r16,32777
80085fc8:	841a7304 	addi	r16,r16,27084
80085fcc:	003f4706 	br	80085cec <___vfprintf_internal_r+0x1a6c>
80085fd0:	d8c02d17 	ldw	r3,180(sp)
80085fd4:	d9002f17 	ldw	r4,188(sp)
80085fd8:	18800017 	ldw	r2,0(r3)
80085fdc:	18c00104 	addi	r3,r3,4
80085fe0:	d8c02d15 	stw	r3,180(sp)
80085fe4:	11000015 	stw	r4,0(r2)
80085fe8:	0038dd06 	br	80084360 <___vfprintf_internal_r+0xe0>
80085fec:	dd802617 	ldw	r22,152(sp)
80085ff0:	00bfff44 	movi	r2,-3
80085ff4:	b0801c16 	blt	r22,r2,80086068 <___vfprintf_internal_r+0x1de8>
80085ff8:	d9402917 	ldw	r5,164(sp)
80085ffc:	2d801a16 	blt	r5,r22,80086068 <___vfprintf_internal_r+0x1de8>
80086000:	dd803215 	stw	r22,200(sp)
80086004:	003e8906 	br	80085a2c <___vfprintf_internal_r+0x17ac>
80086008:	01200274 	movhi	r4,32777
8008600c:	211a8884 	addi	r4,r4,27170
80086010:	d9002b15 	stw	r4,172(sp)
80086014:	003c9106 	br	8008525c <___vfprintf_internal_r+0xfdc>
80086018:	e005883a 	mov	r2,fp
8008601c:	003e7906 	br	80085a04 <___vfprintf_internal_r+0x1784>
80086020:	d9402917 	ldw	r5,164(sp)
80086024:	df002783 	ldbu	fp,158(sp)
80086028:	dcc02d15 	stw	r19,180(sp)
8008602c:	d9402a15 	stw	r5,168(sp)
80086030:	d9402e15 	stw	r5,184(sp)
80086034:	d8002915 	stw	zero,164(sp)
80086038:	d8003215 	stw	zero,200(sp)
8008603c:	003a5d06 	br	800849b4 <___vfprintf_internal_r+0x734>
80086040:	9080004c 	andi	r2,r18,1
80086044:	0039883a 	mov	fp,zero
80086048:	10000426 	beq	r2,zero,8008605c <___vfprintf_internal_r+0x1ddc>
8008604c:	00800c04 	movi	r2,48
80086050:	dc001dc4 	addi	r16,sp,119
80086054:	d8801dc5 	stb	r2,119(sp)
80086058:	003b8006 	br	80084e5c <___vfprintf_internal_r+0xbdc>
8008605c:	d8002e15 	stw	zero,184(sp)
80086060:	dc001e04 	addi	r16,sp,120
80086064:	003a4d06 	br	8008499c <___vfprintf_internal_r+0x71c>
80086068:	8c7fff84 	addi	r17,r17,-2
8008606c:	b5bfffc4 	addi	r22,r22,-1
80086070:	dd802615 	stw	r22,152(sp)
80086074:	dc4022c5 	stb	r17,139(sp)
80086078:	b000bf16 	blt	r22,zero,80086378 <___vfprintf_internal_r+0x20f8>
8008607c:	00800ac4 	movi	r2,43
80086080:	d8802305 	stb	r2,140(sp)
80086084:	00800244 	movi	r2,9
80086088:	15807016 	blt	r2,r22,8008624c <___vfprintf_internal_r+0x1fcc>
8008608c:	00800c04 	movi	r2,48
80086090:	b5800c04 	addi	r22,r22,48
80086094:	d8802345 	stb	r2,141(sp)
80086098:	dd802385 	stb	r22,142(sp)
8008609c:	d88023c4 	addi	r2,sp,143
800860a0:	df0022c4 	addi	fp,sp,139
800860a4:	d8c03317 	ldw	r3,204(sp)
800860a8:	1739c83a 	sub	fp,r2,fp
800860ac:	d9003317 	ldw	r4,204(sp)
800860b0:	e0c7883a 	add	r3,fp,r3
800860b4:	df003a15 	stw	fp,232(sp)
800860b8:	d8c02e15 	stw	r3,184(sp)
800860bc:	00800044 	movi	r2,1
800860c0:	1100b30e 	bge	r2,r4,80086390 <___vfprintf_internal_r+0x2110>
800860c4:	d8c02e17 	ldw	r3,184(sp)
800860c8:	18c00044 	addi	r3,r3,1
800860cc:	d8c02e15 	stw	r3,184(sp)
800860d0:	1805883a 	mov	r2,r3
800860d4:	1800ac16 	blt	r3,zero,80086388 <___vfprintf_internal_r+0x2108>
800860d8:	d8003215 	stw	zero,200(sp)
800860dc:	003e5d06 	br	80085a54 <___vfprintf_internal_r+0x17d4>
800860e0:	d9002c17 	ldw	r4,176(sp)
800860e4:	d9801e04 	addi	r6,sp,120
800860e8:	b80b883a 	mov	r5,r23
800860ec:	008cf9c0 	call	8008cf9c <__sprint_r>
800860f0:	1039651e 	bne	r2,zero,80084688 <___vfprintf_internal_r+0x408>
800860f4:	dc402617 	ldw	r17,152(sp)
800860f8:	d8c02017 	ldw	r3,128(sp)
800860fc:	d8801f17 	ldw	r2,124(sp)
80086100:	da000404 	addi	r8,sp,16
80086104:	003ed606 	br	80085c60 <___vfprintf_internal_r+0x19e0>
80086108:	582b883a 	mov	r21,r11
8008610c:	d8002915 	stw	zero,164(sp)
80086110:	0038bd06 	br	80084408 <___vfprintf_internal_r+0x188>
80086114:	d8802917 	ldw	r2,164(sp)
80086118:	103e071e 	bne	r2,zero,80085938 <___vfprintf_internal_r+0x16b8>
8008611c:	dc002915 	stw	r16,164(sp)
80086120:	003e0506 	br	80085938 <___vfprintf_internal_r+0x16b8>
80086124:	d9002917 	ldw	r4,164(sp)
80086128:	20c00044 	addi	r3,r4,1
8008612c:	003e0f06 	br	8008596c <___vfprintf_internal_r+0x16ec>
80086130:	01400184 	movi	r5,6
80086134:	d9402915 	stw	r5,164(sp)
80086138:	003dff06 	br	80085938 <___vfprintf_internal_r+0x16b8>
8008613c:	d8802104 	addi	r2,sp,132
80086140:	d8800315 	stw	r2,12(sp)
80086144:	d8802504 	addi	r2,sp,148
80086148:	d8800215 	stw	r2,8(sp)
8008614c:	d8802604 	addi	r2,sp,152
80086150:	d8800115 	stw	r2,4(sp)
80086154:	d8802917 	ldw	r2,164(sp)
80086158:	d9403617 	ldw	r5,216(sp)
8008615c:	d9002c17 	ldw	r4,176(sp)
80086160:	d8800015 	stw	r2,0(sp)
80086164:	01c000c4 	movi	r7,3
80086168:	980d883a 	mov	r6,r19
8008616c:	da003d15 	stw	r8,244(sp)
80086170:	00869c80 	call	800869c8 <_dtoa_r>
80086174:	d8c02917 	ldw	r3,164(sp)
80086178:	da003d17 	ldw	r8,244(sp)
8008617c:	1021883a 	mov	r16,r2
80086180:	10f9883a 	add	fp,r2,r3
80086184:	81000007 	ldb	r4,0(r16)
80086188:	00800c04 	movi	r2,48
8008618c:	20805e26 	beq	r4,r2,80086308 <___vfprintf_internal_r+0x2088>
80086190:	d8c02617 	ldw	r3,152(sp)
80086194:	e0f9883a 	add	fp,fp,r3
80086198:	003e0a06 	br	800859c4 <___vfprintf_internal_r+0x1744>
8008619c:	00c00b44 	movi	r3,45
800861a0:	24e0003c 	xorhi	r19,r4,32768
800861a4:	d8c02a05 	stb	r3,168(sp)
800861a8:	003de906 	br	80085950 <___vfprintf_internal_r+0x16d0>
800861ac:	d8c03217 	ldw	r3,200(sp)
800861b0:	00c07a0e 	bge	zero,r3,8008639c <___vfprintf_internal_r+0x211c>
800861b4:	00800044 	movi	r2,1
800861b8:	d9003317 	ldw	r4,204(sp)
800861bc:	1105883a 	add	r2,r2,r4
800861c0:	d8802e15 	stw	r2,184(sp)
800861c4:	10004e16 	blt	r2,zero,80086300 <___vfprintf_internal_r+0x2080>
800861c8:	044019c4 	movi	r17,103
800861cc:	003e2106 	br	80085a54 <___vfprintf_internal_r+0x17d4>
800861d0:	d9002917 	ldw	r4,164(sp)
800861d4:	d8802104 	addi	r2,sp,132
800861d8:	d8800315 	stw	r2,12(sp)
800861dc:	d9000015 	stw	r4,0(sp)
800861e0:	d8802504 	addi	r2,sp,148
800861e4:	d9403617 	ldw	r5,216(sp)
800861e8:	d9002c17 	ldw	r4,176(sp)
800861ec:	d8800215 	stw	r2,8(sp)
800861f0:	d8802604 	addi	r2,sp,152
800861f4:	d8800115 	stw	r2,4(sp)
800861f8:	01c000c4 	movi	r7,3
800861fc:	980d883a 	mov	r6,r19
80086200:	da003d15 	stw	r8,244(sp)
80086204:	00869c80 	call	800869c8 <_dtoa_r>
80086208:	d8c02917 	ldw	r3,164(sp)
8008620c:	da003d17 	ldw	r8,244(sp)
80086210:	1021883a 	mov	r16,r2
80086214:	00801184 	movi	r2,70
80086218:	80f9883a 	add	fp,r16,r3
8008621c:	88bfd926 	beq	r17,r2,80086184 <___vfprintf_internal_r+0x1f04>
80086220:	003de806 	br	800859c4 <___vfprintf_internal_r+0x1744>
80086224:	d9002917 	ldw	r4,164(sp)
80086228:	00c04d0e 	bge	zero,r3,80086360 <___vfprintf_internal_r+0x20e0>
8008622c:	2000441e 	bne	r4,zero,80086340 <___vfprintf_internal_r+0x20c0>
80086230:	9480004c 	andi	r18,r18,1
80086234:	9000421e 	bne	r18,zero,80086340 <___vfprintf_internal_r+0x20c0>
80086238:	1805883a 	mov	r2,r3
8008623c:	18007016 	blt	r3,zero,80086400 <___vfprintf_internal_r+0x2180>
80086240:	d8c03217 	ldw	r3,200(sp)
80086244:	d8c02e15 	stw	r3,184(sp)
80086248:	003e0206 	br	80085a54 <___vfprintf_internal_r+0x17d4>
8008624c:	df0022c4 	addi	fp,sp,139
80086250:	dc002915 	stw	r16,164(sp)
80086254:	4027883a 	mov	r19,r8
80086258:	e021883a 	mov	r16,fp
8008625c:	b009883a 	mov	r4,r22
80086260:	01400284 	movi	r5,10
80086264:	008f9500 	call	8008f950 <__modsi3>
80086268:	10800c04 	addi	r2,r2,48
8008626c:	843fffc4 	addi	r16,r16,-1
80086270:	b009883a 	mov	r4,r22
80086274:	01400284 	movi	r5,10
80086278:	80800005 	stb	r2,0(r16)
8008627c:	008f8cc0 	call	8008f8cc <__divsi3>
80086280:	102d883a 	mov	r22,r2
80086284:	00800244 	movi	r2,9
80086288:	15bff416 	blt	r2,r22,8008625c <___vfprintf_internal_r+0x1fdc>
8008628c:	9811883a 	mov	r8,r19
80086290:	b0800c04 	addi	r2,r22,48
80086294:	8027883a 	mov	r19,r16
80086298:	997fffc4 	addi	r5,r19,-1
8008629c:	98bfffc5 	stb	r2,-1(r19)
800862a0:	dc002917 	ldw	r16,164(sp)
800862a4:	2f006a2e 	bgeu	r5,fp,80086450 <___vfprintf_internal_r+0x21d0>
800862a8:	d9c02384 	addi	r7,sp,142
800862ac:	3ccfc83a 	sub	r7,r7,r19
800862b0:	d9002344 	addi	r4,sp,141
800862b4:	e1cf883a 	add	r7,fp,r7
800862b8:	00000106 	br	800862c0 <___vfprintf_internal_r+0x2040>
800862bc:	28800003 	ldbu	r2,0(r5)
800862c0:	20800005 	stb	r2,0(r4)
800862c4:	21000044 	addi	r4,r4,1
800862c8:	29400044 	addi	r5,r5,1
800862cc:	393ffb1e 	bne	r7,r4,800862bc <___vfprintf_internal_r+0x203c>
800862d0:	d8802304 	addi	r2,sp,140
800862d4:	14c5c83a 	sub	r2,r2,r19
800862d8:	d8c02344 	addi	r3,sp,141
800862dc:	1885883a 	add	r2,r3,r2
800862e0:	003f7006 	br	800860a4 <___vfprintf_internal_r+0x1e24>
800862e4:	0005883a 	mov	r2,zero
800862e8:	003f0f06 	br	80085f28 <___vfprintf_internal_r+0x1ca8>
800862ec:	d8c03217 	ldw	r3,200(sp)
800862f0:	18c00044 	addi	r3,r3,1
800862f4:	d8c02e15 	stw	r3,184(sp)
800862f8:	1805883a 	mov	r2,r3
800862fc:	183fb20e 	bge	r3,zero,800861c8 <___vfprintf_internal_r+0x1f48>
80086300:	0005883a 	mov	r2,zero
80086304:	003fb006 	br	800861c8 <___vfprintf_internal_r+0x1f48>
80086308:	d9003617 	ldw	r4,216(sp)
8008630c:	000d883a 	mov	r6,zero
80086310:	000f883a 	mov	r7,zero
80086314:	980b883a 	mov	r5,r19
80086318:	d8c03c15 	stw	r3,240(sp)
8008631c:	da003d15 	stw	r8,244(sp)
80086320:	0090c140 	call	80090c14 <__eqdf2>
80086324:	d8c03c17 	ldw	r3,240(sp)
80086328:	da003d17 	ldw	r8,244(sp)
8008632c:	103f9826 	beq	r2,zero,80086190 <___vfprintf_internal_r+0x1f10>
80086330:	00800044 	movi	r2,1
80086334:	10c7c83a 	sub	r3,r2,r3
80086338:	d8c02615 	stw	r3,152(sp)
8008633c:	003f9506 	br	80086194 <___vfprintf_internal_r+0x1f14>
80086340:	d9002917 	ldw	r4,164(sp)
80086344:	d8c03217 	ldw	r3,200(sp)
80086348:	20800044 	addi	r2,r4,1
8008634c:	1885883a 	add	r2,r3,r2
80086350:	d8802e15 	stw	r2,184(sp)
80086354:	103dbf0e 	bge	r2,zero,80085a54 <___vfprintf_internal_r+0x17d4>
80086358:	0005883a 	mov	r2,zero
8008635c:	003dbd06 	br	80085a54 <___vfprintf_internal_r+0x17d4>
80086360:	2000211e 	bne	r4,zero,800863e8 <___vfprintf_internal_r+0x2168>
80086364:	9480004c 	andi	r18,r18,1
80086368:	90001f1e 	bne	r18,zero,800863e8 <___vfprintf_internal_r+0x2168>
8008636c:	00800044 	movi	r2,1
80086370:	d8802e15 	stw	r2,184(sp)
80086374:	003db706 	br	80085a54 <___vfprintf_internal_r+0x17d4>
80086378:	00800b44 	movi	r2,45
8008637c:	05adc83a 	sub	r22,zero,r22
80086380:	d8802305 	stb	r2,140(sp)
80086384:	003f3f06 	br	80086084 <___vfprintf_internal_r+0x1e04>
80086388:	0005883a 	mov	r2,zero
8008638c:	003f5206 	br	800860d8 <___vfprintf_internal_r+0x1e58>
80086390:	90a4703a 	and	r18,r18,r2
80086394:	903f4e26 	beq	r18,zero,800860d0 <___vfprintf_internal_r+0x1e50>
80086398:	003f4a06 	br	800860c4 <___vfprintf_internal_r+0x1e44>
8008639c:	00800084 	movi	r2,2
800863a0:	10c5c83a 	sub	r2,r2,r3
800863a4:	003f8406 	br	800861b8 <___vfprintf_internal_r+0x1f38>
800863a8:	d8802d17 	ldw	r2,180(sp)
800863ac:	d9002d17 	ldw	r4,180(sp)
800863b0:	ac400043 	ldbu	r17,1(r21)
800863b4:	10800017 	ldw	r2,0(r2)
800863b8:	582b883a 	mov	r21,r11
800863bc:	d8802915 	stw	r2,164(sp)
800863c0:	20800104 	addi	r2,r4,4
800863c4:	d9002917 	ldw	r4,164(sp)
800863c8:	d8802d15 	stw	r2,180(sp)
800863cc:	203e7a0e 	bge	r4,zero,80085db8 <___vfprintf_internal_r+0x1b38>
800863d0:	8c403fcc 	andi	r17,r17,255
800863d4:	00bfffc4 	movi	r2,-1
800863d8:	8c40201c 	xori	r17,r17,128
800863dc:	d8802915 	stw	r2,164(sp)
800863e0:	8c7fe004 	addi	r17,r17,-128
800863e4:	00380706 	br	80084404 <___vfprintf_internal_r+0x184>
800863e8:	d8c02917 	ldw	r3,164(sp)
800863ec:	18c00084 	addi	r3,r3,2
800863f0:	d8c02e15 	stw	r3,184(sp)
800863f4:	1805883a 	mov	r2,r3
800863f8:	183d960e 	bge	r3,zero,80085a54 <___vfprintf_internal_r+0x17d4>
800863fc:	003fd606 	br	80086358 <___vfprintf_internal_r+0x20d8>
80086400:	0005883a 	mov	r2,zero
80086404:	003f8e06 	br	80086240 <___vfprintf_internal_r+0x1fc0>
80086408:	9080004c 	andi	r2,r18,1
8008640c:	103f811e 	bne	r2,zero,80086214 <___vfprintf_internal_r+0x1f94>
80086410:	d8802117 	ldw	r2,132(sp)
80086414:	1405c83a 	sub	r2,r2,r16
80086418:	d8803315 	stw	r2,204(sp)
8008641c:	b47ef326 	beq	r22,r17,80085fec <___vfprintf_internal_r+0x1d6c>
80086420:	dd802617 	ldw	r22,152(sp)
80086424:	003f1106 	br	8008606c <___vfprintf_internal_r+0x1dec>
80086428:	d9c02785 	stb	r7,158(sp)
8008642c:	00390406 	br	80084840 <___vfprintf_internal_r+0x5c0>
80086430:	d9c02785 	stb	r7,158(sp)
80086434:	0038d306 	br	80084784 <___vfprintf_internal_r+0x504>
80086438:	d9c02785 	stb	r7,158(sp)
8008643c:	003a6106 	br	80084dc4 <___vfprintf_internal_r+0xb44>
80086440:	d9c02785 	stb	r7,158(sp)
80086444:	003af806 	br	80085028 <___vfprintf_internal_r+0xda8>
80086448:	0005883a 	mov	r2,zero
8008644c:	003d7e06 	br	80085a48 <___vfprintf_internal_r+0x17c8>
80086450:	d8802344 	addi	r2,sp,141
80086454:	003f1306 	br	800860a4 <___vfprintf_internal_r+0x1e24>
80086458:	d9c02785 	stb	r7,158(sp)
8008645c:	00392306 	br	800848ec <___vfprintf_internal_r+0x66c>
80086460:	d9c02785 	stb	r7,158(sp)
80086464:	003aa906 	br	80084f0c <___vfprintf_internal_r+0xc8c>
80086468:	d9c02785 	stb	r7,158(sp)
8008646c:	003a3d06 	br	80084d64 <___vfprintf_internal_r+0xae4>
80086470:	d9c02785 	stb	r7,158(sp)
80086474:	003aca06 	br	80084fa0 <___vfprintf_internal_r+0xd20>

80086478 <__vfprintf_internal>:
80086478:	00a002b4 	movhi	r2,32778
8008647c:	10a29e04 	addi	r2,r2,-30088
80086480:	300f883a 	mov	r7,r6
80086484:	280d883a 	mov	r6,r5
80086488:	200b883a 	mov	r5,r4
8008648c:	11000017 	ldw	r4,0(r2)
80086490:	00842801 	jmpi	80084280 <___vfprintf_internal_r>

80086494 <__sbprintf>:
80086494:	2880030b 	ldhu	r2,12(r5)
80086498:	2ac01917 	ldw	r11,100(r5)
8008649c:	2a80038b 	ldhu	r10,14(r5)
800864a0:	2a400717 	ldw	r9,28(r5)
800864a4:	2a000917 	ldw	r8,36(r5)
800864a8:	defee204 	addi	sp,sp,-1144
800864ac:	00c10004 	movi	r3,1024
800864b0:	dc011a15 	stw	r16,1128(sp)
800864b4:	10bfff4c 	andi	r2,r2,65533
800864b8:	2821883a 	mov	r16,r5
800864bc:	d8cb883a 	add	r5,sp,r3
800864c0:	dc811c15 	stw	r18,1136(sp)
800864c4:	dc411b15 	stw	r17,1132(sp)
800864c8:	dfc11d15 	stw	ra,1140(sp)
800864cc:	2025883a 	mov	r18,r4
800864d0:	d881030d 	sth	r2,1036(sp)
800864d4:	dac11915 	stw	r11,1124(sp)
800864d8:	da81038d 	sth	r10,1038(sp)
800864dc:	da410715 	stw	r9,1052(sp)
800864e0:	da010915 	stw	r8,1060(sp)
800864e4:	dec10015 	stw	sp,1024(sp)
800864e8:	dec10415 	stw	sp,1040(sp)
800864ec:	d8c10215 	stw	r3,1032(sp)
800864f0:	d8c10515 	stw	r3,1044(sp)
800864f4:	d8010615 	stw	zero,1048(sp)
800864f8:	00842800 	call	80084280 <___vfprintf_internal_r>
800864fc:	1023883a 	mov	r17,r2
80086500:	10000416 	blt	r2,zero,80086514 <__sbprintf+0x80>
80086504:	d9410004 	addi	r5,sp,1024
80086508:	9009883a 	mov	r4,r18
8008650c:	008826c0 	call	8008826c <_fflush_r>
80086510:	10000d1e 	bne	r2,zero,80086548 <__sbprintf+0xb4>
80086514:	d881030b 	ldhu	r2,1036(sp)
80086518:	1080100c 	andi	r2,r2,64
8008651c:	10000326 	beq	r2,zero,8008652c <__sbprintf+0x98>
80086520:	8080030b 	ldhu	r2,12(r16)
80086524:	10801014 	ori	r2,r2,64
80086528:	8080030d 	sth	r2,12(r16)
8008652c:	8805883a 	mov	r2,r17
80086530:	dfc11d17 	ldw	ra,1140(sp)
80086534:	dc811c17 	ldw	r18,1136(sp)
80086538:	dc411b17 	ldw	r17,1132(sp)
8008653c:	dc011a17 	ldw	r16,1128(sp)
80086540:	dec11e04 	addi	sp,sp,1144
80086544:	f800283a 	ret
80086548:	047fffc4 	movi	r17,-1
8008654c:	003ff106 	br	80086514 <__sbprintf+0x80>

80086550 <_vsnprintf_r>:
80086550:	30003716 	blt	r6,zero,80086630 <_vsnprintf_r+0xe0>
80086554:	deffe404 	addi	sp,sp,-112
80086558:	00c08204 	movi	r3,520
8008655c:	dc001a15 	stw	r16,104(sp)
80086560:	3005883a 	mov	r2,r6
80086564:	dfc01b15 	stw	ra,108(sp)
80086568:	d8c0030d 	sth	r3,12(sp)
8008656c:	d9400015 	stw	r5,0(sp)
80086570:	d9400415 	stw	r5,16(sp)
80086574:	380d883a 	mov	r6,r7
80086578:	2021883a 	mov	r16,r4
8008657c:	10001326 	beq	r2,zero,800865cc <_vsnprintf_r+0x7c>
80086580:	00e002b4 	movhi	r3,32778
80086584:	18e29e04 	addi	r3,r3,-30088
80086588:	19000017 	ldw	r4,0(r3)
8008658c:	d9c01c17 	ldw	r7,112(sp)
80086590:	10bfffc4 	addi	r2,r2,-1
80086594:	d8800215 	stw	r2,8(sp)
80086598:	d8800515 	stw	r2,20(sp)
8008659c:	d80b883a 	mov	r5,sp
800865a0:	00bfffc4 	movi	r2,-1
800865a4:	d880038d 	sth	r2,14(sp)
800865a8:	00820a80 	call	800820a8 <___svfprintf_internal_r>
800865ac:	00ffffc4 	movi	r3,-1
800865b0:	10c01616 	blt	r2,r3,8008660c <_vsnprintf_r+0xbc>
800865b4:	d8c00017 	ldw	r3,0(sp)
800865b8:	18000005 	stb	zero,0(r3)
800865bc:	dfc01b17 	ldw	ra,108(sp)
800865c0:	dc001a17 	ldw	r16,104(sp)
800865c4:	dec01c04 	addi	sp,sp,112
800865c8:	f800283a 	ret
800865cc:	00a002b4 	movhi	r2,32778
800865d0:	10a29e04 	addi	r2,r2,-30088
800865d4:	11000017 	ldw	r4,0(r2)
800865d8:	d9c01c17 	ldw	r7,112(sp)
800865dc:	00bfffc4 	movi	r2,-1
800865e0:	d80b883a 	mov	r5,sp
800865e4:	d8000215 	stw	zero,8(sp)
800865e8:	d8000515 	stw	zero,20(sp)
800865ec:	d880038d 	sth	r2,14(sp)
800865f0:	00820a80 	call	800820a8 <___svfprintf_internal_r>
800865f4:	00ffffc4 	movi	r3,-1
800865f8:	10c00716 	blt	r2,r3,80086618 <_vsnprintf_r+0xc8>
800865fc:	dfc01b17 	ldw	ra,108(sp)
80086600:	dc001a17 	ldw	r16,104(sp)
80086604:	dec01c04 	addi	sp,sp,112
80086608:	f800283a 	ret
8008660c:	00c022c4 	movi	r3,139
80086610:	80c00015 	stw	r3,0(r16)
80086614:	003fe706 	br	800865b4 <_vsnprintf_r+0x64>
80086618:	00c022c4 	movi	r3,139
8008661c:	80c00015 	stw	r3,0(r16)
80086620:	dfc01b17 	ldw	ra,108(sp)
80086624:	dc001a17 	ldw	r16,104(sp)
80086628:	dec01c04 	addi	sp,sp,112
8008662c:	f800283a 	ret
80086630:	008022c4 	movi	r2,139
80086634:	20800015 	stw	r2,0(r4)
80086638:	00bfffc4 	movi	r2,-1
8008663c:	f800283a 	ret

80086640 <vsnprintf>:
80086640:	defffe04 	addi	sp,sp,-8
80086644:	00a002b4 	movhi	r2,32778
80086648:	d9c00015 	stw	r7,0(sp)
8008664c:	10a29e04 	addi	r2,r2,-30088
80086650:	300f883a 	mov	r7,r6
80086654:	280d883a 	mov	r6,r5
80086658:	200b883a 	mov	r5,r4
8008665c:	11000017 	ldw	r4,0(r2)
80086660:	dfc00115 	stw	ra,4(sp)
80086664:	00865500 	call	80086550 <_vsnprintf_r>
80086668:	dfc00117 	ldw	ra,4(sp)
8008666c:	dec00204 	addi	sp,sp,8
80086670:	f800283a 	ret

80086674 <__swsetup_r>:
80086674:	00a002b4 	movhi	r2,32778
80086678:	defffd04 	addi	sp,sp,-12
8008667c:	10a29e04 	addi	r2,r2,-30088
80086680:	dc400115 	stw	r17,4(sp)
80086684:	2023883a 	mov	r17,r4
80086688:	11000017 	ldw	r4,0(r2)
8008668c:	dc000015 	stw	r16,0(sp)
80086690:	dfc00215 	stw	ra,8(sp)
80086694:	2821883a 	mov	r16,r5
80086698:	20000226 	beq	r4,zero,800866a4 <__swsetup_r+0x30>
8008669c:	20800e17 	ldw	r2,56(r4)
800866a0:	10003126 	beq	r2,zero,80086768 <__swsetup_r+0xf4>
800866a4:	8080030b 	ldhu	r2,12(r16)
800866a8:	10c0020c 	andi	r3,r2,8
800866ac:	1009883a 	mov	r4,r2
800866b0:	18000f26 	beq	r3,zero,800866f0 <__swsetup_r+0x7c>
800866b4:	80c00417 	ldw	r3,16(r16)
800866b8:	18001526 	beq	r3,zero,80086710 <__swsetup_r+0x9c>
800866bc:	1100004c 	andi	r4,r2,1
800866c0:	20001c1e 	bne	r4,zero,80086734 <__swsetup_r+0xc0>
800866c4:	1080008c 	andi	r2,r2,2
800866c8:	1000291e 	bne	r2,zero,80086770 <__swsetup_r+0xfc>
800866cc:	80800517 	ldw	r2,20(r16)
800866d0:	80800215 	stw	r2,8(r16)
800866d4:	18001c26 	beq	r3,zero,80086748 <__swsetup_r+0xd4>
800866d8:	0005883a 	mov	r2,zero
800866dc:	dfc00217 	ldw	ra,8(sp)
800866e0:	dc400117 	ldw	r17,4(sp)
800866e4:	dc000017 	ldw	r16,0(sp)
800866e8:	dec00304 	addi	sp,sp,12
800866ec:	f800283a 	ret
800866f0:	2080040c 	andi	r2,r4,16
800866f4:	10002e26 	beq	r2,zero,800867b0 <__swsetup_r+0x13c>
800866f8:	2080010c 	andi	r2,r4,4
800866fc:	10001e1e 	bne	r2,zero,80086778 <__swsetup_r+0x104>
80086700:	80c00417 	ldw	r3,16(r16)
80086704:	20800214 	ori	r2,r4,8
80086708:	8080030d 	sth	r2,12(r16)
8008670c:	183feb1e 	bne	r3,zero,800866bc <__swsetup_r+0x48>
80086710:	1100a00c 	andi	r4,r2,640
80086714:	01408004 	movi	r5,512
80086718:	217fe826 	beq	r4,r5,800866bc <__swsetup_r+0x48>
8008671c:	800b883a 	mov	r5,r16
80086720:	8809883a 	mov	r4,r17
80086724:	00891ec0 	call	800891ec <__smakebuf_r>
80086728:	8080030b 	ldhu	r2,12(r16)
8008672c:	80c00417 	ldw	r3,16(r16)
80086730:	003fe206 	br	800866bc <__swsetup_r+0x48>
80086734:	80800517 	ldw	r2,20(r16)
80086738:	80000215 	stw	zero,8(r16)
8008673c:	0085c83a 	sub	r2,zero,r2
80086740:	80800615 	stw	r2,24(r16)
80086744:	183fe41e 	bne	r3,zero,800866d8 <__swsetup_r+0x64>
80086748:	80c0030b 	ldhu	r3,12(r16)
8008674c:	0005883a 	mov	r2,zero
80086750:	1900200c 	andi	r4,r3,128
80086754:	203fe126 	beq	r4,zero,800866dc <__swsetup_r+0x68>
80086758:	18c01014 	ori	r3,r3,64
8008675c:	80c0030d 	sth	r3,12(r16)
80086760:	00bfffc4 	movi	r2,-1
80086764:	003fdd06 	br	800866dc <__swsetup_r+0x68>
80086768:	00886480 	call	80088648 <__sinit>
8008676c:	003fcd06 	br	800866a4 <__swsetup_r+0x30>
80086770:	0005883a 	mov	r2,zero
80086774:	003fd606 	br	800866d0 <__swsetup_r+0x5c>
80086778:	81400c17 	ldw	r5,48(r16)
8008677c:	28000626 	beq	r5,zero,80086798 <__swsetup_r+0x124>
80086780:	80801004 	addi	r2,r16,64
80086784:	28800326 	beq	r5,r2,80086794 <__swsetup_r+0x120>
80086788:	8809883a 	mov	r4,r17
8008678c:	00887bc0 	call	800887bc <_free_r>
80086790:	8100030b 	ldhu	r4,12(r16)
80086794:	80000c15 	stw	zero,48(r16)
80086798:	80c00417 	ldw	r3,16(r16)
8008679c:	00bff6c4 	movi	r2,-37
800867a0:	1108703a 	and	r4,r2,r4
800867a4:	80000115 	stw	zero,4(r16)
800867a8:	80c00015 	stw	r3,0(r16)
800867ac:	003fd506 	br	80086704 <__swsetup_r+0x90>
800867b0:	00800244 	movi	r2,9
800867b4:	88800015 	stw	r2,0(r17)
800867b8:	20801014 	ori	r2,r4,64
800867bc:	8080030d 	sth	r2,12(r16)
800867c0:	00bfffc4 	movi	r2,-1
800867c4:	003fc506 	br	800866dc <__swsetup_r+0x68>

800867c8 <quorem>:
800867c8:	defff704 	addi	sp,sp,-36
800867cc:	dc800215 	stw	r18,8(sp)
800867d0:	20800417 	ldw	r2,16(r4)
800867d4:	2c800417 	ldw	r18,16(r5)
800867d8:	dfc00815 	stw	ra,32(sp)
800867dc:	ddc00715 	stw	r23,28(sp)
800867e0:	dd800615 	stw	r22,24(sp)
800867e4:	dd400515 	stw	r21,20(sp)
800867e8:	dd000415 	stw	r20,16(sp)
800867ec:	dcc00315 	stw	r19,12(sp)
800867f0:	dc400115 	stw	r17,4(sp)
800867f4:	dc000015 	stw	r16,0(sp)
800867f8:	14807116 	blt	r2,r18,800869c0 <quorem+0x1f8>
800867fc:	94bfffc4 	addi	r18,r18,-1
80086800:	94ad883a 	add	r22,r18,r18
80086804:	b5ad883a 	add	r22,r22,r22
80086808:	2c400504 	addi	r17,r5,20
8008680c:	8da9883a 	add	r20,r17,r22
80086810:	25400504 	addi	r21,r4,20
80086814:	282f883a 	mov	r23,r5
80086818:	adad883a 	add	r22,r21,r22
8008681c:	a1400017 	ldw	r5,0(r20)
80086820:	2021883a 	mov	r16,r4
80086824:	b1000017 	ldw	r4,0(r22)
80086828:	29400044 	addi	r5,r5,1
8008682c:	008f9c40 	call	8008f9c4 <__udivsi3>
80086830:	1027883a 	mov	r19,r2
80086834:	10002c26 	beq	r2,zero,800868e8 <quorem+0x120>
80086838:	a813883a 	mov	r9,r21
8008683c:	880b883a 	mov	r5,r17
80086840:	0009883a 	mov	r4,zero
80086844:	000d883a 	mov	r6,zero
80086848:	2a000017 	ldw	r8,0(r5)
8008684c:	49c00017 	ldw	r7,0(r9)
80086850:	29400104 	addi	r5,r5,4
80086854:	40bfffcc 	andi	r2,r8,65535
80086858:	14c5383a 	mul	r2,r2,r19
8008685c:	4010d43a 	srli	r8,r8,16
80086860:	38ffffcc 	andi	r3,r7,65535
80086864:	1105883a 	add	r2,r2,r4
80086868:	1008d43a 	srli	r4,r2,16
8008686c:	44d1383a 	mul	r8,r8,r19
80086870:	198d883a 	add	r6,r3,r6
80086874:	10ffffcc 	andi	r3,r2,65535
80086878:	30c7c83a 	sub	r3,r6,r3
8008687c:	380ed43a 	srli	r7,r7,16
80086880:	4105883a 	add	r2,r8,r4
80086884:	180dd43a 	srai	r6,r3,16
80086888:	113fffcc 	andi	r4,r2,65535
8008688c:	390fc83a 	sub	r7,r7,r4
80086890:	398d883a 	add	r6,r7,r6
80086894:	300e943a 	slli	r7,r6,16
80086898:	18ffffcc 	andi	r3,r3,65535
8008689c:	1008d43a 	srli	r4,r2,16
800868a0:	38ceb03a 	or	r7,r7,r3
800868a4:	49c00015 	stw	r7,0(r9)
800868a8:	300dd43a 	srai	r6,r6,16
800868ac:	4a400104 	addi	r9,r9,4
800868b0:	a17fe52e 	bgeu	r20,r5,80086848 <quorem+0x80>
800868b4:	b0800017 	ldw	r2,0(r22)
800868b8:	10000b1e 	bne	r2,zero,800868e8 <quorem+0x120>
800868bc:	b0bfff04 	addi	r2,r22,-4
800868c0:	a880082e 	bgeu	r21,r2,800868e4 <quorem+0x11c>
800868c4:	b0ffff17 	ldw	r3,-4(r22)
800868c8:	18000326 	beq	r3,zero,800868d8 <quorem+0x110>
800868cc:	00000506 	br	800868e4 <quorem+0x11c>
800868d0:	10c00017 	ldw	r3,0(r2)
800868d4:	1800031e 	bne	r3,zero,800868e4 <quorem+0x11c>
800868d8:	10bfff04 	addi	r2,r2,-4
800868dc:	94bfffc4 	addi	r18,r18,-1
800868e0:	a8bffb36 	bltu	r21,r2,800868d0 <quorem+0x108>
800868e4:	84800415 	stw	r18,16(r16)
800868e8:	b80b883a 	mov	r5,r23
800868ec:	8009883a 	mov	r4,r16
800868f0:	008a92c0 	call	8008a92c <__mcmp>
800868f4:	10002616 	blt	r2,zero,80086990 <quorem+0x1c8>
800868f8:	9cc00044 	addi	r19,r19,1
800868fc:	a805883a 	mov	r2,r21
80086900:	000b883a 	mov	r5,zero
80086904:	11000017 	ldw	r4,0(r2)
80086908:	89800017 	ldw	r6,0(r17)
8008690c:	10800104 	addi	r2,r2,4
80086910:	20ffffcc 	andi	r3,r4,65535
80086914:	194b883a 	add	r5,r3,r5
80086918:	30ffffcc 	andi	r3,r6,65535
8008691c:	28c7c83a 	sub	r3,r5,r3
80086920:	300cd43a 	srli	r6,r6,16
80086924:	2008d43a 	srli	r4,r4,16
80086928:	180bd43a 	srai	r5,r3,16
8008692c:	18ffffcc 	andi	r3,r3,65535
80086930:	2189c83a 	sub	r4,r4,r6
80086934:	2149883a 	add	r4,r4,r5
80086938:	200c943a 	slli	r6,r4,16
8008693c:	8c400104 	addi	r17,r17,4
80086940:	200bd43a 	srai	r5,r4,16
80086944:	30c6b03a 	or	r3,r6,r3
80086948:	10ffff15 	stw	r3,-4(r2)
8008694c:	a47fed2e 	bgeu	r20,r17,80086904 <quorem+0x13c>
80086950:	9485883a 	add	r2,r18,r18
80086954:	1085883a 	add	r2,r2,r2
80086958:	a887883a 	add	r3,r21,r2
8008695c:	18800017 	ldw	r2,0(r3)
80086960:	10000b1e 	bne	r2,zero,80086990 <quorem+0x1c8>
80086964:	18bfff04 	addi	r2,r3,-4
80086968:	a880082e 	bgeu	r21,r2,8008698c <quorem+0x1c4>
8008696c:	18ffff17 	ldw	r3,-4(r3)
80086970:	18000326 	beq	r3,zero,80086980 <quorem+0x1b8>
80086974:	00000506 	br	8008698c <quorem+0x1c4>
80086978:	10c00017 	ldw	r3,0(r2)
8008697c:	1800031e 	bne	r3,zero,8008698c <quorem+0x1c4>
80086980:	10bfff04 	addi	r2,r2,-4
80086984:	94bfffc4 	addi	r18,r18,-1
80086988:	a8bffb36 	bltu	r21,r2,80086978 <quorem+0x1b0>
8008698c:	84800415 	stw	r18,16(r16)
80086990:	9805883a 	mov	r2,r19
80086994:	dfc00817 	ldw	ra,32(sp)
80086998:	ddc00717 	ldw	r23,28(sp)
8008699c:	dd800617 	ldw	r22,24(sp)
800869a0:	dd400517 	ldw	r21,20(sp)
800869a4:	dd000417 	ldw	r20,16(sp)
800869a8:	dcc00317 	ldw	r19,12(sp)
800869ac:	dc800217 	ldw	r18,8(sp)
800869b0:	dc400117 	ldw	r17,4(sp)
800869b4:	dc000017 	ldw	r16,0(sp)
800869b8:	dec00904 	addi	sp,sp,36
800869bc:	f800283a 	ret
800869c0:	0005883a 	mov	r2,zero
800869c4:	003ff306 	br	80086994 <quorem+0x1cc>

800869c8 <_dtoa_r>:
800869c8:	20801017 	ldw	r2,64(r4)
800869cc:	deffde04 	addi	sp,sp,-136
800869d0:	df002015 	stw	fp,128(sp)
800869d4:	dcc01b15 	stw	r19,108(sp)
800869d8:	dc801a15 	stw	r18,104(sp)
800869dc:	dc401915 	stw	r17,100(sp)
800869e0:	dc001815 	stw	r16,96(sp)
800869e4:	dfc02115 	stw	ra,132(sp)
800869e8:	ddc01f15 	stw	r23,124(sp)
800869ec:	dd801e15 	stw	r22,120(sp)
800869f0:	dd401d15 	stw	r21,116(sp)
800869f4:	dd001c15 	stw	r20,112(sp)
800869f8:	d9c00315 	stw	r7,12(sp)
800869fc:	2039883a 	mov	fp,r4
80086a00:	3023883a 	mov	r17,r6
80086a04:	2825883a 	mov	r18,r5
80086a08:	dc002417 	ldw	r16,144(sp)
80086a0c:	3027883a 	mov	r19,r6
80086a10:	10000826 	beq	r2,zero,80086a34 <_dtoa_r+0x6c>
80086a14:	21801117 	ldw	r6,68(r4)
80086a18:	00c00044 	movi	r3,1
80086a1c:	100b883a 	mov	r5,r2
80086a20:	1986983a 	sll	r3,r3,r6
80086a24:	11800115 	stw	r6,4(r2)
80086a28:	10c00215 	stw	r3,8(r2)
80086a2c:	008a10c0 	call	8008a10c <_Bfree>
80086a30:	e0001015 	stw	zero,64(fp)
80086a34:	88002e16 	blt	r17,zero,80086af0 <_dtoa_r+0x128>
80086a38:	80000015 	stw	zero,0(r16)
80086a3c:	889ffc2c 	andhi	r2,r17,32752
80086a40:	00dffc34 	movhi	r3,32752
80086a44:	10c01c26 	beq	r2,r3,80086ab8 <_dtoa_r+0xf0>
80086a48:	000d883a 	mov	r6,zero
80086a4c:	000f883a 	mov	r7,zero
80086a50:	9009883a 	mov	r4,r18
80086a54:	980b883a 	mov	r5,r19
80086a58:	0090c140 	call	80090c14 <__eqdf2>
80086a5c:	10002b1e 	bne	r2,zero,80086b0c <_dtoa_r+0x144>
80086a60:	d9c02317 	ldw	r7,140(sp)
80086a64:	00800044 	movi	r2,1
80086a68:	38800015 	stw	r2,0(r7)
80086a6c:	d8802517 	ldw	r2,148(sp)
80086a70:	10019e26 	beq	r2,zero,800870ec <_dtoa_r+0x724>
80086a74:	d8c02517 	ldw	r3,148(sp)
80086a78:	00a00274 	movhi	r2,32777
80086a7c:	109a8044 	addi	r2,r2,27137
80086a80:	18800015 	stw	r2,0(r3)
80086a84:	10bfffc4 	addi	r2,r2,-1
80086a88:	dfc02117 	ldw	ra,132(sp)
80086a8c:	df002017 	ldw	fp,128(sp)
80086a90:	ddc01f17 	ldw	r23,124(sp)
80086a94:	dd801e17 	ldw	r22,120(sp)
80086a98:	dd401d17 	ldw	r21,116(sp)
80086a9c:	dd001c17 	ldw	r20,112(sp)
80086aa0:	dcc01b17 	ldw	r19,108(sp)
80086aa4:	dc801a17 	ldw	r18,104(sp)
80086aa8:	dc401917 	ldw	r17,100(sp)
80086aac:	dc001817 	ldw	r16,96(sp)
80086ab0:	dec02204 	addi	sp,sp,136
80086ab4:	f800283a 	ret
80086ab8:	d8c02317 	ldw	r3,140(sp)
80086abc:	0089c3c4 	movi	r2,9999
80086ac0:	18800015 	stw	r2,0(r3)
80086ac4:	90017726 	beq	r18,zero,800870a4 <_dtoa_r+0x6dc>
80086ac8:	00a00274 	movhi	r2,32777
80086acc:	109a9404 	addi	r2,r2,27216
80086ad0:	d9002517 	ldw	r4,148(sp)
80086ad4:	203fec26 	beq	r4,zero,80086a88 <_dtoa_r+0xc0>
80086ad8:	10c000c7 	ldb	r3,3(r2)
80086adc:	1801781e 	bne	r3,zero,800870c0 <_dtoa_r+0x6f8>
80086ae0:	10c000c4 	addi	r3,r2,3
80086ae4:	d9802517 	ldw	r6,148(sp)
80086ae8:	30c00015 	stw	r3,0(r6)
80086aec:	003fe606 	br	80086a88 <_dtoa_r+0xc0>
80086af0:	04e00034 	movhi	r19,32768
80086af4:	9cffffc4 	addi	r19,r19,-1
80086af8:	00800044 	movi	r2,1
80086afc:	8ce6703a 	and	r19,r17,r19
80086b00:	80800015 	stw	r2,0(r16)
80086b04:	9823883a 	mov	r17,r19
80086b08:	003fcc06 	br	80086a3c <_dtoa_r+0x74>
80086b0c:	d8800204 	addi	r2,sp,8
80086b10:	d8800015 	stw	r2,0(sp)
80086b14:	d9c00104 	addi	r7,sp,4
80086b18:	900b883a 	mov	r5,r18
80086b1c:	980d883a 	mov	r6,r19
80086b20:	e009883a 	mov	r4,fp
80086b24:	8820d53a 	srli	r16,r17,20
80086b28:	008acf80 	call	8008acf8 <__d2b>
80086b2c:	d8800915 	stw	r2,36(sp)
80086b30:	8001651e 	bne	r16,zero,800870c8 <_dtoa_r+0x700>
80086b34:	dd800217 	ldw	r22,8(sp)
80086b38:	dc000117 	ldw	r16,4(sp)
80086b3c:	00800804 	movi	r2,32
80086b40:	b421883a 	add	r16,r22,r16
80086b44:	80c10c84 	addi	r3,r16,1074
80086b48:	10c2d10e 	bge	r2,r3,80087690 <_dtoa_r+0xcc8>
80086b4c:	00801004 	movi	r2,64
80086b50:	81010484 	addi	r4,r16,1042
80086b54:	10c7c83a 	sub	r3,r2,r3
80086b58:	9108d83a 	srl	r4,r18,r4
80086b5c:	88e2983a 	sll	r17,r17,r3
80086b60:	2448b03a 	or	r4,r4,r17
80086b64:	0081b800 	call	80081b80 <__floatunsidf>
80086b68:	017f8434 	movhi	r5,65040
80086b6c:	01800044 	movi	r6,1
80086b70:	1009883a 	mov	r4,r2
80086b74:	194b883a 	add	r5,r3,r5
80086b78:	843fffc4 	addi	r16,r16,-1
80086b7c:	d9801115 	stw	r6,68(sp)
80086b80:	000d883a 	mov	r6,zero
80086b84:	01cffe34 	movhi	r7,16376
80086b88:	0090d900 	call	80090d90 <__subdf3>
80086b8c:	0198dbf4 	movhi	r6,25455
80086b90:	01cff4f4 	movhi	r7,16339
80086b94:	3190d844 	addi	r6,r6,17249
80086b98:	39e1e9c4 	addi	r7,r7,-30809
80086b9c:	1009883a 	mov	r4,r2
80086ba0:	180b883a 	mov	r5,r3
80086ba4:	00814680 	call	80081468 <__muldf3>
80086ba8:	01a2d874 	movhi	r6,35681
80086bac:	01cff1f4 	movhi	r7,16327
80086bb0:	31b22cc4 	addi	r6,r6,-14157
80086bb4:	39e28a04 	addi	r7,r7,-30168
80086bb8:	180b883a 	mov	r5,r3
80086bbc:	1009883a 	mov	r4,r2
80086bc0:	008fa800 	call	8008fa80 <__adddf3>
80086bc4:	8009883a 	mov	r4,r16
80086bc8:	1029883a 	mov	r20,r2
80086bcc:	1823883a 	mov	r17,r3
80086bd0:	009170c0 	call	8009170c <__floatsidf>
80086bd4:	019427f4 	movhi	r6,20639
80086bd8:	01cff4f4 	movhi	r7,16339
80086bdc:	319e7ec4 	addi	r6,r6,31227
80086be0:	39d104c4 	addi	r7,r7,17427
80086be4:	1009883a 	mov	r4,r2
80086be8:	180b883a 	mov	r5,r3
80086bec:	00814680 	call	80081468 <__muldf3>
80086bf0:	100d883a 	mov	r6,r2
80086bf4:	180f883a 	mov	r7,r3
80086bf8:	a009883a 	mov	r4,r20
80086bfc:	880b883a 	mov	r5,r17
80086c00:	008fa800 	call	8008fa80 <__adddf3>
80086c04:	1009883a 	mov	r4,r2
80086c08:	180b883a 	mov	r5,r3
80086c0c:	1029883a 	mov	r20,r2
80086c10:	1823883a 	mov	r17,r3
80086c14:	009168c0 	call	8009168c <__fixdfsi>
80086c18:	000d883a 	mov	r6,zero
80086c1c:	000f883a 	mov	r7,zero
80086c20:	a009883a 	mov	r4,r20
80086c24:	880b883a 	mov	r5,r17
80086c28:	d8800515 	stw	r2,20(sp)
80086c2c:	0090c9c0 	call	80090c9c <__ledf2>
80086c30:	10028716 	blt	r2,zero,80087650 <_dtoa_r+0xc88>
80086c34:	d8c00517 	ldw	r3,20(sp)
80086c38:	00800584 	movi	r2,22
80086c3c:	10c27536 	bltu	r2,r3,80087614 <_dtoa_r+0xc4c>
80086c40:	180490fa 	slli	r2,r3,3
80086c44:	00e00274 	movhi	r3,32777
80086c48:	18daaf04 	addi	r3,r3,27324
80086c4c:	1885883a 	add	r2,r3,r2
80086c50:	11000017 	ldw	r4,0(r2)
80086c54:	11400117 	ldw	r5,4(r2)
80086c58:	900d883a 	mov	r6,r18
80086c5c:	980f883a 	mov	r7,r19
80086c60:	008138c0 	call	8008138c <__gedf2>
80086c64:	00828d0e 	bge	zero,r2,8008769c <_dtoa_r+0xcd4>
80086c68:	d9000517 	ldw	r4,20(sp)
80086c6c:	d8000e15 	stw	zero,56(sp)
80086c70:	213fffc4 	addi	r4,r4,-1
80086c74:	d9000515 	stw	r4,20(sp)
80086c78:	b42dc83a 	sub	r22,r22,r16
80086c7c:	b5bfffc4 	addi	r22,r22,-1
80086c80:	b0026f16 	blt	r22,zero,80087640 <_dtoa_r+0xc78>
80086c84:	d8000815 	stw	zero,32(sp)
80086c88:	d9c00517 	ldw	r7,20(sp)
80086c8c:	38026416 	blt	r7,zero,80087620 <_dtoa_r+0xc58>
80086c90:	b1ed883a 	add	r22,r22,r7
80086c94:	d9c00d15 	stw	r7,52(sp)
80086c98:	d8000a15 	stw	zero,40(sp)
80086c9c:	d9800317 	ldw	r6,12(sp)
80086ca0:	00800244 	movi	r2,9
80086ca4:	11811436 	bltu	r2,r6,800870f8 <_dtoa_r+0x730>
80086ca8:	00800144 	movi	r2,5
80086cac:	1184e10e 	bge	r2,r6,80088034 <_dtoa_r+0x166c>
80086cb0:	31bfff04 	addi	r6,r6,-4
80086cb4:	d9800315 	stw	r6,12(sp)
80086cb8:	0023883a 	mov	r17,zero
80086cbc:	d9800317 	ldw	r6,12(sp)
80086cc0:	008000c4 	movi	r2,3
80086cc4:	30836726 	beq	r6,r2,80087a64 <_dtoa_r+0x109c>
80086cc8:	1183410e 	bge	r2,r6,800879d0 <_dtoa_r+0x1008>
80086ccc:	d9c00317 	ldw	r7,12(sp)
80086cd0:	00800104 	movi	r2,4
80086cd4:	38827c26 	beq	r7,r2,800876c8 <_dtoa_r+0xd00>
80086cd8:	00800144 	movi	r2,5
80086cdc:	3884c41e 	bne	r7,r2,80087ff0 <_dtoa_r+0x1628>
80086ce0:	00800044 	movi	r2,1
80086ce4:	d8800b15 	stw	r2,44(sp)
80086ce8:	d8c00517 	ldw	r3,20(sp)
80086cec:	d9002217 	ldw	r4,136(sp)
80086cf0:	1907883a 	add	r3,r3,r4
80086cf4:	19800044 	addi	r6,r3,1
80086cf8:	d8c00c15 	stw	r3,48(sp)
80086cfc:	d9800615 	stw	r6,24(sp)
80086d00:	0183a40e 	bge	zero,r6,80087b94 <_dtoa_r+0x11cc>
80086d04:	d9800617 	ldw	r6,24(sp)
80086d08:	3021883a 	mov	r16,r6
80086d0c:	e0001115 	stw	zero,68(fp)
80086d10:	008005c4 	movi	r2,23
80086d14:	1184c92e 	bgeu	r2,r6,8008803c <_dtoa_r+0x1674>
80086d18:	00c00044 	movi	r3,1
80086d1c:	00800104 	movi	r2,4
80086d20:	1085883a 	add	r2,r2,r2
80086d24:	11000504 	addi	r4,r2,20
80086d28:	180b883a 	mov	r5,r3
80086d2c:	18c00044 	addi	r3,r3,1
80086d30:	313ffb2e 	bgeu	r6,r4,80086d20 <_dtoa_r+0x358>
80086d34:	e1401115 	stw	r5,68(fp)
80086d38:	e009883a 	mov	r4,fp
80086d3c:	008a0640 	call	8008a064 <_Balloc>
80086d40:	d8800715 	stw	r2,28(sp)
80086d44:	e0801015 	stw	r2,64(fp)
80086d48:	00800384 	movi	r2,14
80086d4c:	1400f736 	bltu	r2,r16,8008712c <_dtoa_r+0x764>
80086d50:	8800f626 	beq	r17,zero,8008712c <_dtoa_r+0x764>
80086d54:	d9c00517 	ldw	r7,20(sp)
80086d58:	01c39a0e 	bge	zero,r7,80087bc4 <_dtoa_r+0x11fc>
80086d5c:	388003cc 	andi	r2,r7,15
80086d60:	100490fa 	slli	r2,r2,3
80086d64:	382bd13a 	srai	r21,r7,4
80086d68:	00e00274 	movhi	r3,32777
80086d6c:	18daaf04 	addi	r3,r3,27324
80086d70:	1885883a 	add	r2,r3,r2
80086d74:	a8c0040c 	andi	r3,r21,16
80086d78:	12400017 	ldw	r9,0(r2)
80086d7c:	12000117 	ldw	r8,4(r2)
80086d80:	18037926 	beq	r3,zero,80087b68 <_dtoa_r+0x11a0>
80086d84:	00a00274 	movhi	r2,32777
80086d88:	109aa504 	addi	r2,r2,27284
80086d8c:	11800817 	ldw	r6,32(r2)
80086d90:	11c00917 	ldw	r7,36(r2)
80086d94:	9009883a 	mov	r4,r18
80086d98:	980b883a 	mov	r5,r19
80086d9c:	da001715 	stw	r8,92(sp)
80086da0:	da401615 	stw	r9,88(sp)
80086da4:	009032c0 	call	8009032c <__divdf3>
80086da8:	da001717 	ldw	r8,92(sp)
80086dac:	da401617 	ldw	r9,88(sp)
80086db0:	ad4003cc 	andi	r21,r21,15
80086db4:	040000c4 	movi	r16,3
80086db8:	1023883a 	mov	r17,r2
80086dbc:	1829883a 	mov	r20,r3
80086dc0:	a8001126 	beq	r21,zero,80086e08 <_dtoa_r+0x440>
80086dc4:	05e00274 	movhi	r23,32777
80086dc8:	bddaa504 	addi	r23,r23,27284
80086dcc:	4805883a 	mov	r2,r9
80086dd0:	4007883a 	mov	r3,r8
80086dd4:	a980004c 	andi	r6,r21,1
80086dd8:	1009883a 	mov	r4,r2
80086ddc:	a82bd07a 	srai	r21,r21,1
80086de0:	180b883a 	mov	r5,r3
80086de4:	30000426 	beq	r6,zero,80086df8 <_dtoa_r+0x430>
80086de8:	b9800017 	ldw	r6,0(r23)
80086dec:	b9c00117 	ldw	r7,4(r23)
80086df0:	84000044 	addi	r16,r16,1
80086df4:	00814680 	call	80081468 <__muldf3>
80086df8:	bdc00204 	addi	r23,r23,8
80086dfc:	a83ff51e 	bne	r21,zero,80086dd4 <_dtoa_r+0x40c>
80086e00:	1013883a 	mov	r9,r2
80086e04:	1811883a 	mov	r8,r3
80086e08:	480d883a 	mov	r6,r9
80086e0c:	400f883a 	mov	r7,r8
80086e10:	8809883a 	mov	r4,r17
80086e14:	a00b883a 	mov	r5,r20
80086e18:	009032c0 	call	8009032c <__divdf3>
80086e1c:	d8800f15 	stw	r2,60(sp)
80086e20:	d8c01015 	stw	r3,64(sp)
80086e24:	d8c00e17 	ldw	r3,56(sp)
80086e28:	18000626 	beq	r3,zero,80086e44 <_dtoa_r+0x47c>
80086e2c:	d9000f17 	ldw	r4,60(sp)
80086e30:	d9401017 	ldw	r5,64(sp)
80086e34:	000d883a 	mov	r6,zero
80086e38:	01cffc34 	movhi	r7,16368
80086e3c:	0090c9c0 	call	80090c9c <__ledf2>
80086e40:	10040b16 	blt	r2,zero,80087e70 <_dtoa_r+0x14a8>
80086e44:	8009883a 	mov	r4,r16
80086e48:	009170c0 	call	8009170c <__floatsidf>
80086e4c:	d9800f17 	ldw	r6,60(sp)
80086e50:	d9c01017 	ldw	r7,64(sp)
80086e54:	1009883a 	mov	r4,r2
80086e58:	180b883a 	mov	r5,r3
80086e5c:	00814680 	call	80081468 <__muldf3>
80086e60:	000d883a 	mov	r6,zero
80086e64:	01d00734 	movhi	r7,16412
80086e68:	1009883a 	mov	r4,r2
80086e6c:	180b883a 	mov	r5,r3
80086e70:	008fa800 	call	8008fa80 <__adddf3>
80086e74:	1021883a 	mov	r16,r2
80086e78:	d8800617 	ldw	r2,24(sp)
80086e7c:	047f3034 	movhi	r17,64704
80086e80:	1c63883a 	add	r17,r3,r17
80086e84:	10031826 	beq	r2,zero,80087ae8 <_dtoa_r+0x1120>
80086e88:	d8c00517 	ldw	r3,20(sp)
80086e8c:	db000617 	ldw	r12,24(sp)
80086e90:	d8c01315 	stw	r3,76(sp)
80086e94:	d9000b17 	ldw	r4,44(sp)
80086e98:	20038f26 	beq	r4,zero,80087cd8 <_dtoa_r+0x1310>
80086e9c:	60bfffc4 	addi	r2,r12,-1
80086ea0:	100490fa 	slli	r2,r2,3
80086ea4:	00e00274 	movhi	r3,32777
80086ea8:	18daaf04 	addi	r3,r3,27324
80086eac:	1885883a 	add	r2,r3,r2
80086eb0:	11800017 	ldw	r6,0(r2)
80086eb4:	11c00117 	ldw	r7,4(r2)
80086eb8:	d8800717 	ldw	r2,28(sp)
80086ebc:	0009883a 	mov	r4,zero
80086ec0:	014ff834 	movhi	r5,16352
80086ec4:	db001615 	stw	r12,88(sp)
80086ec8:	15c00044 	addi	r23,r2,1
80086ecc:	009032c0 	call	8009032c <__divdf3>
80086ed0:	800d883a 	mov	r6,r16
80086ed4:	880f883a 	mov	r7,r17
80086ed8:	1009883a 	mov	r4,r2
80086edc:	180b883a 	mov	r5,r3
80086ee0:	0090d900 	call	80090d90 <__subdf3>
80086ee4:	d9401017 	ldw	r5,64(sp)
80086ee8:	d9000f17 	ldw	r4,60(sp)
80086eec:	102b883a 	mov	r21,r2
80086ef0:	d8c01215 	stw	r3,72(sp)
80086ef4:	009168c0 	call	8009168c <__fixdfsi>
80086ef8:	1009883a 	mov	r4,r2
80086efc:	1029883a 	mov	r20,r2
80086f00:	009170c0 	call	8009170c <__floatsidf>
80086f04:	d9000f17 	ldw	r4,60(sp)
80086f08:	d9401017 	ldw	r5,64(sp)
80086f0c:	100d883a 	mov	r6,r2
80086f10:	180f883a 	mov	r7,r3
80086f14:	0090d900 	call	80090d90 <__subdf3>
80086f18:	1823883a 	mov	r17,r3
80086f1c:	d8c00717 	ldw	r3,28(sp)
80086f20:	d9401217 	ldw	r5,72(sp)
80086f24:	a2000c04 	addi	r8,r20,48
80086f28:	1021883a 	mov	r16,r2
80086f2c:	1a000005 	stb	r8,0(r3)
80086f30:	800d883a 	mov	r6,r16
80086f34:	880f883a 	mov	r7,r17
80086f38:	a809883a 	mov	r4,r21
80086f3c:	4029883a 	mov	r20,r8
80086f40:	008138c0 	call	8008138c <__gedf2>
80086f44:	00841d16 	blt	zero,r2,80087fbc <_dtoa_r+0x15f4>
80086f48:	800d883a 	mov	r6,r16
80086f4c:	880f883a 	mov	r7,r17
80086f50:	0009883a 	mov	r4,zero
80086f54:	014ffc34 	movhi	r5,16368
80086f58:	0090d900 	call	80090d90 <__subdf3>
80086f5c:	d9401217 	ldw	r5,72(sp)
80086f60:	100d883a 	mov	r6,r2
80086f64:	180f883a 	mov	r7,r3
80086f68:	a809883a 	mov	r4,r21
80086f6c:	008138c0 	call	8008138c <__gedf2>
80086f70:	db001617 	ldw	r12,88(sp)
80086f74:	00840e16 	blt	zero,r2,80087fb0 <_dtoa_r+0x15e8>
80086f78:	00800044 	movi	r2,1
80086f7c:	13006b0e 	bge	r2,r12,8008712c <_dtoa_r+0x764>
80086f80:	d9000717 	ldw	r4,28(sp)
80086f84:	dd800f15 	stw	r22,60(sp)
80086f88:	dcc01015 	stw	r19,64(sp)
80086f8c:	2319883a 	add	r12,r4,r12
80086f90:	dcc01217 	ldw	r19,72(sp)
80086f94:	602d883a 	mov	r22,r12
80086f98:	dc801215 	stw	r18,72(sp)
80086f9c:	b825883a 	mov	r18,r23
80086fa0:	00000906 	br	80086fc8 <_dtoa_r+0x600>
80086fa4:	0090d900 	call	80090d90 <__subdf3>
80086fa8:	a80d883a 	mov	r6,r21
80086fac:	980f883a 	mov	r7,r19
80086fb0:	1009883a 	mov	r4,r2
80086fb4:	180b883a 	mov	r5,r3
80086fb8:	0090c9c0 	call	80090c9c <__ledf2>
80086fbc:	1003e816 	blt	r2,zero,80087f60 <_dtoa_r+0x1598>
80086fc0:	b825883a 	mov	r18,r23
80086fc4:	bd83e926 	beq	r23,r22,80087f6c <_dtoa_r+0x15a4>
80086fc8:	a809883a 	mov	r4,r21
80086fcc:	980b883a 	mov	r5,r19
80086fd0:	000d883a 	mov	r6,zero
80086fd4:	01d00934 	movhi	r7,16420
80086fd8:	00814680 	call	80081468 <__muldf3>
80086fdc:	000d883a 	mov	r6,zero
80086fe0:	01d00934 	movhi	r7,16420
80086fe4:	8009883a 	mov	r4,r16
80086fe8:	880b883a 	mov	r5,r17
80086fec:	102b883a 	mov	r21,r2
80086ff0:	1827883a 	mov	r19,r3
80086ff4:	00814680 	call	80081468 <__muldf3>
80086ff8:	180b883a 	mov	r5,r3
80086ffc:	1009883a 	mov	r4,r2
80087000:	1821883a 	mov	r16,r3
80087004:	1023883a 	mov	r17,r2
80087008:	009168c0 	call	8009168c <__fixdfsi>
8008700c:	1009883a 	mov	r4,r2
80087010:	1029883a 	mov	r20,r2
80087014:	009170c0 	call	8009170c <__floatsidf>
80087018:	8809883a 	mov	r4,r17
8008701c:	800b883a 	mov	r5,r16
80087020:	100d883a 	mov	r6,r2
80087024:	180f883a 	mov	r7,r3
80087028:	0090d900 	call	80090d90 <__subdf3>
8008702c:	a5000c04 	addi	r20,r20,48
80087030:	a80d883a 	mov	r6,r21
80087034:	980f883a 	mov	r7,r19
80087038:	1009883a 	mov	r4,r2
8008703c:	180b883a 	mov	r5,r3
80087040:	95000005 	stb	r20,0(r18)
80087044:	1021883a 	mov	r16,r2
80087048:	1823883a 	mov	r17,r3
8008704c:	0090c9c0 	call	80090c9c <__ledf2>
80087050:	bdc00044 	addi	r23,r23,1
80087054:	800d883a 	mov	r6,r16
80087058:	880f883a 	mov	r7,r17
8008705c:	0009883a 	mov	r4,zero
80087060:	014ffc34 	movhi	r5,16368
80087064:	103fcf0e 	bge	r2,zero,80086fa4 <_dtoa_r+0x5dc>
80087068:	d8c01317 	ldw	r3,76(sp)
8008706c:	d8c00515 	stw	r3,20(sp)
80087070:	d9400917 	ldw	r5,36(sp)
80087074:	e009883a 	mov	r4,fp
80087078:	008a10c0 	call	8008a10c <_Bfree>
8008707c:	d9000517 	ldw	r4,20(sp)
80087080:	d9802317 	ldw	r6,140(sp)
80087084:	d9c02517 	ldw	r7,148(sp)
80087088:	b8000005 	stb	zero,0(r23)
8008708c:	20800044 	addi	r2,r4,1
80087090:	30800015 	stw	r2,0(r6)
80087094:	3802aa26 	beq	r7,zero,80087b40 <_dtoa_r+0x1178>
80087098:	3dc00015 	stw	r23,0(r7)
8008709c:	d8800717 	ldw	r2,28(sp)
800870a0:	003e7906 	br	80086a88 <_dtoa_r+0xc0>
800870a4:	00800434 	movhi	r2,16
800870a8:	10bfffc4 	addi	r2,r2,-1
800870ac:	88a2703a 	and	r17,r17,r2
800870b0:	883e851e 	bne	r17,zero,80086ac8 <_dtoa_r+0x100>
800870b4:	00a00274 	movhi	r2,32777
800870b8:	109a9104 	addi	r2,r2,27204
800870bc:	003e8406 	br	80086ad0 <_dtoa_r+0x108>
800870c0:	10c00204 	addi	r3,r2,8
800870c4:	003e8706 	br	80086ae4 <_dtoa_r+0x11c>
800870c8:	01400434 	movhi	r5,16
800870cc:	297fffc4 	addi	r5,r5,-1
800870d0:	994a703a 	and	r5,r19,r5
800870d4:	9009883a 	mov	r4,r18
800870d8:	843f0044 	addi	r16,r16,-1023
800870dc:	294ffc34 	orhi	r5,r5,16368
800870e0:	dd800217 	ldw	r22,8(sp)
800870e4:	d8001115 	stw	zero,68(sp)
800870e8:	003ea506 	br	80086b80 <_dtoa_r+0x1b8>
800870ec:	00a00274 	movhi	r2,32777
800870f0:	109a8004 	addi	r2,r2,27136
800870f4:	003e6406 	br	80086a88 <_dtoa_r+0xc0>
800870f8:	e0001115 	stw	zero,68(fp)
800870fc:	000b883a 	mov	r5,zero
80087100:	e009883a 	mov	r4,fp
80087104:	008a0640 	call	8008a064 <_Balloc>
80087108:	01bfffc4 	movi	r6,-1
8008710c:	01c00044 	movi	r7,1
80087110:	d8800715 	stw	r2,28(sp)
80087114:	d9800c15 	stw	r6,48(sp)
80087118:	e0801015 	stw	r2,64(fp)
8008711c:	d8000315 	stw	zero,12(sp)
80087120:	d9c00b15 	stw	r7,44(sp)
80087124:	d9800615 	stw	r6,24(sp)
80087128:	d8002215 	stw	zero,136(sp)
8008712c:	d8800117 	ldw	r2,4(sp)
80087130:	10008916 	blt	r2,zero,80087358 <_dtoa_r+0x990>
80087134:	d9000517 	ldw	r4,20(sp)
80087138:	00c00384 	movi	r3,14
8008713c:	19008616 	blt	r3,r4,80087358 <_dtoa_r+0x990>
80087140:	200490fa 	slli	r2,r4,3
80087144:	00e00274 	movhi	r3,32777
80087148:	d9802217 	ldw	r6,136(sp)
8008714c:	18daaf04 	addi	r3,r3,27324
80087150:	1885883a 	add	r2,r3,r2
80087154:	14000017 	ldw	r16,0(r2)
80087158:	14400117 	ldw	r17,4(r2)
8008715c:	30016316 	blt	r6,zero,800876ec <_dtoa_r+0xd24>
80087160:	800d883a 	mov	r6,r16
80087164:	880f883a 	mov	r7,r17
80087168:	9009883a 	mov	r4,r18
8008716c:	980b883a 	mov	r5,r19
80087170:	009032c0 	call	8009032c <__divdf3>
80087174:	180b883a 	mov	r5,r3
80087178:	1009883a 	mov	r4,r2
8008717c:	009168c0 	call	8009168c <__fixdfsi>
80087180:	1009883a 	mov	r4,r2
80087184:	102b883a 	mov	r21,r2
80087188:	009170c0 	call	8009170c <__floatsidf>
8008718c:	800d883a 	mov	r6,r16
80087190:	880f883a 	mov	r7,r17
80087194:	1009883a 	mov	r4,r2
80087198:	180b883a 	mov	r5,r3
8008719c:	00814680 	call	80081468 <__muldf3>
800871a0:	100d883a 	mov	r6,r2
800871a4:	180f883a 	mov	r7,r3
800871a8:	9009883a 	mov	r4,r18
800871ac:	980b883a 	mov	r5,r19
800871b0:	0090d900 	call	80090d90 <__subdf3>
800871b4:	d9c00717 	ldw	r7,28(sp)
800871b8:	1009883a 	mov	r4,r2
800871bc:	a8800c04 	addi	r2,r21,48
800871c0:	38800005 	stb	r2,0(r7)
800871c4:	3dc00044 	addi	r23,r7,1
800871c8:	d9c00617 	ldw	r7,24(sp)
800871cc:	01800044 	movi	r6,1
800871d0:	180b883a 	mov	r5,r3
800871d4:	2005883a 	mov	r2,r4
800871d8:	39803826 	beq	r7,r6,800872bc <_dtoa_r+0x8f4>
800871dc:	000d883a 	mov	r6,zero
800871e0:	01d00934 	movhi	r7,16420
800871e4:	00814680 	call	80081468 <__muldf3>
800871e8:	000d883a 	mov	r6,zero
800871ec:	000f883a 	mov	r7,zero
800871f0:	1009883a 	mov	r4,r2
800871f4:	180b883a 	mov	r5,r3
800871f8:	1025883a 	mov	r18,r2
800871fc:	1827883a 	mov	r19,r3
80087200:	0090c140 	call	80090c14 <__eqdf2>
80087204:	103f9a26 	beq	r2,zero,80087070 <_dtoa_r+0x6a8>
80087208:	d9c00617 	ldw	r7,24(sp)
8008720c:	d8c00717 	ldw	r3,28(sp)
80087210:	b829883a 	mov	r20,r23
80087214:	38bfffc4 	addi	r2,r7,-1
80087218:	18ad883a 	add	r22,r3,r2
8008721c:	00000a06 	br	80087248 <_dtoa_r+0x880>
80087220:	00814680 	call	80081468 <__muldf3>
80087224:	000d883a 	mov	r6,zero
80087228:	000f883a 	mov	r7,zero
8008722c:	1009883a 	mov	r4,r2
80087230:	180b883a 	mov	r5,r3
80087234:	1025883a 	mov	r18,r2
80087238:	1827883a 	mov	r19,r3
8008723c:	b829883a 	mov	r20,r23
80087240:	0090c140 	call	80090c14 <__eqdf2>
80087244:	103f8a26 	beq	r2,zero,80087070 <_dtoa_r+0x6a8>
80087248:	800d883a 	mov	r6,r16
8008724c:	880f883a 	mov	r7,r17
80087250:	9009883a 	mov	r4,r18
80087254:	980b883a 	mov	r5,r19
80087258:	009032c0 	call	8009032c <__divdf3>
8008725c:	180b883a 	mov	r5,r3
80087260:	1009883a 	mov	r4,r2
80087264:	009168c0 	call	8009168c <__fixdfsi>
80087268:	1009883a 	mov	r4,r2
8008726c:	102b883a 	mov	r21,r2
80087270:	009170c0 	call	8009170c <__floatsidf>
80087274:	800d883a 	mov	r6,r16
80087278:	880f883a 	mov	r7,r17
8008727c:	1009883a 	mov	r4,r2
80087280:	180b883a 	mov	r5,r3
80087284:	00814680 	call	80081468 <__muldf3>
80087288:	100d883a 	mov	r6,r2
8008728c:	180f883a 	mov	r7,r3
80087290:	9009883a 	mov	r4,r18
80087294:	980b883a 	mov	r5,r19
80087298:	0090d900 	call	80090d90 <__subdf3>
8008729c:	aa000c04 	addi	r8,r21,48
800872a0:	a2000005 	stb	r8,0(r20)
800872a4:	000d883a 	mov	r6,zero
800872a8:	01d00934 	movhi	r7,16420
800872ac:	1009883a 	mov	r4,r2
800872b0:	180b883a 	mov	r5,r3
800872b4:	a5c00044 	addi	r23,r20,1
800872b8:	b53fd91e 	bne	r22,r20,80087220 <_dtoa_r+0x858>
800872bc:	100d883a 	mov	r6,r2
800872c0:	180f883a 	mov	r7,r3
800872c4:	1009883a 	mov	r4,r2
800872c8:	180b883a 	mov	r5,r3
800872cc:	008fa800 	call	8008fa80 <__adddf3>
800872d0:	100d883a 	mov	r6,r2
800872d4:	180f883a 	mov	r7,r3
800872d8:	8009883a 	mov	r4,r16
800872dc:	880b883a 	mov	r5,r17
800872e0:	1027883a 	mov	r19,r2
800872e4:	1825883a 	mov	r18,r3
800872e8:	0090c9c0 	call	80090c9c <__ledf2>
800872ec:	10000816 	blt	r2,zero,80087310 <_dtoa_r+0x948>
800872f0:	980d883a 	mov	r6,r19
800872f4:	900f883a 	mov	r7,r18
800872f8:	8009883a 	mov	r4,r16
800872fc:	880b883a 	mov	r5,r17
80087300:	0090c140 	call	80090c14 <__eqdf2>
80087304:	103f5a1e 	bne	r2,zero,80087070 <_dtoa_r+0x6a8>
80087308:	ad40004c 	andi	r21,r21,1
8008730c:	a83f5826 	beq	r21,zero,80087070 <_dtoa_r+0x6a8>
80087310:	bd3fffc3 	ldbu	r20,-1(r23)
80087314:	b8bfffc4 	addi	r2,r23,-1
80087318:	1007883a 	mov	r3,r2
8008731c:	01400e44 	movi	r5,57
80087320:	d9800717 	ldw	r6,28(sp)
80087324:	00000506 	br	8008733c <_dtoa_r+0x974>
80087328:	18ffffc4 	addi	r3,r3,-1
8008732c:	11824726 	beq	r2,r6,80087c4c <_dtoa_r+0x1284>
80087330:	1d000003 	ldbu	r20,0(r3)
80087334:	102f883a 	mov	r23,r2
80087338:	10bfffc4 	addi	r2,r2,-1
8008733c:	a1003fcc 	andi	r4,r20,255
80087340:	2100201c 	xori	r4,r4,128
80087344:	213fe004 	addi	r4,r4,-128
80087348:	217ff726 	beq	r4,r5,80087328 <_dtoa_r+0x960>
8008734c:	a2000044 	addi	r8,r20,1
80087350:	12000005 	stb	r8,0(r2)
80087354:	003f4606 	br	80087070 <_dtoa_r+0x6a8>
80087358:	d9000b17 	ldw	r4,44(sp)
8008735c:	2000c826 	beq	r4,zero,80087680 <_dtoa_r+0xcb8>
80087360:	d9800317 	ldw	r6,12(sp)
80087364:	00c00044 	movi	r3,1
80087368:	1980f90e 	bge	r3,r6,80087750 <_dtoa_r+0xd88>
8008736c:	d8800617 	ldw	r2,24(sp)
80087370:	d8c00a17 	ldw	r3,40(sp)
80087374:	157fffc4 	addi	r21,r2,-1
80087378:	1d41f316 	blt	r3,r21,80087b48 <_dtoa_r+0x1180>
8008737c:	1d6bc83a 	sub	r21,r3,r21
80087380:	d9c00617 	ldw	r7,24(sp)
80087384:	3802aa16 	blt	r7,zero,80087e30 <_dtoa_r+0x1468>
80087388:	dd000817 	ldw	r20,32(sp)
8008738c:	d8800617 	ldw	r2,24(sp)
80087390:	d8c00817 	ldw	r3,32(sp)
80087394:	01400044 	movi	r5,1
80087398:	e009883a 	mov	r4,fp
8008739c:	1887883a 	add	r3,r3,r2
800873a0:	d8c00815 	stw	r3,32(sp)
800873a4:	b0ad883a 	add	r22,r22,r2
800873a8:	008a4700 	call	8008a470 <__i2b>
800873ac:	1023883a 	mov	r17,r2
800873b0:	a0000826 	beq	r20,zero,800873d4 <_dtoa_r+0xa0c>
800873b4:	0580070e 	bge	zero,r22,800873d4 <_dtoa_r+0xa0c>
800873b8:	a005883a 	mov	r2,r20
800873bc:	b500b916 	blt	r22,r20,800876a4 <_dtoa_r+0xcdc>
800873c0:	d9000817 	ldw	r4,32(sp)
800873c4:	a0a9c83a 	sub	r20,r20,r2
800873c8:	b0adc83a 	sub	r22,r22,r2
800873cc:	2089c83a 	sub	r4,r4,r2
800873d0:	d9000815 	stw	r4,32(sp)
800873d4:	d9800a17 	ldw	r6,40(sp)
800873d8:	0181810e 	bge	zero,r6,800879e0 <_dtoa_r+0x1018>
800873dc:	d9c00b17 	ldw	r7,44(sp)
800873e0:	3800b326 	beq	r7,zero,800876b0 <_dtoa_r+0xce8>
800873e4:	a800b226 	beq	r21,zero,800876b0 <_dtoa_r+0xce8>
800873e8:	880b883a 	mov	r5,r17
800873ec:	a80d883a 	mov	r6,r21
800873f0:	e009883a 	mov	r4,fp
800873f4:	008a6a40 	call	8008a6a4 <__pow5mult>
800873f8:	d9800917 	ldw	r6,36(sp)
800873fc:	100b883a 	mov	r5,r2
80087400:	e009883a 	mov	r4,fp
80087404:	1023883a 	mov	r17,r2
80087408:	008a4ac0 	call	8008a4ac <__multiply>
8008740c:	1021883a 	mov	r16,r2
80087410:	d8800a17 	ldw	r2,40(sp)
80087414:	d9400917 	ldw	r5,36(sp)
80087418:	e009883a 	mov	r4,fp
8008741c:	1545c83a 	sub	r2,r2,r21
80087420:	d8800a15 	stw	r2,40(sp)
80087424:	008a10c0 	call	8008a10c <_Bfree>
80087428:	d8c00a17 	ldw	r3,40(sp)
8008742c:	18009f1e 	bne	r3,zero,800876ac <_dtoa_r+0xce4>
80087430:	05c00044 	movi	r23,1
80087434:	e009883a 	mov	r4,fp
80087438:	b80b883a 	mov	r5,r23
8008743c:	008a4700 	call	8008a470 <__i2b>
80087440:	d9000d17 	ldw	r4,52(sp)
80087444:	102b883a 	mov	r21,r2
80087448:	2000ce26 	beq	r4,zero,80087784 <_dtoa_r+0xdbc>
8008744c:	200d883a 	mov	r6,r4
80087450:	100b883a 	mov	r5,r2
80087454:	e009883a 	mov	r4,fp
80087458:	008a6a40 	call	8008a6a4 <__pow5mult>
8008745c:	d9800317 	ldw	r6,12(sp)
80087460:	102b883a 	mov	r21,r2
80087464:	b981810e 	bge	r23,r6,80087a6c <_dtoa_r+0x10a4>
80087468:	0027883a 	mov	r19,zero
8008746c:	a8800417 	ldw	r2,16(r21)
80087470:	05c00804 	movi	r23,32
80087474:	10800104 	addi	r2,r2,4
80087478:	1085883a 	add	r2,r2,r2
8008747c:	1085883a 	add	r2,r2,r2
80087480:	a885883a 	add	r2,r21,r2
80087484:	11000017 	ldw	r4,0(r2)
80087488:	008a3580 	call	8008a358 <__hi0bits>
8008748c:	b885c83a 	sub	r2,r23,r2
80087490:	1585883a 	add	r2,r2,r22
80087494:	108007cc 	andi	r2,r2,31
80087498:	1000b326 	beq	r2,zero,80087768 <_dtoa_r+0xda0>
8008749c:	00c00804 	movi	r3,32
800874a0:	1887c83a 	sub	r3,r3,r2
800874a4:	01000104 	movi	r4,4
800874a8:	20c2cd0e 	bge	r4,r3,80087fe0 <_dtoa_r+0x1618>
800874ac:	00c00704 	movi	r3,28
800874b0:	1885c83a 	sub	r2,r3,r2
800874b4:	d8c00817 	ldw	r3,32(sp)
800874b8:	a0a9883a 	add	r20,r20,r2
800874bc:	b0ad883a 	add	r22,r22,r2
800874c0:	1887883a 	add	r3,r3,r2
800874c4:	d8c00815 	stw	r3,32(sp)
800874c8:	d9800817 	ldw	r6,32(sp)
800874cc:	0180040e 	bge	zero,r6,800874e0 <_dtoa_r+0xb18>
800874d0:	800b883a 	mov	r5,r16
800874d4:	e009883a 	mov	r4,fp
800874d8:	008a7e40 	call	8008a7e4 <__lshift>
800874dc:	1021883a 	mov	r16,r2
800874e0:	0580050e 	bge	zero,r22,800874f8 <_dtoa_r+0xb30>
800874e4:	a80b883a 	mov	r5,r21
800874e8:	b00d883a 	mov	r6,r22
800874ec:	e009883a 	mov	r4,fp
800874f0:	008a7e40 	call	8008a7e4 <__lshift>
800874f4:	102b883a 	mov	r21,r2
800874f8:	d9c00e17 	ldw	r7,56(sp)
800874fc:	3801211e 	bne	r7,zero,80087984 <_dtoa_r+0xfbc>
80087500:	d9800617 	ldw	r6,24(sp)
80087504:	0181380e 	bge	zero,r6,800879e8 <_dtoa_r+0x1020>
80087508:	d8c00b17 	ldw	r3,44(sp)
8008750c:	1800ab1e 	bne	r3,zero,800877bc <_dtoa_r+0xdf4>
80087510:	dc800717 	ldw	r18,28(sp)
80087514:	dcc00617 	ldw	r19,24(sp)
80087518:	9029883a 	mov	r20,r18
8008751c:	00000206 	br	80087528 <_dtoa_r+0xb60>
80087520:	008a1340 	call	8008a134 <__multadd>
80087524:	1021883a 	mov	r16,r2
80087528:	a80b883a 	mov	r5,r21
8008752c:	8009883a 	mov	r4,r16
80087530:	00867c80 	call	800867c8 <quorem>
80087534:	10800c04 	addi	r2,r2,48
80087538:	90800005 	stb	r2,0(r18)
8008753c:	94800044 	addi	r18,r18,1
80087540:	9507c83a 	sub	r3,r18,r20
80087544:	000f883a 	mov	r7,zero
80087548:	01800284 	movi	r6,10
8008754c:	800b883a 	mov	r5,r16
80087550:	e009883a 	mov	r4,fp
80087554:	1cfff216 	blt	r3,r19,80087520 <_dtoa_r+0xb58>
80087558:	1011883a 	mov	r8,r2
8008755c:	d8800617 	ldw	r2,24(sp)
80087560:	0082370e 	bge	zero,r2,80087e40 <_dtoa_r+0x1478>
80087564:	d9000717 	ldw	r4,28(sp)
80087568:	0025883a 	mov	r18,zero
8008756c:	20af883a 	add	r23,r4,r2
80087570:	01800044 	movi	r6,1
80087574:	800b883a 	mov	r5,r16
80087578:	e009883a 	mov	r4,fp
8008757c:	da001715 	stw	r8,92(sp)
80087580:	008a7e40 	call	8008a7e4 <__lshift>
80087584:	a80b883a 	mov	r5,r21
80087588:	1009883a 	mov	r4,r2
8008758c:	d8800915 	stw	r2,36(sp)
80087590:	008a92c0 	call	8008a92c <__mcmp>
80087594:	da001717 	ldw	r8,92(sp)
80087598:	0081800e 	bge	zero,r2,80087b9c <_dtoa_r+0x11d4>
8008759c:	b93fffc3 	ldbu	r4,-1(r23)
800875a0:	b8bfffc4 	addi	r2,r23,-1
800875a4:	1007883a 	mov	r3,r2
800875a8:	01800e44 	movi	r6,57
800875ac:	d9c00717 	ldw	r7,28(sp)
800875b0:	00000506 	br	800875c8 <_dtoa_r+0xc00>
800875b4:	18ffffc4 	addi	r3,r3,-1
800875b8:	11c12326 	beq	r2,r7,80087a48 <_dtoa_r+0x1080>
800875bc:	19000003 	ldbu	r4,0(r3)
800875c0:	102f883a 	mov	r23,r2
800875c4:	10bfffc4 	addi	r2,r2,-1
800875c8:	21403fcc 	andi	r5,r4,255
800875cc:	2940201c 	xori	r5,r5,128
800875d0:	297fe004 	addi	r5,r5,-128
800875d4:	29bff726 	beq	r5,r6,800875b4 <_dtoa_r+0xbec>
800875d8:	21000044 	addi	r4,r4,1
800875dc:	11000005 	stb	r4,0(r2)
800875e0:	a80b883a 	mov	r5,r21
800875e4:	e009883a 	mov	r4,fp
800875e8:	008a10c0 	call	8008a10c <_Bfree>
800875ec:	883ea026 	beq	r17,zero,80087070 <_dtoa_r+0x6a8>
800875f0:	90000426 	beq	r18,zero,80087604 <_dtoa_r+0xc3c>
800875f4:	94400326 	beq	r18,r17,80087604 <_dtoa_r+0xc3c>
800875f8:	900b883a 	mov	r5,r18
800875fc:	e009883a 	mov	r4,fp
80087600:	008a10c0 	call	8008a10c <_Bfree>
80087604:	880b883a 	mov	r5,r17
80087608:	e009883a 	mov	r4,fp
8008760c:	008a10c0 	call	8008a10c <_Bfree>
80087610:	003e9706 	br	80087070 <_dtoa_r+0x6a8>
80087614:	01800044 	movi	r6,1
80087618:	d9800e15 	stw	r6,56(sp)
8008761c:	003d9606 	br	80086c78 <_dtoa_r+0x2b0>
80087620:	d8800817 	ldw	r2,32(sp)
80087624:	d8c00517 	ldw	r3,20(sp)
80087628:	d8000d15 	stw	zero,52(sp)
8008762c:	10c5c83a 	sub	r2,r2,r3
80087630:	00c9c83a 	sub	r4,zero,r3
80087634:	d8800815 	stw	r2,32(sp)
80087638:	d9000a15 	stw	r4,40(sp)
8008763c:	003d9706 	br	80086c9c <_dtoa_r+0x2d4>
80087640:	05adc83a 	sub	r22,zero,r22
80087644:	dd800815 	stw	r22,32(sp)
80087648:	002d883a 	mov	r22,zero
8008764c:	003d8e06 	br	80086c88 <_dtoa_r+0x2c0>
80087650:	d9000517 	ldw	r4,20(sp)
80087654:	009170c0 	call	8009170c <__floatsidf>
80087658:	100d883a 	mov	r6,r2
8008765c:	180f883a 	mov	r7,r3
80087660:	a009883a 	mov	r4,r20
80087664:	880b883a 	mov	r5,r17
80087668:	0090c140 	call	80090c14 <__eqdf2>
8008766c:	103d7126 	beq	r2,zero,80086c34 <_dtoa_r+0x26c>
80087670:	d9c00517 	ldw	r7,20(sp)
80087674:	39ffffc4 	addi	r7,r7,-1
80087678:	d9c00515 	stw	r7,20(sp)
8008767c:	003d6d06 	br	80086c34 <_dtoa_r+0x26c>
80087680:	dd400a17 	ldw	r21,40(sp)
80087684:	dd000817 	ldw	r20,32(sp)
80087688:	0023883a 	mov	r17,zero
8008768c:	003f4806 	br	800873b0 <_dtoa_r+0x9e8>
80087690:	10e3c83a 	sub	r17,r2,r3
80087694:	9448983a 	sll	r4,r18,r17
80087698:	003d3206 	br	80086b64 <_dtoa_r+0x19c>
8008769c:	d8000e15 	stw	zero,56(sp)
800876a0:	003d7506 	br	80086c78 <_dtoa_r+0x2b0>
800876a4:	b005883a 	mov	r2,r22
800876a8:	003f4506 	br	800873c0 <_dtoa_r+0x9f8>
800876ac:	dc000915 	stw	r16,36(sp)
800876b0:	d9800a17 	ldw	r6,40(sp)
800876b4:	d9400917 	ldw	r5,36(sp)
800876b8:	e009883a 	mov	r4,fp
800876bc:	008a6a40 	call	8008a6a4 <__pow5mult>
800876c0:	1021883a 	mov	r16,r2
800876c4:	003f5a06 	br	80087430 <_dtoa_r+0xa68>
800876c8:	01c00044 	movi	r7,1
800876cc:	d9c00b15 	stw	r7,44(sp)
800876d0:	d8802217 	ldw	r2,136(sp)
800876d4:	0081280e 	bge	zero,r2,80087b78 <_dtoa_r+0x11b0>
800876d8:	100d883a 	mov	r6,r2
800876dc:	1021883a 	mov	r16,r2
800876e0:	d8800c15 	stw	r2,48(sp)
800876e4:	d8800615 	stw	r2,24(sp)
800876e8:	003d8806 	br	80086d0c <_dtoa_r+0x344>
800876ec:	d8800617 	ldw	r2,24(sp)
800876f0:	00be9b16 	blt	zero,r2,80087160 <_dtoa_r+0x798>
800876f4:	10010f1e 	bne	r2,zero,80087b34 <_dtoa_r+0x116c>
800876f8:	880b883a 	mov	r5,r17
800876fc:	000d883a 	mov	r6,zero
80087700:	01d00534 	movhi	r7,16404
80087704:	8009883a 	mov	r4,r16
80087708:	00814680 	call	80081468 <__muldf3>
8008770c:	900d883a 	mov	r6,r18
80087710:	980f883a 	mov	r7,r19
80087714:	1009883a 	mov	r4,r2
80087718:	180b883a 	mov	r5,r3
8008771c:	008138c0 	call	8008138c <__gedf2>
80087720:	002b883a 	mov	r21,zero
80087724:	0023883a 	mov	r17,zero
80087728:	1000bf16 	blt	r2,zero,80087a28 <_dtoa_r+0x1060>
8008772c:	d9802217 	ldw	r6,136(sp)
80087730:	ddc00717 	ldw	r23,28(sp)
80087734:	018c303a 	nor	r6,zero,r6
80087738:	d9800515 	stw	r6,20(sp)
8008773c:	a80b883a 	mov	r5,r21
80087740:	e009883a 	mov	r4,fp
80087744:	008a10c0 	call	8008a10c <_Bfree>
80087748:	883e4926 	beq	r17,zero,80087070 <_dtoa_r+0x6a8>
8008774c:	003fad06 	br	80087604 <_dtoa_r+0xc3c>
80087750:	d9c01117 	ldw	r7,68(sp)
80087754:	3801bc26 	beq	r7,zero,80087e48 <_dtoa_r+0x1480>
80087758:	10810cc4 	addi	r2,r2,1075
8008775c:	dd400a17 	ldw	r21,40(sp)
80087760:	dd000817 	ldw	r20,32(sp)
80087764:	003f0a06 	br	80087390 <_dtoa_r+0x9c8>
80087768:	00800704 	movi	r2,28
8008776c:	d9000817 	ldw	r4,32(sp)
80087770:	a0a9883a 	add	r20,r20,r2
80087774:	b0ad883a 	add	r22,r22,r2
80087778:	2089883a 	add	r4,r4,r2
8008777c:	d9000815 	stw	r4,32(sp)
80087780:	003f5106 	br	800874c8 <_dtoa_r+0xb00>
80087784:	d8c00317 	ldw	r3,12(sp)
80087788:	b8c1fc0e 	bge	r23,r3,80087f7c <_dtoa_r+0x15b4>
8008778c:	0027883a 	mov	r19,zero
80087790:	b805883a 	mov	r2,r23
80087794:	003f3e06 	br	80087490 <_dtoa_r+0xac8>
80087798:	880b883a 	mov	r5,r17
8008779c:	e009883a 	mov	r4,fp
800877a0:	000f883a 	mov	r7,zero
800877a4:	01800284 	movi	r6,10
800877a8:	008a1340 	call	8008a134 <__multadd>
800877ac:	d9000c17 	ldw	r4,48(sp)
800877b0:	1023883a 	mov	r17,r2
800877b4:	0102040e 	bge	zero,r4,80087fc8 <_dtoa_r+0x1600>
800877b8:	d9000615 	stw	r4,24(sp)
800877bc:	0500050e 	bge	zero,r20,800877d4 <_dtoa_r+0xe0c>
800877c0:	880b883a 	mov	r5,r17
800877c4:	a00d883a 	mov	r6,r20
800877c8:	e009883a 	mov	r4,fp
800877cc:	008a7e40 	call	8008a7e4 <__lshift>
800877d0:	1023883a 	mov	r17,r2
800877d4:	9801241e 	bne	r19,zero,80087c68 <_dtoa_r+0x12a0>
800877d8:	8829883a 	mov	r20,r17
800877dc:	d9000617 	ldw	r4,24(sp)
800877e0:	dcc00717 	ldw	r19,28(sp)
800877e4:	9480004c 	andi	r18,r18,1
800877e8:	20bfffc4 	addi	r2,r4,-1
800877ec:	9885883a 	add	r2,r19,r2
800877f0:	d8800415 	stw	r2,16(sp)
800877f4:	dc800615 	stw	r18,24(sp)
800877f8:	a80b883a 	mov	r5,r21
800877fc:	8009883a 	mov	r4,r16
80087800:	00867c80 	call	800867c8 <quorem>
80087804:	880b883a 	mov	r5,r17
80087808:	8009883a 	mov	r4,r16
8008780c:	102f883a 	mov	r23,r2
80087810:	008a92c0 	call	8008a92c <__mcmp>
80087814:	a80b883a 	mov	r5,r21
80087818:	a00d883a 	mov	r6,r20
8008781c:	e009883a 	mov	r4,fp
80087820:	102d883a 	mov	r22,r2
80087824:	008a98c0 	call	8008a98c <__mdiff>
80087828:	1007883a 	mov	r3,r2
8008782c:	10800317 	ldw	r2,12(r2)
80087830:	bc800c04 	addi	r18,r23,48
80087834:	180b883a 	mov	r5,r3
80087838:	10004e1e 	bne	r2,zero,80087974 <_dtoa_r+0xfac>
8008783c:	8009883a 	mov	r4,r16
80087840:	d8c01615 	stw	r3,88(sp)
80087844:	008a92c0 	call	8008a92c <__mcmp>
80087848:	d8c01617 	ldw	r3,88(sp)
8008784c:	e009883a 	mov	r4,fp
80087850:	d8801615 	stw	r2,88(sp)
80087854:	180b883a 	mov	r5,r3
80087858:	008a10c0 	call	8008a10c <_Bfree>
8008785c:	d8801617 	ldw	r2,88(sp)
80087860:	1000041e 	bne	r2,zero,80087874 <_dtoa_r+0xeac>
80087864:	d9800317 	ldw	r6,12(sp)
80087868:	3000021e 	bne	r6,zero,80087874 <_dtoa_r+0xeac>
8008786c:	d8c00617 	ldw	r3,24(sp)
80087870:	18003726 	beq	r3,zero,80087950 <_dtoa_r+0xf88>
80087874:	b0002016 	blt	r22,zero,800878f8 <_dtoa_r+0xf30>
80087878:	b000041e 	bne	r22,zero,8008788c <_dtoa_r+0xec4>
8008787c:	d9000317 	ldw	r4,12(sp)
80087880:	2000021e 	bne	r4,zero,8008788c <_dtoa_r+0xec4>
80087884:	d8c00617 	ldw	r3,24(sp)
80087888:	18001b26 	beq	r3,zero,800878f8 <_dtoa_r+0xf30>
8008788c:	00810716 	blt	zero,r2,80087cac <_dtoa_r+0x12e4>
80087890:	d8c00417 	ldw	r3,16(sp)
80087894:	9d800044 	addi	r22,r19,1
80087898:	9c800005 	stb	r18,0(r19)
8008789c:	b02f883a 	mov	r23,r22
800878a0:	98c10626 	beq	r19,r3,80087cbc <_dtoa_r+0x12f4>
800878a4:	800b883a 	mov	r5,r16
800878a8:	000f883a 	mov	r7,zero
800878ac:	01800284 	movi	r6,10
800878b0:	e009883a 	mov	r4,fp
800878b4:	008a1340 	call	8008a134 <__multadd>
800878b8:	1021883a 	mov	r16,r2
800878bc:	000f883a 	mov	r7,zero
800878c0:	01800284 	movi	r6,10
800878c4:	880b883a 	mov	r5,r17
800878c8:	e009883a 	mov	r4,fp
800878cc:	8d002526 	beq	r17,r20,80087964 <_dtoa_r+0xf9c>
800878d0:	008a1340 	call	8008a134 <__multadd>
800878d4:	a00b883a 	mov	r5,r20
800878d8:	000f883a 	mov	r7,zero
800878dc:	01800284 	movi	r6,10
800878e0:	e009883a 	mov	r4,fp
800878e4:	1023883a 	mov	r17,r2
800878e8:	008a1340 	call	8008a134 <__multadd>
800878ec:	1029883a 	mov	r20,r2
800878f0:	b027883a 	mov	r19,r22
800878f4:	003fc006 	br	800877f8 <_dtoa_r+0xe30>
800878f8:	9011883a 	mov	r8,r18
800878fc:	00800e0e 	bge	zero,r2,80087938 <_dtoa_r+0xf70>
80087900:	800b883a 	mov	r5,r16
80087904:	01800044 	movi	r6,1
80087908:	e009883a 	mov	r4,fp
8008790c:	da001715 	stw	r8,92(sp)
80087910:	008a7e40 	call	8008a7e4 <__lshift>
80087914:	a80b883a 	mov	r5,r21
80087918:	1009883a 	mov	r4,r2
8008791c:	1021883a 	mov	r16,r2
80087920:	008a92c0 	call	8008a92c <__mcmp>
80087924:	da001717 	ldw	r8,92(sp)
80087928:	0081960e 	bge	zero,r2,80087f84 <_dtoa_r+0x15bc>
8008792c:	00800e44 	movi	r2,57
80087930:	40817026 	beq	r8,r2,80087ef4 <_dtoa_r+0x152c>
80087934:	ba000c44 	addi	r8,r23,49
80087938:	8825883a 	mov	r18,r17
8008793c:	9dc00044 	addi	r23,r19,1
80087940:	9a000005 	stb	r8,0(r19)
80087944:	a023883a 	mov	r17,r20
80087948:	dc000915 	stw	r16,36(sp)
8008794c:	003f2406 	br	800875e0 <_dtoa_r+0xc18>
80087950:	00800e44 	movi	r2,57
80087954:	9011883a 	mov	r8,r18
80087958:	90816626 	beq	r18,r2,80087ef4 <_dtoa_r+0x152c>
8008795c:	05bff516 	blt	zero,r22,80087934 <_dtoa_r+0xf6c>
80087960:	003ff506 	br	80087938 <_dtoa_r+0xf70>
80087964:	008a1340 	call	8008a134 <__multadd>
80087968:	1023883a 	mov	r17,r2
8008796c:	1029883a 	mov	r20,r2
80087970:	003fdf06 	br	800878f0 <_dtoa_r+0xf28>
80087974:	e009883a 	mov	r4,fp
80087978:	008a10c0 	call	8008a10c <_Bfree>
8008797c:	00800044 	movi	r2,1
80087980:	003fbc06 	br	80087874 <_dtoa_r+0xeac>
80087984:	a80b883a 	mov	r5,r21
80087988:	8009883a 	mov	r4,r16
8008798c:	008a92c0 	call	8008a92c <__mcmp>
80087990:	103edb0e 	bge	r2,zero,80087500 <_dtoa_r+0xb38>
80087994:	800b883a 	mov	r5,r16
80087998:	000f883a 	mov	r7,zero
8008799c:	01800284 	movi	r6,10
800879a0:	e009883a 	mov	r4,fp
800879a4:	008a1340 	call	8008a134 <__multadd>
800879a8:	1021883a 	mov	r16,r2
800879ac:	d8800517 	ldw	r2,20(sp)
800879b0:	d8c00b17 	ldw	r3,44(sp)
800879b4:	10bfffc4 	addi	r2,r2,-1
800879b8:	d8800515 	stw	r2,20(sp)
800879bc:	183f761e 	bne	r3,zero,80087798 <_dtoa_r+0xdd0>
800879c0:	d9000c17 	ldw	r4,48(sp)
800879c4:	0101730e 	bge	zero,r4,80087f94 <_dtoa_r+0x15cc>
800879c8:	d9000615 	stw	r4,24(sp)
800879cc:	003ed006 	br	80087510 <_dtoa_r+0xb48>
800879d0:	00800084 	movi	r2,2
800879d4:	3081861e 	bne	r6,r2,80087ff0 <_dtoa_r+0x1628>
800879d8:	d8000b15 	stw	zero,44(sp)
800879dc:	003f3c06 	br	800876d0 <_dtoa_r+0xd08>
800879e0:	dc000917 	ldw	r16,36(sp)
800879e4:	003e9206 	br	80087430 <_dtoa_r+0xa68>
800879e8:	d9c00317 	ldw	r7,12(sp)
800879ec:	00800084 	movi	r2,2
800879f0:	11fec50e 	bge	r2,r7,80087508 <_dtoa_r+0xb40>
800879f4:	d9000617 	ldw	r4,24(sp)
800879f8:	20013c1e 	bne	r4,zero,80087eec <_dtoa_r+0x1524>
800879fc:	a80b883a 	mov	r5,r21
80087a00:	000f883a 	mov	r7,zero
80087a04:	01800144 	movi	r6,5
80087a08:	e009883a 	mov	r4,fp
80087a0c:	008a1340 	call	8008a134 <__multadd>
80087a10:	100b883a 	mov	r5,r2
80087a14:	8009883a 	mov	r4,r16
80087a18:	102b883a 	mov	r21,r2
80087a1c:	008a92c0 	call	8008a92c <__mcmp>
80087a20:	dc000915 	stw	r16,36(sp)
80087a24:	00bf410e 	bge	zero,r2,8008772c <_dtoa_r+0xd64>
80087a28:	d9c00717 	ldw	r7,28(sp)
80087a2c:	00800c44 	movi	r2,49
80087a30:	38800005 	stb	r2,0(r7)
80087a34:	d8800517 	ldw	r2,20(sp)
80087a38:	3dc00044 	addi	r23,r7,1
80087a3c:	10800044 	addi	r2,r2,1
80087a40:	d8800515 	stw	r2,20(sp)
80087a44:	003f3d06 	br	8008773c <_dtoa_r+0xd74>
80087a48:	d9800517 	ldw	r6,20(sp)
80087a4c:	d9c00717 	ldw	r7,28(sp)
80087a50:	00800c44 	movi	r2,49
80087a54:	31800044 	addi	r6,r6,1
80087a58:	d9800515 	stw	r6,20(sp)
80087a5c:	38800005 	stb	r2,0(r7)
80087a60:	003edf06 	br	800875e0 <_dtoa_r+0xc18>
80087a64:	d8000b15 	stw	zero,44(sp)
80087a68:	003c9f06 	br	80086ce8 <_dtoa_r+0x320>
80087a6c:	903e7e1e 	bne	r18,zero,80087468 <_dtoa_r+0xaa0>
80087a70:	00800434 	movhi	r2,16
80087a74:	10bfffc4 	addi	r2,r2,-1
80087a78:	9884703a 	and	r2,r19,r2
80087a7c:	1000ea1e 	bne	r2,zero,80087e28 <_dtoa_r+0x1460>
80087a80:	9cdffc2c 	andhi	r19,r19,32752
80087a84:	9800e826 	beq	r19,zero,80087e28 <_dtoa_r+0x1460>
80087a88:	d9c00817 	ldw	r7,32(sp)
80087a8c:	b5800044 	addi	r22,r22,1
80087a90:	04c00044 	movi	r19,1
80087a94:	39c00044 	addi	r7,r7,1
80087a98:	d9c00815 	stw	r7,32(sp)
80087a9c:	d8800d17 	ldw	r2,52(sp)
80087aa0:	103e721e 	bne	r2,zero,8008746c <_dtoa_r+0xaa4>
80087aa4:	00800044 	movi	r2,1
80087aa8:	003e7906 	br	80087490 <_dtoa_r+0xac8>
80087aac:	8009883a 	mov	r4,r16
80087ab0:	009170c0 	call	8009170c <__floatsidf>
80087ab4:	d9800f17 	ldw	r6,60(sp)
80087ab8:	d9c01017 	ldw	r7,64(sp)
80087abc:	1009883a 	mov	r4,r2
80087ac0:	180b883a 	mov	r5,r3
80087ac4:	00814680 	call	80081468 <__muldf3>
80087ac8:	000d883a 	mov	r6,zero
80087acc:	01d00734 	movhi	r7,16412
80087ad0:	1009883a 	mov	r4,r2
80087ad4:	180b883a 	mov	r5,r3
80087ad8:	008fa800 	call	8008fa80 <__adddf3>
80087adc:	047f3034 	movhi	r17,64704
80087ae0:	1021883a 	mov	r16,r2
80087ae4:	1c63883a 	add	r17,r3,r17
80087ae8:	d9000f17 	ldw	r4,60(sp)
80087aec:	d9401017 	ldw	r5,64(sp)
80087af0:	000d883a 	mov	r6,zero
80087af4:	01d00534 	movhi	r7,16404
80087af8:	0090d900 	call	80090d90 <__subdf3>
80087afc:	800d883a 	mov	r6,r16
80087b00:	880f883a 	mov	r7,r17
80087b04:	1009883a 	mov	r4,r2
80087b08:	180b883a 	mov	r5,r3
80087b0c:	102b883a 	mov	r21,r2
80087b10:	1829883a 	mov	r20,r3
80087b14:	008138c0 	call	8008138c <__gedf2>
80087b18:	00806c16 	blt	zero,r2,80087ccc <_dtoa_r+0x1304>
80087b1c:	89e0003c 	xorhi	r7,r17,32768
80087b20:	800d883a 	mov	r6,r16
80087b24:	a809883a 	mov	r4,r21
80087b28:	a00b883a 	mov	r5,r20
80087b2c:	0090c9c0 	call	80090c9c <__ledf2>
80087b30:	103d7e0e 	bge	r2,zero,8008712c <_dtoa_r+0x764>
80087b34:	002b883a 	mov	r21,zero
80087b38:	0023883a 	mov	r17,zero
80087b3c:	003efb06 	br	8008772c <_dtoa_r+0xd64>
80087b40:	d8800717 	ldw	r2,28(sp)
80087b44:	003bd006 	br	80086a88 <_dtoa_r+0xc0>
80087b48:	d9000a17 	ldw	r4,40(sp)
80087b4c:	d9800d17 	ldw	r6,52(sp)
80087b50:	dd400a15 	stw	r21,40(sp)
80087b54:	a905c83a 	sub	r2,r21,r4
80087b58:	308d883a 	add	r6,r6,r2
80087b5c:	d9800d15 	stw	r6,52(sp)
80087b60:	002b883a 	mov	r21,zero
80087b64:	003e0606 	br	80087380 <_dtoa_r+0x9b8>
80087b68:	9023883a 	mov	r17,r18
80087b6c:	9829883a 	mov	r20,r19
80087b70:	04000084 	movi	r16,2
80087b74:	003c9206 	br	80086dc0 <_dtoa_r+0x3f8>
80087b78:	04000044 	movi	r16,1
80087b7c:	dc000c15 	stw	r16,48(sp)
80087b80:	dc000615 	stw	r16,24(sp)
80087b84:	dc002215 	stw	r16,136(sp)
80087b88:	e0001115 	stw	zero,68(fp)
80087b8c:	000b883a 	mov	r5,zero
80087b90:	003c6906 	br	80086d38 <_dtoa_r+0x370>
80087b94:	3021883a 	mov	r16,r6
80087b98:	003ffb06 	br	80087b88 <_dtoa_r+0x11c0>
80087b9c:	1000021e 	bne	r2,zero,80087ba8 <_dtoa_r+0x11e0>
80087ba0:	4200004c 	andi	r8,r8,1
80087ba4:	403e7d1e 	bne	r8,zero,8008759c <_dtoa_r+0xbd4>
80087ba8:	01000c04 	movi	r4,48
80087bac:	00000106 	br	80087bb4 <_dtoa_r+0x11ec>
80087bb0:	102f883a 	mov	r23,r2
80087bb4:	b8bfffc4 	addi	r2,r23,-1
80087bb8:	10c00007 	ldb	r3,0(r2)
80087bbc:	193ffc26 	beq	r3,r4,80087bb0 <_dtoa_r+0x11e8>
80087bc0:	003e8706 	br	800875e0 <_dtoa_r+0xc18>
80087bc4:	d8800517 	ldw	r2,20(sp)
80087bc8:	00a3c83a 	sub	r17,zero,r2
80087bcc:	8800a426 	beq	r17,zero,80087e60 <_dtoa_r+0x1498>
80087bd0:	888003cc 	andi	r2,r17,15
80087bd4:	100490fa 	slli	r2,r2,3
80087bd8:	00e00274 	movhi	r3,32777
80087bdc:	18daaf04 	addi	r3,r3,27324
80087be0:	1885883a 	add	r2,r3,r2
80087be4:	11800017 	ldw	r6,0(r2)
80087be8:	11c00117 	ldw	r7,4(r2)
80087bec:	9009883a 	mov	r4,r18
80087bf0:	980b883a 	mov	r5,r19
80087bf4:	8823d13a 	srai	r17,r17,4
80087bf8:	00814680 	call	80081468 <__muldf3>
80087bfc:	d8800f15 	stw	r2,60(sp)
80087c00:	d8c01015 	stw	r3,64(sp)
80087c04:	8800e826 	beq	r17,zero,80087fa8 <_dtoa_r+0x15e0>
80087c08:	05200274 	movhi	r20,32777
80087c0c:	a51aa504 	addi	r20,r20,27284
80087c10:	04000084 	movi	r16,2
80087c14:	8980004c 	andi	r6,r17,1
80087c18:	1009883a 	mov	r4,r2
80087c1c:	8823d07a 	srai	r17,r17,1
80087c20:	180b883a 	mov	r5,r3
80087c24:	30000426 	beq	r6,zero,80087c38 <_dtoa_r+0x1270>
80087c28:	a1800017 	ldw	r6,0(r20)
80087c2c:	a1c00117 	ldw	r7,4(r20)
80087c30:	84000044 	addi	r16,r16,1
80087c34:	00814680 	call	80081468 <__muldf3>
80087c38:	a5000204 	addi	r20,r20,8
80087c3c:	883ff51e 	bne	r17,zero,80087c14 <_dtoa_r+0x124c>
80087c40:	d8800f15 	stw	r2,60(sp)
80087c44:	d8c01015 	stw	r3,64(sp)
80087c48:	003c7606 	br	80086e24 <_dtoa_r+0x45c>
80087c4c:	00c00c04 	movi	r3,48
80087c50:	10c00005 	stb	r3,0(r2)
80087c54:	d8c00517 	ldw	r3,20(sp)
80087c58:	bd3fffc3 	ldbu	r20,-1(r23)
80087c5c:	18c00044 	addi	r3,r3,1
80087c60:	d8c00515 	stw	r3,20(sp)
80087c64:	003db906 	br	8008734c <_dtoa_r+0x984>
80087c68:	89400117 	ldw	r5,4(r17)
80087c6c:	e009883a 	mov	r4,fp
80087c70:	008a0640 	call	8008a064 <_Balloc>
80087c74:	89800417 	ldw	r6,16(r17)
80087c78:	89400304 	addi	r5,r17,12
80087c7c:	11000304 	addi	r4,r2,12
80087c80:	31800084 	addi	r6,r6,2
80087c84:	318d883a 	add	r6,r6,r6
80087c88:	318d883a 	add	r6,r6,r6
80087c8c:	1027883a 	mov	r19,r2
80087c90:	0089c980 	call	80089c98 <memcpy>
80087c94:	01800044 	movi	r6,1
80087c98:	980b883a 	mov	r5,r19
80087c9c:	e009883a 	mov	r4,fp
80087ca0:	008a7e40 	call	8008a7e4 <__lshift>
80087ca4:	1029883a 	mov	r20,r2
80087ca8:	003ecc06 	br	800877dc <_dtoa_r+0xe14>
80087cac:	00800e44 	movi	r2,57
80087cb0:	90809026 	beq	r18,r2,80087ef4 <_dtoa_r+0x152c>
80087cb4:	92000044 	addi	r8,r18,1
80087cb8:	003f1f06 	br	80087938 <_dtoa_r+0xf70>
80087cbc:	9011883a 	mov	r8,r18
80087cc0:	8825883a 	mov	r18,r17
80087cc4:	a023883a 	mov	r17,r20
80087cc8:	003e2906 	br	80087570 <_dtoa_r+0xba8>
80087ccc:	002b883a 	mov	r21,zero
80087cd0:	0023883a 	mov	r17,zero
80087cd4:	003f5406 	br	80087a28 <_dtoa_r+0x1060>
80087cd8:	61bfffc4 	addi	r6,r12,-1
80087cdc:	300490fa 	slli	r2,r6,3
80087ce0:	00e00274 	movhi	r3,32777
80087ce4:	18daaf04 	addi	r3,r3,27324
80087ce8:	1885883a 	add	r2,r3,r2
80087cec:	11000017 	ldw	r4,0(r2)
80087cf0:	11400117 	ldw	r5,4(r2)
80087cf4:	d8800717 	ldw	r2,28(sp)
80087cf8:	880f883a 	mov	r7,r17
80087cfc:	d9801215 	stw	r6,72(sp)
80087d00:	800d883a 	mov	r6,r16
80087d04:	db001615 	stw	r12,88(sp)
80087d08:	15c00044 	addi	r23,r2,1
80087d0c:	00814680 	call	80081468 <__muldf3>
80087d10:	d9401017 	ldw	r5,64(sp)
80087d14:	d9000f17 	ldw	r4,60(sp)
80087d18:	d8c01515 	stw	r3,84(sp)
80087d1c:	d8801415 	stw	r2,80(sp)
80087d20:	009168c0 	call	8009168c <__fixdfsi>
80087d24:	1009883a 	mov	r4,r2
80087d28:	1021883a 	mov	r16,r2
80087d2c:	009170c0 	call	8009170c <__floatsidf>
80087d30:	d9000f17 	ldw	r4,60(sp)
80087d34:	d9401017 	ldw	r5,64(sp)
80087d38:	100d883a 	mov	r6,r2
80087d3c:	180f883a 	mov	r7,r3
80087d40:	0090d900 	call	80090d90 <__subdf3>
80087d44:	1829883a 	mov	r20,r3
80087d48:	d8c00717 	ldw	r3,28(sp)
80087d4c:	84000c04 	addi	r16,r16,48
80087d50:	1023883a 	mov	r17,r2
80087d54:	1c000005 	stb	r16,0(r3)
80087d58:	db001617 	ldw	r12,88(sp)
80087d5c:	00800044 	movi	r2,1
80087d60:	60802226 	beq	r12,r2,80087dec <_dtoa_r+0x1424>
80087d64:	d9c00717 	ldw	r7,28(sp)
80087d68:	8805883a 	mov	r2,r17
80087d6c:	b82b883a 	mov	r21,r23
80087d70:	3b19883a 	add	r12,r7,r12
80087d74:	6023883a 	mov	r17,r12
80087d78:	a007883a 	mov	r3,r20
80087d7c:	dc800f15 	stw	r18,60(sp)
80087d80:	000d883a 	mov	r6,zero
80087d84:	01d00934 	movhi	r7,16420
80087d88:	1009883a 	mov	r4,r2
80087d8c:	180b883a 	mov	r5,r3
80087d90:	00814680 	call	80081468 <__muldf3>
80087d94:	180b883a 	mov	r5,r3
80087d98:	1009883a 	mov	r4,r2
80087d9c:	1829883a 	mov	r20,r3
80087da0:	1025883a 	mov	r18,r2
80087da4:	009168c0 	call	8009168c <__fixdfsi>
80087da8:	1009883a 	mov	r4,r2
80087dac:	1021883a 	mov	r16,r2
80087db0:	009170c0 	call	8009170c <__floatsidf>
80087db4:	100d883a 	mov	r6,r2
80087db8:	180f883a 	mov	r7,r3
80087dbc:	9009883a 	mov	r4,r18
80087dc0:	a00b883a 	mov	r5,r20
80087dc4:	84000c04 	addi	r16,r16,48
80087dc8:	0090d900 	call	80090d90 <__subdf3>
80087dcc:	ad400044 	addi	r21,r21,1
80087dd0:	ac3fffc5 	stb	r16,-1(r21)
80087dd4:	ac7fea1e 	bne	r21,r17,80087d80 <_dtoa_r+0x13b8>
80087dd8:	1023883a 	mov	r17,r2
80087ddc:	d8801217 	ldw	r2,72(sp)
80087de0:	dc800f17 	ldw	r18,60(sp)
80087de4:	1829883a 	mov	r20,r3
80087de8:	b8af883a 	add	r23,r23,r2
80087dec:	d9001417 	ldw	r4,80(sp)
80087df0:	d9401517 	ldw	r5,84(sp)
80087df4:	000d883a 	mov	r6,zero
80087df8:	01cff834 	movhi	r7,16352
80087dfc:	008fa800 	call	8008fa80 <__adddf3>
80087e00:	880d883a 	mov	r6,r17
80087e04:	a00f883a 	mov	r7,r20
80087e08:	1009883a 	mov	r4,r2
80087e0c:	180b883a 	mov	r5,r3
80087e10:	0090c9c0 	call	80090c9c <__ledf2>
80087e14:	10003e0e 	bge	r2,zero,80087f10 <_dtoa_r+0x1548>
80087e18:	d9001317 	ldw	r4,76(sp)
80087e1c:	bd3fffc3 	ldbu	r20,-1(r23)
80087e20:	d9000515 	stw	r4,20(sp)
80087e24:	003d3b06 	br	80087314 <_dtoa_r+0x94c>
80087e28:	0027883a 	mov	r19,zero
80087e2c:	003f1b06 	br	80087a9c <_dtoa_r+0x10d4>
80087e30:	d8800817 	ldw	r2,32(sp)
80087e34:	11e9c83a 	sub	r20,r2,r7
80087e38:	0005883a 	mov	r2,zero
80087e3c:	003d5406 	br	80087390 <_dtoa_r+0x9c8>
80087e40:	00800044 	movi	r2,1
80087e44:	003dc706 	br	80087564 <_dtoa_r+0xb9c>
80087e48:	d8c00217 	ldw	r3,8(sp)
80087e4c:	00800d84 	movi	r2,54
80087e50:	dd400a17 	ldw	r21,40(sp)
80087e54:	10c5c83a 	sub	r2,r2,r3
80087e58:	dd000817 	ldw	r20,32(sp)
80087e5c:	003d4c06 	br	80087390 <_dtoa_r+0x9c8>
80087e60:	dc800f15 	stw	r18,60(sp)
80087e64:	dcc01015 	stw	r19,64(sp)
80087e68:	04000084 	movi	r16,2
80087e6c:	003bed06 	br	80086e24 <_dtoa_r+0x45c>
80087e70:	d9000617 	ldw	r4,24(sp)
80087e74:	203f0d26 	beq	r4,zero,80087aac <_dtoa_r+0x10e4>
80087e78:	d9800c17 	ldw	r6,48(sp)
80087e7c:	01bcab0e 	bge	zero,r6,8008712c <_dtoa_r+0x764>
80087e80:	d9401017 	ldw	r5,64(sp)
80087e84:	d9000f17 	ldw	r4,60(sp)
80087e88:	000d883a 	mov	r6,zero
80087e8c:	01d00934 	movhi	r7,16420
80087e90:	00814680 	call	80081468 <__muldf3>
80087e94:	81000044 	addi	r4,r16,1
80087e98:	d8800f15 	stw	r2,60(sp)
80087e9c:	d8c01015 	stw	r3,64(sp)
80087ea0:	009170c0 	call	8009170c <__floatsidf>
80087ea4:	d9800f17 	ldw	r6,60(sp)
80087ea8:	d9c01017 	ldw	r7,64(sp)
80087eac:	1009883a 	mov	r4,r2
80087eb0:	180b883a 	mov	r5,r3
80087eb4:	00814680 	call	80081468 <__muldf3>
80087eb8:	01d00734 	movhi	r7,16412
80087ebc:	000d883a 	mov	r6,zero
80087ec0:	1009883a 	mov	r4,r2
80087ec4:	180b883a 	mov	r5,r3
80087ec8:	008fa800 	call	8008fa80 <__adddf3>
80087ecc:	d9c00517 	ldw	r7,20(sp)
80087ed0:	047f3034 	movhi	r17,64704
80087ed4:	1021883a 	mov	r16,r2
80087ed8:	39ffffc4 	addi	r7,r7,-1
80087edc:	d9c01315 	stw	r7,76(sp)
80087ee0:	1c63883a 	add	r17,r3,r17
80087ee4:	db000c17 	ldw	r12,48(sp)
80087ee8:	003bea06 	br	80086e94 <_dtoa_r+0x4cc>
80087eec:	dc000915 	stw	r16,36(sp)
80087ef0:	003e0e06 	br	8008772c <_dtoa_r+0xd64>
80087ef4:	01000e44 	movi	r4,57
80087ef8:	8825883a 	mov	r18,r17
80087efc:	9dc00044 	addi	r23,r19,1
80087f00:	99000005 	stb	r4,0(r19)
80087f04:	a023883a 	mov	r17,r20
80087f08:	dc000915 	stw	r16,36(sp)
80087f0c:	003da406 	br	800875a0 <_dtoa_r+0xbd8>
80087f10:	d9801417 	ldw	r6,80(sp)
80087f14:	d9c01517 	ldw	r7,84(sp)
80087f18:	0009883a 	mov	r4,zero
80087f1c:	014ff834 	movhi	r5,16352
80087f20:	0090d900 	call	80090d90 <__subdf3>
80087f24:	880d883a 	mov	r6,r17
80087f28:	a00f883a 	mov	r7,r20
80087f2c:	1009883a 	mov	r4,r2
80087f30:	180b883a 	mov	r5,r3
80087f34:	008138c0 	call	8008138c <__gedf2>
80087f38:	00bc7c0e 	bge	zero,r2,8008712c <_dtoa_r+0x764>
80087f3c:	01000c04 	movi	r4,48
80087f40:	00000106 	br	80087f48 <_dtoa_r+0x1580>
80087f44:	102f883a 	mov	r23,r2
80087f48:	b8bfffc4 	addi	r2,r23,-1
80087f4c:	10c00007 	ldb	r3,0(r2)
80087f50:	193ffc26 	beq	r3,r4,80087f44 <_dtoa_r+0x157c>
80087f54:	d9801317 	ldw	r6,76(sp)
80087f58:	d9800515 	stw	r6,20(sp)
80087f5c:	003c4406 	br	80087070 <_dtoa_r+0x6a8>
80087f60:	d9801317 	ldw	r6,76(sp)
80087f64:	d9800515 	stw	r6,20(sp)
80087f68:	003cea06 	br	80087314 <_dtoa_r+0x94c>
80087f6c:	dd800f17 	ldw	r22,60(sp)
80087f70:	dcc01017 	ldw	r19,64(sp)
80087f74:	dc801217 	ldw	r18,72(sp)
80087f78:	003c6c06 	br	8008712c <_dtoa_r+0x764>
80087f7c:	903e031e 	bne	r18,zero,8008778c <_dtoa_r+0xdc4>
80087f80:	003ebb06 	br	80087a70 <_dtoa_r+0x10a8>
80087f84:	103e6c1e 	bne	r2,zero,80087938 <_dtoa_r+0xf70>
80087f88:	4080004c 	andi	r2,r8,1
80087f8c:	103e6a26 	beq	r2,zero,80087938 <_dtoa_r+0xf70>
80087f90:	003e6606 	br	8008792c <_dtoa_r+0xf64>
80087f94:	d8c00317 	ldw	r3,12(sp)
80087f98:	00800084 	movi	r2,2
80087f9c:	10c02916 	blt	r2,r3,80088044 <_dtoa_r+0x167c>
80087fa0:	d9000c17 	ldw	r4,48(sp)
80087fa4:	003e8806 	br	800879c8 <_dtoa_r+0x1000>
80087fa8:	04000084 	movi	r16,2
80087fac:	003b9d06 	br	80086e24 <_dtoa_r+0x45c>
80087fb0:	d9001317 	ldw	r4,76(sp)
80087fb4:	d9000515 	stw	r4,20(sp)
80087fb8:	003cd606 	br	80087314 <_dtoa_r+0x94c>
80087fbc:	d8801317 	ldw	r2,76(sp)
80087fc0:	d8800515 	stw	r2,20(sp)
80087fc4:	003c2a06 	br	80087070 <_dtoa_r+0x6a8>
80087fc8:	d9800317 	ldw	r6,12(sp)
80087fcc:	00800084 	movi	r2,2
80087fd0:	11801516 	blt	r2,r6,80088028 <_dtoa_r+0x1660>
80087fd4:	d9c00c17 	ldw	r7,48(sp)
80087fd8:	d9c00615 	stw	r7,24(sp)
80087fdc:	003df706 	br	800877bc <_dtoa_r+0xdf4>
80087fe0:	193d3926 	beq	r3,r4,800874c8 <_dtoa_r+0xb00>
80087fe4:	00c00f04 	movi	r3,60
80087fe8:	1885c83a 	sub	r2,r3,r2
80087fec:	003ddf06 	br	8008776c <_dtoa_r+0xda4>
80087ff0:	e009883a 	mov	r4,fp
80087ff4:	e0001115 	stw	zero,68(fp)
80087ff8:	000b883a 	mov	r5,zero
80087ffc:	008a0640 	call	8008a064 <_Balloc>
80088000:	d8800715 	stw	r2,28(sp)
80088004:	d8c00717 	ldw	r3,28(sp)
80088008:	00bfffc4 	movi	r2,-1
8008800c:	01000044 	movi	r4,1
80088010:	d8800c15 	stw	r2,48(sp)
80088014:	e0c01015 	stw	r3,64(fp)
80088018:	d9000b15 	stw	r4,44(sp)
8008801c:	d8800615 	stw	r2,24(sp)
80088020:	d8002215 	stw	zero,136(sp)
80088024:	003c4106 	br	8008712c <_dtoa_r+0x764>
80088028:	d8c00c17 	ldw	r3,48(sp)
8008802c:	d8c00615 	stw	r3,24(sp)
80088030:	003e7006 	br	800879f4 <_dtoa_r+0x102c>
80088034:	04400044 	movi	r17,1
80088038:	003b2006 	br	80086cbc <_dtoa_r+0x2f4>
8008803c:	000b883a 	mov	r5,zero
80088040:	003b3d06 	br	80086d38 <_dtoa_r+0x370>
80088044:	d8800c17 	ldw	r2,48(sp)
80088048:	d8800615 	stw	r2,24(sp)
8008804c:	003e6906 	br	800879f4 <_dtoa_r+0x102c>

80088050 <__sflush_r>:
80088050:	2880030b 	ldhu	r2,12(r5)
80088054:	defffb04 	addi	sp,sp,-20
80088058:	dcc00315 	stw	r19,12(sp)
8008805c:	dc400115 	stw	r17,4(sp)
80088060:	dfc00415 	stw	ra,16(sp)
80088064:	dc800215 	stw	r18,8(sp)
80088068:	dc000015 	stw	r16,0(sp)
8008806c:	10c0020c 	andi	r3,r2,8
80088070:	2823883a 	mov	r17,r5
80088074:	2027883a 	mov	r19,r4
80088078:	1800311e 	bne	r3,zero,80088140 <__sflush_r+0xf0>
8008807c:	28c00117 	ldw	r3,4(r5)
80088080:	10820014 	ori	r2,r2,2048
80088084:	2880030d 	sth	r2,12(r5)
80088088:	00c04b0e 	bge	zero,r3,800881b8 <__sflush_r+0x168>
8008808c:	8a000a17 	ldw	r8,40(r17)
80088090:	40002326 	beq	r8,zero,80088120 <__sflush_r+0xd0>
80088094:	9c000017 	ldw	r16,0(r19)
80088098:	10c4000c 	andi	r3,r2,4096
8008809c:	98000015 	stw	zero,0(r19)
800880a0:	18004826 	beq	r3,zero,800881c4 <__sflush_r+0x174>
800880a4:	89801417 	ldw	r6,80(r17)
800880a8:	10c0010c 	andi	r3,r2,4
800880ac:	18000626 	beq	r3,zero,800880c8 <__sflush_r+0x78>
800880b0:	88c00117 	ldw	r3,4(r17)
800880b4:	88800c17 	ldw	r2,48(r17)
800880b8:	30cdc83a 	sub	r6,r6,r3
800880bc:	10000226 	beq	r2,zero,800880c8 <__sflush_r+0x78>
800880c0:	88800f17 	ldw	r2,60(r17)
800880c4:	308dc83a 	sub	r6,r6,r2
800880c8:	89400717 	ldw	r5,28(r17)
800880cc:	000f883a 	mov	r7,zero
800880d0:	9809883a 	mov	r4,r19
800880d4:	403ee83a 	callr	r8
800880d8:	00ffffc4 	movi	r3,-1
800880dc:	10c04426 	beq	r2,r3,800881f0 <__sflush_r+0x1a0>
800880e0:	88c0030b 	ldhu	r3,12(r17)
800880e4:	89000417 	ldw	r4,16(r17)
800880e8:	88000115 	stw	zero,4(r17)
800880ec:	197dffcc 	andi	r5,r3,63487
800880f0:	8940030d 	sth	r5,12(r17)
800880f4:	89000015 	stw	r4,0(r17)
800880f8:	18c4000c 	andi	r3,r3,4096
800880fc:	18002c1e 	bne	r3,zero,800881b0 <__sflush_r+0x160>
80088100:	89400c17 	ldw	r5,48(r17)
80088104:	9c000015 	stw	r16,0(r19)
80088108:	28000526 	beq	r5,zero,80088120 <__sflush_r+0xd0>
8008810c:	88801004 	addi	r2,r17,64
80088110:	28800226 	beq	r5,r2,8008811c <__sflush_r+0xcc>
80088114:	9809883a 	mov	r4,r19
80088118:	00887bc0 	call	800887bc <_free_r>
8008811c:	88000c15 	stw	zero,48(r17)
80088120:	0005883a 	mov	r2,zero
80088124:	dfc00417 	ldw	ra,16(sp)
80088128:	dcc00317 	ldw	r19,12(sp)
8008812c:	dc800217 	ldw	r18,8(sp)
80088130:	dc400117 	ldw	r17,4(sp)
80088134:	dc000017 	ldw	r16,0(sp)
80088138:	dec00504 	addi	sp,sp,20
8008813c:	f800283a 	ret
80088140:	2c800417 	ldw	r18,16(r5)
80088144:	903ff626 	beq	r18,zero,80088120 <__sflush_r+0xd0>
80088148:	2c000017 	ldw	r16,0(r5)
8008814c:	108000cc 	andi	r2,r2,3
80088150:	2c800015 	stw	r18,0(r5)
80088154:	84a1c83a 	sub	r16,r16,r18
80088158:	1000131e 	bne	r2,zero,800881a8 <__sflush_r+0x158>
8008815c:	28800517 	ldw	r2,20(r5)
80088160:	88800215 	stw	r2,8(r17)
80088164:	04000316 	blt	zero,r16,80088174 <__sflush_r+0x124>
80088168:	003fed06 	br	80088120 <__sflush_r+0xd0>
8008816c:	90a5883a 	add	r18,r18,r2
80088170:	043feb0e 	bge	zero,r16,80088120 <__sflush_r+0xd0>
80088174:	88800917 	ldw	r2,36(r17)
80088178:	89400717 	ldw	r5,28(r17)
8008817c:	800f883a 	mov	r7,r16
80088180:	900d883a 	mov	r6,r18
80088184:	9809883a 	mov	r4,r19
80088188:	103ee83a 	callr	r2
8008818c:	80a1c83a 	sub	r16,r16,r2
80088190:	00bff616 	blt	zero,r2,8008816c <__sflush_r+0x11c>
80088194:	88c0030b 	ldhu	r3,12(r17)
80088198:	00bfffc4 	movi	r2,-1
8008819c:	18c01014 	ori	r3,r3,64
800881a0:	88c0030d 	sth	r3,12(r17)
800881a4:	003fdf06 	br	80088124 <__sflush_r+0xd4>
800881a8:	0005883a 	mov	r2,zero
800881ac:	003fec06 	br	80088160 <__sflush_r+0x110>
800881b0:	88801415 	stw	r2,80(r17)
800881b4:	003fd206 	br	80088100 <__sflush_r+0xb0>
800881b8:	28c00f17 	ldw	r3,60(r5)
800881bc:	00ffb316 	blt	zero,r3,8008808c <__sflush_r+0x3c>
800881c0:	003fd706 	br	80088120 <__sflush_r+0xd0>
800881c4:	89400717 	ldw	r5,28(r17)
800881c8:	000d883a 	mov	r6,zero
800881cc:	01c00044 	movi	r7,1
800881d0:	9809883a 	mov	r4,r19
800881d4:	403ee83a 	callr	r8
800881d8:	100d883a 	mov	r6,r2
800881dc:	00bfffc4 	movi	r2,-1
800881e0:	30801426 	beq	r6,r2,80088234 <__sflush_r+0x1e4>
800881e4:	8880030b 	ldhu	r2,12(r17)
800881e8:	8a000a17 	ldw	r8,40(r17)
800881ec:	003fae06 	br	800880a8 <__sflush_r+0x58>
800881f0:	98c00017 	ldw	r3,0(r19)
800881f4:	183fba26 	beq	r3,zero,800880e0 <__sflush_r+0x90>
800881f8:	01000744 	movi	r4,29
800881fc:	19000626 	beq	r3,r4,80088218 <__sflush_r+0x1c8>
80088200:	01000584 	movi	r4,22
80088204:	19000426 	beq	r3,r4,80088218 <__sflush_r+0x1c8>
80088208:	88c0030b 	ldhu	r3,12(r17)
8008820c:	18c01014 	ori	r3,r3,64
80088210:	88c0030d 	sth	r3,12(r17)
80088214:	003fc306 	br	80088124 <__sflush_r+0xd4>
80088218:	8880030b 	ldhu	r2,12(r17)
8008821c:	88c00417 	ldw	r3,16(r17)
80088220:	88000115 	stw	zero,4(r17)
80088224:	10bdffcc 	andi	r2,r2,63487
80088228:	8880030d 	sth	r2,12(r17)
8008822c:	88c00015 	stw	r3,0(r17)
80088230:	003fb306 	br	80088100 <__sflush_r+0xb0>
80088234:	98800017 	ldw	r2,0(r19)
80088238:	103fea26 	beq	r2,zero,800881e4 <__sflush_r+0x194>
8008823c:	00c00744 	movi	r3,29
80088240:	10c00226 	beq	r2,r3,8008824c <__sflush_r+0x1fc>
80088244:	00c00584 	movi	r3,22
80088248:	10c0031e 	bne	r2,r3,80088258 <__sflush_r+0x208>
8008824c:	9c000015 	stw	r16,0(r19)
80088250:	0005883a 	mov	r2,zero
80088254:	003fb306 	br	80088124 <__sflush_r+0xd4>
80088258:	88c0030b 	ldhu	r3,12(r17)
8008825c:	3005883a 	mov	r2,r6
80088260:	18c01014 	ori	r3,r3,64
80088264:	88c0030d 	sth	r3,12(r17)
80088268:	003fae06 	br	80088124 <__sflush_r+0xd4>

8008826c <_fflush_r>:
8008826c:	defffd04 	addi	sp,sp,-12
80088270:	dc000115 	stw	r16,4(sp)
80088274:	dfc00215 	stw	ra,8(sp)
80088278:	2021883a 	mov	r16,r4
8008827c:	20000226 	beq	r4,zero,80088288 <_fflush_r+0x1c>
80088280:	20800e17 	ldw	r2,56(r4)
80088284:	10000c26 	beq	r2,zero,800882b8 <_fflush_r+0x4c>
80088288:	2880030f 	ldh	r2,12(r5)
8008828c:	1000051e 	bne	r2,zero,800882a4 <_fflush_r+0x38>
80088290:	0005883a 	mov	r2,zero
80088294:	dfc00217 	ldw	ra,8(sp)
80088298:	dc000117 	ldw	r16,4(sp)
8008829c:	dec00304 	addi	sp,sp,12
800882a0:	f800283a 	ret
800882a4:	8009883a 	mov	r4,r16
800882a8:	dfc00217 	ldw	ra,8(sp)
800882ac:	dc000117 	ldw	r16,4(sp)
800882b0:	dec00304 	addi	sp,sp,12
800882b4:	00880501 	jmpi	80088050 <__sflush_r>
800882b8:	d9400015 	stw	r5,0(sp)
800882bc:	00886480 	call	80088648 <__sinit>
800882c0:	d9400017 	ldw	r5,0(sp)
800882c4:	003ff006 	br	80088288 <_fflush_r+0x1c>

800882c8 <fflush>:
800882c8:	20000526 	beq	r4,zero,800882e0 <fflush+0x18>
800882cc:	00a002b4 	movhi	r2,32778
800882d0:	10a29e04 	addi	r2,r2,-30088
800882d4:	200b883a 	mov	r5,r4
800882d8:	11000017 	ldw	r4,0(r2)
800882dc:	008826c1 	jmpi	8008826c <_fflush_r>
800882e0:	00a002b4 	movhi	r2,32778
800882e4:	10a29d04 	addi	r2,r2,-30092
800882e8:	11000017 	ldw	r4,0(r2)
800882ec:	01600274 	movhi	r5,32777
800882f0:	29609b04 	addi	r5,r5,-32148
800882f4:	008904c1 	jmpi	8008904c <_fwalk_reent>

800882f8 <__fp_unlock>:
800882f8:	0005883a 	mov	r2,zero
800882fc:	f800283a 	ret

80088300 <_cleanup_r>:
80088300:	01600274 	movhi	r5,32777
80088304:	29799804 	addi	r5,r5,-6560
80088308:	008904c1 	jmpi	8008904c <_fwalk_reent>

8008830c <__sinit.part.1>:
8008830c:	defff704 	addi	sp,sp,-36
80088310:	00e00274 	movhi	r3,32777
80088314:	dfc00815 	stw	ra,32(sp)
80088318:	ddc00715 	stw	r23,28(sp)
8008831c:	dd800615 	stw	r22,24(sp)
80088320:	dd400515 	stw	r21,20(sp)
80088324:	dd000415 	stw	r20,16(sp)
80088328:	dcc00315 	stw	r19,12(sp)
8008832c:	dc800215 	stw	r18,8(sp)
80088330:	dc400115 	stw	r17,4(sp)
80088334:	dc000015 	stw	r16,0(sp)
80088338:	18e0c004 	addi	r3,r3,-32000
8008833c:	24000117 	ldw	r16,4(r4)
80088340:	20c00f15 	stw	r3,60(r4)
80088344:	2080bb04 	addi	r2,r4,748
80088348:	00c000c4 	movi	r3,3
8008834c:	20c0b915 	stw	r3,740(r4)
80088350:	2080ba15 	stw	r2,744(r4)
80088354:	2000b815 	stw	zero,736(r4)
80088358:	05c00204 	movi	r23,8
8008835c:	00800104 	movi	r2,4
80088360:	2025883a 	mov	r18,r4
80088364:	b80d883a 	mov	r6,r23
80088368:	81001704 	addi	r4,r16,92
8008836c:	000b883a 	mov	r5,zero
80088370:	80000015 	stw	zero,0(r16)
80088374:	80000115 	stw	zero,4(r16)
80088378:	80000215 	stw	zero,8(r16)
8008837c:	8080030d 	sth	r2,12(r16)
80088380:	80001915 	stw	zero,100(r16)
80088384:	8000038d 	sth	zero,14(r16)
80088388:	80000415 	stw	zero,16(r16)
8008838c:	80000515 	stw	zero,20(r16)
80088390:	80000615 	stw	zero,24(r16)
80088394:	0089f3c0 	call	80089f3c <memset>
80088398:	05a00274 	movhi	r22,32777
8008839c:	94400217 	ldw	r17,8(r18)
800883a0:	05600274 	movhi	r21,32777
800883a4:	05200274 	movhi	r20,32777
800883a8:	04e00274 	movhi	r19,32777
800883ac:	b5ae1f04 	addi	r22,r22,-18308
800883b0:	ad6e3604 	addi	r21,r21,-18216
800883b4:	a52e5504 	addi	r20,r20,-18092
800883b8:	9cee6c04 	addi	r19,r19,-18000
800883bc:	85800815 	stw	r22,32(r16)
800883c0:	85400915 	stw	r21,36(r16)
800883c4:	85000a15 	stw	r20,40(r16)
800883c8:	84c00b15 	stw	r19,44(r16)
800883cc:	84000715 	stw	r16,28(r16)
800883d0:	00800284 	movi	r2,10
800883d4:	8880030d 	sth	r2,12(r17)
800883d8:	00800044 	movi	r2,1
800883dc:	b80d883a 	mov	r6,r23
800883e0:	89001704 	addi	r4,r17,92
800883e4:	000b883a 	mov	r5,zero
800883e8:	88000015 	stw	zero,0(r17)
800883ec:	88000115 	stw	zero,4(r17)
800883f0:	88000215 	stw	zero,8(r17)
800883f4:	88001915 	stw	zero,100(r17)
800883f8:	8880038d 	sth	r2,14(r17)
800883fc:	88000415 	stw	zero,16(r17)
80088400:	88000515 	stw	zero,20(r17)
80088404:	88000615 	stw	zero,24(r17)
80088408:	0089f3c0 	call	80089f3c <memset>
8008840c:	94000317 	ldw	r16,12(r18)
80088410:	00800484 	movi	r2,18
80088414:	8c400715 	stw	r17,28(r17)
80088418:	8d800815 	stw	r22,32(r17)
8008841c:	8d400915 	stw	r21,36(r17)
80088420:	8d000a15 	stw	r20,40(r17)
80088424:	8cc00b15 	stw	r19,44(r17)
80088428:	8080030d 	sth	r2,12(r16)
8008842c:	00800084 	movi	r2,2
80088430:	80000015 	stw	zero,0(r16)
80088434:	80000115 	stw	zero,4(r16)
80088438:	80000215 	stw	zero,8(r16)
8008843c:	80001915 	stw	zero,100(r16)
80088440:	8080038d 	sth	r2,14(r16)
80088444:	80000415 	stw	zero,16(r16)
80088448:	80000515 	stw	zero,20(r16)
8008844c:	80000615 	stw	zero,24(r16)
80088450:	b80d883a 	mov	r6,r23
80088454:	000b883a 	mov	r5,zero
80088458:	81001704 	addi	r4,r16,92
8008845c:	0089f3c0 	call	80089f3c <memset>
80088460:	00800044 	movi	r2,1
80088464:	84000715 	stw	r16,28(r16)
80088468:	85800815 	stw	r22,32(r16)
8008846c:	85400915 	stw	r21,36(r16)
80088470:	85000a15 	stw	r20,40(r16)
80088474:	84c00b15 	stw	r19,44(r16)
80088478:	90800e15 	stw	r2,56(r18)
8008847c:	dfc00817 	ldw	ra,32(sp)
80088480:	ddc00717 	ldw	r23,28(sp)
80088484:	dd800617 	ldw	r22,24(sp)
80088488:	dd400517 	ldw	r21,20(sp)
8008848c:	dd000417 	ldw	r20,16(sp)
80088490:	dcc00317 	ldw	r19,12(sp)
80088494:	dc800217 	ldw	r18,8(sp)
80088498:	dc400117 	ldw	r17,4(sp)
8008849c:	dc000017 	ldw	r16,0(sp)
800884a0:	dec00904 	addi	sp,sp,36
800884a4:	f800283a 	ret

800884a8 <__fp_lock>:
800884a8:	0005883a 	mov	r2,zero
800884ac:	f800283a 	ret

800884b0 <__sfmoreglue>:
800884b0:	defffc04 	addi	sp,sp,-16
800884b4:	dc400115 	stw	r17,4(sp)
800884b8:	2c7fffc4 	addi	r17,r5,-1
800884bc:	8c401a24 	muli	r17,r17,104
800884c0:	dc800215 	stw	r18,8(sp)
800884c4:	2825883a 	mov	r18,r5
800884c8:	89401d04 	addi	r5,r17,116
800884cc:	dc000015 	stw	r16,0(sp)
800884d0:	dfc00315 	stw	ra,12(sp)
800884d4:	00893a80 	call	800893a8 <_malloc_r>
800884d8:	1021883a 	mov	r16,r2
800884dc:	10000726 	beq	r2,zero,800884fc <__sfmoreglue+0x4c>
800884e0:	11000304 	addi	r4,r2,12
800884e4:	10000015 	stw	zero,0(r2)
800884e8:	14800115 	stw	r18,4(r2)
800884ec:	11000215 	stw	r4,8(r2)
800884f0:	89801a04 	addi	r6,r17,104
800884f4:	000b883a 	mov	r5,zero
800884f8:	0089f3c0 	call	80089f3c <memset>
800884fc:	8005883a 	mov	r2,r16
80088500:	dfc00317 	ldw	ra,12(sp)
80088504:	dc800217 	ldw	r18,8(sp)
80088508:	dc400117 	ldw	r17,4(sp)
8008850c:	dc000017 	ldw	r16,0(sp)
80088510:	dec00404 	addi	sp,sp,16
80088514:	f800283a 	ret

80088518 <__sfp>:
80088518:	defffb04 	addi	sp,sp,-20
8008851c:	dc000015 	stw	r16,0(sp)
80088520:	042002b4 	movhi	r16,32778
80088524:	84229d04 	addi	r16,r16,-30092
80088528:	dcc00315 	stw	r19,12(sp)
8008852c:	2027883a 	mov	r19,r4
80088530:	81000017 	ldw	r4,0(r16)
80088534:	dfc00415 	stw	ra,16(sp)
80088538:	dc800215 	stw	r18,8(sp)
8008853c:	20800e17 	ldw	r2,56(r4)
80088540:	dc400115 	stw	r17,4(sp)
80088544:	1000021e 	bne	r2,zero,80088550 <__sfp+0x38>
80088548:	008830c0 	call	8008830c <__sinit.part.1>
8008854c:	81000017 	ldw	r4,0(r16)
80088550:	2480b804 	addi	r18,r4,736
80088554:	047fffc4 	movi	r17,-1
80088558:	91000117 	ldw	r4,4(r18)
8008855c:	94000217 	ldw	r16,8(r18)
80088560:	213fffc4 	addi	r4,r4,-1
80088564:	20000a16 	blt	r4,zero,80088590 <__sfp+0x78>
80088568:	8080030f 	ldh	r2,12(r16)
8008856c:	10000c26 	beq	r2,zero,800885a0 <__sfp+0x88>
80088570:	80c01d04 	addi	r3,r16,116
80088574:	00000206 	br	80088580 <__sfp+0x68>
80088578:	18bfe60f 	ldh	r2,-104(r3)
8008857c:	10000826 	beq	r2,zero,800885a0 <__sfp+0x88>
80088580:	213fffc4 	addi	r4,r4,-1
80088584:	1c3ffd04 	addi	r16,r3,-12
80088588:	18c01a04 	addi	r3,r3,104
8008858c:	247ffa1e 	bne	r4,r17,80088578 <__sfp+0x60>
80088590:	90800017 	ldw	r2,0(r18)
80088594:	10001d26 	beq	r2,zero,8008860c <__sfp+0xf4>
80088598:	1025883a 	mov	r18,r2
8008859c:	003fee06 	br	80088558 <__sfp+0x40>
800885a0:	00bfffc4 	movi	r2,-1
800885a4:	8080038d 	sth	r2,14(r16)
800885a8:	00800044 	movi	r2,1
800885ac:	8080030d 	sth	r2,12(r16)
800885b0:	80001915 	stw	zero,100(r16)
800885b4:	80000015 	stw	zero,0(r16)
800885b8:	80000215 	stw	zero,8(r16)
800885bc:	80000115 	stw	zero,4(r16)
800885c0:	80000415 	stw	zero,16(r16)
800885c4:	80000515 	stw	zero,20(r16)
800885c8:	80000615 	stw	zero,24(r16)
800885cc:	01800204 	movi	r6,8
800885d0:	000b883a 	mov	r5,zero
800885d4:	81001704 	addi	r4,r16,92
800885d8:	0089f3c0 	call	80089f3c <memset>
800885dc:	8005883a 	mov	r2,r16
800885e0:	80000c15 	stw	zero,48(r16)
800885e4:	80000d15 	stw	zero,52(r16)
800885e8:	80001115 	stw	zero,68(r16)
800885ec:	80001215 	stw	zero,72(r16)
800885f0:	dfc00417 	ldw	ra,16(sp)
800885f4:	dcc00317 	ldw	r19,12(sp)
800885f8:	dc800217 	ldw	r18,8(sp)
800885fc:	dc400117 	ldw	r17,4(sp)
80088600:	dc000017 	ldw	r16,0(sp)
80088604:	dec00504 	addi	sp,sp,20
80088608:	f800283a 	ret
8008860c:	01400104 	movi	r5,4
80088610:	9809883a 	mov	r4,r19
80088614:	00884b00 	call	800884b0 <__sfmoreglue>
80088618:	90800015 	stw	r2,0(r18)
8008861c:	103fde1e 	bne	r2,zero,80088598 <__sfp+0x80>
80088620:	00800304 	movi	r2,12
80088624:	98800015 	stw	r2,0(r19)
80088628:	0005883a 	mov	r2,zero
8008862c:	003ff006 	br	800885f0 <__sfp+0xd8>

80088630 <_cleanup>:
80088630:	00a002b4 	movhi	r2,32778
80088634:	10a29d04 	addi	r2,r2,-30092
80088638:	11000017 	ldw	r4,0(r2)
8008863c:	01600274 	movhi	r5,32777
80088640:	29799804 	addi	r5,r5,-6560
80088644:	008904c1 	jmpi	8008904c <_fwalk_reent>

80088648 <__sinit>:
80088648:	20800e17 	ldw	r2,56(r4)
8008864c:	10000126 	beq	r2,zero,80088654 <__sinit+0xc>
80088650:	f800283a 	ret
80088654:	008830c1 	jmpi	8008830c <__sinit.part.1>

80088658 <__sfp_lock_acquire>:
80088658:	f800283a 	ret

8008865c <__sfp_lock_release>:
8008865c:	f800283a 	ret

80088660 <__sinit_lock_acquire>:
80088660:	f800283a 	ret

80088664 <__sinit_lock_release>:
80088664:	f800283a 	ret

80088668 <__fp_lock_all>:
80088668:	00a002b4 	movhi	r2,32778
8008866c:	10a29e04 	addi	r2,r2,-30088
80088670:	11000017 	ldw	r4,0(r2)
80088674:	01600274 	movhi	r5,32777
80088678:	29612a04 	addi	r5,r5,-31576
8008867c:	0088f881 	jmpi	80088f88 <_fwalk>

80088680 <__fp_unlock_all>:
80088680:	00a002b4 	movhi	r2,32778
80088684:	10a29e04 	addi	r2,r2,-30088
80088688:	11000017 	ldw	r4,0(r2)
8008868c:	01600274 	movhi	r5,32777
80088690:	2960be04 	addi	r5,r5,-32008
80088694:	0088f881 	jmpi	80088f88 <_fwalk>

80088698 <_malloc_trim_r>:
80088698:	defffb04 	addi	sp,sp,-20
8008869c:	dcc00315 	stw	r19,12(sp)
800886a0:	04e00274 	movhi	r19,32777
800886a4:	dc800215 	stw	r18,8(sp)
800886a8:	dc400115 	stw	r17,4(sp)
800886ac:	dc000015 	stw	r16,0(sp)
800886b0:	dfc00415 	stw	ra,16(sp)
800886b4:	2821883a 	mov	r16,r5
800886b8:	9cdcc504 	addi	r19,r19,29460
800886bc:	2025883a 	mov	r18,r4
800886c0:	00920040 	call	80092004 <__malloc_lock>
800886c4:	98800217 	ldw	r2,8(r19)
800886c8:	14400117 	ldw	r17,4(r2)
800886cc:	00bfff04 	movi	r2,-4
800886d0:	88a2703a 	and	r17,r17,r2
800886d4:	8c21c83a 	sub	r16,r17,r16
800886d8:	8403fbc4 	addi	r16,r16,4079
800886dc:	8020d33a 	srli	r16,r16,12
800886e0:	0083ffc4 	movi	r2,4095
800886e4:	843fffc4 	addi	r16,r16,-1
800886e8:	8020933a 	slli	r16,r16,12
800886ec:	1400060e 	bge	r2,r16,80088708 <_malloc_trim_r+0x70>
800886f0:	000b883a 	mov	r5,zero
800886f4:	9009883a 	mov	r4,r18
800886f8:	008b8280 	call	8008b828 <_sbrk_r>
800886fc:	98c00217 	ldw	r3,8(r19)
80088700:	1c47883a 	add	r3,r3,r17
80088704:	10c00a26 	beq	r2,r3,80088730 <_malloc_trim_r+0x98>
80088708:	9009883a 	mov	r4,r18
8008870c:	00920280 	call	80092028 <__malloc_unlock>
80088710:	0005883a 	mov	r2,zero
80088714:	dfc00417 	ldw	ra,16(sp)
80088718:	dcc00317 	ldw	r19,12(sp)
8008871c:	dc800217 	ldw	r18,8(sp)
80088720:	dc400117 	ldw	r17,4(sp)
80088724:	dc000017 	ldw	r16,0(sp)
80088728:	dec00504 	addi	sp,sp,20
8008872c:	f800283a 	ret
80088730:	040bc83a 	sub	r5,zero,r16
80088734:	9009883a 	mov	r4,r18
80088738:	008b8280 	call	8008b828 <_sbrk_r>
8008873c:	00ffffc4 	movi	r3,-1
80088740:	10c00d26 	beq	r2,r3,80088778 <_malloc_trim_r+0xe0>
80088744:	00e002b4 	movhi	r3,32778
80088748:	18e9de04 	addi	r3,r3,-22664
8008874c:	18800017 	ldw	r2,0(r3)
80088750:	99000217 	ldw	r4,8(r19)
80088754:	8c23c83a 	sub	r17,r17,r16
80088758:	8c400054 	ori	r17,r17,1
8008875c:	1421c83a 	sub	r16,r2,r16
80088760:	24400115 	stw	r17,4(r4)
80088764:	9009883a 	mov	r4,r18
80088768:	1c000015 	stw	r16,0(r3)
8008876c:	00920280 	call	80092028 <__malloc_unlock>
80088770:	00800044 	movi	r2,1
80088774:	003fe706 	br	80088714 <_malloc_trim_r+0x7c>
80088778:	000b883a 	mov	r5,zero
8008877c:	9009883a 	mov	r4,r18
80088780:	008b8280 	call	8008b828 <_sbrk_r>
80088784:	99000217 	ldw	r4,8(r19)
80088788:	014003c4 	movi	r5,15
8008878c:	1107c83a 	sub	r3,r2,r4
80088790:	28ffdd0e 	bge	r5,r3,80088708 <_malloc_trim_r+0x70>
80088794:	016002b4 	movhi	r5,32778
80088798:	2962a004 	addi	r5,r5,-30080
8008879c:	29400017 	ldw	r5,0(r5)
800887a0:	18c00054 	ori	r3,r3,1
800887a4:	20c00115 	stw	r3,4(r4)
800887a8:	00e002b4 	movhi	r3,32778
800887ac:	1145c83a 	sub	r2,r2,r5
800887b0:	18e9de04 	addi	r3,r3,-22664
800887b4:	18800015 	stw	r2,0(r3)
800887b8:	003fd306 	br	80088708 <_malloc_trim_r+0x70>

800887bc <_free_r>:
800887bc:	28004126 	beq	r5,zero,800888c4 <_free_r+0x108>
800887c0:	defffd04 	addi	sp,sp,-12
800887c4:	dc400115 	stw	r17,4(sp)
800887c8:	dc000015 	stw	r16,0(sp)
800887cc:	2023883a 	mov	r17,r4
800887d0:	2821883a 	mov	r16,r5
800887d4:	dfc00215 	stw	ra,8(sp)
800887d8:	00920040 	call	80092004 <__malloc_lock>
800887dc:	81ffff17 	ldw	r7,-4(r16)
800887e0:	00bfff84 	movi	r2,-2
800887e4:	01200274 	movhi	r4,32777
800887e8:	81bffe04 	addi	r6,r16,-8
800887ec:	3884703a 	and	r2,r7,r2
800887f0:	211cc504 	addi	r4,r4,29460
800887f4:	308b883a 	add	r5,r6,r2
800887f8:	2a400117 	ldw	r9,4(r5)
800887fc:	22000217 	ldw	r8,8(r4)
80088800:	00ffff04 	movi	r3,-4
80088804:	48c6703a 	and	r3,r9,r3
80088808:	2a005726 	beq	r5,r8,80088968 <_free_r+0x1ac>
8008880c:	28c00115 	stw	r3,4(r5)
80088810:	39c0004c 	andi	r7,r7,1
80088814:	3800091e 	bne	r7,zero,8008883c <_free_r+0x80>
80088818:	823ffe17 	ldw	r8,-8(r16)
8008881c:	22400204 	addi	r9,r4,8
80088820:	320dc83a 	sub	r6,r6,r8
80088824:	31c00217 	ldw	r7,8(r6)
80088828:	1205883a 	add	r2,r2,r8
8008882c:	3a406526 	beq	r7,r9,800889c4 <_free_r+0x208>
80088830:	32000317 	ldw	r8,12(r6)
80088834:	3a000315 	stw	r8,12(r7)
80088838:	41c00215 	stw	r7,8(r8)
8008883c:	28cf883a 	add	r7,r5,r3
80088840:	39c00117 	ldw	r7,4(r7)
80088844:	39c0004c 	andi	r7,r7,1
80088848:	38003a26 	beq	r7,zero,80088934 <_free_r+0x178>
8008884c:	10c00054 	ori	r3,r2,1
80088850:	30c00115 	stw	r3,4(r6)
80088854:	3087883a 	add	r3,r6,r2
80088858:	18800015 	stw	r2,0(r3)
8008885c:	00c07fc4 	movi	r3,511
80088860:	18801936 	bltu	r3,r2,800888c8 <_free_r+0x10c>
80088864:	1004d0fa 	srli	r2,r2,3
80088868:	01c00044 	movi	r7,1
8008886c:	21400117 	ldw	r5,4(r4)
80088870:	10c00044 	addi	r3,r2,1
80088874:	18c7883a 	add	r3,r3,r3
80088878:	1005d0ba 	srai	r2,r2,2
8008887c:	18c7883a 	add	r3,r3,r3
80088880:	18c7883a 	add	r3,r3,r3
80088884:	1907883a 	add	r3,r3,r4
80088888:	3884983a 	sll	r2,r7,r2
8008888c:	19c00017 	ldw	r7,0(r3)
80088890:	1a3ffe04 	addi	r8,r3,-8
80088894:	1144b03a 	or	r2,r2,r5
80088898:	32000315 	stw	r8,12(r6)
8008889c:	31c00215 	stw	r7,8(r6)
800888a0:	20800115 	stw	r2,4(r4)
800888a4:	19800015 	stw	r6,0(r3)
800888a8:	39800315 	stw	r6,12(r7)
800888ac:	8809883a 	mov	r4,r17
800888b0:	dfc00217 	ldw	ra,8(sp)
800888b4:	dc400117 	ldw	r17,4(sp)
800888b8:	dc000017 	ldw	r16,0(sp)
800888bc:	dec00304 	addi	sp,sp,12
800888c0:	00920281 	jmpi	80092028 <__malloc_unlock>
800888c4:	f800283a 	ret
800888c8:	100ad27a 	srli	r5,r2,9
800888cc:	00c00104 	movi	r3,4
800888d0:	19404a36 	bltu	r3,r5,800889fc <_free_r+0x240>
800888d4:	100ad1ba 	srli	r5,r2,6
800888d8:	28c00e44 	addi	r3,r5,57
800888dc:	18c7883a 	add	r3,r3,r3
800888e0:	29400e04 	addi	r5,r5,56
800888e4:	18c7883a 	add	r3,r3,r3
800888e8:	18c7883a 	add	r3,r3,r3
800888ec:	1909883a 	add	r4,r3,r4
800888f0:	20c00017 	ldw	r3,0(r4)
800888f4:	01e00274 	movhi	r7,32777
800888f8:	213ffe04 	addi	r4,r4,-8
800888fc:	39dcc504 	addi	r7,r7,29460
80088900:	20c04426 	beq	r4,r3,80088a14 <_free_r+0x258>
80088904:	01ffff04 	movi	r7,-4
80088908:	19400117 	ldw	r5,4(r3)
8008890c:	29ca703a 	and	r5,r5,r7
80088910:	1140022e 	bgeu	r2,r5,8008891c <_free_r+0x160>
80088914:	18c00217 	ldw	r3,8(r3)
80088918:	20fffb1e 	bne	r4,r3,80088908 <_free_r+0x14c>
8008891c:	19000317 	ldw	r4,12(r3)
80088920:	31000315 	stw	r4,12(r6)
80088924:	30c00215 	stw	r3,8(r6)
80088928:	21800215 	stw	r6,8(r4)
8008892c:	19800315 	stw	r6,12(r3)
80088930:	003fde06 	br	800888ac <_free_r+0xf0>
80088934:	29c00217 	ldw	r7,8(r5)
80088938:	10c5883a 	add	r2,r2,r3
8008893c:	00e00274 	movhi	r3,32777
80088940:	18dcc704 	addi	r3,r3,29468
80088944:	38c03b26 	beq	r7,r3,80088a34 <_free_r+0x278>
80088948:	2a000317 	ldw	r8,12(r5)
8008894c:	11400054 	ori	r5,r2,1
80088950:	3087883a 	add	r3,r6,r2
80088954:	3a000315 	stw	r8,12(r7)
80088958:	41c00215 	stw	r7,8(r8)
8008895c:	31400115 	stw	r5,4(r6)
80088960:	18800015 	stw	r2,0(r3)
80088964:	003fbd06 	br	8008885c <_free_r+0xa0>
80088968:	39c0004c 	andi	r7,r7,1
8008896c:	10c5883a 	add	r2,r2,r3
80088970:	3800071e 	bne	r7,zero,80088990 <_free_r+0x1d4>
80088974:	81fffe17 	ldw	r7,-8(r16)
80088978:	31cdc83a 	sub	r6,r6,r7
8008897c:	30c00317 	ldw	r3,12(r6)
80088980:	31400217 	ldw	r5,8(r6)
80088984:	11c5883a 	add	r2,r2,r7
80088988:	28c00315 	stw	r3,12(r5)
8008898c:	19400215 	stw	r5,8(r3)
80088990:	10c00054 	ori	r3,r2,1
80088994:	30c00115 	stw	r3,4(r6)
80088998:	00e002b4 	movhi	r3,32778
8008899c:	18e2a104 	addi	r3,r3,-30076
800889a0:	18c00017 	ldw	r3,0(r3)
800889a4:	21800215 	stw	r6,8(r4)
800889a8:	10ffc036 	bltu	r2,r3,800888ac <_free_r+0xf0>
800889ac:	00a002b4 	movhi	r2,32778
800889b0:	10a9d504 	addi	r2,r2,-22700
800889b4:	11400017 	ldw	r5,0(r2)
800889b8:	8809883a 	mov	r4,r17
800889bc:	00886980 	call	80088698 <_malloc_trim_r>
800889c0:	003fba06 	br	800888ac <_free_r+0xf0>
800889c4:	28c9883a 	add	r4,r5,r3
800889c8:	21000117 	ldw	r4,4(r4)
800889cc:	2100004c 	andi	r4,r4,1
800889d0:	2000391e 	bne	r4,zero,80088ab8 <_free_r+0x2fc>
800889d4:	29c00217 	ldw	r7,8(r5)
800889d8:	29000317 	ldw	r4,12(r5)
800889dc:	1885883a 	add	r2,r3,r2
800889e0:	10c00054 	ori	r3,r2,1
800889e4:	39000315 	stw	r4,12(r7)
800889e8:	21c00215 	stw	r7,8(r4)
800889ec:	30c00115 	stw	r3,4(r6)
800889f0:	308d883a 	add	r6,r6,r2
800889f4:	30800015 	stw	r2,0(r6)
800889f8:	003fac06 	br	800888ac <_free_r+0xf0>
800889fc:	00c00504 	movi	r3,20
80088a00:	19401536 	bltu	r3,r5,80088a58 <_free_r+0x29c>
80088a04:	28c01704 	addi	r3,r5,92
80088a08:	18c7883a 	add	r3,r3,r3
80088a0c:	294016c4 	addi	r5,r5,91
80088a10:	003fb406 	br	800888e4 <_free_r+0x128>
80088a14:	280bd0ba 	srai	r5,r5,2
80088a18:	00c00044 	movi	r3,1
80088a1c:	38800117 	ldw	r2,4(r7)
80088a20:	194a983a 	sll	r5,r3,r5
80088a24:	2007883a 	mov	r3,r4
80088a28:	2884b03a 	or	r2,r5,r2
80088a2c:	38800115 	stw	r2,4(r7)
80088a30:	003fbb06 	br	80088920 <_free_r+0x164>
80088a34:	21800515 	stw	r6,20(r4)
80088a38:	21800415 	stw	r6,16(r4)
80088a3c:	10c00054 	ori	r3,r2,1
80088a40:	31c00315 	stw	r7,12(r6)
80088a44:	31c00215 	stw	r7,8(r6)
80088a48:	30c00115 	stw	r3,4(r6)
80088a4c:	308d883a 	add	r6,r6,r2
80088a50:	30800015 	stw	r2,0(r6)
80088a54:	003f9506 	br	800888ac <_free_r+0xf0>
80088a58:	00c01504 	movi	r3,84
80088a5c:	19400536 	bltu	r3,r5,80088a74 <_free_r+0x2b8>
80088a60:	100ad33a 	srli	r5,r2,12
80088a64:	28c01bc4 	addi	r3,r5,111
80088a68:	18c7883a 	add	r3,r3,r3
80088a6c:	29401b84 	addi	r5,r5,110
80088a70:	003f9c06 	br	800888e4 <_free_r+0x128>
80088a74:	00c05504 	movi	r3,340
80088a78:	19400536 	bltu	r3,r5,80088a90 <_free_r+0x2d4>
80088a7c:	100ad3fa 	srli	r5,r2,15
80088a80:	28c01e04 	addi	r3,r5,120
80088a84:	18c7883a 	add	r3,r3,r3
80088a88:	29401dc4 	addi	r5,r5,119
80088a8c:	003f9506 	br	800888e4 <_free_r+0x128>
80088a90:	00c15504 	movi	r3,1364
80088a94:	19400536 	bltu	r3,r5,80088aac <_free_r+0x2f0>
80088a98:	100ad4ba 	srli	r5,r2,18
80088a9c:	28c01f44 	addi	r3,r5,125
80088aa0:	18c7883a 	add	r3,r3,r3
80088aa4:	29401f04 	addi	r5,r5,124
80088aa8:	003f8e06 	br	800888e4 <_free_r+0x128>
80088aac:	00c03f84 	movi	r3,254
80088ab0:	01401f84 	movi	r5,126
80088ab4:	003f8b06 	br	800888e4 <_free_r+0x128>
80088ab8:	10c00054 	ori	r3,r2,1
80088abc:	30c00115 	stw	r3,4(r6)
80088ac0:	308d883a 	add	r6,r6,r2
80088ac4:	30800015 	stw	r2,0(r6)
80088ac8:	003f7806 	br	800888ac <_free_r+0xf0>

80088acc <__sfvwrite_r>:
80088acc:	30800217 	ldw	r2,8(r6)
80088ad0:	10006726 	beq	r2,zero,80088c70 <__sfvwrite_r+0x1a4>
80088ad4:	28c0030b 	ldhu	r3,12(r5)
80088ad8:	defff404 	addi	sp,sp,-48
80088adc:	dd400715 	stw	r21,28(sp)
80088ae0:	dd000615 	stw	r20,24(sp)
80088ae4:	dc000215 	stw	r16,8(sp)
80088ae8:	dfc00b15 	stw	ra,44(sp)
80088aec:	df000a15 	stw	fp,40(sp)
80088af0:	ddc00915 	stw	r23,36(sp)
80088af4:	dd800815 	stw	r22,32(sp)
80088af8:	dcc00515 	stw	r19,20(sp)
80088afc:	dc800415 	stw	r18,16(sp)
80088b00:	dc400315 	stw	r17,12(sp)
80088b04:	1880020c 	andi	r2,r3,8
80088b08:	2821883a 	mov	r16,r5
80088b0c:	202b883a 	mov	r21,r4
80088b10:	3029883a 	mov	r20,r6
80088b14:	10002726 	beq	r2,zero,80088bb4 <__sfvwrite_r+0xe8>
80088b18:	28800417 	ldw	r2,16(r5)
80088b1c:	10002526 	beq	r2,zero,80088bb4 <__sfvwrite_r+0xe8>
80088b20:	1880008c 	andi	r2,r3,2
80088b24:	a4400017 	ldw	r17,0(r20)
80088b28:	10002a26 	beq	r2,zero,80088bd4 <__sfvwrite_r+0x108>
80088b2c:	05a00034 	movhi	r22,32768
80088b30:	0027883a 	mov	r19,zero
80088b34:	0025883a 	mov	r18,zero
80088b38:	b5bf0004 	addi	r22,r22,-1024
80088b3c:	980d883a 	mov	r6,r19
80088b40:	a809883a 	mov	r4,r21
80088b44:	90004626 	beq	r18,zero,80088c60 <__sfvwrite_r+0x194>
80088b48:	900f883a 	mov	r7,r18
80088b4c:	b480022e 	bgeu	r22,r18,80088b58 <__sfvwrite_r+0x8c>
80088b50:	01e00034 	movhi	r7,32768
80088b54:	39ff0004 	addi	r7,r7,-1024
80088b58:	80800917 	ldw	r2,36(r16)
80088b5c:	81400717 	ldw	r5,28(r16)
80088b60:	103ee83a 	callr	r2
80088b64:	0080570e 	bge	zero,r2,80088cc4 <__sfvwrite_r+0x1f8>
80088b68:	a0c00217 	ldw	r3,8(r20)
80088b6c:	98a7883a 	add	r19,r19,r2
80088b70:	90a5c83a 	sub	r18,r18,r2
80088b74:	1885c83a 	sub	r2,r3,r2
80088b78:	a0800215 	stw	r2,8(r20)
80088b7c:	103fef1e 	bne	r2,zero,80088b3c <__sfvwrite_r+0x70>
80088b80:	0005883a 	mov	r2,zero
80088b84:	dfc00b17 	ldw	ra,44(sp)
80088b88:	df000a17 	ldw	fp,40(sp)
80088b8c:	ddc00917 	ldw	r23,36(sp)
80088b90:	dd800817 	ldw	r22,32(sp)
80088b94:	dd400717 	ldw	r21,28(sp)
80088b98:	dd000617 	ldw	r20,24(sp)
80088b9c:	dcc00517 	ldw	r19,20(sp)
80088ba0:	dc800417 	ldw	r18,16(sp)
80088ba4:	dc400317 	ldw	r17,12(sp)
80088ba8:	dc000217 	ldw	r16,8(sp)
80088bac:	dec00c04 	addi	sp,sp,48
80088bb0:	f800283a 	ret
80088bb4:	800b883a 	mov	r5,r16
80088bb8:	a809883a 	mov	r4,r21
80088bbc:	00866740 	call	80086674 <__swsetup_r>
80088bc0:	1000eb1e 	bne	r2,zero,80088f70 <__sfvwrite_r+0x4a4>
80088bc4:	80c0030b 	ldhu	r3,12(r16)
80088bc8:	a4400017 	ldw	r17,0(r20)
80088bcc:	1880008c 	andi	r2,r3,2
80088bd0:	103fd61e 	bne	r2,zero,80088b2c <__sfvwrite_r+0x60>
80088bd4:	1880004c 	andi	r2,r3,1
80088bd8:	10003f1e 	bne	r2,zero,80088cd8 <__sfvwrite_r+0x20c>
80088bdc:	0039883a 	mov	fp,zero
80088be0:	0025883a 	mov	r18,zero
80088be4:	90001a26 	beq	r18,zero,80088c50 <__sfvwrite_r+0x184>
80088be8:	1880800c 	andi	r2,r3,512
80088bec:	84c00217 	ldw	r19,8(r16)
80088bf0:	10002126 	beq	r2,zero,80088c78 <__sfvwrite_r+0x1ac>
80088bf4:	982f883a 	mov	r23,r19
80088bf8:	94c09336 	bltu	r18,r19,80088e48 <__sfvwrite_r+0x37c>
80088bfc:	1881200c 	andi	r2,r3,1152
80088c00:	10009e1e 	bne	r2,zero,80088e7c <__sfvwrite_r+0x3b0>
80088c04:	81000017 	ldw	r4,0(r16)
80088c08:	b80d883a 	mov	r6,r23
80088c0c:	e00b883a 	mov	r5,fp
80088c10:	0089de00 	call	80089de0 <memmove>
80088c14:	80c00217 	ldw	r3,8(r16)
80088c18:	81000017 	ldw	r4,0(r16)
80088c1c:	9005883a 	mov	r2,r18
80088c20:	1ce7c83a 	sub	r19,r3,r19
80088c24:	25cf883a 	add	r7,r4,r23
80088c28:	84c00215 	stw	r19,8(r16)
80088c2c:	81c00015 	stw	r7,0(r16)
80088c30:	a0c00217 	ldw	r3,8(r20)
80088c34:	e0b9883a 	add	fp,fp,r2
80088c38:	90a5c83a 	sub	r18,r18,r2
80088c3c:	18a7c83a 	sub	r19,r3,r2
80088c40:	a4c00215 	stw	r19,8(r20)
80088c44:	983fce26 	beq	r19,zero,80088b80 <__sfvwrite_r+0xb4>
80088c48:	80c0030b 	ldhu	r3,12(r16)
80088c4c:	903fe61e 	bne	r18,zero,80088be8 <__sfvwrite_r+0x11c>
80088c50:	8f000017 	ldw	fp,0(r17)
80088c54:	8c800117 	ldw	r18,4(r17)
80088c58:	8c400204 	addi	r17,r17,8
80088c5c:	003fe106 	br	80088be4 <__sfvwrite_r+0x118>
80088c60:	8cc00017 	ldw	r19,0(r17)
80088c64:	8c800117 	ldw	r18,4(r17)
80088c68:	8c400204 	addi	r17,r17,8
80088c6c:	003fb306 	br	80088b3c <__sfvwrite_r+0x70>
80088c70:	0005883a 	mov	r2,zero
80088c74:	f800283a 	ret
80088c78:	81000017 	ldw	r4,0(r16)
80088c7c:	80800417 	ldw	r2,16(r16)
80088c80:	11005736 	bltu	r2,r4,80088de0 <__sfvwrite_r+0x314>
80088c84:	85c00517 	ldw	r23,20(r16)
80088c88:	95c05536 	bltu	r18,r23,80088de0 <__sfvwrite_r+0x314>
80088c8c:	00a00034 	movhi	r2,32768
80088c90:	10bfffc4 	addi	r2,r2,-1
80088c94:	9009883a 	mov	r4,r18
80088c98:	1480012e 	bgeu	r2,r18,80088ca0 <__sfvwrite_r+0x1d4>
80088c9c:	1009883a 	mov	r4,r2
80088ca0:	b80b883a 	mov	r5,r23
80088ca4:	008f8cc0 	call	8008f8cc <__divsi3>
80088ca8:	15cf383a 	mul	r7,r2,r23
80088cac:	81400717 	ldw	r5,28(r16)
80088cb0:	80800917 	ldw	r2,36(r16)
80088cb4:	e00d883a 	mov	r6,fp
80088cb8:	a809883a 	mov	r4,r21
80088cbc:	103ee83a 	callr	r2
80088cc0:	00bfdb16 	blt	zero,r2,80088c30 <__sfvwrite_r+0x164>
80088cc4:	8080030b 	ldhu	r2,12(r16)
80088cc8:	10801014 	ori	r2,r2,64
80088ccc:	8080030d 	sth	r2,12(r16)
80088cd0:	00bfffc4 	movi	r2,-1
80088cd4:	003fab06 	br	80088b84 <__sfvwrite_r+0xb8>
80088cd8:	0027883a 	mov	r19,zero
80088cdc:	0011883a 	mov	r8,zero
80088ce0:	0039883a 	mov	fp,zero
80088ce4:	0025883a 	mov	r18,zero
80088ce8:	90001f26 	beq	r18,zero,80088d68 <__sfvwrite_r+0x29c>
80088cec:	40005a26 	beq	r8,zero,80088e58 <__sfvwrite_r+0x38c>
80088cf0:	982d883a 	mov	r22,r19
80088cf4:	94c0012e 	bgeu	r18,r19,80088cfc <__sfvwrite_r+0x230>
80088cf8:	902d883a 	mov	r22,r18
80088cfc:	81000017 	ldw	r4,0(r16)
80088d00:	80800417 	ldw	r2,16(r16)
80088d04:	b02f883a 	mov	r23,r22
80088d08:	81c00517 	ldw	r7,20(r16)
80088d0c:	1100032e 	bgeu	r2,r4,80088d1c <__sfvwrite_r+0x250>
80088d10:	80c00217 	ldw	r3,8(r16)
80088d14:	38c7883a 	add	r3,r7,r3
80088d18:	1d801816 	blt	r3,r22,80088d7c <__sfvwrite_r+0x2b0>
80088d1c:	b1c03e16 	blt	r22,r7,80088e18 <__sfvwrite_r+0x34c>
80088d20:	80800917 	ldw	r2,36(r16)
80088d24:	81400717 	ldw	r5,28(r16)
80088d28:	e00d883a 	mov	r6,fp
80088d2c:	da000115 	stw	r8,4(sp)
80088d30:	a809883a 	mov	r4,r21
80088d34:	103ee83a 	callr	r2
80088d38:	102f883a 	mov	r23,r2
80088d3c:	da000117 	ldw	r8,4(sp)
80088d40:	00bfe00e 	bge	zero,r2,80088cc4 <__sfvwrite_r+0x1f8>
80088d44:	9de7c83a 	sub	r19,r19,r23
80088d48:	98001f26 	beq	r19,zero,80088dc8 <__sfvwrite_r+0x2fc>
80088d4c:	a0800217 	ldw	r2,8(r20)
80088d50:	e5f9883a 	add	fp,fp,r23
80088d54:	95e5c83a 	sub	r18,r18,r23
80088d58:	15efc83a 	sub	r23,r2,r23
80088d5c:	a5c00215 	stw	r23,8(r20)
80088d60:	b83f8726 	beq	r23,zero,80088b80 <__sfvwrite_r+0xb4>
80088d64:	903fe11e 	bne	r18,zero,80088cec <__sfvwrite_r+0x220>
80088d68:	8f000017 	ldw	fp,0(r17)
80088d6c:	8c800117 	ldw	r18,4(r17)
80088d70:	0011883a 	mov	r8,zero
80088d74:	8c400204 	addi	r17,r17,8
80088d78:	003fdb06 	br	80088ce8 <__sfvwrite_r+0x21c>
80088d7c:	180d883a 	mov	r6,r3
80088d80:	e00b883a 	mov	r5,fp
80088d84:	da000115 	stw	r8,4(sp)
80088d88:	d8c00015 	stw	r3,0(sp)
80088d8c:	0089de00 	call	80089de0 <memmove>
80088d90:	d8c00017 	ldw	r3,0(sp)
80088d94:	80800017 	ldw	r2,0(r16)
80088d98:	800b883a 	mov	r5,r16
80088d9c:	a809883a 	mov	r4,r21
80088da0:	10c5883a 	add	r2,r2,r3
80088da4:	80800015 	stw	r2,0(r16)
80088da8:	d8c00015 	stw	r3,0(sp)
80088dac:	008826c0 	call	8008826c <_fflush_r>
80088db0:	d8c00017 	ldw	r3,0(sp)
80088db4:	da000117 	ldw	r8,4(sp)
80088db8:	103fc21e 	bne	r2,zero,80088cc4 <__sfvwrite_r+0x1f8>
80088dbc:	182f883a 	mov	r23,r3
80088dc0:	9de7c83a 	sub	r19,r19,r23
80088dc4:	983fe11e 	bne	r19,zero,80088d4c <__sfvwrite_r+0x280>
80088dc8:	800b883a 	mov	r5,r16
80088dcc:	a809883a 	mov	r4,r21
80088dd0:	008826c0 	call	8008826c <_fflush_r>
80088dd4:	103fbb1e 	bne	r2,zero,80088cc4 <__sfvwrite_r+0x1f8>
80088dd8:	0011883a 	mov	r8,zero
80088ddc:	003fdb06 	br	80088d4c <__sfvwrite_r+0x280>
80088de0:	94c0012e 	bgeu	r18,r19,80088de8 <__sfvwrite_r+0x31c>
80088de4:	9027883a 	mov	r19,r18
80088de8:	980d883a 	mov	r6,r19
80088dec:	e00b883a 	mov	r5,fp
80088df0:	0089de00 	call	80089de0 <memmove>
80088df4:	80800217 	ldw	r2,8(r16)
80088df8:	80c00017 	ldw	r3,0(r16)
80088dfc:	14c5c83a 	sub	r2,r2,r19
80088e00:	1cc7883a 	add	r3,r3,r19
80088e04:	80800215 	stw	r2,8(r16)
80088e08:	80c00015 	stw	r3,0(r16)
80088e0c:	10004326 	beq	r2,zero,80088f1c <__sfvwrite_r+0x450>
80088e10:	9805883a 	mov	r2,r19
80088e14:	003f8606 	br	80088c30 <__sfvwrite_r+0x164>
80088e18:	b00d883a 	mov	r6,r22
80088e1c:	e00b883a 	mov	r5,fp
80088e20:	da000115 	stw	r8,4(sp)
80088e24:	0089de00 	call	80089de0 <memmove>
80088e28:	80800217 	ldw	r2,8(r16)
80088e2c:	80c00017 	ldw	r3,0(r16)
80088e30:	da000117 	ldw	r8,4(sp)
80088e34:	1585c83a 	sub	r2,r2,r22
80088e38:	1dad883a 	add	r22,r3,r22
80088e3c:	80800215 	stw	r2,8(r16)
80088e40:	85800015 	stw	r22,0(r16)
80088e44:	003fbf06 	br	80088d44 <__sfvwrite_r+0x278>
80088e48:	81000017 	ldw	r4,0(r16)
80088e4c:	9027883a 	mov	r19,r18
80088e50:	902f883a 	mov	r23,r18
80088e54:	003f6c06 	br	80088c08 <__sfvwrite_r+0x13c>
80088e58:	900d883a 	mov	r6,r18
80088e5c:	01400284 	movi	r5,10
80088e60:	e009883a 	mov	r4,fp
80088e64:	0089bb40 	call	80089bb4 <memchr>
80088e68:	10003e26 	beq	r2,zero,80088f64 <__sfvwrite_r+0x498>
80088e6c:	10800044 	addi	r2,r2,1
80088e70:	1727c83a 	sub	r19,r2,fp
80088e74:	02000044 	movi	r8,1
80088e78:	003f9d06 	br	80088cf0 <__sfvwrite_r+0x224>
80088e7c:	80800517 	ldw	r2,20(r16)
80088e80:	81400417 	ldw	r5,16(r16)
80088e84:	81c00017 	ldw	r7,0(r16)
80088e88:	10a7883a 	add	r19,r2,r2
80088e8c:	9885883a 	add	r2,r19,r2
80088e90:	1026d7fa 	srli	r19,r2,31
80088e94:	396dc83a 	sub	r22,r7,r5
80088e98:	b1000044 	addi	r4,r22,1
80088e9c:	9885883a 	add	r2,r19,r2
80088ea0:	1027d07a 	srai	r19,r2,1
80088ea4:	2485883a 	add	r2,r4,r18
80088ea8:	980d883a 	mov	r6,r19
80088eac:	9880022e 	bgeu	r19,r2,80088eb8 <__sfvwrite_r+0x3ec>
80088eb0:	1027883a 	mov	r19,r2
80088eb4:	100d883a 	mov	r6,r2
80088eb8:	18c1000c 	andi	r3,r3,1024
80088ebc:	18001c26 	beq	r3,zero,80088f30 <__sfvwrite_r+0x464>
80088ec0:	300b883a 	mov	r5,r6
80088ec4:	a809883a 	mov	r4,r21
80088ec8:	00893a80 	call	800893a8 <_malloc_r>
80088ecc:	102f883a 	mov	r23,r2
80088ed0:	10002926 	beq	r2,zero,80088f78 <__sfvwrite_r+0x4ac>
80088ed4:	81400417 	ldw	r5,16(r16)
80088ed8:	b00d883a 	mov	r6,r22
80088edc:	1009883a 	mov	r4,r2
80088ee0:	0089c980 	call	80089c98 <memcpy>
80088ee4:	8080030b 	ldhu	r2,12(r16)
80088ee8:	00fedfc4 	movi	r3,-1153
80088eec:	10c4703a 	and	r2,r2,r3
80088ef0:	10802014 	ori	r2,r2,128
80088ef4:	8080030d 	sth	r2,12(r16)
80088ef8:	bd89883a 	add	r4,r23,r22
80088efc:	9d8fc83a 	sub	r7,r19,r22
80088f00:	85c00415 	stw	r23,16(r16)
80088f04:	84c00515 	stw	r19,20(r16)
80088f08:	81000015 	stw	r4,0(r16)
80088f0c:	9027883a 	mov	r19,r18
80088f10:	81c00215 	stw	r7,8(r16)
80088f14:	902f883a 	mov	r23,r18
80088f18:	003f3b06 	br	80088c08 <__sfvwrite_r+0x13c>
80088f1c:	800b883a 	mov	r5,r16
80088f20:	a809883a 	mov	r4,r21
80088f24:	008826c0 	call	8008826c <_fflush_r>
80088f28:	103fb926 	beq	r2,zero,80088e10 <__sfvwrite_r+0x344>
80088f2c:	003f6506 	br	80088cc4 <__sfvwrite_r+0x1f8>
80088f30:	a809883a 	mov	r4,r21
80088f34:	008b0600 	call	8008b060 <_realloc_r>
80088f38:	102f883a 	mov	r23,r2
80088f3c:	103fee1e 	bne	r2,zero,80088ef8 <__sfvwrite_r+0x42c>
80088f40:	81400417 	ldw	r5,16(r16)
80088f44:	a809883a 	mov	r4,r21
80088f48:	00887bc0 	call	800887bc <_free_r>
80088f4c:	8080030b 	ldhu	r2,12(r16)
80088f50:	00ffdfc4 	movi	r3,-129
80088f54:	1884703a 	and	r2,r3,r2
80088f58:	00c00304 	movi	r3,12
80088f5c:	a8c00015 	stw	r3,0(r21)
80088f60:	003f5906 	br	80088cc8 <__sfvwrite_r+0x1fc>
80088f64:	94c00044 	addi	r19,r18,1
80088f68:	02000044 	movi	r8,1
80088f6c:	003f6006 	br	80088cf0 <__sfvwrite_r+0x224>
80088f70:	00bfffc4 	movi	r2,-1
80088f74:	003f0306 	br	80088b84 <__sfvwrite_r+0xb8>
80088f78:	00800304 	movi	r2,12
80088f7c:	a8800015 	stw	r2,0(r21)
80088f80:	8080030b 	ldhu	r2,12(r16)
80088f84:	003f5006 	br	80088cc8 <__sfvwrite_r+0x1fc>

80088f88 <_fwalk>:
80088f88:	defff704 	addi	sp,sp,-36
80088f8c:	dd000415 	stw	r20,16(sp)
80088f90:	dfc00815 	stw	ra,32(sp)
80088f94:	ddc00715 	stw	r23,28(sp)
80088f98:	dd800615 	stw	r22,24(sp)
80088f9c:	dd400515 	stw	r21,20(sp)
80088fa0:	dcc00315 	stw	r19,12(sp)
80088fa4:	dc800215 	stw	r18,8(sp)
80088fa8:	dc400115 	stw	r17,4(sp)
80088fac:	dc000015 	stw	r16,0(sp)
80088fb0:	2500b804 	addi	r20,r4,736
80088fb4:	a0002326 	beq	r20,zero,80089044 <_fwalk+0xbc>
80088fb8:	282b883a 	mov	r21,r5
80088fbc:	002f883a 	mov	r23,zero
80088fc0:	05800044 	movi	r22,1
80088fc4:	04ffffc4 	movi	r19,-1
80088fc8:	a4400117 	ldw	r17,4(r20)
80088fcc:	a4800217 	ldw	r18,8(r20)
80088fd0:	8c7fffc4 	addi	r17,r17,-1
80088fd4:	88000d16 	blt	r17,zero,8008900c <_fwalk+0x84>
80088fd8:	94000304 	addi	r16,r18,12
80088fdc:	94800384 	addi	r18,r18,14
80088fe0:	8080000b 	ldhu	r2,0(r16)
80088fe4:	8c7fffc4 	addi	r17,r17,-1
80088fe8:	813ffd04 	addi	r4,r16,-12
80088fec:	b080042e 	bgeu	r22,r2,80089000 <_fwalk+0x78>
80088ff0:	9080000f 	ldh	r2,0(r18)
80088ff4:	14c00226 	beq	r2,r19,80089000 <_fwalk+0x78>
80088ff8:	a83ee83a 	callr	r21
80088ffc:	b8aeb03a 	or	r23,r23,r2
80089000:	84001a04 	addi	r16,r16,104
80089004:	94801a04 	addi	r18,r18,104
80089008:	8cfff51e 	bne	r17,r19,80088fe0 <_fwalk+0x58>
8008900c:	a5000017 	ldw	r20,0(r20)
80089010:	a03fed1e 	bne	r20,zero,80088fc8 <_fwalk+0x40>
80089014:	b805883a 	mov	r2,r23
80089018:	dfc00817 	ldw	ra,32(sp)
8008901c:	ddc00717 	ldw	r23,28(sp)
80089020:	dd800617 	ldw	r22,24(sp)
80089024:	dd400517 	ldw	r21,20(sp)
80089028:	dd000417 	ldw	r20,16(sp)
8008902c:	dcc00317 	ldw	r19,12(sp)
80089030:	dc800217 	ldw	r18,8(sp)
80089034:	dc400117 	ldw	r17,4(sp)
80089038:	dc000017 	ldw	r16,0(sp)
8008903c:	dec00904 	addi	sp,sp,36
80089040:	f800283a 	ret
80089044:	002f883a 	mov	r23,zero
80089048:	003ff206 	br	80089014 <_fwalk+0x8c>

8008904c <_fwalk_reent>:
8008904c:	defff704 	addi	sp,sp,-36
80089050:	dd000415 	stw	r20,16(sp)
80089054:	dfc00815 	stw	ra,32(sp)
80089058:	ddc00715 	stw	r23,28(sp)
8008905c:	dd800615 	stw	r22,24(sp)
80089060:	dd400515 	stw	r21,20(sp)
80089064:	dcc00315 	stw	r19,12(sp)
80089068:	dc800215 	stw	r18,8(sp)
8008906c:	dc400115 	stw	r17,4(sp)
80089070:	dc000015 	stw	r16,0(sp)
80089074:	2500b804 	addi	r20,r4,736
80089078:	a0002326 	beq	r20,zero,80089108 <_fwalk_reent+0xbc>
8008907c:	282b883a 	mov	r21,r5
80089080:	2027883a 	mov	r19,r4
80089084:	002f883a 	mov	r23,zero
80089088:	05800044 	movi	r22,1
8008908c:	04bfffc4 	movi	r18,-1
80089090:	a4400117 	ldw	r17,4(r20)
80089094:	a4000217 	ldw	r16,8(r20)
80089098:	8c7fffc4 	addi	r17,r17,-1
8008909c:	88000c16 	blt	r17,zero,800890d0 <_fwalk_reent+0x84>
800890a0:	84000304 	addi	r16,r16,12
800890a4:	8080000b 	ldhu	r2,0(r16)
800890a8:	8c7fffc4 	addi	r17,r17,-1
800890ac:	817ffd04 	addi	r5,r16,-12
800890b0:	b080052e 	bgeu	r22,r2,800890c8 <_fwalk_reent+0x7c>
800890b4:	8080008f 	ldh	r2,2(r16)
800890b8:	9809883a 	mov	r4,r19
800890bc:	14800226 	beq	r2,r18,800890c8 <_fwalk_reent+0x7c>
800890c0:	a83ee83a 	callr	r21
800890c4:	b8aeb03a 	or	r23,r23,r2
800890c8:	84001a04 	addi	r16,r16,104
800890cc:	8cbff51e 	bne	r17,r18,800890a4 <_fwalk_reent+0x58>
800890d0:	a5000017 	ldw	r20,0(r20)
800890d4:	a03fee1e 	bne	r20,zero,80089090 <_fwalk_reent+0x44>
800890d8:	b805883a 	mov	r2,r23
800890dc:	dfc00817 	ldw	ra,32(sp)
800890e0:	ddc00717 	ldw	r23,28(sp)
800890e4:	dd800617 	ldw	r22,24(sp)
800890e8:	dd400517 	ldw	r21,20(sp)
800890ec:	dd000417 	ldw	r20,16(sp)
800890f0:	dcc00317 	ldw	r19,12(sp)
800890f4:	dc800217 	ldw	r18,8(sp)
800890f8:	dc400117 	ldw	r17,4(sp)
800890fc:	dc000017 	ldw	r16,0(sp)
80089100:	dec00904 	addi	sp,sp,36
80089104:	f800283a 	ret
80089108:	002f883a 	mov	r23,zero
8008910c:	003ff206 	br	800890d8 <_fwalk_reent+0x8c>

80089110 <_setlocale_r>:
80089110:	30001b26 	beq	r6,zero,80089180 <_setlocale_r+0x70>
80089114:	01600274 	movhi	r5,32777
80089118:	defffe04 	addi	sp,sp,-8
8008911c:	295a9504 	addi	r5,r5,27220
80089120:	3009883a 	mov	r4,r6
80089124:	dc000015 	stw	r16,0(sp)
80089128:	dfc00115 	stw	ra,4(sp)
8008912c:	3021883a 	mov	r16,r6
80089130:	008b9b80 	call	8008b9b8 <strcmp>
80089134:	1000061e 	bne	r2,zero,80089150 <_setlocale_r+0x40>
80089138:	00a00274 	movhi	r2,32777
8008913c:	109a6e04 	addi	r2,r2,27064
80089140:	dfc00117 	ldw	ra,4(sp)
80089144:	dc000017 	ldw	r16,0(sp)
80089148:	dec00204 	addi	sp,sp,8
8008914c:	f800283a 	ret
80089150:	01600274 	movhi	r5,32777
80089154:	295a6e04 	addi	r5,r5,27064
80089158:	8009883a 	mov	r4,r16
8008915c:	008b9b80 	call	8008b9b8 <strcmp>
80089160:	103ff526 	beq	r2,zero,80089138 <_setlocale_r+0x28>
80089164:	01600274 	movhi	r5,32777
80089168:	295a7804 	addi	r5,r5,27104
8008916c:	8009883a 	mov	r4,r16
80089170:	008b9b80 	call	8008b9b8 <strcmp>
80089174:	103ff026 	beq	r2,zero,80089138 <_setlocale_r+0x28>
80089178:	0005883a 	mov	r2,zero
8008917c:	003ff006 	br	80089140 <_setlocale_r+0x30>
80089180:	00a00274 	movhi	r2,32777
80089184:	109a6e04 	addi	r2,r2,27064
80089188:	f800283a 	ret

8008918c <__locale_charset>:
8008918c:	00a00274 	movhi	r2,32777
80089190:	109caf04 	addi	r2,r2,29372
80089194:	f800283a 	ret

80089198 <__locale_mb_cur_max>:
80089198:	00a002b4 	movhi	r2,32778
8008919c:	10a29f04 	addi	r2,r2,-30084
800891a0:	10800017 	ldw	r2,0(r2)
800891a4:	f800283a 	ret

800891a8 <__locale_msgcharset>:
800891a8:	00a00274 	movhi	r2,32777
800891ac:	109ca704 	addi	r2,r2,29340
800891b0:	f800283a 	ret

800891b4 <__locale_cjk_lang>:
800891b4:	0005883a 	mov	r2,zero
800891b8:	f800283a 	ret

800891bc <_localeconv_r>:
800891bc:	00a00274 	movhi	r2,32777
800891c0:	109cb704 	addi	r2,r2,29404
800891c4:	f800283a 	ret

800891c8 <setlocale>:
800891c8:	00a002b4 	movhi	r2,32778
800891cc:	10a29e04 	addi	r2,r2,-30088
800891d0:	280d883a 	mov	r6,r5
800891d4:	200b883a 	mov	r5,r4
800891d8:	11000017 	ldw	r4,0(r2)
800891dc:	00891101 	jmpi	80089110 <_setlocale_r>

800891e0 <localeconv>:
800891e0:	00a00274 	movhi	r2,32777
800891e4:	109cb704 	addi	r2,r2,29404
800891e8:	f800283a 	ret

800891ec <__smakebuf_r>:
800891ec:	2880030b 	ldhu	r2,12(r5)
800891f0:	10c0008c 	andi	r3,r2,2
800891f4:	1800411e 	bne	r3,zero,800892fc <__smakebuf_r+0x110>
800891f8:	deffec04 	addi	sp,sp,-80
800891fc:	dc000f15 	stw	r16,60(sp)
80089200:	2821883a 	mov	r16,r5
80089204:	2940038f 	ldh	r5,14(r5)
80089208:	dc401015 	stw	r17,64(sp)
8008920c:	dfc01315 	stw	ra,76(sp)
80089210:	dcc01215 	stw	r19,72(sp)
80089214:	dc801115 	stw	r18,68(sp)
80089218:	2023883a 	mov	r17,r4
8008921c:	28001c16 	blt	r5,zero,80089290 <__smakebuf_r+0xa4>
80089220:	d80d883a 	mov	r6,sp
80089224:	008e96c0 	call	8008e96c <_fstat_r>
80089228:	10001816 	blt	r2,zero,8008928c <__smakebuf_r+0xa0>
8008922c:	d8800117 	ldw	r2,4(sp)
80089230:	00e00014 	movui	r3,32768
80089234:	10bc000c 	andi	r2,r2,61440
80089238:	14c80020 	cmpeqi	r19,r2,8192
8008923c:	10c03726 	beq	r2,r3,8008931c <__smakebuf_r+0x130>
80089240:	80c0030b 	ldhu	r3,12(r16)
80089244:	18c20014 	ori	r3,r3,2048
80089248:	80c0030d 	sth	r3,12(r16)
8008924c:	00c80004 	movi	r3,8192
80089250:	10c0521e 	bne	r2,r3,8008939c <__smakebuf_r+0x1b0>
80089254:	8140038f 	ldh	r5,14(r16)
80089258:	8809883a 	mov	r4,r17
8008925c:	008e9c80 	call	8008e9c8 <_isatty_r>
80089260:	10004c26 	beq	r2,zero,80089394 <__smakebuf_r+0x1a8>
80089264:	8080030b 	ldhu	r2,12(r16)
80089268:	80c010c4 	addi	r3,r16,67
8008926c:	80c00015 	stw	r3,0(r16)
80089270:	10800054 	ori	r2,r2,1
80089274:	8080030d 	sth	r2,12(r16)
80089278:	00800044 	movi	r2,1
8008927c:	80c00415 	stw	r3,16(r16)
80089280:	80800515 	stw	r2,20(r16)
80089284:	04810004 	movi	r18,1024
80089288:	00000706 	br	800892a8 <__smakebuf_r+0xbc>
8008928c:	8080030b 	ldhu	r2,12(r16)
80089290:	10c0200c 	andi	r3,r2,128
80089294:	18001f1e 	bne	r3,zero,80089314 <__smakebuf_r+0x128>
80089298:	04810004 	movi	r18,1024
8008929c:	10820014 	ori	r2,r2,2048
800892a0:	8080030d 	sth	r2,12(r16)
800892a4:	0027883a 	mov	r19,zero
800892a8:	900b883a 	mov	r5,r18
800892ac:	8809883a 	mov	r4,r17
800892b0:	00893a80 	call	800893a8 <_malloc_r>
800892b4:	10002c26 	beq	r2,zero,80089368 <__smakebuf_r+0x17c>
800892b8:	80c0030b 	ldhu	r3,12(r16)
800892bc:	01200274 	movhi	r4,32777
800892c0:	2120c004 	addi	r4,r4,-32000
800892c4:	89000f15 	stw	r4,60(r17)
800892c8:	18c02014 	ori	r3,r3,128
800892cc:	80c0030d 	sth	r3,12(r16)
800892d0:	80800015 	stw	r2,0(r16)
800892d4:	80800415 	stw	r2,16(r16)
800892d8:	84800515 	stw	r18,20(r16)
800892dc:	98001a1e 	bne	r19,zero,80089348 <__smakebuf_r+0x15c>
800892e0:	dfc01317 	ldw	ra,76(sp)
800892e4:	dcc01217 	ldw	r19,72(sp)
800892e8:	dc801117 	ldw	r18,68(sp)
800892ec:	dc401017 	ldw	r17,64(sp)
800892f0:	dc000f17 	ldw	r16,60(sp)
800892f4:	dec01404 	addi	sp,sp,80
800892f8:	f800283a 	ret
800892fc:	288010c4 	addi	r2,r5,67
80089300:	28800015 	stw	r2,0(r5)
80089304:	28800415 	stw	r2,16(r5)
80089308:	00800044 	movi	r2,1
8008930c:	28800515 	stw	r2,20(r5)
80089310:	f800283a 	ret
80089314:	04801004 	movi	r18,64
80089318:	003fe006 	br	8008929c <__smakebuf_r+0xb0>
8008931c:	81000a17 	ldw	r4,40(r16)
80089320:	00e00274 	movhi	r3,32777
80089324:	18ee5504 	addi	r3,r3,-18092
80089328:	20ffc51e 	bne	r4,r3,80089240 <__smakebuf_r+0x54>
8008932c:	8080030b 	ldhu	r2,12(r16)
80089330:	04810004 	movi	r18,1024
80089334:	84801315 	stw	r18,76(r16)
80089338:	1484b03a 	or	r2,r2,r18
8008933c:	8080030d 	sth	r2,12(r16)
80089340:	0027883a 	mov	r19,zero
80089344:	003fd806 	br	800892a8 <__smakebuf_r+0xbc>
80089348:	8140038f 	ldh	r5,14(r16)
8008934c:	8809883a 	mov	r4,r17
80089350:	008e9c80 	call	8008e9c8 <_isatty_r>
80089354:	103fe226 	beq	r2,zero,800892e0 <__smakebuf_r+0xf4>
80089358:	8080030b 	ldhu	r2,12(r16)
8008935c:	10800054 	ori	r2,r2,1
80089360:	8080030d 	sth	r2,12(r16)
80089364:	003fde06 	br	800892e0 <__smakebuf_r+0xf4>
80089368:	8080030b 	ldhu	r2,12(r16)
8008936c:	10c0800c 	andi	r3,r2,512
80089370:	183fdb1e 	bne	r3,zero,800892e0 <__smakebuf_r+0xf4>
80089374:	10800094 	ori	r2,r2,2
80089378:	80c010c4 	addi	r3,r16,67
8008937c:	8080030d 	sth	r2,12(r16)
80089380:	00800044 	movi	r2,1
80089384:	80c00015 	stw	r3,0(r16)
80089388:	80c00415 	stw	r3,16(r16)
8008938c:	80800515 	stw	r2,20(r16)
80089390:	003fd306 	br	800892e0 <__smakebuf_r+0xf4>
80089394:	04810004 	movi	r18,1024
80089398:	003fc306 	br	800892a8 <__smakebuf_r+0xbc>
8008939c:	0027883a 	mov	r19,zero
800893a0:	04810004 	movi	r18,1024
800893a4:	003fc006 	br	800892a8 <__smakebuf_r+0xbc>

800893a8 <_malloc_r>:
800893a8:	defff504 	addi	sp,sp,-44
800893ac:	dc800315 	stw	r18,12(sp)
800893b0:	dfc00a15 	stw	ra,40(sp)
800893b4:	df000915 	stw	fp,36(sp)
800893b8:	ddc00815 	stw	r23,32(sp)
800893bc:	dd800715 	stw	r22,28(sp)
800893c0:	dd400615 	stw	r21,24(sp)
800893c4:	dd000515 	stw	r20,20(sp)
800893c8:	dcc00415 	stw	r19,16(sp)
800893cc:	dc400215 	stw	r17,8(sp)
800893d0:	dc000115 	stw	r16,4(sp)
800893d4:	288002c4 	addi	r2,r5,11
800893d8:	00c00584 	movi	r3,22
800893dc:	2025883a 	mov	r18,r4
800893e0:	18807f2e 	bgeu	r3,r2,800895e0 <_malloc_r+0x238>
800893e4:	047ffe04 	movi	r17,-8
800893e8:	1462703a 	and	r17,r2,r17
800893ec:	8800a316 	blt	r17,zero,8008967c <_malloc_r+0x2d4>
800893f0:	8940a236 	bltu	r17,r5,8008967c <_malloc_r+0x2d4>
800893f4:	00920040 	call	80092004 <__malloc_lock>
800893f8:	00807dc4 	movi	r2,503
800893fc:	1441e92e 	bgeu	r2,r17,80089ba4 <_malloc_r+0x7fc>
80089400:	8804d27a 	srli	r2,r17,9
80089404:	1000a126 	beq	r2,zero,8008968c <_malloc_r+0x2e4>
80089408:	00c00104 	movi	r3,4
8008940c:	18811e36 	bltu	r3,r2,80089888 <_malloc_r+0x4e0>
80089410:	8804d1ba 	srli	r2,r17,6
80089414:	12000e44 	addi	r8,r2,57
80089418:	11c00e04 	addi	r7,r2,56
8008941c:	4209883a 	add	r4,r8,r8
80089420:	04e00274 	movhi	r19,32777
80089424:	2109883a 	add	r4,r4,r4
80089428:	9cdcc504 	addi	r19,r19,29460
8008942c:	2109883a 	add	r4,r4,r4
80089430:	9909883a 	add	r4,r19,r4
80089434:	24000117 	ldw	r16,4(r4)
80089438:	213ffe04 	addi	r4,r4,-8
8008943c:	24009726 	beq	r4,r16,8008969c <_malloc_r+0x2f4>
80089440:	80800117 	ldw	r2,4(r16)
80089444:	01bfff04 	movi	r6,-4
80089448:	014003c4 	movi	r5,15
8008944c:	1184703a 	and	r2,r2,r6
80089450:	1447c83a 	sub	r3,r2,r17
80089454:	28c00716 	blt	r5,r3,80089474 <_malloc_r+0xcc>
80089458:	1800920e 	bge	r3,zero,800896a4 <_malloc_r+0x2fc>
8008945c:	84000317 	ldw	r16,12(r16)
80089460:	24008e26 	beq	r4,r16,8008969c <_malloc_r+0x2f4>
80089464:	80800117 	ldw	r2,4(r16)
80089468:	1184703a 	and	r2,r2,r6
8008946c:	1447c83a 	sub	r3,r2,r17
80089470:	28fff90e 	bge	r5,r3,80089458 <_malloc_r+0xb0>
80089474:	3809883a 	mov	r4,r7
80089478:	01a00274 	movhi	r6,32777
8008947c:	9c000417 	ldw	r16,16(r19)
80089480:	319cc504 	addi	r6,r6,29460
80089484:	32000204 	addi	r8,r6,8
80089488:	82013426 	beq	r16,r8,8008995c <_malloc_r+0x5b4>
8008948c:	80c00117 	ldw	r3,4(r16)
80089490:	00bfff04 	movi	r2,-4
80089494:	188e703a 	and	r7,r3,r2
80089498:	3c45c83a 	sub	r2,r7,r17
8008949c:	00c003c4 	movi	r3,15
800894a0:	18811f16 	blt	r3,r2,80089920 <_malloc_r+0x578>
800894a4:	32000515 	stw	r8,20(r6)
800894a8:	32000415 	stw	r8,16(r6)
800894ac:	10007f0e 	bge	r2,zero,800896ac <_malloc_r+0x304>
800894b0:	00807fc4 	movi	r2,511
800894b4:	11c0fd36 	bltu	r2,r7,800898ac <_malloc_r+0x504>
800894b8:	3806d0fa 	srli	r3,r7,3
800894bc:	01c00044 	movi	r7,1
800894c0:	30800117 	ldw	r2,4(r6)
800894c4:	19400044 	addi	r5,r3,1
800894c8:	294b883a 	add	r5,r5,r5
800894cc:	1807d0ba 	srai	r3,r3,2
800894d0:	294b883a 	add	r5,r5,r5
800894d4:	294b883a 	add	r5,r5,r5
800894d8:	298b883a 	add	r5,r5,r6
800894dc:	38c6983a 	sll	r3,r7,r3
800894e0:	29c00017 	ldw	r7,0(r5)
800894e4:	2a7ffe04 	addi	r9,r5,-8
800894e8:	1886b03a 	or	r3,r3,r2
800894ec:	82400315 	stw	r9,12(r16)
800894f0:	81c00215 	stw	r7,8(r16)
800894f4:	30c00115 	stw	r3,4(r6)
800894f8:	2c000015 	stw	r16,0(r5)
800894fc:	3c000315 	stw	r16,12(r7)
80089500:	2005d0ba 	srai	r2,r4,2
80089504:	01400044 	movi	r5,1
80089508:	288a983a 	sll	r5,r5,r2
8008950c:	19406f36 	bltu	r3,r5,800896cc <_malloc_r+0x324>
80089510:	28c4703a 	and	r2,r5,r3
80089514:	10000a1e 	bne	r2,zero,80089540 <_malloc_r+0x198>
80089518:	00bfff04 	movi	r2,-4
8008951c:	294b883a 	add	r5,r5,r5
80089520:	2088703a 	and	r4,r4,r2
80089524:	28c4703a 	and	r2,r5,r3
80089528:	21000104 	addi	r4,r4,4
8008952c:	1000041e 	bne	r2,zero,80089540 <_malloc_r+0x198>
80089530:	294b883a 	add	r5,r5,r5
80089534:	28c4703a 	and	r2,r5,r3
80089538:	21000104 	addi	r4,r4,4
8008953c:	103ffc26 	beq	r2,zero,80089530 <_malloc_r+0x188>
80089540:	02bfff04 	movi	r10,-4
80089544:	024003c4 	movi	r9,15
80089548:	21800044 	addi	r6,r4,1
8008954c:	318d883a 	add	r6,r6,r6
80089550:	318d883a 	add	r6,r6,r6
80089554:	318d883a 	add	r6,r6,r6
80089558:	998d883a 	add	r6,r19,r6
8008955c:	333ffe04 	addi	r12,r6,-8
80089560:	2017883a 	mov	r11,r4
80089564:	31800104 	addi	r6,r6,4
80089568:	34000017 	ldw	r16,0(r6)
8008956c:	31fffd04 	addi	r7,r6,-12
80089570:	81c0041e 	bne	r16,r7,80089584 <_malloc_r+0x1dc>
80089574:	0000fb06 	br	80089964 <_malloc_r+0x5bc>
80089578:	1801030e 	bge	r3,zero,80089988 <_malloc_r+0x5e0>
8008957c:	84000317 	ldw	r16,12(r16)
80089580:	81c0f826 	beq	r16,r7,80089964 <_malloc_r+0x5bc>
80089584:	80800117 	ldw	r2,4(r16)
80089588:	1284703a 	and	r2,r2,r10
8008958c:	1447c83a 	sub	r3,r2,r17
80089590:	48fff90e 	bge	r9,r3,80089578 <_malloc_r+0x1d0>
80089594:	80800317 	ldw	r2,12(r16)
80089598:	81000217 	ldw	r4,8(r16)
8008959c:	89400054 	ori	r5,r17,1
800895a0:	81400115 	stw	r5,4(r16)
800895a4:	20800315 	stw	r2,12(r4)
800895a8:	11000215 	stw	r4,8(r2)
800895ac:	8463883a 	add	r17,r16,r17
800895b0:	9c400515 	stw	r17,20(r19)
800895b4:	9c400415 	stw	r17,16(r19)
800895b8:	18800054 	ori	r2,r3,1
800895bc:	88800115 	stw	r2,4(r17)
800895c0:	8a000315 	stw	r8,12(r17)
800895c4:	8a000215 	stw	r8,8(r17)
800895c8:	88e3883a 	add	r17,r17,r3
800895cc:	88c00015 	stw	r3,0(r17)
800895d0:	9009883a 	mov	r4,r18
800895d4:	00920280 	call	80092028 <__malloc_unlock>
800895d8:	80800204 	addi	r2,r16,8
800895dc:	00001b06 	br	8008964c <_malloc_r+0x2a4>
800895e0:	04400404 	movi	r17,16
800895e4:	89402536 	bltu	r17,r5,8008967c <_malloc_r+0x2d4>
800895e8:	00920040 	call	80092004 <__malloc_lock>
800895ec:	00800184 	movi	r2,6
800895f0:	01000084 	movi	r4,2
800895f4:	04e00274 	movhi	r19,32777
800895f8:	1085883a 	add	r2,r2,r2
800895fc:	9cdcc504 	addi	r19,r19,29460
80089600:	1085883a 	add	r2,r2,r2
80089604:	9885883a 	add	r2,r19,r2
80089608:	14000117 	ldw	r16,4(r2)
8008960c:	10fffe04 	addi	r3,r2,-8
80089610:	80c0d926 	beq	r16,r3,80089978 <_malloc_r+0x5d0>
80089614:	80c00117 	ldw	r3,4(r16)
80089618:	81000317 	ldw	r4,12(r16)
8008961c:	00bfff04 	movi	r2,-4
80089620:	1884703a 	and	r2,r3,r2
80089624:	81400217 	ldw	r5,8(r16)
80089628:	8085883a 	add	r2,r16,r2
8008962c:	10c00117 	ldw	r3,4(r2)
80089630:	29000315 	stw	r4,12(r5)
80089634:	21400215 	stw	r5,8(r4)
80089638:	18c00054 	ori	r3,r3,1
8008963c:	10c00115 	stw	r3,4(r2)
80089640:	9009883a 	mov	r4,r18
80089644:	00920280 	call	80092028 <__malloc_unlock>
80089648:	80800204 	addi	r2,r16,8
8008964c:	dfc00a17 	ldw	ra,40(sp)
80089650:	df000917 	ldw	fp,36(sp)
80089654:	ddc00817 	ldw	r23,32(sp)
80089658:	dd800717 	ldw	r22,28(sp)
8008965c:	dd400617 	ldw	r21,24(sp)
80089660:	dd000517 	ldw	r20,20(sp)
80089664:	dcc00417 	ldw	r19,16(sp)
80089668:	dc800317 	ldw	r18,12(sp)
8008966c:	dc400217 	ldw	r17,8(sp)
80089670:	dc000117 	ldw	r16,4(sp)
80089674:	dec00b04 	addi	sp,sp,44
80089678:	f800283a 	ret
8008967c:	00800304 	movi	r2,12
80089680:	90800015 	stw	r2,0(r18)
80089684:	0005883a 	mov	r2,zero
80089688:	003ff006 	br	8008964c <_malloc_r+0x2a4>
8008968c:	01002004 	movi	r4,128
80089690:	02001004 	movi	r8,64
80089694:	01c00fc4 	movi	r7,63
80089698:	003f6106 	br	80089420 <_malloc_r+0x78>
8008969c:	4009883a 	mov	r4,r8
800896a0:	003f7506 	br	80089478 <_malloc_r+0xd0>
800896a4:	81000317 	ldw	r4,12(r16)
800896a8:	003fde06 	br	80089624 <_malloc_r+0x27c>
800896ac:	81c5883a 	add	r2,r16,r7
800896b0:	11400117 	ldw	r5,4(r2)
800896b4:	9009883a 	mov	r4,r18
800896b8:	29400054 	ori	r5,r5,1
800896bc:	11400115 	stw	r5,4(r2)
800896c0:	00920280 	call	80092028 <__malloc_unlock>
800896c4:	80800204 	addi	r2,r16,8
800896c8:	003fe006 	br	8008964c <_malloc_r+0x2a4>
800896cc:	9c000217 	ldw	r16,8(r19)
800896d0:	00bfff04 	movi	r2,-4
800896d4:	85800117 	ldw	r22,4(r16)
800896d8:	b0ac703a 	and	r22,r22,r2
800896dc:	b4400336 	bltu	r22,r17,800896ec <_malloc_r+0x344>
800896e0:	b445c83a 	sub	r2,r22,r17
800896e4:	00c003c4 	movi	r3,15
800896e8:	18805d16 	blt	r3,r2,80089860 <_malloc_r+0x4b8>
800896ec:	05e002b4 	movhi	r23,32778
800896f0:	00a002b4 	movhi	r2,32778
800896f4:	10a9d504 	addi	r2,r2,-22700
800896f8:	bde2a004 	addi	r23,r23,-30080
800896fc:	15400017 	ldw	r21,0(r2)
80089700:	b8c00017 	ldw	r3,0(r23)
80089704:	00bfffc4 	movi	r2,-1
80089708:	858d883a 	add	r6,r16,r22
8008970c:	8d6b883a 	add	r21,r17,r21
80089710:	1880ea26 	beq	r3,r2,80089abc <_malloc_r+0x714>
80089714:	ad4403c4 	addi	r21,r21,4111
80089718:	00bc0004 	movi	r2,-4096
8008971c:	a8aa703a 	and	r21,r21,r2
80089720:	a80b883a 	mov	r5,r21
80089724:	9009883a 	mov	r4,r18
80089728:	d9800015 	stw	r6,0(sp)
8008972c:	008b8280 	call	8008b828 <_sbrk_r>
80089730:	1029883a 	mov	r20,r2
80089734:	00bfffc4 	movi	r2,-1
80089738:	d9800017 	ldw	r6,0(sp)
8008973c:	a080e826 	beq	r20,r2,80089ae0 <_malloc_r+0x738>
80089740:	a180a636 	bltu	r20,r6,800899dc <_malloc_r+0x634>
80089744:	072002b4 	movhi	fp,32778
80089748:	e729de04 	addi	fp,fp,-22664
8008974c:	e0800017 	ldw	r2,0(fp)
80089750:	a887883a 	add	r3,r21,r2
80089754:	e0c00015 	stw	r3,0(fp)
80089758:	3500e626 	beq	r6,r20,80089af4 <_malloc_r+0x74c>
8008975c:	b9000017 	ldw	r4,0(r23)
80089760:	00bfffc4 	movi	r2,-1
80089764:	2080ee26 	beq	r4,r2,80089b20 <_malloc_r+0x778>
80089768:	a185c83a 	sub	r2,r20,r6
8008976c:	10c5883a 	add	r2,r2,r3
80089770:	e0800015 	stw	r2,0(fp)
80089774:	a0c001cc 	andi	r3,r20,7
80089778:	1800bc26 	beq	r3,zero,80089a6c <_malloc_r+0x6c4>
8008977c:	a0e9c83a 	sub	r20,r20,r3
80089780:	00840204 	movi	r2,4104
80089784:	a5000204 	addi	r20,r20,8
80089788:	10c7c83a 	sub	r3,r2,r3
8008978c:	a545883a 	add	r2,r20,r21
80089790:	1083ffcc 	andi	r2,r2,4095
80089794:	18abc83a 	sub	r21,r3,r2
80089798:	a80b883a 	mov	r5,r21
8008979c:	9009883a 	mov	r4,r18
800897a0:	008b8280 	call	8008b828 <_sbrk_r>
800897a4:	00ffffc4 	movi	r3,-1
800897a8:	10c0e126 	beq	r2,r3,80089b30 <_malloc_r+0x788>
800897ac:	1505c83a 	sub	r2,r2,r20
800897b0:	1545883a 	add	r2,r2,r21
800897b4:	10800054 	ori	r2,r2,1
800897b8:	e0c00017 	ldw	r3,0(fp)
800897bc:	9d000215 	stw	r20,8(r19)
800897c0:	a0800115 	stw	r2,4(r20)
800897c4:	a8c7883a 	add	r3,r21,r3
800897c8:	e0c00015 	stw	r3,0(fp)
800897cc:	84c00e26 	beq	r16,r19,80089808 <_malloc_r+0x460>
800897d0:	018003c4 	movi	r6,15
800897d4:	3580a72e 	bgeu	r6,r22,80089a74 <_malloc_r+0x6cc>
800897d8:	81400117 	ldw	r5,4(r16)
800897dc:	013ffe04 	movi	r4,-8
800897e0:	b0bffd04 	addi	r2,r22,-12
800897e4:	1104703a 	and	r2,r2,r4
800897e8:	2900004c 	andi	r4,r5,1
800897ec:	2088b03a 	or	r4,r4,r2
800897f0:	81000115 	stw	r4,4(r16)
800897f4:	01400144 	movi	r5,5
800897f8:	8089883a 	add	r4,r16,r2
800897fc:	21400115 	stw	r5,4(r4)
80089800:	21400215 	stw	r5,8(r4)
80089804:	3080cd36 	bltu	r6,r2,80089b3c <_malloc_r+0x794>
80089808:	00a002b4 	movhi	r2,32778
8008980c:	10a9d404 	addi	r2,r2,-22704
80089810:	11000017 	ldw	r4,0(r2)
80089814:	20c0012e 	bgeu	r4,r3,8008981c <_malloc_r+0x474>
80089818:	10c00015 	stw	r3,0(r2)
8008981c:	00a002b4 	movhi	r2,32778
80089820:	10a9d304 	addi	r2,r2,-22708
80089824:	11000017 	ldw	r4,0(r2)
80089828:	9c000217 	ldw	r16,8(r19)
8008982c:	20c0012e 	bgeu	r4,r3,80089834 <_malloc_r+0x48c>
80089830:	10c00015 	stw	r3,0(r2)
80089834:	80c00117 	ldw	r3,4(r16)
80089838:	00bfff04 	movi	r2,-4
8008983c:	1886703a 	and	r3,r3,r2
80089840:	1c45c83a 	sub	r2,r3,r17
80089844:	1c400236 	bltu	r3,r17,80089850 <_malloc_r+0x4a8>
80089848:	00c003c4 	movi	r3,15
8008984c:	18800416 	blt	r3,r2,80089860 <_malloc_r+0x4b8>
80089850:	9009883a 	mov	r4,r18
80089854:	00920280 	call	80092028 <__malloc_unlock>
80089858:	0005883a 	mov	r2,zero
8008985c:	003f7b06 	br	8008964c <_malloc_r+0x2a4>
80089860:	88c00054 	ori	r3,r17,1
80089864:	80c00115 	stw	r3,4(r16)
80089868:	8463883a 	add	r17,r16,r17
8008986c:	10800054 	ori	r2,r2,1
80089870:	9c400215 	stw	r17,8(r19)
80089874:	88800115 	stw	r2,4(r17)
80089878:	9009883a 	mov	r4,r18
8008987c:	00920280 	call	80092028 <__malloc_unlock>
80089880:	80800204 	addi	r2,r16,8
80089884:	003f7106 	br	8008964c <_malloc_r+0x2a4>
80089888:	00c00504 	movi	r3,20
8008988c:	18804a2e 	bgeu	r3,r2,800899b8 <_malloc_r+0x610>
80089890:	00c01504 	movi	r3,84
80089894:	18806e36 	bltu	r3,r2,80089a50 <_malloc_r+0x6a8>
80089898:	8804d33a 	srli	r2,r17,12
8008989c:	12001bc4 	addi	r8,r2,111
800898a0:	11c01b84 	addi	r7,r2,110
800898a4:	4209883a 	add	r4,r8,r8
800898a8:	003edd06 	br	80089420 <_malloc_r+0x78>
800898ac:	3804d27a 	srli	r2,r7,9
800898b0:	00c00104 	movi	r3,4
800898b4:	1880442e 	bgeu	r3,r2,800899c8 <_malloc_r+0x620>
800898b8:	00c00504 	movi	r3,20
800898bc:	18808136 	bltu	r3,r2,80089ac4 <_malloc_r+0x71c>
800898c0:	11401704 	addi	r5,r2,92
800898c4:	10c016c4 	addi	r3,r2,91
800898c8:	294b883a 	add	r5,r5,r5
800898cc:	294b883a 	add	r5,r5,r5
800898d0:	294b883a 	add	r5,r5,r5
800898d4:	994b883a 	add	r5,r19,r5
800898d8:	28800017 	ldw	r2,0(r5)
800898dc:	01a00274 	movhi	r6,32777
800898e0:	297ffe04 	addi	r5,r5,-8
800898e4:	319cc504 	addi	r6,r6,29460
800898e8:	28806526 	beq	r5,r2,80089a80 <_malloc_r+0x6d8>
800898ec:	01bfff04 	movi	r6,-4
800898f0:	10c00117 	ldw	r3,4(r2)
800898f4:	1986703a 	and	r3,r3,r6
800898f8:	38c0022e 	bgeu	r7,r3,80089904 <_malloc_r+0x55c>
800898fc:	10800217 	ldw	r2,8(r2)
80089900:	28bffb1e 	bne	r5,r2,800898f0 <_malloc_r+0x548>
80089904:	11400317 	ldw	r5,12(r2)
80089908:	98c00117 	ldw	r3,4(r19)
8008990c:	81400315 	stw	r5,12(r16)
80089910:	80800215 	stw	r2,8(r16)
80089914:	2c000215 	stw	r16,8(r5)
80089918:	14000315 	stw	r16,12(r2)
8008991c:	003ef806 	br	80089500 <_malloc_r+0x158>
80089920:	88c00054 	ori	r3,r17,1
80089924:	80c00115 	stw	r3,4(r16)
80089928:	8463883a 	add	r17,r16,r17
8008992c:	34400515 	stw	r17,20(r6)
80089930:	34400415 	stw	r17,16(r6)
80089934:	10c00054 	ori	r3,r2,1
80089938:	8a000315 	stw	r8,12(r17)
8008993c:	8a000215 	stw	r8,8(r17)
80089940:	88c00115 	stw	r3,4(r17)
80089944:	88a3883a 	add	r17,r17,r2
80089948:	88800015 	stw	r2,0(r17)
8008994c:	9009883a 	mov	r4,r18
80089950:	00920280 	call	80092028 <__malloc_unlock>
80089954:	80800204 	addi	r2,r16,8
80089958:	003f3c06 	br	8008964c <_malloc_r+0x2a4>
8008995c:	30c00117 	ldw	r3,4(r6)
80089960:	003ee706 	br	80089500 <_malloc_r+0x158>
80089964:	5ac00044 	addi	r11,r11,1
80089968:	588000cc 	andi	r2,r11,3
8008996c:	31800204 	addi	r6,r6,8
80089970:	103efd1e 	bne	r2,zero,80089568 <_malloc_r+0x1c0>
80089974:	00002406 	br	80089a08 <_malloc_r+0x660>
80089978:	14000317 	ldw	r16,12(r2)
8008997c:	143f251e 	bne	r2,r16,80089614 <_malloc_r+0x26c>
80089980:	21000084 	addi	r4,r4,2
80089984:	003ebc06 	br	80089478 <_malloc_r+0xd0>
80089988:	8085883a 	add	r2,r16,r2
8008998c:	10c00117 	ldw	r3,4(r2)
80089990:	81000317 	ldw	r4,12(r16)
80089994:	81400217 	ldw	r5,8(r16)
80089998:	18c00054 	ori	r3,r3,1
8008999c:	10c00115 	stw	r3,4(r2)
800899a0:	29000315 	stw	r4,12(r5)
800899a4:	21400215 	stw	r5,8(r4)
800899a8:	9009883a 	mov	r4,r18
800899ac:	00920280 	call	80092028 <__malloc_unlock>
800899b0:	80800204 	addi	r2,r16,8
800899b4:	003f2506 	br	8008964c <_malloc_r+0x2a4>
800899b8:	12001704 	addi	r8,r2,92
800899bc:	11c016c4 	addi	r7,r2,91
800899c0:	4209883a 	add	r4,r8,r8
800899c4:	003e9606 	br	80089420 <_malloc_r+0x78>
800899c8:	3804d1ba 	srli	r2,r7,6
800899cc:	11400e44 	addi	r5,r2,57
800899d0:	10c00e04 	addi	r3,r2,56
800899d4:	294b883a 	add	r5,r5,r5
800899d8:	003fbc06 	br	800898cc <_malloc_r+0x524>
800899dc:	84ff5926 	beq	r16,r19,80089744 <_malloc_r+0x39c>
800899e0:	00a00274 	movhi	r2,32777
800899e4:	109cc504 	addi	r2,r2,29460
800899e8:	14000217 	ldw	r16,8(r2)
800899ec:	00bfff04 	movi	r2,-4
800899f0:	80c00117 	ldw	r3,4(r16)
800899f4:	1886703a 	and	r3,r3,r2
800899f8:	003f9106 	br	80089840 <_malloc_r+0x498>
800899fc:	60800217 	ldw	r2,8(r12)
80089a00:	213fffc4 	addi	r4,r4,-1
80089a04:	1300651e 	bne	r2,r12,80089b9c <_malloc_r+0x7f4>
80089a08:	208000cc 	andi	r2,r4,3
80089a0c:	633ffe04 	addi	r12,r12,-8
80089a10:	103ffa1e 	bne	r2,zero,800899fc <_malloc_r+0x654>
80089a14:	98800117 	ldw	r2,4(r19)
80089a18:	0146303a 	nor	r3,zero,r5
80089a1c:	1884703a 	and	r2,r3,r2
80089a20:	98800115 	stw	r2,4(r19)
80089a24:	294b883a 	add	r5,r5,r5
80089a28:	117f2836 	bltu	r2,r5,800896cc <_malloc_r+0x324>
80089a2c:	283f2726 	beq	r5,zero,800896cc <_malloc_r+0x324>
80089a30:	2886703a 	and	r3,r5,r2
80089a34:	5809883a 	mov	r4,r11
80089a38:	183ec31e 	bne	r3,zero,80089548 <_malloc_r+0x1a0>
80089a3c:	294b883a 	add	r5,r5,r5
80089a40:	2886703a 	and	r3,r5,r2
80089a44:	21000104 	addi	r4,r4,4
80089a48:	183ffc26 	beq	r3,zero,80089a3c <_malloc_r+0x694>
80089a4c:	003ebe06 	br	80089548 <_malloc_r+0x1a0>
80089a50:	00c05504 	movi	r3,340
80089a54:	18801236 	bltu	r3,r2,80089aa0 <_malloc_r+0x6f8>
80089a58:	8804d3fa 	srli	r2,r17,15
80089a5c:	12001e04 	addi	r8,r2,120
80089a60:	11c01dc4 	addi	r7,r2,119
80089a64:	4209883a 	add	r4,r8,r8
80089a68:	003e6d06 	br	80089420 <_malloc_r+0x78>
80089a6c:	00c40004 	movi	r3,4096
80089a70:	003f4606 	br	8008978c <_malloc_r+0x3e4>
80089a74:	00800044 	movi	r2,1
80089a78:	a0800115 	stw	r2,4(r20)
80089a7c:	003f7406 	br	80089850 <_malloc_r+0x4a8>
80089a80:	1805d0ba 	srai	r2,r3,2
80089a84:	01c00044 	movi	r7,1
80089a88:	30c00117 	ldw	r3,4(r6)
80089a8c:	388e983a 	sll	r7,r7,r2
80089a90:	2805883a 	mov	r2,r5
80089a94:	38c6b03a 	or	r3,r7,r3
80089a98:	30c00115 	stw	r3,4(r6)
80089a9c:	003f9b06 	br	8008990c <_malloc_r+0x564>
80089aa0:	00c15504 	movi	r3,1364
80089aa4:	18801a36 	bltu	r3,r2,80089b10 <_malloc_r+0x768>
80089aa8:	8804d4ba 	srli	r2,r17,18
80089aac:	12001f44 	addi	r8,r2,125
80089ab0:	11c01f04 	addi	r7,r2,124
80089ab4:	4209883a 	add	r4,r8,r8
80089ab8:	003e5906 	br	80089420 <_malloc_r+0x78>
80089abc:	ad400404 	addi	r21,r21,16
80089ac0:	003f1706 	br	80089720 <_malloc_r+0x378>
80089ac4:	00c01504 	movi	r3,84
80089ac8:	18802336 	bltu	r3,r2,80089b58 <_malloc_r+0x7b0>
80089acc:	3804d33a 	srli	r2,r7,12
80089ad0:	11401bc4 	addi	r5,r2,111
80089ad4:	10c01b84 	addi	r3,r2,110
80089ad8:	294b883a 	add	r5,r5,r5
80089adc:	003f7b06 	br	800898cc <_malloc_r+0x524>
80089ae0:	9c000217 	ldw	r16,8(r19)
80089ae4:	00bfff04 	movi	r2,-4
80089ae8:	80c00117 	ldw	r3,4(r16)
80089aec:	1886703a 	and	r3,r3,r2
80089af0:	003f5306 	br	80089840 <_malloc_r+0x498>
80089af4:	3083ffcc 	andi	r2,r6,4095
80089af8:	103f181e 	bne	r2,zero,8008975c <_malloc_r+0x3b4>
80089afc:	99000217 	ldw	r4,8(r19)
80089b00:	b545883a 	add	r2,r22,r21
80089b04:	10800054 	ori	r2,r2,1
80089b08:	20800115 	stw	r2,4(r4)
80089b0c:	003f3e06 	br	80089808 <_malloc_r+0x460>
80089b10:	01003f84 	movi	r4,254
80089b14:	02001fc4 	movi	r8,127
80089b18:	01c01f84 	movi	r7,126
80089b1c:	003e4006 	br	80089420 <_malloc_r+0x78>
80089b20:	00a002b4 	movhi	r2,32778
80089b24:	10a2a004 	addi	r2,r2,-30080
80089b28:	15000015 	stw	r20,0(r2)
80089b2c:	003f1106 	br	80089774 <_malloc_r+0x3cc>
80089b30:	00800044 	movi	r2,1
80089b34:	002b883a 	mov	r21,zero
80089b38:	003f1f06 	br	800897b8 <_malloc_r+0x410>
80089b3c:	81400204 	addi	r5,r16,8
80089b40:	9009883a 	mov	r4,r18
80089b44:	00887bc0 	call	800887bc <_free_r>
80089b48:	00a002b4 	movhi	r2,32778
80089b4c:	10a9de04 	addi	r2,r2,-22664
80089b50:	10c00017 	ldw	r3,0(r2)
80089b54:	003f2c06 	br	80089808 <_malloc_r+0x460>
80089b58:	00c05504 	movi	r3,340
80089b5c:	18800536 	bltu	r3,r2,80089b74 <_malloc_r+0x7cc>
80089b60:	3804d3fa 	srli	r2,r7,15
80089b64:	11401e04 	addi	r5,r2,120
80089b68:	10c01dc4 	addi	r3,r2,119
80089b6c:	294b883a 	add	r5,r5,r5
80089b70:	003f5606 	br	800898cc <_malloc_r+0x524>
80089b74:	00c15504 	movi	r3,1364
80089b78:	18800536 	bltu	r3,r2,80089b90 <_malloc_r+0x7e8>
80089b7c:	3804d4ba 	srli	r2,r7,18
80089b80:	11401f44 	addi	r5,r2,125
80089b84:	10c01f04 	addi	r3,r2,124
80089b88:	294b883a 	add	r5,r5,r5
80089b8c:	003f4f06 	br	800898cc <_malloc_r+0x524>
80089b90:	01403f84 	movi	r5,254
80089b94:	00c01f84 	movi	r3,126
80089b98:	003f4c06 	br	800898cc <_malloc_r+0x524>
80089b9c:	98800117 	ldw	r2,4(r19)
80089ba0:	003fa006 	br	80089a24 <_malloc_r+0x67c>
80089ba4:	8808d0fa 	srli	r4,r17,3
80089ba8:	20800044 	addi	r2,r4,1
80089bac:	1085883a 	add	r2,r2,r2
80089bb0:	003e9006 	br	800895f4 <_malloc_r+0x24c>

80089bb4 <memchr>:
80089bb4:	208000cc 	andi	r2,r4,3
80089bb8:	280f883a 	mov	r7,r5
80089bbc:	10003426 	beq	r2,zero,80089c90 <memchr+0xdc>
80089bc0:	30bfffc4 	addi	r2,r6,-1
80089bc4:	30001a26 	beq	r6,zero,80089c30 <memchr+0x7c>
80089bc8:	20c00003 	ldbu	r3,0(r4)
80089bcc:	29803fcc 	andi	r6,r5,255
80089bd0:	30c0051e 	bne	r6,r3,80089be8 <memchr+0x34>
80089bd4:	00001806 	br	80089c38 <memchr+0x84>
80089bd8:	10001526 	beq	r2,zero,80089c30 <memchr+0x7c>
80089bdc:	20c00003 	ldbu	r3,0(r4)
80089be0:	10bfffc4 	addi	r2,r2,-1
80089be4:	30c01426 	beq	r6,r3,80089c38 <memchr+0x84>
80089be8:	21000044 	addi	r4,r4,1
80089bec:	20c000cc 	andi	r3,r4,3
80089bf0:	183ff91e 	bne	r3,zero,80089bd8 <memchr+0x24>
80089bf4:	020000c4 	movi	r8,3
80089bf8:	40801136 	bltu	r8,r2,80089c40 <memchr+0x8c>
80089bfc:	10000c26 	beq	r2,zero,80089c30 <memchr+0x7c>
80089c00:	20c00003 	ldbu	r3,0(r4)
80089c04:	29403fcc 	andi	r5,r5,255
80089c08:	28c00b26 	beq	r5,r3,80089c38 <memchr+0x84>
80089c0c:	20c00044 	addi	r3,r4,1
80089c10:	39803fcc 	andi	r6,r7,255
80089c14:	2089883a 	add	r4,r4,r2
80089c18:	00000306 	br	80089c28 <memchr+0x74>
80089c1c:	18c00044 	addi	r3,r3,1
80089c20:	197fffc3 	ldbu	r5,-1(r3)
80089c24:	31400526 	beq	r6,r5,80089c3c <memchr+0x88>
80089c28:	1805883a 	mov	r2,r3
80089c2c:	20fffb1e 	bne	r4,r3,80089c1c <memchr+0x68>
80089c30:	0005883a 	mov	r2,zero
80089c34:	f800283a 	ret
80089c38:	2005883a 	mov	r2,r4
80089c3c:	f800283a 	ret
80089c40:	28c03fcc 	andi	r3,r5,255
80089c44:	1812923a 	slli	r9,r3,8
80089c48:	02ffbff4 	movhi	r11,65279
80089c4c:	02a02074 	movhi	r10,32897
80089c50:	48d2b03a 	or	r9,r9,r3
80089c54:	4806943a 	slli	r3,r9,16
80089c58:	5affbfc4 	addi	r11,r11,-257
80089c5c:	52a02004 	addi	r10,r10,-32640
80089c60:	48d2b03a 	or	r9,r9,r3
80089c64:	20c00017 	ldw	r3,0(r4)
80089c68:	48c6f03a 	xor	r3,r9,r3
80089c6c:	1acd883a 	add	r6,r3,r11
80089c70:	00c6303a 	nor	r3,zero,r3
80089c74:	30c6703a 	and	r3,r6,r3
80089c78:	1a86703a 	and	r3,r3,r10
80089c7c:	183fe01e 	bne	r3,zero,80089c00 <memchr+0x4c>
80089c80:	10bfff04 	addi	r2,r2,-4
80089c84:	21000104 	addi	r4,r4,4
80089c88:	40bff636 	bltu	r8,r2,80089c64 <memchr+0xb0>
80089c8c:	003fdb06 	br	80089bfc <memchr+0x48>
80089c90:	3005883a 	mov	r2,r6
80089c94:	003fd706 	br	80089bf4 <memchr+0x40>

80089c98 <memcpy>:
80089c98:	defffd04 	addi	sp,sp,-12
80089c9c:	dfc00215 	stw	ra,8(sp)
80089ca0:	dc400115 	stw	r17,4(sp)
80089ca4:	dc000015 	stw	r16,0(sp)
80089ca8:	00c003c4 	movi	r3,15
80089cac:	2005883a 	mov	r2,r4
80089cb0:	1980452e 	bgeu	r3,r6,80089dc8 <memcpy+0x130>
80089cb4:	2906b03a 	or	r3,r5,r4
80089cb8:	18c000cc 	andi	r3,r3,3
80089cbc:	1800441e 	bne	r3,zero,80089dd0 <memcpy+0x138>
80089cc0:	347ffc04 	addi	r17,r6,-16
80089cc4:	8822d13a 	srli	r17,r17,4
80089cc8:	28c00104 	addi	r3,r5,4
80089ccc:	23400104 	addi	r13,r4,4
80089cd0:	8820913a 	slli	r16,r17,4
80089cd4:	2b000204 	addi	r12,r5,8
80089cd8:	22c00204 	addi	r11,r4,8
80089cdc:	84000504 	addi	r16,r16,20
80089ce0:	2a800304 	addi	r10,r5,12
80089ce4:	22400304 	addi	r9,r4,12
80089ce8:	2c21883a 	add	r16,r5,r16
80089cec:	2811883a 	mov	r8,r5
80089cf0:	200f883a 	mov	r7,r4
80089cf4:	41000017 	ldw	r4,0(r8)
80089cf8:	1fc00017 	ldw	ra,0(r3)
80089cfc:	63c00017 	ldw	r15,0(r12)
80089d00:	39000015 	stw	r4,0(r7)
80089d04:	53800017 	ldw	r14,0(r10)
80089d08:	6fc00015 	stw	ra,0(r13)
80089d0c:	5bc00015 	stw	r15,0(r11)
80089d10:	4b800015 	stw	r14,0(r9)
80089d14:	18c00404 	addi	r3,r3,16
80089d18:	39c00404 	addi	r7,r7,16
80089d1c:	42000404 	addi	r8,r8,16
80089d20:	6b400404 	addi	r13,r13,16
80089d24:	63000404 	addi	r12,r12,16
80089d28:	5ac00404 	addi	r11,r11,16
80089d2c:	52800404 	addi	r10,r10,16
80089d30:	4a400404 	addi	r9,r9,16
80089d34:	1c3fef1e 	bne	r3,r16,80089cf4 <memcpy+0x5c>
80089d38:	89c00044 	addi	r7,r17,1
80089d3c:	380e913a 	slli	r7,r7,4
80089d40:	310003cc 	andi	r4,r6,15
80089d44:	02c000c4 	movi	r11,3
80089d48:	11c7883a 	add	r3,r2,r7
80089d4c:	29cb883a 	add	r5,r5,r7
80089d50:	5900212e 	bgeu	r11,r4,80089dd8 <memcpy+0x140>
80089d54:	1813883a 	mov	r9,r3
80089d58:	2811883a 	mov	r8,r5
80089d5c:	200f883a 	mov	r7,r4
80089d60:	42800017 	ldw	r10,0(r8)
80089d64:	4a400104 	addi	r9,r9,4
80089d68:	39ffff04 	addi	r7,r7,-4
80089d6c:	4abfff15 	stw	r10,-4(r9)
80089d70:	42000104 	addi	r8,r8,4
80089d74:	59fffa36 	bltu	r11,r7,80089d60 <memcpy+0xc8>
80089d78:	213fff04 	addi	r4,r4,-4
80089d7c:	2008d0ba 	srli	r4,r4,2
80089d80:	318000cc 	andi	r6,r6,3
80089d84:	21000044 	addi	r4,r4,1
80089d88:	2109883a 	add	r4,r4,r4
80089d8c:	2109883a 	add	r4,r4,r4
80089d90:	1907883a 	add	r3,r3,r4
80089d94:	290b883a 	add	r5,r5,r4
80089d98:	30000626 	beq	r6,zero,80089db4 <memcpy+0x11c>
80089d9c:	198d883a 	add	r6,r3,r6
80089da0:	29c00003 	ldbu	r7,0(r5)
80089da4:	18c00044 	addi	r3,r3,1
80089da8:	29400044 	addi	r5,r5,1
80089dac:	19ffffc5 	stb	r7,-1(r3)
80089db0:	19bffb1e 	bne	r3,r6,80089da0 <memcpy+0x108>
80089db4:	dfc00217 	ldw	ra,8(sp)
80089db8:	dc400117 	ldw	r17,4(sp)
80089dbc:	dc000017 	ldw	r16,0(sp)
80089dc0:	dec00304 	addi	sp,sp,12
80089dc4:	f800283a 	ret
80089dc8:	2007883a 	mov	r3,r4
80089dcc:	003ff206 	br	80089d98 <memcpy+0x100>
80089dd0:	2007883a 	mov	r3,r4
80089dd4:	003ff106 	br	80089d9c <memcpy+0x104>
80089dd8:	200d883a 	mov	r6,r4
80089ddc:	003fee06 	br	80089d98 <memcpy+0x100>

80089de0 <memmove>:
80089de0:	2005883a 	mov	r2,r4
80089de4:	29000b2e 	bgeu	r5,r4,80089e14 <memmove+0x34>
80089de8:	298f883a 	add	r7,r5,r6
80089dec:	21c0092e 	bgeu	r4,r7,80089e14 <memmove+0x34>
80089df0:	2187883a 	add	r3,r4,r6
80089df4:	198bc83a 	sub	r5,r3,r6
80089df8:	30004826 	beq	r6,zero,80089f1c <memmove+0x13c>
80089dfc:	39ffffc4 	addi	r7,r7,-1
80089e00:	39000003 	ldbu	r4,0(r7)
80089e04:	18ffffc4 	addi	r3,r3,-1
80089e08:	19000005 	stb	r4,0(r3)
80089e0c:	28fffb1e 	bne	r5,r3,80089dfc <memmove+0x1c>
80089e10:	f800283a 	ret
80089e14:	00c003c4 	movi	r3,15
80089e18:	1980412e 	bgeu	r3,r6,80089f20 <memmove+0x140>
80089e1c:	2886b03a 	or	r3,r5,r2
80089e20:	18c000cc 	andi	r3,r3,3
80089e24:	1800401e 	bne	r3,zero,80089f28 <memmove+0x148>
80089e28:	33fffc04 	addi	r15,r6,-16
80089e2c:	781ed13a 	srli	r15,r15,4
80089e30:	28c00104 	addi	r3,r5,4
80089e34:	13400104 	addi	r13,r2,4
80089e38:	781c913a 	slli	r14,r15,4
80089e3c:	2b000204 	addi	r12,r5,8
80089e40:	12c00204 	addi	r11,r2,8
80089e44:	73800504 	addi	r14,r14,20
80089e48:	2a800304 	addi	r10,r5,12
80089e4c:	12400304 	addi	r9,r2,12
80089e50:	2b9d883a 	add	r14,r5,r14
80089e54:	2811883a 	mov	r8,r5
80089e58:	100f883a 	mov	r7,r2
80089e5c:	41000017 	ldw	r4,0(r8)
80089e60:	39c00404 	addi	r7,r7,16
80089e64:	18c00404 	addi	r3,r3,16
80089e68:	393ffc15 	stw	r4,-16(r7)
80089e6c:	193ffc17 	ldw	r4,-16(r3)
80089e70:	6b400404 	addi	r13,r13,16
80089e74:	5ac00404 	addi	r11,r11,16
80089e78:	693ffc15 	stw	r4,-16(r13)
80089e7c:	61000017 	ldw	r4,0(r12)
80089e80:	4a400404 	addi	r9,r9,16
80089e84:	42000404 	addi	r8,r8,16
80089e88:	593ffc15 	stw	r4,-16(r11)
80089e8c:	51000017 	ldw	r4,0(r10)
80089e90:	63000404 	addi	r12,r12,16
80089e94:	52800404 	addi	r10,r10,16
80089e98:	493ffc15 	stw	r4,-16(r9)
80089e9c:	1bbfef1e 	bne	r3,r14,80089e5c <memmove+0x7c>
80089ea0:	79000044 	addi	r4,r15,1
80089ea4:	2008913a 	slli	r4,r4,4
80089ea8:	328003cc 	andi	r10,r6,15
80089eac:	02c000c4 	movi	r11,3
80089eb0:	1107883a 	add	r3,r2,r4
80089eb4:	290b883a 	add	r5,r5,r4
80089eb8:	5a801e2e 	bgeu	r11,r10,80089f34 <memmove+0x154>
80089ebc:	1813883a 	mov	r9,r3
80089ec0:	2811883a 	mov	r8,r5
80089ec4:	500f883a 	mov	r7,r10
80089ec8:	41000017 	ldw	r4,0(r8)
80089ecc:	4a400104 	addi	r9,r9,4
80089ed0:	39ffff04 	addi	r7,r7,-4
80089ed4:	493fff15 	stw	r4,-4(r9)
80089ed8:	42000104 	addi	r8,r8,4
80089edc:	59fffa36 	bltu	r11,r7,80089ec8 <memmove+0xe8>
80089ee0:	513fff04 	addi	r4,r10,-4
80089ee4:	2008d0ba 	srli	r4,r4,2
80089ee8:	318000cc 	andi	r6,r6,3
80089eec:	21000044 	addi	r4,r4,1
80089ef0:	2109883a 	add	r4,r4,r4
80089ef4:	2109883a 	add	r4,r4,r4
80089ef8:	1907883a 	add	r3,r3,r4
80089efc:	290b883a 	add	r5,r5,r4
80089f00:	30000b26 	beq	r6,zero,80089f30 <memmove+0x150>
80089f04:	198d883a 	add	r6,r3,r6
80089f08:	29c00003 	ldbu	r7,0(r5)
80089f0c:	18c00044 	addi	r3,r3,1
80089f10:	29400044 	addi	r5,r5,1
80089f14:	19ffffc5 	stb	r7,-1(r3)
80089f18:	19bffb1e 	bne	r3,r6,80089f08 <memmove+0x128>
80089f1c:	f800283a 	ret
80089f20:	1007883a 	mov	r3,r2
80089f24:	003ff606 	br	80089f00 <memmove+0x120>
80089f28:	1007883a 	mov	r3,r2
80089f2c:	003ff506 	br	80089f04 <memmove+0x124>
80089f30:	f800283a 	ret
80089f34:	500d883a 	mov	r6,r10
80089f38:	003ff106 	br	80089f00 <memmove+0x120>

80089f3c <memset>:
80089f3c:	20c000cc 	andi	r3,r4,3
80089f40:	2005883a 	mov	r2,r4
80089f44:	18004426 	beq	r3,zero,8008a058 <memset+0x11c>
80089f48:	31ffffc4 	addi	r7,r6,-1
80089f4c:	30004026 	beq	r6,zero,8008a050 <memset+0x114>
80089f50:	2813883a 	mov	r9,r5
80089f54:	200d883a 	mov	r6,r4
80089f58:	2007883a 	mov	r3,r4
80089f5c:	00000406 	br	80089f70 <memset+0x34>
80089f60:	3a3fffc4 	addi	r8,r7,-1
80089f64:	31800044 	addi	r6,r6,1
80089f68:	38003926 	beq	r7,zero,8008a050 <memset+0x114>
80089f6c:	400f883a 	mov	r7,r8
80089f70:	18c00044 	addi	r3,r3,1
80089f74:	32400005 	stb	r9,0(r6)
80089f78:	1a0000cc 	andi	r8,r3,3
80089f7c:	403ff81e 	bne	r8,zero,80089f60 <memset+0x24>
80089f80:	010000c4 	movi	r4,3
80089f84:	21c02d2e 	bgeu	r4,r7,8008a03c <memset+0x100>
80089f88:	29003fcc 	andi	r4,r5,255
80089f8c:	200c923a 	slli	r6,r4,8
80089f90:	3108b03a 	or	r4,r6,r4
80089f94:	200c943a 	slli	r6,r4,16
80089f98:	218cb03a 	or	r6,r4,r6
80089f9c:	010003c4 	movi	r4,15
80089fa0:	21c0182e 	bgeu	r4,r7,8008a004 <memset+0xc8>
80089fa4:	3b3ffc04 	addi	r12,r7,-16
80089fa8:	6018d13a 	srli	r12,r12,4
80089fac:	1a000104 	addi	r8,r3,4
80089fb0:	1ac00204 	addi	r11,r3,8
80089fb4:	6008913a 	slli	r4,r12,4
80089fb8:	1a800304 	addi	r10,r3,12
80089fbc:	1813883a 	mov	r9,r3
80089fc0:	21000504 	addi	r4,r4,20
80089fc4:	1909883a 	add	r4,r3,r4
80089fc8:	49800015 	stw	r6,0(r9)
80089fcc:	41800015 	stw	r6,0(r8)
80089fd0:	59800015 	stw	r6,0(r11)
80089fd4:	51800015 	stw	r6,0(r10)
80089fd8:	42000404 	addi	r8,r8,16
80089fdc:	4a400404 	addi	r9,r9,16
80089fe0:	5ac00404 	addi	r11,r11,16
80089fe4:	52800404 	addi	r10,r10,16
80089fe8:	413ff71e 	bne	r8,r4,80089fc8 <memset+0x8c>
80089fec:	63000044 	addi	r12,r12,1
80089ff0:	6018913a 	slli	r12,r12,4
80089ff4:	39c003cc 	andi	r7,r7,15
80089ff8:	010000c4 	movi	r4,3
80089ffc:	1b07883a 	add	r3,r3,r12
8008a000:	21c00e2e 	bgeu	r4,r7,8008a03c <memset+0x100>
8008a004:	1813883a 	mov	r9,r3
8008a008:	3811883a 	mov	r8,r7
8008a00c:	010000c4 	movi	r4,3
8008a010:	49800015 	stw	r6,0(r9)
8008a014:	423fff04 	addi	r8,r8,-4
8008a018:	4a400104 	addi	r9,r9,4
8008a01c:	223ffc36 	bltu	r4,r8,8008a010 <memset+0xd4>
8008a020:	393fff04 	addi	r4,r7,-4
8008a024:	2008d0ba 	srli	r4,r4,2
8008a028:	39c000cc 	andi	r7,r7,3
8008a02c:	21000044 	addi	r4,r4,1
8008a030:	2109883a 	add	r4,r4,r4
8008a034:	2109883a 	add	r4,r4,r4
8008a038:	1907883a 	add	r3,r3,r4
8008a03c:	38000526 	beq	r7,zero,8008a054 <memset+0x118>
8008a040:	19cf883a 	add	r7,r3,r7
8008a044:	19400005 	stb	r5,0(r3)
8008a048:	18c00044 	addi	r3,r3,1
8008a04c:	38fffd1e 	bne	r7,r3,8008a044 <memset+0x108>
8008a050:	f800283a 	ret
8008a054:	f800283a 	ret
8008a058:	2007883a 	mov	r3,r4
8008a05c:	300f883a 	mov	r7,r6
8008a060:	003fc706 	br	80089f80 <memset+0x44>

8008a064 <_Balloc>:
8008a064:	20801317 	ldw	r2,76(r4)
8008a068:	defffc04 	addi	sp,sp,-16
8008a06c:	dc400115 	stw	r17,4(sp)
8008a070:	dc000015 	stw	r16,0(sp)
8008a074:	dfc00315 	stw	ra,12(sp)
8008a078:	dc800215 	stw	r18,8(sp)
8008a07c:	2023883a 	mov	r17,r4
8008a080:	2821883a 	mov	r16,r5
8008a084:	10000f26 	beq	r2,zero,8008a0c4 <_Balloc+0x60>
8008a088:	8407883a 	add	r3,r16,r16
8008a08c:	18c7883a 	add	r3,r3,r3
8008a090:	10c7883a 	add	r3,r2,r3
8008a094:	18800017 	ldw	r2,0(r3)
8008a098:	10001126 	beq	r2,zero,8008a0e0 <_Balloc+0x7c>
8008a09c:	11000017 	ldw	r4,0(r2)
8008a0a0:	19000015 	stw	r4,0(r3)
8008a0a4:	10000415 	stw	zero,16(r2)
8008a0a8:	10000315 	stw	zero,12(r2)
8008a0ac:	dfc00317 	ldw	ra,12(sp)
8008a0b0:	dc800217 	ldw	r18,8(sp)
8008a0b4:	dc400117 	ldw	r17,4(sp)
8008a0b8:	dc000017 	ldw	r16,0(sp)
8008a0bc:	dec00404 	addi	sp,sp,16
8008a0c0:	f800283a 	ret
8008a0c4:	01800844 	movi	r6,33
8008a0c8:	01400104 	movi	r5,4
8008a0cc:	008e59c0 	call	8008e59c <_calloc_r>
8008a0d0:	88801315 	stw	r2,76(r17)
8008a0d4:	103fec1e 	bne	r2,zero,8008a088 <_Balloc+0x24>
8008a0d8:	0005883a 	mov	r2,zero
8008a0dc:	003ff306 	br	8008a0ac <_Balloc+0x48>
8008a0e0:	01400044 	movi	r5,1
8008a0e4:	2c24983a 	sll	r18,r5,r16
8008a0e8:	8809883a 	mov	r4,r17
8008a0ec:	91800144 	addi	r6,r18,5
8008a0f0:	318d883a 	add	r6,r6,r6
8008a0f4:	318d883a 	add	r6,r6,r6
8008a0f8:	008e59c0 	call	8008e59c <_calloc_r>
8008a0fc:	103ff626 	beq	r2,zero,8008a0d8 <_Balloc+0x74>
8008a100:	14000115 	stw	r16,4(r2)
8008a104:	14800215 	stw	r18,8(r2)
8008a108:	003fe606 	br	8008a0a4 <_Balloc+0x40>

8008a10c <_Bfree>:
8008a10c:	28000826 	beq	r5,zero,8008a130 <_Bfree+0x24>
8008a110:	28c00117 	ldw	r3,4(r5)
8008a114:	20801317 	ldw	r2,76(r4)
8008a118:	18c7883a 	add	r3,r3,r3
8008a11c:	18c7883a 	add	r3,r3,r3
8008a120:	10c5883a 	add	r2,r2,r3
8008a124:	10c00017 	ldw	r3,0(r2)
8008a128:	28c00015 	stw	r3,0(r5)
8008a12c:	11400015 	stw	r5,0(r2)
8008a130:	f800283a 	ret

8008a134 <__multadd>:
8008a134:	defffa04 	addi	sp,sp,-24
8008a138:	dc800315 	stw	r18,12(sp)
8008a13c:	dc400215 	stw	r17,8(sp)
8008a140:	dc000115 	stw	r16,4(sp)
8008a144:	2823883a 	mov	r17,r5
8008a148:	2c000417 	ldw	r16,16(r5)
8008a14c:	dfc00515 	stw	ra,20(sp)
8008a150:	dcc00415 	stw	r19,16(sp)
8008a154:	2025883a 	mov	r18,r4
8008a158:	29400504 	addi	r5,r5,20
8008a15c:	0011883a 	mov	r8,zero
8008a160:	28c00017 	ldw	r3,0(r5)
8008a164:	29400104 	addi	r5,r5,4
8008a168:	42000044 	addi	r8,r8,1
8008a16c:	18bfffcc 	andi	r2,r3,65535
8008a170:	1185383a 	mul	r2,r2,r6
8008a174:	1806d43a 	srli	r3,r3,16
8008a178:	11cf883a 	add	r7,r2,r7
8008a17c:	3808d43a 	srli	r4,r7,16
8008a180:	1987383a 	mul	r3,r3,r6
8008a184:	38bfffcc 	andi	r2,r7,65535
8008a188:	1907883a 	add	r3,r3,r4
8008a18c:	1808943a 	slli	r4,r3,16
8008a190:	180ed43a 	srli	r7,r3,16
8008a194:	2085883a 	add	r2,r4,r2
8008a198:	28bfff15 	stw	r2,-4(r5)
8008a19c:	443ff016 	blt	r8,r16,8008a160 <__multadd+0x2c>
8008a1a0:	38000926 	beq	r7,zero,8008a1c8 <__multadd+0x94>
8008a1a4:	88800217 	ldw	r2,8(r17)
8008a1a8:	80800f0e 	bge	r16,r2,8008a1e8 <__multadd+0xb4>
8008a1ac:	80800144 	addi	r2,r16,5
8008a1b0:	1085883a 	add	r2,r2,r2
8008a1b4:	1085883a 	add	r2,r2,r2
8008a1b8:	8885883a 	add	r2,r17,r2
8008a1bc:	11c00015 	stw	r7,0(r2)
8008a1c0:	84000044 	addi	r16,r16,1
8008a1c4:	8c000415 	stw	r16,16(r17)
8008a1c8:	8805883a 	mov	r2,r17
8008a1cc:	dfc00517 	ldw	ra,20(sp)
8008a1d0:	dcc00417 	ldw	r19,16(sp)
8008a1d4:	dc800317 	ldw	r18,12(sp)
8008a1d8:	dc400217 	ldw	r17,8(sp)
8008a1dc:	dc000117 	ldw	r16,4(sp)
8008a1e0:	dec00604 	addi	sp,sp,24
8008a1e4:	f800283a 	ret
8008a1e8:	89400117 	ldw	r5,4(r17)
8008a1ec:	9009883a 	mov	r4,r18
8008a1f0:	d9c00015 	stw	r7,0(sp)
8008a1f4:	29400044 	addi	r5,r5,1
8008a1f8:	008a0640 	call	8008a064 <_Balloc>
8008a1fc:	89800417 	ldw	r6,16(r17)
8008a200:	89400304 	addi	r5,r17,12
8008a204:	11000304 	addi	r4,r2,12
8008a208:	31800084 	addi	r6,r6,2
8008a20c:	318d883a 	add	r6,r6,r6
8008a210:	318d883a 	add	r6,r6,r6
8008a214:	1027883a 	mov	r19,r2
8008a218:	0089c980 	call	80089c98 <memcpy>
8008a21c:	d9c00017 	ldw	r7,0(sp)
8008a220:	88000a26 	beq	r17,zero,8008a24c <__multadd+0x118>
8008a224:	88c00117 	ldw	r3,4(r17)
8008a228:	90801317 	ldw	r2,76(r18)
8008a22c:	18c7883a 	add	r3,r3,r3
8008a230:	18c7883a 	add	r3,r3,r3
8008a234:	10c5883a 	add	r2,r2,r3
8008a238:	10c00017 	ldw	r3,0(r2)
8008a23c:	88c00015 	stw	r3,0(r17)
8008a240:	14400015 	stw	r17,0(r2)
8008a244:	9823883a 	mov	r17,r19
8008a248:	003fd806 	br	8008a1ac <__multadd+0x78>
8008a24c:	9823883a 	mov	r17,r19
8008a250:	003fd606 	br	8008a1ac <__multadd+0x78>

8008a254 <__s2b>:
8008a254:	defff904 	addi	sp,sp,-28
8008a258:	dc400115 	stw	r17,4(sp)
8008a25c:	dc000015 	stw	r16,0(sp)
8008a260:	2023883a 	mov	r17,r4
8008a264:	2821883a 	mov	r16,r5
8008a268:	39000204 	addi	r4,r7,8
8008a26c:	01400244 	movi	r5,9
8008a270:	dcc00315 	stw	r19,12(sp)
8008a274:	dc800215 	stw	r18,8(sp)
8008a278:	dfc00615 	stw	ra,24(sp)
8008a27c:	dd400515 	stw	r21,20(sp)
8008a280:	dd000415 	stw	r20,16(sp)
8008a284:	3825883a 	mov	r18,r7
8008a288:	3027883a 	mov	r19,r6
8008a28c:	008f8cc0 	call	8008f8cc <__divsi3>
8008a290:	00c00044 	movi	r3,1
8008a294:	000b883a 	mov	r5,zero
8008a298:	1880030e 	bge	r3,r2,8008a2a8 <__s2b+0x54>
8008a29c:	18c7883a 	add	r3,r3,r3
8008a2a0:	29400044 	addi	r5,r5,1
8008a2a4:	18bffd16 	blt	r3,r2,8008a29c <__s2b+0x48>
8008a2a8:	8809883a 	mov	r4,r17
8008a2ac:	008a0640 	call	8008a064 <_Balloc>
8008a2b0:	d8c00717 	ldw	r3,28(sp)
8008a2b4:	10c00515 	stw	r3,20(r2)
8008a2b8:	00c00044 	movi	r3,1
8008a2bc:	10c00415 	stw	r3,16(r2)
8008a2c0:	00c00244 	movi	r3,9
8008a2c4:	1cc0210e 	bge	r3,r19,8008a34c <__s2b+0xf8>
8008a2c8:	80eb883a 	add	r21,r16,r3
8008a2cc:	a829883a 	mov	r20,r21
8008a2d0:	84e1883a 	add	r16,r16,r19
8008a2d4:	a1c00007 	ldb	r7,0(r20)
8008a2d8:	01800284 	movi	r6,10
8008a2dc:	a5000044 	addi	r20,r20,1
8008a2e0:	100b883a 	mov	r5,r2
8008a2e4:	39fff404 	addi	r7,r7,-48
8008a2e8:	8809883a 	mov	r4,r17
8008a2ec:	008a1340 	call	8008a134 <__multadd>
8008a2f0:	a43ff81e 	bne	r20,r16,8008a2d4 <__s2b+0x80>
8008a2f4:	ace1883a 	add	r16,r21,r19
8008a2f8:	843ffe04 	addi	r16,r16,-8
8008a2fc:	9c800a0e 	bge	r19,r18,8008a328 <__s2b+0xd4>
8008a300:	94e5c83a 	sub	r18,r18,r19
8008a304:	84a5883a 	add	r18,r16,r18
8008a308:	81c00007 	ldb	r7,0(r16)
8008a30c:	01800284 	movi	r6,10
8008a310:	84000044 	addi	r16,r16,1
8008a314:	100b883a 	mov	r5,r2
8008a318:	39fff404 	addi	r7,r7,-48
8008a31c:	8809883a 	mov	r4,r17
8008a320:	008a1340 	call	8008a134 <__multadd>
8008a324:	84bff81e 	bne	r16,r18,8008a308 <__s2b+0xb4>
8008a328:	dfc00617 	ldw	ra,24(sp)
8008a32c:	dd400517 	ldw	r21,20(sp)
8008a330:	dd000417 	ldw	r20,16(sp)
8008a334:	dcc00317 	ldw	r19,12(sp)
8008a338:	dc800217 	ldw	r18,8(sp)
8008a33c:	dc400117 	ldw	r17,4(sp)
8008a340:	dc000017 	ldw	r16,0(sp)
8008a344:	dec00704 	addi	sp,sp,28
8008a348:	f800283a 	ret
8008a34c:	84000284 	addi	r16,r16,10
8008a350:	1827883a 	mov	r19,r3
8008a354:	003fe906 	br	8008a2fc <__s2b+0xa8>

8008a358 <__hi0bits>:
8008a358:	20bfffec 	andhi	r2,r4,65535
8008a35c:	1000141e 	bne	r2,zero,8008a3b0 <__hi0bits+0x58>
8008a360:	2008943a 	slli	r4,r4,16
8008a364:	00800404 	movi	r2,16
8008a368:	20ffc02c 	andhi	r3,r4,65280
8008a36c:	1800021e 	bne	r3,zero,8008a378 <__hi0bits+0x20>
8008a370:	2008923a 	slli	r4,r4,8
8008a374:	10800204 	addi	r2,r2,8
8008a378:	20fc002c 	andhi	r3,r4,61440
8008a37c:	1800021e 	bne	r3,zero,8008a388 <__hi0bits+0x30>
8008a380:	2008913a 	slli	r4,r4,4
8008a384:	10800104 	addi	r2,r2,4
8008a388:	20f0002c 	andhi	r3,r4,49152
8008a38c:	1800031e 	bne	r3,zero,8008a39c <__hi0bits+0x44>
8008a390:	2109883a 	add	r4,r4,r4
8008a394:	10800084 	addi	r2,r2,2
8008a398:	2109883a 	add	r4,r4,r4
8008a39c:	20000316 	blt	r4,zero,8008a3ac <__hi0bits+0x54>
8008a3a0:	2110002c 	andhi	r4,r4,16384
8008a3a4:	2000041e 	bne	r4,zero,8008a3b8 <__hi0bits+0x60>
8008a3a8:	00800804 	movi	r2,32
8008a3ac:	f800283a 	ret
8008a3b0:	0005883a 	mov	r2,zero
8008a3b4:	003fec06 	br	8008a368 <__hi0bits+0x10>
8008a3b8:	10800044 	addi	r2,r2,1
8008a3bc:	f800283a 	ret

8008a3c0 <__lo0bits>:
8008a3c0:	20c00017 	ldw	r3,0(r4)
8008a3c4:	188001cc 	andi	r2,r3,7
8008a3c8:	10000826 	beq	r2,zero,8008a3ec <__lo0bits+0x2c>
8008a3cc:	1880004c 	andi	r2,r3,1
8008a3d0:	1000211e 	bne	r2,zero,8008a458 <__lo0bits+0x98>
8008a3d4:	1880008c 	andi	r2,r3,2
8008a3d8:	1000211e 	bne	r2,zero,8008a460 <__lo0bits+0xa0>
8008a3dc:	1806d0ba 	srli	r3,r3,2
8008a3e0:	00800084 	movi	r2,2
8008a3e4:	20c00015 	stw	r3,0(r4)
8008a3e8:	f800283a 	ret
8008a3ec:	18bfffcc 	andi	r2,r3,65535
8008a3f0:	10001326 	beq	r2,zero,8008a440 <__lo0bits+0x80>
8008a3f4:	0005883a 	mov	r2,zero
8008a3f8:	19403fcc 	andi	r5,r3,255
8008a3fc:	2800021e 	bne	r5,zero,8008a408 <__lo0bits+0x48>
8008a400:	1806d23a 	srli	r3,r3,8
8008a404:	10800204 	addi	r2,r2,8
8008a408:	194003cc 	andi	r5,r3,15
8008a40c:	2800021e 	bne	r5,zero,8008a418 <__lo0bits+0x58>
8008a410:	1806d13a 	srli	r3,r3,4
8008a414:	10800104 	addi	r2,r2,4
8008a418:	194000cc 	andi	r5,r3,3
8008a41c:	2800021e 	bne	r5,zero,8008a428 <__lo0bits+0x68>
8008a420:	1806d0ba 	srli	r3,r3,2
8008a424:	10800084 	addi	r2,r2,2
8008a428:	1940004c 	andi	r5,r3,1
8008a42c:	2800081e 	bne	r5,zero,8008a450 <__lo0bits+0x90>
8008a430:	1806d07a 	srli	r3,r3,1
8008a434:	1800051e 	bne	r3,zero,8008a44c <__lo0bits+0x8c>
8008a438:	00800804 	movi	r2,32
8008a43c:	f800283a 	ret
8008a440:	1806d43a 	srli	r3,r3,16
8008a444:	00800404 	movi	r2,16
8008a448:	003feb06 	br	8008a3f8 <__lo0bits+0x38>
8008a44c:	10800044 	addi	r2,r2,1
8008a450:	20c00015 	stw	r3,0(r4)
8008a454:	f800283a 	ret
8008a458:	0005883a 	mov	r2,zero
8008a45c:	f800283a 	ret
8008a460:	1806d07a 	srli	r3,r3,1
8008a464:	00800044 	movi	r2,1
8008a468:	20c00015 	stw	r3,0(r4)
8008a46c:	f800283a 	ret

8008a470 <__i2b>:
8008a470:	defffd04 	addi	sp,sp,-12
8008a474:	dc000015 	stw	r16,0(sp)
8008a478:	04000044 	movi	r16,1
8008a47c:	dc400115 	stw	r17,4(sp)
8008a480:	2823883a 	mov	r17,r5
8008a484:	800b883a 	mov	r5,r16
8008a488:	dfc00215 	stw	ra,8(sp)
8008a48c:	008a0640 	call	8008a064 <_Balloc>
8008a490:	14400515 	stw	r17,20(r2)
8008a494:	14000415 	stw	r16,16(r2)
8008a498:	dfc00217 	ldw	ra,8(sp)
8008a49c:	dc400117 	ldw	r17,4(sp)
8008a4a0:	dc000017 	ldw	r16,0(sp)
8008a4a4:	dec00304 	addi	sp,sp,12
8008a4a8:	f800283a 	ret

8008a4ac <__multiply>:
8008a4ac:	defffa04 	addi	sp,sp,-24
8008a4b0:	dcc00315 	stw	r19,12(sp)
8008a4b4:	dc800215 	stw	r18,8(sp)
8008a4b8:	34c00417 	ldw	r19,16(r6)
8008a4bc:	2c800417 	ldw	r18,16(r5)
8008a4c0:	dd000415 	stw	r20,16(sp)
8008a4c4:	dc400115 	stw	r17,4(sp)
8008a4c8:	dfc00515 	stw	ra,20(sp)
8008a4cc:	dc000015 	stw	r16,0(sp)
8008a4d0:	2829883a 	mov	r20,r5
8008a4d4:	3023883a 	mov	r17,r6
8008a4d8:	94c0050e 	bge	r18,r19,8008a4f0 <__multiply+0x44>
8008a4dc:	9007883a 	mov	r3,r18
8008a4e0:	3029883a 	mov	r20,r6
8008a4e4:	9825883a 	mov	r18,r19
8008a4e8:	2823883a 	mov	r17,r5
8008a4ec:	1827883a 	mov	r19,r3
8008a4f0:	a0800217 	ldw	r2,8(r20)
8008a4f4:	94e1883a 	add	r16,r18,r19
8008a4f8:	a1400117 	ldw	r5,4(r20)
8008a4fc:	1400010e 	bge	r2,r16,8008a504 <__multiply+0x58>
8008a500:	29400044 	addi	r5,r5,1
8008a504:	008a0640 	call	8008a064 <_Balloc>
8008a508:	8415883a 	add	r10,r16,r16
8008a50c:	12c00504 	addi	r11,r2,20
8008a510:	5295883a 	add	r10,r10,r10
8008a514:	5a95883a 	add	r10,r11,r10
8008a518:	5807883a 	mov	r3,r11
8008a51c:	5a80032e 	bgeu	r11,r10,8008a52c <__multiply+0x80>
8008a520:	18000015 	stw	zero,0(r3)
8008a524:	18c00104 	addi	r3,r3,4
8008a528:	1abffd36 	bltu	r3,r10,8008a520 <__multiply+0x74>
8008a52c:	9ce7883a 	add	r19,r19,r19
8008a530:	94a5883a 	add	r18,r18,r18
8008a534:	89800504 	addi	r6,r17,20
8008a538:	9ce7883a 	add	r19,r19,r19
8008a53c:	a3400504 	addi	r13,r20,20
8008a540:	94a5883a 	add	r18,r18,r18
8008a544:	34d9883a 	add	r12,r6,r19
8008a548:	6c93883a 	add	r9,r13,r18
8008a54c:	3300422e 	bgeu	r6,r12,8008a658 <__multiply+0x1ac>
8008a550:	37c00017 	ldw	ra,0(r6)
8008a554:	fbffffcc 	andi	r15,ra,65535
8008a558:	78001b26 	beq	r15,zero,8008a5c8 <__multiply+0x11c>
8008a55c:	5811883a 	mov	r8,r11
8008a560:	681d883a 	mov	r14,r13
8008a564:	000f883a 	mov	r7,zero
8008a568:	71000017 	ldw	r4,0(r14)
8008a56c:	40c00017 	ldw	r3,0(r8)
8008a570:	73800104 	addi	r14,r14,4
8008a574:	217fffcc 	andi	r5,r4,65535
8008a578:	2bcb383a 	mul	r5,r5,r15
8008a57c:	2008d43a 	srli	r4,r4,16
8008a580:	1c7fffcc 	andi	r17,r3,65535
8008a584:	2c4b883a 	add	r5,r5,r17
8008a588:	29cb883a 	add	r5,r5,r7
8008a58c:	23c9383a 	mul	r4,r4,r15
8008a590:	1806d43a 	srli	r3,r3,16
8008a594:	280ed43a 	srli	r7,r5,16
8008a598:	297fffcc 	andi	r5,r5,65535
8008a59c:	20c7883a 	add	r3,r4,r3
8008a5a0:	19c7883a 	add	r3,r3,r7
8008a5a4:	1808943a 	slli	r4,r3,16
8008a5a8:	4023883a 	mov	r17,r8
8008a5ac:	180ed43a 	srli	r7,r3,16
8008a5b0:	214ab03a 	or	r5,r4,r5
8008a5b4:	41400015 	stw	r5,0(r8)
8008a5b8:	42000104 	addi	r8,r8,4
8008a5bc:	727fea36 	bltu	r14,r9,8008a568 <__multiply+0xbc>
8008a5c0:	89c00115 	stw	r7,4(r17)
8008a5c4:	37c00017 	ldw	ra,0(r6)
8008a5c8:	f83ed43a 	srli	ra,ra,16
8008a5cc:	f8001f26 	beq	ra,zero,8008a64c <__multiply+0x1a0>
8008a5d0:	58c00017 	ldw	r3,0(r11)
8008a5d4:	681d883a 	mov	r14,r13
8008a5d8:	581f883a 	mov	r15,r11
8008a5dc:	1811883a 	mov	r8,r3
8008a5e0:	5825883a 	mov	r18,r11
8008a5e4:	000f883a 	mov	r7,zero
8008a5e8:	00000106 	br	8008a5f0 <__multiply+0x144>
8008a5ec:	8825883a 	mov	r18,r17
8008a5f0:	7140000b 	ldhu	r5,0(r14)
8008a5f4:	4010d43a 	srli	r8,r8,16
8008a5f8:	193fffcc 	andi	r4,r3,65535
8008a5fc:	2fcb383a 	mul	r5,r5,ra
8008a600:	7bc00104 	addi	r15,r15,4
8008a604:	73800104 	addi	r14,r14,4
8008a608:	2a0b883a 	add	r5,r5,r8
8008a60c:	29cb883a 	add	r5,r5,r7
8008a610:	2806943a 	slli	r3,r5,16
8008a614:	94400104 	addi	r17,r18,4
8008a618:	280ad43a 	srli	r5,r5,16
8008a61c:	1908b03a 	or	r4,r3,r4
8008a620:	793fff15 	stw	r4,-4(r15)
8008a624:	70ffff17 	ldw	r3,-4(r14)
8008a628:	8a000017 	ldw	r8,0(r17)
8008a62c:	1806d43a 	srli	r3,r3,16
8008a630:	413fffcc 	andi	r4,r8,65535
8008a634:	1fc7383a 	mul	r3,r3,ra
8008a638:	1907883a 	add	r3,r3,r4
8008a63c:	1947883a 	add	r3,r3,r5
8008a640:	180ed43a 	srli	r7,r3,16
8008a644:	727fe936 	bltu	r14,r9,8008a5ec <__multiply+0x140>
8008a648:	90c00115 	stw	r3,4(r18)
8008a64c:	31800104 	addi	r6,r6,4
8008a650:	5ac00104 	addi	r11,r11,4
8008a654:	333fbe36 	bltu	r6,r12,8008a550 <__multiply+0xa4>
8008a658:	0400090e 	bge	zero,r16,8008a680 <__multiply+0x1d4>
8008a65c:	50ffff17 	ldw	r3,-4(r10)
8008a660:	52bfff04 	addi	r10,r10,-4
8008a664:	18000326 	beq	r3,zero,8008a674 <__multiply+0x1c8>
8008a668:	00000506 	br	8008a680 <__multiply+0x1d4>
8008a66c:	50c00017 	ldw	r3,0(r10)
8008a670:	1800031e 	bne	r3,zero,8008a680 <__multiply+0x1d4>
8008a674:	843fffc4 	addi	r16,r16,-1
8008a678:	52bfff04 	addi	r10,r10,-4
8008a67c:	803ffb1e 	bne	r16,zero,8008a66c <__multiply+0x1c0>
8008a680:	14000415 	stw	r16,16(r2)
8008a684:	dfc00517 	ldw	ra,20(sp)
8008a688:	dd000417 	ldw	r20,16(sp)
8008a68c:	dcc00317 	ldw	r19,12(sp)
8008a690:	dc800217 	ldw	r18,8(sp)
8008a694:	dc400117 	ldw	r17,4(sp)
8008a698:	dc000017 	ldw	r16,0(sp)
8008a69c:	dec00604 	addi	sp,sp,24
8008a6a0:	f800283a 	ret

8008a6a4 <__pow5mult>:
8008a6a4:	defffa04 	addi	sp,sp,-24
8008a6a8:	dcc00315 	stw	r19,12(sp)
8008a6ac:	dc000015 	stw	r16,0(sp)
8008a6b0:	dfc00515 	stw	ra,20(sp)
8008a6b4:	dd000415 	stw	r20,16(sp)
8008a6b8:	dc800215 	stw	r18,8(sp)
8008a6bc:	dc400115 	stw	r17,4(sp)
8008a6c0:	308000cc 	andi	r2,r6,3
8008a6c4:	3021883a 	mov	r16,r6
8008a6c8:	2027883a 	mov	r19,r4
8008a6cc:	10002f1e 	bne	r2,zero,8008a78c <__pow5mult+0xe8>
8008a6d0:	2825883a 	mov	r18,r5
8008a6d4:	8021d0ba 	srai	r16,r16,2
8008a6d8:	80001a26 	beq	r16,zero,8008a744 <__pow5mult+0xa0>
8008a6dc:	9c401217 	ldw	r17,72(r19)
8008a6e0:	8800061e 	bne	r17,zero,8008a6fc <__pow5mult+0x58>
8008a6e4:	00003406 	br	8008a7b8 <__pow5mult+0x114>
8008a6e8:	8021d07a 	srai	r16,r16,1
8008a6ec:	80001526 	beq	r16,zero,8008a744 <__pow5mult+0xa0>
8008a6f0:	88800017 	ldw	r2,0(r17)
8008a6f4:	10001c26 	beq	r2,zero,8008a768 <__pow5mult+0xc4>
8008a6f8:	1023883a 	mov	r17,r2
8008a6fc:	8080004c 	andi	r2,r16,1
8008a700:	103ff926 	beq	r2,zero,8008a6e8 <__pow5mult+0x44>
8008a704:	880d883a 	mov	r6,r17
8008a708:	900b883a 	mov	r5,r18
8008a70c:	9809883a 	mov	r4,r19
8008a710:	008a4ac0 	call	8008a4ac <__multiply>
8008a714:	90001b26 	beq	r18,zero,8008a784 <__pow5mult+0xe0>
8008a718:	91000117 	ldw	r4,4(r18)
8008a71c:	98c01317 	ldw	r3,76(r19)
8008a720:	8021d07a 	srai	r16,r16,1
8008a724:	2109883a 	add	r4,r4,r4
8008a728:	2109883a 	add	r4,r4,r4
8008a72c:	1907883a 	add	r3,r3,r4
8008a730:	19000017 	ldw	r4,0(r3)
8008a734:	91000015 	stw	r4,0(r18)
8008a738:	1c800015 	stw	r18,0(r3)
8008a73c:	1025883a 	mov	r18,r2
8008a740:	803feb1e 	bne	r16,zero,8008a6f0 <__pow5mult+0x4c>
8008a744:	9005883a 	mov	r2,r18
8008a748:	dfc00517 	ldw	ra,20(sp)
8008a74c:	dd000417 	ldw	r20,16(sp)
8008a750:	dcc00317 	ldw	r19,12(sp)
8008a754:	dc800217 	ldw	r18,8(sp)
8008a758:	dc400117 	ldw	r17,4(sp)
8008a75c:	dc000017 	ldw	r16,0(sp)
8008a760:	dec00604 	addi	sp,sp,24
8008a764:	f800283a 	ret
8008a768:	880d883a 	mov	r6,r17
8008a76c:	880b883a 	mov	r5,r17
8008a770:	9809883a 	mov	r4,r19
8008a774:	008a4ac0 	call	8008a4ac <__multiply>
8008a778:	88800015 	stw	r2,0(r17)
8008a77c:	10000015 	stw	zero,0(r2)
8008a780:	003fdd06 	br	8008a6f8 <__pow5mult+0x54>
8008a784:	1025883a 	mov	r18,r2
8008a788:	003fd706 	br	8008a6e8 <__pow5mult+0x44>
8008a78c:	10bfffc4 	addi	r2,r2,-1
8008a790:	1085883a 	add	r2,r2,r2
8008a794:	00e00274 	movhi	r3,32777
8008a798:	18da9804 	addi	r3,r3,27232
8008a79c:	1085883a 	add	r2,r2,r2
8008a7a0:	1885883a 	add	r2,r3,r2
8008a7a4:	11800017 	ldw	r6,0(r2)
8008a7a8:	000f883a 	mov	r7,zero
8008a7ac:	008a1340 	call	8008a134 <__multadd>
8008a7b0:	1025883a 	mov	r18,r2
8008a7b4:	003fc706 	br	8008a6d4 <__pow5mult+0x30>
8008a7b8:	05000044 	movi	r20,1
8008a7bc:	a00b883a 	mov	r5,r20
8008a7c0:	9809883a 	mov	r4,r19
8008a7c4:	008a0640 	call	8008a064 <_Balloc>
8008a7c8:	1023883a 	mov	r17,r2
8008a7cc:	00809c44 	movi	r2,625
8008a7d0:	88800515 	stw	r2,20(r17)
8008a7d4:	8d000415 	stw	r20,16(r17)
8008a7d8:	9c401215 	stw	r17,72(r19)
8008a7dc:	88000015 	stw	zero,0(r17)
8008a7e0:	003fc606 	br	8008a6fc <__pow5mult+0x58>

8008a7e4 <__lshift>:
8008a7e4:	defff904 	addi	sp,sp,-28
8008a7e8:	dd400515 	stw	r21,20(sp)
8008a7ec:	dcc00315 	stw	r19,12(sp)
8008a7f0:	302bd17a 	srai	r21,r6,5
8008a7f4:	2cc00417 	ldw	r19,16(r5)
8008a7f8:	28800217 	ldw	r2,8(r5)
8008a7fc:	dd000415 	stw	r20,16(sp)
8008a800:	ace7883a 	add	r19,r21,r19
8008a804:	dc800215 	stw	r18,8(sp)
8008a808:	dc400115 	stw	r17,4(sp)
8008a80c:	dc000015 	stw	r16,0(sp)
8008a810:	dfc00615 	stw	ra,24(sp)
8008a814:	9c000044 	addi	r16,r19,1
8008a818:	2823883a 	mov	r17,r5
8008a81c:	3029883a 	mov	r20,r6
8008a820:	2025883a 	mov	r18,r4
8008a824:	29400117 	ldw	r5,4(r5)
8008a828:	1400030e 	bge	r2,r16,8008a838 <__lshift+0x54>
8008a82c:	1085883a 	add	r2,r2,r2
8008a830:	29400044 	addi	r5,r5,1
8008a834:	143ffd16 	blt	r2,r16,8008a82c <__lshift+0x48>
8008a838:	9009883a 	mov	r4,r18
8008a83c:	008a0640 	call	8008a064 <_Balloc>
8008a840:	10c00504 	addi	r3,r2,20
8008a844:	0540070e 	bge	zero,r21,8008a864 <__lshift+0x80>
8008a848:	ad6b883a 	add	r21,r21,r21
8008a84c:	ad6b883a 	add	r21,r21,r21
8008a850:	1809883a 	mov	r4,r3
8008a854:	1d47883a 	add	r3,r3,r21
8008a858:	20000015 	stw	zero,0(r4)
8008a85c:	21000104 	addi	r4,r4,4
8008a860:	193ffd1e 	bne	r3,r4,8008a858 <__lshift+0x74>
8008a864:	8a000417 	ldw	r8,16(r17)
8008a868:	89000504 	addi	r4,r17,20
8008a86c:	a18007cc 	andi	r6,r20,31
8008a870:	4211883a 	add	r8,r8,r8
8008a874:	4211883a 	add	r8,r8,r8
8008a878:	2211883a 	add	r8,r4,r8
8008a87c:	30002326 	beq	r6,zero,8008a90c <__lshift+0x128>
8008a880:	02400804 	movi	r9,32
8008a884:	4993c83a 	sub	r9,r9,r6
8008a888:	000b883a 	mov	r5,zero
8008a88c:	21c00017 	ldw	r7,0(r4)
8008a890:	1815883a 	mov	r10,r3
8008a894:	18c00104 	addi	r3,r3,4
8008a898:	398e983a 	sll	r7,r7,r6
8008a89c:	21000104 	addi	r4,r4,4
8008a8a0:	394ab03a 	or	r5,r7,r5
8008a8a4:	197fff15 	stw	r5,-4(r3)
8008a8a8:	217fff17 	ldw	r5,-4(r4)
8008a8ac:	2a4ad83a 	srl	r5,r5,r9
8008a8b0:	223ff636 	bltu	r4,r8,8008a88c <__lshift+0xa8>
8008a8b4:	51400115 	stw	r5,4(r10)
8008a8b8:	28001a1e 	bne	r5,zero,8008a924 <__lshift+0x140>
8008a8bc:	843fffc4 	addi	r16,r16,-1
8008a8c0:	14000415 	stw	r16,16(r2)
8008a8c4:	88000826 	beq	r17,zero,8008a8e8 <__lshift+0x104>
8008a8c8:	89000117 	ldw	r4,4(r17)
8008a8cc:	90c01317 	ldw	r3,76(r18)
8008a8d0:	2109883a 	add	r4,r4,r4
8008a8d4:	2109883a 	add	r4,r4,r4
8008a8d8:	1907883a 	add	r3,r3,r4
8008a8dc:	19000017 	ldw	r4,0(r3)
8008a8e0:	89000015 	stw	r4,0(r17)
8008a8e4:	1c400015 	stw	r17,0(r3)
8008a8e8:	dfc00617 	ldw	ra,24(sp)
8008a8ec:	dd400517 	ldw	r21,20(sp)
8008a8f0:	dd000417 	ldw	r20,16(sp)
8008a8f4:	dcc00317 	ldw	r19,12(sp)
8008a8f8:	dc800217 	ldw	r18,8(sp)
8008a8fc:	dc400117 	ldw	r17,4(sp)
8008a900:	dc000017 	ldw	r16,0(sp)
8008a904:	dec00704 	addi	sp,sp,28
8008a908:	f800283a 	ret
8008a90c:	21400017 	ldw	r5,0(r4)
8008a910:	18c00104 	addi	r3,r3,4
8008a914:	21000104 	addi	r4,r4,4
8008a918:	197fff15 	stw	r5,-4(r3)
8008a91c:	223ffb36 	bltu	r4,r8,8008a90c <__lshift+0x128>
8008a920:	003fe606 	br	8008a8bc <__lshift+0xd8>
8008a924:	9c000084 	addi	r16,r19,2
8008a928:	003fe406 	br	8008a8bc <__lshift+0xd8>

8008a92c <__mcmp>:
8008a92c:	20800417 	ldw	r2,16(r4)
8008a930:	28c00417 	ldw	r3,16(r5)
8008a934:	10c5c83a 	sub	r2,r2,r3
8008a938:	1000111e 	bne	r2,zero,8008a980 <__mcmp+0x54>
8008a93c:	18c7883a 	add	r3,r3,r3
8008a940:	18c7883a 	add	r3,r3,r3
8008a944:	21000504 	addi	r4,r4,20
8008a948:	29400504 	addi	r5,r5,20
8008a94c:	20c5883a 	add	r2,r4,r3
8008a950:	28cb883a 	add	r5,r5,r3
8008a954:	00000106 	br	8008a95c <__mcmp+0x30>
8008a958:	20800a2e 	bgeu	r4,r2,8008a984 <__mcmp+0x58>
8008a95c:	10bfff04 	addi	r2,r2,-4
8008a960:	297fff04 	addi	r5,r5,-4
8008a964:	11800017 	ldw	r6,0(r2)
8008a968:	28c00017 	ldw	r3,0(r5)
8008a96c:	30fffa26 	beq	r6,r3,8008a958 <__mcmp+0x2c>
8008a970:	30c00236 	bltu	r6,r3,8008a97c <__mcmp+0x50>
8008a974:	00800044 	movi	r2,1
8008a978:	f800283a 	ret
8008a97c:	00bfffc4 	movi	r2,-1
8008a980:	f800283a 	ret
8008a984:	0005883a 	mov	r2,zero
8008a988:	f800283a 	ret

8008a98c <__mdiff>:
8008a98c:	28c00417 	ldw	r3,16(r5)
8008a990:	30800417 	ldw	r2,16(r6)
8008a994:	defffa04 	addi	sp,sp,-24
8008a998:	dcc00315 	stw	r19,12(sp)
8008a99c:	dc800215 	stw	r18,8(sp)
8008a9a0:	dfc00515 	stw	ra,20(sp)
8008a9a4:	dd000415 	stw	r20,16(sp)
8008a9a8:	dc400115 	stw	r17,4(sp)
8008a9ac:	dc000015 	stw	r16,0(sp)
8008a9b0:	1887c83a 	sub	r3,r3,r2
8008a9b4:	2825883a 	mov	r18,r5
8008a9b8:	3027883a 	mov	r19,r6
8008a9bc:	1800141e 	bne	r3,zero,8008aa10 <__mdiff+0x84>
8008a9c0:	1085883a 	add	r2,r2,r2
8008a9c4:	1085883a 	add	r2,r2,r2
8008a9c8:	2a000504 	addi	r8,r5,20
8008a9cc:	34000504 	addi	r16,r6,20
8008a9d0:	4087883a 	add	r3,r8,r2
8008a9d4:	8085883a 	add	r2,r16,r2
8008a9d8:	00000106 	br	8008a9e0 <__mdiff+0x54>
8008a9dc:	40c0592e 	bgeu	r8,r3,8008ab44 <__mdiff+0x1b8>
8008a9e0:	18ffff04 	addi	r3,r3,-4
8008a9e4:	10bfff04 	addi	r2,r2,-4
8008a9e8:	19c00017 	ldw	r7,0(r3)
8008a9ec:	11400017 	ldw	r5,0(r2)
8008a9f0:	397ffa26 	beq	r7,r5,8008a9dc <__mdiff+0x50>
8008a9f4:	3940592e 	bgeu	r7,r5,8008ab5c <__mdiff+0x1d0>
8008a9f8:	9005883a 	mov	r2,r18
8008a9fc:	4023883a 	mov	r17,r8
8008aa00:	9825883a 	mov	r18,r19
8008aa04:	05000044 	movi	r20,1
8008aa08:	1027883a 	mov	r19,r2
8008aa0c:	00000406 	br	8008aa20 <__mdiff+0x94>
8008aa10:	18005616 	blt	r3,zero,8008ab6c <__mdiff+0x1e0>
8008aa14:	34400504 	addi	r17,r6,20
8008aa18:	2c000504 	addi	r16,r5,20
8008aa1c:	0029883a 	mov	r20,zero
8008aa20:	91400117 	ldw	r5,4(r18)
8008aa24:	008a0640 	call	8008a064 <_Balloc>
8008aa28:	92400417 	ldw	r9,16(r18)
8008aa2c:	9b000417 	ldw	r12,16(r19)
8008aa30:	12c00504 	addi	r11,r2,20
8008aa34:	4a51883a 	add	r8,r9,r9
8008aa38:	6319883a 	add	r12,r12,r12
8008aa3c:	4211883a 	add	r8,r8,r8
8008aa40:	6319883a 	add	r12,r12,r12
8008aa44:	15000315 	stw	r20,12(r2)
8008aa48:	8211883a 	add	r8,r16,r8
8008aa4c:	8b19883a 	add	r12,r17,r12
8008aa50:	0007883a 	mov	r3,zero
8008aa54:	81400017 	ldw	r5,0(r16)
8008aa58:	89c00017 	ldw	r7,0(r17)
8008aa5c:	59800104 	addi	r6,r11,4
8008aa60:	293fffcc 	andi	r4,r5,65535
8008aa64:	20c7883a 	add	r3,r4,r3
8008aa68:	393fffcc 	andi	r4,r7,65535
8008aa6c:	1909c83a 	sub	r4,r3,r4
8008aa70:	280ad43a 	srli	r5,r5,16
8008aa74:	380ed43a 	srli	r7,r7,16
8008aa78:	2007d43a 	srai	r3,r4,16
8008aa7c:	213fffcc 	andi	r4,r4,65535
8008aa80:	29cbc83a 	sub	r5,r5,r7
8008aa84:	28c7883a 	add	r3,r5,r3
8008aa88:	180a943a 	slli	r5,r3,16
8008aa8c:	8c400104 	addi	r17,r17,4
8008aa90:	84000104 	addi	r16,r16,4
8008aa94:	2908b03a 	or	r4,r5,r4
8008aa98:	59000015 	stw	r4,0(r11)
8008aa9c:	1807d43a 	srai	r3,r3,16
8008aaa0:	3015883a 	mov	r10,r6
8008aaa4:	3017883a 	mov	r11,r6
8008aaa8:	8b3fea36 	bltu	r17,r12,8008aa54 <__mdiff+0xc8>
8008aaac:	8200162e 	bgeu	r16,r8,8008ab08 <__mdiff+0x17c>
8008aab0:	8017883a 	mov	r11,r16
8008aab4:	59400017 	ldw	r5,0(r11)
8008aab8:	31800104 	addi	r6,r6,4
8008aabc:	5ac00104 	addi	r11,r11,4
8008aac0:	293fffcc 	andi	r4,r5,65535
8008aac4:	20c7883a 	add	r3,r4,r3
8008aac8:	280ed43a 	srli	r7,r5,16
8008aacc:	180bd43a 	srai	r5,r3,16
8008aad0:	193fffcc 	andi	r4,r3,65535
8008aad4:	3947883a 	add	r3,r7,r5
8008aad8:	180a943a 	slli	r5,r3,16
8008aadc:	1807d43a 	srai	r3,r3,16
8008aae0:	2908b03a 	or	r4,r5,r4
8008aae4:	313fff15 	stw	r4,-4(r6)
8008aae8:	5a3ff236 	bltu	r11,r8,8008aab4 <__mdiff+0x128>
8008aaec:	0406303a 	nor	r3,zero,r16
8008aaf0:	1a07883a 	add	r3,r3,r8
8008aaf4:	1806d0ba 	srli	r3,r3,2
8008aaf8:	18c00044 	addi	r3,r3,1
8008aafc:	18c7883a 	add	r3,r3,r3
8008ab00:	18c7883a 	add	r3,r3,r3
8008ab04:	50d5883a 	add	r10,r10,r3
8008ab08:	50ffff04 	addi	r3,r10,-4
8008ab0c:	2000041e 	bne	r4,zero,8008ab20 <__mdiff+0x194>
8008ab10:	18ffff04 	addi	r3,r3,-4
8008ab14:	19000017 	ldw	r4,0(r3)
8008ab18:	4a7fffc4 	addi	r9,r9,-1
8008ab1c:	203ffc26 	beq	r4,zero,8008ab10 <__mdiff+0x184>
8008ab20:	12400415 	stw	r9,16(r2)
8008ab24:	dfc00517 	ldw	ra,20(sp)
8008ab28:	dd000417 	ldw	r20,16(sp)
8008ab2c:	dcc00317 	ldw	r19,12(sp)
8008ab30:	dc800217 	ldw	r18,8(sp)
8008ab34:	dc400117 	ldw	r17,4(sp)
8008ab38:	dc000017 	ldw	r16,0(sp)
8008ab3c:	dec00604 	addi	sp,sp,24
8008ab40:	f800283a 	ret
8008ab44:	000b883a 	mov	r5,zero
8008ab48:	008a0640 	call	8008a064 <_Balloc>
8008ab4c:	00c00044 	movi	r3,1
8008ab50:	10c00415 	stw	r3,16(r2)
8008ab54:	10000515 	stw	zero,20(r2)
8008ab58:	003ff206 	br	8008ab24 <__mdiff+0x198>
8008ab5c:	8023883a 	mov	r17,r16
8008ab60:	0029883a 	mov	r20,zero
8008ab64:	4021883a 	mov	r16,r8
8008ab68:	003fad06 	br	8008aa20 <__mdiff+0x94>
8008ab6c:	9005883a 	mov	r2,r18
8008ab70:	94400504 	addi	r17,r18,20
8008ab74:	9c000504 	addi	r16,r19,20
8008ab78:	9825883a 	mov	r18,r19
8008ab7c:	05000044 	movi	r20,1
8008ab80:	1027883a 	mov	r19,r2
8008ab84:	003fa606 	br	8008aa20 <__mdiff+0x94>

8008ab88 <__ulp>:
8008ab88:	295ffc2c 	andhi	r5,r5,32752
8008ab8c:	00bf3034 	movhi	r2,64704
8008ab90:	2887883a 	add	r3,r5,r2
8008ab94:	00c0020e 	bge	zero,r3,8008aba0 <__ulp+0x18>
8008ab98:	0005883a 	mov	r2,zero
8008ab9c:	f800283a 	ret
8008aba0:	00c7c83a 	sub	r3,zero,r3
8008aba4:	1807d53a 	srai	r3,r3,20
8008aba8:	008004c4 	movi	r2,19
8008abac:	10c00b0e 	bge	r2,r3,8008abdc <__ulp+0x54>
8008abb0:	18bffb04 	addi	r2,r3,-20
8008abb4:	01000784 	movi	r4,30
8008abb8:	0007883a 	mov	r3,zero
8008abbc:	20800516 	blt	r4,r2,8008abd4 <__ulp+0x4c>
8008abc0:	010007c4 	movi	r4,31
8008abc4:	2089c83a 	sub	r4,r4,r2
8008abc8:	00800044 	movi	r2,1
8008abcc:	1104983a 	sll	r2,r2,r4
8008abd0:	f800283a 	ret
8008abd4:	00800044 	movi	r2,1
8008abd8:	f800283a 	ret
8008abdc:	01400234 	movhi	r5,8
8008abe0:	28c7d83a 	sra	r3,r5,r3
8008abe4:	0005883a 	mov	r2,zero
8008abe8:	f800283a 	ret

8008abec <__b2d>:
8008abec:	defffa04 	addi	sp,sp,-24
8008abf0:	dc000015 	stw	r16,0(sp)
8008abf4:	24000417 	ldw	r16,16(r4)
8008abf8:	dc400115 	stw	r17,4(sp)
8008abfc:	24400504 	addi	r17,r4,20
8008ac00:	8421883a 	add	r16,r16,r16
8008ac04:	8421883a 	add	r16,r16,r16
8008ac08:	8c21883a 	add	r16,r17,r16
8008ac0c:	dc800215 	stw	r18,8(sp)
8008ac10:	84bfff17 	ldw	r18,-4(r16)
8008ac14:	dd000415 	stw	r20,16(sp)
8008ac18:	dcc00315 	stw	r19,12(sp)
8008ac1c:	9009883a 	mov	r4,r18
8008ac20:	2829883a 	mov	r20,r5
8008ac24:	dfc00515 	stw	ra,20(sp)
8008ac28:	008a3580 	call	8008a358 <__hi0bits>
8008ac2c:	00c00804 	movi	r3,32
8008ac30:	1889c83a 	sub	r4,r3,r2
8008ac34:	a1000015 	stw	r4,0(r20)
8008ac38:	01000284 	movi	r4,10
8008ac3c:	84ffff04 	addi	r19,r16,-4
8008ac40:	20801216 	blt	r4,r2,8008ac8c <__b2d+0xa0>
8008ac44:	018002c4 	movi	r6,11
8008ac48:	308dc83a 	sub	r6,r6,r2
8008ac4c:	9186d83a 	srl	r3,r18,r6
8008ac50:	18cffc34 	orhi	r3,r3,16368
8008ac54:	8cc0212e 	bgeu	r17,r19,8008acdc <__b2d+0xf0>
8008ac58:	813ffe17 	ldw	r4,-8(r16)
8008ac5c:	218cd83a 	srl	r6,r4,r6
8008ac60:	10800544 	addi	r2,r2,21
8008ac64:	9084983a 	sll	r2,r18,r2
8008ac68:	1184b03a 	or	r2,r2,r6
8008ac6c:	dfc00517 	ldw	ra,20(sp)
8008ac70:	dd000417 	ldw	r20,16(sp)
8008ac74:	dcc00317 	ldw	r19,12(sp)
8008ac78:	dc800217 	ldw	r18,8(sp)
8008ac7c:	dc400117 	ldw	r17,4(sp)
8008ac80:	dc000017 	ldw	r16,0(sp)
8008ac84:	dec00604 	addi	sp,sp,24
8008ac88:	f800283a 	ret
8008ac8c:	8cc00f2e 	bgeu	r17,r19,8008accc <__b2d+0xe0>
8008ac90:	117ffd44 	addi	r5,r2,-11
8008ac94:	80bffe17 	ldw	r2,-8(r16)
8008ac98:	28000e26 	beq	r5,zero,8008acd4 <__b2d+0xe8>
8008ac9c:	1949c83a 	sub	r4,r3,r5
8008aca0:	9164983a 	sll	r18,r18,r5
8008aca4:	1106d83a 	srl	r3,r2,r4
8008aca8:	81bffe04 	addi	r6,r16,-8
8008acac:	948ffc34 	orhi	r18,r18,16368
8008acb0:	90c6b03a 	or	r3,r18,r3
8008acb4:	89800e2e 	bgeu	r17,r6,8008acf0 <__b2d+0x104>
8008acb8:	81bffd17 	ldw	r6,-12(r16)
8008acbc:	1144983a 	sll	r2,r2,r5
8008acc0:	310ad83a 	srl	r5,r6,r4
8008acc4:	2884b03a 	or	r2,r5,r2
8008acc8:	003fe806 	br	8008ac6c <__b2d+0x80>
8008accc:	10bffd44 	addi	r2,r2,-11
8008acd0:	1000041e 	bne	r2,zero,8008ace4 <__b2d+0xf8>
8008acd4:	90cffc34 	orhi	r3,r18,16368
8008acd8:	003fe406 	br	8008ac6c <__b2d+0x80>
8008acdc:	000d883a 	mov	r6,zero
8008ace0:	003fdf06 	br	8008ac60 <__b2d+0x74>
8008ace4:	90a4983a 	sll	r18,r18,r2
8008ace8:	0005883a 	mov	r2,zero
8008acec:	003ff906 	br	8008acd4 <__b2d+0xe8>
8008acf0:	1144983a 	sll	r2,r2,r5
8008acf4:	003fdd06 	br	8008ac6c <__b2d+0x80>

8008acf8 <__d2b>:
8008acf8:	defff804 	addi	sp,sp,-32
8008acfc:	dc000215 	stw	r16,8(sp)
8008ad00:	3021883a 	mov	r16,r6
8008ad04:	dc400315 	stw	r17,12(sp)
8008ad08:	8022907a 	slli	r17,r16,1
8008ad0c:	dd000615 	stw	r20,24(sp)
8008ad10:	2829883a 	mov	r20,r5
8008ad14:	01400044 	movi	r5,1
8008ad18:	dcc00515 	stw	r19,20(sp)
8008ad1c:	dc800415 	stw	r18,16(sp)
8008ad20:	dfc00715 	stw	ra,28(sp)
8008ad24:	3825883a 	mov	r18,r7
8008ad28:	8822d57a 	srli	r17,r17,21
8008ad2c:	008a0640 	call	8008a064 <_Balloc>
8008ad30:	1027883a 	mov	r19,r2
8008ad34:	00800434 	movhi	r2,16
8008ad38:	10bfffc4 	addi	r2,r2,-1
8008ad3c:	808c703a 	and	r6,r16,r2
8008ad40:	88000126 	beq	r17,zero,8008ad48 <__d2b+0x50>
8008ad44:	31800434 	orhi	r6,r6,16
8008ad48:	d9800015 	stw	r6,0(sp)
8008ad4c:	a0002426 	beq	r20,zero,8008ade0 <__d2b+0xe8>
8008ad50:	d9000104 	addi	r4,sp,4
8008ad54:	dd000115 	stw	r20,4(sp)
8008ad58:	008a3c00 	call	8008a3c0 <__lo0bits>
8008ad5c:	d8c00017 	ldw	r3,0(sp)
8008ad60:	10002f1e 	bne	r2,zero,8008ae20 <__d2b+0x128>
8008ad64:	d9000117 	ldw	r4,4(sp)
8008ad68:	99000515 	stw	r4,20(r19)
8008ad6c:	1821003a 	cmpeq	r16,r3,zero
8008ad70:	01000084 	movi	r4,2
8008ad74:	2421c83a 	sub	r16,r4,r16
8008ad78:	98c00615 	stw	r3,24(r19)
8008ad7c:	9c000415 	stw	r16,16(r19)
8008ad80:	88001f1e 	bne	r17,zero,8008ae00 <__d2b+0x108>
8008ad84:	10bef384 	addi	r2,r2,-1074
8008ad88:	90800015 	stw	r2,0(r18)
8008ad8c:	00900034 	movhi	r2,16384
8008ad90:	10bfffc4 	addi	r2,r2,-1
8008ad94:	8085883a 	add	r2,r16,r2
8008ad98:	1085883a 	add	r2,r2,r2
8008ad9c:	1085883a 	add	r2,r2,r2
8008ada0:	9885883a 	add	r2,r19,r2
8008ada4:	11000517 	ldw	r4,20(r2)
8008ada8:	8020917a 	slli	r16,r16,5
8008adac:	008a3580 	call	8008a358 <__hi0bits>
8008adb0:	d8c00817 	ldw	r3,32(sp)
8008adb4:	8085c83a 	sub	r2,r16,r2
8008adb8:	18800015 	stw	r2,0(r3)
8008adbc:	9805883a 	mov	r2,r19
8008adc0:	dfc00717 	ldw	ra,28(sp)
8008adc4:	dd000617 	ldw	r20,24(sp)
8008adc8:	dcc00517 	ldw	r19,20(sp)
8008adcc:	dc800417 	ldw	r18,16(sp)
8008add0:	dc400317 	ldw	r17,12(sp)
8008add4:	dc000217 	ldw	r16,8(sp)
8008add8:	dec00804 	addi	sp,sp,32
8008addc:	f800283a 	ret
8008ade0:	d809883a 	mov	r4,sp
8008ade4:	008a3c00 	call	8008a3c0 <__lo0bits>
8008ade8:	d8c00017 	ldw	r3,0(sp)
8008adec:	04000044 	movi	r16,1
8008adf0:	9c000415 	stw	r16,16(r19)
8008adf4:	98c00515 	stw	r3,20(r19)
8008adf8:	10800804 	addi	r2,r2,32
8008adfc:	883fe126 	beq	r17,zero,8008ad84 <__d2b+0x8c>
8008ae00:	00c00d44 	movi	r3,53
8008ae04:	8c7ef344 	addi	r17,r17,-1075
8008ae08:	88a3883a 	add	r17,r17,r2
8008ae0c:	1885c83a 	sub	r2,r3,r2
8008ae10:	d8c00817 	ldw	r3,32(sp)
8008ae14:	94400015 	stw	r17,0(r18)
8008ae18:	18800015 	stw	r2,0(r3)
8008ae1c:	003fe706 	br	8008adbc <__d2b+0xc4>
8008ae20:	01000804 	movi	r4,32
8008ae24:	2089c83a 	sub	r4,r4,r2
8008ae28:	1908983a 	sll	r4,r3,r4
8008ae2c:	d9400117 	ldw	r5,4(sp)
8008ae30:	1886d83a 	srl	r3,r3,r2
8008ae34:	2148b03a 	or	r4,r4,r5
8008ae38:	99000515 	stw	r4,20(r19)
8008ae3c:	d8c00015 	stw	r3,0(sp)
8008ae40:	003fca06 	br	8008ad6c <__d2b+0x74>

8008ae44 <__ratio>:
8008ae44:	defff904 	addi	sp,sp,-28
8008ae48:	dc400315 	stw	r17,12(sp)
8008ae4c:	2823883a 	mov	r17,r5
8008ae50:	d9400104 	addi	r5,sp,4
8008ae54:	dfc00615 	stw	ra,24(sp)
8008ae58:	dcc00515 	stw	r19,20(sp)
8008ae5c:	dc800415 	stw	r18,16(sp)
8008ae60:	2027883a 	mov	r19,r4
8008ae64:	dc000215 	stw	r16,8(sp)
8008ae68:	008abec0 	call	8008abec <__b2d>
8008ae6c:	d80b883a 	mov	r5,sp
8008ae70:	8809883a 	mov	r4,r17
8008ae74:	1025883a 	mov	r18,r2
8008ae78:	1821883a 	mov	r16,r3
8008ae7c:	008abec0 	call	8008abec <__b2d>
8008ae80:	8a000417 	ldw	r8,16(r17)
8008ae84:	99000417 	ldw	r4,16(r19)
8008ae88:	d9400117 	ldw	r5,4(sp)
8008ae8c:	2209c83a 	sub	r4,r4,r8
8008ae90:	2010917a 	slli	r8,r4,5
8008ae94:	d9000017 	ldw	r4,0(sp)
8008ae98:	2909c83a 	sub	r4,r5,r4
8008ae9c:	4109883a 	add	r4,r8,r4
8008aea0:	01000e0e 	bge	zero,r4,8008aedc <__ratio+0x98>
8008aea4:	2008953a 	slli	r4,r4,20
8008aea8:	2421883a 	add	r16,r4,r16
8008aeac:	100d883a 	mov	r6,r2
8008aeb0:	180f883a 	mov	r7,r3
8008aeb4:	9009883a 	mov	r4,r18
8008aeb8:	800b883a 	mov	r5,r16
8008aebc:	009032c0 	call	8009032c <__divdf3>
8008aec0:	dfc00617 	ldw	ra,24(sp)
8008aec4:	dcc00517 	ldw	r19,20(sp)
8008aec8:	dc800417 	ldw	r18,16(sp)
8008aecc:	dc400317 	ldw	r17,12(sp)
8008aed0:	dc000217 	ldw	r16,8(sp)
8008aed4:	dec00704 	addi	sp,sp,28
8008aed8:	f800283a 	ret
8008aedc:	2008953a 	slli	r4,r4,20
8008aee0:	1907c83a 	sub	r3,r3,r4
8008aee4:	003ff106 	br	8008aeac <__ratio+0x68>

8008aee8 <_mprec_log10>:
8008aee8:	defffe04 	addi	sp,sp,-8
8008aeec:	dc000015 	stw	r16,0(sp)
8008aef0:	dfc00115 	stw	ra,4(sp)
8008aef4:	008005c4 	movi	r2,23
8008aef8:	2021883a 	mov	r16,r4
8008aefc:	11000d0e 	bge	r2,r4,8008af34 <_mprec_log10+0x4c>
8008af00:	0005883a 	mov	r2,zero
8008af04:	00cffc34 	movhi	r3,16368
8008af08:	843fffc4 	addi	r16,r16,-1
8008af0c:	000d883a 	mov	r6,zero
8008af10:	01d00934 	movhi	r7,16420
8008af14:	1009883a 	mov	r4,r2
8008af18:	180b883a 	mov	r5,r3
8008af1c:	00814680 	call	80081468 <__muldf3>
8008af20:	803ff91e 	bne	r16,zero,8008af08 <_mprec_log10+0x20>
8008af24:	dfc00117 	ldw	ra,4(sp)
8008af28:	dc000017 	ldw	r16,0(sp)
8008af2c:	dec00204 	addi	sp,sp,8
8008af30:	f800283a 	ret
8008af34:	202090fa 	slli	r16,r4,3
8008af38:	00a00274 	movhi	r2,32777
8008af3c:	109aaf04 	addi	r2,r2,27324
8008af40:	1421883a 	add	r16,r2,r16
8008af44:	80800017 	ldw	r2,0(r16)
8008af48:	80c00117 	ldw	r3,4(r16)
8008af4c:	dfc00117 	ldw	ra,4(sp)
8008af50:	dc000017 	ldw	r16,0(sp)
8008af54:	dec00204 	addi	sp,sp,8
8008af58:	f800283a 	ret

8008af5c <__copybits>:
8008af5c:	297fffc4 	addi	r5,r5,-1
8008af60:	280fd17a 	srai	r7,r5,5
8008af64:	30c00417 	ldw	r3,16(r6)
8008af68:	30800504 	addi	r2,r6,20
8008af6c:	39c00044 	addi	r7,r7,1
8008af70:	18c7883a 	add	r3,r3,r3
8008af74:	39cf883a 	add	r7,r7,r7
8008af78:	18c7883a 	add	r3,r3,r3
8008af7c:	39cf883a 	add	r7,r7,r7
8008af80:	10c7883a 	add	r3,r2,r3
8008af84:	21cf883a 	add	r7,r4,r7
8008af88:	10c00d2e 	bgeu	r2,r3,8008afc0 <__copybits+0x64>
8008af8c:	200b883a 	mov	r5,r4
8008af90:	12000017 	ldw	r8,0(r2)
8008af94:	29400104 	addi	r5,r5,4
8008af98:	10800104 	addi	r2,r2,4
8008af9c:	2a3fff15 	stw	r8,-4(r5)
8008afa0:	10fffb36 	bltu	r2,r3,8008af90 <__copybits+0x34>
8008afa4:	1985c83a 	sub	r2,r3,r6
8008afa8:	10bffac4 	addi	r2,r2,-21
8008afac:	1004d0ba 	srli	r2,r2,2
8008afb0:	10800044 	addi	r2,r2,1
8008afb4:	1085883a 	add	r2,r2,r2
8008afb8:	1085883a 	add	r2,r2,r2
8008afbc:	2089883a 	add	r4,r4,r2
8008afc0:	21c0032e 	bgeu	r4,r7,8008afd0 <__copybits+0x74>
8008afc4:	20000015 	stw	zero,0(r4)
8008afc8:	21000104 	addi	r4,r4,4
8008afcc:	21fffd36 	bltu	r4,r7,8008afc4 <__copybits+0x68>
8008afd0:	f800283a 	ret

8008afd4 <__any_on>:
8008afd4:	20c00417 	ldw	r3,16(r4)
8008afd8:	2805d17a 	srai	r2,r5,5
8008afdc:	21000504 	addi	r4,r4,20
8008afe0:	18800d0e 	bge	r3,r2,8008b018 <__any_on+0x44>
8008afe4:	18c7883a 	add	r3,r3,r3
8008afe8:	18c7883a 	add	r3,r3,r3
8008afec:	20c7883a 	add	r3,r4,r3
8008aff0:	20c0192e 	bgeu	r4,r3,8008b058 <__any_on+0x84>
8008aff4:	18bfff17 	ldw	r2,-4(r3)
8008aff8:	18ffff04 	addi	r3,r3,-4
8008affc:	1000041e 	bne	r2,zero,8008b010 <__any_on+0x3c>
8008b000:	20c0142e 	bgeu	r4,r3,8008b054 <__any_on+0x80>
8008b004:	18ffff04 	addi	r3,r3,-4
8008b008:	19400017 	ldw	r5,0(r3)
8008b00c:	283ffc26 	beq	r5,zero,8008b000 <__any_on+0x2c>
8008b010:	00800044 	movi	r2,1
8008b014:	f800283a 	ret
8008b018:	10c00a0e 	bge	r2,r3,8008b044 <__any_on+0x70>
8008b01c:	1085883a 	add	r2,r2,r2
8008b020:	1085883a 	add	r2,r2,r2
8008b024:	294007cc 	andi	r5,r5,31
8008b028:	2087883a 	add	r3,r4,r2
8008b02c:	283ff026 	beq	r5,zero,8008aff0 <__any_on+0x1c>
8008b030:	19800017 	ldw	r6,0(r3)
8008b034:	3144d83a 	srl	r2,r6,r5
8008b038:	114a983a 	sll	r5,r2,r5
8008b03c:	317ff41e 	bne	r6,r5,8008b010 <__any_on+0x3c>
8008b040:	003feb06 	br	8008aff0 <__any_on+0x1c>
8008b044:	1085883a 	add	r2,r2,r2
8008b048:	1085883a 	add	r2,r2,r2
8008b04c:	2087883a 	add	r3,r4,r2
8008b050:	003fe706 	br	8008aff0 <__any_on+0x1c>
8008b054:	f800283a 	ret
8008b058:	0005883a 	mov	r2,zero
8008b05c:	f800283a 	ret

8008b060 <_realloc_r>:
8008b060:	defff604 	addi	sp,sp,-40
8008b064:	dc800215 	stw	r18,8(sp)
8008b068:	dfc00915 	stw	ra,36(sp)
8008b06c:	df000815 	stw	fp,32(sp)
8008b070:	ddc00715 	stw	r23,28(sp)
8008b074:	dd800615 	stw	r22,24(sp)
8008b078:	dd400515 	stw	r21,20(sp)
8008b07c:	dd000415 	stw	r20,16(sp)
8008b080:	dcc00315 	stw	r19,12(sp)
8008b084:	dc400115 	stw	r17,4(sp)
8008b088:	dc000015 	stw	r16,0(sp)
8008b08c:	3025883a 	mov	r18,r6
8008b090:	2800b726 	beq	r5,zero,8008b370 <_realloc_r+0x310>
8008b094:	282b883a 	mov	r21,r5
8008b098:	2029883a 	mov	r20,r4
8008b09c:	00920040 	call	80092004 <__malloc_lock>
8008b0a0:	a8bfff17 	ldw	r2,-4(r21)
8008b0a4:	043fff04 	movi	r16,-4
8008b0a8:	90c002c4 	addi	r3,r18,11
8008b0ac:	01000584 	movi	r4,22
8008b0b0:	acfffe04 	addi	r19,r21,-8
8008b0b4:	1420703a 	and	r16,r2,r16
8008b0b8:	20c0332e 	bgeu	r4,r3,8008b188 <_realloc_r+0x128>
8008b0bc:	047ffe04 	movi	r17,-8
8008b0c0:	1c62703a 	and	r17,r3,r17
8008b0c4:	8807883a 	mov	r3,r17
8008b0c8:	88005816 	blt	r17,zero,8008b22c <_realloc_r+0x1cc>
8008b0cc:	8c805736 	bltu	r17,r18,8008b22c <_realloc_r+0x1cc>
8008b0d0:	80c0300e 	bge	r16,r3,8008b194 <_realloc_r+0x134>
8008b0d4:	07200274 	movhi	fp,32777
8008b0d8:	e71cc504 	addi	fp,fp,29460
8008b0dc:	e1c00217 	ldw	r7,8(fp)
8008b0e0:	9c09883a 	add	r4,r19,r16
8008b0e4:	22000117 	ldw	r8,4(r4)
8008b0e8:	21c06326 	beq	r4,r7,8008b278 <_realloc_r+0x218>
8008b0ec:	017fff84 	movi	r5,-2
8008b0f0:	414a703a 	and	r5,r8,r5
8008b0f4:	214b883a 	add	r5,r4,r5
8008b0f8:	29800117 	ldw	r6,4(r5)
8008b0fc:	3180004c 	andi	r6,r6,1
8008b100:	30003f26 	beq	r6,zero,8008b200 <_realloc_r+0x1a0>
8008b104:	1080004c 	andi	r2,r2,1
8008b108:	10008326 	beq	r2,zero,8008b318 <_realloc_r+0x2b8>
8008b10c:	900b883a 	mov	r5,r18
8008b110:	a009883a 	mov	r4,r20
8008b114:	00893a80 	call	800893a8 <_malloc_r>
8008b118:	1025883a 	mov	r18,r2
8008b11c:	10011e26 	beq	r2,zero,8008b598 <_realloc_r+0x538>
8008b120:	a93fff17 	ldw	r4,-4(r21)
8008b124:	10fffe04 	addi	r3,r2,-8
8008b128:	00bfff84 	movi	r2,-2
8008b12c:	2084703a 	and	r2,r4,r2
8008b130:	9885883a 	add	r2,r19,r2
8008b134:	1880ee26 	beq	r3,r2,8008b4f0 <_realloc_r+0x490>
8008b138:	81bfff04 	addi	r6,r16,-4
8008b13c:	00800904 	movi	r2,36
8008b140:	1180b836 	bltu	r2,r6,8008b424 <_realloc_r+0x3c4>
8008b144:	00c004c4 	movi	r3,19
8008b148:	19809636 	bltu	r3,r6,8008b3a4 <_realloc_r+0x344>
8008b14c:	9005883a 	mov	r2,r18
8008b150:	a807883a 	mov	r3,r21
8008b154:	19000017 	ldw	r4,0(r3)
8008b158:	11000015 	stw	r4,0(r2)
8008b15c:	19000117 	ldw	r4,4(r3)
8008b160:	11000115 	stw	r4,4(r2)
8008b164:	18c00217 	ldw	r3,8(r3)
8008b168:	10c00215 	stw	r3,8(r2)
8008b16c:	a80b883a 	mov	r5,r21
8008b170:	a009883a 	mov	r4,r20
8008b174:	00887bc0 	call	800887bc <_free_r>
8008b178:	a009883a 	mov	r4,r20
8008b17c:	00920280 	call	80092028 <__malloc_unlock>
8008b180:	9005883a 	mov	r2,r18
8008b184:	00001206 	br	8008b1d0 <_realloc_r+0x170>
8008b188:	00c00404 	movi	r3,16
8008b18c:	1823883a 	mov	r17,r3
8008b190:	003fce06 	br	8008b0cc <_realloc_r+0x6c>
8008b194:	a825883a 	mov	r18,r21
8008b198:	8445c83a 	sub	r2,r16,r17
8008b19c:	00c003c4 	movi	r3,15
8008b1a0:	18802636 	bltu	r3,r2,8008b23c <_realloc_r+0x1dc>
8008b1a4:	99800117 	ldw	r6,4(r19)
8008b1a8:	9c07883a 	add	r3,r19,r16
8008b1ac:	3180004c 	andi	r6,r6,1
8008b1b0:	3420b03a 	or	r16,r6,r16
8008b1b4:	9c000115 	stw	r16,4(r19)
8008b1b8:	18800117 	ldw	r2,4(r3)
8008b1bc:	10800054 	ori	r2,r2,1
8008b1c0:	18800115 	stw	r2,4(r3)
8008b1c4:	a009883a 	mov	r4,r20
8008b1c8:	00920280 	call	80092028 <__malloc_unlock>
8008b1cc:	9005883a 	mov	r2,r18
8008b1d0:	dfc00917 	ldw	ra,36(sp)
8008b1d4:	df000817 	ldw	fp,32(sp)
8008b1d8:	ddc00717 	ldw	r23,28(sp)
8008b1dc:	dd800617 	ldw	r22,24(sp)
8008b1e0:	dd400517 	ldw	r21,20(sp)
8008b1e4:	dd000417 	ldw	r20,16(sp)
8008b1e8:	dcc00317 	ldw	r19,12(sp)
8008b1ec:	dc800217 	ldw	r18,8(sp)
8008b1f0:	dc400117 	ldw	r17,4(sp)
8008b1f4:	dc000017 	ldw	r16,0(sp)
8008b1f8:	dec00a04 	addi	sp,sp,40
8008b1fc:	f800283a 	ret
8008b200:	017fff04 	movi	r5,-4
8008b204:	414a703a 	and	r5,r8,r5
8008b208:	814d883a 	add	r6,r16,r5
8008b20c:	30c01f16 	blt	r6,r3,8008b28c <_realloc_r+0x22c>
8008b210:	20800317 	ldw	r2,12(r4)
8008b214:	20c00217 	ldw	r3,8(r4)
8008b218:	a825883a 	mov	r18,r21
8008b21c:	3021883a 	mov	r16,r6
8008b220:	18800315 	stw	r2,12(r3)
8008b224:	10c00215 	stw	r3,8(r2)
8008b228:	003fdb06 	br	8008b198 <_realloc_r+0x138>
8008b22c:	00800304 	movi	r2,12
8008b230:	a0800015 	stw	r2,0(r20)
8008b234:	0005883a 	mov	r2,zero
8008b238:	003fe506 	br	8008b1d0 <_realloc_r+0x170>
8008b23c:	98c00117 	ldw	r3,4(r19)
8008b240:	9c4b883a 	add	r5,r19,r17
8008b244:	11000054 	ori	r4,r2,1
8008b248:	18c0004c 	andi	r3,r3,1
8008b24c:	1c62b03a 	or	r17,r3,r17
8008b250:	9c400115 	stw	r17,4(r19)
8008b254:	29000115 	stw	r4,4(r5)
8008b258:	2885883a 	add	r2,r5,r2
8008b25c:	10c00117 	ldw	r3,4(r2)
8008b260:	29400204 	addi	r5,r5,8
8008b264:	a009883a 	mov	r4,r20
8008b268:	18c00054 	ori	r3,r3,1
8008b26c:	10c00115 	stw	r3,4(r2)
8008b270:	00887bc0 	call	800887bc <_free_r>
8008b274:	003fd306 	br	8008b1c4 <_realloc_r+0x164>
8008b278:	017fff04 	movi	r5,-4
8008b27c:	414a703a 	and	r5,r8,r5
8008b280:	89800404 	addi	r6,r17,16
8008b284:	8151883a 	add	r8,r16,r5
8008b288:	4180590e 	bge	r8,r6,8008b3f0 <_realloc_r+0x390>
8008b28c:	1080004c 	andi	r2,r2,1
8008b290:	103f9e1e 	bne	r2,zero,8008b10c <_realloc_r+0xac>
8008b294:	adbffe17 	ldw	r22,-8(r21)
8008b298:	00bfff04 	movi	r2,-4
8008b29c:	9dadc83a 	sub	r22,r19,r22
8008b2a0:	b1800117 	ldw	r6,4(r22)
8008b2a4:	3084703a 	and	r2,r6,r2
8008b2a8:	20002026 	beq	r4,zero,8008b32c <_realloc_r+0x2cc>
8008b2ac:	80af883a 	add	r23,r16,r2
8008b2b0:	b96f883a 	add	r23,r23,r5
8008b2b4:	21c05f26 	beq	r4,r7,8008b434 <_realloc_r+0x3d4>
8008b2b8:	b8c01c16 	blt	r23,r3,8008b32c <_realloc_r+0x2cc>
8008b2bc:	20800317 	ldw	r2,12(r4)
8008b2c0:	20c00217 	ldw	r3,8(r4)
8008b2c4:	81bfff04 	addi	r6,r16,-4
8008b2c8:	01000904 	movi	r4,36
8008b2cc:	18800315 	stw	r2,12(r3)
8008b2d0:	10c00215 	stw	r3,8(r2)
8008b2d4:	b0c00217 	ldw	r3,8(r22)
8008b2d8:	b0800317 	ldw	r2,12(r22)
8008b2dc:	b4800204 	addi	r18,r22,8
8008b2e0:	18800315 	stw	r2,12(r3)
8008b2e4:	10c00215 	stw	r3,8(r2)
8008b2e8:	21801b36 	bltu	r4,r6,8008b358 <_realloc_r+0x2f8>
8008b2ec:	008004c4 	movi	r2,19
8008b2f0:	1180352e 	bgeu	r2,r6,8008b3c8 <_realloc_r+0x368>
8008b2f4:	a8800017 	ldw	r2,0(r21)
8008b2f8:	b0800215 	stw	r2,8(r22)
8008b2fc:	a8800117 	ldw	r2,4(r21)
8008b300:	b0800315 	stw	r2,12(r22)
8008b304:	008006c4 	movi	r2,27
8008b308:	11807f36 	bltu	r2,r6,8008b508 <_realloc_r+0x4a8>
8008b30c:	b0800404 	addi	r2,r22,16
8008b310:	ad400204 	addi	r21,r21,8
8008b314:	00002d06 	br	8008b3cc <_realloc_r+0x36c>
8008b318:	adbffe17 	ldw	r22,-8(r21)
8008b31c:	00bfff04 	movi	r2,-4
8008b320:	9dadc83a 	sub	r22,r19,r22
8008b324:	b1000117 	ldw	r4,4(r22)
8008b328:	2084703a 	and	r2,r4,r2
8008b32c:	b03f7726 	beq	r22,zero,8008b10c <_realloc_r+0xac>
8008b330:	80af883a 	add	r23,r16,r2
8008b334:	b8ff7516 	blt	r23,r3,8008b10c <_realloc_r+0xac>
8008b338:	b0800317 	ldw	r2,12(r22)
8008b33c:	b0c00217 	ldw	r3,8(r22)
8008b340:	81bfff04 	addi	r6,r16,-4
8008b344:	01000904 	movi	r4,36
8008b348:	18800315 	stw	r2,12(r3)
8008b34c:	10c00215 	stw	r3,8(r2)
8008b350:	b4800204 	addi	r18,r22,8
8008b354:	21bfe52e 	bgeu	r4,r6,8008b2ec <_realloc_r+0x28c>
8008b358:	a80b883a 	mov	r5,r21
8008b35c:	9009883a 	mov	r4,r18
8008b360:	0089de00 	call	80089de0 <memmove>
8008b364:	b821883a 	mov	r16,r23
8008b368:	b027883a 	mov	r19,r22
8008b36c:	003f8a06 	br	8008b198 <_realloc_r+0x138>
8008b370:	300b883a 	mov	r5,r6
8008b374:	dfc00917 	ldw	ra,36(sp)
8008b378:	df000817 	ldw	fp,32(sp)
8008b37c:	ddc00717 	ldw	r23,28(sp)
8008b380:	dd800617 	ldw	r22,24(sp)
8008b384:	dd400517 	ldw	r21,20(sp)
8008b388:	dd000417 	ldw	r20,16(sp)
8008b38c:	dcc00317 	ldw	r19,12(sp)
8008b390:	dc800217 	ldw	r18,8(sp)
8008b394:	dc400117 	ldw	r17,4(sp)
8008b398:	dc000017 	ldw	r16,0(sp)
8008b39c:	dec00a04 	addi	sp,sp,40
8008b3a0:	00893a81 	jmpi	800893a8 <_malloc_r>
8008b3a4:	a8c00017 	ldw	r3,0(r21)
8008b3a8:	90c00015 	stw	r3,0(r18)
8008b3ac:	a8c00117 	ldw	r3,4(r21)
8008b3b0:	90c00115 	stw	r3,4(r18)
8008b3b4:	00c006c4 	movi	r3,27
8008b3b8:	19804536 	bltu	r3,r6,8008b4d0 <_realloc_r+0x470>
8008b3bc:	90800204 	addi	r2,r18,8
8008b3c0:	a8c00204 	addi	r3,r21,8
8008b3c4:	003f6306 	br	8008b154 <_realloc_r+0xf4>
8008b3c8:	9005883a 	mov	r2,r18
8008b3cc:	a8c00017 	ldw	r3,0(r21)
8008b3d0:	b821883a 	mov	r16,r23
8008b3d4:	b027883a 	mov	r19,r22
8008b3d8:	10c00015 	stw	r3,0(r2)
8008b3dc:	a8c00117 	ldw	r3,4(r21)
8008b3e0:	10c00115 	stw	r3,4(r2)
8008b3e4:	a8c00217 	ldw	r3,8(r21)
8008b3e8:	10c00215 	stw	r3,8(r2)
8008b3ec:	003f6a06 	br	8008b198 <_realloc_r+0x138>
8008b3f0:	9c67883a 	add	r19,r19,r17
8008b3f4:	4445c83a 	sub	r2,r8,r17
8008b3f8:	e4c00215 	stw	r19,8(fp)
8008b3fc:	10800054 	ori	r2,r2,1
8008b400:	98800115 	stw	r2,4(r19)
8008b404:	a8bfff17 	ldw	r2,-4(r21)
8008b408:	a009883a 	mov	r4,r20
8008b40c:	1080004c 	andi	r2,r2,1
8008b410:	1462b03a 	or	r17,r2,r17
8008b414:	ac7fff15 	stw	r17,-4(r21)
8008b418:	00920280 	call	80092028 <__malloc_unlock>
8008b41c:	a805883a 	mov	r2,r21
8008b420:	003f6b06 	br	8008b1d0 <_realloc_r+0x170>
8008b424:	a80b883a 	mov	r5,r21
8008b428:	9009883a 	mov	r4,r18
8008b42c:	0089de00 	call	80089de0 <memmove>
8008b430:	003f4e06 	br	8008b16c <_realloc_r+0x10c>
8008b434:	89000404 	addi	r4,r17,16
8008b438:	b93fbc16 	blt	r23,r4,8008b32c <_realloc_r+0x2cc>
8008b43c:	b0800317 	ldw	r2,12(r22)
8008b440:	b0c00217 	ldw	r3,8(r22)
8008b444:	81bfff04 	addi	r6,r16,-4
8008b448:	01000904 	movi	r4,36
8008b44c:	18800315 	stw	r2,12(r3)
8008b450:	10c00215 	stw	r3,8(r2)
8008b454:	b4800204 	addi	r18,r22,8
8008b458:	21804336 	bltu	r4,r6,8008b568 <_realloc_r+0x508>
8008b45c:	008004c4 	movi	r2,19
8008b460:	11803f2e 	bgeu	r2,r6,8008b560 <_realloc_r+0x500>
8008b464:	a8800017 	ldw	r2,0(r21)
8008b468:	b0800215 	stw	r2,8(r22)
8008b46c:	a8800117 	ldw	r2,4(r21)
8008b470:	b0800315 	stw	r2,12(r22)
8008b474:	008006c4 	movi	r2,27
8008b478:	11803f36 	bltu	r2,r6,8008b578 <_realloc_r+0x518>
8008b47c:	b0800404 	addi	r2,r22,16
8008b480:	ad400204 	addi	r21,r21,8
8008b484:	a8c00017 	ldw	r3,0(r21)
8008b488:	10c00015 	stw	r3,0(r2)
8008b48c:	a8c00117 	ldw	r3,4(r21)
8008b490:	10c00115 	stw	r3,4(r2)
8008b494:	a8c00217 	ldw	r3,8(r21)
8008b498:	10c00215 	stw	r3,8(r2)
8008b49c:	b447883a 	add	r3,r22,r17
8008b4a0:	bc45c83a 	sub	r2,r23,r17
8008b4a4:	e0c00215 	stw	r3,8(fp)
8008b4a8:	10800054 	ori	r2,r2,1
8008b4ac:	18800115 	stw	r2,4(r3)
8008b4b0:	b0800117 	ldw	r2,4(r22)
8008b4b4:	a009883a 	mov	r4,r20
8008b4b8:	1080004c 	andi	r2,r2,1
8008b4bc:	1462b03a 	or	r17,r2,r17
8008b4c0:	b4400115 	stw	r17,4(r22)
8008b4c4:	00920280 	call	80092028 <__malloc_unlock>
8008b4c8:	9005883a 	mov	r2,r18
8008b4cc:	003f4006 	br	8008b1d0 <_realloc_r+0x170>
8008b4d0:	a8c00217 	ldw	r3,8(r21)
8008b4d4:	90c00215 	stw	r3,8(r18)
8008b4d8:	a8c00317 	ldw	r3,12(r21)
8008b4dc:	90c00315 	stw	r3,12(r18)
8008b4e0:	30801126 	beq	r6,r2,8008b528 <_realloc_r+0x4c8>
8008b4e4:	90800404 	addi	r2,r18,16
8008b4e8:	a8c00404 	addi	r3,r21,16
8008b4ec:	003f1906 	br	8008b154 <_realloc_r+0xf4>
8008b4f0:	90ffff17 	ldw	r3,-4(r18)
8008b4f4:	00bfff04 	movi	r2,-4
8008b4f8:	a825883a 	mov	r18,r21
8008b4fc:	1884703a 	and	r2,r3,r2
8008b500:	80a1883a 	add	r16,r16,r2
8008b504:	003f2406 	br	8008b198 <_realloc_r+0x138>
8008b508:	a8800217 	ldw	r2,8(r21)
8008b50c:	b0800415 	stw	r2,16(r22)
8008b510:	a8800317 	ldw	r2,12(r21)
8008b514:	b0800515 	stw	r2,20(r22)
8008b518:	31000a26 	beq	r6,r4,8008b544 <_realloc_r+0x4e4>
8008b51c:	b0800604 	addi	r2,r22,24
8008b520:	ad400404 	addi	r21,r21,16
8008b524:	003fa906 	br	8008b3cc <_realloc_r+0x36c>
8008b528:	a9000417 	ldw	r4,16(r21)
8008b52c:	90800604 	addi	r2,r18,24
8008b530:	a8c00604 	addi	r3,r21,24
8008b534:	91000415 	stw	r4,16(r18)
8008b538:	a9000517 	ldw	r4,20(r21)
8008b53c:	91000515 	stw	r4,20(r18)
8008b540:	003f0406 	br	8008b154 <_realloc_r+0xf4>
8008b544:	a8c00417 	ldw	r3,16(r21)
8008b548:	ad400604 	addi	r21,r21,24
8008b54c:	b0800804 	addi	r2,r22,32
8008b550:	b0c00615 	stw	r3,24(r22)
8008b554:	a8ffff17 	ldw	r3,-4(r21)
8008b558:	b0c00715 	stw	r3,28(r22)
8008b55c:	003f9b06 	br	8008b3cc <_realloc_r+0x36c>
8008b560:	9005883a 	mov	r2,r18
8008b564:	003fc706 	br	8008b484 <_realloc_r+0x424>
8008b568:	a80b883a 	mov	r5,r21
8008b56c:	9009883a 	mov	r4,r18
8008b570:	0089de00 	call	80089de0 <memmove>
8008b574:	003fc906 	br	8008b49c <_realloc_r+0x43c>
8008b578:	a8800217 	ldw	r2,8(r21)
8008b57c:	b0800415 	stw	r2,16(r22)
8008b580:	a8800317 	ldw	r2,12(r21)
8008b584:	b0800515 	stw	r2,20(r22)
8008b588:	31000726 	beq	r6,r4,8008b5a8 <_realloc_r+0x548>
8008b58c:	b0800604 	addi	r2,r22,24
8008b590:	ad400404 	addi	r21,r21,16
8008b594:	003fbb06 	br	8008b484 <_realloc_r+0x424>
8008b598:	a009883a 	mov	r4,r20
8008b59c:	00920280 	call	80092028 <__malloc_unlock>
8008b5a0:	0005883a 	mov	r2,zero
8008b5a4:	003f0a06 	br	8008b1d0 <_realloc_r+0x170>
8008b5a8:	a8c00417 	ldw	r3,16(r21)
8008b5ac:	ad400604 	addi	r21,r21,24
8008b5b0:	b0800804 	addi	r2,r22,32
8008b5b4:	b0c00615 	stw	r3,24(r22)
8008b5b8:	a8ffff17 	ldw	r3,-4(r21)
8008b5bc:	b0c00715 	stw	r3,28(r22)
8008b5c0:	003fb006 	br	8008b484 <_realloc_r+0x424>

8008b5c4 <lflush>:
8008b5c4:	2080030b 	ldhu	r2,12(r4)
8008b5c8:	00c00244 	movi	r3,9
8008b5cc:	1080024c 	andi	r2,r2,9
8008b5d0:	10c00226 	beq	r2,r3,8008b5dc <lflush+0x18>
8008b5d4:	0005883a 	mov	r2,zero
8008b5d8:	f800283a 	ret
8008b5dc:	00882c81 	jmpi	800882c8 <fflush>

8008b5e0 <__srefill_r>:
8008b5e0:	defffc04 	addi	sp,sp,-16
8008b5e4:	dc400115 	stw	r17,4(sp)
8008b5e8:	dc000015 	stw	r16,0(sp)
8008b5ec:	dfc00315 	stw	ra,12(sp)
8008b5f0:	dc800215 	stw	r18,8(sp)
8008b5f4:	2023883a 	mov	r17,r4
8008b5f8:	2821883a 	mov	r16,r5
8008b5fc:	20000226 	beq	r4,zero,8008b608 <__srefill_r+0x28>
8008b600:	20800e17 	ldw	r2,56(r4)
8008b604:	10003c26 	beq	r2,zero,8008b6f8 <__srefill_r+0x118>
8008b608:	80c0030b 	ldhu	r3,12(r16)
8008b60c:	1908000c 	andi	r4,r3,8192
8008b610:	1805883a 	mov	r2,r3
8008b614:	2000071e 	bne	r4,zero,8008b634 <__srefill_r+0x54>
8008b618:	81001917 	ldw	r4,100(r16)
8008b61c:	18880014 	ori	r2,r3,8192
8008b620:	00f7ffc4 	movi	r3,-8193
8008b624:	20c8703a 	and	r4,r4,r3
8008b628:	8080030d 	sth	r2,12(r16)
8008b62c:	1007883a 	mov	r3,r2
8008b630:	81001915 	stw	r4,100(r16)
8008b634:	80000115 	stw	zero,4(r16)
8008b638:	1100080c 	andi	r4,r2,32
8008b63c:	2000571e 	bne	r4,zero,8008b79c <__srefill_r+0x1bc>
8008b640:	1100010c 	andi	r4,r2,4
8008b644:	20001f26 	beq	r4,zero,8008b6c4 <__srefill_r+0xe4>
8008b648:	81400c17 	ldw	r5,48(r16)
8008b64c:	28000826 	beq	r5,zero,8008b670 <__srefill_r+0x90>
8008b650:	80801004 	addi	r2,r16,64
8008b654:	28800226 	beq	r5,r2,8008b660 <__srefill_r+0x80>
8008b658:	8809883a 	mov	r4,r17
8008b65c:	00887bc0 	call	800887bc <_free_r>
8008b660:	80800f17 	ldw	r2,60(r16)
8008b664:	80000c15 	stw	zero,48(r16)
8008b668:	80800115 	stw	r2,4(r16)
8008b66c:	1000391e 	bne	r2,zero,8008b754 <__srefill_r+0x174>
8008b670:	80800417 	ldw	r2,16(r16)
8008b674:	10004b26 	beq	r2,zero,8008b7a4 <__srefill_r+0x1c4>
8008b678:	8480030b 	ldhu	r18,12(r16)
8008b67c:	908000cc 	andi	r2,r18,3
8008b680:	10001f1e 	bne	r2,zero,8008b700 <__srefill_r+0x120>
8008b684:	81800417 	ldw	r6,16(r16)
8008b688:	80800817 	ldw	r2,32(r16)
8008b68c:	81c00517 	ldw	r7,20(r16)
8008b690:	81400717 	ldw	r5,28(r16)
8008b694:	81800015 	stw	r6,0(r16)
8008b698:	8809883a 	mov	r4,r17
8008b69c:	103ee83a 	callr	r2
8008b6a0:	80800115 	stw	r2,4(r16)
8008b6a4:	00800e0e 	bge	zero,r2,8008b6e0 <__srefill_r+0x100>
8008b6a8:	0005883a 	mov	r2,zero
8008b6ac:	dfc00317 	ldw	ra,12(sp)
8008b6b0:	dc800217 	ldw	r18,8(sp)
8008b6b4:	dc400117 	ldw	r17,4(sp)
8008b6b8:	dc000017 	ldw	r16,0(sp)
8008b6bc:	dec00404 	addi	sp,sp,16
8008b6c0:	f800283a 	ret
8008b6c4:	1100040c 	andi	r4,r2,16
8008b6c8:	20003026 	beq	r4,zero,8008b78c <__srefill_r+0x1ac>
8008b6cc:	1080020c 	andi	r2,r2,8
8008b6d0:	1000241e 	bne	r2,zero,8008b764 <__srefill_r+0x184>
8008b6d4:	18c00114 	ori	r3,r3,4
8008b6d8:	80c0030d 	sth	r3,12(r16)
8008b6dc:	003fe406 	br	8008b670 <__srefill_r+0x90>
8008b6e0:	80c0030b 	ldhu	r3,12(r16)
8008b6e4:	1000161e 	bne	r2,zero,8008b740 <__srefill_r+0x160>
8008b6e8:	18c00814 	ori	r3,r3,32
8008b6ec:	00bfffc4 	movi	r2,-1
8008b6f0:	80c0030d 	sth	r3,12(r16)
8008b6f4:	003fed06 	br	8008b6ac <__srefill_r+0xcc>
8008b6f8:	00886480 	call	80088648 <__sinit>
8008b6fc:	003fc206 	br	8008b608 <__srefill_r+0x28>
8008b700:	00a002b4 	movhi	r2,32778
8008b704:	10a29d04 	addi	r2,r2,-30092
8008b708:	11000017 	ldw	r4,0(r2)
8008b70c:	01600274 	movhi	r5,32777
8008b710:	00800044 	movi	r2,1
8008b714:	296d7104 	addi	r5,r5,-19004
8008b718:	8080030d 	sth	r2,12(r16)
8008b71c:	0088f880 	call	80088f88 <_fwalk>
8008b720:	00800244 	movi	r2,9
8008b724:	8480030d 	sth	r18,12(r16)
8008b728:	9480024c 	andi	r18,r18,9
8008b72c:	90bfd51e 	bne	r18,r2,8008b684 <__srefill_r+0xa4>
8008b730:	800b883a 	mov	r5,r16
8008b734:	8809883a 	mov	r4,r17
8008b738:	00880500 	call	80088050 <__sflush_r>
8008b73c:	003fd106 	br	8008b684 <__srefill_r+0xa4>
8008b740:	18c01014 	ori	r3,r3,64
8008b744:	80000115 	stw	zero,4(r16)
8008b748:	00bfffc4 	movi	r2,-1
8008b74c:	80c0030d 	sth	r3,12(r16)
8008b750:	003fd606 	br	8008b6ac <__srefill_r+0xcc>
8008b754:	80c00e17 	ldw	r3,56(r16)
8008b758:	0005883a 	mov	r2,zero
8008b75c:	80c00015 	stw	r3,0(r16)
8008b760:	003fd206 	br	8008b6ac <__srefill_r+0xcc>
8008b764:	800b883a 	mov	r5,r16
8008b768:	8809883a 	mov	r4,r17
8008b76c:	008826c0 	call	8008826c <_fflush_r>
8008b770:	10000a1e 	bne	r2,zero,8008b79c <__srefill_r+0x1bc>
8008b774:	8080030b 	ldhu	r2,12(r16)
8008b778:	00fffdc4 	movi	r3,-9
8008b77c:	80000215 	stw	zero,8(r16)
8008b780:	1886703a 	and	r3,r3,r2
8008b784:	80000615 	stw	zero,24(r16)
8008b788:	003fd206 	br	8008b6d4 <__srefill_r+0xf4>
8008b78c:	00800244 	movi	r2,9
8008b790:	88800015 	stw	r2,0(r17)
8008b794:	18c01014 	ori	r3,r3,64
8008b798:	80c0030d 	sth	r3,12(r16)
8008b79c:	00bfffc4 	movi	r2,-1
8008b7a0:	003fc206 	br	8008b6ac <__srefill_r+0xcc>
8008b7a4:	800b883a 	mov	r5,r16
8008b7a8:	8809883a 	mov	r4,r17
8008b7ac:	00891ec0 	call	800891ec <__smakebuf_r>
8008b7b0:	003fb106 	br	8008b678 <__srefill_r+0x98>

8008b7b4 <__fpclassifyd>:
8008b7b4:	00a00034 	movhi	r2,32768
8008b7b8:	10bfffc4 	addi	r2,r2,-1
8008b7bc:	2884703a 	and	r2,r5,r2
8008b7c0:	10000726 	beq	r2,zero,8008b7e0 <__fpclassifyd+0x2c>
8008b7c4:	00fffc34 	movhi	r3,65520
8008b7c8:	019ff834 	movhi	r6,32736
8008b7cc:	28c7883a 	add	r3,r5,r3
8008b7d0:	31bfffc4 	addi	r6,r6,-1
8008b7d4:	30c00536 	bltu	r6,r3,8008b7ec <__fpclassifyd+0x38>
8008b7d8:	00800104 	movi	r2,4
8008b7dc:	f800283a 	ret
8008b7e0:	2000021e 	bne	r4,zero,8008b7ec <__fpclassifyd+0x38>
8008b7e4:	00800084 	movi	r2,2
8008b7e8:	f800283a 	ret
8008b7ec:	00dffc34 	movhi	r3,32752
8008b7f0:	019ff834 	movhi	r6,32736
8008b7f4:	28cb883a 	add	r5,r5,r3
8008b7f8:	31bfffc4 	addi	r6,r6,-1
8008b7fc:	317ff62e 	bgeu	r6,r5,8008b7d8 <__fpclassifyd+0x24>
8008b800:	01400434 	movhi	r5,16
8008b804:	297fffc4 	addi	r5,r5,-1
8008b808:	28800236 	bltu	r5,r2,8008b814 <__fpclassifyd+0x60>
8008b80c:	008000c4 	movi	r2,3
8008b810:	f800283a 	ret
8008b814:	10c00226 	beq	r2,r3,8008b820 <__fpclassifyd+0x6c>
8008b818:	0005883a 	mov	r2,zero
8008b81c:	f800283a 	ret
8008b820:	2005003a 	cmpeq	r2,r4,zero
8008b824:	f800283a 	ret

8008b828 <_sbrk_r>:
8008b828:	defffd04 	addi	sp,sp,-12
8008b82c:	dc000015 	stw	r16,0(sp)
8008b830:	042002b4 	movhi	r16,32778
8008b834:	dc400115 	stw	r17,4(sp)
8008b838:	8429d604 	addi	r16,r16,-22696
8008b83c:	2023883a 	mov	r17,r4
8008b840:	2809883a 	mov	r4,r5
8008b844:	dfc00215 	stw	ra,8(sp)
8008b848:	80000015 	stw	zero,0(r16)
8008b84c:	00921e80 	call	800921e8 <sbrk>
8008b850:	00ffffc4 	movi	r3,-1
8008b854:	10c00526 	beq	r2,r3,8008b86c <_sbrk_r+0x44>
8008b858:	dfc00217 	ldw	ra,8(sp)
8008b85c:	dc400117 	ldw	r17,4(sp)
8008b860:	dc000017 	ldw	r16,0(sp)
8008b864:	dec00304 	addi	sp,sp,12
8008b868:	f800283a 	ret
8008b86c:	80c00017 	ldw	r3,0(r16)
8008b870:	183ff926 	beq	r3,zero,8008b858 <_sbrk_r+0x30>
8008b874:	88c00015 	stw	r3,0(r17)
8008b878:	003ff706 	br	8008b858 <_sbrk_r+0x30>

8008b87c <__sread>:
8008b87c:	defffe04 	addi	sp,sp,-8
8008b880:	dc000015 	stw	r16,0(sp)
8008b884:	2821883a 	mov	r16,r5
8008b888:	2940038f 	ldh	r5,14(r5)
8008b88c:	dfc00115 	stw	ra,4(sp)
8008b890:	008ea7c0 	call	8008ea7c <_read_r>
8008b894:	10000716 	blt	r2,zero,8008b8b4 <__sread+0x38>
8008b898:	80c01417 	ldw	r3,80(r16)
8008b89c:	1887883a 	add	r3,r3,r2
8008b8a0:	80c01415 	stw	r3,80(r16)
8008b8a4:	dfc00117 	ldw	ra,4(sp)
8008b8a8:	dc000017 	ldw	r16,0(sp)
8008b8ac:	dec00204 	addi	sp,sp,8
8008b8b0:	f800283a 	ret
8008b8b4:	80c0030b 	ldhu	r3,12(r16)
8008b8b8:	18fbffcc 	andi	r3,r3,61439
8008b8bc:	80c0030d 	sth	r3,12(r16)
8008b8c0:	dfc00117 	ldw	ra,4(sp)
8008b8c4:	dc000017 	ldw	r16,0(sp)
8008b8c8:	dec00204 	addi	sp,sp,8
8008b8cc:	f800283a 	ret

8008b8d0 <__seofread>:
8008b8d0:	0005883a 	mov	r2,zero
8008b8d4:	f800283a 	ret

8008b8d8 <__swrite>:
8008b8d8:	2880030b 	ldhu	r2,12(r5)
8008b8dc:	defffb04 	addi	sp,sp,-20
8008b8e0:	dcc00315 	stw	r19,12(sp)
8008b8e4:	dc800215 	stw	r18,8(sp)
8008b8e8:	dc400115 	stw	r17,4(sp)
8008b8ec:	dc000015 	stw	r16,0(sp)
8008b8f0:	dfc00415 	stw	ra,16(sp)
8008b8f4:	10c0400c 	andi	r3,r2,256
8008b8f8:	2821883a 	mov	r16,r5
8008b8fc:	2023883a 	mov	r17,r4
8008b900:	3025883a 	mov	r18,r6
8008b904:	3827883a 	mov	r19,r7
8008b908:	18000526 	beq	r3,zero,8008b920 <__swrite+0x48>
8008b90c:	2940038f 	ldh	r5,14(r5)
8008b910:	01c00084 	movi	r7,2
8008b914:	000d883a 	mov	r6,zero
8008b918:	008ea1c0 	call	8008ea1c <_lseek_r>
8008b91c:	8080030b 	ldhu	r2,12(r16)
8008b920:	8140038f 	ldh	r5,14(r16)
8008b924:	10bbffcc 	andi	r2,r2,61439
8008b928:	980f883a 	mov	r7,r19
8008b92c:	900d883a 	mov	r6,r18
8008b930:	8809883a 	mov	r4,r17
8008b934:	8080030d 	sth	r2,12(r16)
8008b938:	dfc00417 	ldw	ra,16(sp)
8008b93c:	dcc00317 	ldw	r19,12(sp)
8008b940:	dc800217 	ldw	r18,8(sp)
8008b944:	dc400117 	ldw	r17,4(sp)
8008b948:	dc000017 	ldw	r16,0(sp)
8008b94c:	dec00504 	addi	sp,sp,20
8008b950:	008e4e81 	jmpi	8008e4e8 <_write_r>

8008b954 <__sseek>:
8008b954:	defffe04 	addi	sp,sp,-8
8008b958:	dc000015 	stw	r16,0(sp)
8008b95c:	2821883a 	mov	r16,r5
8008b960:	2940038f 	ldh	r5,14(r5)
8008b964:	dfc00115 	stw	ra,4(sp)
8008b968:	008ea1c0 	call	8008ea1c <_lseek_r>
8008b96c:	00ffffc4 	movi	r3,-1
8008b970:	10c00826 	beq	r2,r3,8008b994 <__sseek+0x40>
8008b974:	80c0030b 	ldhu	r3,12(r16)
8008b978:	80801415 	stw	r2,80(r16)
8008b97c:	18c40014 	ori	r3,r3,4096
8008b980:	80c0030d 	sth	r3,12(r16)
8008b984:	dfc00117 	ldw	ra,4(sp)
8008b988:	dc000017 	ldw	r16,0(sp)
8008b98c:	dec00204 	addi	sp,sp,8
8008b990:	f800283a 	ret
8008b994:	80c0030b 	ldhu	r3,12(r16)
8008b998:	18fbffcc 	andi	r3,r3,61439
8008b99c:	80c0030d 	sth	r3,12(r16)
8008b9a0:	dfc00117 	ldw	ra,4(sp)
8008b9a4:	dc000017 	ldw	r16,0(sp)
8008b9a8:	dec00204 	addi	sp,sp,8
8008b9ac:	f800283a 	ret

8008b9b0 <__sclose>:
8008b9b0:	2940038f 	ldh	r5,14(r5)
8008b9b4:	008e5481 	jmpi	8008e548 <_close_r>

8008b9b8 <strcmp>:
8008b9b8:	2144b03a 	or	r2,r4,r5
8008b9bc:	108000cc 	andi	r2,r2,3
8008b9c0:	1000171e 	bne	r2,zero,8008ba20 <strcmp+0x68>
8008b9c4:	20800017 	ldw	r2,0(r4)
8008b9c8:	28c00017 	ldw	r3,0(r5)
8008b9cc:	10c0141e 	bne	r2,r3,8008ba20 <strcmp+0x68>
8008b9d0:	027fbff4 	movhi	r9,65279
8008b9d4:	4a7fbfc4 	addi	r9,r9,-257
8008b9d8:	0086303a 	nor	r3,zero,r2
8008b9dc:	02202074 	movhi	r8,32897
8008b9e0:	1245883a 	add	r2,r2,r9
8008b9e4:	42202004 	addi	r8,r8,-32640
8008b9e8:	10c4703a 	and	r2,r2,r3
8008b9ec:	1204703a 	and	r2,r2,r8
8008b9f0:	10000226 	beq	r2,zero,8008b9fc <strcmp+0x44>
8008b9f4:	00002306 	br	8008ba84 <strcmp+0xcc>
8008b9f8:	1000221e 	bne	r2,zero,8008ba84 <strcmp+0xcc>
8008b9fc:	21000104 	addi	r4,r4,4
8008ba00:	20c00017 	ldw	r3,0(r4)
8008ba04:	29400104 	addi	r5,r5,4
8008ba08:	29800017 	ldw	r6,0(r5)
8008ba0c:	1a4f883a 	add	r7,r3,r9
8008ba10:	00c4303a 	nor	r2,zero,r3
8008ba14:	3884703a 	and	r2,r7,r2
8008ba18:	1204703a 	and	r2,r2,r8
8008ba1c:	19bff626 	beq	r3,r6,8008b9f8 <strcmp+0x40>
8008ba20:	20800003 	ldbu	r2,0(r4)
8008ba24:	10c03fcc 	andi	r3,r2,255
8008ba28:	18c0201c 	xori	r3,r3,128
8008ba2c:	18ffe004 	addi	r3,r3,-128
8008ba30:	18000c26 	beq	r3,zero,8008ba64 <strcmp+0xac>
8008ba34:	29800007 	ldb	r6,0(r5)
8008ba38:	19800326 	beq	r3,r6,8008ba48 <strcmp+0x90>
8008ba3c:	00001306 	br	8008ba8c <strcmp+0xd4>
8008ba40:	29800007 	ldb	r6,0(r5)
8008ba44:	11800b1e 	bne	r2,r6,8008ba74 <strcmp+0xbc>
8008ba48:	21000044 	addi	r4,r4,1
8008ba4c:	20c00003 	ldbu	r3,0(r4)
8008ba50:	29400044 	addi	r5,r5,1
8008ba54:	18803fcc 	andi	r2,r3,255
8008ba58:	1080201c 	xori	r2,r2,128
8008ba5c:	10bfe004 	addi	r2,r2,-128
8008ba60:	103ff71e 	bne	r2,zero,8008ba40 <strcmp+0x88>
8008ba64:	0007883a 	mov	r3,zero
8008ba68:	28800003 	ldbu	r2,0(r5)
8008ba6c:	1885c83a 	sub	r2,r3,r2
8008ba70:	f800283a 	ret
8008ba74:	28800003 	ldbu	r2,0(r5)
8008ba78:	18c03fcc 	andi	r3,r3,255
8008ba7c:	1885c83a 	sub	r2,r3,r2
8008ba80:	f800283a 	ret
8008ba84:	0005883a 	mov	r2,zero
8008ba88:	f800283a 	ret
8008ba8c:	10c03fcc 	andi	r3,r2,255
8008ba90:	003ff506 	br	8008ba68 <strcmp+0xb0>

8008ba94 <__ssprint_r>:
8008ba94:	30800217 	ldw	r2,8(r6)
8008ba98:	defff604 	addi	sp,sp,-40
8008ba9c:	dc800215 	stw	r18,8(sp)
8008baa0:	dfc00915 	stw	ra,36(sp)
8008baa4:	df000815 	stw	fp,32(sp)
8008baa8:	ddc00715 	stw	r23,28(sp)
8008baac:	dd800615 	stw	r22,24(sp)
8008bab0:	dd400515 	stw	r21,20(sp)
8008bab4:	dd000415 	stw	r20,16(sp)
8008bab8:	dcc00315 	stw	r19,12(sp)
8008babc:	dc400115 	stw	r17,4(sp)
8008bac0:	dc000015 	stw	r16,0(sp)
8008bac4:	3025883a 	mov	r18,r6
8008bac8:	10005826 	beq	r2,zero,8008bc2c <__ssprint_r+0x198>
8008bacc:	2027883a 	mov	r19,r4
8008bad0:	35c00017 	ldw	r23,0(r6)
8008bad4:	29000017 	ldw	r4,0(r5)
8008bad8:	28800217 	ldw	r2,8(r5)
8008badc:	2823883a 	mov	r17,r5
8008bae0:	0039883a 	mov	fp,zero
8008bae4:	0021883a 	mov	r16,zero
8008bae8:	80003926 	beq	r16,zero,8008bbd0 <__ssprint_r+0x13c>
8008baec:	102b883a 	mov	r21,r2
8008baf0:	102d883a 	mov	r22,r2
8008baf4:	80803a36 	bltu	r16,r2,8008bbe0 <__ssprint_r+0x14c>
8008baf8:	88c0030b 	ldhu	r3,12(r17)
8008bafc:	1881200c 	andi	r2,r3,1152
8008bb00:	10002626 	beq	r2,zero,8008bb9c <__ssprint_r+0x108>
8008bb04:	88800517 	ldw	r2,20(r17)
8008bb08:	89400417 	ldw	r5,16(r17)
8008bb0c:	81800044 	addi	r6,r16,1
8008bb10:	108f883a 	add	r7,r2,r2
8008bb14:	3885883a 	add	r2,r7,r2
8008bb18:	100ed7fa 	srli	r7,r2,31
8008bb1c:	216dc83a 	sub	r22,r4,r5
8008bb20:	3589883a 	add	r4,r6,r22
8008bb24:	3885883a 	add	r2,r7,r2
8008bb28:	102bd07a 	srai	r21,r2,1
8008bb2c:	a80d883a 	mov	r6,r21
8008bb30:	a900022e 	bgeu	r21,r4,8008bb3c <__ssprint_r+0xa8>
8008bb34:	202b883a 	mov	r21,r4
8008bb38:	200d883a 	mov	r6,r4
8008bb3c:	18c1000c 	andi	r3,r3,1024
8008bb40:	18002a26 	beq	r3,zero,8008bbec <__ssprint_r+0x158>
8008bb44:	300b883a 	mov	r5,r6
8008bb48:	9809883a 	mov	r4,r19
8008bb4c:	00893a80 	call	800893a8 <_malloc_r>
8008bb50:	1029883a 	mov	r20,r2
8008bb54:	10002c26 	beq	r2,zero,8008bc08 <__ssprint_r+0x174>
8008bb58:	89400417 	ldw	r5,16(r17)
8008bb5c:	b00d883a 	mov	r6,r22
8008bb60:	1009883a 	mov	r4,r2
8008bb64:	0089c980 	call	80089c98 <memcpy>
8008bb68:	8880030b 	ldhu	r2,12(r17)
8008bb6c:	00fedfc4 	movi	r3,-1153
8008bb70:	10c4703a 	and	r2,r2,r3
8008bb74:	10802014 	ori	r2,r2,128
8008bb78:	8880030d 	sth	r2,12(r17)
8008bb7c:	a589883a 	add	r4,r20,r22
8008bb80:	adadc83a 	sub	r22,r21,r22
8008bb84:	8d400515 	stw	r21,20(r17)
8008bb88:	8d800215 	stw	r22,8(r17)
8008bb8c:	8d000415 	stw	r20,16(r17)
8008bb90:	89000015 	stw	r4,0(r17)
8008bb94:	802b883a 	mov	r21,r16
8008bb98:	802d883a 	mov	r22,r16
8008bb9c:	b00d883a 	mov	r6,r22
8008bba0:	e00b883a 	mov	r5,fp
8008bba4:	0089de00 	call	80089de0 <memmove>
8008bba8:	88800217 	ldw	r2,8(r17)
8008bbac:	89000017 	ldw	r4,0(r17)
8008bbb0:	90c00217 	ldw	r3,8(r18)
8008bbb4:	1545c83a 	sub	r2,r2,r21
8008bbb8:	2589883a 	add	r4,r4,r22
8008bbbc:	88800215 	stw	r2,8(r17)
8008bbc0:	89000015 	stw	r4,0(r17)
8008bbc4:	1c21c83a 	sub	r16,r3,r16
8008bbc8:	94000215 	stw	r16,8(r18)
8008bbcc:	80001726 	beq	r16,zero,8008bc2c <__ssprint_r+0x198>
8008bbd0:	bf000017 	ldw	fp,0(r23)
8008bbd4:	bc000117 	ldw	r16,4(r23)
8008bbd8:	bdc00204 	addi	r23,r23,8
8008bbdc:	003fc206 	br	8008bae8 <__ssprint_r+0x54>
8008bbe0:	802b883a 	mov	r21,r16
8008bbe4:	802d883a 	mov	r22,r16
8008bbe8:	003fec06 	br	8008bb9c <__ssprint_r+0x108>
8008bbec:	9809883a 	mov	r4,r19
8008bbf0:	008b0600 	call	8008b060 <_realloc_r>
8008bbf4:	1029883a 	mov	r20,r2
8008bbf8:	103fe01e 	bne	r2,zero,8008bb7c <__ssprint_r+0xe8>
8008bbfc:	89400417 	ldw	r5,16(r17)
8008bc00:	9809883a 	mov	r4,r19
8008bc04:	00887bc0 	call	800887bc <_free_r>
8008bc08:	88c0030b 	ldhu	r3,12(r17)
8008bc0c:	00800304 	movi	r2,12
8008bc10:	98800015 	stw	r2,0(r19)
8008bc14:	18c01014 	ori	r3,r3,64
8008bc18:	88c0030d 	sth	r3,12(r17)
8008bc1c:	00bfffc4 	movi	r2,-1
8008bc20:	90000215 	stw	zero,8(r18)
8008bc24:	90000115 	stw	zero,4(r18)
8008bc28:	00000206 	br	8008bc34 <__ssprint_r+0x1a0>
8008bc2c:	90000115 	stw	zero,4(r18)
8008bc30:	0005883a 	mov	r2,zero
8008bc34:	dfc00917 	ldw	ra,36(sp)
8008bc38:	df000817 	ldw	fp,32(sp)
8008bc3c:	ddc00717 	ldw	r23,28(sp)
8008bc40:	dd800617 	ldw	r22,24(sp)
8008bc44:	dd400517 	ldw	r21,20(sp)
8008bc48:	dd000417 	ldw	r20,16(sp)
8008bc4c:	dcc00317 	ldw	r19,12(sp)
8008bc50:	dc800217 	ldw	r18,8(sp)
8008bc54:	dc400117 	ldw	r17,4(sp)
8008bc58:	dc000017 	ldw	r16,0(sp)
8008bc5c:	dec00a04 	addi	sp,sp,40
8008bc60:	f800283a 	ret

8008bc64 <___svfiprintf_internal_r>:
8008bc64:	2880030b 	ldhu	r2,12(r5)
8008bc68:	deffc804 	addi	sp,sp,-224
8008bc6c:	dcc03115 	stw	r19,196(sp)
8008bc70:	dfc03715 	stw	ra,220(sp)
8008bc74:	df003615 	stw	fp,216(sp)
8008bc78:	ddc03515 	stw	r23,212(sp)
8008bc7c:	dd803415 	stw	r22,208(sp)
8008bc80:	dd403315 	stw	r21,204(sp)
8008bc84:	dd003215 	stw	r20,200(sp)
8008bc88:	dc803015 	stw	r18,192(sp)
8008bc8c:	dc402f15 	stw	r17,188(sp)
8008bc90:	dc002e15 	stw	r16,184(sp)
8008bc94:	d9402715 	stw	r5,156(sp)
8008bc98:	d9002a15 	stw	r4,168(sp)
8008bc9c:	1080200c 	andi	r2,r2,128
8008bca0:	d9c02315 	stw	r7,140(sp)
8008bca4:	3027883a 	mov	r19,r6
8008bca8:	10000226 	beq	r2,zero,8008bcb4 <___svfiprintf_internal_r+0x50>
8008bcac:	28800417 	ldw	r2,16(r5)
8008bcb0:	10041d26 	beq	r2,zero,8008cd28 <___svfiprintf_internal_r+0x10c4>
8008bcb4:	dac01a04 	addi	r11,sp,104
8008bcb8:	dac01e15 	stw	r11,120(sp)
8008bcbc:	d8801e17 	ldw	r2,120(sp)
8008bcc0:	dac019c4 	addi	r11,sp,103
8008bcc4:	dd402a17 	ldw	r21,168(sp)
8008bcc8:	ddc02717 	ldw	r23,156(sp)
8008bccc:	05a00274 	movhi	r22,32777
8008bcd0:	05200274 	movhi	r20,32777
8008bcd4:	dac01f15 	stw	r11,124(sp)
8008bcd8:	12d7c83a 	sub	r11,r2,r11
8008bcdc:	b59ae504 	addi	r22,r22,27540
8008bce0:	a51ae104 	addi	r20,r20,27524
8008bce4:	dec01a15 	stw	sp,104(sp)
8008bce8:	d8001c15 	stw	zero,112(sp)
8008bcec:	d8001b15 	stw	zero,108(sp)
8008bcf0:	d811883a 	mov	r8,sp
8008bcf4:	d8002915 	stw	zero,164(sp)
8008bcf8:	d8002515 	stw	zero,148(sp)
8008bcfc:	dac02b15 	stw	r11,172(sp)
8008bd00:	98800007 	ldb	r2,0(r19)
8008bd04:	1002dd26 	beq	r2,zero,8008c87c <___svfiprintf_internal_r+0xc18>
8008bd08:	00c00944 	movi	r3,37
8008bd0c:	9823883a 	mov	r17,r19
8008bd10:	10c0021e 	bne	r2,r3,8008bd1c <___svfiprintf_internal_r+0xb8>
8008bd14:	00001406 	br	8008bd68 <___svfiprintf_internal_r+0x104>
8008bd18:	10c00326 	beq	r2,r3,8008bd28 <___svfiprintf_internal_r+0xc4>
8008bd1c:	8c400044 	addi	r17,r17,1
8008bd20:	88800007 	ldb	r2,0(r17)
8008bd24:	103ffc1e 	bne	r2,zero,8008bd18 <___svfiprintf_internal_r+0xb4>
8008bd28:	8ce1c83a 	sub	r16,r17,r19
8008bd2c:	80000e26 	beq	r16,zero,8008bd68 <___svfiprintf_internal_r+0x104>
8008bd30:	d8c01c17 	ldw	r3,112(sp)
8008bd34:	d8801b17 	ldw	r2,108(sp)
8008bd38:	44c00015 	stw	r19,0(r8)
8008bd3c:	1c07883a 	add	r3,r3,r16
8008bd40:	10800044 	addi	r2,r2,1
8008bd44:	d8c01c15 	stw	r3,112(sp)
8008bd48:	44000115 	stw	r16,4(r8)
8008bd4c:	d8801b15 	stw	r2,108(sp)
8008bd50:	00c001c4 	movi	r3,7
8008bd54:	18831e16 	blt	r3,r2,8008c9d0 <___svfiprintf_internal_r+0xd6c>
8008bd58:	42000204 	addi	r8,r8,8
8008bd5c:	dac02517 	ldw	r11,148(sp)
8008bd60:	5c17883a 	add	r11,r11,r16
8008bd64:	dac02515 	stw	r11,148(sp)
8008bd68:	88800007 	ldb	r2,0(r17)
8008bd6c:	1002c526 	beq	r2,zero,8008c884 <___svfiprintf_internal_r+0xc20>
8008bd70:	88c00047 	ldb	r3,1(r17)
8008bd74:	8cc00044 	addi	r19,r17,1
8008bd78:	d8001d85 	stb	zero,118(sp)
8008bd7c:	0009883a 	mov	r4,zero
8008bd80:	000f883a 	mov	r7,zero
8008bd84:	043fffc4 	movi	r16,-1
8008bd88:	d8002415 	stw	zero,144(sp)
8008bd8c:	0025883a 	mov	r18,zero
8008bd90:	01401604 	movi	r5,88
8008bd94:	01800244 	movi	r6,9
8008bd98:	02800a84 	movi	r10,42
8008bd9c:	02401b04 	movi	r9,108
8008bda0:	9cc00044 	addi	r19,r19,1
8008bda4:	18bff804 	addi	r2,r3,-32
8008bda8:	2881dd36 	bltu	r5,r2,8008c520 <___svfiprintf_internal_r+0x8bc>
8008bdac:	100490ba 	slli	r2,r2,2
8008bdb0:	02e00274 	movhi	r11,32777
8008bdb4:	5aef7104 	addi	r11,r11,-16956
8008bdb8:	12c5883a 	add	r2,r2,r11
8008bdbc:	10800017 	ldw	r2,0(r2)
8008bdc0:	1000683a 	jmp	r2
8008bdc4:	8008bfc0 	call	88008bfc <__alt_data_end+0x7f0bbfc>
8008bdc8:	8008c520 	cmpeqi	zero,r16,8980
8008bdcc:	8008c520 	cmpeqi	zero,r16,8980
8008bdd0:	8008bfb4 	orhi	zero,r16,8958
8008bdd4:	8008c520 	cmpeqi	zero,r16,8980
8008bdd8:	8008c520 	cmpeqi	zero,r16,8980
8008bddc:	8008c520 	cmpeqi	zero,r16,8980
8008bde0:	8008c520 	cmpeqi	zero,r16,8980
8008bde4:	8008c520 	cmpeqi	zero,r16,8980
8008bde8:	8008c520 	cmpeqi	zero,r16,8980
8008bdec:	8008bf28 	cmpgeui	zero,r16,8956
8008bdf0:	8008c104 	addi	zero,r16,8964
8008bdf4:	8008c520 	cmpeqi	zero,r16,8980
8008bdf8:	8008bf54 	ori	zero,r16,8957
8008bdfc:	8008c554 	ori	zero,r16,8981
8008be00:	8008c520 	cmpeqi	zero,r16,8980
8008be04:	8008c548 	cmpgei	zero,r16,8981
8008be08:	8008c4e8 	cmpgeui	zero,r16,8979
8008be0c:	8008c4e8 	cmpgeui	zero,r16,8979
8008be10:	8008c4e8 	cmpgeui	zero,r16,8979
8008be14:	8008c4e8 	cmpgeui	zero,r16,8979
8008be18:	8008c4e8 	cmpgeui	zero,r16,8979
8008be1c:	8008c4e8 	cmpgeui	zero,r16,8979
8008be20:	8008c4e8 	cmpgeui	zero,r16,8979
8008be24:	8008c4e8 	cmpgeui	zero,r16,8979
8008be28:	8008c4e8 	cmpgeui	zero,r16,8979
8008be2c:	8008c520 	cmpeqi	zero,r16,8980
8008be30:	8008c520 	cmpeqi	zero,r16,8980
8008be34:	8008c520 	cmpeqi	zero,r16,8980
8008be38:	8008c520 	cmpeqi	zero,r16,8980
8008be3c:	8008c520 	cmpeqi	zero,r16,8980
8008be40:	8008c520 	cmpeqi	zero,r16,8980
8008be44:	8008c520 	cmpeqi	zero,r16,8980
8008be48:	8008c520 	cmpeqi	zero,r16,8980
8008be4c:	8008c520 	cmpeqi	zero,r16,8980
8008be50:	8008c520 	cmpeqi	zero,r16,8980
8008be54:	8008c484 	addi	zero,r16,8978
8008be58:	8008c520 	cmpeqi	zero,r16,8980
8008be5c:	8008c520 	cmpeqi	zero,r16,8980
8008be60:	8008c520 	cmpeqi	zero,r16,8980
8008be64:	8008c520 	cmpeqi	zero,r16,8980
8008be68:	8008c520 	cmpeqi	zero,r16,8980
8008be6c:	8008c520 	cmpeqi	zero,r16,8980
8008be70:	8008c520 	cmpeqi	zero,r16,8980
8008be74:	8008c520 	cmpeqi	zero,r16,8980
8008be78:	8008c520 	cmpeqi	zero,r16,8980
8008be7c:	8008c520 	cmpeqi	zero,r16,8980
8008be80:	8008c5fc 	xorhi	zero,r16,8983
8008be84:	8008c520 	cmpeqi	zero,r16,8980
8008be88:	8008c520 	cmpeqi	zero,r16,8980
8008be8c:	8008c520 	cmpeqi	zero,r16,8980
8008be90:	8008c520 	cmpeqi	zero,r16,8980
8008be94:	8008c520 	cmpeqi	zero,r16,8980
8008be98:	8008c594 	ori	zero,r16,8982
8008be9c:	8008c520 	cmpeqi	zero,r16,8980
8008bea0:	8008c520 	cmpeqi	zero,r16,8980
8008bea4:	8008c2c8 	cmpgei	zero,r16,8971
8008bea8:	8008c520 	cmpeqi	zero,r16,8980
8008beac:	8008c520 	cmpeqi	zero,r16,8980
8008beb0:	8008c520 	cmpeqi	zero,r16,8980
8008beb4:	8008c520 	cmpeqi	zero,r16,8980
8008beb8:	8008c520 	cmpeqi	zero,r16,8980
8008bebc:	8008c520 	cmpeqi	zero,r16,8980
8008bec0:	8008c520 	cmpeqi	zero,r16,8980
8008bec4:	8008c520 	cmpeqi	zero,r16,8980
8008bec8:	8008c520 	cmpeqi	zero,r16,8980
8008becc:	8008c520 	cmpeqi	zero,r16,8980
8008bed0:	8008c1b8 	rdprs	zero,r16,8966
8008bed4:	8008c364 	muli	zero,r16,8973
8008bed8:	8008c520 	cmpeqi	zero,r16,8980
8008bedc:	8008c520 	cmpeqi	zero,r16,8980
8008bee0:	8008c520 	cmpeqi	zero,r16,8980
8008bee4:	8008c358 	cmpnei	zero,r16,8973
8008bee8:	8008c364 	muli	zero,r16,8973
8008beec:	8008c520 	cmpeqi	zero,r16,8980
8008bef0:	8008c520 	cmpeqi	zero,r16,8980
8008bef4:	8008c348 	cmpgei	zero,r16,8973
8008bef8:	8008c520 	cmpeqi	zero,r16,8980
8008befc:	8008c30c 	andi	zero,r16,8972
8008bf00:	8008c114 	ori	zero,r16,8964
8008bf04:	8008bf60 	cmpeqi	zero,r16,8957
8008bf08:	8008c478 	rdprs	zero,r16,8977
8008bf0c:	8008c520 	cmpeqi	zero,r16,8980
8008bf10:	8008c42c 	andhi	zero,r16,8976
8008bf14:	8008c520 	cmpeqi	zero,r16,8980
8008bf18:	8008c084 	addi	zero,r16,8962
8008bf1c:	8008c520 	cmpeqi	zero,r16,8980
8008bf20:	8008c520 	cmpeqi	zero,r16,8980
8008bf24:	8008bfe0 	cmpeqi	zero,r16,8959
8008bf28:	dac02317 	ldw	r11,140(sp)
8008bf2c:	5ac00017 	ldw	r11,0(r11)
8008bf30:	dac02415 	stw	r11,144(sp)
8008bf34:	dac02317 	ldw	r11,140(sp)
8008bf38:	58800104 	addi	r2,r11,4
8008bf3c:	dac02417 	ldw	r11,144(sp)
8008bf40:	5802e90e 	bge	r11,zero,8008cae8 <___svfiprintf_internal_r+0xe84>
8008bf44:	dac02417 	ldw	r11,144(sp)
8008bf48:	d8802315 	stw	r2,140(sp)
8008bf4c:	02d7c83a 	sub	r11,zero,r11
8008bf50:	dac02415 	stw	r11,144(sp)
8008bf54:	94800114 	ori	r18,r18,4
8008bf58:	98c00007 	ldb	r3,0(r19)
8008bf5c:	003f9006 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008bf60:	00800c04 	movi	r2,48
8008bf64:	dac02317 	ldw	r11,140(sp)
8008bf68:	d8801d05 	stb	r2,116(sp)
8008bf6c:	00801e04 	movi	r2,120
8008bf70:	d8801d45 	stb	r2,117(sp)
8008bf74:	d8001d85 	stb	zero,118(sp)
8008bf78:	58c00104 	addi	r3,r11,4
8008bf7c:	5f000017 	ldw	fp,0(r11)
8008bf80:	0013883a 	mov	r9,zero
8008bf84:	90800094 	ori	r2,r18,2
8008bf88:	80032b16 	blt	r16,zero,8008cc38 <___svfiprintf_internal_r+0xfd4>
8008bf8c:	00bfdfc4 	movi	r2,-129
8008bf90:	90a4703a 	and	r18,r18,r2
8008bf94:	d8c02315 	stw	r3,140(sp)
8008bf98:	94800094 	ori	r18,r18,2
8008bf9c:	e002dc26 	beq	fp,zero,8008cb10 <___svfiprintf_internal_r+0xeac>
8008bfa0:	01200274 	movhi	r4,32777
8008bfa4:	211a7904 	addi	r4,r4,27108
8008bfa8:	0015883a 	mov	r10,zero
8008bfac:	d9002915 	stw	r4,164(sp)
8008bfb0:	00002306 	br	8008c040 <___svfiprintf_internal_r+0x3dc>
8008bfb4:	94800054 	ori	r18,r18,1
8008bfb8:	98c00007 	ldb	r3,0(r19)
8008bfbc:	003f7806 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008bfc0:	38803fcc 	andi	r2,r7,255
8008bfc4:	1080201c 	xori	r2,r2,128
8008bfc8:	10bfe004 	addi	r2,r2,-128
8008bfcc:	1002f31e 	bne	r2,zero,8008cb9c <___svfiprintf_internal_r+0xf38>
8008bfd0:	01000044 	movi	r4,1
8008bfd4:	01c00804 	movi	r7,32
8008bfd8:	98c00007 	ldb	r3,0(r19)
8008bfdc:	003f7006 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008bfe0:	21003fcc 	andi	r4,r4,255
8008bfe4:	2003aa1e 	bne	r4,zero,8008ce90 <___svfiprintf_internal_r+0x122c>
8008bfe8:	00a00274 	movhi	r2,32777
8008bfec:	109a7904 	addi	r2,r2,27108
8008bff0:	d8802915 	stw	r2,164(sp)
8008bff4:	9080080c 	andi	r2,r18,32
8008bff8:	1000ba26 	beq	r2,zero,8008c2e4 <___svfiprintf_internal_r+0x680>
8008bffc:	dac02317 	ldw	r11,140(sp)
8008c000:	5f000017 	ldw	fp,0(r11)
8008c004:	5a400117 	ldw	r9,4(r11)
8008c008:	5ac00204 	addi	r11,r11,8
8008c00c:	dac02315 	stw	r11,140(sp)
8008c010:	9080004c 	andi	r2,r18,1
8008c014:	10029026 	beq	r2,zero,8008ca58 <___svfiprintf_internal_r+0xdf4>
8008c018:	e244b03a 	or	r2,fp,r9
8008c01c:	1002d41e 	bne	r2,zero,8008cb70 <___svfiprintf_internal_r+0xf0c>
8008c020:	d8001d85 	stb	zero,118(sp)
8008c024:	80030b16 	blt	r16,zero,8008cc54 <___svfiprintf_internal_r+0xff0>
8008c028:	00bfdfc4 	movi	r2,-129
8008c02c:	90a4703a 	and	r18,r18,r2
8008c030:	0015883a 	mov	r10,zero
8008c034:	80002426 	beq	r16,zero,8008c0c8 <___svfiprintf_internal_r+0x464>
8008c038:	0039883a 	mov	fp,zero
8008c03c:	0013883a 	mov	r9,zero
8008c040:	d9002917 	ldw	r4,164(sp)
8008c044:	dc401a04 	addi	r17,sp,104
8008c048:	e08003cc 	andi	r2,fp,15
8008c04c:	4806973a 	slli	r3,r9,28
8008c050:	2085883a 	add	r2,r4,r2
8008c054:	e038d13a 	srli	fp,fp,4
8008c058:	10800003 	ldbu	r2,0(r2)
8008c05c:	4812d13a 	srli	r9,r9,4
8008c060:	8c7fffc4 	addi	r17,r17,-1
8008c064:	1f38b03a 	or	fp,r3,fp
8008c068:	88800005 	stb	r2,0(r17)
8008c06c:	e244b03a 	or	r2,fp,r9
8008c070:	103ff51e 	bne	r2,zero,8008c048 <___svfiprintf_internal_r+0x3e4>
8008c074:	dac01e17 	ldw	r11,120(sp)
8008c078:	5c57c83a 	sub	r11,r11,r17
8008c07c:	dac02115 	stw	r11,132(sp)
8008c080:	00001406 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008c084:	21003fcc 	andi	r4,r4,255
8008c088:	2003741e 	bne	r4,zero,8008ce5c <___svfiprintf_internal_r+0x11f8>
8008c08c:	9080080c 	andi	r2,r18,32
8008c090:	10014526 	beq	r2,zero,8008c5a8 <___svfiprintf_internal_r+0x944>
8008c094:	dac02317 	ldw	r11,140(sp)
8008c098:	d8001d85 	stb	zero,118(sp)
8008c09c:	58c00204 	addi	r3,r11,8
8008c0a0:	5f000017 	ldw	fp,0(r11)
8008c0a4:	5a400117 	ldw	r9,4(r11)
8008c0a8:	8002d916 	blt	r16,zero,8008cc10 <___svfiprintf_internal_r+0xfac>
8008c0ac:	013fdfc4 	movi	r4,-129
8008c0b0:	e244b03a 	or	r2,fp,r9
8008c0b4:	d8c02315 	stw	r3,140(sp)
8008c0b8:	9124703a 	and	r18,r18,r4
8008c0bc:	0015883a 	mov	r10,zero
8008c0c0:	1000b91e 	bne	r2,zero,8008c3a8 <___svfiprintf_internal_r+0x744>
8008c0c4:	8002e61e 	bne	r16,zero,8008cc60 <___svfiprintf_internal_r+0xffc>
8008c0c8:	0021883a 	mov	r16,zero
8008c0cc:	d8002115 	stw	zero,132(sp)
8008c0d0:	dc401a04 	addi	r17,sp,104
8008c0d4:	d8c02117 	ldw	r3,132(sp)
8008c0d8:	dc002015 	stw	r16,128(sp)
8008c0dc:	80c0010e 	bge	r16,r3,8008c0e4 <___svfiprintf_internal_r+0x480>
8008c0e0:	d8c02015 	stw	r3,128(sp)
8008c0e4:	52803fcc 	andi	r10,r10,255
8008c0e8:	5280201c 	xori	r10,r10,128
8008c0ec:	52bfe004 	addi	r10,r10,-128
8008c0f0:	50003c26 	beq	r10,zero,8008c1e4 <___svfiprintf_internal_r+0x580>
8008c0f4:	dac02017 	ldw	r11,128(sp)
8008c0f8:	5ac00044 	addi	r11,r11,1
8008c0fc:	dac02015 	stw	r11,128(sp)
8008c100:	00003806 	br	8008c1e4 <___svfiprintf_internal_r+0x580>
8008c104:	01000044 	movi	r4,1
8008c108:	01c00ac4 	movi	r7,43
8008c10c:	98c00007 	ldb	r3,0(r19)
8008c110:	003f2306 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008c114:	21003fcc 	andi	r4,r4,255
8008c118:	2003481e 	bne	r4,zero,8008ce3c <___svfiprintf_internal_r+0x11d8>
8008c11c:	9080080c 	andi	r2,r18,32
8008c120:	10013b26 	beq	r2,zero,8008c610 <___svfiprintf_internal_r+0x9ac>
8008c124:	dac02317 	ldw	r11,140(sp)
8008c128:	d8001d85 	stb	zero,118(sp)
8008c12c:	58800204 	addi	r2,r11,8
8008c130:	5f000017 	ldw	fp,0(r11)
8008c134:	5a400117 	ldw	r9,4(r11)
8008c138:	8002a816 	blt	r16,zero,8008cbdc <___svfiprintf_internal_r+0xf78>
8008c13c:	013fdfc4 	movi	r4,-129
8008c140:	e246b03a 	or	r3,fp,r9
8008c144:	d8802315 	stw	r2,140(sp)
8008c148:	9124703a 	and	r18,r18,r4
8008c14c:	18013c26 	beq	r3,zero,8008c640 <___svfiprintf_internal_r+0x9dc>
8008c150:	0015883a 	mov	r10,zero
8008c154:	dc401a04 	addi	r17,sp,104
8008c158:	e006d0fa 	srli	r3,fp,3
8008c15c:	4808977a 	slli	r4,r9,29
8008c160:	4812d0fa 	srli	r9,r9,3
8008c164:	e70001cc 	andi	fp,fp,7
8008c168:	e0800c04 	addi	r2,fp,48
8008c16c:	8c7fffc4 	addi	r17,r17,-1
8008c170:	20f8b03a 	or	fp,r4,r3
8008c174:	88800005 	stb	r2,0(r17)
8008c178:	e246b03a 	or	r3,fp,r9
8008c17c:	183ff61e 	bne	r3,zero,8008c158 <___svfiprintf_internal_r+0x4f4>
8008c180:	90c0004c 	andi	r3,r18,1
8008c184:	1800a526 	beq	r3,zero,8008c41c <___svfiprintf_internal_r+0x7b8>
8008c188:	10803fcc 	andi	r2,r2,255
8008c18c:	1080201c 	xori	r2,r2,128
8008c190:	10bfe004 	addi	r2,r2,-128
8008c194:	00c00c04 	movi	r3,48
8008c198:	10ffb626 	beq	r2,r3,8008c074 <___svfiprintf_internal_r+0x410>
8008c19c:	88ffffc5 	stb	r3,-1(r17)
8008c1a0:	d8c01e17 	ldw	r3,120(sp)
8008c1a4:	88bfffc4 	addi	r2,r17,-1
8008c1a8:	1023883a 	mov	r17,r2
8008c1ac:	1887c83a 	sub	r3,r3,r2
8008c1b0:	d8c02115 	stw	r3,132(sp)
8008c1b4:	003fc706 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008c1b8:	dac02317 	ldw	r11,140(sp)
8008c1bc:	00c00044 	movi	r3,1
8008c1c0:	d8c02015 	stw	r3,128(sp)
8008c1c4:	58800017 	ldw	r2,0(r11)
8008c1c8:	5ac00104 	addi	r11,r11,4
8008c1cc:	d8001d85 	stb	zero,118(sp)
8008c1d0:	d8801005 	stb	r2,64(sp)
8008c1d4:	dac02315 	stw	r11,140(sp)
8008c1d8:	d8c02115 	stw	r3,132(sp)
8008c1dc:	dc401004 	addi	r17,sp,64
8008c1e0:	0021883a 	mov	r16,zero
8008c1e4:	90c0008c 	andi	r3,r18,2
8008c1e8:	d8c02215 	stw	r3,136(sp)
8008c1ec:	18000326 	beq	r3,zero,8008c1fc <___svfiprintf_internal_r+0x598>
8008c1f0:	dac02017 	ldw	r11,128(sp)
8008c1f4:	5ac00084 	addi	r11,r11,2
8008c1f8:	dac02015 	stw	r11,128(sp)
8008c1fc:	90c0210c 	andi	r3,r18,132
8008c200:	d8c02615 	stw	r3,152(sp)
8008c204:	1801131e 	bne	r3,zero,8008c654 <___svfiprintf_internal_r+0x9f0>
8008c208:	dac02417 	ldw	r11,144(sp)
8008c20c:	d8c02017 	ldw	r3,128(sp)
8008c210:	58f9c83a 	sub	fp,r11,r3
8008c214:	07010f0e 	bge	zero,fp,8008c654 <___svfiprintf_internal_r+0x9f0>
8008c218:	02400404 	movi	r9,16
8008c21c:	d8c01c17 	ldw	r3,112(sp)
8008c220:	d8801b17 	ldw	r2,108(sp)
8008c224:	4f02d60e 	bge	r9,fp,8008cd80 <___svfiprintf_internal_r+0x111c>
8008c228:	01600274 	movhi	r5,32777
8008c22c:	295ae504 	addi	r5,r5,27540
8008c230:	d9402815 	stw	r5,160(sp)
8008c234:	028001c4 	movi	r10,7
8008c238:	00000306 	br	8008c248 <___svfiprintf_internal_r+0x5e4>
8008c23c:	e73ffc04 	addi	fp,fp,-16
8008c240:	42000204 	addi	r8,r8,8
8008c244:	4f00150e 	bge	r9,fp,8008c29c <___svfiprintf_internal_r+0x638>
8008c248:	18c00404 	addi	r3,r3,16
8008c24c:	10800044 	addi	r2,r2,1
8008c250:	45800015 	stw	r22,0(r8)
8008c254:	42400115 	stw	r9,4(r8)
8008c258:	d8c01c15 	stw	r3,112(sp)
8008c25c:	d8801b15 	stw	r2,108(sp)
8008c260:	50bff60e 	bge	r10,r2,8008c23c <___svfiprintf_internal_r+0x5d8>
8008c264:	d9801a04 	addi	r6,sp,104
8008c268:	b80b883a 	mov	r5,r23
8008c26c:	a809883a 	mov	r4,r21
8008c270:	da402c15 	stw	r9,176(sp)
8008c274:	da802d15 	stw	r10,180(sp)
8008c278:	008ba940 	call	8008ba94 <__ssprint_r>
8008c27c:	da402c17 	ldw	r9,176(sp)
8008c280:	da802d17 	ldw	r10,180(sp)
8008c284:	1001851e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008c288:	e73ffc04 	addi	fp,fp,-16
8008c28c:	d8c01c17 	ldw	r3,112(sp)
8008c290:	d8801b17 	ldw	r2,108(sp)
8008c294:	d811883a 	mov	r8,sp
8008c298:	4f3feb16 	blt	r9,fp,8008c248 <___svfiprintf_internal_r+0x5e4>
8008c29c:	dac02817 	ldw	r11,160(sp)
8008c2a0:	e0c7883a 	add	r3,fp,r3
8008c2a4:	10800044 	addi	r2,r2,1
8008c2a8:	42c00015 	stw	r11,0(r8)
8008c2ac:	47000115 	stw	fp,4(r8)
8008c2b0:	d8c01c15 	stw	r3,112(sp)
8008c2b4:	d8801b15 	stw	r2,108(sp)
8008c2b8:	010001c4 	movi	r4,7
8008c2bc:	2081ee16 	blt	r4,r2,8008ca78 <___svfiprintf_internal_r+0xe14>
8008c2c0:	42000204 	addi	r8,r8,8
8008c2c4:	0000e506 	br	8008c65c <___svfiprintf_internal_r+0x9f8>
8008c2c8:	21003fcc 	andi	r4,r4,255
8008c2cc:	2002dd1e 	bne	r4,zero,8008ce44 <___svfiprintf_internal_r+0x11e0>
8008c2d0:	00a00274 	movhi	r2,32777
8008c2d4:	109a7404 	addi	r2,r2,27088
8008c2d8:	d8802915 	stw	r2,164(sp)
8008c2dc:	9080080c 	andi	r2,r18,32
8008c2e0:	103f461e 	bne	r2,zero,8008bffc <___svfiprintf_internal_r+0x398>
8008c2e4:	9080040c 	andi	r2,r18,16
8008c2e8:	10022e1e 	bne	r2,zero,8008cba4 <___svfiprintf_internal_r+0xf40>
8008c2ec:	9080100c 	andi	r2,r18,64
8008c2f0:	dac02317 	ldw	r11,140(sp)
8008c2f4:	10027326 	beq	r2,zero,8008ccc4 <___svfiprintf_internal_r+0x1060>
8008c2f8:	5f00000b 	ldhu	fp,0(r11)
8008c2fc:	5ac00104 	addi	r11,r11,4
8008c300:	0013883a 	mov	r9,zero
8008c304:	dac02315 	stw	r11,140(sp)
8008c308:	003f4106 	br	8008c010 <___svfiprintf_internal_r+0x3ac>
8008c30c:	21003fcc 	andi	r4,r4,255
8008c310:	2002e11e 	bne	r4,zero,8008ce98 <___svfiprintf_internal_r+0x1234>
8008c314:	9080080c 	andi	r2,r18,32
8008c318:	1002011e 	bne	r2,zero,8008cb20 <___svfiprintf_internal_r+0xebc>
8008c31c:	9080040c 	andi	r2,r18,16
8008c320:	10023e1e 	bne	r2,zero,8008cc1c <___svfiprintf_internal_r+0xfb8>
8008c324:	9480100c 	andi	r18,r18,64
8008c328:	90023c26 	beq	r18,zero,8008cc1c <___svfiprintf_internal_r+0xfb8>
8008c32c:	dac02317 	ldw	r11,140(sp)
8008c330:	58800017 	ldw	r2,0(r11)
8008c334:	5ac00104 	addi	r11,r11,4
8008c338:	dac02315 	stw	r11,140(sp)
8008c33c:	dac02517 	ldw	r11,148(sp)
8008c340:	12c0000d 	sth	r11,0(r2)
8008c344:	003e6e06 	br	8008bd00 <___svfiprintf_internal_r+0x9c>
8008c348:	98c00007 	ldb	r3,0(r19)
8008c34c:	1a422926 	beq	r3,r9,8008cbf4 <___svfiprintf_internal_r+0xf90>
8008c350:	94800414 	ori	r18,r18,16
8008c354:	003e9206 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008c358:	94801014 	ori	r18,r18,64
8008c35c:	98c00007 	ldb	r3,0(r19)
8008c360:	003e8f06 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008c364:	21003fcc 	andi	r4,r4,255
8008c368:	2002c71e 	bne	r4,zero,8008ce88 <___svfiprintf_internal_r+0x1224>
8008c36c:	9080080c 	andi	r2,r18,32
8008c370:	10004926 	beq	r2,zero,8008c498 <___svfiprintf_internal_r+0x834>
8008c374:	dac02317 	ldw	r11,140(sp)
8008c378:	58800117 	ldw	r2,4(r11)
8008c37c:	5f000017 	ldw	fp,0(r11)
8008c380:	5ac00204 	addi	r11,r11,8
8008c384:	dac02315 	stw	r11,140(sp)
8008c388:	1013883a 	mov	r9,r2
8008c38c:	10004b16 	blt	r2,zero,8008c4bc <___svfiprintf_internal_r+0x858>
8008c390:	da801d83 	ldbu	r10,118(sp)
8008c394:	8001cb16 	blt	r16,zero,8008cac4 <___svfiprintf_internal_r+0xe60>
8008c398:	00ffdfc4 	movi	r3,-129
8008c39c:	e244b03a 	or	r2,fp,r9
8008c3a0:	90e4703a 	and	r18,r18,r3
8008c3a4:	103f4726 	beq	r2,zero,8008c0c4 <___svfiprintf_internal_r+0x460>
8008c3a8:	48008c26 	beq	r9,zero,8008c5dc <___svfiprintf_internal_r+0x978>
8008c3ac:	dc802015 	stw	r18,128(sp)
8008c3b0:	dc002115 	stw	r16,132(sp)
8008c3b4:	dc401a04 	addi	r17,sp,104
8008c3b8:	e021883a 	mov	r16,fp
8008c3bc:	da002215 	stw	r8,136(sp)
8008c3c0:	5039883a 	mov	fp,r10
8008c3c4:	4825883a 	mov	r18,r9
8008c3c8:	8009883a 	mov	r4,r16
8008c3cc:	900b883a 	mov	r5,r18
8008c3d0:	01800284 	movi	r6,10
8008c3d4:	000f883a 	mov	r7,zero
8008c3d8:	008f3940 	call	8008f394 <__umoddi3>
8008c3dc:	10800c04 	addi	r2,r2,48
8008c3e0:	8c7fffc4 	addi	r17,r17,-1
8008c3e4:	8009883a 	mov	r4,r16
8008c3e8:	900b883a 	mov	r5,r18
8008c3ec:	88800005 	stb	r2,0(r17)
8008c3f0:	01800284 	movi	r6,10
8008c3f4:	000f883a 	mov	r7,zero
8008c3f8:	008ee1c0 	call	8008ee1c <__udivdi3>
8008c3fc:	1021883a 	mov	r16,r2
8008c400:	10c4b03a 	or	r2,r2,r3
8008c404:	1825883a 	mov	r18,r3
8008c408:	103fef1e 	bne	r2,zero,8008c3c8 <___svfiprintf_internal_r+0x764>
8008c40c:	dc802017 	ldw	r18,128(sp)
8008c410:	dc002117 	ldw	r16,132(sp)
8008c414:	da002217 	ldw	r8,136(sp)
8008c418:	e015883a 	mov	r10,fp
8008c41c:	d8c01e17 	ldw	r3,120(sp)
8008c420:	1c47c83a 	sub	r3,r3,r17
8008c424:	d8c02115 	stw	r3,132(sp)
8008c428:	003f2a06 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008c42c:	dac02317 	ldw	r11,140(sp)
8008c430:	d8001d85 	stb	zero,118(sp)
8008c434:	5c400017 	ldw	r17,0(r11)
8008c438:	5f000104 	addi	fp,r11,4
8008c43c:	88022f26 	beq	r17,zero,8008ccfc <___svfiprintf_internal_r+0x1098>
8008c440:	80022516 	blt	r16,zero,8008ccd8 <___svfiprintf_internal_r+0x1074>
8008c444:	800d883a 	mov	r6,r16
8008c448:	000b883a 	mov	r5,zero
8008c44c:	8809883a 	mov	r4,r17
8008c450:	da002c15 	stw	r8,176(sp)
8008c454:	0089bb40 	call	80089bb4 <memchr>
8008c458:	da002c17 	ldw	r8,176(sp)
8008c45c:	10026426 	beq	r2,zero,8008cdf0 <___svfiprintf_internal_r+0x118c>
8008c460:	1445c83a 	sub	r2,r2,r17
8008c464:	d8802115 	stw	r2,132(sp)
8008c468:	da801d83 	ldbu	r10,118(sp)
8008c46c:	df002315 	stw	fp,140(sp)
8008c470:	0021883a 	mov	r16,zero
8008c474:	003f1706 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008c478:	94800814 	ori	r18,r18,32
8008c47c:	98c00007 	ldb	r3,0(r19)
8008c480:	003e4706 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008c484:	21003fcc 	andi	r4,r4,255
8008c488:	2002701e 	bne	r4,zero,8008ce4c <___svfiprintf_internal_r+0x11e8>
8008c48c:	94800414 	ori	r18,r18,16
8008c490:	9080080c 	andi	r2,r18,32
8008c494:	103fb71e 	bne	r2,zero,8008c374 <___svfiprintf_internal_r+0x710>
8008c498:	9080040c 	andi	r2,r18,16
8008c49c:	1001ab26 	beq	r2,zero,8008cb4c <___svfiprintf_internal_r+0xee8>
8008c4a0:	dac02317 	ldw	r11,140(sp)
8008c4a4:	5f000017 	ldw	fp,0(r11)
8008c4a8:	5ac00104 	addi	r11,r11,4
8008c4ac:	dac02315 	stw	r11,140(sp)
8008c4b0:	e013d7fa 	srai	r9,fp,31
8008c4b4:	4805883a 	mov	r2,r9
8008c4b8:	103fb50e 	bge	r2,zero,8008c390 <___svfiprintf_internal_r+0x72c>
8008c4bc:	0739c83a 	sub	fp,zero,fp
8008c4c0:	02800b44 	movi	r10,45
8008c4c4:	e004c03a 	cmpne	r2,fp,zero
8008c4c8:	0253c83a 	sub	r9,zero,r9
8008c4cc:	da801d85 	stb	r10,118(sp)
8008c4d0:	4893c83a 	sub	r9,r9,r2
8008c4d4:	80023016 	blt	r16,zero,8008cd98 <___svfiprintf_internal_r+0x1134>
8008c4d8:	00bfdfc4 	movi	r2,-129
8008c4dc:	90a4703a 	and	r18,r18,r2
8008c4e0:	483fb21e 	bne	r9,zero,8008c3ac <___svfiprintf_internal_r+0x748>
8008c4e4:	00003d06 	br	8008c5dc <___svfiprintf_internal_r+0x978>
8008c4e8:	9817883a 	mov	r11,r19
8008c4ec:	d8002415 	stw	zero,144(sp)
8008c4f0:	18bff404 	addi	r2,r3,-48
8008c4f4:	0019883a 	mov	r12,zero
8008c4f8:	58c00007 	ldb	r3,0(r11)
8008c4fc:	630002a4 	muli	r12,r12,10
8008c500:	9cc00044 	addi	r19,r19,1
8008c504:	9817883a 	mov	r11,r19
8008c508:	1319883a 	add	r12,r2,r12
8008c50c:	18bff404 	addi	r2,r3,-48
8008c510:	30bff92e 	bgeu	r6,r2,8008c4f8 <___svfiprintf_internal_r+0x894>
8008c514:	db002415 	stw	r12,144(sp)
8008c518:	18bff804 	addi	r2,r3,-32
8008c51c:	28be232e 	bgeu	r5,r2,8008bdac <___svfiprintf_internal_r+0x148>
8008c520:	21003fcc 	andi	r4,r4,255
8008c524:	20024b1e 	bne	r4,zero,8008ce54 <___svfiprintf_internal_r+0x11f0>
8008c528:	1800d626 	beq	r3,zero,8008c884 <___svfiprintf_internal_r+0xc20>
8008c52c:	02c00044 	movi	r11,1
8008c530:	dac02015 	stw	r11,128(sp)
8008c534:	d8c01005 	stb	r3,64(sp)
8008c538:	d8001d85 	stb	zero,118(sp)
8008c53c:	dac02115 	stw	r11,132(sp)
8008c540:	dc401004 	addi	r17,sp,64
8008c544:	003f2606 	br	8008c1e0 <___svfiprintf_internal_r+0x57c>
8008c548:	94802014 	ori	r18,r18,128
8008c54c:	98c00007 	ldb	r3,0(r19)
8008c550:	003e1306 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008c554:	98c00007 	ldb	r3,0(r19)
8008c558:	9ac00044 	addi	r11,r19,1
8008c55c:	1a822b26 	beq	r3,r10,8008ce0c <___svfiprintf_internal_r+0x11a8>
8008c560:	18bff404 	addi	r2,r3,-48
8008c564:	0021883a 	mov	r16,zero
8008c568:	30821e36 	bltu	r6,r2,8008cde4 <___svfiprintf_internal_r+0x1180>
8008c56c:	58c00007 	ldb	r3,0(r11)
8008c570:	840002a4 	muli	r16,r16,10
8008c574:	5cc00044 	addi	r19,r11,1
8008c578:	9817883a 	mov	r11,r19
8008c57c:	80a1883a 	add	r16,r16,r2
8008c580:	18bff404 	addi	r2,r3,-48
8008c584:	30bff92e 	bgeu	r6,r2,8008c56c <___svfiprintf_internal_r+0x908>
8008c588:	803e060e 	bge	r16,zero,8008bda4 <___svfiprintf_internal_r+0x140>
8008c58c:	043fffc4 	movi	r16,-1
8008c590:	003e0406 	br	8008bda4 <___svfiprintf_internal_r+0x140>
8008c594:	21003fcc 	andi	r4,r4,255
8008c598:	2002371e 	bne	r4,zero,8008ce78 <___svfiprintf_internal_r+0x1214>
8008c59c:	94800414 	ori	r18,r18,16
8008c5a0:	9080080c 	andi	r2,r18,32
8008c5a4:	103ebb1e 	bne	r2,zero,8008c094 <___svfiprintf_internal_r+0x430>
8008c5a8:	9080040c 	andi	r2,r18,16
8008c5ac:	10013b26 	beq	r2,zero,8008ca9c <___svfiprintf_internal_r+0xe38>
8008c5b0:	dac02317 	ldw	r11,140(sp)
8008c5b4:	d8001d85 	stb	zero,118(sp)
8008c5b8:	0013883a 	mov	r9,zero
8008c5bc:	58800104 	addi	r2,r11,4
8008c5c0:	5f000017 	ldw	fp,0(r11)
8008c5c4:	80013d16 	blt	r16,zero,8008cabc <___svfiprintf_internal_r+0xe58>
8008c5c8:	00ffdfc4 	movi	r3,-129
8008c5cc:	d8802315 	stw	r2,140(sp)
8008c5d0:	90e4703a 	and	r18,r18,r3
8008c5d4:	0015883a 	mov	r10,zero
8008c5d8:	e03eba26 	beq	fp,zero,8008c0c4 <___svfiprintf_internal_r+0x460>
8008c5dc:	00800244 	movi	r2,9
8008c5e0:	173f7236 	bltu	r2,fp,8008c3ac <___svfiprintf_internal_r+0x748>
8008c5e4:	dac02b17 	ldw	r11,172(sp)
8008c5e8:	e7000c04 	addi	fp,fp,48
8008c5ec:	df0019c5 	stb	fp,103(sp)
8008c5f0:	dac02115 	stw	r11,132(sp)
8008c5f4:	dc4019c4 	addi	r17,sp,103
8008c5f8:	003eb606 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008c5fc:	21003fcc 	andi	r4,r4,255
8008c600:	20021f1e 	bne	r4,zero,8008ce80 <___svfiprintf_internal_r+0x121c>
8008c604:	94800414 	ori	r18,r18,16
8008c608:	9080080c 	andi	r2,r18,32
8008c60c:	103ec51e 	bne	r2,zero,8008c124 <___svfiprintf_internal_r+0x4c0>
8008c610:	9080040c 	andi	r2,r18,16
8008c614:	10016926 	beq	r2,zero,8008cbbc <___svfiprintf_internal_r+0xf58>
8008c618:	dac02317 	ldw	r11,140(sp)
8008c61c:	d8001d85 	stb	zero,118(sp)
8008c620:	0013883a 	mov	r9,zero
8008c624:	58800104 	addi	r2,r11,4
8008c628:	5f000017 	ldw	fp,0(r11)
8008c62c:	80016b16 	blt	r16,zero,8008cbdc <___svfiprintf_internal_r+0xf78>
8008c630:	00ffdfc4 	movi	r3,-129
8008c634:	d8802315 	stw	r2,140(sp)
8008c638:	90e4703a 	and	r18,r18,r3
8008c63c:	e03ec41e 	bne	fp,zero,8008c150 <___svfiprintf_internal_r+0x4ec>
8008c640:	0015883a 	mov	r10,zero
8008c644:	8001c226 	beq	r16,zero,8008cd50 <___svfiprintf_internal_r+0x10ec>
8008c648:	0039883a 	mov	fp,zero
8008c64c:	0013883a 	mov	r9,zero
8008c650:	003ec006 	br	8008c154 <___svfiprintf_internal_r+0x4f0>
8008c654:	d8c01c17 	ldw	r3,112(sp)
8008c658:	d8801b17 	ldw	r2,108(sp)
8008c65c:	d9001d87 	ldb	r4,118(sp)
8008c660:	20000b26 	beq	r4,zero,8008c690 <___svfiprintf_internal_r+0xa2c>
8008c664:	d9001d84 	addi	r4,sp,118
8008c668:	18c00044 	addi	r3,r3,1
8008c66c:	10800044 	addi	r2,r2,1
8008c670:	41000015 	stw	r4,0(r8)
8008c674:	01000044 	movi	r4,1
8008c678:	41000115 	stw	r4,4(r8)
8008c67c:	d8c01c15 	stw	r3,112(sp)
8008c680:	d8801b15 	stw	r2,108(sp)
8008c684:	010001c4 	movi	r4,7
8008c688:	2080e116 	blt	r4,r2,8008ca10 <___svfiprintf_internal_r+0xdac>
8008c68c:	42000204 	addi	r8,r8,8
8008c690:	dac02217 	ldw	r11,136(sp)
8008c694:	58000b26 	beq	r11,zero,8008c6c4 <___svfiprintf_internal_r+0xa60>
8008c698:	d9001d04 	addi	r4,sp,116
8008c69c:	18c00084 	addi	r3,r3,2
8008c6a0:	10800044 	addi	r2,r2,1
8008c6a4:	41000015 	stw	r4,0(r8)
8008c6a8:	01000084 	movi	r4,2
8008c6ac:	41000115 	stw	r4,4(r8)
8008c6b0:	d8c01c15 	stw	r3,112(sp)
8008c6b4:	d8801b15 	stw	r2,108(sp)
8008c6b8:	010001c4 	movi	r4,7
8008c6bc:	2080dd16 	blt	r4,r2,8008ca34 <___svfiprintf_internal_r+0xdd0>
8008c6c0:	42000204 	addi	r8,r8,8
8008c6c4:	dac02617 	ldw	r11,152(sp)
8008c6c8:	01002004 	movi	r4,128
8008c6cc:	59008426 	beq	r11,r4,8008c8e0 <___svfiprintf_internal_r+0xc7c>
8008c6d0:	dac02117 	ldw	r11,132(sp)
8008c6d4:	82e1c83a 	sub	r16,r16,r11
8008c6d8:	0400270e 	bge	zero,r16,8008c778 <___svfiprintf_internal_r+0xb14>
8008c6dc:	01c00404 	movi	r7,16
8008c6e0:	3c016a0e 	bge	r7,r16,8008cc8c <___svfiprintf_internal_r+0x1028>
8008c6e4:	01600274 	movhi	r5,32777
8008c6e8:	295ae104 	addi	r5,r5,27524
8008c6ec:	d9402215 	stw	r5,136(sp)
8008c6f0:	070001c4 	movi	fp,7
8008c6f4:	00000306 	br	8008c704 <___svfiprintf_internal_r+0xaa0>
8008c6f8:	843ffc04 	addi	r16,r16,-16
8008c6fc:	42000204 	addi	r8,r8,8
8008c700:	3c00130e 	bge	r7,r16,8008c750 <___svfiprintf_internal_r+0xaec>
8008c704:	18c00404 	addi	r3,r3,16
8008c708:	10800044 	addi	r2,r2,1
8008c70c:	45000015 	stw	r20,0(r8)
8008c710:	41c00115 	stw	r7,4(r8)
8008c714:	d8c01c15 	stw	r3,112(sp)
8008c718:	d8801b15 	stw	r2,108(sp)
8008c71c:	e0bff60e 	bge	fp,r2,8008c6f8 <___svfiprintf_internal_r+0xa94>
8008c720:	d9801a04 	addi	r6,sp,104
8008c724:	b80b883a 	mov	r5,r23
8008c728:	a809883a 	mov	r4,r21
8008c72c:	d9c02c15 	stw	r7,176(sp)
8008c730:	008ba940 	call	8008ba94 <__ssprint_r>
8008c734:	d9c02c17 	ldw	r7,176(sp)
8008c738:	1000581e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008c73c:	843ffc04 	addi	r16,r16,-16
8008c740:	d8c01c17 	ldw	r3,112(sp)
8008c744:	d8801b17 	ldw	r2,108(sp)
8008c748:	d811883a 	mov	r8,sp
8008c74c:	3c3fed16 	blt	r7,r16,8008c704 <___svfiprintf_internal_r+0xaa0>
8008c750:	dac02217 	ldw	r11,136(sp)
8008c754:	1c07883a 	add	r3,r3,r16
8008c758:	10800044 	addi	r2,r2,1
8008c75c:	42c00015 	stw	r11,0(r8)
8008c760:	44000115 	stw	r16,4(r8)
8008c764:	d8c01c15 	stw	r3,112(sp)
8008c768:	d8801b15 	stw	r2,108(sp)
8008c76c:	010001c4 	movi	r4,7
8008c770:	20809e16 	blt	r4,r2,8008c9ec <___svfiprintf_internal_r+0xd88>
8008c774:	42000204 	addi	r8,r8,8
8008c778:	dac02117 	ldw	r11,132(sp)
8008c77c:	10800044 	addi	r2,r2,1
8008c780:	44400015 	stw	r17,0(r8)
8008c784:	58c7883a 	add	r3,r11,r3
8008c788:	42c00115 	stw	r11,4(r8)
8008c78c:	d8c01c15 	stw	r3,112(sp)
8008c790:	d8801b15 	stw	r2,108(sp)
8008c794:	010001c4 	movi	r4,7
8008c798:	20807f16 	blt	r4,r2,8008c998 <___svfiprintf_internal_r+0xd34>
8008c79c:	42000204 	addi	r8,r8,8
8008c7a0:	9480010c 	andi	r18,r18,4
8008c7a4:	90002926 	beq	r18,zero,8008c84c <___svfiprintf_internal_r+0xbe8>
8008c7a8:	dac02417 	ldw	r11,144(sp)
8008c7ac:	d8802017 	ldw	r2,128(sp)
8008c7b0:	58a1c83a 	sub	r16,r11,r2
8008c7b4:	0400250e 	bge	zero,r16,8008c84c <___svfiprintf_internal_r+0xbe8>
8008c7b8:	04400404 	movi	r17,16
8008c7bc:	d8801b17 	ldw	r2,108(sp)
8008c7c0:	8c017c0e 	bge	r17,r16,8008cdb4 <___svfiprintf_internal_r+0x1150>
8008c7c4:	01600274 	movhi	r5,32777
8008c7c8:	295ae504 	addi	r5,r5,27540
8008c7cc:	d9402815 	stw	r5,160(sp)
8008c7d0:	048001c4 	movi	r18,7
8008c7d4:	00000306 	br	8008c7e4 <___svfiprintf_internal_r+0xb80>
8008c7d8:	843ffc04 	addi	r16,r16,-16
8008c7dc:	42000204 	addi	r8,r8,8
8008c7e0:	8c00110e 	bge	r17,r16,8008c828 <___svfiprintf_internal_r+0xbc4>
8008c7e4:	18c00404 	addi	r3,r3,16
8008c7e8:	10800044 	addi	r2,r2,1
8008c7ec:	45800015 	stw	r22,0(r8)
8008c7f0:	44400115 	stw	r17,4(r8)
8008c7f4:	d8c01c15 	stw	r3,112(sp)
8008c7f8:	d8801b15 	stw	r2,108(sp)
8008c7fc:	90bff60e 	bge	r18,r2,8008c7d8 <___svfiprintf_internal_r+0xb74>
8008c800:	d9801a04 	addi	r6,sp,104
8008c804:	b80b883a 	mov	r5,r23
8008c808:	a809883a 	mov	r4,r21
8008c80c:	008ba940 	call	8008ba94 <__ssprint_r>
8008c810:	1000221e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008c814:	843ffc04 	addi	r16,r16,-16
8008c818:	d8c01c17 	ldw	r3,112(sp)
8008c81c:	d8801b17 	ldw	r2,108(sp)
8008c820:	d811883a 	mov	r8,sp
8008c824:	8c3fef16 	blt	r17,r16,8008c7e4 <___svfiprintf_internal_r+0xb80>
8008c828:	dac02817 	ldw	r11,160(sp)
8008c82c:	1c07883a 	add	r3,r3,r16
8008c830:	10800044 	addi	r2,r2,1
8008c834:	42c00015 	stw	r11,0(r8)
8008c838:	44000115 	stw	r16,4(r8)
8008c83c:	d8c01c15 	stw	r3,112(sp)
8008c840:	d8801b15 	stw	r2,108(sp)
8008c844:	010001c4 	movi	r4,7
8008c848:	2080aa16 	blt	r4,r2,8008caf4 <___svfiprintf_internal_r+0xe90>
8008c84c:	d8802417 	ldw	r2,144(sp)
8008c850:	dac02017 	ldw	r11,128(sp)
8008c854:	12c0010e 	bge	r2,r11,8008c85c <___svfiprintf_internal_r+0xbf8>
8008c858:	5805883a 	mov	r2,r11
8008c85c:	dac02517 	ldw	r11,148(sp)
8008c860:	5897883a 	add	r11,r11,r2
8008c864:	dac02515 	stw	r11,148(sp)
8008c868:	1800531e 	bne	r3,zero,8008c9b8 <___svfiprintf_internal_r+0xd54>
8008c86c:	98800007 	ldb	r2,0(r19)
8008c870:	d8001b15 	stw	zero,108(sp)
8008c874:	d811883a 	mov	r8,sp
8008c878:	103d231e 	bne	r2,zero,8008bd08 <___svfiprintf_internal_r+0xa4>
8008c87c:	9823883a 	mov	r17,r19
8008c880:	003d3906 	br	8008bd68 <___svfiprintf_internal_r+0x104>
8008c884:	d8801c17 	ldw	r2,112(sp)
8008c888:	10000426 	beq	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008c88c:	d9402717 	ldw	r5,156(sp)
8008c890:	d9002a17 	ldw	r4,168(sp)
8008c894:	d9801a04 	addi	r6,sp,104
8008c898:	008ba940 	call	8008ba94 <__ssprint_r>
8008c89c:	dac02717 	ldw	r11,156(sp)
8008c8a0:	d8802517 	ldw	r2,148(sp)
8008c8a4:	58c0030b 	ldhu	r3,12(r11)
8008c8a8:	18c0100c 	andi	r3,r3,64
8008c8ac:	1801381e 	bne	r3,zero,8008cd90 <___svfiprintf_internal_r+0x112c>
8008c8b0:	dfc03717 	ldw	ra,220(sp)
8008c8b4:	df003617 	ldw	fp,216(sp)
8008c8b8:	ddc03517 	ldw	r23,212(sp)
8008c8bc:	dd803417 	ldw	r22,208(sp)
8008c8c0:	dd403317 	ldw	r21,204(sp)
8008c8c4:	dd003217 	ldw	r20,200(sp)
8008c8c8:	dcc03117 	ldw	r19,196(sp)
8008c8cc:	dc803017 	ldw	r18,192(sp)
8008c8d0:	dc402f17 	ldw	r17,188(sp)
8008c8d4:	dc002e17 	ldw	r16,184(sp)
8008c8d8:	dec03804 	addi	sp,sp,224
8008c8dc:	f800283a 	ret
8008c8e0:	dac02417 	ldw	r11,144(sp)
8008c8e4:	d9002017 	ldw	r4,128(sp)
8008c8e8:	5939c83a 	sub	fp,r11,r4
8008c8ec:	073f780e 	bge	zero,fp,8008c6d0 <___svfiprintf_internal_r+0xa6c>
8008c8f0:	02400404 	movi	r9,16
8008c8f4:	4f01370e 	bge	r9,fp,8008cdd4 <___svfiprintf_internal_r+0x1170>
8008c8f8:	02e00274 	movhi	r11,32777
8008c8fc:	5adae104 	addi	r11,r11,27524
8008c900:	dac02215 	stw	r11,136(sp)
8008c904:	028001c4 	movi	r10,7
8008c908:	00000306 	br	8008c918 <___svfiprintf_internal_r+0xcb4>
8008c90c:	e73ffc04 	addi	fp,fp,-16
8008c910:	42000204 	addi	r8,r8,8
8008c914:	4f00150e 	bge	r9,fp,8008c96c <___svfiprintf_internal_r+0xd08>
8008c918:	18c00404 	addi	r3,r3,16
8008c91c:	10800044 	addi	r2,r2,1
8008c920:	45000015 	stw	r20,0(r8)
8008c924:	42400115 	stw	r9,4(r8)
8008c928:	d8c01c15 	stw	r3,112(sp)
8008c92c:	d8801b15 	stw	r2,108(sp)
8008c930:	50bff60e 	bge	r10,r2,8008c90c <___svfiprintf_internal_r+0xca8>
8008c934:	d9801a04 	addi	r6,sp,104
8008c938:	b80b883a 	mov	r5,r23
8008c93c:	a809883a 	mov	r4,r21
8008c940:	da402c15 	stw	r9,176(sp)
8008c944:	da802d15 	stw	r10,180(sp)
8008c948:	008ba940 	call	8008ba94 <__ssprint_r>
8008c94c:	da402c17 	ldw	r9,176(sp)
8008c950:	da802d17 	ldw	r10,180(sp)
8008c954:	103fd11e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008c958:	e73ffc04 	addi	fp,fp,-16
8008c95c:	d8c01c17 	ldw	r3,112(sp)
8008c960:	d8801b17 	ldw	r2,108(sp)
8008c964:	d811883a 	mov	r8,sp
8008c968:	4f3feb16 	blt	r9,fp,8008c918 <___svfiprintf_internal_r+0xcb4>
8008c96c:	dac02217 	ldw	r11,136(sp)
8008c970:	1f07883a 	add	r3,r3,fp
8008c974:	10800044 	addi	r2,r2,1
8008c978:	42c00015 	stw	r11,0(r8)
8008c97c:	47000115 	stw	fp,4(r8)
8008c980:	d8c01c15 	stw	r3,112(sp)
8008c984:	d8801b15 	stw	r2,108(sp)
8008c988:	010001c4 	movi	r4,7
8008c98c:	2080b616 	blt	r4,r2,8008cc68 <___svfiprintf_internal_r+0x1004>
8008c990:	42000204 	addi	r8,r8,8
8008c994:	003f4e06 	br	8008c6d0 <___svfiprintf_internal_r+0xa6c>
8008c998:	d9801a04 	addi	r6,sp,104
8008c99c:	b80b883a 	mov	r5,r23
8008c9a0:	a809883a 	mov	r4,r21
8008c9a4:	008ba940 	call	8008ba94 <__ssprint_r>
8008c9a8:	103fbc1e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008c9ac:	d8c01c17 	ldw	r3,112(sp)
8008c9b0:	d811883a 	mov	r8,sp
8008c9b4:	003f7a06 	br	8008c7a0 <___svfiprintf_internal_r+0xb3c>
8008c9b8:	d9801a04 	addi	r6,sp,104
8008c9bc:	b80b883a 	mov	r5,r23
8008c9c0:	a809883a 	mov	r4,r21
8008c9c4:	008ba940 	call	8008ba94 <__ssprint_r>
8008c9c8:	103fa826 	beq	r2,zero,8008c86c <___svfiprintf_internal_r+0xc08>
8008c9cc:	003fb306 	br	8008c89c <___svfiprintf_internal_r+0xc38>
8008c9d0:	d9801a04 	addi	r6,sp,104
8008c9d4:	b80b883a 	mov	r5,r23
8008c9d8:	a809883a 	mov	r4,r21
8008c9dc:	008ba940 	call	8008ba94 <__ssprint_r>
8008c9e0:	103fae1e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008c9e4:	d811883a 	mov	r8,sp
8008c9e8:	003cdc06 	br	8008bd5c <___svfiprintf_internal_r+0xf8>
8008c9ec:	d9801a04 	addi	r6,sp,104
8008c9f0:	b80b883a 	mov	r5,r23
8008c9f4:	a809883a 	mov	r4,r21
8008c9f8:	008ba940 	call	8008ba94 <__ssprint_r>
8008c9fc:	103fa71e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008ca00:	d8c01c17 	ldw	r3,112(sp)
8008ca04:	d8801b17 	ldw	r2,108(sp)
8008ca08:	d811883a 	mov	r8,sp
8008ca0c:	003f5a06 	br	8008c778 <___svfiprintf_internal_r+0xb14>
8008ca10:	d9801a04 	addi	r6,sp,104
8008ca14:	b80b883a 	mov	r5,r23
8008ca18:	a809883a 	mov	r4,r21
8008ca1c:	008ba940 	call	8008ba94 <__ssprint_r>
8008ca20:	103f9e1e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008ca24:	d8c01c17 	ldw	r3,112(sp)
8008ca28:	d8801b17 	ldw	r2,108(sp)
8008ca2c:	d811883a 	mov	r8,sp
8008ca30:	003f1706 	br	8008c690 <___svfiprintf_internal_r+0xa2c>
8008ca34:	d9801a04 	addi	r6,sp,104
8008ca38:	b80b883a 	mov	r5,r23
8008ca3c:	a809883a 	mov	r4,r21
8008ca40:	008ba940 	call	8008ba94 <__ssprint_r>
8008ca44:	103f951e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008ca48:	d8c01c17 	ldw	r3,112(sp)
8008ca4c:	d8801b17 	ldw	r2,108(sp)
8008ca50:	d811883a 	mov	r8,sp
8008ca54:	003f1b06 	br	8008c6c4 <___svfiprintf_internal_r+0xa60>
8008ca58:	d8001d85 	stb	zero,118(sp)
8008ca5c:	80007b16 	blt	r16,zero,8008cc4c <___svfiprintf_internal_r+0xfe8>
8008ca60:	00ffdfc4 	movi	r3,-129
8008ca64:	e244b03a 	or	r2,fp,r9
8008ca68:	90e4703a 	and	r18,r18,r3
8008ca6c:	103d7026 	beq	r2,zero,8008c030 <___svfiprintf_internal_r+0x3cc>
8008ca70:	0015883a 	mov	r10,zero
8008ca74:	003d7206 	br	8008c040 <___svfiprintf_internal_r+0x3dc>
8008ca78:	d9801a04 	addi	r6,sp,104
8008ca7c:	b80b883a 	mov	r5,r23
8008ca80:	a809883a 	mov	r4,r21
8008ca84:	008ba940 	call	8008ba94 <__ssprint_r>
8008ca88:	103f841e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008ca8c:	d8c01c17 	ldw	r3,112(sp)
8008ca90:	d8801b17 	ldw	r2,108(sp)
8008ca94:	d811883a 	mov	r8,sp
8008ca98:	003ef006 	br	8008c65c <___svfiprintf_internal_r+0x9f8>
8008ca9c:	9080100c 	andi	r2,r18,64
8008caa0:	d8001d85 	stb	zero,118(sp)
8008caa4:	dac02317 	ldw	r11,140(sp)
8008caa8:	10008126 	beq	r2,zero,8008ccb0 <___svfiprintf_internal_r+0x104c>
8008caac:	58800104 	addi	r2,r11,4
8008cab0:	5f00000b 	ldhu	fp,0(r11)
8008cab4:	0013883a 	mov	r9,zero
8008cab8:	803ec30e 	bge	r16,zero,8008c5c8 <___svfiprintf_internal_r+0x964>
8008cabc:	d8802315 	stw	r2,140(sp)
8008cac0:	0015883a 	mov	r10,zero
8008cac4:	e244b03a 	or	r2,fp,r9
8008cac8:	103e371e 	bne	r2,zero,8008c3a8 <___svfiprintf_internal_r+0x744>
8008cacc:	00800044 	movi	r2,1
8008cad0:	10803fcc 	andi	r2,r2,255
8008cad4:	00c00044 	movi	r3,1
8008cad8:	10c06126 	beq	r2,r3,8008cc60 <___svfiprintf_internal_r+0xffc>
8008cadc:	00c00084 	movi	r3,2
8008cae0:	10fd5526 	beq	r2,r3,8008c038 <___svfiprintf_internal_r+0x3d4>
8008cae4:	003ed806 	br	8008c648 <___svfiprintf_internal_r+0x9e4>
8008cae8:	d8802315 	stw	r2,140(sp)
8008caec:	98c00007 	ldb	r3,0(r19)
8008caf0:	003cab06 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008caf4:	d9801a04 	addi	r6,sp,104
8008caf8:	b80b883a 	mov	r5,r23
8008cafc:	a809883a 	mov	r4,r21
8008cb00:	008ba940 	call	8008ba94 <__ssprint_r>
8008cb04:	103f651e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008cb08:	d8c01c17 	ldw	r3,112(sp)
8008cb0c:	003f4f06 	br	8008c84c <___svfiprintf_internal_r+0xbe8>
8008cb10:	00a00274 	movhi	r2,32777
8008cb14:	109a7904 	addi	r2,r2,27108
8008cb18:	d8802915 	stw	r2,164(sp)
8008cb1c:	003d4406 	br	8008c030 <___svfiprintf_internal_r+0x3cc>
8008cb20:	dac02317 	ldw	r11,140(sp)
8008cb24:	58800017 	ldw	r2,0(r11)
8008cb28:	dac02517 	ldw	r11,148(sp)
8008cb2c:	5807d7fa 	srai	r3,r11,31
8008cb30:	dac02317 	ldw	r11,140(sp)
8008cb34:	10c00115 	stw	r3,4(r2)
8008cb38:	5ac00104 	addi	r11,r11,4
8008cb3c:	dac02315 	stw	r11,140(sp)
8008cb40:	dac02517 	ldw	r11,148(sp)
8008cb44:	12c00015 	stw	r11,0(r2)
8008cb48:	003c6d06 	br	8008bd00 <___svfiprintf_internal_r+0x9c>
8008cb4c:	9080100c 	andi	r2,r18,64
8008cb50:	dac02317 	ldw	r11,140(sp)
8008cb54:	103e5326 	beq	r2,zero,8008c4a4 <___svfiprintf_internal_r+0x840>
8008cb58:	5f00000f 	ldh	fp,0(r11)
8008cb5c:	5ac00104 	addi	r11,r11,4
8008cb60:	dac02315 	stw	r11,140(sp)
8008cb64:	e013d7fa 	srai	r9,fp,31
8008cb68:	4805883a 	mov	r2,r9
8008cb6c:	003e0706 	br	8008c38c <___svfiprintf_internal_r+0x728>
8008cb70:	00800c04 	movi	r2,48
8008cb74:	d8801d05 	stb	r2,116(sp)
8008cb78:	d8c01d45 	stb	r3,117(sp)
8008cb7c:	d8001d85 	stb	zero,118(sp)
8008cb80:	90800094 	ori	r2,r18,2
8008cb84:	80008f16 	blt	r16,zero,8008cdc4 <___svfiprintf_internal_r+0x1160>
8008cb88:	00bfdfc4 	movi	r2,-129
8008cb8c:	90a4703a 	and	r18,r18,r2
8008cb90:	94800094 	ori	r18,r18,2
8008cb94:	0015883a 	mov	r10,zero
8008cb98:	003d2906 	br	8008c040 <___svfiprintf_internal_r+0x3dc>
8008cb9c:	98c00007 	ldb	r3,0(r19)
8008cba0:	003c7f06 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008cba4:	dac02317 	ldw	r11,140(sp)
8008cba8:	0013883a 	mov	r9,zero
8008cbac:	5f000017 	ldw	fp,0(r11)
8008cbb0:	5ac00104 	addi	r11,r11,4
8008cbb4:	dac02315 	stw	r11,140(sp)
8008cbb8:	003d1506 	br	8008c010 <___svfiprintf_internal_r+0x3ac>
8008cbbc:	9080100c 	andi	r2,r18,64
8008cbc0:	d8001d85 	stb	zero,118(sp)
8008cbc4:	dac02317 	ldw	r11,140(sp)
8008cbc8:	10003426 	beq	r2,zero,8008cc9c <___svfiprintf_internal_r+0x1038>
8008cbcc:	58800104 	addi	r2,r11,4
8008cbd0:	5f00000b 	ldhu	fp,0(r11)
8008cbd4:	0013883a 	mov	r9,zero
8008cbd8:	803e950e 	bge	r16,zero,8008c630 <___svfiprintf_internal_r+0x9cc>
8008cbdc:	e246b03a 	or	r3,fp,r9
8008cbe0:	d8802315 	stw	r2,140(sp)
8008cbe4:	183d5a1e 	bne	r3,zero,8008c150 <___svfiprintf_internal_r+0x4ec>
8008cbe8:	0015883a 	mov	r10,zero
8008cbec:	0005883a 	mov	r2,zero
8008cbf0:	003fb706 	br	8008cad0 <___svfiprintf_internal_r+0xe6c>
8008cbf4:	98c00043 	ldbu	r3,1(r19)
8008cbf8:	94800814 	ori	r18,r18,32
8008cbfc:	9cc00044 	addi	r19,r19,1
8008cc00:	18c03fcc 	andi	r3,r3,255
8008cc04:	18c0201c 	xori	r3,r3,128
8008cc08:	18ffe004 	addi	r3,r3,-128
8008cc0c:	003c6406 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008cc10:	d8c02315 	stw	r3,140(sp)
8008cc14:	0015883a 	mov	r10,zero
8008cc18:	003faa06 	br	8008cac4 <___svfiprintf_internal_r+0xe60>
8008cc1c:	dac02317 	ldw	r11,140(sp)
8008cc20:	58800017 	ldw	r2,0(r11)
8008cc24:	5ac00104 	addi	r11,r11,4
8008cc28:	dac02315 	stw	r11,140(sp)
8008cc2c:	dac02517 	ldw	r11,148(sp)
8008cc30:	12c00015 	stw	r11,0(r2)
8008cc34:	003c3206 	br	8008bd00 <___svfiprintf_internal_r+0x9c>
8008cc38:	01200274 	movhi	r4,32777
8008cc3c:	211a7904 	addi	r4,r4,27108
8008cc40:	d9002915 	stw	r4,164(sp)
8008cc44:	d8c02315 	stw	r3,140(sp)
8008cc48:	1025883a 	mov	r18,r2
8008cc4c:	e244b03a 	or	r2,fp,r9
8008cc50:	103f871e 	bne	r2,zero,8008ca70 <___svfiprintf_internal_r+0xe0c>
8008cc54:	0015883a 	mov	r10,zero
8008cc58:	00800084 	movi	r2,2
8008cc5c:	003f9c06 	br	8008cad0 <___svfiprintf_internal_r+0xe6c>
8008cc60:	0039883a 	mov	fp,zero
8008cc64:	003e5f06 	br	8008c5e4 <___svfiprintf_internal_r+0x980>
8008cc68:	d9801a04 	addi	r6,sp,104
8008cc6c:	b80b883a 	mov	r5,r23
8008cc70:	a809883a 	mov	r4,r21
8008cc74:	008ba940 	call	8008ba94 <__ssprint_r>
8008cc78:	103f081e 	bne	r2,zero,8008c89c <___svfiprintf_internal_r+0xc38>
8008cc7c:	d8c01c17 	ldw	r3,112(sp)
8008cc80:	d8801b17 	ldw	r2,108(sp)
8008cc84:	d811883a 	mov	r8,sp
8008cc88:	003e9106 	br	8008c6d0 <___svfiprintf_internal_r+0xa6c>
8008cc8c:	01200274 	movhi	r4,32777
8008cc90:	211ae104 	addi	r4,r4,27524
8008cc94:	d9002215 	stw	r4,136(sp)
8008cc98:	003ead06 	br	8008c750 <___svfiprintf_internal_r+0xaec>
8008cc9c:	58800104 	addi	r2,r11,4
8008cca0:	5f000017 	ldw	fp,0(r11)
8008cca4:	0013883a 	mov	r9,zero
8008cca8:	803e610e 	bge	r16,zero,8008c630 <___svfiprintf_internal_r+0x9cc>
8008ccac:	003fcb06 	br	8008cbdc <___svfiprintf_internal_r+0xf78>
8008ccb0:	58800104 	addi	r2,r11,4
8008ccb4:	5f000017 	ldw	fp,0(r11)
8008ccb8:	0013883a 	mov	r9,zero
8008ccbc:	803e420e 	bge	r16,zero,8008c5c8 <___svfiprintf_internal_r+0x964>
8008ccc0:	003f7e06 	br	8008cabc <___svfiprintf_internal_r+0xe58>
8008ccc4:	5f000017 	ldw	fp,0(r11)
8008ccc8:	5ac00104 	addi	r11,r11,4
8008cccc:	0013883a 	mov	r9,zero
8008ccd0:	dac02315 	stw	r11,140(sp)
8008ccd4:	003cce06 	br	8008c010 <___svfiprintf_internal_r+0x3ac>
8008ccd8:	8809883a 	mov	r4,r17
8008ccdc:	da002c15 	stw	r8,176(sp)
8008cce0:	00820100 	call	80082010 <strlen>
8008cce4:	d8802115 	stw	r2,132(sp)
8008cce8:	da801d83 	ldbu	r10,118(sp)
8008ccec:	df002315 	stw	fp,140(sp)
8008ccf0:	0021883a 	mov	r16,zero
8008ccf4:	da002c17 	ldw	r8,176(sp)
8008ccf8:	003cf606 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008ccfc:	00800184 	movi	r2,6
8008cd00:	1400012e 	bgeu	r2,r16,8008cd08 <___svfiprintf_internal_r+0x10a4>
8008cd04:	1021883a 	mov	r16,r2
8008cd08:	dc002115 	stw	r16,132(sp)
8008cd0c:	8005883a 	mov	r2,r16
8008cd10:	80003c16 	blt	r16,zero,8008ce04 <___svfiprintf_internal_r+0x11a0>
8008cd14:	04600274 	movhi	r17,32777
8008cd18:	d8802015 	stw	r2,128(sp)
8008cd1c:	df002315 	stw	fp,140(sp)
8008cd20:	8c5a7e04 	addi	r17,r17,27128
8008cd24:	003d2e06 	br	8008c1e0 <___svfiprintf_internal_r+0x57c>
8008cd28:	04001004 	movi	r16,64
8008cd2c:	800b883a 	mov	r5,r16
8008cd30:	00893a80 	call	800893a8 <_malloc_r>
8008cd34:	dac02717 	ldw	r11,156(sp)
8008cd38:	58800015 	stw	r2,0(r11)
8008cd3c:	58800415 	stw	r2,16(r11)
8008cd40:	10004826 	beq	r2,zero,8008ce64 <___svfiprintf_internal_r+0x1200>
8008cd44:	dac02717 	ldw	r11,156(sp)
8008cd48:	5c000515 	stw	r16,20(r11)
8008cd4c:	003bd906 	br	8008bcb4 <___svfiprintf_internal_r+0x50>
8008cd50:	9080004c 	andi	r2,r18,1
8008cd54:	0015883a 	mov	r10,zero
8008cd58:	10000626 	beq	r2,zero,8008cd74 <___svfiprintf_internal_r+0x1110>
8008cd5c:	dac02b17 	ldw	r11,172(sp)
8008cd60:	00800c04 	movi	r2,48
8008cd64:	d88019c5 	stb	r2,103(sp)
8008cd68:	dac02115 	stw	r11,132(sp)
8008cd6c:	dc4019c4 	addi	r17,sp,103
8008cd70:	003cd806 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008cd74:	d8002115 	stw	zero,132(sp)
8008cd78:	dc401a04 	addi	r17,sp,104
8008cd7c:	003cd506 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008cd80:	01200274 	movhi	r4,32777
8008cd84:	211ae504 	addi	r4,r4,27540
8008cd88:	d9002815 	stw	r4,160(sp)
8008cd8c:	003d4306 	br	8008c29c <___svfiprintf_internal_r+0x638>
8008cd90:	00bfffc4 	movi	r2,-1
8008cd94:	003ec606 	br	8008c8b0 <___svfiprintf_internal_r+0xc4c>
8008cd98:	00800044 	movi	r2,1
8008cd9c:	10803fcc 	andi	r2,r2,255
8008cda0:	00c00044 	movi	r3,1
8008cda4:	10fd8026 	beq	r2,r3,8008c3a8 <___svfiprintf_internal_r+0x744>
8008cda8:	00c00084 	movi	r3,2
8008cdac:	10fca426 	beq	r2,r3,8008c040 <___svfiprintf_internal_r+0x3dc>
8008cdb0:	003ce806 	br	8008c154 <___svfiprintf_internal_r+0x4f0>
8008cdb4:	01200274 	movhi	r4,32777
8008cdb8:	211ae504 	addi	r4,r4,27540
8008cdbc:	d9002815 	stw	r4,160(sp)
8008cdc0:	003e9906 	br	8008c828 <___svfiprintf_internal_r+0xbc4>
8008cdc4:	1025883a 	mov	r18,r2
8008cdc8:	0015883a 	mov	r10,zero
8008cdcc:	00800084 	movi	r2,2
8008cdd0:	003ff206 	br	8008cd9c <___svfiprintf_internal_r+0x1138>
8008cdd4:	01600274 	movhi	r5,32777
8008cdd8:	295ae104 	addi	r5,r5,27524
8008cddc:	d9402215 	stw	r5,136(sp)
8008cde0:	003ee206 	br	8008c96c <___svfiprintf_internal_r+0xd08>
8008cde4:	5827883a 	mov	r19,r11
8008cde8:	0021883a 	mov	r16,zero
8008cdec:	003bed06 	br	8008bda4 <___svfiprintf_internal_r+0x140>
8008cdf0:	dc002115 	stw	r16,132(sp)
8008cdf4:	da801d83 	ldbu	r10,118(sp)
8008cdf8:	df002315 	stw	fp,140(sp)
8008cdfc:	0021883a 	mov	r16,zero
8008ce00:	003cb406 	br	8008c0d4 <___svfiprintf_internal_r+0x470>
8008ce04:	0005883a 	mov	r2,zero
8008ce08:	003fc206 	br	8008cd14 <___svfiprintf_internal_r+0x10b0>
8008ce0c:	d8802317 	ldw	r2,140(sp)
8008ce10:	98c00043 	ldbu	r3,1(r19)
8008ce14:	5827883a 	mov	r19,r11
8008ce18:	14000017 	ldw	r16,0(r2)
8008ce1c:	10800104 	addi	r2,r2,4
8008ce20:	d8802315 	stw	r2,140(sp)
8008ce24:	803f760e 	bge	r16,zero,8008cc00 <___svfiprintf_internal_r+0xf9c>
8008ce28:	18c03fcc 	andi	r3,r3,255
8008ce2c:	18c0201c 	xori	r3,r3,128
8008ce30:	043fffc4 	movi	r16,-1
8008ce34:	18ffe004 	addi	r3,r3,-128
8008ce38:	003bd906 	br	8008bda0 <___svfiprintf_internal_r+0x13c>
8008ce3c:	d9c01d85 	stb	r7,118(sp)
8008ce40:	003cb606 	br	8008c11c <___svfiprintf_internal_r+0x4b8>
8008ce44:	d9c01d85 	stb	r7,118(sp)
8008ce48:	003d2106 	br	8008c2d0 <___svfiprintf_internal_r+0x66c>
8008ce4c:	d9c01d85 	stb	r7,118(sp)
8008ce50:	003d8e06 	br	8008c48c <___svfiprintf_internal_r+0x828>
8008ce54:	d9c01d85 	stb	r7,118(sp)
8008ce58:	003db306 	br	8008c528 <___svfiprintf_internal_r+0x8c4>
8008ce5c:	d9c01d85 	stb	r7,118(sp)
8008ce60:	003c8a06 	br	8008c08c <___svfiprintf_internal_r+0x428>
8008ce64:	dac02a17 	ldw	r11,168(sp)
8008ce68:	00800304 	movi	r2,12
8008ce6c:	58800015 	stw	r2,0(r11)
8008ce70:	00bfffc4 	movi	r2,-1
8008ce74:	003e8e06 	br	8008c8b0 <___svfiprintf_internal_r+0xc4c>
8008ce78:	d9c01d85 	stb	r7,118(sp)
8008ce7c:	003dc706 	br	8008c59c <___svfiprintf_internal_r+0x938>
8008ce80:	d9c01d85 	stb	r7,118(sp)
8008ce84:	003ddf06 	br	8008c604 <___svfiprintf_internal_r+0x9a0>
8008ce88:	d9c01d85 	stb	r7,118(sp)
8008ce8c:	003d3706 	br	8008c36c <___svfiprintf_internal_r+0x708>
8008ce90:	d9c01d85 	stb	r7,118(sp)
8008ce94:	003c5406 	br	8008bfe8 <___svfiprintf_internal_r+0x384>
8008ce98:	d9c01d85 	stb	r7,118(sp)
8008ce9c:	003d1d06 	br	8008c314 <___svfiprintf_internal_r+0x6b0>

8008cea0 <__sprint_r.part.0>:
8008cea0:	28801917 	ldw	r2,100(r5)
8008cea4:	defff604 	addi	sp,sp,-40
8008cea8:	dd400515 	stw	r21,20(sp)
8008ceac:	dfc00915 	stw	ra,36(sp)
8008ceb0:	df000815 	stw	fp,32(sp)
8008ceb4:	ddc00715 	stw	r23,28(sp)
8008ceb8:	dd800615 	stw	r22,24(sp)
8008cebc:	dd000415 	stw	r20,16(sp)
8008cec0:	dcc00315 	stw	r19,12(sp)
8008cec4:	dc800215 	stw	r18,8(sp)
8008cec8:	dc400115 	stw	r17,4(sp)
8008cecc:	dc000015 	stw	r16,0(sp)
8008ced0:	1088000c 	andi	r2,r2,8192
8008ced4:	302b883a 	mov	r21,r6
8008ced8:	10002e26 	beq	r2,zero,8008cf94 <__sprint_r.part.0+0xf4>
8008cedc:	30800217 	ldw	r2,8(r6)
8008cee0:	35800017 	ldw	r22,0(r6)
8008cee4:	10002926 	beq	r2,zero,8008cf8c <__sprint_r.part.0+0xec>
8008cee8:	2827883a 	mov	r19,r5
8008ceec:	2029883a 	mov	r20,r4
8008cef0:	b5c00104 	addi	r23,r22,4
8008cef4:	04bfffc4 	movi	r18,-1
8008cef8:	bc400017 	ldw	r17,0(r23)
8008cefc:	b4000017 	ldw	r16,0(r22)
8008cf00:	0039883a 	mov	fp,zero
8008cf04:	8822d0ba 	srli	r17,r17,2
8008cf08:	8800031e 	bne	r17,zero,8008cf18 <__sprint_r.part.0+0x78>
8008cf0c:	00001806 	br	8008cf70 <__sprint_r.part.0+0xd0>
8008cf10:	84000104 	addi	r16,r16,4
8008cf14:	8f001526 	beq	r17,fp,8008cf6c <__sprint_r.part.0+0xcc>
8008cf18:	81400017 	ldw	r5,0(r16)
8008cf1c:	980d883a 	mov	r6,r19
8008cf20:	a009883a 	mov	r4,r20
8008cf24:	008e8c80 	call	8008e8c8 <_fputwc_r>
8008cf28:	e7000044 	addi	fp,fp,1
8008cf2c:	14bff81e 	bne	r2,r18,8008cf10 <__sprint_r.part.0+0x70>
8008cf30:	9005883a 	mov	r2,r18
8008cf34:	a8000215 	stw	zero,8(r21)
8008cf38:	a8000115 	stw	zero,4(r21)
8008cf3c:	dfc00917 	ldw	ra,36(sp)
8008cf40:	df000817 	ldw	fp,32(sp)
8008cf44:	ddc00717 	ldw	r23,28(sp)
8008cf48:	dd800617 	ldw	r22,24(sp)
8008cf4c:	dd400517 	ldw	r21,20(sp)
8008cf50:	dd000417 	ldw	r20,16(sp)
8008cf54:	dcc00317 	ldw	r19,12(sp)
8008cf58:	dc800217 	ldw	r18,8(sp)
8008cf5c:	dc400117 	ldw	r17,4(sp)
8008cf60:	dc000017 	ldw	r16,0(sp)
8008cf64:	dec00a04 	addi	sp,sp,40
8008cf68:	f800283a 	ret
8008cf6c:	a8800217 	ldw	r2,8(r21)
8008cf70:	8c63883a 	add	r17,r17,r17
8008cf74:	8c63883a 	add	r17,r17,r17
8008cf78:	1445c83a 	sub	r2,r2,r17
8008cf7c:	a8800215 	stw	r2,8(r21)
8008cf80:	b5800204 	addi	r22,r22,8
8008cf84:	bdc00204 	addi	r23,r23,8
8008cf88:	103fdb1e 	bne	r2,zero,8008cef8 <__sprint_r.part.0+0x58>
8008cf8c:	0005883a 	mov	r2,zero
8008cf90:	003fe806 	br	8008cf34 <__sprint_r.part.0+0x94>
8008cf94:	0088acc0 	call	80088acc <__sfvwrite_r>
8008cf98:	003fe606 	br	8008cf34 <__sprint_r.part.0+0x94>

8008cf9c <__sprint_r>:
8008cf9c:	30c00217 	ldw	r3,8(r6)
8008cfa0:	18000126 	beq	r3,zero,8008cfa8 <__sprint_r+0xc>
8008cfa4:	008cea01 	jmpi	8008cea0 <__sprint_r.part.0>
8008cfa8:	30000115 	stw	zero,4(r6)
8008cfac:	0005883a 	mov	r2,zero
8008cfb0:	f800283a 	ret

8008cfb4 <___vfiprintf_internal_r>:
8008cfb4:	deffc904 	addi	sp,sp,-220
8008cfb8:	df003515 	stw	fp,212(sp)
8008cfbc:	dd003115 	stw	r20,196(sp)
8008cfc0:	dfc03615 	stw	ra,216(sp)
8008cfc4:	ddc03415 	stw	r23,208(sp)
8008cfc8:	dd803315 	stw	r22,204(sp)
8008cfcc:	dd403215 	stw	r21,200(sp)
8008cfd0:	dcc03015 	stw	r19,192(sp)
8008cfd4:	dc802f15 	stw	r18,188(sp)
8008cfd8:	dc402e15 	stw	r17,184(sp)
8008cfdc:	dc002d15 	stw	r16,180(sp)
8008cfe0:	d9002015 	stw	r4,128(sp)
8008cfe4:	d9c02215 	stw	r7,136(sp)
8008cfe8:	2829883a 	mov	r20,r5
8008cfec:	3039883a 	mov	fp,r6
8008cff0:	20000226 	beq	r4,zero,8008cffc <___vfiprintf_internal_r+0x48>
8008cff4:	20800e17 	ldw	r2,56(r4)
8008cff8:	1000cf26 	beq	r2,zero,8008d338 <___vfiprintf_internal_r+0x384>
8008cffc:	a080030b 	ldhu	r2,12(r20)
8008d000:	10c8000c 	andi	r3,r2,8192
8008d004:	1800061e 	bne	r3,zero,8008d020 <___vfiprintf_internal_r+0x6c>
8008d008:	a1001917 	ldw	r4,100(r20)
8008d00c:	00f7ffc4 	movi	r3,-8193
8008d010:	10880014 	ori	r2,r2,8192
8008d014:	20c6703a 	and	r3,r4,r3
8008d018:	a080030d 	sth	r2,12(r20)
8008d01c:	a0c01915 	stw	r3,100(r20)
8008d020:	10c0020c 	andi	r3,r2,8
8008d024:	1800a926 	beq	r3,zero,8008d2cc <___vfiprintf_internal_r+0x318>
8008d028:	a0c00417 	ldw	r3,16(r20)
8008d02c:	1800a726 	beq	r3,zero,8008d2cc <___vfiprintf_internal_r+0x318>
8008d030:	1080068c 	andi	r2,r2,26
8008d034:	00c00284 	movi	r3,10
8008d038:	10c0ac26 	beq	r2,r3,8008d2ec <___vfiprintf_internal_r+0x338>
8008d03c:	da801a04 	addi	r10,sp,104
8008d040:	da801e15 	stw	r10,120(sp)
8008d044:	d8801e17 	ldw	r2,120(sp)
8008d048:	da8019c4 	addi	r10,sp,103
8008d04c:	05a00274 	movhi	r22,32777
8008d050:	05e00274 	movhi	r23,32777
8008d054:	da801f15 	stw	r10,124(sp)
8008d058:	1295c83a 	sub	r10,r2,r10
8008d05c:	b59aed04 	addi	r22,r22,27572
8008d060:	bddae904 	addi	r23,r23,27556
8008d064:	dec01a15 	stw	sp,104(sp)
8008d068:	d8001c15 	stw	zero,112(sp)
8008d06c:	d8001b15 	stw	zero,108(sp)
8008d070:	d8002615 	stw	zero,152(sp)
8008d074:	d8002315 	stw	zero,140(sp)
8008d078:	da802715 	stw	r10,156(sp)
8008d07c:	d811883a 	mov	r8,sp
8008d080:	dd002115 	stw	r20,132(sp)
8008d084:	e021883a 	mov	r16,fp
8008d088:	80800007 	ldb	r2,0(r16)
8008d08c:	1003ea26 	beq	r2,zero,8008e038 <___vfiprintf_internal_r+0x1084>
8008d090:	00c00944 	movi	r3,37
8008d094:	8025883a 	mov	r18,r16
8008d098:	10c0021e 	bne	r2,r3,8008d0a4 <___vfiprintf_internal_r+0xf0>
8008d09c:	00001606 	br	8008d0f8 <___vfiprintf_internal_r+0x144>
8008d0a0:	10c00326 	beq	r2,r3,8008d0b0 <___vfiprintf_internal_r+0xfc>
8008d0a4:	94800044 	addi	r18,r18,1
8008d0a8:	90800007 	ldb	r2,0(r18)
8008d0ac:	103ffc1e 	bne	r2,zero,8008d0a0 <___vfiprintf_internal_r+0xec>
8008d0b0:	9423c83a 	sub	r17,r18,r16
8008d0b4:	88001026 	beq	r17,zero,8008d0f8 <___vfiprintf_internal_r+0x144>
8008d0b8:	d8c01c17 	ldw	r3,112(sp)
8008d0bc:	d8801b17 	ldw	r2,108(sp)
8008d0c0:	44000015 	stw	r16,0(r8)
8008d0c4:	88c7883a 	add	r3,r17,r3
8008d0c8:	10800044 	addi	r2,r2,1
8008d0cc:	44400115 	stw	r17,4(r8)
8008d0d0:	d8c01c15 	stw	r3,112(sp)
8008d0d4:	d8801b15 	stw	r2,108(sp)
8008d0d8:	010001c4 	movi	r4,7
8008d0dc:	2080760e 	bge	r4,r2,8008d2b8 <___vfiprintf_internal_r+0x304>
8008d0e0:	1803821e 	bne	r3,zero,8008deec <___vfiprintf_internal_r+0xf38>
8008d0e4:	da802317 	ldw	r10,140(sp)
8008d0e8:	d8001b15 	stw	zero,108(sp)
8008d0ec:	d811883a 	mov	r8,sp
8008d0f0:	5455883a 	add	r10,r10,r17
8008d0f4:	da802315 	stw	r10,140(sp)
8008d0f8:	90800007 	ldb	r2,0(r18)
8008d0fc:	10044626 	beq	r2,zero,8008e218 <___vfiprintf_internal_r+0x1264>
8008d100:	90c00047 	ldb	r3,1(r18)
8008d104:	94000044 	addi	r16,r18,1
8008d108:	d8001d85 	stb	zero,118(sp)
8008d10c:	0009883a 	mov	r4,zero
8008d110:	000f883a 	mov	r7,zero
8008d114:	027fffc4 	movi	r9,-1
8008d118:	0023883a 	mov	r17,zero
8008d11c:	0029883a 	mov	r20,zero
8008d120:	01401604 	movi	r5,88
8008d124:	01800244 	movi	r6,9
8008d128:	03400a84 	movi	r13,42
8008d12c:	03001b04 	movi	r12,108
8008d130:	84000044 	addi	r16,r16,1
8008d134:	18bff804 	addi	r2,r3,-32
8008d138:	28827336 	bltu	r5,r2,8008db08 <___vfiprintf_internal_r+0xb54>
8008d13c:	100490ba 	slli	r2,r2,2
8008d140:	02a00274 	movhi	r10,32777
8008d144:	52b45504 	addi	r10,r10,-11948
8008d148:	1285883a 	add	r2,r2,r10
8008d14c:	10800017 	ldw	r2,0(r2)
8008d150:	1000683a 	jmp	r2
8008d154:	8008d83c 	xorhi	zero,r16,9056
8008d158:	8008db08 	cmpgei	zero,r16,9068
8008d15c:	8008db08 	cmpgei	zero,r16,9068
8008d160:	8008d85c 	xori	zero,r16,9057
8008d164:	8008db08 	cmpgei	zero,r16,9068
8008d168:	8008db08 	cmpgei	zero,r16,9068
8008d16c:	8008db08 	cmpgei	zero,r16,9068
8008d170:	8008db08 	cmpgei	zero,r16,9068
8008d174:	8008db08 	cmpgei	zero,r16,9068
8008d178:	8008db08 	cmpgei	zero,r16,9068
8008d17c:	8008da44 	addi	zero,r16,9065
8008d180:	8008da60 	cmpeqi	zero,r16,9065
8008d184:	8008db08 	cmpgei	zero,r16,9068
8008d188:	8008d348 	cmpgei	zero,r16,9037
8008d18c:	8008da70 	cmpltui	zero,r16,9065
8008d190:	8008db08 	cmpgei	zero,r16,9068
8008d194:	8008d868 	cmpgeui	zero,r16,9057
8008d198:	8008d874 	orhi	zero,r16,9057
8008d19c:	8008d874 	orhi	zero,r16,9057
8008d1a0:	8008d874 	orhi	zero,r16,9057
8008d1a4:	8008d874 	orhi	zero,r16,9057
8008d1a8:	8008d874 	orhi	zero,r16,9057
8008d1ac:	8008d874 	orhi	zero,r16,9057
8008d1b0:	8008d874 	orhi	zero,r16,9057
8008d1b4:	8008d874 	orhi	zero,r16,9057
8008d1b8:	8008d874 	orhi	zero,r16,9057
8008d1bc:	8008db08 	cmpgei	zero,r16,9068
8008d1c0:	8008db08 	cmpgei	zero,r16,9068
8008d1c4:	8008db08 	cmpgei	zero,r16,9068
8008d1c8:	8008db08 	cmpgei	zero,r16,9068
8008d1cc:	8008db08 	cmpgei	zero,r16,9068
8008d1d0:	8008db08 	cmpgei	zero,r16,9068
8008d1d4:	8008db08 	cmpgei	zero,r16,9068
8008d1d8:	8008db08 	cmpgei	zero,r16,9068
8008d1dc:	8008db08 	cmpgei	zero,r16,9068
8008d1e0:	8008db08 	cmpgei	zero,r16,9068
8008d1e4:	8008d8a0 	cmpeqi	zero,r16,9058
8008d1e8:	8008db08 	cmpgei	zero,r16,9068
8008d1ec:	8008db08 	cmpgei	zero,r16,9068
8008d1f0:	8008db08 	cmpgei	zero,r16,9068
8008d1f4:	8008db08 	cmpgei	zero,r16,9068
8008d1f8:	8008db08 	cmpgei	zero,r16,9068
8008d1fc:	8008db08 	cmpgei	zero,r16,9068
8008d200:	8008db08 	cmpgei	zero,r16,9068
8008d204:	8008db08 	cmpgei	zero,r16,9068
8008d208:	8008db08 	cmpgei	zero,r16,9068
8008d20c:	8008db08 	cmpgei	zero,r16,9068
8008d210:	8008d8d8 	cmpnei	zero,r16,9059
8008d214:	8008db08 	cmpgei	zero,r16,9068
8008d218:	8008db08 	cmpgei	zero,r16,9068
8008d21c:	8008db08 	cmpgei	zero,r16,9068
8008d220:	8008db08 	cmpgei	zero,r16,9068
8008d224:	8008db08 	cmpgei	zero,r16,9068
8008d228:	8008d930 	cmpltui	zero,r16,9060
8008d22c:	8008db08 	cmpgei	zero,r16,9068
8008d230:	8008db08 	cmpgei	zero,r16,9068
8008d234:	8008d9a0 	cmpeqi	zero,r16,9062
8008d238:	8008db08 	cmpgei	zero,r16,9068
8008d23c:	8008db08 	cmpgei	zero,r16,9068
8008d240:	8008db08 	cmpgei	zero,r16,9068
8008d244:	8008db08 	cmpgei	zero,r16,9068
8008d248:	8008db08 	cmpgei	zero,r16,9068
8008d24c:	8008db08 	cmpgei	zero,r16,9068
8008d250:	8008db08 	cmpgei	zero,r16,9068
8008d254:	8008db08 	cmpgei	zero,r16,9068
8008d258:	8008db08 	cmpgei	zero,r16,9068
8008d25c:	8008db08 	cmpgei	zero,r16,9068
8008d260:	8008d74c 	andi	zero,r16,9053
8008d264:	8008d778 	rdprs	zero,r16,9053
8008d268:	8008db08 	cmpgei	zero,r16,9068
8008d26c:	8008db08 	cmpgei	zero,r16,9068
8008d270:	8008db08 	cmpgei	zero,r16,9068
8008d274:	8008dab0 	cmpltui	zero,r16,9066
8008d278:	8008d778 	rdprs	zero,r16,9053
8008d27c:	8008db08 	cmpgei	zero,r16,9068
8008d280:	8008db08 	cmpgei	zero,r16,9068
8008d284:	8008d60c 	andi	zero,r16,9048
8008d288:	8008db08 	cmpgei	zero,r16,9068
8008d28c:	8008d61c 	xori	zero,r16,9048
8008d290:	8008d658 	cmpnei	zero,r16,9049
8008d294:	8008d354 	ori	zero,r16,9037
8008d298:	8008d600 	call	88008d60 <__alt_data_end+0x7f0bd60>
8008d29c:	8008db08 	cmpgei	zero,r16,9068
8008d2a0:	8008d9dc 	xori	zero,r16,9063
8008d2a4:	8008db08 	cmpgei	zero,r16,9068
8008d2a8:	8008da34 	orhi	zero,r16,9064
8008d2ac:	8008db08 	cmpgei	zero,r16,9068
8008d2b0:	8008db08 	cmpgei	zero,r16,9068
8008d2b4:	8008d6f8 	rdprs	zero,r16,9051
8008d2b8:	42000204 	addi	r8,r8,8
8008d2bc:	da802317 	ldw	r10,140(sp)
8008d2c0:	5455883a 	add	r10,r10,r17
8008d2c4:	da802315 	stw	r10,140(sp)
8008d2c8:	003f8b06 	br	8008d0f8 <___vfiprintf_internal_r+0x144>
8008d2cc:	d9002017 	ldw	r4,128(sp)
8008d2d0:	a00b883a 	mov	r5,r20
8008d2d4:	00866740 	call	80086674 <__swsetup_r>
8008d2d8:	1003b11e 	bne	r2,zero,8008e1a0 <___vfiprintf_internal_r+0x11ec>
8008d2dc:	a080030b 	ldhu	r2,12(r20)
8008d2e0:	00c00284 	movi	r3,10
8008d2e4:	1080068c 	andi	r2,r2,26
8008d2e8:	10ff541e 	bne	r2,r3,8008d03c <___vfiprintf_internal_r+0x88>
8008d2ec:	a080038f 	ldh	r2,14(r20)
8008d2f0:	103f5216 	blt	r2,zero,8008d03c <___vfiprintf_internal_r+0x88>
8008d2f4:	d9c02217 	ldw	r7,136(sp)
8008d2f8:	d9002017 	ldw	r4,128(sp)
8008d2fc:	e00d883a 	mov	r6,fp
8008d300:	a00b883a 	mov	r5,r20
8008d304:	008e42c0 	call	8008e42c <__sbprintf>
8008d308:	dfc03617 	ldw	ra,216(sp)
8008d30c:	df003517 	ldw	fp,212(sp)
8008d310:	ddc03417 	ldw	r23,208(sp)
8008d314:	dd803317 	ldw	r22,204(sp)
8008d318:	dd403217 	ldw	r21,200(sp)
8008d31c:	dd003117 	ldw	r20,196(sp)
8008d320:	dcc03017 	ldw	r19,192(sp)
8008d324:	dc802f17 	ldw	r18,188(sp)
8008d328:	dc402e17 	ldw	r17,184(sp)
8008d32c:	dc002d17 	ldw	r16,180(sp)
8008d330:	dec03704 	addi	sp,sp,220
8008d334:	f800283a 	ret
8008d338:	00886480 	call	80088648 <__sinit>
8008d33c:	003f2f06 	br	8008cffc <___vfiprintf_internal_r+0x48>
8008d340:	0463c83a 	sub	r17,zero,r17
8008d344:	d8802215 	stw	r2,136(sp)
8008d348:	a5000114 	ori	r20,r20,4
8008d34c:	80c00007 	ldb	r3,0(r16)
8008d350:	003f7706 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008d354:	00800c04 	movi	r2,48
8008d358:	da802217 	ldw	r10,136(sp)
8008d35c:	d8801d05 	stb	r2,116(sp)
8008d360:	00801e04 	movi	r2,120
8008d364:	d8801d45 	stb	r2,117(sp)
8008d368:	d8001d85 	stb	zero,118(sp)
8008d36c:	50c00104 	addi	r3,r10,4
8008d370:	54800017 	ldw	r18,0(r10)
8008d374:	0027883a 	mov	r19,zero
8008d378:	a0800094 	ori	r2,r20,2
8008d37c:	48030b16 	blt	r9,zero,8008dfac <___vfiprintf_internal_r+0xff8>
8008d380:	00bfdfc4 	movi	r2,-129
8008d384:	a096703a 	and	r11,r20,r2
8008d388:	d8c02215 	stw	r3,136(sp)
8008d38c:	5d000094 	ori	r20,r11,2
8008d390:	90032b1e 	bne	r18,zero,8008e040 <___vfiprintf_internal_r+0x108c>
8008d394:	00a00274 	movhi	r2,32777
8008d398:	109a7904 	addi	r2,r2,27108
8008d39c:	d8802615 	stw	r2,152(sp)
8008d3a0:	0039883a 	mov	fp,zero
8008d3a4:	48017b1e 	bne	r9,zero,8008d994 <___vfiprintf_internal_r+0x9e0>
8008d3a8:	0013883a 	mov	r9,zero
8008d3ac:	0027883a 	mov	r19,zero
8008d3b0:	dd401a04 	addi	r21,sp,104
8008d3b4:	4825883a 	mov	r18,r9
8008d3b8:	4cc0010e 	bge	r9,r19,8008d3c0 <___vfiprintf_internal_r+0x40c>
8008d3bc:	9825883a 	mov	r18,r19
8008d3c0:	e7003fcc 	andi	fp,fp,255
8008d3c4:	e700201c 	xori	fp,fp,128
8008d3c8:	e73fe004 	addi	fp,fp,-128
8008d3cc:	e0000126 	beq	fp,zero,8008d3d4 <___vfiprintf_internal_r+0x420>
8008d3d0:	94800044 	addi	r18,r18,1
8008d3d4:	a380008c 	andi	r14,r20,2
8008d3d8:	70000126 	beq	r14,zero,8008d3e0 <___vfiprintf_internal_r+0x42c>
8008d3dc:	94800084 	addi	r18,r18,2
8008d3e0:	a700210c 	andi	fp,r20,132
8008d3e4:	e001df1e 	bne	fp,zero,8008db64 <___vfiprintf_internal_r+0xbb0>
8008d3e8:	8c87c83a 	sub	r3,r17,r18
8008d3ec:	00c1dd0e 	bge	zero,r3,8008db64 <___vfiprintf_internal_r+0xbb0>
8008d3f0:	01c00404 	movi	r7,16
8008d3f4:	d8801c17 	ldw	r2,112(sp)
8008d3f8:	38c3ad0e 	bge	r7,r3,8008e2b0 <___vfiprintf_internal_r+0x12fc>
8008d3fc:	02a00274 	movhi	r10,32777
8008d400:	529aed04 	addi	r10,r10,27572
8008d404:	dc002915 	stw	r16,164(sp)
8008d408:	d9801b17 	ldw	r6,108(sp)
8008d40c:	da802415 	stw	r10,144(sp)
8008d410:	03c001c4 	movi	r15,7
8008d414:	da402515 	stw	r9,148(sp)
8008d418:	db802815 	stw	r14,160(sp)
8008d41c:	1821883a 	mov	r16,r3
8008d420:	00000506 	br	8008d438 <___vfiprintf_internal_r+0x484>
8008d424:	31400084 	addi	r5,r6,2
8008d428:	42000204 	addi	r8,r8,8
8008d42c:	200d883a 	mov	r6,r4
8008d430:	843ffc04 	addi	r16,r16,-16
8008d434:	3c000d0e 	bge	r7,r16,8008d46c <___vfiprintf_internal_r+0x4b8>
8008d438:	10800404 	addi	r2,r2,16
8008d43c:	31000044 	addi	r4,r6,1
8008d440:	45800015 	stw	r22,0(r8)
8008d444:	41c00115 	stw	r7,4(r8)
8008d448:	d8801c15 	stw	r2,112(sp)
8008d44c:	d9001b15 	stw	r4,108(sp)
8008d450:	793ff40e 	bge	r15,r4,8008d424 <___vfiprintf_internal_r+0x470>
8008d454:	1001b51e 	bne	r2,zero,8008db2c <___vfiprintf_internal_r+0xb78>
8008d458:	843ffc04 	addi	r16,r16,-16
8008d45c:	000d883a 	mov	r6,zero
8008d460:	01400044 	movi	r5,1
8008d464:	d811883a 	mov	r8,sp
8008d468:	3c3ff316 	blt	r7,r16,8008d438 <___vfiprintf_internal_r+0x484>
8008d46c:	8007883a 	mov	r3,r16
8008d470:	da402517 	ldw	r9,148(sp)
8008d474:	db802817 	ldw	r14,160(sp)
8008d478:	dc002917 	ldw	r16,164(sp)
8008d47c:	da802417 	ldw	r10,144(sp)
8008d480:	1885883a 	add	r2,r3,r2
8008d484:	40c00115 	stw	r3,4(r8)
8008d488:	42800015 	stw	r10,0(r8)
8008d48c:	d8801c15 	stw	r2,112(sp)
8008d490:	d9401b15 	stw	r5,108(sp)
8008d494:	00c001c4 	movi	r3,7
8008d498:	19426016 	blt	r3,r5,8008de1c <___vfiprintf_internal_r+0xe68>
8008d49c:	d8c01d87 	ldb	r3,118(sp)
8008d4a0:	42000204 	addi	r8,r8,8
8008d4a4:	29000044 	addi	r4,r5,1
8008d4a8:	1801b31e 	bne	r3,zero,8008db78 <___vfiprintf_internal_r+0xbc4>
8008d4ac:	7001c026 	beq	r14,zero,8008dbb0 <___vfiprintf_internal_r+0xbfc>
8008d4b0:	d8c01d04 	addi	r3,sp,116
8008d4b4:	10800084 	addi	r2,r2,2
8008d4b8:	40c00015 	stw	r3,0(r8)
8008d4bc:	00c00084 	movi	r3,2
8008d4c0:	40c00115 	stw	r3,4(r8)
8008d4c4:	d8801c15 	stw	r2,112(sp)
8008d4c8:	d9001b15 	stw	r4,108(sp)
8008d4cc:	00c001c4 	movi	r3,7
8008d4d0:	1902650e 	bge	r3,r4,8008de68 <___vfiprintf_internal_r+0xeb4>
8008d4d4:	10029a1e 	bne	r2,zero,8008df40 <___vfiprintf_internal_r+0xf8c>
8008d4d8:	00c02004 	movi	r3,128
8008d4dc:	01000044 	movi	r4,1
8008d4e0:	000b883a 	mov	r5,zero
8008d4e4:	d811883a 	mov	r8,sp
8008d4e8:	e0c1b31e 	bne	fp,r3,8008dbb8 <___vfiprintf_internal_r+0xc04>
8008d4ec:	8cb9c83a 	sub	fp,r17,r18
8008d4f0:	0701b10e 	bge	zero,fp,8008dbb8 <___vfiprintf_internal_r+0xc04>
8008d4f4:	01c00404 	movi	r7,16
8008d4f8:	3f03890e 	bge	r7,fp,8008e320 <___vfiprintf_internal_r+0x136c>
8008d4fc:	00e00274 	movhi	r3,32777
8008d500:	18dae904 	addi	r3,r3,27556
8008d504:	d8c02415 	stw	r3,144(sp)
8008d508:	8007883a 	mov	r3,r16
8008d50c:	034001c4 	movi	r13,7
8008d510:	e021883a 	mov	r16,fp
8008d514:	da402515 	stw	r9,148(sp)
8008d518:	1839883a 	mov	fp,r3
8008d51c:	00000506 	br	8008d534 <___vfiprintf_internal_r+0x580>
8008d520:	29800084 	addi	r6,r5,2
8008d524:	42000204 	addi	r8,r8,8
8008d528:	180b883a 	mov	r5,r3
8008d52c:	843ffc04 	addi	r16,r16,-16
8008d530:	3c000d0e 	bge	r7,r16,8008d568 <___vfiprintf_internal_r+0x5b4>
8008d534:	10800404 	addi	r2,r2,16
8008d538:	28c00044 	addi	r3,r5,1
8008d53c:	45c00015 	stw	r23,0(r8)
8008d540:	41c00115 	stw	r7,4(r8)
8008d544:	d8801c15 	stw	r2,112(sp)
8008d548:	d8c01b15 	stw	r3,108(sp)
8008d54c:	68fff40e 	bge	r13,r3,8008d520 <___vfiprintf_internal_r+0x56c>
8008d550:	1002241e 	bne	r2,zero,8008dde4 <___vfiprintf_internal_r+0xe30>
8008d554:	843ffc04 	addi	r16,r16,-16
8008d558:	01800044 	movi	r6,1
8008d55c:	000b883a 	mov	r5,zero
8008d560:	d811883a 	mov	r8,sp
8008d564:	3c3ff316 	blt	r7,r16,8008d534 <___vfiprintf_internal_r+0x580>
8008d568:	da402517 	ldw	r9,148(sp)
8008d56c:	e007883a 	mov	r3,fp
8008d570:	8039883a 	mov	fp,r16
8008d574:	1821883a 	mov	r16,r3
8008d578:	d8c02417 	ldw	r3,144(sp)
8008d57c:	1705883a 	add	r2,r2,fp
8008d580:	47000115 	stw	fp,4(r8)
8008d584:	40c00015 	stw	r3,0(r8)
8008d588:	d8801c15 	stw	r2,112(sp)
8008d58c:	d9801b15 	stw	r6,108(sp)
8008d590:	00c001c4 	movi	r3,7
8008d594:	19827616 	blt	r3,r6,8008df70 <___vfiprintf_internal_r+0xfbc>
8008d598:	4cf9c83a 	sub	fp,r9,r19
8008d59c:	42000204 	addi	r8,r8,8
8008d5a0:	31000044 	addi	r4,r6,1
8008d5a4:	300b883a 	mov	r5,r6
8008d5a8:	07018516 	blt	zero,fp,8008dbc0 <___vfiprintf_internal_r+0xc0c>
8008d5ac:	9885883a 	add	r2,r19,r2
8008d5b0:	45400015 	stw	r21,0(r8)
8008d5b4:	44c00115 	stw	r19,4(r8)
8008d5b8:	d8801c15 	stw	r2,112(sp)
8008d5bc:	d9001b15 	stw	r4,108(sp)
8008d5c0:	00c001c4 	movi	r3,7
8008d5c4:	1901dd0e 	bge	r3,r4,8008dd3c <___vfiprintf_internal_r+0xd88>
8008d5c8:	1002401e 	bne	r2,zero,8008decc <___vfiprintf_internal_r+0xf18>
8008d5cc:	d8001b15 	stw	zero,108(sp)
8008d5d0:	a2c0010c 	andi	r11,r20,4
8008d5d4:	58000226 	beq	r11,zero,8008d5e0 <___vfiprintf_internal_r+0x62c>
8008d5d8:	8ca7c83a 	sub	r19,r17,r18
8008d5dc:	04c2f216 	blt	zero,r19,8008e1a8 <___vfiprintf_internal_r+0x11f4>
8008d5e0:	8c80010e 	bge	r17,r18,8008d5e8 <___vfiprintf_internal_r+0x634>
8008d5e4:	9023883a 	mov	r17,r18
8008d5e8:	da802317 	ldw	r10,140(sp)
8008d5ec:	5455883a 	add	r10,r10,r17
8008d5f0:	da802315 	stw	r10,140(sp)
8008d5f4:	d8001b15 	stw	zero,108(sp)
8008d5f8:	d811883a 	mov	r8,sp
8008d5fc:	003ea206 	br	8008d088 <___vfiprintf_internal_r+0xd4>
8008d600:	a5000814 	ori	r20,r20,32
8008d604:	80c00007 	ldb	r3,0(r16)
8008d608:	003ec906 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008d60c:	80c00007 	ldb	r3,0(r16)
8008d610:	1b030926 	beq	r3,r12,8008e238 <___vfiprintf_internal_r+0x1284>
8008d614:	a5000414 	ori	r20,r20,16
8008d618:	003ec506 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008d61c:	21003fcc 	andi	r4,r4,255
8008d620:	20035e1e 	bne	r4,zero,8008e39c <___vfiprintf_internal_r+0x13e8>
8008d624:	a080080c 	andi	r2,r20,32
8008d628:	1002a526 	beq	r2,zero,8008e0c0 <___vfiprintf_internal_r+0x110c>
8008d62c:	da802217 	ldw	r10,136(sp)
8008d630:	50800017 	ldw	r2,0(r10)
8008d634:	da802317 	ldw	r10,140(sp)
8008d638:	5007d7fa 	srai	r3,r10,31
8008d63c:	da802217 	ldw	r10,136(sp)
8008d640:	10c00115 	stw	r3,4(r2)
8008d644:	52800104 	addi	r10,r10,4
8008d648:	da802215 	stw	r10,136(sp)
8008d64c:	da802317 	ldw	r10,140(sp)
8008d650:	12800015 	stw	r10,0(r2)
8008d654:	003e8c06 	br	8008d088 <___vfiprintf_internal_r+0xd4>
8008d658:	21003fcc 	andi	r4,r4,255
8008d65c:	2003511e 	bne	r4,zero,8008e3a4 <___vfiprintf_internal_r+0x13f0>
8008d660:	a080080c 	andi	r2,r20,32
8008d664:	1000a126 	beq	r2,zero,8008d8ec <___vfiprintf_internal_r+0x938>
8008d668:	da802217 	ldw	r10,136(sp)
8008d66c:	d8001d85 	stb	zero,118(sp)
8008d670:	50800204 	addi	r2,r10,8
8008d674:	54800017 	ldw	r18,0(r10)
8008d678:	54c00117 	ldw	r19,4(r10)
8008d67c:	4802b416 	blt	r9,zero,8008e150 <___vfiprintf_internal_r+0x119c>
8008d680:	013fdfc4 	movi	r4,-129
8008d684:	94c6b03a 	or	r3,r18,r19
8008d688:	d8802215 	stw	r2,136(sp)
8008d68c:	a128703a 	and	r20,r20,r4
8008d690:	1800a226 	beq	r3,zero,8008d91c <___vfiprintf_internal_r+0x968>
8008d694:	0039883a 	mov	fp,zero
8008d698:	dd401a04 	addi	r21,sp,104
8008d69c:	9006d0fa 	srli	r3,r18,3
8008d6a0:	9808977a 	slli	r4,r19,29
8008d6a4:	9826d0fa 	srli	r19,r19,3
8008d6a8:	948001cc 	andi	r18,r18,7
8008d6ac:	90800c04 	addi	r2,r18,48
8008d6b0:	ad7fffc4 	addi	r21,r21,-1
8008d6b4:	20e4b03a 	or	r18,r4,r3
8008d6b8:	a8800005 	stb	r2,0(r21)
8008d6bc:	94c6b03a 	or	r3,r18,r19
8008d6c0:	183ff61e 	bne	r3,zero,8008d69c <___vfiprintf_internal_r+0x6e8>
8008d6c4:	a0c0004c 	andi	r3,r20,1
8008d6c8:	18005926 	beq	r3,zero,8008d830 <___vfiprintf_internal_r+0x87c>
8008d6cc:	10803fcc 	andi	r2,r2,255
8008d6d0:	1080201c 	xori	r2,r2,128
8008d6d4:	10bfe004 	addi	r2,r2,-128
8008d6d8:	00c00c04 	movi	r3,48
8008d6dc:	10c05426 	beq	r2,r3,8008d830 <___vfiprintf_internal_r+0x87c>
8008d6e0:	da801e17 	ldw	r10,120(sp)
8008d6e4:	a8bfffc4 	addi	r2,r21,-1
8008d6e8:	a8ffffc5 	stb	r3,-1(r21)
8008d6ec:	50a7c83a 	sub	r19,r10,r2
8008d6f0:	102b883a 	mov	r21,r2
8008d6f4:	003f2f06 	br	8008d3b4 <___vfiprintf_internal_r+0x400>
8008d6f8:	21003fcc 	andi	r4,r4,255
8008d6fc:	2003421e 	bne	r4,zero,8008e408 <___vfiprintf_internal_r+0x1454>
8008d700:	00a00274 	movhi	r2,32777
8008d704:	109a7904 	addi	r2,r2,27108
8008d708:	d8802615 	stw	r2,152(sp)
8008d70c:	a080080c 	andi	r2,r20,32
8008d710:	1000aa26 	beq	r2,zero,8008d9bc <___vfiprintf_internal_r+0xa08>
8008d714:	da802217 	ldw	r10,136(sp)
8008d718:	54800017 	ldw	r18,0(r10)
8008d71c:	54c00117 	ldw	r19,4(r10)
8008d720:	52800204 	addi	r10,r10,8
8008d724:	da802215 	stw	r10,136(sp)
8008d728:	a080004c 	andi	r2,r20,1
8008d72c:	1001d226 	beq	r2,zero,8008de78 <___vfiprintf_internal_r+0xec4>
8008d730:	94c4b03a 	or	r2,r18,r19
8008d734:	1002351e 	bne	r2,zero,8008e00c <___vfiprintf_internal_r+0x1058>
8008d738:	d8001d85 	stb	zero,118(sp)
8008d73c:	48022216 	blt	r9,zero,8008dfc8 <___vfiprintf_internal_r+0x1014>
8008d740:	00bfdfc4 	movi	r2,-129
8008d744:	a0a8703a 	and	r20,r20,r2
8008d748:	003f1506 	br	8008d3a0 <___vfiprintf_internal_r+0x3ec>
8008d74c:	da802217 	ldw	r10,136(sp)
8008d750:	04800044 	movi	r18,1
8008d754:	d8001d85 	stb	zero,118(sp)
8008d758:	50800017 	ldw	r2,0(r10)
8008d75c:	52800104 	addi	r10,r10,4
8008d760:	da802215 	stw	r10,136(sp)
8008d764:	d8801005 	stb	r2,64(sp)
8008d768:	9027883a 	mov	r19,r18
8008d76c:	dd401004 	addi	r21,sp,64
8008d770:	0013883a 	mov	r9,zero
8008d774:	003f1706 	br	8008d3d4 <___vfiprintf_internal_r+0x420>
8008d778:	21003fcc 	andi	r4,r4,255
8008d77c:	2003201e 	bne	r4,zero,8008e400 <___vfiprintf_internal_r+0x144c>
8008d780:	a080080c 	andi	r2,r20,32
8008d784:	10004b26 	beq	r2,zero,8008d8b4 <___vfiprintf_internal_r+0x900>
8008d788:	da802217 	ldw	r10,136(sp)
8008d78c:	50800117 	ldw	r2,4(r10)
8008d790:	54800017 	ldw	r18,0(r10)
8008d794:	52800204 	addi	r10,r10,8
8008d798:	da802215 	stw	r10,136(sp)
8008d79c:	1027883a 	mov	r19,r2
8008d7a0:	10022c16 	blt	r2,zero,8008e054 <___vfiprintf_internal_r+0x10a0>
8008d7a4:	df001d83 	ldbu	fp,118(sp)
8008d7a8:	48007216 	blt	r9,zero,8008d974 <___vfiprintf_internal_r+0x9c0>
8008d7ac:	00ffdfc4 	movi	r3,-129
8008d7b0:	94c4b03a 	or	r2,r18,r19
8008d7b4:	a0e8703a 	and	r20,r20,r3
8008d7b8:	1000cc26 	beq	r2,zero,8008daec <___vfiprintf_internal_r+0xb38>
8008d7bc:	98021026 	beq	r19,zero,8008e000 <___vfiprintf_internal_r+0x104c>
8008d7c0:	dc402415 	stw	r17,144(sp)
8008d7c4:	dc002515 	stw	r16,148(sp)
8008d7c8:	9823883a 	mov	r17,r19
8008d7cc:	9021883a 	mov	r16,r18
8008d7d0:	dd401a04 	addi	r21,sp,104
8008d7d4:	4825883a 	mov	r18,r9
8008d7d8:	4027883a 	mov	r19,r8
8008d7dc:	8009883a 	mov	r4,r16
8008d7e0:	880b883a 	mov	r5,r17
8008d7e4:	01800284 	movi	r6,10
8008d7e8:	000f883a 	mov	r7,zero
8008d7ec:	008f3940 	call	8008f394 <__umoddi3>
8008d7f0:	10800c04 	addi	r2,r2,48
8008d7f4:	ad7fffc4 	addi	r21,r21,-1
8008d7f8:	8009883a 	mov	r4,r16
8008d7fc:	880b883a 	mov	r5,r17
8008d800:	a8800005 	stb	r2,0(r21)
8008d804:	01800284 	movi	r6,10
8008d808:	000f883a 	mov	r7,zero
8008d80c:	008ee1c0 	call	8008ee1c <__udivdi3>
8008d810:	1021883a 	mov	r16,r2
8008d814:	10c4b03a 	or	r2,r2,r3
8008d818:	1823883a 	mov	r17,r3
8008d81c:	103fef1e 	bne	r2,zero,8008d7dc <___vfiprintf_internal_r+0x828>
8008d820:	dc402417 	ldw	r17,144(sp)
8008d824:	dc002517 	ldw	r16,148(sp)
8008d828:	9013883a 	mov	r9,r18
8008d82c:	9811883a 	mov	r8,r19
8008d830:	da801e17 	ldw	r10,120(sp)
8008d834:	5567c83a 	sub	r19,r10,r21
8008d838:	003ede06 	br	8008d3b4 <___vfiprintf_internal_r+0x400>
8008d83c:	38803fcc 	andi	r2,r7,255
8008d840:	1080201c 	xori	r2,r2,128
8008d844:	10bfe004 	addi	r2,r2,-128
8008d848:	1002371e 	bne	r2,zero,8008e128 <___vfiprintf_internal_r+0x1174>
8008d84c:	01000044 	movi	r4,1
8008d850:	01c00804 	movi	r7,32
8008d854:	80c00007 	ldb	r3,0(r16)
8008d858:	003e3506 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008d85c:	a5000054 	ori	r20,r20,1
8008d860:	80c00007 	ldb	r3,0(r16)
8008d864:	003e3206 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008d868:	a5002014 	ori	r20,r20,128
8008d86c:	80c00007 	ldb	r3,0(r16)
8008d870:	003e2f06 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008d874:	8015883a 	mov	r10,r16
8008d878:	0023883a 	mov	r17,zero
8008d87c:	18bff404 	addi	r2,r3,-48
8008d880:	50c00007 	ldb	r3,0(r10)
8008d884:	8c4002a4 	muli	r17,r17,10
8008d888:	84000044 	addi	r16,r16,1
8008d88c:	8015883a 	mov	r10,r16
8008d890:	1463883a 	add	r17,r2,r17
8008d894:	18bff404 	addi	r2,r3,-48
8008d898:	30bff92e 	bgeu	r6,r2,8008d880 <___vfiprintf_internal_r+0x8cc>
8008d89c:	003e2506 	br	8008d134 <___vfiprintf_internal_r+0x180>
8008d8a0:	21003fcc 	andi	r4,r4,255
8008d8a4:	2002d41e 	bne	r4,zero,8008e3f8 <___vfiprintf_internal_r+0x1444>
8008d8a8:	a5000414 	ori	r20,r20,16
8008d8ac:	a080080c 	andi	r2,r20,32
8008d8b0:	103fb51e 	bne	r2,zero,8008d788 <___vfiprintf_internal_r+0x7d4>
8008d8b4:	a080040c 	andi	r2,r20,16
8008d8b8:	1001f826 	beq	r2,zero,8008e09c <___vfiprintf_internal_r+0x10e8>
8008d8bc:	da802217 	ldw	r10,136(sp)
8008d8c0:	54800017 	ldw	r18,0(r10)
8008d8c4:	52800104 	addi	r10,r10,4
8008d8c8:	da802215 	stw	r10,136(sp)
8008d8cc:	9027d7fa 	srai	r19,r18,31
8008d8d0:	9805883a 	mov	r2,r19
8008d8d4:	003fb206 	br	8008d7a0 <___vfiprintf_internal_r+0x7ec>
8008d8d8:	21003fcc 	andi	r4,r4,255
8008d8dc:	2002c41e 	bne	r4,zero,8008e3f0 <___vfiprintf_internal_r+0x143c>
8008d8e0:	a5000414 	ori	r20,r20,16
8008d8e4:	a080080c 	andi	r2,r20,32
8008d8e8:	103f5f1e 	bne	r2,zero,8008d668 <___vfiprintf_internal_r+0x6b4>
8008d8ec:	a080040c 	andi	r2,r20,16
8008d8f0:	10020f26 	beq	r2,zero,8008e130 <___vfiprintf_internal_r+0x117c>
8008d8f4:	da802217 	ldw	r10,136(sp)
8008d8f8:	d8001d85 	stb	zero,118(sp)
8008d8fc:	0027883a 	mov	r19,zero
8008d900:	50800104 	addi	r2,r10,4
8008d904:	54800017 	ldw	r18,0(r10)
8008d908:	48021116 	blt	r9,zero,8008e150 <___vfiprintf_internal_r+0x119c>
8008d90c:	00ffdfc4 	movi	r3,-129
8008d910:	d8802215 	stw	r2,136(sp)
8008d914:	a0e8703a 	and	r20,r20,r3
8008d918:	903f5e1e 	bne	r18,zero,8008d694 <___vfiprintf_internal_r+0x6e0>
8008d91c:	0039883a 	mov	fp,zero
8008d920:	4802a626 	beq	r9,zero,8008e3bc <___vfiprintf_internal_r+0x1408>
8008d924:	0025883a 	mov	r18,zero
8008d928:	0027883a 	mov	r19,zero
8008d92c:	003f5a06 	br	8008d698 <___vfiprintf_internal_r+0x6e4>
8008d930:	21003fcc 	andi	r4,r4,255
8008d934:	20029f1e 	bne	r4,zero,8008e3b4 <___vfiprintf_internal_r+0x1400>
8008d938:	a5000414 	ori	r20,r20,16
8008d93c:	a080080c 	andi	r2,r20,32
8008d940:	10005e1e 	bne	r2,zero,8008dabc <___vfiprintf_internal_r+0xb08>
8008d944:	a080040c 	andi	r2,r20,16
8008d948:	1001a21e 	bne	r2,zero,8008dfd4 <___vfiprintf_internal_r+0x1020>
8008d94c:	a080100c 	andi	r2,r20,64
8008d950:	d8001d85 	stb	zero,118(sp)
8008d954:	da802217 	ldw	r10,136(sp)
8008d958:	1002231e 	bne	r2,zero,8008e1e8 <___vfiprintf_internal_r+0x1234>
8008d95c:	50800104 	addi	r2,r10,4
8008d960:	54800017 	ldw	r18,0(r10)
8008d964:	0027883a 	mov	r19,zero
8008d968:	4801a00e 	bge	r9,zero,8008dfec <___vfiprintf_internal_r+0x1038>
8008d96c:	d8802215 	stw	r2,136(sp)
8008d970:	0039883a 	mov	fp,zero
8008d974:	94c4b03a 	or	r2,r18,r19
8008d978:	103f901e 	bne	r2,zero,8008d7bc <___vfiprintf_internal_r+0x808>
8008d97c:	00800044 	movi	r2,1
8008d980:	10803fcc 	andi	r2,r2,255
8008d984:	00c00044 	movi	r3,1
8008d988:	10c05926 	beq	r2,r3,8008daf0 <___vfiprintf_internal_r+0xb3c>
8008d98c:	00c00084 	movi	r3,2
8008d990:	10ffe41e 	bne	r2,r3,8008d924 <___vfiprintf_internal_r+0x970>
8008d994:	0025883a 	mov	r18,zero
8008d998:	0027883a 	mov	r19,zero
8008d99c:	00013d06 	br	8008de94 <___vfiprintf_internal_r+0xee0>
8008d9a0:	21003fcc 	andi	r4,r4,255
8008d9a4:	2002811e 	bne	r4,zero,8008e3ac <___vfiprintf_internal_r+0x13f8>
8008d9a8:	00a00274 	movhi	r2,32777
8008d9ac:	109a7404 	addi	r2,r2,27088
8008d9b0:	d8802615 	stw	r2,152(sp)
8008d9b4:	a080080c 	andi	r2,r20,32
8008d9b8:	103f561e 	bne	r2,zero,8008d714 <___vfiprintf_internal_r+0x760>
8008d9bc:	a080040c 	andi	r2,r20,16
8008d9c0:	1001d126 	beq	r2,zero,8008e108 <___vfiprintf_internal_r+0x1154>
8008d9c4:	da802217 	ldw	r10,136(sp)
8008d9c8:	0027883a 	mov	r19,zero
8008d9cc:	54800017 	ldw	r18,0(r10)
8008d9d0:	52800104 	addi	r10,r10,4
8008d9d4:	da802215 	stw	r10,136(sp)
8008d9d8:	003f5306 	br	8008d728 <___vfiprintf_internal_r+0x774>
8008d9dc:	da802217 	ldw	r10,136(sp)
8008d9e0:	d8001d85 	stb	zero,118(sp)
8008d9e4:	55400017 	ldw	r21,0(r10)
8008d9e8:	50c00104 	addi	r3,r10,4
8008d9ec:	a8024226 	beq	r21,zero,8008e2f8 <___vfiprintf_internal_r+0x1344>
8008d9f0:	48021816 	blt	r9,zero,8008e254 <___vfiprintf_internal_r+0x12a0>
8008d9f4:	480d883a 	mov	r6,r9
8008d9f8:	000b883a 	mov	r5,zero
8008d9fc:	a809883a 	mov	r4,r21
8008da00:	d8c02a15 	stw	r3,168(sp)
8008da04:	da002b15 	stw	r8,172(sp)
8008da08:	da402c15 	stw	r9,176(sp)
8008da0c:	0089bb40 	call	80089bb4 <memchr>
8008da10:	d8c02a17 	ldw	r3,168(sp)
8008da14:	da002b17 	ldw	r8,172(sp)
8008da18:	da402c17 	ldw	r9,176(sp)
8008da1c:	10024826 	beq	r2,zero,8008e340 <___vfiprintf_internal_r+0x138c>
8008da20:	1567c83a 	sub	r19,r2,r21
8008da24:	df001d83 	ldbu	fp,118(sp)
8008da28:	d8c02215 	stw	r3,136(sp)
8008da2c:	0013883a 	mov	r9,zero
8008da30:	003e6006 	br	8008d3b4 <___vfiprintf_internal_r+0x400>
8008da34:	21003fcc 	andi	r4,r4,255
8008da38:	203fc026 	beq	r4,zero,8008d93c <___vfiprintf_internal_r+0x988>
8008da3c:	d9c01d85 	stb	r7,118(sp)
8008da40:	003fbe06 	br	8008d93c <___vfiprintf_internal_r+0x988>
8008da44:	da802217 	ldw	r10,136(sp)
8008da48:	54400017 	ldw	r17,0(r10)
8008da4c:	50800104 	addi	r2,r10,4
8008da50:	883e3b16 	blt	r17,zero,8008d340 <___vfiprintf_internal_r+0x38c>
8008da54:	d8802215 	stw	r2,136(sp)
8008da58:	80c00007 	ldb	r3,0(r16)
8008da5c:	003db406 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008da60:	01000044 	movi	r4,1
8008da64:	01c00ac4 	movi	r7,43
8008da68:	80c00007 	ldb	r3,0(r16)
8008da6c:	003db006 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008da70:	80c00007 	ldb	r3,0(r16)
8008da74:	82800044 	addi	r10,r16,1
8008da78:	1b423c26 	beq	r3,r13,8008e36c <___vfiprintf_internal_r+0x13b8>
8008da7c:	18bff404 	addi	r2,r3,-48
8008da80:	0013883a 	mov	r9,zero
8008da84:	30822b36 	bltu	r6,r2,8008e334 <___vfiprintf_internal_r+0x1380>
8008da88:	50c00007 	ldb	r3,0(r10)
8008da8c:	4a4002a4 	muli	r9,r9,10
8008da90:	54000044 	addi	r16,r10,1
8008da94:	8015883a 	mov	r10,r16
8008da98:	4893883a 	add	r9,r9,r2
8008da9c:	18bff404 	addi	r2,r3,-48
8008daa0:	30bff92e 	bgeu	r6,r2,8008da88 <___vfiprintf_internal_r+0xad4>
8008daa4:	483da30e 	bge	r9,zero,8008d134 <___vfiprintf_internal_r+0x180>
8008daa8:	027fffc4 	movi	r9,-1
8008daac:	003da106 	br	8008d134 <___vfiprintf_internal_r+0x180>
8008dab0:	a5001014 	ori	r20,r20,64
8008dab4:	80c00007 	ldb	r3,0(r16)
8008dab8:	003d9d06 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008dabc:	da802217 	ldw	r10,136(sp)
8008dac0:	d8001d85 	stb	zero,118(sp)
8008dac4:	50c00204 	addi	r3,r10,8
8008dac8:	54800017 	ldw	r18,0(r10)
8008dacc:	54c00117 	ldw	r19,4(r10)
8008dad0:	4801ca16 	blt	r9,zero,8008e1fc <___vfiprintf_internal_r+0x1248>
8008dad4:	013fdfc4 	movi	r4,-129
8008dad8:	94c4b03a 	or	r2,r18,r19
8008dadc:	d8c02215 	stw	r3,136(sp)
8008dae0:	a128703a 	and	r20,r20,r4
8008dae4:	0039883a 	mov	fp,zero
8008dae8:	103f341e 	bne	r2,zero,8008d7bc <___vfiprintf_internal_r+0x808>
8008daec:	483e2e26 	beq	r9,zero,8008d3a8 <___vfiprintf_internal_r+0x3f4>
8008daf0:	0025883a 	mov	r18,zero
8008daf4:	94800c04 	addi	r18,r18,48
8008daf8:	dc8019c5 	stb	r18,103(sp)
8008dafc:	dcc02717 	ldw	r19,156(sp)
8008db00:	dd4019c4 	addi	r21,sp,103
8008db04:	003e2b06 	br	8008d3b4 <___vfiprintf_internal_r+0x400>
8008db08:	21003fcc 	andi	r4,r4,255
8008db0c:	2002361e 	bne	r4,zero,8008e3e8 <___vfiprintf_internal_r+0x1434>
8008db10:	1801c126 	beq	r3,zero,8008e218 <___vfiprintf_internal_r+0x1264>
8008db14:	04800044 	movi	r18,1
8008db18:	d8c01005 	stb	r3,64(sp)
8008db1c:	d8001d85 	stb	zero,118(sp)
8008db20:	9027883a 	mov	r19,r18
8008db24:	dd401004 	addi	r21,sp,64
8008db28:	003f1106 	br	8008d770 <___vfiprintf_internal_r+0x7bc>
8008db2c:	d9402117 	ldw	r5,132(sp)
8008db30:	d9002017 	ldw	r4,128(sp)
8008db34:	d9801a04 	addi	r6,sp,104
8008db38:	d9c02b15 	stw	r7,172(sp)
8008db3c:	dbc02a15 	stw	r15,168(sp)
8008db40:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008db44:	d9c02b17 	ldw	r7,172(sp)
8008db48:	dbc02a17 	ldw	r15,168(sp)
8008db4c:	10006d1e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008db50:	d9801b17 	ldw	r6,108(sp)
8008db54:	d8801c17 	ldw	r2,112(sp)
8008db58:	d811883a 	mov	r8,sp
8008db5c:	31400044 	addi	r5,r6,1
8008db60:	003e3306 	br	8008d430 <___vfiprintf_internal_r+0x47c>
8008db64:	d9401b17 	ldw	r5,108(sp)
8008db68:	d8801c17 	ldw	r2,112(sp)
8008db6c:	29000044 	addi	r4,r5,1
8008db70:	d8c01d87 	ldb	r3,118(sp)
8008db74:	183e4d26 	beq	r3,zero,8008d4ac <___vfiprintf_internal_r+0x4f8>
8008db78:	00c00044 	movi	r3,1
8008db7c:	d9401d84 	addi	r5,sp,118
8008db80:	10c5883a 	add	r2,r2,r3
8008db84:	41400015 	stw	r5,0(r8)
8008db88:	40c00115 	stw	r3,4(r8)
8008db8c:	d8801c15 	stw	r2,112(sp)
8008db90:	d9001b15 	stw	r4,108(sp)
8008db94:	014001c4 	movi	r5,7
8008db98:	2900a90e 	bge	r5,r4,8008de40 <___vfiprintf_internal_r+0xe8c>
8008db9c:	1000da1e 	bne	r2,zero,8008df08 <___vfiprintf_internal_r+0xf54>
8008dba0:	7000ab1e 	bne	r14,zero,8008de50 <___vfiprintf_internal_r+0xe9c>
8008dba4:	000b883a 	mov	r5,zero
8008dba8:	1809883a 	mov	r4,r3
8008dbac:	d811883a 	mov	r8,sp
8008dbb0:	00c02004 	movi	r3,128
8008dbb4:	e0fe4d26 	beq	fp,r3,8008d4ec <___vfiprintf_internal_r+0x538>
8008dbb8:	4cf9c83a 	sub	fp,r9,r19
8008dbbc:	073e7b0e 	bge	zero,fp,8008d5ac <___vfiprintf_internal_r+0x5f8>
8008dbc0:	01c00404 	movi	r7,16
8008dbc4:	3f01900e 	bge	r7,fp,8008e208 <___vfiprintf_internal_r+0x1254>
8008dbc8:	00e00274 	movhi	r3,32777
8008dbcc:	18dae904 	addi	r3,r3,27556
8008dbd0:	d8c02415 	stw	r3,144(sp)
8008dbd4:	034001c4 	movi	r13,7
8008dbd8:	00000506 	br	8008dbf0 <___vfiprintf_internal_r+0xc3c>
8008dbdc:	29000084 	addi	r4,r5,2
8008dbe0:	42000204 	addi	r8,r8,8
8008dbe4:	180b883a 	mov	r5,r3
8008dbe8:	e73ffc04 	addi	fp,fp,-16
8008dbec:	3f000d0e 	bge	r7,fp,8008dc24 <___vfiprintf_internal_r+0xc70>
8008dbf0:	10800404 	addi	r2,r2,16
8008dbf4:	28c00044 	addi	r3,r5,1
8008dbf8:	45c00015 	stw	r23,0(r8)
8008dbfc:	41c00115 	stw	r7,4(r8)
8008dc00:	d8801c15 	stw	r2,112(sp)
8008dc04:	d8c01b15 	stw	r3,108(sp)
8008dc08:	68fff40e 	bge	r13,r3,8008dbdc <___vfiprintf_internal_r+0xc28>
8008dc0c:	1000101e 	bne	r2,zero,8008dc50 <___vfiprintf_internal_r+0xc9c>
8008dc10:	e73ffc04 	addi	fp,fp,-16
8008dc14:	01000044 	movi	r4,1
8008dc18:	000b883a 	mov	r5,zero
8008dc1c:	d811883a 	mov	r8,sp
8008dc20:	3f3ff316 	blt	r7,fp,8008dbf0 <___vfiprintf_internal_r+0xc3c>
8008dc24:	da802417 	ldw	r10,144(sp)
8008dc28:	1705883a 	add	r2,r2,fp
8008dc2c:	47000115 	stw	fp,4(r8)
8008dc30:	42800015 	stw	r10,0(r8)
8008dc34:	d8801c15 	stw	r2,112(sp)
8008dc38:	d9001b15 	stw	r4,108(sp)
8008dc3c:	00c001c4 	movi	r3,7
8008dc40:	19003616 	blt	r3,r4,8008dd1c <___vfiprintf_internal_r+0xd68>
8008dc44:	42000204 	addi	r8,r8,8
8008dc48:	21000044 	addi	r4,r4,1
8008dc4c:	003e5706 	br	8008d5ac <___vfiprintf_internal_r+0x5f8>
8008dc50:	d9402117 	ldw	r5,132(sp)
8008dc54:	d9002017 	ldw	r4,128(sp)
8008dc58:	d9801a04 	addi	r6,sp,104
8008dc5c:	d9c02b15 	stw	r7,172(sp)
8008dc60:	db402a15 	stw	r13,168(sp)
8008dc64:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008dc68:	d9c02b17 	ldw	r7,172(sp)
8008dc6c:	db402a17 	ldw	r13,168(sp)
8008dc70:	1000241e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008dc74:	d9401b17 	ldw	r5,108(sp)
8008dc78:	d8801c17 	ldw	r2,112(sp)
8008dc7c:	d811883a 	mov	r8,sp
8008dc80:	29000044 	addi	r4,r5,1
8008dc84:	003fd806 	br	8008dbe8 <___vfiprintf_internal_r+0xc34>
8008dc88:	d9401b17 	ldw	r5,108(sp)
8008dc8c:	00e00274 	movhi	r3,32777
8008dc90:	18daed04 	addi	r3,r3,27572
8008dc94:	d8c02415 	stw	r3,144(sp)
8008dc98:	29400044 	addi	r5,r5,1
8008dc9c:	d8c02417 	ldw	r3,144(sp)
8008dca0:	14c5883a 	add	r2,r2,r19
8008dca4:	44c00115 	stw	r19,4(r8)
8008dca8:	40c00015 	stw	r3,0(r8)
8008dcac:	d8801c15 	stw	r2,112(sp)
8008dcb0:	d9401b15 	stw	r5,108(sp)
8008dcb4:	00c001c4 	movi	r3,7
8008dcb8:	1940070e 	bge	r3,r5,8008dcd8 <___vfiprintf_internal_r+0xd24>
8008dcbc:	103e4826 	beq	r2,zero,8008d5e0 <___vfiprintf_internal_r+0x62c>
8008dcc0:	d9402117 	ldw	r5,132(sp)
8008dcc4:	d9002017 	ldw	r4,128(sp)
8008dcc8:	d9801a04 	addi	r6,sp,104
8008dccc:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008dcd0:	10000c1e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008dcd4:	d8801c17 	ldw	r2,112(sp)
8008dcd8:	8c80010e 	bge	r17,r18,8008dce0 <___vfiprintf_internal_r+0xd2c>
8008dcdc:	9023883a 	mov	r17,r18
8008dce0:	da802317 	ldw	r10,140(sp)
8008dce4:	5455883a 	add	r10,r10,r17
8008dce8:	da802315 	stw	r10,140(sp)
8008dcec:	103e4126 	beq	r2,zero,8008d5f4 <___vfiprintf_internal_r+0x640>
8008dcf0:	d9402117 	ldw	r5,132(sp)
8008dcf4:	d9002017 	ldw	r4,128(sp)
8008dcf8:	d9801a04 	addi	r6,sp,104
8008dcfc:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008dd00:	103e3c26 	beq	r2,zero,8008d5f4 <___vfiprintf_internal_r+0x640>
8008dd04:	dd002117 	ldw	r20,132(sp)
8008dd08:	a080030b 	ldhu	r2,12(r20)
8008dd0c:	1080100c 	andi	r2,r2,64
8008dd10:	1001231e 	bne	r2,zero,8008e1a0 <___vfiprintf_internal_r+0x11ec>
8008dd14:	d8802317 	ldw	r2,140(sp)
8008dd18:	003d7b06 	br	8008d308 <___vfiprintf_internal_r+0x354>
8008dd1c:	1000991e 	bne	r2,zero,8008df84 <___vfiprintf_internal_r+0xfd0>
8008dd20:	00c00044 	movi	r3,1
8008dd24:	9805883a 	mov	r2,r19
8008dd28:	dd400015 	stw	r21,0(sp)
8008dd2c:	dcc00115 	stw	r19,4(sp)
8008dd30:	dcc01c15 	stw	r19,112(sp)
8008dd34:	d8c01b15 	stw	r3,108(sp)
8008dd38:	d811883a 	mov	r8,sp
8008dd3c:	42000204 	addi	r8,r8,8
8008dd40:	a2c0010c 	andi	r11,r20,4
8008dd44:	583fe426 	beq	r11,zero,8008dcd8 <___vfiprintf_internal_r+0xd24>
8008dd48:	8ca7c83a 	sub	r19,r17,r18
8008dd4c:	04ffe20e 	bge	zero,r19,8008dcd8 <___vfiprintf_internal_r+0xd24>
8008dd50:	01c00404 	movi	r7,16
8008dd54:	3cffcc0e 	bge	r7,r19,8008dc88 <___vfiprintf_internal_r+0xcd4>
8008dd58:	02a00274 	movhi	r10,32777
8008dd5c:	529aed04 	addi	r10,r10,27572
8008dd60:	d9001b17 	ldw	r4,108(sp)
8008dd64:	da802415 	stw	r10,144(sp)
8008dd68:	382b883a 	mov	r21,r7
8008dd6c:	050001c4 	movi	r20,7
8008dd70:	df002017 	ldw	fp,128(sp)
8008dd74:	00000506 	br	8008dd8c <___vfiprintf_internal_r+0xdd8>
8008dd78:	21400084 	addi	r5,r4,2
8008dd7c:	42000204 	addi	r8,r8,8
8008dd80:	1809883a 	mov	r4,r3
8008dd84:	9cfffc04 	addi	r19,r19,-16
8008dd88:	acffc40e 	bge	r21,r19,8008dc9c <___vfiprintf_internal_r+0xce8>
8008dd8c:	10800404 	addi	r2,r2,16
8008dd90:	20c00044 	addi	r3,r4,1
8008dd94:	45800015 	stw	r22,0(r8)
8008dd98:	45400115 	stw	r21,4(r8)
8008dd9c:	d8801c15 	stw	r2,112(sp)
8008dda0:	d8c01b15 	stw	r3,108(sp)
8008dda4:	a0fff40e 	bge	r20,r3,8008dd78 <___vfiprintf_internal_r+0xdc4>
8008dda8:	1000041e 	bne	r2,zero,8008ddbc <___vfiprintf_internal_r+0xe08>
8008ddac:	01400044 	movi	r5,1
8008ddb0:	0009883a 	mov	r4,zero
8008ddb4:	d811883a 	mov	r8,sp
8008ddb8:	003ff206 	br	8008dd84 <___vfiprintf_internal_r+0xdd0>
8008ddbc:	d9402117 	ldw	r5,132(sp)
8008ddc0:	d9801a04 	addi	r6,sp,104
8008ddc4:	e009883a 	mov	r4,fp
8008ddc8:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008ddcc:	103fcd1e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008ddd0:	d9001b17 	ldw	r4,108(sp)
8008ddd4:	d8801c17 	ldw	r2,112(sp)
8008ddd8:	d811883a 	mov	r8,sp
8008dddc:	21400044 	addi	r5,r4,1
8008dde0:	003fe806 	br	8008dd84 <___vfiprintf_internal_r+0xdd0>
8008dde4:	d9402117 	ldw	r5,132(sp)
8008dde8:	d9002017 	ldw	r4,128(sp)
8008ddec:	d9801a04 	addi	r6,sp,104
8008ddf0:	d9c02b15 	stw	r7,172(sp)
8008ddf4:	db402a15 	stw	r13,168(sp)
8008ddf8:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008ddfc:	d9c02b17 	ldw	r7,172(sp)
8008de00:	db402a17 	ldw	r13,168(sp)
8008de04:	103fbf1e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008de08:	d9401b17 	ldw	r5,108(sp)
8008de0c:	d8801c17 	ldw	r2,112(sp)
8008de10:	d811883a 	mov	r8,sp
8008de14:	29800044 	addi	r6,r5,1
8008de18:	003dc406 	br	8008d52c <___vfiprintf_internal_r+0x578>
8008de1c:	1000d21e 	bne	r2,zero,8008e168 <___vfiprintf_internal_r+0x11b4>
8008de20:	d8c01d87 	ldb	r3,118(sp)
8008de24:	18009526 	beq	r3,zero,8008e07c <___vfiprintf_internal_r+0x10c8>
8008de28:	00800044 	movi	r2,1
8008de2c:	d8c01d84 	addi	r3,sp,118
8008de30:	1009883a 	mov	r4,r2
8008de34:	d8c00015 	stw	r3,0(sp)
8008de38:	d8800115 	stw	r2,4(sp)
8008de3c:	d811883a 	mov	r8,sp
8008de40:	200b883a 	mov	r5,r4
8008de44:	42000204 	addi	r8,r8,8
8008de48:	21000044 	addi	r4,r4,1
8008de4c:	003d9706 	br	8008d4ac <___vfiprintf_internal_r+0x4f8>
8008de50:	d9001d04 	addi	r4,sp,116
8008de54:	00800084 	movi	r2,2
8008de58:	d9000015 	stw	r4,0(sp)
8008de5c:	d8800115 	stw	r2,4(sp)
8008de60:	1809883a 	mov	r4,r3
8008de64:	d811883a 	mov	r8,sp
8008de68:	200b883a 	mov	r5,r4
8008de6c:	42000204 	addi	r8,r8,8
8008de70:	21000044 	addi	r4,r4,1
8008de74:	003f4e06 	br	8008dbb0 <___vfiprintf_internal_r+0xbfc>
8008de78:	d8001d85 	stb	zero,118(sp)
8008de7c:	48005016 	blt	r9,zero,8008dfc0 <___vfiprintf_internal_r+0x100c>
8008de80:	00ffdfc4 	movi	r3,-129
8008de84:	94c4b03a 	or	r2,r18,r19
8008de88:	a0e8703a 	and	r20,r20,r3
8008de8c:	103d4426 	beq	r2,zero,8008d3a0 <___vfiprintf_internal_r+0x3ec>
8008de90:	0039883a 	mov	fp,zero
8008de94:	d9002617 	ldw	r4,152(sp)
8008de98:	dd401a04 	addi	r21,sp,104
8008de9c:	908003cc 	andi	r2,r18,15
8008dea0:	9806973a 	slli	r3,r19,28
8008dea4:	2085883a 	add	r2,r4,r2
8008dea8:	9024d13a 	srli	r18,r18,4
8008deac:	10800003 	ldbu	r2,0(r2)
8008deb0:	9826d13a 	srli	r19,r19,4
8008deb4:	ad7fffc4 	addi	r21,r21,-1
8008deb8:	1ca4b03a 	or	r18,r3,r18
8008debc:	a8800005 	stb	r2,0(r21)
8008dec0:	94c4b03a 	or	r2,r18,r19
8008dec4:	103ff51e 	bne	r2,zero,8008de9c <___vfiprintf_internal_r+0xee8>
8008dec8:	003e5906 	br	8008d830 <___vfiprintf_internal_r+0x87c>
8008decc:	d9402117 	ldw	r5,132(sp)
8008ded0:	d9002017 	ldw	r4,128(sp)
8008ded4:	d9801a04 	addi	r6,sp,104
8008ded8:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008dedc:	103f891e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008dee0:	d8801c17 	ldw	r2,112(sp)
8008dee4:	d811883a 	mov	r8,sp
8008dee8:	003f9506 	br	8008dd40 <___vfiprintf_internal_r+0xd8c>
8008deec:	d9402117 	ldw	r5,132(sp)
8008def0:	d9002017 	ldw	r4,128(sp)
8008def4:	d9801a04 	addi	r6,sp,104
8008def8:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008defc:	103f811e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008df00:	d811883a 	mov	r8,sp
8008df04:	003ced06 	br	8008d2bc <___vfiprintf_internal_r+0x308>
8008df08:	d9402117 	ldw	r5,132(sp)
8008df0c:	d9002017 	ldw	r4,128(sp)
8008df10:	d9801a04 	addi	r6,sp,104
8008df14:	da402c15 	stw	r9,176(sp)
8008df18:	db802a15 	stw	r14,168(sp)
8008df1c:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008df20:	da402c17 	ldw	r9,176(sp)
8008df24:	db802a17 	ldw	r14,168(sp)
8008df28:	103f761e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008df2c:	d9401b17 	ldw	r5,108(sp)
8008df30:	d8801c17 	ldw	r2,112(sp)
8008df34:	d811883a 	mov	r8,sp
8008df38:	29000044 	addi	r4,r5,1
8008df3c:	003d5b06 	br	8008d4ac <___vfiprintf_internal_r+0x4f8>
8008df40:	d9402117 	ldw	r5,132(sp)
8008df44:	d9002017 	ldw	r4,128(sp)
8008df48:	d9801a04 	addi	r6,sp,104
8008df4c:	da402c15 	stw	r9,176(sp)
8008df50:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008df54:	da402c17 	ldw	r9,176(sp)
8008df58:	103f6a1e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008df5c:	d9401b17 	ldw	r5,108(sp)
8008df60:	d8801c17 	ldw	r2,112(sp)
8008df64:	d811883a 	mov	r8,sp
8008df68:	29000044 	addi	r4,r5,1
8008df6c:	003f1006 	br	8008dbb0 <___vfiprintf_internal_r+0xbfc>
8008df70:	1000c31e 	bne	r2,zero,8008e280 <___vfiprintf_internal_r+0x12cc>
8008df74:	01000044 	movi	r4,1
8008df78:	000b883a 	mov	r5,zero
8008df7c:	d811883a 	mov	r8,sp
8008df80:	003f0d06 	br	8008dbb8 <___vfiprintf_internal_r+0xc04>
8008df84:	d9402117 	ldw	r5,132(sp)
8008df88:	d9002017 	ldw	r4,128(sp)
8008df8c:	d9801a04 	addi	r6,sp,104
8008df90:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008df94:	103f5b1e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008df98:	d9001b17 	ldw	r4,108(sp)
8008df9c:	d8801c17 	ldw	r2,112(sp)
8008dfa0:	d811883a 	mov	r8,sp
8008dfa4:	21000044 	addi	r4,r4,1
8008dfa8:	003d8006 	br	8008d5ac <___vfiprintf_internal_r+0x5f8>
8008dfac:	01200274 	movhi	r4,32777
8008dfb0:	211a7904 	addi	r4,r4,27108
8008dfb4:	d9002615 	stw	r4,152(sp)
8008dfb8:	d8c02215 	stw	r3,136(sp)
8008dfbc:	1029883a 	mov	r20,r2
8008dfc0:	94c4b03a 	or	r2,r18,r19
8008dfc4:	103fb21e 	bne	r2,zero,8008de90 <___vfiprintf_internal_r+0xedc>
8008dfc8:	0039883a 	mov	fp,zero
8008dfcc:	00800084 	movi	r2,2
8008dfd0:	003e6b06 	br	8008d980 <___vfiprintf_internal_r+0x9cc>
8008dfd4:	da802217 	ldw	r10,136(sp)
8008dfd8:	d8001d85 	stb	zero,118(sp)
8008dfdc:	0027883a 	mov	r19,zero
8008dfe0:	50800104 	addi	r2,r10,4
8008dfe4:	54800017 	ldw	r18,0(r10)
8008dfe8:	483e6016 	blt	r9,zero,8008d96c <___vfiprintf_internal_r+0x9b8>
8008dfec:	00ffdfc4 	movi	r3,-129
8008dff0:	d8802215 	stw	r2,136(sp)
8008dff4:	a0e8703a 	and	r20,r20,r3
8008dff8:	0039883a 	mov	fp,zero
8008dffc:	903ebb26 	beq	r18,zero,8008daec <___vfiprintf_internal_r+0xb38>
8008e000:	00800244 	movi	r2,9
8008e004:	14bdee36 	bltu	r2,r18,8008d7c0 <___vfiprintf_internal_r+0x80c>
8008e008:	003eba06 	br	8008daf4 <___vfiprintf_internal_r+0xb40>
8008e00c:	00800c04 	movi	r2,48
8008e010:	d8c01d45 	stb	r3,117(sp)
8008e014:	d8801d05 	stb	r2,116(sp)
8008e018:	d8001d85 	stb	zero,118(sp)
8008e01c:	a0c00094 	ori	r3,r20,2
8008e020:	4800a916 	blt	r9,zero,8008e2c8 <___vfiprintf_internal_r+0x1314>
8008e024:	00bfdfc4 	movi	r2,-129
8008e028:	a096703a 	and	r11,r20,r2
8008e02c:	5d000094 	ori	r20,r11,2
8008e030:	0039883a 	mov	fp,zero
8008e034:	003f9706 	br	8008de94 <___vfiprintf_internal_r+0xee0>
8008e038:	8025883a 	mov	r18,r16
8008e03c:	003c2e06 	br	8008d0f8 <___vfiprintf_internal_r+0x144>
8008e040:	00a00274 	movhi	r2,32777
8008e044:	109a7904 	addi	r2,r2,27108
8008e048:	0039883a 	mov	fp,zero
8008e04c:	d8802615 	stw	r2,152(sp)
8008e050:	003f9006 	br	8008de94 <___vfiprintf_internal_r+0xee0>
8008e054:	04a5c83a 	sub	r18,zero,r18
8008e058:	07000b44 	movi	fp,45
8008e05c:	9004c03a 	cmpne	r2,r18,zero
8008e060:	04e7c83a 	sub	r19,zero,r19
8008e064:	df001d85 	stb	fp,118(sp)
8008e068:	98a7c83a 	sub	r19,r19,r2
8008e06c:	48009f16 	blt	r9,zero,8008e2ec <___vfiprintf_internal_r+0x1338>
8008e070:	00bfdfc4 	movi	r2,-129
8008e074:	a0a8703a 	and	r20,r20,r2
8008e078:	003dd006 	br	8008d7bc <___vfiprintf_internal_r+0x808>
8008e07c:	70004c26 	beq	r14,zero,8008e1b0 <___vfiprintf_internal_r+0x11fc>
8008e080:	00800084 	movi	r2,2
8008e084:	d8c01d04 	addi	r3,sp,116
8008e088:	d8c00015 	stw	r3,0(sp)
8008e08c:	d8800115 	stw	r2,4(sp)
8008e090:	01000044 	movi	r4,1
8008e094:	d811883a 	mov	r8,sp
8008e098:	003f7306 	br	8008de68 <___vfiprintf_internal_r+0xeb4>
8008e09c:	a080100c 	andi	r2,r20,64
8008e0a0:	da802217 	ldw	r10,136(sp)
8008e0a4:	103e0626 	beq	r2,zero,8008d8c0 <___vfiprintf_internal_r+0x90c>
8008e0a8:	5480000f 	ldh	r18,0(r10)
8008e0ac:	52800104 	addi	r10,r10,4
8008e0b0:	da802215 	stw	r10,136(sp)
8008e0b4:	9027d7fa 	srai	r19,r18,31
8008e0b8:	9805883a 	mov	r2,r19
8008e0bc:	003db806 	br	8008d7a0 <___vfiprintf_internal_r+0x7ec>
8008e0c0:	a080040c 	andi	r2,r20,16
8008e0c4:	1000091e 	bne	r2,zero,8008e0ec <___vfiprintf_internal_r+0x1138>
8008e0c8:	a2c0100c 	andi	r11,r20,64
8008e0cc:	58000726 	beq	r11,zero,8008e0ec <___vfiprintf_internal_r+0x1138>
8008e0d0:	da802217 	ldw	r10,136(sp)
8008e0d4:	50800017 	ldw	r2,0(r10)
8008e0d8:	52800104 	addi	r10,r10,4
8008e0dc:	da802215 	stw	r10,136(sp)
8008e0e0:	da802317 	ldw	r10,140(sp)
8008e0e4:	1280000d 	sth	r10,0(r2)
8008e0e8:	003be706 	br	8008d088 <___vfiprintf_internal_r+0xd4>
8008e0ec:	da802217 	ldw	r10,136(sp)
8008e0f0:	50800017 	ldw	r2,0(r10)
8008e0f4:	52800104 	addi	r10,r10,4
8008e0f8:	da802215 	stw	r10,136(sp)
8008e0fc:	da802317 	ldw	r10,140(sp)
8008e100:	12800015 	stw	r10,0(r2)
8008e104:	003be006 	br	8008d088 <___vfiprintf_internal_r+0xd4>
8008e108:	a080100c 	andi	r2,r20,64
8008e10c:	da802217 	ldw	r10,136(sp)
8008e110:	10003026 	beq	r2,zero,8008e1d4 <___vfiprintf_internal_r+0x1220>
8008e114:	5480000b 	ldhu	r18,0(r10)
8008e118:	52800104 	addi	r10,r10,4
8008e11c:	0027883a 	mov	r19,zero
8008e120:	da802215 	stw	r10,136(sp)
8008e124:	003d8006 	br	8008d728 <___vfiprintf_internal_r+0x774>
8008e128:	80c00007 	ldb	r3,0(r16)
8008e12c:	003c0006 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008e130:	a080100c 	andi	r2,r20,64
8008e134:	d8001d85 	stb	zero,118(sp)
8008e138:	da802217 	ldw	r10,136(sp)
8008e13c:	1000201e 	bne	r2,zero,8008e1c0 <___vfiprintf_internal_r+0x120c>
8008e140:	50800104 	addi	r2,r10,4
8008e144:	54800017 	ldw	r18,0(r10)
8008e148:	0027883a 	mov	r19,zero
8008e14c:	483def0e 	bge	r9,zero,8008d90c <___vfiprintf_internal_r+0x958>
8008e150:	94c6b03a 	or	r3,r18,r19
8008e154:	d8802215 	stw	r2,136(sp)
8008e158:	183d4e1e 	bne	r3,zero,8008d694 <___vfiprintf_internal_r+0x6e0>
8008e15c:	0039883a 	mov	fp,zero
8008e160:	0005883a 	mov	r2,zero
8008e164:	003e0606 	br	8008d980 <___vfiprintf_internal_r+0x9cc>
8008e168:	d9402117 	ldw	r5,132(sp)
8008e16c:	d9002017 	ldw	r4,128(sp)
8008e170:	d9801a04 	addi	r6,sp,104
8008e174:	da402c15 	stw	r9,176(sp)
8008e178:	db802a15 	stw	r14,168(sp)
8008e17c:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008e180:	da402c17 	ldw	r9,176(sp)
8008e184:	db802a17 	ldw	r14,168(sp)
8008e188:	103ede1e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008e18c:	d9401b17 	ldw	r5,108(sp)
8008e190:	d8801c17 	ldw	r2,112(sp)
8008e194:	d811883a 	mov	r8,sp
8008e198:	29000044 	addi	r4,r5,1
8008e19c:	003e7406 	br	8008db70 <___vfiprintf_internal_r+0xbbc>
8008e1a0:	00bfffc4 	movi	r2,-1
8008e1a4:	003c5806 	br	8008d308 <___vfiprintf_internal_r+0x354>
8008e1a8:	d811883a 	mov	r8,sp
8008e1ac:	003ee806 	br	8008dd50 <___vfiprintf_internal_r+0xd9c>
8008e1b0:	000b883a 	mov	r5,zero
8008e1b4:	01000044 	movi	r4,1
8008e1b8:	d811883a 	mov	r8,sp
8008e1bc:	003e7c06 	br	8008dbb0 <___vfiprintf_internal_r+0xbfc>
8008e1c0:	50800104 	addi	r2,r10,4
8008e1c4:	5480000b 	ldhu	r18,0(r10)
8008e1c8:	0027883a 	mov	r19,zero
8008e1cc:	483dcf0e 	bge	r9,zero,8008d90c <___vfiprintf_internal_r+0x958>
8008e1d0:	003fdf06 	br	8008e150 <___vfiprintf_internal_r+0x119c>
8008e1d4:	54800017 	ldw	r18,0(r10)
8008e1d8:	52800104 	addi	r10,r10,4
8008e1dc:	0027883a 	mov	r19,zero
8008e1e0:	da802215 	stw	r10,136(sp)
8008e1e4:	003d5006 	br	8008d728 <___vfiprintf_internal_r+0x774>
8008e1e8:	50800104 	addi	r2,r10,4
8008e1ec:	5480000b 	ldhu	r18,0(r10)
8008e1f0:	0027883a 	mov	r19,zero
8008e1f4:	483f7d0e 	bge	r9,zero,8008dfec <___vfiprintf_internal_r+0x1038>
8008e1f8:	003ddc06 	br	8008d96c <___vfiprintf_internal_r+0x9b8>
8008e1fc:	d8c02215 	stw	r3,136(sp)
8008e200:	0039883a 	mov	fp,zero
8008e204:	003ddb06 	br	8008d974 <___vfiprintf_internal_r+0x9c0>
8008e208:	02a00274 	movhi	r10,32777
8008e20c:	529ae904 	addi	r10,r10,27556
8008e210:	da802415 	stw	r10,144(sp)
8008e214:	003e8306 	br	8008dc24 <___vfiprintf_internal_r+0xc70>
8008e218:	d8801c17 	ldw	r2,112(sp)
8008e21c:	dd002117 	ldw	r20,132(sp)
8008e220:	103eb926 	beq	r2,zero,8008dd08 <___vfiprintf_internal_r+0xd54>
8008e224:	d9002017 	ldw	r4,128(sp)
8008e228:	d9801a04 	addi	r6,sp,104
8008e22c:	a00b883a 	mov	r5,r20
8008e230:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008e234:	003eb406 	br	8008dd08 <___vfiprintf_internal_r+0xd54>
8008e238:	80c00043 	ldbu	r3,1(r16)
8008e23c:	a5000814 	ori	r20,r20,32
8008e240:	84000044 	addi	r16,r16,1
8008e244:	18c03fcc 	andi	r3,r3,255
8008e248:	18c0201c 	xori	r3,r3,128
8008e24c:	18ffe004 	addi	r3,r3,-128
8008e250:	003bb706 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008e254:	a809883a 	mov	r4,r21
8008e258:	d8c02a15 	stw	r3,168(sp)
8008e25c:	da002b15 	stw	r8,172(sp)
8008e260:	00820100 	call	80082010 <strlen>
8008e264:	d8c02a17 	ldw	r3,168(sp)
8008e268:	1027883a 	mov	r19,r2
8008e26c:	df001d83 	ldbu	fp,118(sp)
8008e270:	d8c02215 	stw	r3,136(sp)
8008e274:	0013883a 	mov	r9,zero
8008e278:	da002b17 	ldw	r8,172(sp)
8008e27c:	003c4d06 	br	8008d3b4 <___vfiprintf_internal_r+0x400>
8008e280:	d9402117 	ldw	r5,132(sp)
8008e284:	d9002017 	ldw	r4,128(sp)
8008e288:	d9801a04 	addi	r6,sp,104
8008e28c:	da402c15 	stw	r9,176(sp)
8008e290:	008cea00 	call	8008cea0 <__sprint_r.part.0>
8008e294:	da402c17 	ldw	r9,176(sp)
8008e298:	103e9a1e 	bne	r2,zero,8008dd04 <___vfiprintf_internal_r+0xd50>
8008e29c:	d9401b17 	ldw	r5,108(sp)
8008e2a0:	d8801c17 	ldw	r2,112(sp)
8008e2a4:	d811883a 	mov	r8,sp
8008e2a8:	29000044 	addi	r4,r5,1
8008e2ac:	003e4206 	br	8008dbb8 <___vfiprintf_internal_r+0xc04>
8008e2b0:	d9401b17 	ldw	r5,108(sp)
8008e2b4:	01200274 	movhi	r4,32777
8008e2b8:	211aed04 	addi	r4,r4,27572
8008e2bc:	d9002415 	stw	r4,144(sp)
8008e2c0:	29400044 	addi	r5,r5,1
8008e2c4:	003c6d06 	br	8008d47c <___vfiprintf_internal_r+0x4c8>
8008e2c8:	0039883a 	mov	fp,zero
8008e2cc:	00800084 	movi	r2,2
8008e2d0:	10803fcc 	andi	r2,r2,255
8008e2d4:	01000044 	movi	r4,1
8008e2d8:	11001e26 	beq	r2,r4,8008e354 <___vfiprintf_internal_r+0x13a0>
8008e2dc:	01000084 	movi	r4,2
8008e2e0:	11001e1e 	bne	r2,r4,8008e35c <___vfiprintf_internal_r+0x13a8>
8008e2e4:	1829883a 	mov	r20,r3
8008e2e8:	003eea06 	br	8008de94 <___vfiprintf_internal_r+0xee0>
8008e2ec:	a007883a 	mov	r3,r20
8008e2f0:	00800044 	movi	r2,1
8008e2f4:	003ff606 	br	8008e2d0 <___vfiprintf_internal_r+0x131c>
8008e2f8:	00800184 	movi	r2,6
8008e2fc:	1240012e 	bgeu	r2,r9,8008e304 <___vfiprintf_internal_r+0x1350>
8008e300:	1013883a 	mov	r9,r2
8008e304:	4827883a 	mov	r19,r9
8008e308:	4825883a 	mov	r18,r9
8008e30c:	48001516 	blt	r9,zero,8008e364 <___vfiprintf_internal_r+0x13b0>
8008e310:	05600274 	movhi	r21,32777
8008e314:	d8c02215 	stw	r3,136(sp)
8008e318:	ad5a7e04 	addi	r21,r21,27128
8008e31c:	003d1406 	br	8008d770 <___vfiprintf_internal_r+0x7bc>
8008e320:	02a00274 	movhi	r10,32777
8008e324:	529ae904 	addi	r10,r10,27556
8008e328:	da802415 	stw	r10,144(sp)
8008e32c:	200d883a 	mov	r6,r4
8008e330:	003c9106 	br	8008d578 <___vfiprintf_internal_r+0x5c4>
8008e334:	5021883a 	mov	r16,r10
8008e338:	0013883a 	mov	r9,zero
8008e33c:	003b7d06 	br	8008d134 <___vfiprintf_internal_r+0x180>
8008e340:	4827883a 	mov	r19,r9
8008e344:	df001d83 	ldbu	fp,118(sp)
8008e348:	d8c02215 	stw	r3,136(sp)
8008e34c:	0013883a 	mov	r9,zero
8008e350:	003c1806 	br	8008d3b4 <___vfiprintf_internal_r+0x400>
8008e354:	1829883a 	mov	r20,r3
8008e358:	003d1806 	br	8008d7bc <___vfiprintf_internal_r+0x808>
8008e35c:	1829883a 	mov	r20,r3
8008e360:	003ccd06 	br	8008d698 <___vfiprintf_internal_r+0x6e4>
8008e364:	0025883a 	mov	r18,zero
8008e368:	003fe906 	br	8008e310 <___vfiprintf_internal_r+0x135c>
8008e36c:	d8802217 	ldw	r2,136(sp)
8008e370:	80c00043 	ldbu	r3,1(r16)
8008e374:	5021883a 	mov	r16,r10
8008e378:	12400017 	ldw	r9,0(r2)
8008e37c:	10800104 	addi	r2,r2,4
8008e380:	d8802215 	stw	r2,136(sp)
8008e384:	483faf0e 	bge	r9,zero,8008e244 <___vfiprintf_internal_r+0x1290>
8008e388:	18c03fcc 	andi	r3,r3,255
8008e38c:	18c0201c 	xori	r3,r3,128
8008e390:	027fffc4 	movi	r9,-1
8008e394:	18ffe004 	addi	r3,r3,-128
8008e398:	003b6506 	br	8008d130 <___vfiprintf_internal_r+0x17c>
8008e39c:	d9c01d85 	stb	r7,118(sp)
8008e3a0:	003ca006 	br	8008d624 <___vfiprintf_internal_r+0x670>
8008e3a4:	d9c01d85 	stb	r7,118(sp)
8008e3a8:	003cad06 	br	8008d660 <___vfiprintf_internal_r+0x6ac>
8008e3ac:	d9c01d85 	stb	r7,118(sp)
8008e3b0:	003d7d06 	br	8008d9a8 <___vfiprintf_internal_r+0x9f4>
8008e3b4:	d9c01d85 	stb	r7,118(sp)
8008e3b8:	003d5f06 	br	8008d938 <___vfiprintf_internal_r+0x984>
8008e3bc:	a080004c 	andi	r2,r20,1
8008e3c0:	0039883a 	mov	fp,zero
8008e3c4:	10000526 	beq	r2,zero,8008e3dc <___vfiprintf_internal_r+0x1428>
8008e3c8:	00800c04 	movi	r2,48
8008e3cc:	d88019c5 	stb	r2,103(sp)
8008e3d0:	dcc02717 	ldw	r19,156(sp)
8008e3d4:	dd4019c4 	addi	r21,sp,103
8008e3d8:	003bf606 	br	8008d3b4 <___vfiprintf_internal_r+0x400>
8008e3dc:	0027883a 	mov	r19,zero
8008e3e0:	dd401a04 	addi	r21,sp,104
8008e3e4:	003bf306 	br	8008d3b4 <___vfiprintf_internal_r+0x400>
8008e3e8:	d9c01d85 	stb	r7,118(sp)
8008e3ec:	003dc806 	br	8008db10 <___vfiprintf_internal_r+0xb5c>
8008e3f0:	d9c01d85 	stb	r7,118(sp)
8008e3f4:	003d3a06 	br	8008d8e0 <___vfiprintf_internal_r+0x92c>
8008e3f8:	d9c01d85 	stb	r7,118(sp)
8008e3fc:	003d2a06 	br	8008d8a8 <___vfiprintf_internal_r+0x8f4>
8008e400:	d9c01d85 	stb	r7,118(sp)
8008e404:	003cde06 	br	8008d780 <___vfiprintf_internal_r+0x7cc>
8008e408:	d9c01d85 	stb	r7,118(sp)
8008e40c:	003cbc06 	br	8008d700 <___vfiprintf_internal_r+0x74c>

8008e410 <__vfiprintf_internal>:
8008e410:	00a002b4 	movhi	r2,32778
8008e414:	10a29e04 	addi	r2,r2,-30088
8008e418:	300f883a 	mov	r7,r6
8008e41c:	280d883a 	mov	r6,r5
8008e420:	200b883a 	mov	r5,r4
8008e424:	11000017 	ldw	r4,0(r2)
8008e428:	008cfb41 	jmpi	8008cfb4 <___vfiprintf_internal_r>

8008e42c <__sbprintf>:
8008e42c:	2880030b 	ldhu	r2,12(r5)
8008e430:	2ac01917 	ldw	r11,100(r5)
8008e434:	2a80038b 	ldhu	r10,14(r5)
8008e438:	2a400717 	ldw	r9,28(r5)
8008e43c:	2a000917 	ldw	r8,36(r5)
8008e440:	defee204 	addi	sp,sp,-1144
8008e444:	00c10004 	movi	r3,1024
8008e448:	dc011a15 	stw	r16,1128(sp)
8008e44c:	10bfff4c 	andi	r2,r2,65533
8008e450:	2821883a 	mov	r16,r5
8008e454:	d8cb883a 	add	r5,sp,r3
8008e458:	dc811c15 	stw	r18,1136(sp)
8008e45c:	dc411b15 	stw	r17,1132(sp)
8008e460:	dfc11d15 	stw	ra,1140(sp)
8008e464:	2025883a 	mov	r18,r4
8008e468:	d881030d 	sth	r2,1036(sp)
8008e46c:	dac11915 	stw	r11,1124(sp)
8008e470:	da81038d 	sth	r10,1038(sp)
8008e474:	da410715 	stw	r9,1052(sp)
8008e478:	da010915 	stw	r8,1060(sp)
8008e47c:	dec10015 	stw	sp,1024(sp)
8008e480:	dec10415 	stw	sp,1040(sp)
8008e484:	d8c10215 	stw	r3,1032(sp)
8008e488:	d8c10515 	stw	r3,1044(sp)
8008e48c:	d8010615 	stw	zero,1048(sp)
8008e490:	008cfb40 	call	8008cfb4 <___vfiprintf_internal_r>
8008e494:	1023883a 	mov	r17,r2
8008e498:	10000416 	blt	r2,zero,8008e4ac <__sbprintf+0x80>
8008e49c:	d9410004 	addi	r5,sp,1024
8008e4a0:	9009883a 	mov	r4,r18
8008e4a4:	008826c0 	call	8008826c <_fflush_r>
8008e4a8:	10000d1e 	bne	r2,zero,8008e4e0 <__sbprintf+0xb4>
8008e4ac:	d881030b 	ldhu	r2,1036(sp)
8008e4b0:	1080100c 	andi	r2,r2,64
8008e4b4:	10000326 	beq	r2,zero,8008e4c4 <__sbprintf+0x98>
8008e4b8:	8080030b 	ldhu	r2,12(r16)
8008e4bc:	10801014 	ori	r2,r2,64
8008e4c0:	8080030d 	sth	r2,12(r16)
8008e4c4:	8805883a 	mov	r2,r17
8008e4c8:	dfc11d17 	ldw	ra,1140(sp)
8008e4cc:	dc811c17 	ldw	r18,1136(sp)
8008e4d0:	dc411b17 	ldw	r17,1132(sp)
8008e4d4:	dc011a17 	ldw	r16,1128(sp)
8008e4d8:	dec11e04 	addi	sp,sp,1144
8008e4dc:	f800283a 	ret
8008e4e0:	047fffc4 	movi	r17,-1
8008e4e4:	003ff106 	br	8008e4ac <__sbprintf+0x80>

8008e4e8 <_write_r>:
8008e4e8:	defffd04 	addi	sp,sp,-12
8008e4ec:	2805883a 	mov	r2,r5
8008e4f0:	dc000015 	stw	r16,0(sp)
8008e4f4:	042002b4 	movhi	r16,32778
8008e4f8:	dc400115 	stw	r17,4(sp)
8008e4fc:	300b883a 	mov	r5,r6
8008e500:	8429d604 	addi	r16,r16,-22696
8008e504:	2023883a 	mov	r17,r4
8008e508:	380d883a 	mov	r6,r7
8008e50c:	1009883a 	mov	r4,r2
8008e510:	dfc00215 	stw	ra,8(sp)
8008e514:	80000015 	stw	zero,0(r16)
8008e518:	00924780 	call	80092478 <write>
8008e51c:	00ffffc4 	movi	r3,-1
8008e520:	10c00526 	beq	r2,r3,8008e538 <_write_r+0x50>
8008e524:	dfc00217 	ldw	ra,8(sp)
8008e528:	dc400117 	ldw	r17,4(sp)
8008e52c:	dc000017 	ldw	r16,0(sp)
8008e530:	dec00304 	addi	sp,sp,12
8008e534:	f800283a 	ret
8008e538:	80c00017 	ldw	r3,0(r16)
8008e53c:	183ff926 	beq	r3,zero,8008e524 <_write_r+0x3c>
8008e540:	88c00015 	stw	r3,0(r17)
8008e544:	003ff706 	br	8008e524 <_write_r+0x3c>

8008e548 <_close_r>:
8008e548:	defffd04 	addi	sp,sp,-12
8008e54c:	dc000015 	stw	r16,0(sp)
8008e550:	042002b4 	movhi	r16,32778
8008e554:	dc400115 	stw	r17,4(sp)
8008e558:	8429d604 	addi	r16,r16,-22696
8008e55c:	2023883a 	mov	r17,r4
8008e560:	2809883a 	mov	r4,r5
8008e564:	dfc00215 	stw	ra,8(sp)
8008e568:	80000015 	stw	zero,0(r16)
8008e56c:	00918240 	call	80091824 <close>
8008e570:	00ffffc4 	movi	r3,-1
8008e574:	10c00526 	beq	r2,r3,8008e58c <_close_r+0x44>
8008e578:	dfc00217 	ldw	ra,8(sp)
8008e57c:	dc400117 	ldw	r17,4(sp)
8008e580:	dc000017 	ldw	r16,0(sp)
8008e584:	dec00304 	addi	sp,sp,12
8008e588:	f800283a 	ret
8008e58c:	80c00017 	ldw	r3,0(r16)
8008e590:	183ff926 	beq	r3,zero,8008e578 <_close_r+0x30>
8008e594:	88c00015 	stw	r3,0(r17)
8008e598:	003ff706 	br	8008e578 <_close_r+0x30>

8008e59c <_calloc_r>:
8008e59c:	298b383a 	mul	r5,r5,r6
8008e5a0:	defffe04 	addi	sp,sp,-8
8008e5a4:	dfc00115 	stw	ra,4(sp)
8008e5a8:	dc000015 	stw	r16,0(sp)
8008e5ac:	00893a80 	call	800893a8 <_malloc_r>
8008e5b0:	10002926 	beq	r2,zero,8008e658 <_calloc_r+0xbc>
8008e5b4:	11bfff17 	ldw	r6,-4(r2)
8008e5b8:	1021883a 	mov	r16,r2
8008e5bc:	00bfff04 	movi	r2,-4
8008e5c0:	308c703a 	and	r6,r6,r2
8008e5c4:	00c00904 	movi	r3,36
8008e5c8:	308d883a 	add	r6,r6,r2
8008e5cc:	19801636 	bltu	r3,r6,8008e628 <_calloc_r+0x8c>
8008e5d0:	008004c4 	movi	r2,19
8008e5d4:	11800b2e 	bgeu	r2,r6,8008e604 <_calloc_r+0x68>
8008e5d8:	80000015 	stw	zero,0(r16)
8008e5dc:	80000115 	stw	zero,4(r16)
8008e5e0:	008006c4 	movi	r2,27
8008e5e4:	11801a2e 	bgeu	r2,r6,8008e650 <_calloc_r+0xb4>
8008e5e8:	80000215 	stw	zero,8(r16)
8008e5ec:	80000315 	stw	zero,12(r16)
8008e5f0:	30c0151e 	bne	r6,r3,8008e648 <_calloc_r+0xac>
8008e5f4:	80000415 	stw	zero,16(r16)
8008e5f8:	80800604 	addi	r2,r16,24
8008e5fc:	80000515 	stw	zero,20(r16)
8008e600:	00000106 	br	8008e608 <_calloc_r+0x6c>
8008e604:	8005883a 	mov	r2,r16
8008e608:	10000015 	stw	zero,0(r2)
8008e60c:	10000115 	stw	zero,4(r2)
8008e610:	10000215 	stw	zero,8(r2)
8008e614:	8005883a 	mov	r2,r16
8008e618:	dfc00117 	ldw	ra,4(sp)
8008e61c:	dc000017 	ldw	r16,0(sp)
8008e620:	dec00204 	addi	sp,sp,8
8008e624:	f800283a 	ret
8008e628:	000b883a 	mov	r5,zero
8008e62c:	8009883a 	mov	r4,r16
8008e630:	0089f3c0 	call	80089f3c <memset>
8008e634:	8005883a 	mov	r2,r16
8008e638:	dfc00117 	ldw	ra,4(sp)
8008e63c:	dc000017 	ldw	r16,0(sp)
8008e640:	dec00204 	addi	sp,sp,8
8008e644:	f800283a 	ret
8008e648:	80800404 	addi	r2,r16,16
8008e64c:	003fee06 	br	8008e608 <_calloc_r+0x6c>
8008e650:	80800204 	addi	r2,r16,8
8008e654:	003fec06 	br	8008e608 <_calloc_r+0x6c>
8008e658:	0005883a 	mov	r2,zero
8008e65c:	003fee06 	br	8008e618 <_calloc_r+0x7c>

8008e660 <_fclose_r>:
8008e660:	28003926 	beq	r5,zero,8008e748 <_fclose_r+0xe8>
8008e664:	defffc04 	addi	sp,sp,-16
8008e668:	dc400115 	stw	r17,4(sp)
8008e66c:	dc000015 	stw	r16,0(sp)
8008e670:	dfc00315 	stw	ra,12(sp)
8008e674:	dc800215 	stw	r18,8(sp)
8008e678:	2023883a 	mov	r17,r4
8008e67c:	2821883a 	mov	r16,r5
8008e680:	20000226 	beq	r4,zero,8008e68c <_fclose_r+0x2c>
8008e684:	20800e17 	ldw	r2,56(r4)
8008e688:	10002726 	beq	r2,zero,8008e728 <_fclose_r+0xc8>
8008e68c:	8080030f 	ldh	r2,12(r16)
8008e690:	1000071e 	bne	r2,zero,8008e6b0 <_fclose_r+0x50>
8008e694:	0005883a 	mov	r2,zero
8008e698:	dfc00317 	ldw	ra,12(sp)
8008e69c:	dc800217 	ldw	r18,8(sp)
8008e6a0:	dc400117 	ldw	r17,4(sp)
8008e6a4:	dc000017 	ldw	r16,0(sp)
8008e6a8:	dec00404 	addi	sp,sp,16
8008e6ac:	f800283a 	ret
8008e6b0:	800b883a 	mov	r5,r16
8008e6b4:	8809883a 	mov	r4,r17
8008e6b8:	00880500 	call	80088050 <__sflush_r>
8008e6bc:	1025883a 	mov	r18,r2
8008e6c0:	80800b17 	ldw	r2,44(r16)
8008e6c4:	10000426 	beq	r2,zero,8008e6d8 <_fclose_r+0x78>
8008e6c8:	81400717 	ldw	r5,28(r16)
8008e6cc:	8809883a 	mov	r4,r17
8008e6d0:	103ee83a 	callr	r2
8008e6d4:	10001616 	blt	r2,zero,8008e730 <_fclose_r+0xd0>
8008e6d8:	8080030b 	ldhu	r2,12(r16)
8008e6dc:	1080200c 	andi	r2,r2,128
8008e6e0:	1000151e 	bne	r2,zero,8008e738 <_fclose_r+0xd8>
8008e6e4:	81400c17 	ldw	r5,48(r16)
8008e6e8:	28000526 	beq	r5,zero,8008e700 <_fclose_r+0xa0>
8008e6ec:	80801004 	addi	r2,r16,64
8008e6f0:	28800226 	beq	r5,r2,8008e6fc <_fclose_r+0x9c>
8008e6f4:	8809883a 	mov	r4,r17
8008e6f8:	00887bc0 	call	800887bc <_free_r>
8008e6fc:	80000c15 	stw	zero,48(r16)
8008e700:	81401117 	ldw	r5,68(r16)
8008e704:	28000326 	beq	r5,zero,8008e714 <_fclose_r+0xb4>
8008e708:	8809883a 	mov	r4,r17
8008e70c:	00887bc0 	call	800887bc <_free_r>
8008e710:	80001115 	stw	zero,68(r16)
8008e714:	00886580 	call	80088658 <__sfp_lock_acquire>
8008e718:	8000030d 	sth	zero,12(r16)
8008e71c:	008865c0 	call	8008865c <__sfp_lock_release>
8008e720:	9005883a 	mov	r2,r18
8008e724:	003fdc06 	br	8008e698 <_fclose_r+0x38>
8008e728:	00886480 	call	80088648 <__sinit>
8008e72c:	003fd706 	br	8008e68c <_fclose_r+0x2c>
8008e730:	04bfffc4 	movi	r18,-1
8008e734:	003fe806 	br	8008e6d8 <_fclose_r+0x78>
8008e738:	81400417 	ldw	r5,16(r16)
8008e73c:	8809883a 	mov	r4,r17
8008e740:	00887bc0 	call	800887bc <_free_r>
8008e744:	003fe706 	br	8008e6e4 <_fclose_r+0x84>
8008e748:	0005883a 	mov	r2,zero
8008e74c:	f800283a 	ret

8008e750 <fclose>:
8008e750:	00a002b4 	movhi	r2,32778
8008e754:	10a29e04 	addi	r2,r2,-30088
8008e758:	200b883a 	mov	r5,r4
8008e75c:	11000017 	ldw	r4,0(r2)
8008e760:	008e6601 	jmpi	8008e660 <_fclose_r>

8008e764 <__fputwc>:
8008e764:	defff804 	addi	sp,sp,-32
8008e768:	dcc00415 	stw	r19,16(sp)
8008e76c:	dc800315 	stw	r18,12(sp)
8008e770:	dc000115 	stw	r16,4(sp)
8008e774:	dfc00715 	stw	ra,28(sp)
8008e778:	dd400615 	stw	r21,24(sp)
8008e77c:	dd000515 	stw	r20,20(sp)
8008e780:	dc400215 	stw	r17,8(sp)
8008e784:	2027883a 	mov	r19,r4
8008e788:	2825883a 	mov	r18,r5
8008e78c:	3021883a 	mov	r16,r6
8008e790:	00891980 	call	80089198 <__locale_mb_cur_max>
8008e794:	00c00044 	movi	r3,1
8008e798:	10c03e26 	beq	r2,r3,8008e894 <__fputwc+0x130>
8008e79c:	81c01704 	addi	r7,r16,92
8008e7a0:	900d883a 	mov	r6,r18
8008e7a4:	d80b883a 	mov	r5,sp
8008e7a8:	9809883a 	mov	r4,r19
8008e7ac:	008ec340 	call	8008ec34 <_wcrtomb_r>
8008e7b0:	1029883a 	mov	r20,r2
8008e7b4:	00bfffc4 	movi	r2,-1
8008e7b8:	a0802026 	beq	r20,r2,8008e83c <__fputwc+0xd8>
8008e7bc:	d9400003 	ldbu	r5,0(sp)
8008e7c0:	a0001c26 	beq	r20,zero,8008e834 <__fputwc+0xd0>
8008e7c4:	0023883a 	mov	r17,zero
8008e7c8:	05400284 	movi	r21,10
8008e7cc:	00000906 	br	8008e7f4 <__fputwc+0x90>
8008e7d0:	80800017 	ldw	r2,0(r16)
8008e7d4:	11400005 	stb	r5,0(r2)
8008e7d8:	80c00017 	ldw	r3,0(r16)
8008e7dc:	18c00044 	addi	r3,r3,1
8008e7e0:	80c00015 	stw	r3,0(r16)
8008e7e4:	8c400044 	addi	r17,r17,1
8008e7e8:	dc45883a 	add	r2,sp,r17
8008e7ec:	8d00112e 	bgeu	r17,r20,8008e834 <__fputwc+0xd0>
8008e7f0:	11400003 	ldbu	r5,0(r2)
8008e7f4:	80c00217 	ldw	r3,8(r16)
8008e7f8:	18ffffc4 	addi	r3,r3,-1
8008e7fc:	80c00215 	stw	r3,8(r16)
8008e800:	183ff30e 	bge	r3,zero,8008e7d0 <__fputwc+0x6c>
8008e804:	80800617 	ldw	r2,24(r16)
8008e808:	18801916 	blt	r3,r2,8008e870 <__fputwc+0x10c>
8008e80c:	80800017 	ldw	r2,0(r16)
8008e810:	11400005 	stb	r5,0(r2)
8008e814:	80800017 	ldw	r2,0(r16)
8008e818:	10c00003 	ldbu	r3,0(r2)
8008e81c:	10800044 	addi	r2,r2,1
8008e820:	1d402326 	beq	r3,r21,8008e8b0 <__fputwc+0x14c>
8008e824:	80800015 	stw	r2,0(r16)
8008e828:	8c400044 	addi	r17,r17,1
8008e82c:	dc45883a 	add	r2,sp,r17
8008e830:	8d3fef36 	bltu	r17,r20,8008e7f0 <__fputwc+0x8c>
8008e834:	9005883a 	mov	r2,r18
8008e838:	00000406 	br	8008e84c <__fputwc+0xe8>
8008e83c:	80c0030b 	ldhu	r3,12(r16)
8008e840:	a005883a 	mov	r2,r20
8008e844:	18c01014 	ori	r3,r3,64
8008e848:	80c0030d 	sth	r3,12(r16)
8008e84c:	dfc00717 	ldw	ra,28(sp)
8008e850:	dd400617 	ldw	r21,24(sp)
8008e854:	dd000517 	ldw	r20,20(sp)
8008e858:	dcc00417 	ldw	r19,16(sp)
8008e85c:	dc800317 	ldw	r18,12(sp)
8008e860:	dc400217 	ldw	r17,8(sp)
8008e864:	dc000117 	ldw	r16,4(sp)
8008e868:	dec00804 	addi	sp,sp,32
8008e86c:	f800283a 	ret
8008e870:	800d883a 	mov	r6,r16
8008e874:	29403fcc 	andi	r5,r5,255
8008e878:	9809883a 	mov	r4,r19
8008e87c:	008eadc0 	call	8008eadc <__swbuf_r>
8008e880:	10bfffe0 	cmpeqi	r2,r2,-1
8008e884:	10803fcc 	andi	r2,r2,255
8008e888:	103fd626 	beq	r2,zero,8008e7e4 <__fputwc+0x80>
8008e88c:	00bfffc4 	movi	r2,-1
8008e890:	003fee06 	br	8008e84c <__fputwc+0xe8>
8008e894:	90ffffc4 	addi	r3,r18,-1
8008e898:	01003f84 	movi	r4,254
8008e89c:	20ffbf36 	bltu	r4,r3,8008e79c <__fputwc+0x38>
8008e8a0:	900b883a 	mov	r5,r18
8008e8a4:	dc800005 	stb	r18,0(sp)
8008e8a8:	1029883a 	mov	r20,r2
8008e8ac:	003fc506 	br	8008e7c4 <__fputwc+0x60>
8008e8b0:	800d883a 	mov	r6,r16
8008e8b4:	a80b883a 	mov	r5,r21
8008e8b8:	9809883a 	mov	r4,r19
8008e8bc:	008eadc0 	call	8008eadc <__swbuf_r>
8008e8c0:	10bfffe0 	cmpeqi	r2,r2,-1
8008e8c4:	003fef06 	br	8008e884 <__fputwc+0x120>

8008e8c8 <_fputwc_r>:
8008e8c8:	3080030b 	ldhu	r2,12(r6)
8008e8cc:	10c8000c 	andi	r3,r2,8192
8008e8d0:	1800051e 	bne	r3,zero,8008e8e8 <_fputwc_r+0x20>
8008e8d4:	30c01917 	ldw	r3,100(r6)
8008e8d8:	10880014 	ori	r2,r2,8192
8008e8dc:	3080030d 	sth	r2,12(r6)
8008e8e0:	18880014 	ori	r2,r3,8192
8008e8e4:	30801915 	stw	r2,100(r6)
8008e8e8:	008e7641 	jmpi	8008e764 <__fputwc>

8008e8ec <fputwc>:
8008e8ec:	00a002b4 	movhi	r2,32778
8008e8f0:	defffc04 	addi	sp,sp,-16
8008e8f4:	10a29e04 	addi	r2,r2,-30088
8008e8f8:	dc000115 	stw	r16,4(sp)
8008e8fc:	14000017 	ldw	r16,0(r2)
8008e900:	dc400215 	stw	r17,8(sp)
8008e904:	dfc00315 	stw	ra,12(sp)
8008e908:	2023883a 	mov	r17,r4
8008e90c:	80000226 	beq	r16,zero,8008e918 <fputwc+0x2c>
8008e910:	80800e17 	ldw	r2,56(r16)
8008e914:	10001026 	beq	r2,zero,8008e958 <fputwc+0x6c>
8008e918:	2880030b 	ldhu	r2,12(r5)
8008e91c:	10c8000c 	andi	r3,r2,8192
8008e920:	1800051e 	bne	r3,zero,8008e938 <fputwc+0x4c>
8008e924:	28c01917 	ldw	r3,100(r5)
8008e928:	10880014 	ori	r2,r2,8192
8008e92c:	2880030d 	sth	r2,12(r5)
8008e930:	18880014 	ori	r2,r3,8192
8008e934:	28801915 	stw	r2,100(r5)
8008e938:	280d883a 	mov	r6,r5
8008e93c:	8009883a 	mov	r4,r16
8008e940:	880b883a 	mov	r5,r17
8008e944:	dfc00317 	ldw	ra,12(sp)
8008e948:	dc400217 	ldw	r17,8(sp)
8008e94c:	dc000117 	ldw	r16,4(sp)
8008e950:	dec00404 	addi	sp,sp,16
8008e954:	008e7641 	jmpi	8008e764 <__fputwc>
8008e958:	8009883a 	mov	r4,r16
8008e95c:	d9400015 	stw	r5,0(sp)
8008e960:	00886480 	call	80088648 <__sinit>
8008e964:	d9400017 	ldw	r5,0(sp)
8008e968:	003feb06 	br	8008e918 <fputwc+0x2c>

8008e96c <_fstat_r>:
8008e96c:	defffd04 	addi	sp,sp,-12
8008e970:	2805883a 	mov	r2,r5
8008e974:	dc000015 	stw	r16,0(sp)
8008e978:	042002b4 	movhi	r16,32778
8008e97c:	dc400115 	stw	r17,4(sp)
8008e980:	8429d604 	addi	r16,r16,-22696
8008e984:	2023883a 	mov	r17,r4
8008e988:	300b883a 	mov	r5,r6
8008e98c:	1009883a 	mov	r4,r2
8008e990:	dfc00215 	stw	ra,8(sp)
8008e994:	80000015 	stw	zero,0(r16)
8008e998:	009195c0 	call	8009195c <fstat>
8008e99c:	00ffffc4 	movi	r3,-1
8008e9a0:	10c00526 	beq	r2,r3,8008e9b8 <_fstat_r+0x4c>
8008e9a4:	dfc00217 	ldw	ra,8(sp)
8008e9a8:	dc400117 	ldw	r17,4(sp)
8008e9ac:	dc000017 	ldw	r16,0(sp)
8008e9b0:	dec00304 	addi	sp,sp,12
8008e9b4:	f800283a 	ret
8008e9b8:	80c00017 	ldw	r3,0(r16)
8008e9bc:	183ff926 	beq	r3,zero,8008e9a4 <_fstat_r+0x38>
8008e9c0:	88c00015 	stw	r3,0(r17)
8008e9c4:	003ff706 	br	8008e9a4 <_fstat_r+0x38>

8008e9c8 <_isatty_r>:
8008e9c8:	defffd04 	addi	sp,sp,-12
8008e9cc:	dc000015 	stw	r16,0(sp)
8008e9d0:	042002b4 	movhi	r16,32778
8008e9d4:	dc400115 	stw	r17,4(sp)
8008e9d8:	8429d604 	addi	r16,r16,-22696
8008e9dc:	2023883a 	mov	r17,r4
8008e9e0:	2809883a 	mov	r4,r5
8008e9e4:	dfc00215 	stw	ra,8(sp)
8008e9e8:	80000015 	stw	zero,0(r16)
8008e9ec:	0091ce80 	call	80091ce8 <isatty>
8008e9f0:	00ffffc4 	movi	r3,-1
8008e9f4:	10c00526 	beq	r2,r3,8008ea0c <_isatty_r+0x44>
8008e9f8:	dfc00217 	ldw	ra,8(sp)
8008e9fc:	dc400117 	ldw	r17,4(sp)
8008ea00:	dc000017 	ldw	r16,0(sp)
8008ea04:	dec00304 	addi	sp,sp,12
8008ea08:	f800283a 	ret
8008ea0c:	80c00017 	ldw	r3,0(r16)
8008ea10:	183ff926 	beq	r3,zero,8008e9f8 <_isatty_r+0x30>
8008ea14:	88c00015 	stw	r3,0(r17)
8008ea18:	003ff706 	br	8008e9f8 <_isatty_r+0x30>

8008ea1c <_lseek_r>:
8008ea1c:	defffd04 	addi	sp,sp,-12
8008ea20:	2805883a 	mov	r2,r5
8008ea24:	dc000015 	stw	r16,0(sp)
8008ea28:	042002b4 	movhi	r16,32778
8008ea2c:	dc400115 	stw	r17,4(sp)
8008ea30:	300b883a 	mov	r5,r6
8008ea34:	8429d604 	addi	r16,r16,-22696
8008ea38:	2023883a 	mov	r17,r4
8008ea3c:	380d883a 	mov	r6,r7
8008ea40:	1009883a 	mov	r4,r2
8008ea44:	dfc00215 	stw	ra,8(sp)
8008ea48:	80000015 	stw	zero,0(r16)
8008ea4c:	0091eb40 	call	80091eb4 <lseek>
8008ea50:	00ffffc4 	movi	r3,-1
8008ea54:	10c00526 	beq	r2,r3,8008ea6c <_lseek_r+0x50>
8008ea58:	dfc00217 	ldw	ra,8(sp)
8008ea5c:	dc400117 	ldw	r17,4(sp)
8008ea60:	dc000017 	ldw	r16,0(sp)
8008ea64:	dec00304 	addi	sp,sp,12
8008ea68:	f800283a 	ret
8008ea6c:	80c00017 	ldw	r3,0(r16)
8008ea70:	183ff926 	beq	r3,zero,8008ea58 <_lseek_r+0x3c>
8008ea74:	88c00015 	stw	r3,0(r17)
8008ea78:	003ff706 	br	8008ea58 <_lseek_r+0x3c>

8008ea7c <_read_r>:
8008ea7c:	defffd04 	addi	sp,sp,-12
8008ea80:	2805883a 	mov	r2,r5
8008ea84:	dc000015 	stw	r16,0(sp)
8008ea88:	042002b4 	movhi	r16,32778
8008ea8c:	dc400115 	stw	r17,4(sp)
8008ea90:	300b883a 	mov	r5,r6
8008ea94:	8429d604 	addi	r16,r16,-22696
8008ea98:	2023883a 	mov	r17,r4
8008ea9c:	380d883a 	mov	r6,r7
8008eaa0:	1009883a 	mov	r4,r2
8008eaa4:	dfc00215 	stw	ra,8(sp)
8008eaa8:	80000015 	stw	zero,0(r16)
8008eaac:	00920880 	call	80092088 <read>
8008eab0:	00ffffc4 	movi	r3,-1
8008eab4:	10c00526 	beq	r2,r3,8008eacc <_read_r+0x50>
8008eab8:	dfc00217 	ldw	ra,8(sp)
8008eabc:	dc400117 	ldw	r17,4(sp)
8008eac0:	dc000017 	ldw	r16,0(sp)
8008eac4:	dec00304 	addi	sp,sp,12
8008eac8:	f800283a 	ret
8008eacc:	80c00017 	ldw	r3,0(r16)
8008ead0:	183ff926 	beq	r3,zero,8008eab8 <_read_r+0x3c>
8008ead4:	88c00015 	stw	r3,0(r17)
8008ead8:	003ff706 	br	8008eab8 <_read_r+0x3c>

8008eadc <__swbuf_r>:
8008eadc:	defffb04 	addi	sp,sp,-20
8008eae0:	dcc00315 	stw	r19,12(sp)
8008eae4:	dc800215 	stw	r18,8(sp)
8008eae8:	dc000015 	stw	r16,0(sp)
8008eaec:	dfc00415 	stw	ra,16(sp)
8008eaf0:	dc400115 	stw	r17,4(sp)
8008eaf4:	2025883a 	mov	r18,r4
8008eaf8:	2827883a 	mov	r19,r5
8008eafc:	3021883a 	mov	r16,r6
8008eb00:	20000226 	beq	r4,zero,8008eb0c <__swbuf_r+0x30>
8008eb04:	20800e17 	ldw	r2,56(r4)
8008eb08:	10004226 	beq	r2,zero,8008ec14 <__swbuf_r+0x138>
8008eb0c:	80800617 	ldw	r2,24(r16)
8008eb10:	8100030b 	ldhu	r4,12(r16)
8008eb14:	80800215 	stw	r2,8(r16)
8008eb18:	2080020c 	andi	r2,r4,8
8008eb1c:	10003626 	beq	r2,zero,8008ebf8 <__swbuf_r+0x11c>
8008eb20:	80c00417 	ldw	r3,16(r16)
8008eb24:	18003426 	beq	r3,zero,8008ebf8 <__swbuf_r+0x11c>
8008eb28:	2088000c 	andi	r2,r4,8192
8008eb2c:	9c403fcc 	andi	r17,r19,255
8008eb30:	10001a26 	beq	r2,zero,8008eb9c <__swbuf_r+0xc0>
8008eb34:	80800017 	ldw	r2,0(r16)
8008eb38:	81000517 	ldw	r4,20(r16)
8008eb3c:	10c7c83a 	sub	r3,r2,r3
8008eb40:	1900200e 	bge	r3,r4,8008ebc4 <__swbuf_r+0xe8>
8008eb44:	18c00044 	addi	r3,r3,1
8008eb48:	81000217 	ldw	r4,8(r16)
8008eb4c:	11400044 	addi	r5,r2,1
8008eb50:	81400015 	stw	r5,0(r16)
8008eb54:	213fffc4 	addi	r4,r4,-1
8008eb58:	81000215 	stw	r4,8(r16)
8008eb5c:	14c00005 	stb	r19,0(r2)
8008eb60:	80800517 	ldw	r2,20(r16)
8008eb64:	10c01e26 	beq	r2,r3,8008ebe0 <__swbuf_r+0x104>
8008eb68:	8080030b 	ldhu	r2,12(r16)
8008eb6c:	1080004c 	andi	r2,r2,1
8008eb70:	10000226 	beq	r2,zero,8008eb7c <__swbuf_r+0xa0>
8008eb74:	00800284 	movi	r2,10
8008eb78:	88801926 	beq	r17,r2,8008ebe0 <__swbuf_r+0x104>
8008eb7c:	8805883a 	mov	r2,r17
8008eb80:	dfc00417 	ldw	ra,16(sp)
8008eb84:	dcc00317 	ldw	r19,12(sp)
8008eb88:	dc800217 	ldw	r18,8(sp)
8008eb8c:	dc400117 	ldw	r17,4(sp)
8008eb90:	dc000017 	ldw	r16,0(sp)
8008eb94:	dec00504 	addi	sp,sp,20
8008eb98:	f800283a 	ret
8008eb9c:	81401917 	ldw	r5,100(r16)
8008eba0:	00b7ffc4 	movi	r2,-8193
8008eba4:	21080014 	ori	r4,r4,8192
8008eba8:	2884703a 	and	r2,r5,r2
8008ebac:	80801915 	stw	r2,100(r16)
8008ebb0:	80800017 	ldw	r2,0(r16)
8008ebb4:	8100030d 	sth	r4,12(r16)
8008ebb8:	81000517 	ldw	r4,20(r16)
8008ebbc:	10c7c83a 	sub	r3,r2,r3
8008ebc0:	193fe016 	blt	r3,r4,8008eb44 <__swbuf_r+0x68>
8008ebc4:	800b883a 	mov	r5,r16
8008ebc8:	9009883a 	mov	r4,r18
8008ebcc:	008826c0 	call	8008826c <_fflush_r>
8008ebd0:	1000071e 	bne	r2,zero,8008ebf0 <__swbuf_r+0x114>
8008ebd4:	80800017 	ldw	r2,0(r16)
8008ebd8:	00c00044 	movi	r3,1
8008ebdc:	003fda06 	br	8008eb48 <__swbuf_r+0x6c>
8008ebe0:	800b883a 	mov	r5,r16
8008ebe4:	9009883a 	mov	r4,r18
8008ebe8:	008826c0 	call	8008826c <_fflush_r>
8008ebec:	103fe326 	beq	r2,zero,8008eb7c <__swbuf_r+0xa0>
8008ebf0:	00bfffc4 	movi	r2,-1
8008ebf4:	003fe206 	br	8008eb80 <__swbuf_r+0xa4>
8008ebf8:	800b883a 	mov	r5,r16
8008ebfc:	9009883a 	mov	r4,r18
8008ec00:	00866740 	call	80086674 <__swsetup_r>
8008ec04:	103ffa1e 	bne	r2,zero,8008ebf0 <__swbuf_r+0x114>
8008ec08:	8100030b 	ldhu	r4,12(r16)
8008ec0c:	80c00417 	ldw	r3,16(r16)
8008ec10:	003fc506 	br	8008eb28 <__swbuf_r+0x4c>
8008ec14:	00886480 	call	80088648 <__sinit>
8008ec18:	003fbc06 	br	8008eb0c <__swbuf_r+0x30>

8008ec1c <__swbuf>:
8008ec1c:	00a002b4 	movhi	r2,32778
8008ec20:	10a29e04 	addi	r2,r2,-30088
8008ec24:	280d883a 	mov	r6,r5
8008ec28:	200b883a 	mov	r5,r4
8008ec2c:	11000017 	ldw	r4,0(r2)
8008ec30:	008eadc1 	jmpi	8008eadc <__swbuf_r>

8008ec34 <_wcrtomb_r>:
8008ec34:	defff604 	addi	sp,sp,-40
8008ec38:	00a002b4 	movhi	r2,32778
8008ec3c:	dc800815 	stw	r18,32(sp)
8008ec40:	dc400715 	stw	r17,28(sp)
8008ec44:	dc000615 	stw	r16,24(sp)
8008ec48:	10a2a204 	addi	r2,r2,-30072
8008ec4c:	dfc00915 	stw	ra,36(sp)
8008ec50:	2021883a 	mov	r16,r4
8008ec54:	3823883a 	mov	r17,r7
8008ec58:	14800017 	ldw	r18,0(r2)
8008ec5c:	28001426 	beq	r5,zero,8008ecb0 <_wcrtomb_r+0x7c>
8008ec60:	d9400415 	stw	r5,16(sp)
8008ec64:	d9800515 	stw	r6,20(sp)
8008ec68:	008918c0 	call	8008918c <__locale_charset>
8008ec6c:	d9800517 	ldw	r6,20(sp)
8008ec70:	d9400417 	ldw	r5,16(sp)
8008ec74:	100f883a 	mov	r7,r2
8008ec78:	dc400015 	stw	r17,0(sp)
8008ec7c:	8009883a 	mov	r4,r16
8008ec80:	903ee83a 	callr	r18
8008ec84:	00ffffc4 	movi	r3,-1
8008ec88:	10c0031e 	bne	r2,r3,8008ec98 <_wcrtomb_r+0x64>
8008ec8c:	88000015 	stw	zero,0(r17)
8008ec90:	00c02284 	movi	r3,138
8008ec94:	80c00015 	stw	r3,0(r16)
8008ec98:	dfc00917 	ldw	ra,36(sp)
8008ec9c:	dc800817 	ldw	r18,32(sp)
8008eca0:	dc400717 	ldw	r17,28(sp)
8008eca4:	dc000617 	ldw	r16,24(sp)
8008eca8:	dec00a04 	addi	sp,sp,40
8008ecac:	f800283a 	ret
8008ecb0:	008918c0 	call	8008918c <__locale_charset>
8008ecb4:	100f883a 	mov	r7,r2
8008ecb8:	dc400015 	stw	r17,0(sp)
8008ecbc:	000d883a 	mov	r6,zero
8008ecc0:	d9400104 	addi	r5,sp,4
8008ecc4:	8009883a 	mov	r4,r16
8008ecc8:	903ee83a 	callr	r18
8008eccc:	003fed06 	br	8008ec84 <_wcrtomb_r+0x50>

8008ecd0 <wcrtomb>:
8008ecd0:	defff604 	addi	sp,sp,-40
8008ecd4:	00a002b4 	movhi	r2,32778
8008ecd8:	dc800615 	stw	r18,24(sp)
8008ecdc:	dc400515 	stw	r17,20(sp)
8008ece0:	10a29e04 	addi	r2,r2,-30088
8008ece4:	dfc00915 	stw	ra,36(sp)
8008ece8:	dd000815 	stw	r20,32(sp)
8008ecec:	dcc00715 	stw	r19,28(sp)
8008ecf0:	dc000415 	stw	r16,16(sp)
8008ecf4:	3025883a 	mov	r18,r6
8008ecf8:	14400017 	ldw	r17,0(r2)
8008ecfc:	20001926 	beq	r4,zero,8008ed64 <wcrtomb+0x94>
8008ed00:	00a002b4 	movhi	r2,32778
8008ed04:	10a2a204 	addi	r2,r2,-30072
8008ed08:	15000017 	ldw	r20,0(r2)
8008ed0c:	2021883a 	mov	r16,r4
8008ed10:	2827883a 	mov	r19,r5
8008ed14:	008918c0 	call	8008918c <__locale_charset>
8008ed18:	100f883a 	mov	r7,r2
8008ed1c:	dc800015 	stw	r18,0(sp)
8008ed20:	980d883a 	mov	r6,r19
8008ed24:	800b883a 	mov	r5,r16
8008ed28:	8809883a 	mov	r4,r17
8008ed2c:	a03ee83a 	callr	r20
8008ed30:	00ffffc4 	movi	r3,-1
8008ed34:	10c0031e 	bne	r2,r3,8008ed44 <wcrtomb+0x74>
8008ed38:	90000015 	stw	zero,0(r18)
8008ed3c:	00c02284 	movi	r3,138
8008ed40:	88c00015 	stw	r3,0(r17)
8008ed44:	dfc00917 	ldw	ra,36(sp)
8008ed48:	dd000817 	ldw	r20,32(sp)
8008ed4c:	dcc00717 	ldw	r19,28(sp)
8008ed50:	dc800617 	ldw	r18,24(sp)
8008ed54:	dc400517 	ldw	r17,20(sp)
8008ed58:	dc000417 	ldw	r16,16(sp)
8008ed5c:	dec00a04 	addi	sp,sp,40
8008ed60:	f800283a 	ret
8008ed64:	00a002b4 	movhi	r2,32778
8008ed68:	10a2a204 	addi	r2,r2,-30072
8008ed6c:	14000017 	ldw	r16,0(r2)
8008ed70:	008918c0 	call	8008918c <__locale_charset>
8008ed74:	100f883a 	mov	r7,r2
8008ed78:	dc800015 	stw	r18,0(sp)
8008ed7c:	000d883a 	mov	r6,zero
8008ed80:	d9400104 	addi	r5,sp,4
8008ed84:	8809883a 	mov	r4,r17
8008ed88:	803ee83a 	callr	r16
8008ed8c:	003fe806 	br	8008ed30 <wcrtomb+0x60>

8008ed90 <__ascii_wctomb>:
8008ed90:	28000526 	beq	r5,zero,8008eda8 <__ascii_wctomb+0x18>
8008ed94:	00803fc4 	movi	r2,255
8008ed98:	11800536 	bltu	r2,r6,8008edb0 <__ascii_wctomb+0x20>
8008ed9c:	29800005 	stb	r6,0(r5)
8008eda0:	00800044 	movi	r2,1
8008eda4:	f800283a 	ret
8008eda8:	0005883a 	mov	r2,zero
8008edac:	f800283a 	ret
8008edb0:	00802284 	movi	r2,138
8008edb4:	20800015 	stw	r2,0(r4)
8008edb8:	00bfffc4 	movi	r2,-1
8008edbc:	f800283a 	ret

8008edc0 <_wctomb_r>:
8008edc0:	00a002b4 	movhi	r2,32778
8008edc4:	defff904 	addi	sp,sp,-28
8008edc8:	10a2a204 	addi	r2,r2,-30072
8008edcc:	dfc00615 	stw	ra,24(sp)
8008edd0:	dc400515 	stw	r17,20(sp)
8008edd4:	dc000415 	stw	r16,16(sp)
8008edd8:	3823883a 	mov	r17,r7
8008eddc:	14000017 	ldw	r16,0(r2)
8008ede0:	d9000115 	stw	r4,4(sp)
8008ede4:	d9400215 	stw	r5,8(sp)
8008ede8:	d9800315 	stw	r6,12(sp)
8008edec:	008918c0 	call	8008918c <__locale_charset>
8008edf0:	d9800317 	ldw	r6,12(sp)
8008edf4:	d9400217 	ldw	r5,8(sp)
8008edf8:	d9000117 	ldw	r4,4(sp)
8008edfc:	100f883a 	mov	r7,r2
8008ee00:	dc400015 	stw	r17,0(sp)
8008ee04:	803ee83a 	callr	r16
8008ee08:	dfc00617 	ldw	ra,24(sp)
8008ee0c:	dc400517 	ldw	r17,20(sp)
8008ee10:	dc000417 	ldw	r16,16(sp)
8008ee14:	dec00704 	addi	sp,sp,28
8008ee18:	f800283a 	ret

8008ee1c <__udivdi3>:
8008ee1c:	defff504 	addi	sp,sp,-44
8008ee20:	dcc00415 	stw	r19,16(sp)
8008ee24:	dc000115 	stw	r16,4(sp)
8008ee28:	dfc00a15 	stw	ra,40(sp)
8008ee2c:	df000915 	stw	fp,36(sp)
8008ee30:	ddc00815 	stw	r23,32(sp)
8008ee34:	dd800715 	stw	r22,28(sp)
8008ee38:	dd400615 	stw	r21,24(sp)
8008ee3c:	dd000515 	stw	r20,20(sp)
8008ee40:	dc800315 	stw	r18,12(sp)
8008ee44:	dc400215 	stw	r17,8(sp)
8008ee48:	2027883a 	mov	r19,r4
8008ee4c:	2821883a 	mov	r16,r5
8008ee50:	3800411e 	bne	r7,zero,8008ef58 <__udivdi3+0x13c>
8008ee54:	3023883a 	mov	r17,r6
8008ee58:	2025883a 	mov	r18,r4
8008ee5c:	2980522e 	bgeu	r5,r6,8008efa8 <__udivdi3+0x18c>
8008ee60:	00bfffd4 	movui	r2,65535
8008ee64:	282d883a 	mov	r22,r5
8008ee68:	1180a836 	bltu	r2,r6,8008f10c <__udivdi3+0x2f0>
8008ee6c:	00803fc4 	movi	r2,255
8008ee70:	1185803a 	cmpltu	r2,r2,r6
8008ee74:	100490fa 	slli	r2,r2,3
8008ee78:	3086d83a 	srl	r3,r6,r2
8008ee7c:	01200274 	movhi	r4,32777
8008ee80:	211a2dc4 	addi	r4,r4,26807
8008ee84:	20c7883a 	add	r3,r4,r3
8008ee88:	18c00003 	ldbu	r3,0(r3)
8008ee8c:	1885883a 	add	r2,r3,r2
8008ee90:	00c00804 	movi	r3,32
8008ee94:	1887c83a 	sub	r3,r3,r2
8008ee98:	18000526 	beq	r3,zero,8008eeb0 <__udivdi3+0x94>
8008ee9c:	80e0983a 	sll	r16,r16,r3
8008eea0:	9884d83a 	srl	r2,r19,r2
8008eea4:	30e2983a 	sll	r17,r6,r3
8008eea8:	98e4983a 	sll	r18,r19,r3
8008eeac:	142cb03a 	or	r22,r2,r16
8008eeb0:	882ad43a 	srli	r21,r17,16
8008eeb4:	b009883a 	mov	r4,r22
8008eeb8:	8d3fffcc 	andi	r20,r17,65535
8008eebc:	a80b883a 	mov	r5,r21
8008eec0:	008fa280 	call	8008fa28 <__umodsi3>
8008eec4:	b009883a 	mov	r4,r22
8008eec8:	a80b883a 	mov	r5,r21
8008eecc:	1027883a 	mov	r19,r2
8008eed0:	008f9c40 	call	8008f9c4 <__udivsi3>
8008eed4:	102d883a 	mov	r22,r2
8008eed8:	9826943a 	slli	r19,r19,16
8008eedc:	9004d43a 	srli	r2,r18,16
8008eee0:	a5a1383a 	mul	r16,r20,r22
8008eee4:	14c4b03a 	or	r2,r2,r19
8008eee8:	1400052e 	bgeu	r2,r16,8008ef00 <__udivdi3+0xe4>
8008eeec:	1445883a 	add	r2,r2,r17
8008eef0:	b0ffffc4 	addi	r3,r22,-1
8008eef4:	14400136 	bltu	r2,r17,8008eefc <__udivdi3+0xe0>
8008eef8:	14012336 	bltu	r2,r16,8008f388 <__udivdi3+0x56c>
8008eefc:	182d883a 	mov	r22,r3
8008ef00:	1421c83a 	sub	r16,r2,r16
8008ef04:	a80b883a 	mov	r5,r21
8008ef08:	8009883a 	mov	r4,r16
8008ef0c:	008fa280 	call	8008fa28 <__umodsi3>
8008ef10:	1027883a 	mov	r19,r2
8008ef14:	a80b883a 	mov	r5,r21
8008ef18:	8009883a 	mov	r4,r16
8008ef1c:	008f9c40 	call	8008f9c4 <__udivsi3>
8008ef20:	9826943a 	slli	r19,r19,16
8008ef24:	a0a9383a 	mul	r20,r20,r2
8008ef28:	94bfffcc 	andi	r18,r18,65535
8008ef2c:	94e4b03a 	or	r18,r18,r19
8008ef30:	9500052e 	bgeu	r18,r20,8008ef48 <__udivdi3+0x12c>
8008ef34:	8ca5883a 	add	r18,r17,r18
8008ef38:	10ffffc4 	addi	r3,r2,-1
8008ef3c:	9440f136 	bltu	r18,r17,8008f304 <__udivdi3+0x4e8>
8008ef40:	9500f02e 	bgeu	r18,r20,8008f304 <__udivdi3+0x4e8>
8008ef44:	10bfff84 	addi	r2,r2,-2
8008ef48:	b00c943a 	slli	r6,r22,16
8008ef4c:	0007883a 	mov	r3,zero
8008ef50:	3084b03a 	or	r2,r6,r2
8008ef54:	00005906 	br	8008f0bc <__udivdi3+0x2a0>
8008ef58:	29c05636 	bltu	r5,r7,8008f0b4 <__udivdi3+0x298>
8008ef5c:	00bfffd4 	movui	r2,65535
8008ef60:	11c0622e 	bgeu	r2,r7,8008f0ec <__udivdi3+0x2d0>
8008ef64:	00804034 	movhi	r2,256
8008ef68:	10bfffc4 	addi	r2,r2,-1
8008ef6c:	11c0ee36 	bltu	r2,r7,8008f328 <__udivdi3+0x50c>
8008ef70:	00800404 	movi	r2,16
8008ef74:	3886d83a 	srl	r3,r7,r2
8008ef78:	01200274 	movhi	r4,32777
8008ef7c:	211a2dc4 	addi	r4,r4,26807
8008ef80:	20c7883a 	add	r3,r4,r3
8008ef84:	18c00003 	ldbu	r3,0(r3)
8008ef88:	05400804 	movi	r21,32
8008ef8c:	1885883a 	add	r2,r3,r2
8008ef90:	a8abc83a 	sub	r21,r21,r2
8008ef94:	a800621e 	bne	r21,zero,8008f120 <__udivdi3+0x304>
8008ef98:	3c00e936 	bltu	r7,r16,8008f340 <__udivdi3+0x524>
8008ef9c:	9985403a 	cmpgeu	r2,r19,r6
8008efa0:	0007883a 	mov	r3,zero
8008efa4:	00004506 	br	8008f0bc <__udivdi3+0x2a0>
8008efa8:	3000041e 	bne	r6,zero,8008efbc <__udivdi3+0x1a0>
8008efac:	000b883a 	mov	r5,zero
8008efb0:	01000044 	movi	r4,1
8008efb4:	008f9c40 	call	8008f9c4 <__udivsi3>
8008efb8:	1023883a 	mov	r17,r2
8008efbc:	00bfffd4 	movui	r2,65535
8008efc0:	14404e2e 	bgeu	r2,r17,8008f0fc <__udivdi3+0x2e0>
8008efc4:	00804034 	movhi	r2,256
8008efc8:	10bfffc4 	addi	r2,r2,-1
8008efcc:	1440d836 	bltu	r2,r17,8008f330 <__udivdi3+0x514>
8008efd0:	00800404 	movi	r2,16
8008efd4:	8886d83a 	srl	r3,r17,r2
8008efd8:	01200274 	movhi	r4,32777
8008efdc:	211a2dc4 	addi	r4,r4,26807
8008efe0:	20c7883a 	add	r3,r4,r3
8008efe4:	18c00003 	ldbu	r3,0(r3)
8008efe8:	1885883a 	add	r2,r3,r2
8008efec:	00c00804 	movi	r3,32
8008eff0:	1887c83a 	sub	r3,r3,r2
8008eff4:	18008f1e 	bne	r3,zero,8008f234 <__udivdi3+0x418>
8008eff8:	882ad43a 	srli	r21,r17,16
8008effc:	8461c83a 	sub	r16,r16,r17
8008f000:	8d3fffcc 	andi	r20,r17,65535
8008f004:	00c00044 	movi	r3,1
8008f008:	8009883a 	mov	r4,r16
8008f00c:	a80b883a 	mov	r5,r21
8008f010:	d8c00015 	stw	r3,0(sp)
8008f014:	008fa280 	call	8008fa28 <__umodsi3>
8008f018:	8009883a 	mov	r4,r16
8008f01c:	a80b883a 	mov	r5,r21
8008f020:	1027883a 	mov	r19,r2
8008f024:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f028:	9826943a 	slli	r19,r19,16
8008f02c:	9008d43a 	srli	r4,r18,16
8008f030:	1521383a 	mul	r16,r2,r20
8008f034:	102d883a 	mov	r22,r2
8008f038:	24c8b03a 	or	r4,r4,r19
8008f03c:	d8c00017 	ldw	r3,0(sp)
8008f040:	2400052e 	bgeu	r4,r16,8008f058 <__udivdi3+0x23c>
8008f044:	2449883a 	add	r4,r4,r17
8008f048:	b0bfffc4 	addi	r2,r22,-1
8008f04c:	24400136 	bltu	r4,r17,8008f054 <__udivdi3+0x238>
8008f050:	2400ca36 	bltu	r4,r16,8008f37c <__udivdi3+0x560>
8008f054:	102d883a 	mov	r22,r2
8008f058:	2421c83a 	sub	r16,r4,r16
8008f05c:	a80b883a 	mov	r5,r21
8008f060:	8009883a 	mov	r4,r16
8008f064:	d8c00015 	stw	r3,0(sp)
8008f068:	008fa280 	call	8008fa28 <__umodsi3>
8008f06c:	1027883a 	mov	r19,r2
8008f070:	a80b883a 	mov	r5,r21
8008f074:	8009883a 	mov	r4,r16
8008f078:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f07c:	9826943a 	slli	r19,r19,16
8008f080:	1529383a 	mul	r20,r2,r20
8008f084:	94bfffcc 	andi	r18,r18,65535
8008f088:	94e4b03a 	or	r18,r18,r19
8008f08c:	d8c00017 	ldw	r3,0(sp)
8008f090:	9500052e 	bgeu	r18,r20,8008f0a8 <__udivdi3+0x28c>
8008f094:	8ca5883a 	add	r18,r17,r18
8008f098:	113fffc4 	addi	r4,r2,-1
8008f09c:	94409736 	bltu	r18,r17,8008f2fc <__udivdi3+0x4e0>
8008f0a0:	9500962e 	bgeu	r18,r20,8008f2fc <__udivdi3+0x4e0>
8008f0a4:	10bfff84 	addi	r2,r2,-2
8008f0a8:	b00c943a 	slli	r6,r22,16
8008f0ac:	3084b03a 	or	r2,r6,r2
8008f0b0:	00000206 	br	8008f0bc <__udivdi3+0x2a0>
8008f0b4:	0007883a 	mov	r3,zero
8008f0b8:	0005883a 	mov	r2,zero
8008f0bc:	dfc00a17 	ldw	ra,40(sp)
8008f0c0:	df000917 	ldw	fp,36(sp)
8008f0c4:	ddc00817 	ldw	r23,32(sp)
8008f0c8:	dd800717 	ldw	r22,28(sp)
8008f0cc:	dd400617 	ldw	r21,24(sp)
8008f0d0:	dd000517 	ldw	r20,20(sp)
8008f0d4:	dcc00417 	ldw	r19,16(sp)
8008f0d8:	dc800317 	ldw	r18,12(sp)
8008f0dc:	dc400217 	ldw	r17,8(sp)
8008f0e0:	dc000117 	ldw	r16,4(sp)
8008f0e4:	dec00b04 	addi	sp,sp,44
8008f0e8:	f800283a 	ret
8008f0ec:	00803fc4 	movi	r2,255
8008f0f0:	11c5803a 	cmpltu	r2,r2,r7
8008f0f4:	100490fa 	slli	r2,r2,3
8008f0f8:	003f9e06 	br	8008ef74 <__udivdi3+0x158>
8008f0fc:	00803fc4 	movi	r2,255
8008f100:	1445803a 	cmpltu	r2,r2,r17
8008f104:	100490fa 	slli	r2,r2,3
8008f108:	003fb206 	br	8008efd4 <__udivdi3+0x1b8>
8008f10c:	00804034 	movhi	r2,256
8008f110:	10bfffc4 	addi	r2,r2,-1
8008f114:	11808836 	bltu	r2,r6,8008f338 <__udivdi3+0x51c>
8008f118:	00800404 	movi	r2,16
8008f11c:	003f5606 	br	8008ee78 <__udivdi3+0x5c>
8008f120:	30aed83a 	srl	r23,r6,r2
8008f124:	3d4e983a 	sll	r7,r7,r21
8008f128:	80acd83a 	srl	r22,r16,r2
8008f12c:	9884d83a 	srl	r2,r19,r2
8008f130:	3deeb03a 	or	r23,r7,r23
8008f134:	b824d43a 	srli	r18,r23,16
8008f138:	8560983a 	sll	r16,r16,r21
8008f13c:	b009883a 	mov	r4,r22
8008f140:	900b883a 	mov	r5,r18
8008f144:	3568983a 	sll	r20,r6,r21
8008f148:	1420b03a 	or	r16,r2,r16
8008f14c:	008fa280 	call	8008fa28 <__umodsi3>
8008f150:	b009883a 	mov	r4,r22
8008f154:	900b883a 	mov	r5,r18
8008f158:	1023883a 	mov	r17,r2
8008f15c:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f160:	8808943a 	slli	r4,r17,16
8008f164:	bf3fffcc 	andi	fp,r23,65535
8008f168:	8006d43a 	srli	r3,r16,16
8008f16c:	e0a3383a 	mul	r17,fp,r2
8008f170:	100d883a 	mov	r6,r2
8008f174:	1906b03a 	or	r3,r3,r4
8008f178:	1c40042e 	bgeu	r3,r17,8008f18c <__udivdi3+0x370>
8008f17c:	1dc7883a 	add	r3,r3,r23
8008f180:	10bfffc4 	addi	r2,r2,-1
8008f184:	1dc0752e 	bgeu	r3,r23,8008f35c <__udivdi3+0x540>
8008f188:	100d883a 	mov	r6,r2
8008f18c:	1c63c83a 	sub	r17,r3,r17
8008f190:	900b883a 	mov	r5,r18
8008f194:	8809883a 	mov	r4,r17
8008f198:	d9800015 	stw	r6,0(sp)
8008f19c:	008fa280 	call	8008fa28 <__umodsi3>
8008f1a0:	102d883a 	mov	r22,r2
8008f1a4:	8809883a 	mov	r4,r17
8008f1a8:	900b883a 	mov	r5,r18
8008f1ac:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f1b0:	b02c943a 	slli	r22,r22,16
8008f1b4:	e089383a 	mul	r4,fp,r2
8008f1b8:	843fffcc 	andi	r16,r16,65535
8008f1bc:	85a0b03a 	or	r16,r16,r22
8008f1c0:	d9800017 	ldw	r6,0(sp)
8008f1c4:	8100042e 	bgeu	r16,r4,8008f1d8 <__udivdi3+0x3bc>
8008f1c8:	85e1883a 	add	r16,r16,r23
8008f1cc:	10ffffc4 	addi	r3,r2,-1
8008f1d0:	85c05e2e 	bgeu	r16,r23,8008f34c <__udivdi3+0x530>
8008f1d4:	1805883a 	mov	r2,r3
8008f1d8:	300c943a 	slli	r6,r6,16
8008f1dc:	a17fffcc 	andi	r5,r20,65535
8008f1e0:	a028d43a 	srli	r20,r20,16
8008f1e4:	3084b03a 	or	r2,r6,r2
8008f1e8:	10ffffcc 	andi	r3,r2,65535
8008f1ec:	100cd43a 	srli	r6,r2,16
8008f1f0:	194f383a 	mul	r7,r3,r5
8008f1f4:	1d07383a 	mul	r3,r3,r20
8008f1f8:	314b383a 	mul	r5,r6,r5
8008f1fc:	3810d43a 	srli	r8,r7,16
8008f200:	8121c83a 	sub	r16,r16,r4
8008f204:	1947883a 	add	r3,r3,r5
8008f208:	40c7883a 	add	r3,r8,r3
8008f20c:	350d383a 	mul	r6,r6,r20
8008f210:	1940022e 	bgeu	r3,r5,8008f21c <__udivdi3+0x400>
8008f214:	01000074 	movhi	r4,1
8008f218:	310d883a 	add	r6,r6,r4
8008f21c:	1828d43a 	srli	r20,r3,16
8008f220:	a18d883a 	add	r6,r20,r6
8008f224:	81803e36 	bltu	r16,r6,8008f320 <__udivdi3+0x504>
8008f228:	81803826 	beq	r16,r6,8008f30c <__udivdi3+0x4f0>
8008f22c:	0007883a 	mov	r3,zero
8008f230:	003fa206 	br	8008f0bc <__udivdi3+0x2a0>
8008f234:	88e2983a 	sll	r17,r17,r3
8008f238:	80a8d83a 	srl	r20,r16,r2
8008f23c:	80e0983a 	sll	r16,r16,r3
8008f240:	882ad43a 	srli	r21,r17,16
8008f244:	9884d83a 	srl	r2,r19,r2
8008f248:	a009883a 	mov	r4,r20
8008f24c:	a80b883a 	mov	r5,r21
8008f250:	142eb03a 	or	r23,r2,r16
8008f254:	98e4983a 	sll	r18,r19,r3
8008f258:	008fa280 	call	8008fa28 <__umodsi3>
8008f25c:	a009883a 	mov	r4,r20
8008f260:	a80b883a 	mov	r5,r21
8008f264:	1021883a 	mov	r16,r2
8008f268:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f26c:	1039883a 	mov	fp,r2
8008f270:	8d3fffcc 	andi	r20,r17,65535
8008f274:	8020943a 	slli	r16,r16,16
8008f278:	b804d43a 	srli	r2,r23,16
8008f27c:	a72d383a 	mul	r22,r20,fp
8008f280:	1404b03a 	or	r2,r2,r16
8008f284:	1580062e 	bgeu	r2,r22,8008f2a0 <__udivdi3+0x484>
8008f288:	1445883a 	add	r2,r2,r17
8008f28c:	e0ffffc4 	addi	r3,fp,-1
8008f290:	14403836 	bltu	r2,r17,8008f374 <__udivdi3+0x558>
8008f294:	1580372e 	bgeu	r2,r22,8008f374 <__udivdi3+0x558>
8008f298:	e73fff84 	addi	fp,fp,-2
8008f29c:	1445883a 	add	r2,r2,r17
8008f2a0:	15adc83a 	sub	r22,r2,r22
8008f2a4:	a80b883a 	mov	r5,r21
8008f2a8:	b009883a 	mov	r4,r22
8008f2ac:	008fa280 	call	8008fa28 <__umodsi3>
8008f2b0:	1027883a 	mov	r19,r2
8008f2b4:	b009883a 	mov	r4,r22
8008f2b8:	a80b883a 	mov	r5,r21
8008f2bc:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f2c0:	9826943a 	slli	r19,r19,16
8008f2c4:	a0a1383a 	mul	r16,r20,r2
8008f2c8:	b93fffcc 	andi	r4,r23,65535
8008f2cc:	24c8b03a 	or	r4,r4,r19
8008f2d0:	2400062e 	bgeu	r4,r16,8008f2ec <__udivdi3+0x4d0>
8008f2d4:	2449883a 	add	r4,r4,r17
8008f2d8:	10ffffc4 	addi	r3,r2,-1
8008f2dc:	24402336 	bltu	r4,r17,8008f36c <__udivdi3+0x550>
8008f2e0:	2400222e 	bgeu	r4,r16,8008f36c <__udivdi3+0x550>
8008f2e4:	10bfff84 	addi	r2,r2,-2
8008f2e8:	2449883a 	add	r4,r4,r17
8008f2ec:	e038943a 	slli	fp,fp,16
8008f2f0:	2421c83a 	sub	r16,r4,r16
8008f2f4:	e086b03a 	or	r3,fp,r2
8008f2f8:	003f4306 	br	8008f008 <__udivdi3+0x1ec>
8008f2fc:	2005883a 	mov	r2,r4
8008f300:	003f6906 	br	8008f0a8 <__udivdi3+0x28c>
8008f304:	1805883a 	mov	r2,r3
8008f308:	003f0f06 	br	8008ef48 <__udivdi3+0x12c>
8008f30c:	1806943a 	slli	r3,r3,16
8008f310:	9d66983a 	sll	r19,r19,r21
8008f314:	39ffffcc 	andi	r7,r7,65535
8008f318:	19c7883a 	add	r3,r3,r7
8008f31c:	98ffc32e 	bgeu	r19,r3,8008f22c <__udivdi3+0x410>
8008f320:	10bfffc4 	addi	r2,r2,-1
8008f324:	003fc106 	br	8008f22c <__udivdi3+0x410>
8008f328:	00800604 	movi	r2,24
8008f32c:	003f1106 	br	8008ef74 <__udivdi3+0x158>
8008f330:	00800604 	movi	r2,24
8008f334:	003f2706 	br	8008efd4 <__udivdi3+0x1b8>
8008f338:	00800604 	movi	r2,24
8008f33c:	003ece06 	br	8008ee78 <__udivdi3+0x5c>
8008f340:	0007883a 	mov	r3,zero
8008f344:	00800044 	movi	r2,1
8008f348:	003f5c06 	br	8008f0bc <__udivdi3+0x2a0>
8008f34c:	813fa12e 	bgeu	r16,r4,8008f1d4 <__udivdi3+0x3b8>
8008f350:	10bfff84 	addi	r2,r2,-2
8008f354:	85e1883a 	add	r16,r16,r23
8008f358:	003f9f06 	br	8008f1d8 <__udivdi3+0x3bc>
8008f35c:	1c7f8a2e 	bgeu	r3,r17,8008f188 <__udivdi3+0x36c>
8008f360:	31bfff84 	addi	r6,r6,-2
8008f364:	1dc7883a 	add	r3,r3,r23
8008f368:	003f8806 	br	8008f18c <__udivdi3+0x370>
8008f36c:	1805883a 	mov	r2,r3
8008f370:	003fde06 	br	8008f2ec <__udivdi3+0x4d0>
8008f374:	1839883a 	mov	fp,r3
8008f378:	003fc906 	br	8008f2a0 <__udivdi3+0x484>
8008f37c:	b5bfff84 	addi	r22,r22,-2
8008f380:	2449883a 	add	r4,r4,r17
8008f384:	003f3406 	br	8008f058 <__udivdi3+0x23c>
8008f388:	b5bfff84 	addi	r22,r22,-2
8008f38c:	1445883a 	add	r2,r2,r17
8008f390:	003edb06 	br	8008ef00 <__udivdi3+0xe4>

8008f394 <__umoddi3>:
8008f394:	defff404 	addi	sp,sp,-48
8008f398:	df000a15 	stw	fp,40(sp)
8008f39c:	dc400315 	stw	r17,12(sp)
8008f3a0:	dc000215 	stw	r16,8(sp)
8008f3a4:	dfc00b15 	stw	ra,44(sp)
8008f3a8:	ddc00915 	stw	r23,36(sp)
8008f3ac:	dd800815 	stw	r22,32(sp)
8008f3b0:	dd400715 	stw	r21,28(sp)
8008f3b4:	dd000615 	stw	r20,24(sp)
8008f3b8:	dcc00515 	stw	r19,20(sp)
8008f3bc:	dc800415 	stw	r18,16(sp)
8008f3c0:	2021883a 	mov	r16,r4
8008f3c4:	2823883a 	mov	r17,r5
8008f3c8:	2839883a 	mov	fp,r5
8008f3cc:	38003c1e 	bne	r7,zero,8008f4c0 <__umoddi3+0x12c>
8008f3d0:	3027883a 	mov	r19,r6
8008f3d4:	2029883a 	mov	r20,r4
8008f3d8:	2980512e 	bgeu	r5,r6,8008f520 <__umoddi3+0x18c>
8008f3dc:	00bfffd4 	movui	r2,65535
8008f3e0:	11809a36 	bltu	r2,r6,8008f64c <__umoddi3+0x2b8>
8008f3e4:	01003fc4 	movi	r4,255
8008f3e8:	2189803a 	cmpltu	r4,r4,r6
8008f3ec:	200890fa 	slli	r4,r4,3
8008f3f0:	3104d83a 	srl	r2,r6,r4
8008f3f4:	00e00274 	movhi	r3,32777
8008f3f8:	18da2dc4 	addi	r3,r3,26807
8008f3fc:	1885883a 	add	r2,r3,r2
8008f400:	10c00003 	ldbu	r3,0(r2)
8008f404:	00800804 	movi	r2,32
8008f408:	1909883a 	add	r4,r3,r4
8008f40c:	1125c83a 	sub	r18,r2,r4
8008f410:	90000526 	beq	r18,zero,8008f428 <__umoddi3+0x94>
8008f414:	8ca2983a 	sll	r17,r17,r18
8008f418:	8108d83a 	srl	r4,r16,r4
8008f41c:	34a6983a 	sll	r19,r6,r18
8008f420:	84a8983a 	sll	r20,r16,r18
8008f424:	2478b03a 	or	fp,r4,r17
8008f428:	982ed43a 	srli	r23,r19,16
8008f42c:	e009883a 	mov	r4,fp
8008f430:	9dbfffcc 	andi	r22,r19,65535
8008f434:	b80b883a 	mov	r5,r23
8008f438:	008fa280 	call	8008fa28 <__umodsi3>
8008f43c:	e009883a 	mov	r4,fp
8008f440:	b80b883a 	mov	r5,r23
8008f444:	102b883a 	mov	r21,r2
8008f448:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f44c:	a806943a 	slli	r3,r21,16
8008f450:	a008d43a 	srli	r4,r20,16
8008f454:	b085383a 	mul	r2,r22,r2
8008f458:	20c8b03a 	or	r4,r4,r3
8008f45c:	2080032e 	bgeu	r4,r2,8008f46c <__umoddi3+0xd8>
8008f460:	24c9883a 	add	r4,r4,r19
8008f464:	24c00136 	bltu	r4,r19,8008f46c <__umoddi3+0xd8>
8008f468:	20811036 	bltu	r4,r2,8008f8ac <__umoddi3+0x518>
8008f46c:	20abc83a 	sub	r21,r4,r2
8008f470:	b80b883a 	mov	r5,r23
8008f474:	a809883a 	mov	r4,r21
8008f478:	008fa280 	call	8008fa28 <__umodsi3>
8008f47c:	1023883a 	mov	r17,r2
8008f480:	b80b883a 	mov	r5,r23
8008f484:	a809883a 	mov	r4,r21
8008f488:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f48c:	8822943a 	slli	r17,r17,16
8008f490:	b085383a 	mul	r2,r22,r2
8008f494:	a0ffffcc 	andi	r3,r20,65535
8008f498:	1c46b03a 	or	r3,r3,r17
8008f49c:	1880042e 	bgeu	r3,r2,8008f4b0 <__umoddi3+0x11c>
8008f4a0:	1cc7883a 	add	r3,r3,r19
8008f4a4:	1cc00236 	bltu	r3,r19,8008f4b0 <__umoddi3+0x11c>
8008f4a8:	1880012e 	bgeu	r3,r2,8008f4b0 <__umoddi3+0x11c>
8008f4ac:	1cc7883a 	add	r3,r3,r19
8008f4b0:	1885c83a 	sub	r2,r3,r2
8008f4b4:	1484d83a 	srl	r2,r2,r18
8008f4b8:	0007883a 	mov	r3,zero
8008f4bc:	00004f06 	br	8008f5fc <__umoddi3+0x268>
8008f4c0:	29c04c36 	bltu	r5,r7,8008f5f4 <__umoddi3+0x260>
8008f4c4:	00bfffd4 	movui	r2,65535
8008f4c8:	11c0582e 	bgeu	r2,r7,8008f62c <__umoddi3+0x298>
8008f4cc:	00804034 	movhi	r2,256
8008f4d0:	10bfffc4 	addi	r2,r2,-1
8008f4d4:	11c0e736 	bltu	r2,r7,8008f874 <__umoddi3+0x4e0>
8008f4d8:	01000404 	movi	r4,16
8008f4dc:	3904d83a 	srl	r2,r7,r4
8008f4e0:	00e00274 	movhi	r3,32777
8008f4e4:	18da2dc4 	addi	r3,r3,26807
8008f4e8:	1885883a 	add	r2,r3,r2
8008f4ec:	14c00003 	ldbu	r19,0(r2)
8008f4f0:	00c00804 	movi	r3,32
8008f4f4:	9927883a 	add	r19,r19,r4
8008f4f8:	1ce9c83a 	sub	r20,r3,r19
8008f4fc:	a000581e 	bne	r20,zero,8008f660 <__umoddi3+0x2cc>
8008f500:	3c400136 	bltu	r7,r17,8008f508 <__umoddi3+0x174>
8008f504:	8180eb36 	bltu	r16,r6,8008f8b4 <__umoddi3+0x520>
8008f508:	8185c83a 	sub	r2,r16,r6
8008f50c:	89e3c83a 	sub	r17,r17,r7
8008f510:	8089803a 	cmpltu	r4,r16,r2
8008f514:	8939c83a 	sub	fp,r17,r4
8008f518:	e007883a 	mov	r3,fp
8008f51c:	00003706 	br	8008f5fc <__umoddi3+0x268>
8008f520:	3000041e 	bne	r6,zero,8008f534 <__umoddi3+0x1a0>
8008f524:	000b883a 	mov	r5,zero
8008f528:	01000044 	movi	r4,1
8008f52c:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f530:	1027883a 	mov	r19,r2
8008f534:	00bfffd4 	movui	r2,65535
8008f538:	14c0402e 	bgeu	r2,r19,8008f63c <__umoddi3+0x2a8>
8008f53c:	00804034 	movhi	r2,256
8008f540:	10bfffc4 	addi	r2,r2,-1
8008f544:	14c0cd36 	bltu	r2,r19,8008f87c <__umoddi3+0x4e8>
8008f548:	00800404 	movi	r2,16
8008f54c:	9886d83a 	srl	r3,r19,r2
8008f550:	01200274 	movhi	r4,32777
8008f554:	211a2dc4 	addi	r4,r4,26807
8008f558:	20c7883a 	add	r3,r4,r3
8008f55c:	18c00003 	ldbu	r3,0(r3)
8008f560:	1887883a 	add	r3,r3,r2
8008f564:	00800804 	movi	r2,32
8008f568:	10e5c83a 	sub	r18,r2,r3
8008f56c:	9000901e 	bne	r18,zero,8008f7b0 <__umoddi3+0x41c>
8008f570:	982cd43a 	srli	r22,r19,16
8008f574:	8ce3c83a 	sub	r17,r17,r19
8008f578:	9d7fffcc 	andi	r21,r19,65535
8008f57c:	b00b883a 	mov	r5,r22
8008f580:	8809883a 	mov	r4,r17
8008f584:	008fa280 	call	8008fa28 <__umodsi3>
8008f588:	8809883a 	mov	r4,r17
8008f58c:	b00b883a 	mov	r5,r22
8008f590:	1021883a 	mov	r16,r2
8008f594:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f598:	8006943a 	slli	r3,r16,16
8008f59c:	a008d43a 	srli	r4,r20,16
8008f5a0:	1545383a 	mul	r2,r2,r21
8008f5a4:	20c8b03a 	or	r4,r4,r3
8008f5a8:	2080042e 	bgeu	r4,r2,8008f5bc <__umoddi3+0x228>
8008f5ac:	24c9883a 	add	r4,r4,r19
8008f5b0:	24c00236 	bltu	r4,r19,8008f5bc <__umoddi3+0x228>
8008f5b4:	2080012e 	bgeu	r4,r2,8008f5bc <__umoddi3+0x228>
8008f5b8:	24c9883a 	add	r4,r4,r19
8008f5bc:	20a1c83a 	sub	r16,r4,r2
8008f5c0:	b00b883a 	mov	r5,r22
8008f5c4:	8009883a 	mov	r4,r16
8008f5c8:	008fa280 	call	8008fa28 <__umodsi3>
8008f5cc:	1023883a 	mov	r17,r2
8008f5d0:	b00b883a 	mov	r5,r22
8008f5d4:	8009883a 	mov	r4,r16
8008f5d8:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f5dc:	8822943a 	slli	r17,r17,16
8008f5e0:	1545383a 	mul	r2,r2,r21
8008f5e4:	a53fffcc 	andi	r20,r20,65535
8008f5e8:	a446b03a 	or	r3,r20,r17
8008f5ec:	18bfb02e 	bgeu	r3,r2,8008f4b0 <__umoddi3+0x11c>
8008f5f0:	003fab06 	br	8008f4a0 <__umoddi3+0x10c>
8008f5f4:	2005883a 	mov	r2,r4
8008f5f8:	2807883a 	mov	r3,r5
8008f5fc:	dfc00b17 	ldw	ra,44(sp)
8008f600:	df000a17 	ldw	fp,40(sp)
8008f604:	ddc00917 	ldw	r23,36(sp)
8008f608:	dd800817 	ldw	r22,32(sp)
8008f60c:	dd400717 	ldw	r21,28(sp)
8008f610:	dd000617 	ldw	r20,24(sp)
8008f614:	dcc00517 	ldw	r19,20(sp)
8008f618:	dc800417 	ldw	r18,16(sp)
8008f61c:	dc400317 	ldw	r17,12(sp)
8008f620:	dc000217 	ldw	r16,8(sp)
8008f624:	dec00c04 	addi	sp,sp,48
8008f628:	f800283a 	ret
8008f62c:	04c03fc4 	movi	r19,255
8008f630:	99c9803a 	cmpltu	r4,r19,r7
8008f634:	200890fa 	slli	r4,r4,3
8008f638:	003fa806 	br	8008f4dc <__umoddi3+0x148>
8008f63c:	00803fc4 	movi	r2,255
8008f640:	14c5803a 	cmpltu	r2,r2,r19
8008f644:	100490fa 	slli	r2,r2,3
8008f648:	003fc006 	br	8008f54c <__umoddi3+0x1b8>
8008f64c:	00804034 	movhi	r2,256
8008f650:	10bfffc4 	addi	r2,r2,-1
8008f654:	11808b36 	bltu	r2,r6,8008f884 <__umoddi3+0x4f0>
8008f658:	01000404 	movi	r4,16
8008f65c:	003f6406 	br	8008f3f0 <__umoddi3+0x5c>
8008f660:	34c4d83a 	srl	r2,r6,r19
8008f664:	3d0e983a 	sll	r7,r7,r20
8008f668:	8cf8d83a 	srl	fp,r17,r19
8008f66c:	8d10983a 	sll	r8,r17,r20
8008f670:	38aab03a 	or	r21,r7,r2
8008f674:	a82cd43a 	srli	r22,r21,16
8008f678:	84e2d83a 	srl	r17,r16,r19
8008f67c:	e009883a 	mov	r4,fp
8008f680:	b00b883a 	mov	r5,r22
8008f684:	8a22b03a 	or	r17,r17,r8
8008f688:	3524983a 	sll	r18,r6,r20
8008f68c:	008fa280 	call	8008fa28 <__umodsi3>
8008f690:	e009883a 	mov	r4,fp
8008f694:	b00b883a 	mov	r5,r22
8008f698:	102f883a 	mov	r23,r2
8008f69c:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f6a0:	100d883a 	mov	r6,r2
8008f6a4:	b808943a 	slli	r4,r23,16
8008f6a8:	aa3fffcc 	andi	r8,r21,65535
8008f6ac:	8804d43a 	srli	r2,r17,16
8008f6b0:	41af383a 	mul	r23,r8,r6
8008f6b4:	8520983a 	sll	r16,r16,r20
8008f6b8:	1104b03a 	or	r2,r2,r4
8008f6bc:	15c0042e 	bgeu	r2,r23,8008f6d0 <__umoddi3+0x33c>
8008f6c0:	1545883a 	add	r2,r2,r21
8008f6c4:	30ffffc4 	addi	r3,r6,-1
8008f6c8:	1540742e 	bgeu	r2,r21,8008f89c <__umoddi3+0x508>
8008f6cc:	180d883a 	mov	r6,r3
8008f6d0:	15efc83a 	sub	r23,r2,r23
8008f6d4:	b00b883a 	mov	r5,r22
8008f6d8:	b809883a 	mov	r4,r23
8008f6dc:	d9800115 	stw	r6,4(sp)
8008f6e0:	da000015 	stw	r8,0(sp)
8008f6e4:	008fa280 	call	8008fa28 <__umodsi3>
8008f6e8:	b00b883a 	mov	r5,r22
8008f6ec:	b809883a 	mov	r4,r23
8008f6f0:	1039883a 	mov	fp,r2
8008f6f4:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f6f8:	da000017 	ldw	r8,0(sp)
8008f6fc:	e038943a 	slli	fp,fp,16
8008f700:	100b883a 	mov	r5,r2
8008f704:	4089383a 	mul	r4,r8,r2
8008f708:	8a3fffcc 	andi	r8,r17,65535
8008f70c:	4710b03a 	or	r8,r8,fp
8008f710:	d9800117 	ldw	r6,4(sp)
8008f714:	4100042e 	bgeu	r8,r4,8008f728 <__umoddi3+0x394>
8008f718:	4551883a 	add	r8,r8,r21
8008f71c:	10bfffc4 	addi	r2,r2,-1
8008f720:	45405a2e 	bgeu	r8,r21,8008f88c <__umoddi3+0x4f8>
8008f724:	100b883a 	mov	r5,r2
8008f728:	300c943a 	slli	r6,r6,16
8008f72c:	91ffffcc 	andi	r7,r18,65535
8008f730:	9004d43a 	srli	r2,r18,16
8008f734:	314cb03a 	or	r6,r6,r5
8008f738:	317fffcc 	andi	r5,r6,65535
8008f73c:	300cd43a 	srli	r6,r6,16
8008f740:	29d3383a 	mul	r9,r5,r7
8008f744:	288b383a 	mul	r5,r5,r2
8008f748:	31cf383a 	mul	r7,r6,r7
8008f74c:	4806d43a 	srli	r3,r9,16
8008f750:	4111c83a 	sub	r8,r8,r4
8008f754:	29cb883a 	add	r5,r5,r7
8008f758:	194b883a 	add	r5,r3,r5
8008f75c:	3085383a 	mul	r2,r6,r2
8008f760:	29c0022e 	bgeu	r5,r7,8008f76c <__umoddi3+0x3d8>
8008f764:	00c00074 	movhi	r3,1
8008f768:	10c5883a 	add	r2,r2,r3
8008f76c:	2808d43a 	srli	r4,r5,16
8008f770:	280a943a 	slli	r5,r5,16
8008f774:	4a7fffcc 	andi	r9,r9,65535
8008f778:	2085883a 	add	r2,r4,r2
8008f77c:	2a4b883a 	add	r5,r5,r9
8008f780:	40803636 	bltu	r8,r2,8008f85c <__umoddi3+0x4c8>
8008f784:	40804d26 	beq	r8,r2,8008f8bc <__umoddi3+0x528>
8008f788:	4089c83a 	sub	r4,r8,r2
8008f78c:	280f883a 	mov	r7,r5
8008f790:	81cfc83a 	sub	r7,r16,r7
8008f794:	81c7803a 	cmpltu	r3,r16,r7
8008f798:	20c7c83a 	sub	r3,r4,r3
8008f79c:	1cc4983a 	sll	r2,r3,r19
8008f7a0:	3d0ed83a 	srl	r7,r7,r20
8008f7a4:	1d06d83a 	srl	r3,r3,r20
8008f7a8:	11c4b03a 	or	r2,r2,r7
8008f7ac:	003f9306 	br	8008f5fc <__umoddi3+0x268>
8008f7b0:	9ca6983a 	sll	r19,r19,r18
8008f7b4:	88e8d83a 	srl	r20,r17,r3
8008f7b8:	80c4d83a 	srl	r2,r16,r3
8008f7bc:	982cd43a 	srli	r22,r19,16
8008f7c0:	8ca2983a 	sll	r17,r17,r18
8008f7c4:	a009883a 	mov	r4,r20
8008f7c8:	b00b883a 	mov	r5,r22
8008f7cc:	1478b03a 	or	fp,r2,r17
8008f7d0:	008fa280 	call	8008fa28 <__umodsi3>
8008f7d4:	a009883a 	mov	r4,r20
8008f7d8:	b00b883a 	mov	r5,r22
8008f7dc:	1023883a 	mov	r17,r2
8008f7e0:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f7e4:	9d7fffcc 	andi	r21,r19,65535
8008f7e8:	880a943a 	slli	r5,r17,16
8008f7ec:	e008d43a 	srli	r4,fp,16
8008f7f0:	a885383a 	mul	r2,r21,r2
8008f7f4:	84a8983a 	sll	r20,r16,r18
8008f7f8:	2148b03a 	or	r4,r4,r5
8008f7fc:	2080042e 	bgeu	r4,r2,8008f810 <__umoddi3+0x47c>
8008f800:	24c9883a 	add	r4,r4,r19
8008f804:	24c00236 	bltu	r4,r19,8008f810 <__umoddi3+0x47c>
8008f808:	2080012e 	bgeu	r4,r2,8008f810 <__umoddi3+0x47c>
8008f80c:	24c9883a 	add	r4,r4,r19
8008f810:	20a3c83a 	sub	r17,r4,r2
8008f814:	b00b883a 	mov	r5,r22
8008f818:	8809883a 	mov	r4,r17
8008f81c:	008fa280 	call	8008fa28 <__umodsi3>
8008f820:	102f883a 	mov	r23,r2
8008f824:	8809883a 	mov	r4,r17
8008f828:	b00b883a 	mov	r5,r22
8008f82c:	008f9c40 	call	8008f9c4 <__udivsi3>
8008f830:	b82e943a 	slli	r23,r23,16
8008f834:	a885383a 	mul	r2,r21,r2
8008f838:	e13fffcc 	andi	r4,fp,65535
8008f83c:	25c8b03a 	or	r4,r4,r23
8008f840:	2080042e 	bgeu	r4,r2,8008f854 <__umoddi3+0x4c0>
8008f844:	24c9883a 	add	r4,r4,r19
8008f848:	24c00236 	bltu	r4,r19,8008f854 <__umoddi3+0x4c0>
8008f84c:	2080012e 	bgeu	r4,r2,8008f854 <__umoddi3+0x4c0>
8008f850:	24c9883a 	add	r4,r4,r19
8008f854:	20a3c83a 	sub	r17,r4,r2
8008f858:	003f4806 	br	8008f57c <__umoddi3+0x1e8>
8008f85c:	2c8fc83a 	sub	r7,r5,r18
8008f860:	1545c83a 	sub	r2,r2,r21
8008f864:	29cb803a 	cmpltu	r5,r5,r7
8008f868:	1145c83a 	sub	r2,r2,r5
8008f86c:	4089c83a 	sub	r4,r8,r2
8008f870:	003fc706 	br	8008f790 <__umoddi3+0x3fc>
8008f874:	01000604 	movi	r4,24
8008f878:	003f1806 	br	8008f4dc <__umoddi3+0x148>
8008f87c:	00800604 	movi	r2,24
8008f880:	003f3206 	br	8008f54c <__umoddi3+0x1b8>
8008f884:	01000604 	movi	r4,24
8008f888:	003ed906 	br	8008f3f0 <__umoddi3+0x5c>
8008f88c:	413fa52e 	bgeu	r8,r4,8008f724 <__umoddi3+0x390>
8008f890:	297fff84 	addi	r5,r5,-2
8008f894:	4551883a 	add	r8,r8,r21
8008f898:	003fa306 	br	8008f728 <__umoddi3+0x394>
8008f89c:	15ff8b2e 	bgeu	r2,r23,8008f6cc <__umoddi3+0x338>
8008f8a0:	31bfff84 	addi	r6,r6,-2
8008f8a4:	1545883a 	add	r2,r2,r21
8008f8a8:	003f8906 	br	8008f6d0 <__umoddi3+0x33c>
8008f8ac:	24c9883a 	add	r4,r4,r19
8008f8b0:	003eee06 	br	8008f46c <__umoddi3+0xd8>
8008f8b4:	8005883a 	mov	r2,r16
8008f8b8:	003f1706 	br	8008f518 <__umoddi3+0x184>
8008f8bc:	817fe736 	bltu	r16,r5,8008f85c <__umoddi3+0x4c8>
8008f8c0:	280f883a 	mov	r7,r5
8008f8c4:	0009883a 	mov	r4,zero
8008f8c8:	003fb106 	br	8008f790 <__umoddi3+0x3fc>

8008f8cc <__divsi3>:
8008f8cc:	20001b16 	blt	r4,zero,8008f93c <__divsi3+0x70>
8008f8d0:	000f883a 	mov	r7,zero
8008f8d4:	28001616 	blt	r5,zero,8008f930 <__divsi3+0x64>
8008f8d8:	200d883a 	mov	r6,r4
8008f8dc:	29001a2e 	bgeu	r5,r4,8008f948 <__divsi3+0x7c>
8008f8e0:	00800804 	movi	r2,32
8008f8e4:	00c00044 	movi	r3,1
8008f8e8:	00000106 	br	8008f8f0 <__divsi3+0x24>
8008f8ec:	10000d26 	beq	r2,zero,8008f924 <__divsi3+0x58>
8008f8f0:	294b883a 	add	r5,r5,r5
8008f8f4:	10bfffc4 	addi	r2,r2,-1
8008f8f8:	18c7883a 	add	r3,r3,r3
8008f8fc:	293ffb36 	bltu	r5,r4,8008f8ec <__divsi3+0x20>
8008f900:	0005883a 	mov	r2,zero
8008f904:	18000726 	beq	r3,zero,8008f924 <__divsi3+0x58>
8008f908:	0005883a 	mov	r2,zero
8008f90c:	31400236 	bltu	r6,r5,8008f918 <__divsi3+0x4c>
8008f910:	314dc83a 	sub	r6,r6,r5
8008f914:	10c4b03a 	or	r2,r2,r3
8008f918:	1806d07a 	srli	r3,r3,1
8008f91c:	280ad07a 	srli	r5,r5,1
8008f920:	183ffa1e 	bne	r3,zero,8008f90c <__divsi3+0x40>
8008f924:	38000126 	beq	r7,zero,8008f92c <__divsi3+0x60>
8008f928:	0085c83a 	sub	r2,zero,r2
8008f92c:	f800283a 	ret
8008f930:	014bc83a 	sub	r5,zero,r5
8008f934:	39c0005c 	xori	r7,r7,1
8008f938:	003fe706 	br	8008f8d8 <__divsi3+0xc>
8008f93c:	0109c83a 	sub	r4,zero,r4
8008f940:	01c00044 	movi	r7,1
8008f944:	003fe306 	br	8008f8d4 <__divsi3+0x8>
8008f948:	00c00044 	movi	r3,1
8008f94c:	003fee06 	br	8008f908 <__divsi3+0x3c>

8008f950 <__modsi3>:
8008f950:	20001716 	blt	r4,zero,8008f9b0 <__modsi3+0x60>
8008f954:	000f883a 	mov	r7,zero
8008f958:	2005883a 	mov	r2,r4
8008f95c:	28001216 	blt	r5,zero,8008f9a8 <__modsi3+0x58>
8008f960:	2900162e 	bgeu	r5,r4,8008f9bc <__modsi3+0x6c>
8008f964:	01800804 	movi	r6,32
8008f968:	00c00044 	movi	r3,1
8008f96c:	00000106 	br	8008f974 <__modsi3+0x24>
8008f970:	30000a26 	beq	r6,zero,8008f99c <__modsi3+0x4c>
8008f974:	294b883a 	add	r5,r5,r5
8008f978:	31bfffc4 	addi	r6,r6,-1
8008f97c:	18c7883a 	add	r3,r3,r3
8008f980:	293ffb36 	bltu	r5,r4,8008f970 <__modsi3+0x20>
8008f984:	18000526 	beq	r3,zero,8008f99c <__modsi3+0x4c>
8008f988:	1806d07a 	srli	r3,r3,1
8008f98c:	11400136 	bltu	r2,r5,8008f994 <__modsi3+0x44>
8008f990:	1145c83a 	sub	r2,r2,r5
8008f994:	280ad07a 	srli	r5,r5,1
8008f998:	183ffb1e 	bne	r3,zero,8008f988 <__modsi3+0x38>
8008f99c:	38000126 	beq	r7,zero,8008f9a4 <__modsi3+0x54>
8008f9a0:	0085c83a 	sub	r2,zero,r2
8008f9a4:	f800283a 	ret
8008f9a8:	014bc83a 	sub	r5,zero,r5
8008f9ac:	003fec06 	br	8008f960 <__modsi3+0x10>
8008f9b0:	0109c83a 	sub	r4,zero,r4
8008f9b4:	01c00044 	movi	r7,1
8008f9b8:	003fe706 	br	8008f958 <__modsi3+0x8>
8008f9bc:	00c00044 	movi	r3,1
8008f9c0:	003ff106 	br	8008f988 <__modsi3+0x38>

8008f9c4 <__udivsi3>:
8008f9c4:	200d883a 	mov	r6,r4
8008f9c8:	2900152e 	bgeu	r5,r4,8008fa20 <__udivsi3+0x5c>
8008f9cc:	28001416 	blt	r5,zero,8008fa20 <__udivsi3+0x5c>
8008f9d0:	00800804 	movi	r2,32
8008f9d4:	00c00044 	movi	r3,1
8008f9d8:	00000206 	br	8008f9e4 <__udivsi3+0x20>
8008f9dc:	10000e26 	beq	r2,zero,8008fa18 <__udivsi3+0x54>
8008f9e0:	28000516 	blt	r5,zero,8008f9f8 <__udivsi3+0x34>
8008f9e4:	294b883a 	add	r5,r5,r5
8008f9e8:	10bfffc4 	addi	r2,r2,-1
8008f9ec:	18c7883a 	add	r3,r3,r3
8008f9f0:	293ffa36 	bltu	r5,r4,8008f9dc <__udivsi3+0x18>
8008f9f4:	18000826 	beq	r3,zero,8008fa18 <__udivsi3+0x54>
8008f9f8:	0005883a 	mov	r2,zero
8008f9fc:	31400236 	bltu	r6,r5,8008fa08 <__udivsi3+0x44>
8008fa00:	314dc83a 	sub	r6,r6,r5
8008fa04:	10c4b03a 	or	r2,r2,r3
8008fa08:	1806d07a 	srli	r3,r3,1
8008fa0c:	280ad07a 	srli	r5,r5,1
8008fa10:	183ffa1e 	bne	r3,zero,8008f9fc <__udivsi3+0x38>
8008fa14:	f800283a 	ret
8008fa18:	0005883a 	mov	r2,zero
8008fa1c:	f800283a 	ret
8008fa20:	00c00044 	movi	r3,1
8008fa24:	003ff406 	br	8008f9f8 <__udivsi3+0x34>

8008fa28 <__umodsi3>:
8008fa28:	2005883a 	mov	r2,r4
8008fa2c:	2900122e 	bgeu	r5,r4,8008fa78 <__umodsi3+0x50>
8008fa30:	28001116 	blt	r5,zero,8008fa78 <__umodsi3+0x50>
8008fa34:	01800804 	movi	r6,32
8008fa38:	00c00044 	movi	r3,1
8008fa3c:	00000206 	br	8008fa48 <__umodsi3+0x20>
8008fa40:	30000c26 	beq	r6,zero,8008fa74 <__umodsi3+0x4c>
8008fa44:	28000516 	blt	r5,zero,8008fa5c <__umodsi3+0x34>
8008fa48:	294b883a 	add	r5,r5,r5
8008fa4c:	31bfffc4 	addi	r6,r6,-1
8008fa50:	18c7883a 	add	r3,r3,r3
8008fa54:	293ffa36 	bltu	r5,r4,8008fa40 <__umodsi3+0x18>
8008fa58:	18000626 	beq	r3,zero,8008fa74 <__umodsi3+0x4c>
8008fa5c:	1806d07a 	srli	r3,r3,1
8008fa60:	11400136 	bltu	r2,r5,8008fa68 <__umodsi3+0x40>
8008fa64:	1145c83a 	sub	r2,r2,r5
8008fa68:	280ad07a 	srli	r5,r5,1
8008fa6c:	183ffb1e 	bne	r3,zero,8008fa5c <__umodsi3+0x34>
8008fa70:	f800283a 	ret
8008fa74:	f800283a 	ret
8008fa78:	00c00044 	movi	r3,1
8008fa7c:	003ff706 	br	8008fa5c <__umodsi3+0x34>

8008fa80 <__adddf3>:
8008fa80:	02c00434 	movhi	r11,16
8008fa84:	5affffc4 	addi	r11,r11,-1
8008fa88:	2806d7fa 	srli	r3,r5,31
8008fa8c:	2ad4703a 	and	r10,r5,r11
8008fa90:	3ad2703a 	and	r9,r7,r11
8008fa94:	3804d53a 	srli	r2,r7,20
8008fa98:	3018d77a 	srli	r12,r6,29
8008fa9c:	280ad53a 	srli	r5,r5,20
8008faa0:	501490fa 	slli	r10,r10,3
8008faa4:	2010d77a 	srli	r8,r4,29
8008faa8:	481290fa 	slli	r9,r9,3
8008faac:	380ed7fa 	srli	r7,r7,31
8008fab0:	defffb04 	addi	sp,sp,-20
8008fab4:	dc800215 	stw	r18,8(sp)
8008fab8:	dc400115 	stw	r17,4(sp)
8008fabc:	dc000015 	stw	r16,0(sp)
8008fac0:	dfc00415 	stw	ra,16(sp)
8008fac4:	dcc00315 	stw	r19,12(sp)
8008fac8:	1c803fcc 	andi	r18,r3,255
8008facc:	2c01ffcc 	andi	r16,r5,2047
8008fad0:	5210b03a 	or	r8,r10,r8
8008fad4:	202290fa 	slli	r17,r4,3
8008fad8:	1081ffcc 	andi	r2,r2,2047
8008fadc:	4b12b03a 	or	r9,r9,r12
8008fae0:	300c90fa 	slli	r6,r6,3
8008fae4:	91c07526 	beq	r18,r7,8008fcbc <__adddf3+0x23c>
8008fae8:	8087c83a 	sub	r3,r16,r2
8008faec:	00c0ab0e 	bge	zero,r3,8008fd9c <__adddf3+0x31c>
8008faf0:	10002a1e 	bne	r2,zero,8008fb9c <__adddf3+0x11c>
8008faf4:	4984b03a 	or	r2,r9,r6
8008faf8:	1000961e 	bne	r2,zero,8008fd54 <__adddf3+0x2d4>
8008fafc:	888001cc 	andi	r2,r17,7
8008fb00:	10000726 	beq	r2,zero,8008fb20 <__adddf3+0xa0>
8008fb04:	888003cc 	andi	r2,r17,15
8008fb08:	00c00104 	movi	r3,4
8008fb0c:	10c00426 	beq	r2,r3,8008fb20 <__adddf3+0xa0>
8008fb10:	88c7883a 	add	r3,r17,r3
8008fb14:	1c63803a 	cmpltu	r17,r3,r17
8008fb18:	4451883a 	add	r8,r8,r17
8008fb1c:	1823883a 	mov	r17,r3
8008fb20:	4080202c 	andhi	r2,r8,128
8008fb24:	10005926 	beq	r2,zero,8008fc8c <__adddf3+0x20c>
8008fb28:	84000044 	addi	r16,r16,1
8008fb2c:	0081ffc4 	movi	r2,2047
8008fb30:	8080ba26 	beq	r16,r2,8008fe1c <__adddf3+0x39c>
8008fb34:	00bfe034 	movhi	r2,65408
8008fb38:	10bfffc4 	addi	r2,r2,-1
8008fb3c:	4090703a 	and	r8,r8,r2
8008fb40:	4004977a 	slli	r2,r8,29
8008fb44:	4010927a 	slli	r8,r8,9
8008fb48:	8822d0fa 	srli	r17,r17,3
8008fb4c:	8401ffcc 	andi	r16,r16,2047
8008fb50:	4010d33a 	srli	r8,r8,12
8008fb54:	9007883a 	mov	r3,r18
8008fb58:	1444b03a 	or	r2,r2,r17
8008fb5c:	8401ffcc 	andi	r16,r16,2047
8008fb60:	8020953a 	slli	r16,r16,20
8008fb64:	18c03fcc 	andi	r3,r3,255
8008fb68:	01000434 	movhi	r4,16
8008fb6c:	213fffc4 	addi	r4,r4,-1
8008fb70:	180697fa 	slli	r3,r3,31
8008fb74:	4110703a 	and	r8,r8,r4
8008fb78:	4410b03a 	or	r8,r8,r16
8008fb7c:	40c6b03a 	or	r3,r8,r3
8008fb80:	dfc00417 	ldw	ra,16(sp)
8008fb84:	dcc00317 	ldw	r19,12(sp)
8008fb88:	dc800217 	ldw	r18,8(sp)
8008fb8c:	dc400117 	ldw	r17,4(sp)
8008fb90:	dc000017 	ldw	r16,0(sp)
8008fb94:	dec00504 	addi	sp,sp,20
8008fb98:	f800283a 	ret
8008fb9c:	0081ffc4 	movi	r2,2047
8008fba0:	80bfd626 	beq	r16,r2,8008fafc <__adddf3+0x7c>
8008fba4:	4a402034 	orhi	r9,r9,128
8008fba8:	00800e04 	movi	r2,56
8008fbac:	10c09f16 	blt	r2,r3,8008fe2c <__adddf3+0x3ac>
8008fbb0:	008007c4 	movi	r2,31
8008fbb4:	10c0c216 	blt	r2,r3,8008fec0 <__adddf3+0x440>
8008fbb8:	00800804 	movi	r2,32
8008fbbc:	10c5c83a 	sub	r2,r2,r3
8008fbc0:	488a983a 	sll	r5,r9,r2
8008fbc4:	30c8d83a 	srl	r4,r6,r3
8008fbc8:	3084983a 	sll	r2,r6,r2
8008fbcc:	48c6d83a 	srl	r3,r9,r3
8008fbd0:	290cb03a 	or	r6,r5,r4
8008fbd4:	1004c03a 	cmpne	r2,r2,zero
8008fbd8:	308cb03a 	or	r6,r6,r2
8008fbdc:	898dc83a 	sub	r6,r17,r6
8008fbe0:	89a3803a 	cmpltu	r17,r17,r6
8008fbe4:	40d1c83a 	sub	r8,r8,r3
8008fbe8:	4451c83a 	sub	r8,r8,r17
8008fbec:	3023883a 	mov	r17,r6
8008fbf0:	4080202c 	andhi	r2,r8,128
8008fbf4:	10002326 	beq	r2,zero,8008fc84 <__adddf3+0x204>
8008fbf8:	04c02034 	movhi	r19,128
8008fbfc:	9cffffc4 	addi	r19,r19,-1
8008fc00:	44e6703a 	and	r19,r8,r19
8008fc04:	98007626 	beq	r19,zero,8008fde0 <__adddf3+0x360>
8008fc08:	9809883a 	mov	r4,r19
8008fc0c:	0081c280 	call	80081c28 <__clzsi2>
8008fc10:	10fffe04 	addi	r3,r2,-8
8008fc14:	010007c4 	movi	r4,31
8008fc18:	20c07716 	blt	r4,r3,8008fdf8 <__adddf3+0x378>
8008fc1c:	00800804 	movi	r2,32
8008fc20:	10c5c83a 	sub	r2,r2,r3
8008fc24:	8884d83a 	srl	r2,r17,r2
8008fc28:	98d0983a 	sll	r8,r19,r3
8008fc2c:	88e2983a 	sll	r17,r17,r3
8008fc30:	1204b03a 	or	r2,r2,r8
8008fc34:	1c007416 	blt	r3,r16,8008fe08 <__adddf3+0x388>
8008fc38:	1c21c83a 	sub	r16,r3,r16
8008fc3c:	82000044 	addi	r8,r16,1
8008fc40:	00c007c4 	movi	r3,31
8008fc44:	1a009116 	blt	r3,r8,8008fe8c <__adddf3+0x40c>
8008fc48:	00c00804 	movi	r3,32
8008fc4c:	1a07c83a 	sub	r3,r3,r8
8008fc50:	8a08d83a 	srl	r4,r17,r8
8008fc54:	88e2983a 	sll	r17,r17,r3
8008fc58:	10c6983a 	sll	r3,r2,r3
8008fc5c:	1210d83a 	srl	r8,r2,r8
8008fc60:	8804c03a 	cmpne	r2,r17,zero
8008fc64:	1906b03a 	or	r3,r3,r4
8008fc68:	18a2b03a 	or	r17,r3,r2
8008fc6c:	0021883a 	mov	r16,zero
8008fc70:	003fa206 	br	8008fafc <__adddf3+0x7c>
8008fc74:	1890b03a 	or	r8,r3,r2
8008fc78:	40017d26 	beq	r8,zero,80090270 <__adddf3+0x7f0>
8008fc7c:	1011883a 	mov	r8,r2
8008fc80:	1823883a 	mov	r17,r3
8008fc84:	888001cc 	andi	r2,r17,7
8008fc88:	103f9e1e 	bne	r2,zero,8008fb04 <__adddf3+0x84>
8008fc8c:	4004977a 	slli	r2,r8,29
8008fc90:	8822d0fa 	srli	r17,r17,3
8008fc94:	4010d0fa 	srli	r8,r8,3
8008fc98:	9007883a 	mov	r3,r18
8008fc9c:	1444b03a 	or	r2,r2,r17
8008fca0:	0101ffc4 	movi	r4,2047
8008fca4:	81002426 	beq	r16,r4,8008fd38 <__adddf3+0x2b8>
8008fca8:	8120703a 	and	r16,r16,r4
8008fcac:	01000434 	movhi	r4,16
8008fcb0:	213fffc4 	addi	r4,r4,-1
8008fcb4:	4110703a 	and	r8,r8,r4
8008fcb8:	003fa806 	br	8008fb5c <__adddf3+0xdc>
8008fcbc:	8089c83a 	sub	r4,r16,r2
8008fcc0:	01005e0e 	bge	zero,r4,8008fe3c <__adddf3+0x3bc>
8008fcc4:	10002b26 	beq	r2,zero,8008fd74 <__adddf3+0x2f4>
8008fcc8:	0081ffc4 	movi	r2,2047
8008fccc:	80bf8b26 	beq	r16,r2,8008fafc <__adddf3+0x7c>
8008fcd0:	4a402034 	orhi	r9,r9,128
8008fcd4:	00800e04 	movi	r2,56
8008fcd8:	1100a40e 	bge	r2,r4,8008ff6c <__adddf3+0x4ec>
8008fcdc:	498cb03a 	or	r6,r9,r6
8008fce0:	300ac03a 	cmpne	r5,r6,zero
8008fce4:	0013883a 	mov	r9,zero
8008fce8:	2c4b883a 	add	r5,r5,r17
8008fcec:	2c63803a 	cmpltu	r17,r5,r17
8008fcf0:	4a11883a 	add	r8,r9,r8
8008fcf4:	8a11883a 	add	r8,r17,r8
8008fcf8:	2823883a 	mov	r17,r5
8008fcfc:	4080202c 	andhi	r2,r8,128
8008fd00:	103fe026 	beq	r2,zero,8008fc84 <__adddf3+0x204>
8008fd04:	84000044 	addi	r16,r16,1
8008fd08:	0081ffc4 	movi	r2,2047
8008fd0c:	8080d226 	beq	r16,r2,80090058 <__adddf3+0x5d8>
8008fd10:	00bfe034 	movhi	r2,65408
8008fd14:	10bfffc4 	addi	r2,r2,-1
8008fd18:	4090703a 	and	r8,r8,r2
8008fd1c:	880ad07a 	srli	r5,r17,1
8008fd20:	400897fa 	slli	r4,r8,31
8008fd24:	88c0004c 	andi	r3,r17,1
8008fd28:	28e2b03a 	or	r17,r5,r3
8008fd2c:	4010d07a 	srli	r8,r8,1
8008fd30:	2462b03a 	or	r17,r4,r17
8008fd34:	003f7106 	br	8008fafc <__adddf3+0x7c>
8008fd38:	4088b03a 	or	r4,r8,r2
8008fd3c:	20014526 	beq	r4,zero,80090254 <__adddf3+0x7d4>
8008fd40:	01000434 	movhi	r4,16
8008fd44:	42000234 	orhi	r8,r8,8
8008fd48:	213fffc4 	addi	r4,r4,-1
8008fd4c:	4110703a 	and	r8,r8,r4
8008fd50:	003f8206 	br	8008fb5c <__adddf3+0xdc>
8008fd54:	18ffffc4 	addi	r3,r3,-1
8008fd58:	1800491e 	bne	r3,zero,8008fe80 <__adddf3+0x400>
8008fd5c:	898bc83a 	sub	r5,r17,r6
8008fd60:	8963803a 	cmpltu	r17,r17,r5
8008fd64:	4251c83a 	sub	r8,r8,r9
8008fd68:	4451c83a 	sub	r8,r8,r17
8008fd6c:	2823883a 	mov	r17,r5
8008fd70:	003f9f06 	br	8008fbf0 <__adddf3+0x170>
8008fd74:	4984b03a 	or	r2,r9,r6
8008fd78:	103f6026 	beq	r2,zero,8008fafc <__adddf3+0x7c>
8008fd7c:	213fffc4 	addi	r4,r4,-1
8008fd80:	2000931e 	bne	r4,zero,8008ffd0 <__adddf3+0x550>
8008fd84:	898d883a 	add	r6,r17,r6
8008fd88:	3463803a 	cmpltu	r17,r6,r17
8008fd8c:	4251883a 	add	r8,r8,r9
8008fd90:	8a11883a 	add	r8,r17,r8
8008fd94:	3023883a 	mov	r17,r6
8008fd98:	003fd806 	br	8008fcfc <__adddf3+0x27c>
8008fd9c:	1800541e 	bne	r3,zero,8008fef0 <__adddf3+0x470>
8008fda0:	80800044 	addi	r2,r16,1
8008fda4:	1081ffcc 	andi	r2,r2,2047
8008fda8:	00c00044 	movi	r3,1
8008fdac:	1880a00e 	bge	r3,r2,80090030 <__adddf3+0x5b0>
8008fdb0:	8989c83a 	sub	r4,r17,r6
8008fdb4:	8905803a 	cmpltu	r2,r17,r4
8008fdb8:	4267c83a 	sub	r19,r8,r9
8008fdbc:	98a7c83a 	sub	r19,r19,r2
8008fdc0:	9880202c 	andhi	r2,r19,128
8008fdc4:	10006326 	beq	r2,zero,8008ff54 <__adddf3+0x4d4>
8008fdc8:	3463c83a 	sub	r17,r6,r17
8008fdcc:	4a07c83a 	sub	r3,r9,r8
8008fdd0:	344d803a 	cmpltu	r6,r6,r17
8008fdd4:	19a7c83a 	sub	r19,r3,r6
8008fdd8:	3825883a 	mov	r18,r7
8008fddc:	983f8a1e 	bne	r19,zero,8008fc08 <__adddf3+0x188>
8008fde0:	8809883a 	mov	r4,r17
8008fde4:	0081c280 	call	80081c28 <__clzsi2>
8008fde8:	10800804 	addi	r2,r2,32
8008fdec:	10fffe04 	addi	r3,r2,-8
8008fdf0:	010007c4 	movi	r4,31
8008fdf4:	20ff890e 	bge	r4,r3,8008fc1c <__adddf3+0x19c>
8008fdf8:	10bff604 	addi	r2,r2,-40
8008fdfc:	8884983a 	sll	r2,r17,r2
8008fe00:	0023883a 	mov	r17,zero
8008fe04:	1c3f8c0e 	bge	r3,r16,8008fc38 <__adddf3+0x1b8>
8008fe08:	023fe034 	movhi	r8,65408
8008fe0c:	423fffc4 	addi	r8,r8,-1
8008fe10:	80e1c83a 	sub	r16,r16,r3
8008fe14:	1210703a 	and	r8,r2,r8
8008fe18:	003f3806 	br	8008fafc <__adddf3+0x7c>
8008fe1c:	9007883a 	mov	r3,r18
8008fe20:	0011883a 	mov	r8,zero
8008fe24:	0005883a 	mov	r2,zero
8008fe28:	003f4c06 	br	8008fb5c <__adddf3+0xdc>
8008fe2c:	498cb03a 	or	r6,r9,r6
8008fe30:	300cc03a 	cmpne	r6,r6,zero
8008fe34:	0007883a 	mov	r3,zero
8008fe38:	003f6806 	br	8008fbdc <__adddf3+0x15c>
8008fe3c:	20009c1e 	bne	r4,zero,800900b0 <__adddf3+0x630>
8008fe40:	80800044 	addi	r2,r16,1
8008fe44:	1141ffcc 	andi	r5,r2,2047
8008fe48:	01000044 	movi	r4,1
8008fe4c:	2140670e 	bge	r4,r5,8008ffec <__adddf3+0x56c>
8008fe50:	0101ffc4 	movi	r4,2047
8008fe54:	11007f26 	beq	r2,r4,80090054 <__adddf3+0x5d4>
8008fe58:	898d883a 	add	r6,r17,r6
8008fe5c:	4247883a 	add	r3,r8,r9
8008fe60:	3451803a 	cmpltu	r8,r6,r17
8008fe64:	40d1883a 	add	r8,r8,r3
8008fe68:	402297fa 	slli	r17,r8,31
8008fe6c:	300cd07a 	srli	r6,r6,1
8008fe70:	4010d07a 	srli	r8,r8,1
8008fe74:	1021883a 	mov	r16,r2
8008fe78:	89a2b03a 	or	r17,r17,r6
8008fe7c:	003f1f06 	br	8008fafc <__adddf3+0x7c>
8008fe80:	0081ffc4 	movi	r2,2047
8008fe84:	80bf481e 	bne	r16,r2,8008fba8 <__adddf3+0x128>
8008fe88:	003f1c06 	br	8008fafc <__adddf3+0x7c>
8008fe8c:	843ff844 	addi	r16,r16,-31
8008fe90:	01000804 	movi	r4,32
8008fe94:	1406d83a 	srl	r3,r2,r16
8008fe98:	41005026 	beq	r8,r4,8008ffdc <__adddf3+0x55c>
8008fe9c:	01001004 	movi	r4,64
8008fea0:	2211c83a 	sub	r8,r4,r8
8008fea4:	1204983a 	sll	r2,r2,r8
8008fea8:	88a2b03a 	or	r17,r17,r2
8008feac:	8822c03a 	cmpne	r17,r17,zero
8008feb0:	1c62b03a 	or	r17,r3,r17
8008feb4:	0011883a 	mov	r8,zero
8008feb8:	0021883a 	mov	r16,zero
8008febc:	003f7106 	br	8008fc84 <__adddf3+0x204>
8008fec0:	193ff804 	addi	r4,r3,-32
8008fec4:	00800804 	movi	r2,32
8008fec8:	4908d83a 	srl	r4,r9,r4
8008fecc:	18804526 	beq	r3,r2,8008ffe4 <__adddf3+0x564>
8008fed0:	00801004 	movi	r2,64
8008fed4:	10c5c83a 	sub	r2,r2,r3
8008fed8:	4886983a 	sll	r3,r9,r2
8008fedc:	198cb03a 	or	r6,r3,r6
8008fee0:	300cc03a 	cmpne	r6,r6,zero
8008fee4:	218cb03a 	or	r6,r4,r6
8008fee8:	0007883a 	mov	r3,zero
8008feec:	003f3b06 	br	8008fbdc <__adddf3+0x15c>
8008fef0:	80002a26 	beq	r16,zero,8008ff9c <__adddf3+0x51c>
8008fef4:	0101ffc4 	movi	r4,2047
8008fef8:	11006826 	beq	r2,r4,8009009c <__adddf3+0x61c>
8008fefc:	00c7c83a 	sub	r3,zero,r3
8008ff00:	42002034 	orhi	r8,r8,128
8008ff04:	01000e04 	movi	r4,56
8008ff08:	20c07c16 	blt	r4,r3,800900fc <__adddf3+0x67c>
8008ff0c:	010007c4 	movi	r4,31
8008ff10:	20c0da16 	blt	r4,r3,8009027c <__adddf3+0x7fc>
8008ff14:	01000804 	movi	r4,32
8008ff18:	20c9c83a 	sub	r4,r4,r3
8008ff1c:	4114983a 	sll	r10,r8,r4
8008ff20:	88cad83a 	srl	r5,r17,r3
8008ff24:	8908983a 	sll	r4,r17,r4
8008ff28:	40c6d83a 	srl	r3,r8,r3
8008ff2c:	5162b03a 	or	r17,r10,r5
8008ff30:	2008c03a 	cmpne	r4,r4,zero
8008ff34:	8922b03a 	or	r17,r17,r4
8008ff38:	3463c83a 	sub	r17,r6,r17
8008ff3c:	48c7c83a 	sub	r3,r9,r3
8008ff40:	344d803a 	cmpltu	r6,r6,r17
8008ff44:	1991c83a 	sub	r8,r3,r6
8008ff48:	1021883a 	mov	r16,r2
8008ff4c:	3825883a 	mov	r18,r7
8008ff50:	003f2706 	br	8008fbf0 <__adddf3+0x170>
8008ff54:	24d0b03a 	or	r8,r4,r19
8008ff58:	40001b1e 	bne	r8,zero,8008ffc8 <__adddf3+0x548>
8008ff5c:	0005883a 	mov	r2,zero
8008ff60:	0007883a 	mov	r3,zero
8008ff64:	0021883a 	mov	r16,zero
8008ff68:	003f4d06 	br	8008fca0 <__adddf3+0x220>
8008ff6c:	008007c4 	movi	r2,31
8008ff70:	11003c16 	blt	r2,r4,80090064 <__adddf3+0x5e4>
8008ff74:	00800804 	movi	r2,32
8008ff78:	1105c83a 	sub	r2,r2,r4
8008ff7c:	488e983a 	sll	r7,r9,r2
8008ff80:	310ad83a 	srl	r5,r6,r4
8008ff84:	3084983a 	sll	r2,r6,r2
8008ff88:	4912d83a 	srl	r9,r9,r4
8008ff8c:	394ab03a 	or	r5,r7,r5
8008ff90:	1004c03a 	cmpne	r2,r2,zero
8008ff94:	288ab03a 	or	r5,r5,r2
8008ff98:	003f5306 	br	8008fce8 <__adddf3+0x268>
8008ff9c:	4448b03a 	or	r4,r8,r17
8008ffa0:	20003e26 	beq	r4,zero,8009009c <__adddf3+0x61c>
8008ffa4:	00c6303a 	nor	r3,zero,r3
8008ffa8:	18003a1e 	bne	r3,zero,80090094 <__adddf3+0x614>
8008ffac:	3463c83a 	sub	r17,r6,r17
8008ffb0:	4a07c83a 	sub	r3,r9,r8
8008ffb4:	344d803a 	cmpltu	r6,r6,r17
8008ffb8:	1991c83a 	sub	r8,r3,r6
8008ffbc:	1021883a 	mov	r16,r2
8008ffc0:	3825883a 	mov	r18,r7
8008ffc4:	003f0a06 	br	8008fbf0 <__adddf3+0x170>
8008ffc8:	2023883a 	mov	r17,r4
8008ffcc:	003f0d06 	br	8008fc04 <__adddf3+0x184>
8008ffd0:	0081ffc4 	movi	r2,2047
8008ffd4:	80bf3f1e 	bne	r16,r2,8008fcd4 <__adddf3+0x254>
8008ffd8:	003ec806 	br	8008fafc <__adddf3+0x7c>
8008ffdc:	0005883a 	mov	r2,zero
8008ffe0:	003fb106 	br	8008fea8 <__adddf3+0x428>
8008ffe4:	0007883a 	mov	r3,zero
8008ffe8:	003fbc06 	br	8008fedc <__adddf3+0x45c>
8008ffec:	4444b03a 	or	r2,r8,r17
8008fff0:	8000871e 	bne	r16,zero,80090210 <__adddf3+0x790>
8008fff4:	1000ba26 	beq	r2,zero,800902e0 <__adddf3+0x860>
8008fff8:	4984b03a 	or	r2,r9,r6
8008fffc:	103ebf26 	beq	r2,zero,8008fafc <__adddf3+0x7c>
80090000:	8985883a 	add	r2,r17,r6
80090004:	4247883a 	add	r3,r8,r9
80090008:	1451803a 	cmpltu	r8,r2,r17
8009000c:	40d1883a 	add	r8,r8,r3
80090010:	40c0202c 	andhi	r3,r8,128
80090014:	1023883a 	mov	r17,r2
80090018:	183f1a26 	beq	r3,zero,8008fc84 <__adddf3+0x204>
8009001c:	00bfe034 	movhi	r2,65408
80090020:	10bfffc4 	addi	r2,r2,-1
80090024:	2021883a 	mov	r16,r4
80090028:	4090703a 	and	r8,r8,r2
8009002c:	003eb306 	br	8008fafc <__adddf3+0x7c>
80090030:	4444b03a 	or	r2,r8,r17
80090034:	8000291e 	bne	r16,zero,800900dc <__adddf3+0x65c>
80090038:	10004b1e 	bne	r2,zero,80090168 <__adddf3+0x6e8>
8009003c:	4990b03a 	or	r8,r9,r6
80090040:	40008b26 	beq	r8,zero,80090270 <__adddf3+0x7f0>
80090044:	4811883a 	mov	r8,r9
80090048:	3023883a 	mov	r17,r6
8009004c:	3825883a 	mov	r18,r7
80090050:	003eaa06 	br	8008fafc <__adddf3+0x7c>
80090054:	1021883a 	mov	r16,r2
80090058:	0011883a 	mov	r8,zero
8009005c:	0005883a 	mov	r2,zero
80090060:	003f0f06 	br	8008fca0 <__adddf3+0x220>
80090064:	217ff804 	addi	r5,r4,-32
80090068:	00800804 	movi	r2,32
8009006c:	494ad83a 	srl	r5,r9,r5
80090070:	20807d26 	beq	r4,r2,80090268 <__adddf3+0x7e8>
80090074:	00801004 	movi	r2,64
80090078:	1109c83a 	sub	r4,r2,r4
8009007c:	4912983a 	sll	r9,r9,r4
80090080:	498cb03a 	or	r6,r9,r6
80090084:	300cc03a 	cmpne	r6,r6,zero
80090088:	298ab03a 	or	r5,r5,r6
8009008c:	0013883a 	mov	r9,zero
80090090:	003f1506 	br	8008fce8 <__adddf3+0x268>
80090094:	0101ffc4 	movi	r4,2047
80090098:	113f9a1e 	bne	r2,r4,8008ff04 <__adddf3+0x484>
8009009c:	4811883a 	mov	r8,r9
800900a0:	3023883a 	mov	r17,r6
800900a4:	1021883a 	mov	r16,r2
800900a8:	3825883a 	mov	r18,r7
800900ac:	003e9306 	br	8008fafc <__adddf3+0x7c>
800900b0:	8000161e 	bne	r16,zero,8009010c <__adddf3+0x68c>
800900b4:	444ab03a 	or	r5,r8,r17
800900b8:	28005126 	beq	r5,zero,80090200 <__adddf3+0x780>
800900bc:	0108303a 	nor	r4,zero,r4
800900c0:	20004d1e 	bne	r4,zero,800901f8 <__adddf3+0x778>
800900c4:	89a3883a 	add	r17,r17,r6
800900c8:	4253883a 	add	r9,r8,r9
800900cc:	898d803a 	cmpltu	r6,r17,r6
800900d0:	3251883a 	add	r8,r6,r9
800900d4:	1021883a 	mov	r16,r2
800900d8:	003f0806 	br	8008fcfc <__adddf3+0x27c>
800900dc:	1000301e 	bne	r2,zero,800901a0 <__adddf3+0x720>
800900e0:	4984b03a 	or	r2,r9,r6
800900e4:	10007126 	beq	r2,zero,800902ac <__adddf3+0x82c>
800900e8:	4811883a 	mov	r8,r9
800900ec:	3023883a 	mov	r17,r6
800900f0:	3825883a 	mov	r18,r7
800900f4:	0401ffc4 	movi	r16,2047
800900f8:	003e8006 	br	8008fafc <__adddf3+0x7c>
800900fc:	4462b03a 	or	r17,r8,r17
80090100:	8822c03a 	cmpne	r17,r17,zero
80090104:	0007883a 	mov	r3,zero
80090108:	003f8b06 	br	8008ff38 <__adddf3+0x4b8>
8009010c:	0141ffc4 	movi	r5,2047
80090110:	11403b26 	beq	r2,r5,80090200 <__adddf3+0x780>
80090114:	0109c83a 	sub	r4,zero,r4
80090118:	42002034 	orhi	r8,r8,128
8009011c:	01400e04 	movi	r5,56
80090120:	29006716 	blt	r5,r4,800902c0 <__adddf3+0x840>
80090124:	014007c4 	movi	r5,31
80090128:	29007016 	blt	r5,r4,800902ec <__adddf3+0x86c>
8009012c:	01400804 	movi	r5,32
80090130:	290bc83a 	sub	r5,r5,r4
80090134:	4154983a 	sll	r10,r8,r5
80090138:	890ed83a 	srl	r7,r17,r4
8009013c:	894a983a 	sll	r5,r17,r5
80090140:	4108d83a 	srl	r4,r8,r4
80090144:	51e2b03a 	or	r17,r10,r7
80090148:	280ac03a 	cmpne	r5,r5,zero
8009014c:	8962b03a 	or	r17,r17,r5
80090150:	89a3883a 	add	r17,r17,r6
80090154:	2253883a 	add	r9,r4,r9
80090158:	898d803a 	cmpltu	r6,r17,r6
8009015c:	3251883a 	add	r8,r6,r9
80090160:	1021883a 	mov	r16,r2
80090164:	003ee506 	br	8008fcfc <__adddf3+0x27c>
80090168:	4984b03a 	or	r2,r9,r6
8009016c:	103e6326 	beq	r2,zero,8008fafc <__adddf3+0x7c>
80090170:	8987c83a 	sub	r3,r17,r6
80090174:	88c9803a 	cmpltu	r4,r17,r3
80090178:	4245c83a 	sub	r2,r8,r9
8009017c:	1105c83a 	sub	r2,r2,r4
80090180:	1100202c 	andhi	r4,r2,128
80090184:	203ebb26 	beq	r4,zero,8008fc74 <__adddf3+0x1f4>
80090188:	3463c83a 	sub	r17,r6,r17
8009018c:	4a07c83a 	sub	r3,r9,r8
80090190:	344d803a 	cmpltu	r6,r6,r17
80090194:	1991c83a 	sub	r8,r3,r6
80090198:	3825883a 	mov	r18,r7
8009019c:	003e5706 	br	8008fafc <__adddf3+0x7c>
800901a0:	4984b03a 	or	r2,r9,r6
800901a4:	10002e26 	beq	r2,zero,80090260 <__adddf3+0x7e0>
800901a8:	4004d0fa 	srli	r2,r8,3
800901ac:	8822d0fa 	srli	r17,r17,3
800901b0:	4010977a 	slli	r8,r8,29
800901b4:	10c0022c 	andhi	r3,r2,8
800901b8:	4462b03a 	or	r17,r8,r17
800901bc:	18000826 	beq	r3,zero,800901e0 <__adddf3+0x760>
800901c0:	4808d0fa 	srli	r4,r9,3
800901c4:	20c0022c 	andhi	r3,r4,8
800901c8:	1800051e 	bne	r3,zero,800901e0 <__adddf3+0x760>
800901cc:	300cd0fa 	srli	r6,r6,3
800901d0:	4806977a 	slli	r3,r9,29
800901d4:	2005883a 	mov	r2,r4
800901d8:	3825883a 	mov	r18,r7
800901dc:	19a2b03a 	or	r17,r3,r6
800901e0:	8810d77a 	srli	r8,r17,29
800901e4:	100490fa 	slli	r2,r2,3
800901e8:	882290fa 	slli	r17,r17,3
800901ec:	0401ffc4 	movi	r16,2047
800901f0:	4090b03a 	or	r8,r8,r2
800901f4:	003e4106 	br	8008fafc <__adddf3+0x7c>
800901f8:	0141ffc4 	movi	r5,2047
800901fc:	117fc71e 	bne	r2,r5,8009011c <__adddf3+0x69c>
80090200:	4811883a 	mov	r8,r9
80090204:	3023883a 	mov	r17,r6
80090208:	1021883a 	mov	r16,r2
8009020c:	003e3b06 	br	8008fafc <__adddf3+0x7c>
80090210:	10002f26 	beq	r2,zero,800902d0 <__adddf3+0x850>
80090214:	4984b03a 	or	r2,r9,r6
80090218:	10001126 	beq	r2,zero,80090260 <__adddf3+0x7e0>
8009021c:	4004d0fa 	srli	r2,r8,3
80090220:	8822d0fa 	srli	r17,r17,3
80090224:	4010977a 	slli	r8,r8,29
80090228:	10c0022c 	andhi	r3,r2,8
8009022c:	4462b03a 	or	r17,r8,r17
80090230:	183feb26 	beq	r3,zero,800901e0 <__adddf3+0x760>
80090234:	4808d0fa 	srli	r4,r9,3
80090238:	20c0022c 	andhi	r3,r4,8
8009023c:	183fe81e 	bne	r3,zero,800901e0 <__adddf3+0x760>
80090240:	300cd0fa 	srli	r6,r6,3
80090244:	4806977a 	slli	r3,r9,29
80090248:	2005883a 	mov	r2,r4
8009024c:	19a2b03a 	or	r17,r3,r6
80090250:	003fe306 	br	800901e0 <__adddf3+0x760>
80090254:	0011883a 	mov	r8,zero
80090258:	0005883a 	mov	r2,zero
8009025c:	003e3f06 	br	8008fb5c <__adddf3+0xdc>
80090260:	0401ffc4 	movi	r16,2047
80090264:	003e2506 	br	8008fafc <__adddf3+0x7c>
80090268:	0013883a 	mov	r9,zero
8009026c:	003f8406 	br	80090080 <__adddf3+0x600>
80090270:	0005883a 	mov	r2,zero
80090274:	0007883a 	mov	r3,zero
80090278:	003e8906 	br	8008fca0 <__adddf3+0x220>
8009027c:	197ff804 	addi	r5,r3,-32
80090280:	01000804 	movi	r4,32
80090284:	414ad83a 	srl	r5,r8,r5
80090288:	19002426 	beq	r3,r4,8009031c <__adddf3+0x89c>
8009028c:	01001004 	movi	r4,64
80090290:	20c7c83a 	sub	r3,r4,r3
80090294:	40c6983a 	sll	r3,r8,r3
80090298:	1c46b03a 	or	r3,r3,r17
8009029c:	1806c03a 	cmpne	r3,r3,zero
800902a0:	28e2b03a 	or	r17,r5,r3
800902a4:	0007883a 	mov	r3,zero
800902a8:	003f2306 	br	8008ff38 <__adddf3+0x4b8>
800902ac:	0007883a 	mov	r3,zero
800902b0:	5811883a 	mov	r8,r11
800902b4:	00bfffc4 	movi	r2,-1
800902b8:	0401ffc4 	movi	r16,2047
800902bc:	003e7806 	br	8008fca0 <__adddf3+0x220>
800902c0:	4462b03a 	or	r17,r8,r17
800902c4:	8822c03a 	cmpne	r17,r17,zero
800902c8:	0009883a 	mov	r4,zero
800902cc:	003fa006 	br	80090150 <__adddf3+0x6d0>
800902d0:	4811883a 	mov	r8,r9
800902d4:	3023883a 	mov	r17,r6
800902d8:	0401ffc4 	movi	r16,2047
800902dc:	003e0706 	br	8008fafc <__adddf3+0x7c>
800902e0:	4811883a 	mov	r8,r9
800902e4:	3023883a 	mov	r17,r6
800902e8:	003e0406 	br	8008fafc <__adddf3+0x7c>
800902ec:	21fff804 	addi	r7,r4,-32
800902f0:	01400804 	movi	r5,32
800902f4:	41ced83a 	srl	r7,r8,r7
800902f8:	21400a26 	beq	r4,r5,80090324 <__adddf3+0x8a4>
800902fc:	01401004 	movi	r5,64
80090300:	2909c83a 	sub	r4,r5,r4
80090304:	4108983a 	sll	r4,r8,r4
80090308:	2448b03a 	or	r4,r4,r17
8009030c:	2008c03a 	cmpne	r4,r4,zero
80090310:	3922b03a 	or	r17,r7,r4
80090314:	0009883a 	mov	r4,zero
80090318:	003f8d06 	br	80090150 <__adddf3+0x6d0>
8009031c:	0007883a 	mov	r3,zero
80090320:	003fdd06 	br	80090298 <__adddf3+0x818>
80090324:	0009883a 	mov	r4,zero
80090328:	003ff706 	br	80090308 <__adddf3+0x888>

8009032c <__divdf3>:
8009032c:	defff204 	addi	sp,sp,-56
80090330:	dd400915 	stw	r21,36(sp)
80090334:	282ad53a 	srli	r21,r5,20
80090338:	dd000815 	stw	r20,32(sp)
8009033c:	2828d7fa 	srli	r20,r5,31
80090340:	dc000415 	stw	r16,16(sp)
80090344:	04000434 	movhi	r16,16
80090348:	df000c15 	stw	fp,48(sp)
8009034c:	843fffc4 	addi	r16,r16,-1
80090350:	dfc00d15 	stw	ra,52(sp)
80090354:	ddc00b15 	stw	r23,44(sp)
80090358:	dd800a15 	stw	r22,40(sp)
8009035c:	dcc00715 	stw	r19,28(sp)
80090360:	dc800615 	stw	r18,24(sp)
80090364:	dc400515 	stw	r17,20(sp)
80090368:	ad41ffcc 	andi	r21,r21,2047
8009036c:	2c20703a 	and	r16,r5,r16
80090370:	a7003fcc 	andi	fp,r20,255
80090374:	a8006126 	beq	r21,zero,800904fc <__divdf3+0x1d0>
80090378:	0081ffc4 	movi	r2,2047
8009037c:	2025883a 	mov	r18,r4
80090380:	a8803726 	beq	r21,r2,80090460 <__divdf3+0x134>
80090384:	80800434 	orhi	r2,r16,16
80090388:	100490fa 	slli	r2,r2,3
8009038c:	2020d77a 	srli	r16,r4,29
80090390:	202490fa 	slli	r18,r4,3
80090394:	ad7f0044 	addi	r21,r21,-1023
80090398:	80a0b03a 	or	r16,r16,r2
8009039c:	0027883a 	mov	r19,zero
800903a0:	0013883a 	mov	r9,zero
800903a4:	3804d53a 	srli	r2,r7,20
800903a8:	382cd7fa 	srli	r22,r7,31
800903ac:	04400434 	movhi	r17,16
800903b0:	8c7fffc4 	addi	r17,r17,-1
800903b4:	1081ffcc 	andi	r2,r2,2047
800903b8:	3011883a 	mov	r8,r6
800903bc:	3c62703a 	and	r17,r7,r17
800903c0:	b5c03fcc 	andi	r23,r22,255
800903c4:	10006c26 	beq	r2,zero,80090578 <__divdf3+0x24c>
800903c8:	00c1ffc4 	movi	r3,2047
800903cc:	10c06426 	beq	r2,r3,80090560 <__divdf3+0x234>
800903d0:	88c00434 	orhi	r3,r17,16
800903d4:	180690fa 	slli	r3,r3,3
800903d8:	3022d77a 	srli	r17,r6,29
800903dc:	301090fa 	slli	r8,r6,3
800903e0:	10bf0044 	addi	r2,r2,-1023
800903e4:	88e2b03a 	or	r17,r17,r3
800903e8:	000f883a 	mov	r7,zero
800903ec:	a58cf03a 	xor	r6,r20,r22
800903f0:	3cc8b03a 	or	r4,r7,r19
800903f4:	a8abc83a 	sub	r21,r21,r2
800903f8:	008003c4 	movi	r2,15
800903fc:	3007883a 	mov	r3,r6
80090400:	34c03fcc 	andi	r19,r6,255
80090404:	11009036 	bltu	r2,r4,80090648 <__divdf3+0x31c>
80090408:	200890ba 	slli	r4,r4,2
8009040c:	00a00274 	movhi	r2,32777
80090410:	10810804 	addi	r2,r2,1056
80090414:	2089883a 	add	r4,r4,r2
80090418:	20800017 	ldw	r2,0(r4)
8009041c:	1000683a 	jmp	r2
80090420:	80090648 	cmpgei	zero,r16,9241
80090424:	80090498 	cmpnei	zero,r16,9234
80090428:	80090638 	rdprs	zero,r16,9240
8009042c:	8009048c 	andi	zero,r16,9234
80090430:	80090638 	rdprs	zero,r16,9240
80090434:	8009060c 	andi	zero,r16,9240
80090438:	80090638 	rdprs	zero,r16,9240
8009043c:	8009048c 	andi	zero,r16,9234
80090440:	80090498 	cmpnei	zero,r16,9234
80090444:	80090498 	cmpnei	zero,r16,9234
80090448:	8009060c 	andi	zero,r16,9240
8009044c:	8009048c 	andi	zero,r16,9234
80090450:	8009047c 	xorhi	zero,r16,9233
80090454:	8009047c 	xorhi	zero,r16,9233
80090458:	8009047c 	xorhi	zero,r16,9233
8009045c:	8009092c 	andhi	zero,r16,9252
80090460:	2404b03a 	or	r2,r4,r16
80090464:	1000661e 	bne	r2,zero,80090600 <__divdf3+0x2d4>
80090468:	04c00204 	movi	r19,8
8009046c:	0021883a 	mov	r16,zero
80090470:	0025883a 	mov	r18,zero
80090474:	02400084 	movi	r9,2
80090478:	003fca06 	br	800903a4 <__divdf3+0x78>
8009047c:	8023883a 	mov	r17,r16
80090480:	9011883a 	mov	r8,r18
80090484:	e02f883a 	mov	r23,fp
80090488:	480f883a 	mov	r7,r9
8009048c:	00800084 	movi	r2,2
80090490:	3881311e 	bne	r7,r2,80090958 <__divdf3+0x62c>
80090494:	b827883a 	mov	r19,r23
80090498:	98c0004c 	andi	r3,r19,1
8009049c:	0081ffc4 	movi	r2,2047
800904a0:	000b883a 	mov	r5,zero
800904a4:	0025883a 	mov	r18,zero
800904a8:	1004953a 	slli	r2,r2,20
800904ac:	18c03fcc 	andi	r3,r3,255
800904b0:	04400434 	movhi	r17,16
800904b4:	8c7fffc4 	addi	r17,r17,-1
800904b8:	180697fa 	slli	r3,r3,31
800904bc:	2c4a703a 	and	r5,r5,r17
800904c0:	288ab03a 	or	r5,r5,r2
800904c4:	28c6b03a 	or	r3,r5,r3
800904c8:	9005883a 	mov	r2,r18
800904cc:	dfc00d17 	ldw	ra,52(sp)
800904d0:	df000c17 	ldw	fp,48(sp)
800904d4:	ddc00b17 	ldw	r23,44(sp)
800904d8:	dd800a17 	ldw	r22,40(sp)
800904dc:	dd400917 	ldw	r21,36(sp)
800904e0:	dd000817 	ldw	r20,32(sp)
800904e4:	dcc00717 	ldw	r19,28(sp)
800904e8:	dc800617 	ldw	r18,24(sp)
800904ec:	dc400517 	ldw	r17,20(sp)
800904f0:	dc000417 	ldw	r16,16(sp)
800904f4:	dec00e04 	addi	sp,sp,56
800904f8:	f800283a 	ret
800904fc:	2404b03a 	or	r2,r4,r16
80090500:	2027883a 	mov	r19,r4
80090504:	10003926 	beq	r2,zero,800905ec <__divdf3+0x2c0>
80090508:	80012e26 	beq	r16,zero,800909c4 <__divdf3+0x698>
8009050c:	8009883a 	mov	r4,r16
80090510:	d9800315 	stw	r6,12(sp)
80090514:	d9c00215 	stw	r7,8(sp)
80090518:	0081c280 	call	80081c28 <__clzsi2>
8009051c:	d9800317 	ldw	r6,12(sp)
80090520:	d9c00217 	ldw	r7,8(sp)
80090524:	113ffd44 	addi	r4,r2,-11
80090528:	00c00704 	movi	r3,28
8009052c:	19012116 	blt	r3,r4,800909b4 <__divdf3+0x688>
80090530:	00c00744 	movi	r3,29
80090534:	147ffe04 	addi	r17,r2,-8
80090538:	1907c83a 	sub	r3,r3,r4
8009053c:	8460983a 	sll	r16,r16,r17
80090540:	98c6d83a 	srl	r3,r19,r3
80090544:	9c64983a 	sll	r18,r19,r17
80090548:	1c20b03a 	or	r16,r3,r16
8009054c:	1080fcc4 	addi	r2,r2,1011
80090550:	00abc83a 	sub	r21,zero,r2
80090554:	0027883a 	mov	r19,zero
80090558:	0013883a 	mov	r9,zero
8009055c:	003f9106 	br	800903a4 <__divdf3+0x78>
80090560:	3446b03a 	or	r3,r6,r17
80090564:	18001f1e 	bne	r3,zero,800905e4 <__divdf3+0x2b8>
80090568:	0023883a 	mov	r17,zero
8009056c:	0011883a 	mov	r8,zero
80090570:	01c00084 	movi	r7,2
80090574:	003f9d06 	br	800903ec <__divdf3+0xc0>
80090578:	3446b03a 	or	r3,r6,r17
8009057c:	18001526 	beq	r3,zero,800905d4 <__divdf3+0x2a8>
80090580:	88011b26 	beq	r17,zero,800909f0 <__divdf3+0x6c4>
80090584:	8809883a 	mov	r4,r17
80090588:	d9800315 	stw	r6,12(sp)
8009058c:	da400115 	stw	r9,4(sp)
80090590:	0081c280 	call	80081c28 <__clzsi2>
80090594:	d9800317 	ldw	r6,12(sp)
80090598:	da400117 	ldw	r9,4(sp)
8009059c:	113ffd44 	addi	r4,r2,-11
800905a0:	00c00704 	movi	r3,28
800905a4:	19010e16 	blt	r3,r4,800909e0 <__divdf3+0x6b4>
800905a8:	00c00744 	movi	r3,29
800905ac:	123ffe04 	addi	r8,r2,-8
800905b0:	1907c83a 	sub	r3,r3,r4
800905b4:	8a22983a 	sll	r17,r17,r8
800905b8:	30c6d83a 	srl	r3,r6,r3
800905bc:	3210983a 	sll	r8,r6,r8
800905c0:	1c62b03a 	or	r17,r3,r17
800905c4:	1080fcc4 	addi	r2,r2,1011
800905c8:	0085c83a 	sub	r2,zero,r2
800905cc:	000f883a 	mov	r7,zero
800905d0:	003f8606 	br	800903ec <__divdf3+0xc0>
800905d4:	0023883a 	mov	r17,zero
800905d8:	0011883a 	mov	r8,zero
800905dc:	01c00044 	movi	r7,1
800905e0:	003f8206 	br	800903ec <__divdf3+0xc0>
800905e4:	01c000c4 	movi	r7,3
800905e8:	003f8006 	br	800903ec <__divdf3+0xc0>
800905ec:	04c00104 	movi	r19,4
800905f0:	0021883a 	mov	r16,zero
800905f4:	0025883a 	mov	r18,zero
800905f8:	02400044 	movi	r9,1
800905fc:	003f6906 	br	800903a4 <__divdf3+0x78>
80090600:	04c00304 	movi	r19,12
80090604:	024000c4 	movi	r9,3
80090608:	003f6606 	br	800903a4 <__divdf3+0x78>
8009060c:	01400434 	movhi	r5,16
80090610:	0007883a 	mov	r3,zero
80090614:	297fffc4 	addi	r5,r5,-1
80090618:	04bfffc4 	movi	r18,-1
8009061c:	0081ffc4 	movi	r2,2047
80090620:	003fa106 	br	800904a8 <__divdf3+0x17c>
80090624:	00c00044 	movi	r3,1
80090628:	1887c83a 	sub	r3,r3,r2
8009062c:	01000e04 	movi	r4,56
80090630:	20c1210e 	bge	r4,r3,80090ab8 <__divdf3+0x78c>
80090634:	98c0004c 	andi	r3,r19,1
80090638:	0005883a 	mov	r2,zero
8009063c:	000b883a 	mov	r5,zero
80090640:	0025883a 	mov	r18,zero
80090644:	003f9806 	br	800904a8 <__divdf3+0x17c>
80090648:	8c00fd36 	bltu	r17,r16,80090a40 <__divdf3+0x714>
8009064c:	8440fb26 	beq	r16,r17,80090a3c <__divdf3+0x710>
80090650:	8007883a 	mov	r3,r16
80090654:	ad7fffc4 	addi	r21,r21,-1
80090658:	0021883a 	mov	r16,zero
8009065c:	4004d63a 	srli	r2,r8,24
80090660:	8822923a 	slli	r17,r17,8
80090664:	1809883a 	mov	r4,r3
80090668:	402c923a 	slli	r22,r8,8
8009066c:	88b8b03a 	or	fp,r17,r2
80090670:	e028d43a 	srli	r20,fp,16
80090674:	d8c00015 	stw	r3,0(sp)
80090678:	e5ffffcc 	andi	r23,fp,65535
8009067c:	a00b883a 	mov	r5,r20
80090680:	008f9c40 	call	8008f9c4 <__udivsi3>
80090684:	d8c00017 	ldw	r3,0(sp)
80090688:	a00b883a 	mov	r5,r20
8009068c:	d8800315 	stw	r2,12(sp)
80090690:	1809883a 	mov	r4,r3
80090694:	008fa280 	call	8008fa28 <__umodsi3>
80090698:	d9800317 	ldw	r6,12(sp)
8009069c:	1006943a 	slli	r3,r2,16
800906a0:	9004d43a 	srli	r2,r18,16
800906a4:	b9a3383a 	mul	r17,r23,r6
800906a8:	10c4b03a 	or	r2,r2,r3
800906ac:	1440062e 	bgeu	r2,r17,800906c8 <__divdf3+0x39c>
800906b0:	1705883a 	add	r2,r2,fp
800906b4:	30ffffc4 	addi	r3,r6,-1
800906b8:	1700ee36 	bltu	r2,fp,80090a74 <__divdf3+0x748>
800906bc:	1440ed2e 	bgeu	r2,r17,80090a74 <__divdf3+0x748>
800906c0:	31bfff84 	addi	r6,r6,-2
800906c4:	1705883a 	add	r2,r2,fp
800906c8:	1463c83a 	sub	r17,r2,r17
800906cc:	a00b883a 	mov	r5,r20
800906d0:	8809883a 	mov	r4,r17
800906d4:	d9800315 	stw	r6,12(sp)
800906d8:	008f9c40 	call	8008f9c4 <__udivsi3>
800906dc:	a00b883a 	mov	r5,r20
800906e0:	8809883a 	mov	r4,r17
800906e4:	d8800215 	stw	r2,8(sp)
800906e8:	008fa280 	call	8008fa28 <__umodsi3>
800906ec:	d9c00217 	ldw	r7,8(sp)
800906f0:	1004943a 	slli	r2,r2,16
800906f4:	94bfffcc 	andi	r18,r18,65535
800906f8:	b9d1383a 	mul	r8,r23,r7
800906fc:	90a4b03a 	or	r18,r18,r2
80090700:	d9800317 	ldw	r6,12(sp)
80090704:	9200062e 	bgeu	r18,r8,80090720 <__divdf3+0x3f4>
80090708:	9725883a 	add	r18,r18,fp
8009070c:	38bfffc4 	addi	r2,r7,-1
80090710:	9700d636 	bltu	r18,fp,80090a6c <__divdf3+0x740>
80090714:	9200d52e 	bgeu	r18,r8,80090a6c <__divdf3+0x740>
80090718:	39ffff84 	addi	r7,r7,-2
8009071c:	9725883a 	add	r18,r18,fp
80090720:	3004943a 	slli	r2,r6,16
80090724:	b012d43a 	srli	r9,r22,16
80090728:	b1bfffcc 	andi	r6,r22,65535
8009072c:	11e2b03a 	or	r17,r2,r7
80090730:	8806d43a 	srli	r3,r17,16
80090734:	893fffcc 	andi	r4,r17,65535
80090738:	218b383a 	mul	r5,r4,r6
8009073c:	30c5383a 	mul	r2,r6,r3
80090740:	2249383a 	mul	r4,r4,r9
80090744:	280ed43a 	srli	r7,r5,16
80090748:	9225c83a 	sub	r18,r18,r8
8009074c:	2089883a 	add	r4,r4,r2
80090750:	3909883a 	add	r4,r7,r4
80090754:	1a47383a 	mul	r3,r3,r9
80090758:	2080022e 	bgeu	r4,r2,80090764 <__divdf3+0x438>
8009075c:	00800074 	movhi	r2,1
80090760:	1887883a 	add	r3,r3,r2
80090764:	2004d43a 	srli	r2,r4,16
80090768:	2008943a 	slli	r4,r4,16
8009076c:	297fffcc 	andi	r5,r5,65535
80090770:	10c7883a 	add	r3,r2,r3
80090774:	2149883a 	add	r4,r4,r5
80090778:	90c0a536 	bltu	r18,r3,80090a10 <__divdf3+0x6e4>
8009077c:	90c0bf26 	beq	r18,r3,80090a7c <__divdf3+0x750>
80090780:	90c7c83a 	sub	r3,r18,r3
80090784:	810fc83a 	sub	r7,r16,r4
80090788:	81e5803a 	cmpltu	r18,r16,r7
8009078c:	1ca5c83a 	sub	r18,r3,r18
80090790:	e480c126 	beq	fp,r18,80090a98 <__divdf3+0x76c>
80090794:	a00b883a 	mov	r5,r20
80090798:	9009883a 	mov	r4,r18
8009079c:	d9800315 	stw	r6,12(sp)
800907a0:	d9c00215 	stw	r7,8(sp)
800907a4:	da400115 	stw	r9,4(sp)
800907a8:	008f9c40 	call	8008f9c4 <__udivsi3>
800907ac:	a00b883a 	mov	r5,r20
800907b0:	9009883a 	mov	r4,r18
800907b4:	d8800015 	stw	r2,0(sp)
800907b8:	008fa280 	call	8008fa28 <__umodsi3>
800907bc:	d9c00217 	ldw	r7,8(sp)
800907c0:	da000017 	ldw	r8,0(sp)
800907c4:	1006943a 	slli	r3,r2,16
800907c8:	3804d43a 	srli	r2,r7,16
800907cc:	ba21383a 	mul	r16,r23,r8
800907d0:	d9800317 	ldw	r6,12(sp)
800907d4:	10c4b03a 	or	r2,r2,r3
800907d8:	da400117 	ldw	r9,4(sp)
800907dc:	1400062e 	bgeu	r2,r16,800907f8 <__divdf3+0x4cc>
800907e0:	1705883a 	add	r2,r2,fp
800907e4:	40ffffc4 	addi	r3,r8,-1
800907e8:	1700ad36 	bltu	r2,fp,80090aa0 <__divdf3+0x774>
800907ec:	1400ac2e 	bgeu	r2,r16,80090aa0 <__divdf3+0x774>
800907f0:	423fff84 	addi	r8,r8,-2
800907f4:	1705883a 	add	r2,r2,fp
800907f8:	1421c83a 	sub	r16,r2,r16
800907fc:	a00b883a 	mov	r5,r20
80090800:	8009883a 	mov	r4,r16
80090804:	d9800315 	stw	r6,12(sp)
80090808:	d9c00215 	stw	r7,8(sp)
8009080c:	da000015 	stw	r8,0(sp)
80090810:	da400115 	stw	r9,4(sp)
80090814:	008f9c40 	call	8008f9c4 <__udivsi3>
80090818:	8009883a 	mov	r4,r16
8009081c:	a00b883a 	mov	r5,r20
80090820:	1025883a 	mov	r18,r2
80090824:	008fa280 	call	8008fa28 <__umodsi3>
80090828:	d9c00217 	ldw	r7,8(sp)
8009082c:	1004943a 	slli	r2,r2,16
80090830:	bcaf383a 	mul	r23,r23,r18
80090834:	393fffcc 	andi	r4,r7,65535
80090838:	2088b03a 	or	r4,r4,r2
8009083c:	d9800317 	ldw	r6,12(sp)
80090840:	da000017 	ldw	r8,0(sp)
80090844:	da400117 	ldw	r9,4(sp)
80090848:	25c0062e 	bgeu	r4,r23,80090864 <__divdf3+0x538>
8009084c:	2709883a 	add	r4,r4,fp
80090850:	90bfffc4 	addi	r2,r18,-1
80090854:	27009436 	bltu	r4,fp,80090aa8 <__divdf3+0x77c>
80090858:	25c0932e 	bgeu	r4,r23,80090aa8 <__divdf3+0x77c>
8009085c:	94bfff84 	addi	r18,r18,-2
80090860:	2709883a 	add	r4,r4,fp
80090864:	4004943a 	slli	r2,r8,16
80090868:	25efc83a 	sub	r23,r4,r23
8009086c:	1490b03a 	or	r8,r2,r18
80090870:	4008d43a 	srli	r4,r8,16
80090874:	40ffffcc 	andi	r3,r8,65535
80090878:	30c5383a 	mul	r2,r6,r3
8009087c:	1a47383a 	mul	r3,r3,r9
80090880:	310d383a 	mul	r6,r6,r4
80090884:	100ad43a 	srli	r5,r2,16
80090888:	4913383a 	mul	r9,r9,r4
8009088c:	1987883a 	add	r3,r3,r6
80090890:	28c7883a 	add	r3,r5,r3
80090894:	1980022e 	bgeu	r3,r6,800908a0 <__divdf3+0x574>
80090898:	01000074 	movhi	r4,1
8009089c:	4913883a 	add	r9,r9,r4
800908a0:	1808d43a 	srli	r4,r3,16
800908a4:	1806943a 	slli	r3,r3,16
800908a8:	10bfffcc 	andi	r2,r2,65535
800908ac:	2253883a 	add	r9,r4,r9
800908b0:	1887883a 	add	r3,r3,r2
800908b4:	ba403836 	bltu	r23,r9,80090998 <__divdf3+0x66c>
800908b8:	ba403626 	beq	r23,r9,80090994 <__divdf3+0x668>
800908bc:	42000054 	ori	r8,r8,1
800908c0:	a880ffc4 	addi	r2,r21,1023
800908c4:	00bf570e 	bge	zero,r2,80090624 <__divdf3+0x2f8>
800908c8:	40c001cc 	andi	r3,r8,7
800908cc:	18000726 	beq	r3,zero,800908ec <__divdf3+0x5c0>
800908d0:	40c003cc 	andi	r3,r8,15
800908d4:	01000104 	movi	r4,4
800908d8:	19000426 	beq	r3,r4,800908ec <__divdf3+0x5c0>
800908dc:	4107883a 	add	r3,r8,r4
800908e0:	1a11803a 	cmpltu	r8,r3,r8
800908e4:	8a23883a 	add	r17,r17,r8
800908e8:	1811883a 	mov	r8,r3
800908ec:	88c0402c 	andhi	r3,r17,256
800908f0:	18000426 	beq	r3,zero,80090904 <__divdf3+0x5d8>
800908f4:	00ffc034 	movhi	r3,65280
800908f8:	18ffffc4 	addi	r3,r3,-1
800908fc:	a8810004 	addi	r2,r21,1024
80090900:	88e2703a 	and	r17,r17,r3
80090904:	00c1ff84 	movi	r3,2046
80090908:	18bee316 	blt	r3,r2,80090498 <__divdf3+0x16c>
8009090c:	8824977a 	slli	r18,r17,29
80090910:	4010d0fa 	srli	r8,r8,3
80090914:	8822927a 	slli	r17,r17,9
80090918:	1081ffcc 	andi	r2,r2,2047
8009091c:	9224b03a 	or	r18,r18,r8
80090920:	880ad33a 	srli	r5,r17,12
80090924:	98c0004c 	andi	r3,r19,1
80090928:	003edf06 	br	800904a8 <__divdf3+0x17c>
8009092c:	8080022c 	andhi	r2,r16,8
80090930:	10001226 	beq	r2,zero,8009097c <__divdf3+0x650>
80090934:	8880022c 	andhi	r2,r17,8
80090938:	1000101e 	bne	r2,zero,8009097c <__divdf3+0x650>
8009093c:	00800434 	movhi	r2,16
80090940:	89400234 	orhi	r5,r17,8
80090944:	10bfffc4 	addi	r2,r2,-1
80090948:	b007883a 	mov	r3,r22
8009094c:	288a703a 	and	r5,r5,r2
80090950:	4025883a 	mov	r18,r8
80090954:	003f3106 	br	8009061c <__divdf3+0x2f0>
80090958:	008000c4 	movi	r2,3
8009095c:	3880a626 	beq	r7,r2,80090bf8 <__divdf3+0x8cc>
80090960:	00800044 	movi	r2,1
80090964:	3880521e 	bne	r7,r2,80090ab0 <__divdf3+0x784>
80090968:	b807883a 	mov	r3,r23
8009096c:	0005883a 	mov	r2,zero
80090970:	000b883a 	mov	r5,zero
80090974:	0025883a 	mov	r18,zero
80090978:	003ecb06 	br	800904a8 <__divdf3+0x17c>
8009097c:	00800434 	movhi	r2,16
80090980:	81400234 	orhi	r5,r16,8
80090984:	10bfffc4 	addi	r2,r2,-1
80090988:	a007883a 	mov	r3,r20
8009098c:	288a703a 	and	r5,r5,r2
80090990:	003f2206 	br	8009061c <__divdf3+0x2f0>
80090994:	183fca26 	beq	r3,zero,800908c0 <__divdf3+0x594>
80090998:	e5ef883a 	add	r23,fp,r23
8009099c:	40bfffc4 	addi	r2,r8,-1
800909a0:	bf00392e 	bgeu	r23,fp,80090a88 <__divdf3+0x75c>
800909a4:	1011883a 	mov	r8,r2
800909a8:	ba7fc41e 	bne	r23,r9,800908bc <__divdf3+0x590>
800909ac:	b0ffc31e 	bne	r22,r3,800908bc <__divdf3+0x590>
800909b0:	003fc306 	br	800908c0 <__divdf3+0x594>
800909b4:	143ff604 	addi	r16,r2,-40
800909b8:	9c20983a 	sll	r16,r19,r16
800909bc:	0025883a 	mov	r18,zero
800909c0:	003ee206 	br	8009054c <__divdf3+0x220>
800909c4:	d9800315 	stw	r6,12(sp)
800909c8:	d9c00215 	stw	r7,8(sp)
800909cc:	0081c280 	call	80081c28 <__clzsi2>
800909d0:	10800804 	addi	r2,r2,32
800909d4:	d9c00217 	ldw	r7,8(sp)
800909d8:	d9800317 	ldw	r6,12(sp)
800909dc:	003ed106 	br	80090524 <__divdf3+0x1f8>
800909e0:	147ff604 	addi	r17,r2,-40
800909e4:	3462983a 	sll	r17,r6,r17
800909e8:	0011883a 	mov	r8,zero
800909ec:	003ef506 	br	800905c4 <__divdf3+0x298>
800909f0:	3009883a 	mov	r4,r6
800909f4:	d9800315 	stw	r6,12(sp)
800909f8:	da400115 	stw	r9,4(sp)
800909fc:	0081c280 	call	80081c28 <__clzsi2>
80090a00:	10800804 	addi	r2,r2,32
80090a04:	da400117 	ldw	r9,4(sp)
80090a08:	d9800317 	ldw	r6,12(sp)
80090a0c:	003ee306 	br	8009059c <__divdf3+0x270>
80090a10:	85a1883a 	add	r16,r16,r22
80090a14:	8585803a 	cmpltu	r2,r16,r22
80090a18:	1705883a 	add	r2,r2,fp
80090a1c:	14a5883a 	add	r18,r2,r18
80090a20:	88bfffc4 	addi	r2,r17,-1
80090a24:	e4800c2e 	bgeu	fp,r18,80090a58 <__divdf3+0x72c>
80090a28:	90c03e36 	bltu	r18,r3,80090b24 <__divdf3+0x7f8>
80090a2c:	1c806926 	beq	r3,r18,80090bd4 <__divdf3+0x8a8>
80090a30:	90c7c83a 	sub	r3,r18,r3
80090a34:	1023883a 	mov	r17,r2
80090a38:	003f5206 	br	80090784 <__divdf3+0x458>
80090a3c:	923f0436 	bltu	r18,r8,80090650 <__divdf3+0x324>
80090a40:	800897fa 	slli	r4,r16,31
80090a44:	9004d07a 	srli	r2,r18,1
80090a48:	8006d07a 	srli	r3,r16,1
80090a4c:	902097fa 	slli	r16,r18,31
80090a50:	20a4b03a 	or	r18,r4,r2
80090a54:	003f0106 	br	8009065c <__divdf3+0x330>
80090a58:	e4bff51e 	bne	fp,r18,80090a30 <__divdf3+0x704>
80090a5c:	85bff22e 	bgeu	r16,r22,80090a28 <__divdf3+0x6fc>
80090a60:	e0c7c83a 	sub	r3,fp,r3
80090a64:	1023883a 	mov	r17,r2
80090a68:	003f4606 	br	80090784 <__divdf3+0x458>
80090a6c:	100f883a 	mov	r7,r2
80090a70:	003f2b06 	br	80090720 <__divdf3+0x3f4>
80090a74:	180d883a 	mov	r6,r3
80090a78:	003f1306 	br	800906c8 <__divdf3+0x39c>
80090a7c:	813fe436 	bltu	r16,r4,80090a10 <__divdf3+0x6e4>
80090a80:	0007883a 	mov	r3,zero
80090a84:	003f3f06 	br	80090784 <__divdf3+0x458>
80090a88:	ba402c36 	bltu	r23,r9,80090b3c <__divdf3+0x810>
80090a8c:	4dc05426 	beq	r9,r23,80090be0 <__divdf3+0x8b4>
80090a90:	1011883a 	mov	r8,r2
80090a94:	003f8906 	br	800908bc <__divdf3+0x590>
80090a98:	023fffc4 	movi	r8,-1
80090a9c:	003f8806 	br	800908c0 <__divdf3+0x594>
80090aa0:	1811883a 	mov	r8,r3
80090aa4:	003f5406 	br	800907f8 <__divdf3+0x4cc>
80090aa8:	1025883a 	mov	r18,r2
80090aac:	003f6d06 	br	80090864 <__divdf3+0x538>
80090ab0:	b827883a 	mov	r19,r23
80090ab4:	003f8206 	br	800908c0 <__divdf3+0x594>
80090ab8:	010007c4 	movi	r4,31
80090abc:	20c02616 	blt	r4,r3,80090b58 <__divdf3+0x82c>
80090ac0:	00800804 	movi	r2,32
80090ac4:	10c5c83a 	sub	r2,r2,r3
80090ac8:	888a983a 	sll	r5,r17,r2
80090acc:	40c8d83a 	srl	r4,r8,r3
80090ad0:	4084983a 	sll	r2,r8,r2
80090ad4:	88e2d83a 	srl	r17,r17,r3
80090ad8:	2906b03a 	or	r3,r5,r4
80090adc:	1004c03a 	cmpne	r2,r2,zero
80090ae0:	1886b03a 	or	r3,r3,r2
80090ae4:	188001cc 	andi	r2,r3,7
80090ae8:	10000726 	beq	r2,zero,80090b08 <__divdf3+0x7dc>
80090aec:	188003cc 	andi	r2,r3,15
80090af0:	01000104 	movi	r4,4
80090af4:	11000426 	beq	r2,r4,80090b08 <__divdf3+0x7dc>
80090af8:	1805883a 	mov	r2,r3
80090afc:	10c00104 	addi	r3,r2,4
80090b00:	1885803a 	cmpltu	r2,r3,r2
80090b04:	88a3883a 	add	r17,r17,r2
80090b08:	8880202c 	andhi	r2,r17,128
80090b0c:	10002726 	beq	r2,zero,80090bac <__divdf3+0x880>
80090b10:	98c0004c 	andi	r3,r19,1
80090b14:	00800044 	movi	r2,1
80090b18:	000b883a 	mov	r5,zero
80090b1c:	0025883a 	mov	r18,zero
80090b20:	003e6106 	br	800904a8 <__divdf3+0x17c>
80090b24:	85a1883a 	add	r16,r16,r22
80090b28:	8585803a 	cmpltu	r2,r16,r22
80090b2c:	1705883a 	add	r2,r2,fp
80090b30:	14a5883a 	add	r18,r2,r18
80090b34:	8c7fff84 	addi	r17,r17,-2
80090b38:	003f1106 	br	80090780 <__divdf3+0x454>
80090b3c:	b589883a 	add	r4,r22,r22
80090b40:	25ad803a 	cmpltu	r22,r4,r22
80090b44:	b739883a 	add	fp,r22,fp
80090b48:	40bfff84 	addi	r2,r8,-2
80090b4c:	bf2f883a 	add	r23,r23,fp
80090b50:	202d883a 	mov	r22,r4
80090b54:	003f9306 	br	800909a4 <__divdf3+0x678>
80090b58:	013ff844 	movi	r4,-31
80090b5c:	2085c83a 	sub	r2,r4,r2
80090b60:	8888d83a 	srl	r4,r17,r2
80090b64:	00800804 	movi	r2,32
80090b68:	18802126 	beq	r3,r2,80090bf0 <__divdf3+0x8c4>
80090b6c:	00801004 	movi	r2,64
80090b70:	10c5c83a 	sub	r2,r2,r3
80090b74:	8884983a 	sll	r2,r17,r2
80090b78:	1204b03a 	or	r2,r2,r8
80090b7c:	1004c03a 	cmpne	r2,r2,zero
80090b80:	2084b03a 	or	r2,r4,r2
80090b84:	144001cc 	andi	r17,r2,7
80090b88:	88000d1e 	bne	r17,zero,80090bc0 <__divdf3+0x894>
80090b8c:	000b883a 	mov	r5,zero
80090b90:	1024d0fa 	srli	r18,r2,3
80090b94:	98c0004c 	andi	r3,r19,1
80090b98:	0005883a 	mov	r2,zero
80090b9c:	9464b03a 	or	r18,r18,r17
80090ba0:	003e4106 	br	800904a8 <__divdf3+0x17c>
80090ba4:	1007883a 	mov	r3,r2
80090ba8:	0023883a 	mov	r17,zero
80090bac:	880a927a 	slli	r5,r17,9
80090bb0:	1805883a 	mov	r2,r3
80090bb4:	8822977a 	slli	r17,r17,29
80090bb8:	280ad33a 	srli	r5,r5,12
80090bbc:	003ff406 	br	80090b90 <__divdf3+0x864>
80090bc0:	10c003cc 	andi	r3,r2,15
80090bc4:	01000104 	movi	r4,4
80090bc8:	193ff626 	beq	r3,r4,80090ba4 <__divdf3+0x878>
80090bcc:	0023883a 	mov	r17,zero
80090bd0:	003fca06 	br	80090afc <__divdf3+0x7d0>
80090bd4:	813fd336 	bltu	r16,r4,80090b24 <__divdf3+0x7f8>
80090bd8:	1023883a 	mov	r17,r2
80090bdc:	003fa806 	br	80090a80 <__divdf3+0x754>
80090be0:	b0ffd636 	bltu	r22,r3,80090b3c <__divdf3+0x810>
80090be4:	1011883a 	mov	r8,r2
80090be8:	b0ff341e 	bne	r22,r3,800908bc <__divdf3+0x590>
80090bec:	003f3406 	br	800908c0 <__divdf3+0x594>
80090bf0:	0005883a 	mov	r2,zero
80090bf4:	003fe006 	br	80090b78 <__divdf3+0x84c>
80090bf8:	00800434 	movhi	r2,16
80090bfc:	89400234 	orhi	r5,r17,8
80090c00:	10bfffc4 	addi	r2,r2,-1
80090c04:	b807883a 	mov	r3,r23
80090c08:	288a703a 	and	r5,r5,r2
80090c0c:	4025883a 	mov	r18,r8
80090c10:	003e8206 	br	8009061c <__divdf3+0x2f0>

80090c14 <__eqdf2>:
80090c14:	2804d53a 	srli	r2,r5,20
80090c18:	3806d53a 	srli	r3,r7,20
80090c1c:	02000434 	movhi	r8,16
80090c20:	423fffc4 	addi	r8,r8,-1
80090c24:	1081ffcc 	andi	r2,r2,2047
80090c28:	0281ffc4 	movi	r10,2047
80090c2c:	2a12703a 	and	r9,r5,r8
80090c30:	18c1ffcc 	andi	r3,r3,2047
80090c34:	3a10703a 	and	r8,r7,r8
80090c38:	280ad7fa 	srli	r5,r5,31
80090c3c:	380ed7fa 	srli	r7,r7,31
80090c40:	12801026 	beq	r2,r10,80090c84 <__eqdf2+0x70>
80090c44:	0281ffc4 	movi	r10,2047
80090c48:	1a800a26 	beq	r3,r10,80090c74 <__eqdf2+0x60>
80090c4c:	10c00226 	beq	r2,r3,80090c58 <__eqdf2+0x44>
80090c50:	00800044 	movi	r2,1
80090c54:	f800283a 	ret
80090c58:	4a3ffd1e 	bne	r9,r8,80090c50 <__eqdf2+0x3c>
80090c5c:	21bffc1e 	bne	r4,r6,80090c50 <__eqdf2+0x3c>
80090c60:	29c00c26 	beq	r5,r7,80090c94 <__eqdf2+0x80>
80090c64:	103ffa1e 	bne	r2,zero,80090c50 <__eqdf2+0x3c>
80090c68:	2244b03a 	or	r2,r4,r9
80090c6c:	1004c03a 	cmpne	r2,r2,zero
80090c70:	f800283a 	ret
80090c74:	3214b03a 	or	r10,r6,r8
80090c78:	503ff426 	beq	r10,zero,80090c4c <__eqdf2+0x38>
80090c7c:	00800044 	movi	r2,1
80090c80:	f800283a 	ret
80090c84:	2254b03a 	or	r10,r4,r9
80090c88:	503fee26 	beq	r10,zero,80090c44 <__eqdf2+0x30>
80090c8c:	00800044 	movi	r2,1
80090c90:	f800283a 	ret
80090c94:	0005883a 	mov	r2,zero
80090c98:	f800283a 	ret

80090c9c <__ledf2>:
80090c9c:	2804d53a 	srli	r2,r5,20
80090ca0:	3810d53a 	srli	r8,r7,20
80090ca4:	00c00434 	movhi	r3,16
80090ca8:	18ffffc4 	addi	r3,r3,-1
80090cac:	1081ffcc 	andi	r2,r2,2047
80090cb0:	0241ffc4 	movi	r9,2047
80090cb4:	28d4703a 	and	r10,r5,r3
80090cb8:	4201ffcc 	andi	r8,r8,2047
80090cbc:	38c6703a 	and	r3,r7,r3
80090cc0:	280ad7fa 	srli	r5,r5,31
80090cc4:	380ed7fa 	srli	r7,r7,31
80090cc8:	12401f26 	beq	r2,r9,80090d48 <__ledf2+0xac>
80090ccc:	0241ffc4 	movi	r9,2047
80090cd0:	42401426 	beq	r8,r9,80090d24 <__ledf2+0x88>
80090cd4:	1000091e 	bne	r2,zero,80090cfc <__ledf2+0x60>
80090cd8:	2296b03a 	or	r11,r4,r10
80090cdc:	5813003a 	cmpeq	r9,r11,zero
80090ce0:	29403fcc 	andi	r5,r5,255
80090ce4:	40000a1e 	bne	r8,zero,80090d10 <__ledf2+0x74>
80090ce8:	30d8b03a 	or	r12,r6,r3
80090cec:	6000081e 	bne	r12,zero,80090d10 <__ledf2+0x74>
80090cf0:	0005883a 	mov	r2,zero
80090cf4:	5800111e 	bne	r11,zero,80090d3c <__ledf2+0xa0>
80090cf8:	f800283a 	ret
80090cfc:	29403fcc 	andi	r5,r5,255
80090d00:	40000c1e 	bne	r8,zero,80090d34 <__ledf2+0x98>
80090d04:	30d2b03a 	or	r9,r6,r3
80090d08:	48000c26 	beq	r9,zero,80090d3c <__ledf2+0xa0>
80090d0c:	0013883a 	mov	r9,zero
80090d10:	39c03fcc 	andi	r7,r7,255
80090d14:	48000826 	beq	r9,zero,80090d38 <__ledf2+0x9c>
80090d18:	38001126 	beq	r7,zero,80090d60 <__ledf2+0xc4>
80090d1c:	00800044 	movi	r2,1
80090d20:	f800283a 	ret
80090d24:	30d2b03a 	or	r9,r6,r3
80090d28:	483fea26 	beq	r9,zero,80090cd4 <__ledf2+0x38>
80090d2c:	00800084 	movi	r2,2
80090d30:	f800283a 	ret
80090d34:	39c03fcc 	andi	r7,r7,255
80090d38:	39400726 	beq	r7,r5,80090d58 <__ledf2+0xbc>
80090d3c:	2800081e 	bne	r5,zero,80090d60 <__ledf2+0xc4>
80090d40:	00800044 	movi	r2,1
80090d44:	f800283a 	ret
80090d48:	2292b03a 	or	r9,r4,r10
80090d4c:	483fdf26 	beq	r9,zero,80090ccc <__ledf2+0x30>
80090d50:	00800084 	movi	r2,2
80090d54:	f800283a 	ret
80090d58:	4080030e 	bge	r8,r2,80090d68 <__ledf2+0xcc>
80090d5c:	383fef26 	beq	r7,zero,80090d1c <__ledf2+0x80>
80090d60:	00bfffc4 	movi	r2,-1
80090d64:	f800283a 	ret
80090d68:	123feb16 	blt	r2,r8,80090d18 <__ledf2+0x7c>
80090d6c:	1abff336 	bltu	r3,r10,80090d3c <__ledf2+0xa0>
80090d70:	50c00326 	beq	r10,r3,80090d80 <__ledf2+0xe4>
80090d74:	50c0042e 	bgeu	r10,r3,80090d88 <__ledf2+0xec>
80090d78:	283fe81e 	bne	r5,zero,80090d1c <__ledf2+0x80>
80090d7c:	003ff806 	br	80090d60 <__ledf2+0xc4>
80090d80:	313fee36 	bltu	r6,r4,80090d3c <__ledf2+0xa0>
80090d84:	21bffc36 	bltu	r4,r6,80090d78 <__ledf2+0xdc>
80090d88:	0005883a 	mov	r2,zero
80090d8c:	f800283a 	ret

80090d90 <__subdf3>:
80090d90:	02000434 	movhi	r8,16
80090d94:	423fffc4 	addi	r8,r8,-1
80090d98:	defffb04 	addi	sp,sp,-20
80090d9c:	2a14703a 	and	r10,r5,r8
80090da0:	3812d53a 	srli	r9,r7,20
80090da4:	3a10703a 	and	r8,r7,r8
80090da8:	2006d77a 	srli	r3,r4,29
80090dac:	3004d77a 	srli	r2,r6,29
80090db0:	dc000015 	stw	r16,0(sp)
80090db4:	501490fa 	slli	r10,r10,3
80090db8:	2820d53a 	srli	r16,r5,20
80090dbc:	401090fa 	slli	r8,r8,3
80090dc0:	dc800215 	stw	r18,8(sp)
80090dc4:	dc400115 	stw	r17,4(sp)
80090dc8:	dfc00415 	stw	ra,16(sp)
80090dcc:	202290fa 	slli	r17,r4,3
80090dd0:	dcc00315 	stw	r19,12(sp)
80090dd4:	4a41ffcc 	andi	r9,r9,2047
80090dd8:	0101ffc4 	movi	r4,2047
80090ddc:	2824d7fa 	srli	r18,r5,31
80090de0:	8401ffcc 	andi	r16,r16,2047
80090de4:	50c6b03a 	or	r3,r10,r3
80090de8:	380ed7fa 	srli	r7,r7,31
80090dec:	408ab03a 	or	r5,r8,r2
80090df0:	300c90fa 	slli	r6,r6,3
80090df4:	49009626 	beq	r9,r4,80091050 <__subdf3+0x2c0>
80090df8:	39c0005c 	xori	r7,r7,1
80090dfc:	8245c83a 	sub	r2,r16,r9
80090e00:	3c807426 	beq	r7,r18,80090fd4 <__subdf3+0x244>
80090e04:	0080af0e 	bge	zero,r2,800910c4 <__subdf3+0x334>
80090e08:	48002a1e 	bne	r9,zero,80090eb4 <__subdf3+0x124>
80090e0c:	2988b03a 	or	r4,r5,r6
80090e10:	20009a1e 	bne	r4,zero,8009107c <__subdf3+0x2ec>
80090e14:	888001cc 	andi	r2,r17,7
80090e18:	10000726 	beq	r2,zero,80090e38 <__subdf3+0xa8>
80090e1c:	888003cc 	andi	r2,r17,15
80090e20:	01000104 	movi	r4,4
80090e24:	11000426 	beq	r2,r4,80090e38 <__subdf3+0xa8>
80090e28:	890b883a 	add	r5,r17,r4
80090e2c:	2c63803a 	cmpltu	r17,r5,r17
80090e30:	1c47883a 	add	r3,r3,r17
80090e34:	2823883a 	mov	r17,r5
80090e38:	1880202c 	andhi	r2,r3,128
80090e3c:	10005926 	beq	r2,zero,80090fa4 <__subdf3+0x214>
80090e40:	84000044 	addi	r16,r16,1
80090e44:	0081ffc4 	movi	r2,2047
80090e48:	8080be26 	beq	r16,r2,80091144 <__subdf3+0x3b4>
80090e4c:	017fe034 	movhi	r5,65408
80090e50:	297fffc4 	addi	r5,r5,-1
80090e54:	1946703a 	and	r3,r3,r5
80090e58:	1804977a 	slli	r2,r3,29
80090e5c:	1806927a 	slli	r3,r3,9
80090e60:	8822d0fa 	srli	r17,r17,3
80090e64:	8401ffcc 	andi	r16,r16,2047
80090e68:	180ad33a 	srli	r5,r3,12
80090e6c:	9100004c 	andi	r4,r18,1
80090e70:	1444b03a 	or	r2,r2,r17
80090e74:	80c1ffcc 	andi	r3,r16,2047
80090e78:	1820953a 	slli	r16,r3,20
80090e7c:	20c03fcc 	andi	r3,r4,255
80090e80:	180897fa 	slli	r4,r3,31
80090e84:	00c00434 	movhi	r3,16
80090e88:	18ffffc4 	addi	r3,r3,-1
80090e8c:	28c6703a 	and	r3,r5,r3
80090e90:	1c06b03a 	or	r3,r3,r16
80090e94:	1906b03a 	or	r3,r3,r4
80090e98:	dfc00417 	ldw	ra,16(sp)
80090e9c:	dcc00317 	ldw	r19,12(sp)
80090ea0:	dc800217 	ldw	r18,8(sp)
80090ea4:	dc400117 	ldw	r17,4(sp)
80090ea8:	dc000017 	ldw	r16,0(sp)
80090eac:	dec00504 	addi	sp,sp,20
80090eb0:	f800283a 	ret
80090eb4:	0101ffc4 	movi	r4,2047
80090eb8:	813fd626 	beq	r16,r4,80090e14 <__subdf3+0x84>
80090ebc:	29402034 	orhi	r5,r5,128
80090ec0:	01000e04 	movi	r4,56
80090ec4:	2080a316 	blt	r4,r2,80091154 <__subdf3+0x3c4>
80090ec8:	010007c4 	movi	r4,31
80090ecc:	2080c616 	blt	r4,r2,800911e8 <__subdf3+0x458>
80090ed0:	01000804 	movi	r4,32
80090ed4:	2089c83a 	sub	r4,r4,r2
80090ed8:	2910983a 	sll	r8,r5,r4
80090edc:	308ed83a 	srl	r7,r6,r2
80090ee0:	3108983a 	sll	r4,r6,r4
80090ee4:	2884d83a 	srl	r2,r5,r2
80090ee8:	41ccb03a 	or	r6,r8,r7
80090eec:	2008c03a 	cmpne	r4,r4,zero
80090ef0:	310cb03a 	or	r6,r6,r4
80090ef4:	898dc83a 	sub	r6,r17,r6
80090ef8:	89a3803a 	cmpltu	r17,r17,r6
80090efc:	1887c83a 	sub	r3,r3,r2
80090f00:	1c47c83a 	sub	r3,r3,r17
80090f04:	3023883a 	mov	r17,r6
80090f08:	1880202c 	andhi	r2,r3,128
80090f0c:	10002326 	beq	r2,zero,80090f9c <__subdf3+0x20c>
80090f10:	04c02034 	movhi	r19,128
80090f14:	9cffffc4 	addi	r19,r19,-1
80090f18:	1ce6703a 	and	r19,r3,r19
80090f1c:	98007a26 	beq	r19,zero,80091108 <__subdf3+0x378>
80090f20:	9809883a 	mov	r4,r19
80090f24:	0081c280 	call	80081c28 <__clzsi2>
80090f28:	113ffe04 	addi	r4,r2,-8
80090f2c:	00c007c4 	movi	r3,31
80090f30:	19007b16 	blt	r3,r4,80091120 <__subdf3+0x390>
80090f34:	00800804 	movi	r2,32
80090f38:	1105c83a 	sub	r2,r2,r4
80090f3c:	8884d83a 	srl	r2,r17,r2
80090f40:	9906983a 	sll	r3,r19,r4
80090f44:	8922983a 	sll	r17,r17,r4
80090f48:	10c4b03a 	or	r2,r2,r3
80090f4c:	24007816 	blt	r4,r16,80091130 <__subdf3+0x3a0>
80090f50:	2421c83a 	sub	r16,r4,r16
80090f54:	80c00044 	addi	r3,r16,1
80090f58:	010007c4 	movi	r4,31
80090f5c:	20c09516 	blt	r4,r3,800911b4 <__subdf3+0x424>
80090f60:	01400804 	movi	r5,32
80090f64:	28cbc83a 	sub	r5,r5,r3
80090f68:	88c8d83a 	srl	r4,r17,r3
80090f6c:	8962983a 	sll	r17,r17,r5
80090f70:	114a983a 	sll	r5,r2,r5
80090f74:	10c6d83a 	srl	r3,r2,r3
80090f78:	8804c03a 	cmpne	r2,r17,zero
80090f7c:	290ab03a 	or	r5,r5,r4
80090f80:	28a2b03a 	or	r17,r5,r2
80090f84:	0021883a 	mov	r16,zero
80090f88:	003fa206 	br	80090e14 <__subdf3+0x84>
80090f8c:	2090b03a 	or	r8,r4,r2
80090f90:	40018e26 	beq	r8,zero,800915cc <__subdf3+0x83c>
80090f94:	1007883a 	mov	r3,r2
80090f98:	2023883a 	mov	r17,r4
80090f9c:	888001cc 	andi	r2,r17,7
80090fa0:	103f9e1e 	bne	r2,zero,80090e1c <__subdf3+0x8c>
80090fa4:	1804977a 	slli	r2,r3,29
80090fa8:	8822d0fa 	srli	r17,r17,3
80090fac:	1810d0fa 	srli	r8,r3,3
80090fb0:	9100004c 	andi	r4,r18,1
80090fb4:	1444b03a 	or	r2,r2,r17
80090fb8:	00c1ffc4 	movi	r3,2047
80090fbc:	80c02826 	beq	r16,r3,80091060 <__subdf3+0x2d0>
80090fc0:	01400434 	movhi	r5,16
80090fc4:	297fffc4 	addi	r5,r5,-1
80090fc8:	80e0703a 	and	r16,r16,r3
80090fcc:	414a703a 	and	r5,r8,r5
80090fd0:	003fa806 	br	80090e74 <__subdf3+0xe4>
80090fd4:	0080630e 	bge	zero,r2,80091164 <__subdf3+0x3d4>
80090fd8:	48003026 	beq	r9,zero,8009109c <__subdf3+0x30c>
80090fdc:	0101ffc4 	movi	r4,2047
80090fe0:	813f8c26 	beq	r16,r4,80090e14 <__subdf3+0x84>
80090fe4:	29402034 	orhi	r5,r5,128
80090fe8:	01000e04 	movi	r4,56
80090fec:	2080a90e 	bge	r4,r2,80091294 <__subdf3+0x504>
80090ff0:	298cb03a 	or	r6,r5,r6
80090ff4:	3012c03a 	cmpne	r9,r6,zero
80090ff8:	0005883a 	mov	r2,zero
80090ffc:	4c53883a 	add	r9,r9,r17
80091000:	4c63803a 	cmpltu	r17,r9,r17
80091004:	10c7883a 	add	r3,r2,r3
80091008:	88c7883a 	add	r3,r17,r3
8009100c:	4823883a 	mov	r17,r9
80091010:	1880202c 	andhi	r2,r3,128
80091014:	1000d026 	beq	r2,zero,80091358 <__subdf3+0x5c8>
80091018:	84000044 	addi	r16,r16,1
8009101c:	0081ffc4 	movi	r2,2047
80091020:	8080fe26 	beq	r16,r2,8009141c <__subdf3+0x68c>
80091024:	00bfe034 	movhi	r2,65408
80091028:	10bfffc4 	addi	r2,r2,-1
8009102c:	1886703a 	and	r3,r3,r2
80091030:	880ad07a 	srli	r5,r17,1
80091034:	180497fa 	slli	r2,r3,31
80091038:	8900004c 	andi	r4,r17,1
8009103c:	2922b03a 	or	r17,r5,r4
80091040:	1806d07a 	srli	r3,r3,1
80091044:	1462b03a 	or	r17,r2,r17
80091048:	3825883a 	mov	r18,r7
8009104c:	003f7106 	br	80090e14 <__subdf3+0x84>
80091050:	2984b03a 	or	r2,r5,r6
80091054:	103f6826 	beq	r2,zero,80090df8 <__subdf3+0x68>
80091058:	39c03fcc 	andi	r7,r7,255
8009105c:	003f6706 	br	80090dfc <__subdf3+0x6c>
80091060:	4086b03a 	or	r3,r8,r2
80091064:	18015226 	beq	r3,zero,800915b0 <__subdf3+0x820>
80091068:	00c00434 	movhi	r3,16
8009106c:	41400234 	orhi	r5,r8,8
80091070:	18ffffc4 	addi	r3,r3,-1
80091074:	28ca703a 	and	r5,r5,r3
80091078:	003f7e06 	br	80090e74 <__subdf3+0xe4>
8009107c:	10bfffc4 	addi	r2,r2,-1
80091080:	1000491e 	bne	r2,zero,800911a8 <__subdf3+0x418>
80091084:	898fc83a 	sub	r7,r17,r6
80091088:	89e3803a 	cmpltu	r17,r17,r7
8009108c:	1947c83a 	sub	r3,r3,r5
80091090:	1c47c83a 	sub	r3,r3,r17
80091094:	3823883a 	mov	r17,r7
80091098:	003f9b06 	br	80090f08 <__subdf3+0x178>
8009109c:	2988b03a 	or	r4,r5,r6
800910a0:	203f5c26 	beq	r4,zero,80090e14 <__subdf3+0x84>
800910a4:	10bfffc4 	addi	r2,r2,-1
800910a8:	1000931e 	bne	r2,zero,800912f8 <__subdf3+0x568>
800910ac:	898d883a 	add	r6,r17,r6
800910b0:	3463803a 	cmpltu	r17,r6,r17
800910b4:	1947883a 	add	r3,r3,r5
800910b8:	88c7883a 	add	r3,r17,r3
800910bc:	3023883a 	mov	r17,r6
800910c0:	003fd306 	br	80091010 <__subdf3+0x280>
800910c4:	1000541e 	bne	r2,zero,80091218 <__subdf3+0x488>
800910c8:	80800044 	addi	r2,r16,1
800910cc:	1081ffcc 	andi	r2,r2,2047
800910d0:	01000044 	movi	r4,1
800910d4:	2080a20e 	bge	r4,r2,80091360 <__subdf3+0x5d0>
800910d8:	8989c83a 	sub	r4,r17,r6
800910dc:	8905803a 	cmpltu	r2,r17,r4
800910e0:	1967c83a 	sub	r19,r3,r5
800910e4:	98a7c83a 	sub	r19,r19,r2
800910e8:	9880202c 	andhi	r2,r19,128
800910ec:	10006326 	beq	r2,zero,8009127c <__subdf3+0x4ec>
800910f0:	3463c83a 	sub	r17,r6,r17
800910f4:	28c7c83a 	sub	r3,r5,r3
800910f8:	344d803a 	cmpltu	r6,r6,r17
800910fc:	19a7c83a 	sub	r19,r3,r6
80091100:	3825883a 	mov	r18,r7
80091104:	983f861e 	bne	r19,zero,80090f20 <__subdf3+0x190>
80091108:	8809883a 	mov	r4,r17
8009110c:	0081c280 	call	80081c28 <__clzsi2>
80091110:	10800804 	addi	r2,r2,32
80091114:	113ffe04 	addi	r4,r2,-8
80091118:	00c007c4 	movi	r3,31
8009111c:	193f850e 	bge	r3,r4,80090f34 <__subdf3+0x1a4>
80091120:	10bff604 	addi	r2,r2,-40
80091124:	8884983a 	sll	r2,r17,r2
80091128:	0023883a 	mov	r17,zero
8009112c:	243f880e 	bge	r4,r16,80090f50 <__subdf3+0x1c0>
80091130:	00ffe034 	movhi	r3,65408
80091134:	18ffffc4 	addi	r3,r3,-1
80091138:	8121c83a 	sub	r16,r16,r4
8009113c:	10c6703a 	and	r3,r2,r3
80091140:	003f3406 	br	80090e14 <__subdf3+0x84>
80091144:	9100004c 	andi	r4,r18,1
80091148:	000b883a 	mov	r5,zero
8009114c:	0005883a 	mov	r2,zero
80091150:	003f4806 	br	80090e74 <__subdf3+0xe4>
80091154:	298cb03a 	or	r6,r5,r6
80091158:	300cc03a 	cmpne	r6,r6,zero
8009115c:	0005883a 	mov	r2,zero
80091160:	003f6406 	br	80090ef4 <__subdf3+0x164>
80091164:	10009a1e 	bne	r2,zero,800913d0 <__subdf3+0x640>
80091168:	82400044 	addi	r9,r16,1
8009116c:	4881ffcc 	andi	r2,r9,2047
80091170:	02800044 	movi	r10,1
80091174:	5080670e 	bge	r10,r2,80091314 <__subdf3+0x584>
80091178:	0081ffc4 	movi	r2,2047
8009117c:	4880af26 	beq	r9,r2,8009143c <__subdf3+0x6ac>
80091180:	898d883a 	add	r6,r17,r6
80091184:	1945883a 	add	r2,r3,r5
80091188:	3447803a 	cmpltu	r3,r6,r17
8009118c:	1887883a 	add	r3,r3,r2
80091190:	182297fa 	slli	r17,r3,31
80091194:	300cd07a 	srli	r6,r6,1
80091198:	1806d07a 	srli	r3,r3,1
8009119c:	4821883a 	mov	r16,r9
800911a0:	89a2b03a 	or	r17,r17,r6
800911a4:	003f1b06 	br	80090e14 <__subdf3+0x84>
800911a8:	0101ffc4 	movi	r4,2047
800911ac:	813f441e 	bne	r16,r4,80090ec0 <__subdf3+0x130>
800911b0:	003f1806 	br	80090e14 <__subdf3+0x84>
800911b4:	843ff844 	addi	r16,r16,-31
800911b8:	01400804 	movi	r5,32
800911bc:	1408d83a 	srl	r4,r2,r16
800911c0:	19405026 	beq	r3,r5,80091304 <__subdf3+0x574>
800911c4:	01401004 	movi	r5,64
800911c8:	28c7c83a 	sub	r3,r5,r3
800911cc:	10c4983a 	sll	r2,r2,r3
800911d0:	88a2b03a 	or	r17,r17,r2
800911d4:	8822c03a 	cmpne	r17,r17,zero
800911d8:	2462b03a 	or	r17,r4,r17
800911dc:	0007883a 	mov	r3,zero
800911e0:	0021883a 	mov	r16,zero
800911e4:	003f6d06 	br	80090f9c <__subdf3+0x20c>
800911e8:	11fff804 	addi	r7,r2,-32
800911ec:	01000804 	movi	r4,32
800911f0:	29ced83a 	srl	r7,r5,r7
800911f4:	11004526 	beq	r2,r4,8009130c <__subdf3+0x57c>
800911f8:	01001004 	movi	r4,64
800911fc:	2089c83a 	sub	r4,r4,r2
80091200:	2904983a 	sll	r2,r5,r4
80091204:	118cb03a 	or	r6,r2,r6
80091208:	300cc03a 	cmpne	r6,r6,zero
8009120c:	398cb03a 	or	r6,r7,r6
80091210:	0005883a 	mov	r2,zero
80091214:	003f3706 	br	80090ef4 <__subdf3+0x164>
80091218:	80002a26 	beq	r16,zero,800912c4 <__subdf3+0x534>
8009121c:	0101ffc4 	movi	r4,2047
80091220:	49006626 	beq	r9,r4,800913bc <__subdf3+0x62c>
80091224:	0085c83a 	sub	r2,zero,r2
80091228:	18c02034 	orhi	r3,r3,128
8009122c:	01000e04 	movi	r4,56
80091230:	20807e16 	blt	r4,r2,8009142c <__subdf3+0x69c>
80091234:	010007c4 	movi	r4,31
80091238:	2080e716 	blt	r4,r2,800915d8 <__subdf3+0x848>
8009123c:	01000804 	movi	r4,32
80091240:	2089c83a 	sub	r4,r4,r2
80091244:	1914983a 	sll	r10,r3,r4
80091248:	8890d83a 	srl	r8,r17,r2
8009124c:	8908983a 	sll	r4,r17,r4
80091250:	1884d83a 	srl	r2,r3,r2
80091254:	5222b03a 	or	r17,r10,r8
80091258:	2006c03a 	cmpne	r3,r4,zero
8009125c:	88e2b03a 	or	r17,r17,r3
80091260:	3463c83a 	sub	r17,r6,r17
80091264:	2885c83a 	sub	r2,r5,r2
80091268:	344d803a 	cmpltu	r6,r6,r17
8009126c:	1187c83a 	sub	r3,r2,r6
80091270:	4821883a 	mov	r16,r9
80091274:	3825883a 	mov	r18,r7
80091278:	003f2306 	br	80090f08 <__subdf3+0x178>
8009127c:	24d0b03a 	or	r8,r4,r19
80091280:	40001b1e 	bne	r8,zero,800912f0 <__subdf3+0x560>
80091284:	0005883a 	mov	r2,zero
80091288:	0009883a 	mov	r4,zero
8009128c:	0021883a 	mov	r16,zero
80091290:	003f4906 	br	80090fb8 <__subdf3+0x228>
80091294:	010007c4 	movi	r4,31
80091298:	20803a16 	blt	r4,r2,80091384 <__subdf3+0x5f4>
8009129c:	01000804 	movi	r4,32
800912a0:	2089c83a 	sub	r4,r4,r2
800912a4:	2912983a 	sll	r9,r5,r4
800912a8:	3090d83a 	srl	r8,r6,r2
800912ac:	3108983a 	sll	r4,r6,r4
800912b0:	2884d83a 	srl	r2,r5,r2
800912b4:	4a12b03a 	or	r9,r9,r8
800912b8:	2008c03a 	cmpne	r4,r4,zero
800912bc:	4912b03a 	or	r9,r9,r4
800912c0:	003f4e06 	br	80090ffc <__subdf3+0x26c>
800912c4:	1c48b03a 	or	r4,r3,r17
800912c8:	20003c26 	beq	r4,zero,800913bc <__subdf3+0x62c>
800912cc:	0084303a 	nor	r2,zero,r2
800912d0:	1000381e 	bne	r2,zero,800913b4 <__subdf3+0x624>
800912d4:	3463c83a 	sub	r17,r6,r17
800912d8:	28c5c83a 	sub	r2,r5,r3
800912dc:	344d803a 	cmpltu	r6,r6,r17
800912e0:	1187c83a 	sub	r3,r2,r6
800912e4:	4821883a 	mov	r16,r9
800912e8:	3825883a 	mov	r18,r7
800912ec:	003f0606 	br	80090f08 <__subdf3+0x178>
800912f0:	2023883a 	mov	r17,r4
800912f4:	003f0906 	br	80090f1c <__subdf3+0x18c>
800912f8:	0101ffc4 	movi	r4,2047
800912fc:	813f3a1e 	bne	r16,r4,80090fe8 <__subdf3+0x258>
80091300:	003ec406 	br	80090e14 <__subdf3+0x84>
80091304:	0005883a 	mov	r2,zero
80091308:	003fb106 	br	800911d0 <__subdf3+0x440>
8009130c:	0005883a 	mov	r2,zero
80091310:	003fbc06 	br	80091204 <__subdf3+0x474>
80091314:	1c44b03a 	or	r2,r3,r17
80091318:	80008e1e 	bne	r16,zero,80091554 <__subdf3+0x7c4>
8009131c:	1000c826 	beq	r2,zero,80091640 <__subdf3+0x8b0>
80091320:	2984b03a 	or	r2,r5,r6
80091324:	103ebb26 	beq	r2,zero,80090e14 <__subdf3+0x84>
80091328:	8989883a 	add	r4,r17,r6
8009132c:	1945883a 	add	r2,r3,r5
80091330:	2447803a 	cmpltu	r3,r4,r17
80091334:	1887883a 	add	r3,r3,r2
80091338:	1880202c 	andhi	r2,r3,128
8009133c:	2023883a 	mov	r17,r4
80091340:	103f1626 	beq	r2,zero,80090f9c <__subdf3+0x20c>
80091344:	00bfe034 	movhi	r2,65408
80091348:	10bfffc4 	addi	r2,r2,-1
8009134c:	5021883a 	mov	r16,r10
80091350:	1886703a 	and	r3,r3,r2
80091354:	003eaf06 	br	80090e14 <__subdf3+0x84>
80091358:	3825883a 	mov	r18,r7
8009135c:	003f0f06 	br	80090f9c <__subdf3+0x20c>
80091360:	1c44b03a 	or	r2,r3,r17
80091364:	8000251e 	bne	r16,zero,800913fc <__subdf3+0x66c>
80091368:	1000661e 	bne	r2,zero,80091504 <__subdf3+0x774>
8009136c:	2990b03a 	or	r8,r5,r6
80091370:	40009626 	beq	r8,zero,800915cc <__subdf3+0x83c>
80091374:	2807883a 	mov	r3,r5
80091378:	3023883a 	mov	r17,r6
8009137c:	3825883a 	mov	r18,r7
80091380:	003ea406 	br	80090e14 <__subdf3+0x84>
80091384:	127ff804 	addi	r9,r2,-32
80091388:	01000804 	movi	r4,32
8009138c:	2a52d83a 	srl	r9,r5,r9
80091390:	11008c26 	beq	r2,r4,800915c4 <__subdf3+0x834>
80091394:	01001004 	movi	r4,64
80091398:	2085c83a 	sub	r2,r4,r2
8009139c:	2884983a 	sll	r2,r5,r2
800913a0:	118cb03a 	or	r6,r2,r6
800913a4:	300cc03a 	cmpne	r6,r6,zero
800913a8:	4992b03a 	or	r9,r9,r6
800913ac:	0005883a 	mov	r2,zero
800913b0:	003f1206 	br	80090ffc <__subdf3+0x26c>
800913b4:	0101ffc4 	movi	r4,2047
800913b8:	493f9c1e 	bne	r9,r4,8009122c <__subdf3+0x49c>
800913bc:	2807883a 	mov	r3,r5
800913c0:	3023883a 	mov	r17,r6
800913c4:	4821883a 	mov	r16,r9
800913c8:	3825883a 	mov	r18,r7
800913cc:	003e9106 	br	80090e14 <__subdf3+0x84>
800913d0:	80001f1e 	bne	r16,zero,80091450 <__subdf3+0x6c0>
800913d4:	1c48b03a 	or	r4,r3,r17
800913d8:	20005a26 	beq	r4,zero,80091544 <__subdf3+0x7b4>
800913dc:	0084303a 	nor	r2,zero,r2
800913e0:	1000561e 	bne	r2,zero,8009153c <__subdf3+0x7ac>
800913e4:	89a3883a 	add	r17,r17,r6
800913e8:	1945883a 	add	r2,r3,r5
800913ec:	898d803a 	cmpltu	r6,r17,r6
800913f0:	3087883a 	add	r3,r6,r2
800913f4:	4821883a 	mov	r16,r9
800913f8:	003f0506 	br	80091010 <__subdf3+0x280>
800913fc:	10002b1e 	bne	r2,zero,800914ac <__subdf3+0x71c>
80091400:	2984b03a 	or	r2,r5,r6
80091404:	10008026 	beq	r2,zero,80091608 <__subdf3+0x878>
80091408:	2807883a 	mov	r3,r5
8009140c:	3023883a 	mov	r17,r6
80091410:	3825883a 	mov	r18,r7
80091414:	0401ffc4 	movi	r16,2047
80091418:	003e7e06 	br	80090e14 <__subdf3+0x84>
8009141c:	3809883a 	mov	r4,r7
80091420:	0011883a 	mov	r8,zero
80091424:	0005883a 	mov	r2,zero
80091428:	003ee306 	br	80090fb8 <__subdf3+0x228>
8009142c:	1c62b03a 	or	r17,r3,r17
80091430:	8822c03a 	cmpne	r17,r17,zero
80091434:	0005883a 	mov	r2,zero
80091438:	003f8906 	br	80091260 <__subdf3+0x4d0>
8009143c:	3809883a 	mov	r4,r7
80091440:	4821883a 	mov	r16,r9
80091444:	0011883a 	mov	r8,zero
80091448:	0005883a 	mov	r2,zero
8009144c:	003eda06 	br	80090fb8 <__subdf3+0x228>
80091450:	0101ffc4 	movi	r4,2047
80091454:	49003b26 	beq	r9,r4,80091544 <__subdf3+0x7b4>
80091458:	0085c83a 	sub	r2,zero,r2
8009145c:	18c02034 	orhi	r3,r3,128
80091460:	01000e04 	movi	r4,56
80091464:	20806e16 	blt	r4,r2,80091620 <__subdf3+0x890>
80091468:	010007c4 	movi	r4,31
8009146c:	20807716 	blt	r4,r2,8009164c <__subdf3+0x8bc>
80091470:	01000804 	movi	r4,32
80091474:	2089c83a 	sub	r4,r4,r2
80091478:	1914983a 	sll	r10,r3,r4
8009147c:	8890d83a 	srl	r8,r17,r2
80091480:	8908983a 	sll	r4,r17,r4
80091484:	1884d83a 	srl	r2,r3,r2
80091488:	5222b03a 	or	r17,r10,r8
8009148c:	2006c03a 	cmpne	r3,r4,zero
80091490:	88e2b03a 	or	r17,r17,r3
80091494:	89a3883a 	add	r17,r17,r6
80091498:	1145883a 	add	r2,r2,r5
8009149c:	898d803a 	cmpltu	r6,r17,r6
800914a0:	3087883a 	add	r3,r6,r2
800914a4:	4821883a 	mov	r16,r9
800914a8:	003ed906 	br	80091010 <__subdf3+0x280>
800914ac:	2984b03a 	or	r2,r5,r6
800914b0:	10004226 	beq	r2,zero,800915bc <__subdf3+0x82c>
800914b4:	1808d0fa 	srli	r4,r3,3
800914b8:	8822d0fa 	srli	r17,r17,3
800914bc:	1806977a 	slli	r3,r3,29
800914c0:	2080022c 	andhi	r2,r4,8
800914c4:	1c62b03a 	or	r17,r3,r17
800914c8:	10000826 	beq	r2,zero,800914ec <__subdf3+0x75c>
800914cc:	2812d0fa 	srli	r9,r5,3
800914d0:	4880022c 	andhi	r2,r9,8
800914d4:	1000051e 	bne	r2,zero,800914ec <__subdf3+0x75c>
800914d8:	300cd0fa 	srli	r6,r6,3
800914dc:	2804977a 	slli	r2,r5,29
800914e0:	4809883a 	mov	r4,r9
800914e4:	3825883a 	mov	r18,r7
800914e8:	11a2b03a 	or	r17,r2,r6
800914ec:	8806d77a 	srli	r3,r17,29
800914f0:	200890fa 	slli	r4,r4,3
800914f4:	882290fa 	slli	r17,r17,3
800914f8:	0401ffc4 	movi	r16,2047
800914fc:	1906b03a 	or	r3,r3,r4
80091500:	003e4406 	br	80090e14 <__subdf3+0x84>
80091504:	2984b03a 	or	r2,r5,r6
80091508:	103e4226 	beq	r2,zero,80090e14 <__subdf3+0x84>
8009150c:	8989c83a 	sub	r4,r17,r6
80091510:	8911803a 	cmpltu	r8,r17,r4
80091514:	1945c83a 	sub	r2,r3,r5
80091518:	1205c83a 	sub	r2,r2,r8
8009151c:	1200202c 	andhi	r8,r2,128
80091520:	403e9a26 	beq	r8,zero,80090f8c <__subdf3+0x1fc>
80091524:	3463c83a 	sub	r17,r6,r17
80091528:	28c5c83a 	sub	r2,r5,r3
8009152c:	344d803a 	cmpltu	r6,r6,r17
80091530:	1187c83a 	sub	r3,r2,r6
80091534:	3825883a 	mov	r18,r7
80091538:	003e3606 	br	80090e14 <__subdf3+0x84>
8009153c:	0101ffc4 	movi	r4,2047
80091540:	493fc71e 	bne	r9,r4,80091460 <__subdf3+0x6d0>
80091544:	2807883a 	mov	r3,r5
80091548:	3023883a 	mov	r17,r6
8009154c:	4821883a 	mov	r16,r9
80091550:	003e3006 	br	80090e14 <__subdf3+0x84>
80091554:	10003626 	beq	r2,zero,80091630 <__subdf3+0x8a0>
80091558:	2984b03a 	or	r2,r5,r6
8009155c:	10001726 	beq	r2,zero,800915bc <__subdf3+0x82c>
80091560:	1808d0fa 	srli	r4,r3,3
80091564:	8822d0fa 	srli	r17,r17,3
80091568:	1806977a 	slli	r3,r3,29
8009156c:	2080022c 	andhi	r2,r4,8
80091570:	1c62b03a 	or	r17,r3,r17
80091574:	10000726 	beq	r2,zero,80091594 <__subdf3+0x804>
80091578:	2812d0fa 	srli	r9,r5,3
8009157c:	4880022c 	andhi	r2,r9,8
80091580:	1000041e 	bne	r2,zero,80091594 <__subdf3+0x804>
80091584:	300cd0fa 	srli	r6,r6,3
80091588:	2804977a 	slli	r2,r5,29
8009158c:	4809883a 	mov	r4,r9
80091590:	11a2b03a 	or	r17,r2,r6
80091594:	8806d77a 	srli	r3,r17,29
80091598:	200890fa 	slli	r4,r4,3
8009159c:	882290fa 	slli	r17,r17,3
800915a0:	3825883a 	mov	r18,r7
800915a4:	1906b03a 	or	r3,r3,r4
800915a8:	0401ffc4 	movi	r16,2047
800915ac:	003e1906 	br	80090e14 <__subdf3+0x84>
800915b0:	000b883a 	mov	r5,zero
800915b4:	0005883a 	mov	r2,zero
800915b8:	003e2e06 	br	80090e74 <__subdf3+0xe4>
800915bc:	0401ffc4 	movi	r16,2047
800915c0:	003e1406 	br	80090e14 <__subdf3+0x84>
800915c4:	0005883a 	mov	r2,zero
800915c8:	003f7506 	br	800913a0 <__subdf3+0x610>
800915cc:	0005883a 	mov	r2,zero
800915d0:	0009883a 	mov	r4,zero
800915d4:	003e7806 	br	80090fb8 <__subdf3+0x228>
800915d8:	123ff804 	addi	r8,r2,-32
800915dc:	01000804 	movi	r4,32
800915e0:	1a10d83a 	srl	r8,r3,r8
800915e4:	11002526 	beq	r2,r4,8009167c <__subdf3+0x8ec>
800915e8:	01001004 	movi	r4,64
800915ec:	2085c83a 	sub	r2,r4,r2
800915f0:	1884983a 	sll	r2,r3,r2
800915f4:	1444b03a 	or	r2,r2,r17
800915f8:	1004c03a 	cmpne	r2,r2,zero
800915fc:	40a2b03a 	or	r17,r8,r2
80091600:	0005883a 	mov	r2,zero
80091604:	003f1606 	br	80091260 <__subdf3+0x4d0>
80091608:	02000434 	movhi	r8,16
8009160c:	0009883a 	mov	r4,zero
80091610:	423fffc4 	addi	r8,r8,-1
80091614:	00bfffc4 	movi	r2,-1
80091618:	0401ffc4 	movi	r16,2047
8009161c:	003e6606 	br	80090fb8 <__subdf3+0x228>
80091620:	1c62b03a 	or	r17,r3,r17
80091624:	8822c03a 	cmpne	r17,r17,zero
80091628:	0005883a 	mov	r2,zero
8009162c:	003f9906 	br	80091494 <__subdf3+0x704>
80091630:	2807883a 	mov	r3,r5
80091634:	3023883a 	mov	r17,r6
80091638:	0401ffc4 	movi	r16,2047
8009163c:	003df506 	br	80090e14 <__subdf3+0x84>
80091640:	2807883a 	mov	r3,r5
80091644:	3023883a 	mov	r17,r6
80091648:	003df206 	br	80090e14 <__subdf3+0x84>
8009164c:	123ff804 	addi	r8,r2,-32
80091650:	01000804 	movi	r4,32
80091654:	1a10d83a 	srl	r8,r3,r8
80091658:	11000a26 	beq	r2,r4,80091684 <__subdf3+0x8f4>
8009165c:	01001004 	movi	r4,64
80091660:	2085c83a 	sub	r2,r4,r2
80091664:	1884983a 	sll	r2,r3,r2
80091668:	1444b03a 	or	r2,r2,r17
8009166c:	1004c03a 	cmpne	r2,r2,zero
80091670:	40a2b03a 	or	r17,r8,r2
80091674:	0005883a 	mov	r2,zero
80091678:	003f8606 	br	80091494 <__subdf3+0x704>
8009167c:	0005883a 	mov	r2,zero
80091680:	003fdc06 	br	800915f4 <__subdf3+0x864>
80091684:	0005883a 	mov	r2,zero
80091688:	003ff706 	br	80091668 <__subdf3+0x8d8>

8009168c <__fixdfsi>:
8009168c:	280cd53a 	srli	r6,r5,20
80091690:	00c00434 	movhi	r3,16
80091694:	18ffffc4 	addi	r3,r3,-1
80091698:	3181ffcc 	andi	r6,r6,2047
8009169c:	01c0ff84 	movi	r7,1022
800916a0:	28c6703a 	and	r3,r5,r3
800916a4:	280ad7fa 	srli	r5,r5,31
800916a8:	3980120e 	bge	r7,r6,800916f4 <__fixdfsi+0x68>
800916ac:	00810744 	movi	r2,1053
800916b0:	11800c16 	blt	r2,r6,800916e4 <__fixdfsi+0x58>
800916b4:	00810cc4 	movi	r2,1075
800916b8:	1185c83a 	sub	r2,r2,r6
800916bc:	01c007c4 	movi	r7,31
800916c0:	18c00434 	orhi	r3,r3,16
800916c4:	38800d16 	blt	r7,r2,800916fc <__fixdfsi+0x70>
800916c8:	31befb44 	addi	r6,r6,-1043
800916cc:	2084d83a 	srl	r2,r4,r2
800916d0:	1986983a 	sll	r3,r3,r6
800916d4:	1884b03a 	or	r2,r3,r2
800916d8:	28000726 	beq	r5,zero,800916f8 <__fixdfsi+0x6c>
800916dc:	0085c83a 	sub	r2,zero,r2
800916e0:	f800283a 	ret
800916e4:	00a00034 	movhi	r2,32768
800916e8:	10bfffc4 	addi	r2,r2,-1
800916ec:	2885883a 	add	r2,r5,r2
800916f0:	f800283a 	ret
800916f4:	0005883a 	mov	r2,zero
800916f8:	f800283a 	ret
800916fc:	008104c4 	movi	r2,1043
80091700:	1185c83a 	sub	r2,r2,r6
80091704:	1884d83a 	srl	r2,r3,r2
80091708:	003ff306 	br	800916d8 <__fixdfsi+0x4c>

8009170c <__floatsidf>:
8009170c:	defffd04 	addi	sp,sp,-12
80091710:	dfc00215 	stw	ra,8(sp)
80091714:	dc400115 	stw	r17,4(sp)
80091718:	dc000015 	stw	r16,0(sp)
8009171c:	20002b26 	beq	r4,zero,800917cc <__floatsidf+0xc0>
80091720:	2023883a 	mov	r17,r4
80091724:	2020d7fa 	srli	r16,r4,31
80091728:	20002d16 	blt	r4,zero,800917e0 <__floatsidf+0xd4>
8009172c:	8809883a 	mov	r4,r17
80091730:	0081c280 	call	80081c28 <__clzsi2>
80091734:	01410784 	movi	r5,1054
80091738:	288bc83a 	sub	r5,r5,r2
8009173c:	01010cc4 	movi	r4,1075
80091740:	2149c83a 	sub	r4,r4,r5
80091744:	00c007c4 	movi	r3,31
80091748:	1900160e 	bge	r3,r4,800917a4 <__floatsidf+0x98>
8009174c:	00c104c4 	movi	r3,1043
80091750:	1947c83a 	sub	r3,r3,r5
80091754:	88c6983a 	sll	r3,r17,r3
80091758:	00800434 	movhi	r2,16
8009175c:	10bfffc4 	addi	r2,r2,-1
80091760:	1886703a 	and	r3,r3,r2
80091764:	2941ffcc 	andi	r5,r5,2047
80091768:	800d883a 	mov	r6,r16
8009176c:	0005883a 	mov	r2,zero
80091770:	280a953a 	slli	r5,r5,20
80091774:	31803fcc 	andi	r6,r6,255
80091778:	01000434 	movhi	r4,16
8009177c:	300c97fa 	slli	r6,r6,31
80091780:	213fffc4 	addi	r4,r4,-1
80091784:	1906703a 	and	r3,r3,r4
80091788:	1946b03a 	or	r3,r3,r5
8009178c:	1986b03a 	or	r3,r3,r6
80091790:	dfc00217 	ldw	ra,8(sp)
80091794:	dc400117 	ldw	r17,4(sp)
80091798:	dc000017 	ldw	r16,0(sp)
8009179c:	dec00304 	addi	sp,sp,12
800917a0:	f800283a 	ret
800917a4:	00c002c4 	movi	r3,11
800917a8:	1887c83a 	sub	r3,r3,r2
800917ac:	88c6d83a 	srl	r3,r17,r3
800917b0:	8904983a 	sll	r2,r17,r4
800917b4:	01000434 	movhi	r4,16
800917b8:	213fffc4 	addi	r4,r4,-1
800917bc:	2941ffcc 	andi	r5,r5,2047
800917c0:	1906703a 	and	r3,r3,r4
800917c4:	800d883a 	mov	r6,r16
800917c8:	003fe906 	br	80091770 <__floatsidf+0x64>
800917cc:	000d883a 	mov	r6,zero
800917d0:	000b883a 	mov	r5,zero
800917d4:	0007883a 	mov	r3,zero
800917d8:	0005883a 	mov	r2,zero
800917dc:	003fe406 	br	80091770 <__floatsidf+0x64>
800917e0:	0123c83a 	sub	r17,zero,r4
800917e4:	003fd106 	br	8009172c <__floatsidf+0x20>

800917e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
800917e8:	defffe04 	addi	sp,sp,-8
800917ec:	dfc00115 	stw	ra,4(sp)
800917f0:	df000015 	stw	fp,0(sp)
800917f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
800917f8:	d0a01717 	ldw	r2,-32676(gp)
800917fc:	10000326 	beq	r2,zero,8009180c <alt_get_errno+0x24>
80091800:	d0a01717 	ldw	r2,-32676(gp)
80091804:	103ee83a 	callr	r2
80091808:	00000106 	br	80091810 <alt_get_errno+0x28>
8009180c:	d0a74504 	addi	r2,gp,-25324
}
80091810:	e037883a 	mov	sp,fp
80091814:	dfc00117 	ldw	ra,4(sp)
80091818:	df000017 	ldw	fp,0(sp)
8009181c:	dec00204 	addi	sp,sp,8
80091820:	f800283a 	ret

80091824 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
80091824:	defffb04 	addi	sp,sp,-20
80091828:	dfc00415 	stw	ra,16(sp)
8009182c:	df000315 	stw	fp,12(sp)
80091830:	df000304 	addi	fp,sp,12
80091834:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
80091838:	e0bfff17 	ldw	r2,-4(fp)
8009183c:	10000616 	blt	r2,zero,80091858 <close+0x34>
80091840:	e0bfff17 	ldw	r2,-4(fp)
80091844:	10c00324 	muli	r3,r2,12
80091848:	00a00274 	movhi	r2,32777
8009184c:	109dd104 	addi	r2,r2,30532
80091850:	1885883a 	add	r2,r3,r2
80091854:	00000106 	br	8009185c <close+0x38>
80091858:	0005883a 	mov	r2,zero
8009185c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
80091860:	e0bffd17 	ldw	r2,-12(fp)
80091864:	10001926 	beq	r2,zero,800918cc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
80091868:	e0bffd17 	ldw	r2,-12(fp)
8009186c:	10800017 	ldw	r2,0(r2)
80091870:	10800417 	ldw	r2,16(r2)
80091874:	10000626 	beq	r2,zero,80091890 <close+0x6c>
80091878:	e0bffd17 	ldw	r2,-12(fp)
8009187c:	10800017 	ldw	r2,0(r2)
80091880:	10800417 	ldw	r2,16(r2)
80091884:	e13ffd17 	ldw	r4,-12(fp)
80091888:	103ee83a 	callr	r2
8009188c:	00000106 	br	80091894 <close+0x70>
80091890:	0005883a 	mov	r2,zero
80091894:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
80091898:	e13fff17 	ldw	r4,-4(fp)
8009189c:	00921840 	call	80092184 <alt_release_fd>
    if (rval < 0)
800918a0:	e0bffe17 	ldw	r2,-8(fp)
800918a4:	1000070e 	bge	r2,zero,800918c4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
800918a8:	00917e80 	call	800917e8 <alt_get_errno>
800918ac:	1007883a 	mov	r3,r2
800918b0:	e0bffe17 	ldw	r2,-8(fp)
800918b4:	0085c83a 	sub	r2,zero,r2
800918b8:	18800015 	stw	r2,0(r3)
      return -1;
800918bc:	00bfffc4 	movi	r2,-1
800918c0:	00000706 	br	800918e0 <close+0xbc>
    }
    return 0;
800918c4:	0005883a 	mov	r2,zero
800918c8:	00000506 	br	800918e0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
800918cc:	00917e80 	call	800917e8 <alt_get_errno>
800918d0:	1007883a 	mov	r3,r2
800918d4:	00801444 	movi	r2,81
800918d8:	18800015 	stw	r2,0(r3)
    return -1;
800918dc:	00bfffc4 	movi	r2,-1
  }
}
800918e0:	e037883a 	mov	sp,fp
800918e4:	dfc00117 	ldw	ra,4(sp)
800918e8:	df000017 	ldw	fp,0(sp)
800918ec:	dec00204 	addi	sp,sp,8
800918f0:	f800283a 	ret

800918f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
800918f4:	defffc04 	addi	sp,sp,-16
800918f8:	df000315 	stw	fp,12(sp)
800918fc:	df000304 	addi	fp,sp,12
80091900:	e13ffd15 	stw	r4,-12(fp)
80091904:	e17ffe15 	stw	r5,-8(fp)
80091908:	e1bfff15 	stw	r6,-4(fp)
  return len;
8009190c:	e0bfff17 	ldw	r2,-4(fp)
}
80091910:	e037883a 	mov	sp,fp
80091914:	df000017 	ldw	fp,0(sp)
80091918:	dec00104 	addi	sp,sp,4
8009191c:	f800283a 	ret

80091920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80091920:	defffe04 	addi	sp,sp,-8
80091924:	dfc00115 	stw	ra,4(sp)
80091928:	df000015 	stw	fp,0(sp)
8009192c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80091930:	d0a01717 	ldw	r2,-32676(gp)
80091934:	10000326 	beq	r2,zero,80091944 <alt_get_errno+0x24>
80091938:	d0a01717 	ldw	r2,-32676(gp)
8009193c:	103ee83a 	callr	r2
80091940:	00000106 	br	80091948 <alt_get_errno+0x28>
80091944:	d0a74504 	addi	r2,gp,-25324
}
80091948:	e037883a 	mov	sp,fp
8009194c:	dfc00117 	ldw	ra,4(sp)
80091950:	df000017 	ldw	fp,0(sp)
80091954:	dec00204 	addi	sp,sp,8
80091958:	f800283a 	ret

8009195c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8009195c:	defffb04 	addi	sp,sp,-20
80091960:	dfc00415 	stw	ra,16(sp)
80091964:	df000315 	stw	fp,12(sp)
80091968:	df000304 	addi	fp,sp,12
8009196c:	e13ffe15 	stw	r4,-8(fp)
80091970:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80091974:	e0bffe17 	ldw	r2,-8(fp)
80091978:	10000616 	blt	r2,zero,80091994 <fstat+0x38>
8009197c:	e0bffe17 	ldw	r2,-8(fp)
80091980:	10c00324 	muli	r3,r2,12
80091984:	00a00274 	movhi	r2,32777
80091988:	109dd104 	addi	r2,r2,30532
8009198c:	1885883a 	add	r2,r3,r2
80091990:	00000106 	br	80091998 <fstat+0x3c>
80091994:	0005883a 	mov	r2,zero
80091998:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8009199c:	e0bffd17 	ldw	r2,-12(fp)
800919a0:	10001026 	beq	r2,zero,800919e4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
800919a4:	e0bffd17 	ldw	r2,-12(fp)
800919a8:	10800017 	ldw	r2,0(r2)
800919ac:	10800817 	ldw	r2,32(r2)
800919b0:	10000726 	beq	r2,zero,800919d0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
800919b4:	e0bffd17 	ldw	r2,-12(fp)
800919b8:	10800017 	ldw	r2,0(r2)
800919bc:	10800817 	ldw	r2,32(r2)
800919c0:	e17fff17 	ldw	r5,-4(fp)
800919c4:	e13ffd17 	ldw	r4,-12(fp)
800919c8:	103ee83a 	callr	r2
800919cc:	00000a06 	br	800919f8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
800919d0:	e0bfff17 	ldw	r2,-4(fp)
800919d4:	00c80004 	movi	r3,8192
800919d8:	10c00115 	stw	r3,4(r2)
      return 0;
800919dc:	0005883a 	mov	r2,zero
800919e0:	00000506 	br	800919f8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
800919e4:	00919200 	call	80091920 <alt_get_errno>
800919e8:	1007883a 	mov	r3,r2
800919ec:	00801444 	movi	r2,81
800919f0:	18800015 	stw	r2,0(r3)
    return -1;
800919f4:	00bfffc4 	movi	r2,-1
  }
}
800919f8:	e037883a 	mov	sp,fp
800919fc:	dfc00117 	ldw	ra,4(sp)
80091a00:	df000017 	ldw	fp,0(sp)
80091a04:	dec00204 	addi	sp,sp,8
80091a08:	f800283a 	ret

80091a0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80091a0c:	defff904 	addi	sp,sp,-28
80091a10:	dfc00615 	stw	ra,24(sp)
80091a14:	df000515 	stw	fp,20(sp)
80091a18:	df000504 	addi	fp,sp,20
80091a1c:	e13ffc15 	stw	r4,-16(fp)
80091a20:	e17ffd15 	stw	r5,-12(fp)
80091a24:	e1bffe15 	stw	r6,-8(fp)
80091a28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
80091a2c:	e0800217 	ldw	r2,8(fp)
80091a30:	d8800015 	stw	r2,0(sp)
80091a34:	e1ffff17 	ldw	r7,-4(fp)
80091a38:	e1bffe17 	ldw	r6,-8(fp)
80091a3c:	e17ffd17 	ldw	r5,-12(fp)
80091a40:	e13ffc17 	ldw	r4,-16(fp)
80091a44:	0091bbc0 	call	80091bbc <alt_iic_isr_register>
}  
80091a48:	e037883a 	mov	sp,fp
80091a4c:	dfc00117 	ldw	ra,4(sp)
80091a50:	df000017 	ldw	fp,0(sp)
80091a54:	dec00204 	addi	sp,sp,8
80091a58:	f800283a 	ret

80091a5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
80091a5c:	defff904 	addi	sp,sp,-28
80091a60:	df000615 	stw	fp,24(sp)
80091a64:	df000604 	addi	fp,sp,24
80091a68:	e13ffe15 	stw	r4,-8(fp)
80091a6c:	e17fff15 	stw	r5,-4(fp)
80091a70:	e0bfff17 	ldw	r2,-4(fp)
80091a74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80091a78:	0005303a 	rdctl	r2,status
80091a7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80091a80:	e0fffb17 	ldw	r3,-20(fp)
80091a84:	00bfff84 	movi	r2,-2
80091a88:	1884703a 	and	r2,r3,r2
80091a8c:	1001703a 	wrctl	status,r2
  
  return context;
80091a90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80091a94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
80091a98:	00c00044 	movi	r3,1
80091a9c:	e0bffa17 	ldw	r2,-24(fp)
80091aa0:	1884983a 	sll	r2,r3,r2
80091aa4:	1007883a 	mov	r3,r2
80091aa8:	d0a74617 	ldw	r2,-25320(gp)
80091aac:	1884b03a 	or	r2,r3,r2
80091ab0:	d0a74615 	stw	r2,-25320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80091ab4:	d0a74617 	ldw	r2,-25320(gp)
80091ab8:	100170fa 	wrctl	ienable,r2
80091abc:	e0bffc17 	ldw	r2,-16(fp)
80091ac0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80091ac4:	e0bffd17 	ldw	r2,-12(fp)
80091ac8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80091acc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
80091ad0:	0001883a 	nop
}
80091ad4:	e037883a 	mov	sp,fp
80091ad8:	df000017 	ldw	fp,0(sp)
80091adc:	dec00104 	addi	sp,sp,4
80091ae0:	f800283a 	ret

80091ae4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
80091ae4:	defff904 	addi	sp,sp,-28
80091ae8:	df000615 	stw	fp,24(sp)
80091aec:	df000604 	addi	fp,sp,24
80091af0:	e13ffe15 	stw	r4,-8(fp)
80091af4:	e17fff15 	stw	r5,-4(fp)
80091af8:	e0bfff17 	ldw	r2,-4(fp)
80091afc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80091b00:	0005303a 	rdctl	r2,status
80091b04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80091b08:	e0fffb17 	ldw	r3,-20(fp)
80091b0c:	00bfff84 	movi	r2,-2
80091b10:	1884703a 	and	r2,r3,r2
80091b14:	1001703a 	wrctl	status,r2
  
  return context;
80091b18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80091b1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
80091b20:	00c00044 	movi	r3,1
80091b24:	e0bffa17 	ldw	r2,-24(fp)
80091b28:	1884983a 	sll	r2,r3,r2
80091b2c:	0084303a 	nor	r2,zero,r2
80091b30:	1007883a 	mov	r3,r2
80091b34:	d0a74617 	ldw	r2,-25320(gp)
80091b38:	1884703a 	and	r2,r3,r2
80091b3c:	d0a74615 	stw	r2,-25320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80091b40:	d0a74617 	ldw	r2,-25320(gp)
80091b44:	100170fa 	wrctl	ienable,r2
80091b48:	e0bffc17 	ldw	r2,-16(fp)
80091b4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80091b50:	e0bffd17 	ldw	r2,-12(fp)
80091b54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80091b58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
80091b5c:	0001883a 	nop
}
80091b60:	e037883a 	mov	sp,fp
80091b64:	df000017 	ldw	fp,0(sp)
80091b68:	dec00104 	addi	sp,sp,4
80091b6c:	f800283a 	ret

80091b70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
80091b70:	defffc04 	addi	sp,sp,-16
80091b74:	df000315 	stw	fp,12(sp)
80091b78:	df000304 	addi	fp,sp,12
80091b7c:	e13ffe15 	stw	r4,-8(fp)
80091b80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
80091b84:	000530fa 	rdctl	r2,ienable
80091b88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
80091b8c:	00c00044 	movi	r3,1
80091b90:	e0bfff17 	ldw	r2,-4(fp)
80091b94:	1884983a 	sll	r2,r3,r2
80091b98:	1007883a 	mov	r3,r2
80091b9c:	e0bffd17 	ldw	r2,-12(fp)
80091ba0:	1884703a 	and	r2,r3,r2
80091ba4:	1004c03a 	cmpne	r2,r2,zero
80091ba8:	10803fcc 	andi	r2,r2,255
}
80091bac:	e037883a 	mov	sp,fp
80091bb0:	df000017 	ldw	fp,0(sp)
80091bb4:	dec00104 	addi	sp,sp,4
80091bb8:	f800283a 	ret

80091bbc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80091bbc:	defff504 	addi	sp,sp,-44
80091bc0:	dfc00a15 	stw	ra,40(sp)
80091bc4:	df000915 	stw	fp,36(sp)
80091bc8:	df000904 	addi	fp,sp,36
80091bcc:	e13ffc15 	stw	r4,-16(fp)
80091bd0:	e17ffd15 	stw	r5,-12(fp)
80091bd4:	e1bffe15 	stw	r6,-8(fp)
80091bd8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
80091bdc:	00bffa84 	movi	r2,-22
80091be0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
80091be4:	e0bffd17 	ldw	r2,-12(fp)
80091be8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
80091bec:	e0bff817 	ldw	r2,-32(fp)
80091bf0:	10800808 	cmpgei	r2,r2,32
80091bf4:	1000271e 	bne	r2,zero,80091c94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80091bf8:	0005303a 	rdctl	r2,status
80091bfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80091c00:	e0fffb17 	ldw	r3,-20(fp)
80091c04:	00bfff84 	movi	r2,-2
80091c08:	1884703a 	and	r2,r3,r2
80091c0c:	1001703a 	wrctl	status,r2
  
  return context;
80091c10:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
80091c14:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
80091c18:	00a002b4 	movhi	r2,32778
80091c1c:	10aa4404 	addi	r2,r2,-22256
80091c20:	e0fff817 	ldw	r3,-32(fp)
80091c24:	180690fa 	slli	r3,r3,3
80091c28:	10c5883a 	add	r2,r2,r3
80091c2c:	e0fffe17 	ldw	r3,-8(fp)
80091c30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
80091c34:	00a002b4 	movhi	r2,32778
80091c38:	10aa4404 	addi	r2,r2,-22256
80091c3c:	e0fff817 	ldw	r3,-32(fp)
80091c40:	180690fa 	slli	r3,r3,3
80091c44:	10c5883a 	add	r2,r2,r3
80091c48:	10800104 	addi	r2,r2,4
80091c4c:	e0ffff17 	ldw	r3,-4(fp)
80091c50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
80091c54:	e0bffe17 	ldw	r2,-8(fp)
80091c58:	10000526 	beq	r2,zero,80091c70 <alt_iic_isr_register+0xb4>
80091c5c:	e0bff817 	ldw	r2,-32(fp)
80091c60:	100b883a 	mov	r5,r2
80091c64:	e13ffc17 	ldw	r4,-16(fp)
80091c68:	0091a5c0 	call	80091a5c <alt_ic_irq_enable>
80091c6c:	00000406 	br	80091c80 <alt_iic_isr_register+0xc4>
80091c70:	e0bff817 	ldw	r2,-32(fp)
80091c74:	100b883a 	mov	r5,r2
80091c78:	e13ffc17 	ldw	r4,-16(fp)
80091c7c:	0091ae40 	call	80091ae4 <alt_ic_irq_disable>
80091c80:	e0bff715 	stw	r2,-36(fp)
80091c84:	e0bffa17 	ldw	r2,-24(fp)
80091c88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80091c8c:	e0bff917 	ldw	r2,-28(fp)
80091c90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
80091c94:	e0bff717 	ldw	r2,-36(fp)
}
80091c98:	e037883a 	mov	sp,fp
80091c9c:	dfc00117 	ldw	ra,4(sp)
80091ca0:	df000017 	ldw	fp,0(sp)
80091ca4:	dec00204 	addi	sp,sp,8
80091ca8:	f800283a 	ret

80091cac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80091cac:	defffe04 	addi	sp,sp,-8
80091cb0:	dfc00115 	stw	ra,4(sp)
80091cb4:	df000015 	stw	fp,0(sp)
80091cb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80091cbc:	d0a01717 	ldw	r2,-32676(gp)
80091cc0:	10000326 	beq	r2,zero,80091cd0 <alt_get_errno+0x24>
80091cc4:	d0a01717 	ldw	r2,-32676(gp)
80091cc8:	103ee83a 	callr	r2
80091ccc:	00000106 	br	80091cd4 <alt_get_errno+0x28>
80091cd0:	d0a74504 	addi	r2,gp,-25324
}
80091cd4:	e037883a 	mov	sp,fp
80091cd8:	dfc00117 	ldw	ra,4(sp)
80091cdc:	df000017 	ldw	fp,0(sp)
80091ce0:	dec00204 	addi	sp,sp,8
80091ce4:	f800283a 	ret

80091ce8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
80091ce8:	deffed04 	addi	sp,sp,-76
80091cec:	dfc01215 	stw	ra,72(sp)
80091cf0:	df001115 	stw	fp,68(sp)
80091cf4:	df001104 	addi	fp,sp,68
80091cf8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80091cfc:	e0bfff17 	ldw	r2,-4(fp)
80091d00:	10000616 	blt	r2,zero,80091d1c <isatty+0x34>
80091d04:	e0bfff17 	ldw	r2,-4(fp)
80091d08:	10c00324 	muli	r3,r2,12
80091d0c:	00a00274 	movhi	r2,32777
80091d10:	109dd104 	addi	r2,r2,30532
80091d14:	1885883a 	add	r2,r3,r2
80091d18:	00000106 	br	80091d20 <isatty+0x38>
80091d1c:	0005883a 	mov	r2,zero
80091d20:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
80091d24:	e0bfef17 	ldw	r2,-68(fp)
80091d28:	10000e26 	beq	r2,zero,80091d64 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
80091d2c:	e0bfef17 	ldw	r2,-68(fp)
80091d30:	10800017 	ldw	r2,0(r2)
80091d34:	10800817 	ldw	r2,32(r2)
80091d38:	1000021e 	bne	r2,zero,80091d44 <isatty+0x5c>
    {
      return 1;
80091d3c:	00800044 	movi	r2,1
80091d40:	00000d06 	br	80091d78 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
80091d44:	e0bff004 	addi	r2,fp,-64
80091d48:	100b883a 	mov	r5,r2
80091d4c:	e13fff17 	ldw	r4,-4(fp)
80091d50:	009195c0 	call	8009195c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
80091d54:	e0bff117 	ldw	r2,-60(fp)
80091d58:	10880020 	cmpeqi	r2,r2,8192
80091d5c:	10803fcc 	andi	r2,r2,255
80091d60:	00000506 	br	80091d78 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80091d64:	0091cac0 	call	80091cac <alt_get_errno>
80091d68:	1007883a 	mov	r3,r2
80091d6c:	00801444 	movi	r2,81
80091d70:	18800015 	stw	r2,0(r3)
    return 0;
80091d74:	0005883a 	mov	r2,zero
  }
}
80091d78:	e037883a 	mov	sp,fp
80091d7c:	dfc00117 	ldw	ra,4(sp)
80091d80:	df000017 	ldw	fp,0(sp)
80091d84:	dec00204 	addi	sp,sp,8
80091d88:	f800283a 	ret

80091d8c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
80091d8c:	defffc04 	addi	sp,sp,-16
80091d90:	df000315 	stw	fp,12(sp)
80091d94:	df000304 	addi	fp,sp,12
80091d98:	e13ffd15 	stw	r4,-12(fp)
80091d9c:	e17ffe15 	stw	r5,-8(fp)
80091da0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
80091da4:	e0fffe17 	ldw	r3,-8(fp)
80091da8:	e0bffd17 	ldw	r2,-12(fp)
80091dac:	18800c26 	beq	r3,r2,80091de0 <alt_load_section+0x54>
  {
    while( to != end )
80091db0:	00000806 	br	80091dd4 <alt_load_section+0x48>
    {
      *to++ = *from++;
80091db4:	e0bffe17 	ldw	r2,-8(fp)
80091db8:	10c00104 	addi	r3,r2,4
80091dbc:	e0fffe15 	stw	r3,-8(fp)
80091dc0:	e0fffd17 	ldw	r3,-12(fp)
80091dc4:	19000104 	addi	r4,r3,4
80091dc8:	e13ffd15 	stw	r4,-12(fp)
80091dcc:	18c00017 	ldw	r3,0(r3)
80091dd0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
80091dd4:	e0fffe17 	ldw	r3,-8(fp)
80091dd8:	e0bfff17 	ldw	r2,-4(fp)
80091ddc:	18bff51e 	bne	r3,r2,80091db4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
80091de0:	0001883a 	nop
80091de4:	e037883a 	mov	sp,fp
80091de8:	df000017 	ldw	fp,0(sp)
80091dec:	dec00104 	addi	sp,sp,4
80091df0:	f800283a 	ret

80091df4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
80091df4:	defffe04 	addi	sp,sp,-8
80091df8:	dfc00115 	stw	ra,4(sp)
80091dfc:	df000015 	stw	fp,0(sp)
80091e00:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
80091e04:	01a002b4 	movhi	r6,32778
80091e08:	31a2af04 	addi	r6,r6,-30020
80091e0c:	01600274 	movhi	r5,32777
80091e10:	295b9b04 	addi	r5,r5,28268
80091e14:	012002b4 	movhi	r4,32778
80091e18:	2122af04 	addi	r4,r4,-30020
80091e1c:	0091d8c0 	call	80091d8c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
80091e20:	01a00234 	movhi	r6,32776
80091e24:	31809104 	addi	r6,r6,580
80091e28:	01600234 	movhi	r5,32776
80091e2c:	29400804 	addi	r5,r5,32
80091e30:	01200234 	movhi	r4,32776
80091e34:	21000804 	addi	r4,r4,32
80091e38:	0091d8c0 	call	80091d8c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
80091e3c:	01a00274 	movhi	r6,32777
80091e40:	319b9b04 	addi	r6,r6,28268
80091e44:	01600274 	movhi	r5,32777
80091e48:	2958ef04 	addi	r5,r5,25532
80091e4c:	01200274 	movhi	r4,32777
80091e50:	2118ef04 	addi	r4,r4,25532
80091e54:	0091d8c0 	call	80091d8c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
80091e58:	009531c0 	call	8009531c <alt_dcache_flush_all>
  alt_icache_flush_all();
80091e5c:	00955940 	call	80095594 <alt_icache_flush_all>
}
80091e60:	0001883a 	nop
80091e64:	e037883a 	mov	sp,fp
80091e68:	dfc00117 	ldw	ra,4(sp)
80091e6c:	df000017 	ldw	fp,0(sp)
80091e70:	dec00204 	addi	sp,sp,8
80091e74:	f800283a 	ret

80091e78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80091e78:	defffe04 	addi	sp,sp,-8
80091e7c:	dfc00115 	stw	ra,4(sp)
80091e80:	df000015 	stw	fp,0(sp)
80091e84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80091e88:	d0a01717 	ldw	r2,-32676(gp)
80091e8c:	10000326 	beq	r2,zero,80091e9c <alt_get_errno+0x24>
80091e90:	d0a01717 	ldw	r2,-32676(gp)
80091e94:	103ee83a 	callr	r2
80091e98:	00000106 	br	80091ea0 <alt_get_errno+0x28>
80091e9c:	d0a74504 	addi	r2,gp,-25324
}
80091ea0:	e037883a 	mov	sp,fp
80091ea4:	dfc00117 	ldw	ra,4(sp)
80091ea8:	df000017 	ldw	fp,0(sp)
80091eac:	dec00204 	addi	sp,sp,8
80091eb0:	f800283a 	ret

80091eb4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
80091eb4:	defff904 	addi	sp,sp,-28
80091eb8:	dfc00615 	stw	ra,24(sp)
80091ebc:	df000515 	stw	fp,20(sp)
80091ec0:	df000504 	addi	fp,sp,20
80091ec4:	e13ffd15 	stw	r4,-12(fp)
80091ec8:	e17ffe15 	stw	r5,-8(fp)
80091ecc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
80091ed0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80091ed4:	e0bffd17 	ldw	r2,-12(fp)
80091ed8:	10000616 	blt	r2,zero,80091ef4 <lseek+0x40>
80091edc:	e0bffd17 	ldw	r2,-12(fp)
80091ee0:	10c00324 	muli	r3,r2,12
80091ee4:	00a00274 	movhi	r2,32777
80091ee8:	109dd104 	addi	r2,r2,30532
80091eec:	1885883a 	add	r2,r3,r2
80091ef0:	00000106 	br	80091ef8 <lseek+0x44>
80091ef4:	0005883a 	mov	r2,zero
80091ef8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
80091efc:	e0bffc17 	ldw	r2,-16(fp)
80091f00:	10001026 	beq	r2,zero,80091f44 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
80091f04:	e0bffc17 	ldw	r2,-16(fp)
80091f08:	10800017 	ldw	r2,0(r2)
80091f0c:	10800717 	ldw	r2,28(r2)
80091f10:	10000926 	beq	r2,zero,80091f38 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
80091f14:	e0bffc17 	ldw	r2,-16(fp)
80091f18:	10800017 	ldw	r2,0(r2)
80091f1c:	10800717 	ldw	r2,28(r2)
80091f20:	e1bfff17 	ldw	r6,-4(fp)
80091f24:	e17ffe17 	ldw	r5,-8(fp)
80091f28:	e13ffc17 	ldw	r4,-16(fp)
80091f2c:	103ee83a 	callr	r2
80091f30:	e0bffb15 	stw	r2,-20(fp)
80091f34:	00000506 	br	80091f4c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
80091f38:	00bfde84 	movi	r2,-134
80091f3c:	e0bffb15 	stw	r2,-20(fp)
80091f40:	00000206 	br	80091f4c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
80091f44:	00bfebc4 	movi	r2,-81
80091f48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
80091f4c:	e0bffb17 	ldw	r2,-20(fp)
80091f50:	1000070e 	bge	r2,zero,80091f70 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
80091f54:	0091e780 	call	80091e78 <alt_get_errno>
80091f58:	1007883a 	mov	r3,r2
80091f5c:	e0bffb17 	ldw	r2,-20(fp)
80091f60:	0085c83a 	sub	r2,zero,r2
80091f64:	18800015 	stw	r2,0(r3)
    rc = -1;
80091f68:	00bfffc4 	movi	r2,-1
80091f6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
80091f70:	e0bffb17 	ldw	r2,-20(fp)
}
80091f74:	e037883a 	mov	sp,fp
80091f78:	dfc00117 	ldw	ra,4(sp)
80091f7c:	df000017 	ldw	fp,0(sp)
80091f80:	dec00204 	addi	sp,sp,8
80091f84:	f800283a 	ret

80091f88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80091f88:	defffd04 	addi	sp,sp,-12
80091f8c:	dfc00215 	stw	ra,8(sp)
80091f90:	df000115 	stw	fp,4(sp)
80091f94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
80091f98:	0009883a 	mov	r4,zero
80091f9c:	00925a40 	call	800925a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
80091fa0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
80091fa4:	00925dc0 	call	800925dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
80091fa8:	01a00274 	movhi	r6,32777
80091fac:	319af404 	addi	r6,r6,27600
80091fb0:	01600274 	movhi	r5,32777
80091fb4:	295af404 	addi	r5,r5,27600
80091fb8:	01200274 	movhi	r4,32777
80091fbc:	211af404 	addi	r4,r4,27600
80091fc0:	00957280 	call	80095728 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
80091fc4:	00954440 	call	80095444 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
80091fc8:	01200274 	movhi	r4,32777
80091fcc:	21152904 	addi	r4,r4,21668
80091fd0:	0095ec00 	call	80095ec0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
80091fd4:	d0a74717 	ldw	r2,-25316(gp)
80091fd8:	d0e74817 	ldw	r3,-25312(gp)
80091fdc:	d1274917 	ldw	r4,-25308(gp)
80091fe0:	200d883a 	mov	r6,r4
80091fe4:	180b883a 	mov	r5,r3
80091fe8:	1009883a 	mov	r4,r2
80091fec:	008037c0 	call	8008037c <main>
80091ff0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
80091ff4:	01000044 	movi	r4,1
80091ff8:	00918240 	call	80091824 <close>
  exit (result);
80091ffc:	e13fff17 	ldw	r4,-4(fp)
80092000:	0095ed40 	call	80095ed4 <exit>

80092004 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
80092004:	defffe04 	addi	sp,sp,-8
80092008:	df000115 	stw	fp,4(sp)
8009200c:	df000104 	addi	fp,sp,4
80092010:	e13fff15 	stw	r4,-4(fp)
}
80092014:	0001883a 	nop
80092018:	e037883a 	mov	sp,fp
8009201c:	df000017 	ldw	fp,0(sp)
80092020:	dec00104 	addi	sp,sp,4
80092024:	f800283a 	ret

80092028 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80092028:	defffe04 	addi	sp,sp,-8
8009202c:	df000115 	stw	fp,4(sp)
80092030:	df000104 	addi	fp,sp,4
80092034:	e13fff15 	stw	r4,-4(fp)
}
80092038:	0001883a 	nop
8009203c:	e037883a 	mov	sp,fp
80092040:	df000017 	ldw	fp,0(sp)
80092044:	dec00104 	addi	sp,sp,4
80092048:	f800283a 	ret

8009204c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8009204c:	defffe04 	addi	sp,sp,-8
80092050:	dfc00115 	stw	ra,4(sp)
80092054:	df000015 	stw	fp,0(sp)
80092058:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8009205c:	d0a01717 	ldw	r2,-32676(gp)
80092060:	10000326 	beq	r2,zero,80092070 <alt_get_errno+0x24>
80092064:	d0a01717 	ldw	r2,-32676(gp)
80092068:	103ee83a 	callr	r2
8009206c:	00000106 	br	80092074 <alt_get_errno+0x28>
80092070:	d0a74504 	addi	r2,gp,-25324
}
80092074:	e037883a 	mov	sp,fp
80092078:	dfc00117 	ldw	ra,4(sp)
8009207c:	df000017 	ldw	fp,0(sp)
80092080:	dec00204 	addi	sp,sp,8
80092084:	f800283a 	ret

80092088 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80092088:	defff904 	addi	sp,sp,-28
8009208c:	dfc00615 	stw	ra,24(sp)
80092090:	df000515 	stw	fp,20(sp)
80092094:	df000504 	addi	fp,sp,20
80092098:	e13ffd15 	stw	r4,-12(fp)
8009209c:	e17ffe15 	stw	r5,-8(fp)
800920a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
800920a4:	e0bffd17 	ldw	r2,-12(fp)
800920a8:	10000616 	blt	r2,zero,800920c4 <read+0x3c>
800920ac:	e0bffd17 	ldw	r2,-12(fp)
800920b0:	10c00324 	muli	r3,r2,12
800920b4:	00a00274 	movhi	r2,32777
800920b8:	109dd104 	addi	r2,r2,30532
800920bc:	1885883a 	add	r2,r3,r2
800920c0:	00000106 	br	800920c8 <read+0x40>
800920c4:	0005883a 	mov	r2,zero
800920c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
800920cc:	e0bffb17 	ldw	r2,-20(fp)
800920d0:	10002226 	beq	r2,zero,8009215c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
800920d4:	e0bffb17 	ldw	r2,-20(fp)
800920d8:	10800217 	ldw	r2,8(r2)
800920dc:	108000cc 	andi	r2,r2,3
800920e0:	10800060 	cmpeqi	r2,r2,1
800920e4:	1000181e 	bne	r2,zero,80092148 <read+0xc0>
        (fd->dev->read))
800920e8:	e0bffb17 	ldw	r2,-20(fp)
800920ec:	10800017 	ldw	r2,0(r2)
800920f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
800920f4:	10001426 	beq	r2,zero,80092148 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
800920f8:	e0bffb17 	ldw	r2,-20(fp)
800920fc:	10800017 	ldw	r2,0(r2)
80092100:	10800517 	ldw	r2,20(r2)
80092104:	e0ffff17 	ldw	r3,-4(fp)
80092108:	180d883a 	mov	r6,r3
8009210c:	e17ffe17 	ldw	r5,-8(fp)
80092110:	e13ffb17 	ldw	r4,-20(fp)
80092114:	103ee83a 	callr	r2
80092118:	e0bffc15 	stw	r2,-16(fp)
8009211c:	e0bffc17 	ldw	r2,-16(fp)
80092120:	1000070e 	bge	r2,zero,80092140 <read+0xb8>
        {
          ALT_ERRNO = -rval;
80092124:	009204c0 	call	8009204c <alt_get_errno>
80092128:	1007883a 	mov	r3,r2
8009212c:	e0bffc17 	ldw	r2,-16(fp)
80092130:	0085c83a 	sub	r2,zero,r2
80092134:	18800015 	stw	r2,0(r3)
          return -1;
80092138:	00bfffc4 	movi	r2,-1
8009213c:	00000c06 	br	80092170 <read+0xe8>
        }
        return rval;
80092140:	e0bffc17 	ldw	r2,-16(fp)
80092144:	00000a06 	br	80092170 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
80092148:	009204c0 	call	8009204c <alt_get_errno>
8009214c:	1007883a 	mov	r3,r2
80092150:	00800344 	movi	r2,13
80092154:	18800015 	stw	r2,0(r3)
80092158:	00000406 	br	8009216c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8009215c:	009204c0 	call	8009204c <alt_get_errno>
80092160:	1007883a 	mov	r3,r2
80092164:	00801444 	movi	r2,81
80092168:	18800015 	stw	r2,0(r3)
  }
  return -1;
8009216c:	00bfffc4 	movi	r2,-1
}
80092170:	e037883a 	mov	sp,fp
80092174:	dfc00117 	ldw	ra,4(sp)
80092178:	df000017 	ldw	fp,0(sp)
8009217c:	dec00204 	addi	sp,sp,8
80092180:	f800283a 	ret

80092184 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
80092184:	defffe04 	addi	sp,sp,-8
80092188:	df000115 	stw	fp,4(sp)
8009218c:	df000104 	addi	fp,sp,4
80092190:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
80092194:	e0bfff17 	ldw	r2,-4(fp)
80092198:	108000d0 	cmplti	r2,r2,3
8009219c:	10000d1e 	bne	r2,zero,800921d4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
800921a0:	00a00274 	movhi	r2,32777
800921a4:	109dd104 	addi	r2,r2,30532
800921a8:	e0ffff17 	ldw	r3,-4(fp)
800921ac:	18c00324 	muli	r3,r3,12
800921b0:	10c5883a 	add	r2,r2,r3
800921b4:	10800204 	addi	r2,r2,8
800921b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
800921bc:	00a00274 	movhi	r2,32777
800921c0:	109dd104 	addi	r2,r2,30532
800921c4:	e0ffff17 	ldw	r3,-4(fp)
800921c8:	18c00324 	muli	r3,r3,12
800921cc:	10c5883a 	add	r2,r2,r3
800921d0:	10000015 	stw	zero,0(r2)
  }
}
800921d4:	0001883a 	nop
800921d8:	e037883a 	mov	sp,fp
800921dc:	df000017 	ldw	fp,0(sp)
800921e0:	dec00104 	addi	sp,sp,4
800921e4:	f800283a 	ret

800921e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
800921e8:	defff904 	addi	sp,sp,-28
800921ec:	df000615 	stw	fp,24(sp)
800921f0:	df000604 	addi	fp,sp,24
800921f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800921f8:	0005303a 	rdctl	r2,status
800921fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80092200:	e0fffe17 	ldw	r3,-8(fp)
80092204:	00bfff84 	movi	r2,-2
80092208:	1884703a 	and	r2,r3,r2
8009220c:	1001703a 	wrctl	status,r2
  
  return context;
80092210:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
80092214:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80092218:	d0a01917 	ldw	r2,-32668(gp)
8009221c:	10c000c4 	addi	r3,r2,3
80092220:	00bfff04 	movi	r2,-4
80092224:	1884703a 	and	r2,r3,r2
80092228:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
8009222c:	d0e01917 	ldw	r3,-32668(gp)
80092230:	e0bfff17 	ldw	r2,-4(fp)
80092234:	1887883a 	add	r3,r3,r2
80092238:	00a00434 	movhi	r2,32784
8009223c:	10b40004 	addi	r2,r2,-12288
80092240:	10c0062e 	bgeu	r2,r3,8009225c <sbrk+0x74>
80092244:	e0bffb17 	ldw	r2,-20(fp)
80092248:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009224c:	e0bffa17 	ldw	r2,-24(fp)
80092250:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
80092254:	00bfffc4 	movi	r2,-1
80092258:	00000b06 	br	80092288 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
8009225c:	d0a01917 	ldw	r2,-32668(gp)
80092260:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
80092264:	d0e01917 	ldw	r3,-32668(gp)
80092268:	e0bfff17 	ldw	r2,-4(fp)
8009226c:	1885883a 	add	r2,r3,r2
80092270:	d0a01915 	stw	r2,-32668(gp)
80092274:	e0bffb17 	ldw	r2,-20(fp)
80092278:	e0bffc15 	stw	r2,-16(fp)
8009227c:	e0bffc17 	ldw	r2,-16(fp)
80092280:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
80092284:	e0bffd17 	ldw	r2,-12(fp)
} 
80092288:	e037883a 	mov	sp,fp
8009228c:	df000017 	ldw	fp,0(sp)
80092290:	dec00104 	addi	sp,sp,4
80092294:	f800283a 	ret

80092298 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
80092298:	defffa04 	addi	sp,sp,-24
8009229c:	df000515 	stw	fp,20(sp)
800922a0:	df000504 	addi	fp,sp,20
800922a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800922a8:	0005303a 	rdctl	r2,status
800922ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800922b0:	e0fffc17 	ldw	r3,-16(fp)
800922b4:	00bfff84 	movi	r2,-2
800922b8:	1884703a 	and	r2,r3,r2
800922bc:	1001703a 	wrctl	status,r2
  
  return context;
800922c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
800922c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
800922c8:	e0bfff17 	ldw	r2,-4(fp)
800922cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
800922d0:	e0bffd17 	ldw	r2,-12(fp)
800922d4:	10800017 	ldw	r2,0(r2)
800922d8:	e0fffd17 	ldw	r3,-12(fp)
800922dc:	18c00117 	ldw	r3,4(r3)
800922e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
800922e4:	e0bffd17 	ldw	r2,-12(fp)
800922e8:	10800117 	ldw	r2,4(r2)
800922ec:	e0fffd17 	ldw	r3,-12(fp)
800922f0:	18c00017 	ldw	r3,0(r3)
800922f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
800922f8:	e0bffd17 	ldw	r2,-12(fp)
800922fc:	e0fffd17 	ldw	r3,-12(fp)
80092300:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
80092304:	e0bffd17 	ldw	r2,-12(fp)
80092308:	e0fffd17 	ldw	r3,-12(fp)
8009230c:	10c00015 	stw	r3,0(r2)
80092310:	e0bffb17 	ldw	r2,-20(fp)
80092314:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80092318:	e0bffe17 	ldw	r2,-8(fp)
8009231c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80092320:	0001883a 	nop
80092324:	e037883a 	mov	sp,fp
80092328:	df000017 	ldw	fp,0(sp)
8009232c:	dec00104 	addi	sp,sp,4
80092330:	f800283a 	ret

80092334 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80092334:	defffb04 	addi	sp,sp,-20
80092338:	dfc00415 	stw	ra,16(sp)
8009233c:	df000315 	stw	fp,12(sp)
80092340:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
80092344:	d0a01a17 	ldw	r2,-32664(gp)
80092348:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8009234c:	d0a74b17 	ldw	r2,-25300(gp)
80092350:	10800044 	addi	r2,r2,1
80092354:	d0a74b15 	stw	r2,-25300(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80092358:	00002e06 	br	80092414 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
8009235c:	e0bffd17 	ldw	r2,-12(fp)
80092360:	10800017 	ldw	r2,0(r2)
80092364:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80092368:	e0bffd17 	ldw	r2,-12(fp)
8009236c:	10800403 	ldbu	r2,16(r2)
80092370:	10803fcc 	andi	r2,r2,255
80092374:	10000426 	beq	r2,zero,80092388 <alt_tick+0x54>
80092378:	d0a74b17 	ldw	r2,-25300(gp)
8009237c:	1000021e 	bne	r2,zero,80092388 <alt_tick+0x54>
    {
      alarm->rollover = 0;
80092380:	e0bffd17 	ldw	r2,-12(fp)
80092384:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
80092388:	e0bffd17 	ldw	r2,-12(fp)
8009238c:	10800217 	ldw	r2,8(r2)
80092390:	d0e74b17 	ldw	r3,-25300(gp)
80092394:	18801d36 	bltu	r3,r2,8009240c <alt_tick+0xd8>
80092398:	e0bffd17 	ldw	r2,-12(fp)
8009239c:	10800403 	ldbu	r2,16(r2)
800923a0:	10803fcc 	andi	r2,r2,255
800923a4:	1000191e 	bne	r2,zero,8009240c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
800923a8:	e0bffd17 	ldw	r2,-12(fp)
800923ac:	10800317 	ldw	r2,12(r2)
800923b0:	e0fffd17 	ldw	r3,-12(fp)
800923b4:	18c00517 	ldw	r3,20(r3)
800923b8:	1809883a 	mov	r4,r3
800923bc:	103ee83a 	callr	r2
800923c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
800923c4:	e0bfff17 	ldw	r2,-4(fp)
800923c8:	1000031e 	bne	r2,zero,800923d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
800923cc:	e13ffd17 	ldw	r4,-12(fp)
800923d0:	00922980 	call	80092298 <alt_alarm_stop>
800923d4:	00000d06 	br	8009240c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
800923d8:	e0bffd17 	ldw	r2,-12(fp)
800923dc:	10c00217 	ldw	r3,8(r2)
800923e0:	e0bfff17 	ldw	r2,-4(fp)
800923e4:	1887883a 	add	r3,r3,r2
800923e8:	e0bffd17 	ldw	r2,-12(fp)
800923ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
800923f0:	e0bffd17 	ldw	r2,-12(fp)
800923f4:	10c00217 	ldw	r3,8(r2)
800923f8:	d0a74b17 	ldw	r2,-25300(gp)
800923fc:	1880032e 	bgeu	r3,r2,8009240c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80092400:	e0bffd17 	ldw	r2,-12(fp)
80092404:	00c00044 	movi	r3,1
80092408:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
8009240c:	e0bffe17 	ldw	r2,-8(fp)
80092410:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80092414:	e0fffd17 	ldw	r3,-12(fp)
80092418:	d0a01a04 	addi	r2,gp,-32664
8009241c:	18bfcf1e 	bne	r3,r2,8009235c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80092420:	0001883a 	nop
}
80092424:	0001883a 	nop
80092428:	e037883a 	mov	sp,fp
8009242c:	dfc00117 	ldw	ra,4(sp)
80092430:	df000017 	ldw	fp,0(sp)
80092434:	dec00204 	addi	sp,sp,8
80092438:	f800283a 	ret

8009243c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8009243c:	defffe04 	addi	sp,sp,-8
80092440:	dfc00115 	stw	ra,4(sp)
80092444:	df000015 	stw	fp,0(sp)
80092448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8009244c:	d0a01717 	ldw	r2,-32676(gp)
80092450:	10000326 	beq	r2,zero,80092460 <alt_get_errno+0x24>
80092454:	d0a01717 	ldw	r2,-32676(gp)
80092458:	103ee83a 	callr	r2
8009245c:	00000106 	br	80092464 <alt_get_errno+0x28>
80092460:	d0a74504 	addi	r2,gp,-25324
}
80092464:	e037883a 	mov	sp,fp
80092468:	dfc00117 	ldw	ra,4(sp)
8009246c:	df000017 	ldw	fp,0(sp)
80092470:	dec00204 	addi	sp,sp,8
80092474:	f800283a 	ret

80092478 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80092478:	defff904 	addi	sp,sp,-28
8009247c:	dfc00615 	stw	ra,24(sp)
80092480:	df000515 	stw	fp,20(sp)
80092484:	df000504 	addi	fp,sp,20
80092488:	e13ffd15 	stw	r4,-12(fp)
8009248c:	e17ffe15 	stw	r5,-8(fp)
80092490:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80092494:	e0bffd17 	ldw	r2,-12(fp)
80092498:	10000616 	blt	r2,zero,800924b4 <write+0x3c>
8009249c:	e0bffd17 	ldw	r2,-12(fp)
800924a0:	10c00324 	muli	r3,r2,12
800924a4:	00a00274 	movhi	r2,32777
800924a8:	109dd104 	addi	r2,r2,30532
800924ac:	1885883a 	add	r2,r3,r2
800924b0:	00000106 	br	800924b8 <write+0x40>
800924b4:	0005883a 	mov	r2,zero
800924b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
800924bc:	e0bffb17 	ldw	r2,-20(fp)
800924c0:	10002126 	beq	r2,zero,80092548 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
800924c4:	e0bffb17 	ldw	r2,-20(fp)
800924c8:	10800217 	ldw	r2,8(r2)
800924cc:	108000cc 	andi	r2,r2,3
800924d0:	10001826 	beq	r2,zero,80092534 <write+0xbc>
800924d4:	e0bffb17 	ldw	r2,-20(fp)
800924d8:	10800017 	ldw	r2,0(r2)
800924dc:	10800617 	ldw	r2,24(r2)
800924e0:	10001426 	beq	r2,zero,80092534 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
800924e4:	e0bffb17 	ldw	r2,-20(fp)
800924e8:	10800017 	ldw	r2,0(r2)
800924ec:	10800617 	ldw	r2,24(r2)
800924f0:	e0ffff17 	ldw	r3,-4(fp)
800924f4:	180d883a 	mov	r6,r3
800924f8:	e17ffe17 	ldw	r5,-8(fp)
800924fc:	e13ffb17 	ldw	r4,-20(fp)
80092500:	103ee83a 	callr	r2
80092504:	e0bffc15 	stw	r2,-16(fp)
80092508:	e0bffc17 	ldw	r2,-16(fp)
8009250c:	1000070e 	bge	r2,zero,8009252c <write+0xb4>
      {
        ALT_ERRNO = -rval;
80092510:	009243c0 	call	8009243c <alt_get_errno>
80092514:	1007883a 	mov	r3,r2
80092518:	e0bffc17 	ldw	r2,-16(fp)
8009251c:	0085c83a 	sub	r2,zero,r2
80092520:	18800015 	stw	r2,0(r3)
        return -1;
80092524:	00bfffc4 	movi	r2,-1
80092528:	00000c06 	br	8009255c <write+0xe4>
      }
      return rval;
8009252c:	e0bffc17 	ldw	r2,-16(fp)
80092530:	00000a06 	br	8009255c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
80092534:	009243c0 	call	8009243c <alt_get_errno>
80092538:	1007883a 	mov	r3,r2
8009253c:	00800344 	movi	r2,13
80092540:	18800015 	stw	r2,0(r3)
80092544:	00000406 	br	80092558 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
80092548:	009243c0 	call	8009243c <alt_get_errno>
8009254c:	1007883a 	mov	r3,r2
80092550:	00801444 	movi	r2,81
80092554:	18800015 	stw	r2,0(r3)
  }
  return -1;
80092558:	00bfffc4 	movi	r2,-1
}
8009255c:	e037883a 	mov	sp,fp
80092560:	dfc00117 	ldw	ra,4(sp)
80092564:	df000017 	ldw	fp,0(sp)
80092568:	dec00204 	addi	sp,sp,8
8009256c:	f800283a 	ret

80092570 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
80092570:	defffd04 	addi	sp,sp,-12
80092574:	dfc00215 	stw	ra,8(sp)
80092578:	df000115 	stw	fp,4(sp)
8009257c:	df000104 	addi	fp,sp,4
80092580:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
80092584:	d1601404 	addi	r5,gp,-32688
80092588:	e13fff17 	ldw	r4,-4(fp)
8009258c:	00953a00 	call	800953a0 <alt_dev_llist_insert>
}
80092590:	e037883a 	mov	sp,fp
80092594:	dfc00117 	ldw	ra,4(sp)
80092598:	df000017 	ldw	fp,0(sp)
8009259c:	dec00204 	addi	sp,sp,8
800925a0:	f800283a 	ret

800925a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
800925a4:	defffd04 	addi	sp,sp,-12
800925a8:	dfc00215 	stw	ra,8(sp)
800925ac:	df000115 	stw	fp,4(sp)
800925b0:	df000104 	addi	fp,sp,4
800925b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
800925b8:	0095c600 	call	80095c60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
800925bc:	00800044 	movi	r2,1
800925c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
800925c4:	0001883a 	nop
800925c8:	e037883a 	mov	sp,fp
800925cc:	dfc00117 	ldw	ra,4(sp)
800925d0:	df000017 	ldw	fp,0(sp)
800925d4:	dec00204 	addi	sp,sp,8
800925d8:	f800283a 	ret

800925dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
800925dc:	defffe04 	addi	sp,sp,-8
800925e0:	dfc00115 	stw	ra,4(sp)
800925e4:	df000015 	stw	fp,0(sp)
800925e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
800925ec:	01c0fa04 	movi	r7,1000
800925f0:	01800084 	movi	r6,2
800925f4:	000b883a 	mov	r5,zero
800925f8:	01200434 	movhi	r4,32784
800925fc:	21040004 	addi	r4,r4,4096
80092600:	00931a00 	call	800931a0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
80092604:	01800044 	movi	r6,1
80092608:	000b883a 	mov	r5,zero
8009260c:	01200274 	movhi	r4,32777
80092610:	211e3b04 	addi	r4,r4,30956
80092614:	00928240 	call	80092824 <altera_avalon_jtag_uart_init>
80092618:	01200274 	movhi	r4,32777
8009261c:	211e3104 	addi	r4,r4,30916
80092620:	00925700 	call	80092570 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_1_DMA, dma_fifo_subsystem_1_dma);
80092624:	00a002b4 	movhi	r2,32778
80092628:	10a24904 	addi	r2,r2,-30428
8009262c:	10c00717 	ldw	r3,28(r2)
80092630:	00a002b4 	movhi	r2,32778
80092634:	10a24904 	addi	r2,r2,-30428
80092638:	10800817 	ldw	r2,32(r2)
8009263c:	100d883a 	mov	r6,r2
80092640:	180b883a 	mov	r5,r3
80092644:	012002b4 	movhi	r4,32778
80092648:	21224904 	addi	r4,r4,-30428
8009264c:	0094de80 	call	80094de8 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUSBYSTEM_DMA, dma_fifo_susbystem_dma);
80092650:	00a002b4 	movhi	r2,32778
80092654:	10a26104 	addi	r2,r2,-30332
80092658:	10c00717 	ldw	r3,28(r2)
8009265c:	00a002b4 	movhi	r2,32778
80092660:	10a26104 	addi	r2,r2,-30332
80092664:	10800817 	ldw	r2,32(r2)
80092668:	100d883a 	mov	r6,r2
8009266c:	180b883a 	mov	r5,r3
80092670:	012002b4 	movhi	r4,32778
80092674:	21226104 	addi	r4,r4,-30332
80092678:	0094de80 	call	80094de8 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( FROM_ETH_TO_DDR_ETH_DMA, from_ETH_to_DDR_ETH_DMA);
8009267c:	00a002b4 	movhi	r2,32778
80092680:	10a27904 	addi	r2,r2,-30236
80092684:	10c00717 	ldw	r3,28(r2)
80092688:	00a002b4 	movhi	r2,32778
8009268c:	10a27904 	addi	r2,r2,-30236
80092690:	10800817 	ldw	r2,32(r2)
80092694:	100d883a 	mov	r6,r2
80092698:	180b883a 	mov	r5,r3
8009269c:	012002b4 	movhi	r4,32778
800926a0:	21227904 	addi	r4,r4,-30236
800926a4:	0094de80 	call	80094de8 <alt_msgdma_init>
}
800926a8:	0001883a 	nop
800926ac:	e037883a 	mov	sp,fp
800926b0:	dfc00117 	ldw	ra,4(sp)
800926b4:	df000017 	ldw	fp,0(sp)
800926b8:	dec00204 	addi	sp,sp,8
800926bc:	f800283a 	ret

800926c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
800926c0:	defffa04 	addi	sp,sp,-24
800926c4:	dfc00515 	stw	ra,20(sp)
800926c8:	df000415 	stw	fp,16(sp)
800926cc:	df000404 	addi	fp,sp,16
800926d0:	e13ffd15 	stw	r4,-12(fp)
800926d4:	e17ffe15 	stw	r5,-8(fp)
800926d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
800926dc:	e0bffd17 	ldw	r2,-12(fp)
800926e0:	10800017 	ldw	r2,0(r2)
800926e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
800926e8:	e0bffc17 	ldw	r2,-16(fp)
800926ec:	10c00a04 	addi	r3,r2,40
800926f0:	e0bffd17 	ldw	r2,-12(fp)
800926f4:	10800217 	ldw	r2,8(r2)
800926f8:	100f883a 	mov	r7,r2
800926fc:	e1bfff17 	ldw	r6,-4(fp)
80092700:	e17ffe17 	ldw	r5,-8(fp)
80092704:	1809883a 	mov	r4,r3
80092708:	0092ce80 	call	80092ce8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8009270c:	e037883a 	mov	sp,fp
80092710:	dfc00117 	ldw	ra,4(sp)
80092714:	df000017 	ldw	fp,0(sp)
80092718:	dec00204 	addi	sp,sp,8
8009271c:	f800283a 	ret

80092720 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80092720:	defffa04 	addi	sp,sp,-24
80092724:	dfc00515 	stw	ra,20(sp)
80092728:	df000415 	stw	fp,16(sp)
8009272c:	df000404 	addi	fp,sp,16
80092730:	e13ffd15 	stw	r4,-12(fp)
80092734:	e17ffe15 	stw	r5,-8(fp)
80092738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8009273c:	e0bffd17 	ldw	r2,-12(fp)
80092740:	10800017 	ldw	r2,0(r2)
80092744:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
80092748:	e0bffc17 	ldw	r2,-16(fp)
8009274c:	10c00a04 	addi	r3,r2,40
80092750:	e0bffd17 	ldw	r2,-12(fp)
80092754:	10800217 	ldw	r2,8(r2)
80092758:	100f883a 	mov	r7,r2
8009275c:	e1bfff17 	ldw	r6,-4(fp)
80092760:	e17ffe17 	ldw	r5,-8(fp)
80092764:	1809883a 	mov	r4,r3
80092768:	0092f040 	call	80092f04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8009276c:	e037883a 	mov	sp,fp
80092770:	dfc00117 	ldw	ra,4(sp)
80092774:	df000017 	ldw	fp,0(sp)
80092778:	dec00204 	addi	sp,sp,8
8009277c:	f800283a 	ret

80092780 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
80092780:	defffc04 	addi	sp,sp,-16
80092784:	dfc00315 	stw	ra,12(sp)
80092788:	df000215 	stw	fp,8(sp)
8009278c:	df000204 	addi	fp,sp,8
80092790:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80092794:	e0bfff17 	ldw	r2,-4(fp)
80092798:	10800017 	ldw	r2,0(r2)
8009279c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
800927a0:	e0bffe17 	ldw	r2,-8(fp)
800927a4:	10c00a04 	addi	r3,r2,40
800927a8:	e0bfff17 	ldw	r2,-4(fp)
800927ac:	10800217 	ldw	r2,8(r2)
800927b0:	100b883a 	mov	r5,r2
800927b4:	1809883a 	mov	r4,r3
800927b8:	0092b900 	call	80092b90 <altera_avalon_jtag_uart_close>
}
800927bc:	e037883a 	mov	sp,fp
800927c0:	dfc00117 	ldw	ra,4(sp)
800927c4:	df000017 	ldw	fp,0(sp)
800927c8:	dec00204 	addi	sp,sp,8
800927cc:	f800283a 	ret

800927d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
800927d0:	defffa04 	addi	sp,sp,-24
800927d4:	dfc00515 	stw	ra,20(sp)
800927d8:	df000415 	stw	fp,16(sp)
800927dc:	df000404 	addi	fp,sp,16
800927e0:	e13ffd15 	stw	r4,-12(fp)
800927e4:	e17ffe15 	stw	r5,-8(fp)
800927e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
800927ec:	e0bffd17 	ldw	r2,-12(fp)
800927f0:	10800017 	ldw	r2,0(r2)
800927f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
800927f8:	e0bffc17 	ldw	r2,-16(fp)
800927fc:	10800a04 	addi	r2,r2,40
80092800:	e1bfff17 	ldw	r6,-4(fp)
80092804:	e17ffe17 	ldw	r5,-8(fp)
80092808:	1009883a 	mov	r4,r2
8009280c:	0092bf80 	call	80092bf8 <altera_avalon_jtag_uart_ioctl>
}
80092810:	e037883a 	mov	sp,fp
80092814:	dfc00117 	ldw	ra,4(sp)
80092818:	df000017 	ldw	fp,0(sp)
8009281c:	dec00204 	addi	sp,sp,8
80092820:	f800283a 	ret

80092824 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80092824:	defffa04 	addi	sp,sp,-24
80092828:	dfc00515 	stw	ra,20(sp)
8009282c:	df000415 	stw	fp,16(sp)
80092830:	df000404 	addi	fp,sp,16
80092834:	e13ffd15 	stw	r4,-12(fp)
80092838:	e17ffe15 	stw	r5,-8(fp)
8009283c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80092840:	e0bffd17 	ldw	r2,-12(fp)
80092844:	00c00044 	movi	r3,1
80092848:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8009284c:	e0bffd17 	ldw	r2,-12(fp)
80092850:	10800017 	ldw	r2,0(r2)
80092854:	10800104 	addi	r2,r2,4
80092858:	1007883a 	mov	r3,r2
8009285c:	e0bffd17 	ldw	r2,-12(fp)
80092860:	10800817 	ldw	r2,32(r2)
80092864:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
80092868:	e0bffe17 	ldw	r2,-8(fp)
8009286c:	e0ffff17 	ldw	r3,-4(fp)
80092870:	d8000015 	stw	zero,0(sp)
80092874:	e1fffd17 	ldw	r7,-12(fp)
80092878:	01a00274 	movhi	r6,32777
8009287c:	318a3904 	addi	r6,r6,10468
80092880:	180b883a 	mov	r5,r3
80092884:	1009883a 	mov	r4,r2
80092888:	0091a0c0 	call	80091a0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8009288c:	e0bffd17 	ldw	r2,-12(fp)
80092890:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
80092894:	e0bffd17 	ldw	r2,-12(fp)
80092898:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8009289c:	d0e74a17 	ldw	r3,-25304(gp)
800928a0:	e1fffd17 	ldw	r7,-12(fp)
800928a4:	01a00274 	movhi	r6,32777
800928a8:	318abc04 	addi	r6,r6,10992
800928ac:	180b883a 	mov	r5,r3
800928b0:	1009883a 	mov	r4,r2
800928b4:	00950980 	call	80095098 <alt_alarm_start>
800928b8:	1000040e 	bge	r2,zero,800928cc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
800928bc:	e0fffd17 	ldw	r3,-12(fp)
800928c0:	00a00034 	movhi	r2,32768
800928c4:	10bfffc4 	addi	r2,r2,-1
800928c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
800928cc:	0001883a 	nop
800928d0:	e037883a 	mov	sp,fp
800928d4:	dfc00117 	ldw	ra,4(sp)
800928d8:	df000017 	ldw	fp,0(sp)
800928dc:	dec00204 	addi	sp,sp,8
800928e0:	f800283a 	ret

800928e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
800928e4:	defff804 	addi	sp,sp,-32
800928e8:	df000715 	stw	fp,28(sp)
800928ec:	df000704 	addi	fp,sp,28
800928f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
800928f4:	e0bfff17 	ldw	r2,-4(fp)
800928f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
800928fc:	e0bffb17 	ldw	r2,-20(fp)
80092900:	10800017 	ldw	r2,0(r2)
80092904:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80092908:	e0bffc17 	ldw	r2,-16(fp)
8009290c:	10800104 	addi	r2,r2,4
80092910:	10800037 	ldwio	r2,0(r2)
80092914:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80092918:	e0bffd17 	ldw	r2,-12(fp)
8009291c:	1080c00c 	andi	r2,r2,768
80092920:	10006d26 	beq	r2,zero,80092ad8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80092924:	e0bffd17 	ldw	r2,-12(fp)
80092928:	1080400c 	andi	r2,r2,256
8009292c:	10003526 	beq	r2,zero,80092a04 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
80092930:	00800074 	movhi	r2,1
80092934:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80092938:	e0bffb17 	ldw	r2,-20(fp)
8009293c:	10800a17 	ldw	r2,40(r2)
80092940:	10800044 	addi	r2,r2,1
80092944:	1081ffcc 	andi	r2,r2,2047
80092948:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8009294c:	e0bffb17 	ldw	r2,-20(fp)
80092950:	10c00b17 	ldw	r3,44(r2)
80092954:	e0bffe17 	ldw	r2,-8(fp)
80092958:	18801526 	beq	r3,r2,800929b0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8009295c:	e0bffc17 	ldw	r2,-16(fp)
80092960:	10800037 	ldwio	r2,0(r2)
80092964:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
80092968:	e0bff917 	ldw	r2,-28(fp)
8009296c:	10a0000c 	andi	r2,r2,32768
80092970:	10001126 	beq	r2,zero,800929b8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
80092974:	e0bffb17 	ldw	r2,-20(fp)
80092978:	10800a17 	ldw	r2,40(r2)
8009297c:	e0fff917 	ldw	r3,-28(fp)
80092980:	1809883a 	mov	r4,r3
80092984:	e0fffb17 	ldw	r3,-20(fp)
80092988:	1885883a 	add	r2,r3,r2
8009298c:	10800e04 	addi	r2,r2,56
80092990:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80092994:	e0bffb17 	ldw	r2,-20(fp)
80092998:	10800a17 	ldw	r2,40(r2)
8009299c:	10800044 	addi	r2,r2,1
800929a0:	10c1ffcc 	andi	r3,r2,2047
800929a4:	e0bffb17 	ldw	r2,-20(fp)
800929a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
800929ac:	003fe206 	br	80092938 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
800929b0:	0001883a 	nop
800929b4:	00000106 	br	800929bc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
800929b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
800929bc:	e0bff917 	ldw	r2,-28(fp)
800929c0:	10bfffec 	andhi	r2,r2,65535
800929c4:	10000f26 	beq	r2,zero,80092a04 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
800929c8:	e0bffb17 	ldw	r2,-20(fp)
800929cc:	10c00817 	ldw	r3,32(r2)
800929d0:	00bfff84 	movi	r2,-2
800929d4:	1886703a 	and	r3,r3,r2
800929d8:	e0bffb17 	ldw	r2,-20(fp)
800929dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
800929e0:	e0bffc17 	ldw	r2,-16(fp)
800929e4:	10800104 	addi	r2,r2,4
800929e8:	1007883a 	mov	r3,r2
800929ec:	e0bffb17 	ldw	r2,-20(fp)
800929f0:	10800817 	ldw	r2,32(r2)
800929f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
800929f8:	e0bffc17 	ldw	r2,-16(fp)
800929fc:	10800104 	addi	r2,r2,4
80092a00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80092a04:	e0bffd17 	ldw	r2,-12(fp)
80092a08:	1080800c 	andi	r2,r2,512
80092a0c:	103fbe26 	beq	r2,zero,80092908 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
80092a10:	e0bffd17 	ldw	r2,-12(fp)
80092a14:	1004d43a 	srli	r2,r2,16
80092a18:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
80092a1c:	00001406 	br	80092a70 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
80092a20:	e0bffc17 	ldw	r2,-16(fp)
80092a24:	e0fffb17 	ldw	r3,-20(fp)
80092a28:	18c00d17 	ldw	r3,52(r3)
80092a2c:	e13ffb17 	ldw	r4,-20(fp)
80092a30:	20c7883a 	add	r3,r4,r3
80092a34:	18c20e04 	addi	r3,r3,2104
80092a38:	18c00003 	ldbu	r3,0(r3)
80092a3c:	18c03fcc 	andi	r3,r3,255
80092a40:	18c0201c 	xori	r3,r3,128
80092a44:	18ffe004 	addi	r3,r3,-128
80092a48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80092a4c:	e0bffb17 	ldw	r2,-20(fp)
80092a50:	10800d17 	ldw	r2,52(r2)
80092a54:	10800044 	addi	r2,r2,1
80092a58:	10c1ffcc 	andi	r3,r2,2047
80092a5c:	e0bffb17 	ldw	r2,-20(fp)
80092a60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
80092a64:	e0bffa17 	ldw	r2,-24(fp)
80092a68:	10bfffc4 	addi	r2,r2,-1
80092a6c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
80092a70:	e0bffa17 	ldw	r2,-24(fp)
80092a74:	10000526 	beq	r2,zero,80092a8c <altera_avalon_jtag_uart_irq+0x1a8>
80092a78:	e0bffb17 	ldw	r2,-20(fp)
80092a7c:	10c00d17 	ldw	r3,52(r2)
80092a80:	e0bffb17 	ldw	r2,-20(fp)
80092a84:	10800c17 	ldw	r2,48(r2)
80092a88:	18bfe51e 	bne	r3,r2,80092a20 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
80092a8c:	e0bffa17 	ldw	r2,-24(fp)
80092a90:	103f9d26 	beq	r2,zero,80092908 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80092a94:	e0bffb17 	ldw	r2,-20(fp)
80092a98:	10c00817 	ldw	r3,32(r2)
80092a9c:	00bfff44 	movi	r2,-3
80092aa0:	1886703a 	and	r3,r3,r2
80092aa4:	e0bffb17 	ldw	r2,-20(fp)
80092aa8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80092aac:	e0bffb17 	ldw	r2,-20(fp)
80092ab0:	10800017 	ldw	r2,0(r2)
80092ab4:	10800104 	addi	r2,r2,4
80092ab8:	1007883a 	mov	r3,r2
80092abc:	e0bffb17 	ldw	r2,-20(fp)
80092ac0:	10800817 	ldw	r2,32(r2)
80092ac4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80092ac8:	e0bffc17 	ldw	r2,-16(fp)
80092acc:	10800104 	addi	r2,r2,4
80092ad0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
80092ad4:	003f8c06 	br	80092908 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
80092ad8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
80092adc:	0001883a 	nop
80092ae0:	e037883a 	mov	sp,fp
80092ae4:	df000017 	ldw	fp,0(sp)
80092ae8:	dec00104 	addi	sp,sp,4
80092aec:	f800283a 	ret

80092af0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
80092af0:	defff804 	addi	sp,sp,-32
80092af4:	df000715 	stw	fp,28(sp)
80092af8:	df000704 	addi	fp,sp,28
80092afc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
80092b00:	e0bffb17 	ldw	r2,-20(fp)
80092b04:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
80092b08:	e0bff917 	ldw	r2,-28(fp)
80092b0c:	10800017 	ldw	r2,0(r2)
80092b10:	10800104 	addi	r2,r2,4
80092b14:	10800037 	ldwio	r2,0(r2)
80092b18:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
80092b1c:	e0bffa17 	ldw	r2,-24(fp)
80092b20:	1081000c 	andi	r2,r2,1024
80092b24:	10000b26 	beq	r2,zero,80092b54 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80092b28:	e0bff917 	ldw	r2,-28(fp)
80092b2c:	10800017 	ldw	r2,0(r2)
80092b30:	10800104 	addi	r2,r2,4
80092b34:	1007883a 	mov	r3,r2
80092b38:	e0bff917 	ldw	r2,-28(fp)
80092b3c:	10800817 	ldw	r2,32(r2)
80092b40:	10810014 	ori	r2,r2,1024
80092b44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
80092b48:	e0bff917 	ldw	r2,-28(fp)
80092b4c:	10000915 	stw	zero,36(r2)
80092b50:	00000a06 	br	80092b7c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
80092b54:	e0bff917 	ldw	r2,-28(fp)
80092b58:	10c00917 	ldw	r3,36(r2)
80092b5c:	00a00034 	movhi	r2,32768
80092b60:	10bfff04 	addi	r2,r2,-4
80092b64:	10c00536 	bltu	r2,r3,80092b7c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
80092b68:	e0bff917 	ldw	r2,-28(fp)
80092b6c:	10800917 	ldw	r2,36(r2)
80092b70:	10c00044 	addi	r3,r2,1
80092b74:	e0bff917 	ldw	r2,-28(fp)
80092b78:	10c00915 	stw	r3,36(r2)
80092b7c:	d0a74a17 	ldw	r2,-25304(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
80092b80:	e037883a 	mov	sp,fp
80092b84:	df000017 	ldw	fp,0(sp)
80092b88:	dec00104 	addi	sp,sp,4
80092b8c:	f800283a 	ret

80092b90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
80092b90:	defffd04 	addi	sp,sp,-12
80092b94:	df000215 	stw	fp,8(sp)
80092b98:	df000204 	addi	fp,sp,8
80092b9c:	e13ffe15 	stw	r4,-8(fp)
80092ba0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80092ba4:	00000506 	br	80092bbc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80092ba8:	e0bfff17 	ldw	r2,-4(fp)
80092bac:	1090000c 	andi	r2,r2,16384
80092bb0:	10000226 	beq	r2,zero,80092bbc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
80092bb4:	00bffd44 	movi	r2,-11
80092bb8:	00000b06 	br	80092be8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80092bbc:	e0bffe17 	ldw	r2,-8(fp)
80092bc0:	10c00d17 	ldw	r3,52(r2)
80092bc4:	e0bffe17 	ldw	r2,-8(fp)
80092bc8:	10800c17 	ldw	r2,48(r2)
80092bcc:	18800526 	beq	r3,r2,80092be4 <altera_avalon_jtag_uart_close+0x54>
80092bd0:	e0bffe17 	ldw	r2,-8(fp)
80092bd4:	10c00917 	ldw	r3,36(r2)
80092bd8:	e0bffe17 	ldw	r2,-8(fp)
80092bdc:	10800117 	ldw	r2,4(r2)
80092be0:	18bff136 	bltu	r3,r2,80092ba8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80092be4:	0005883a 	mov	r2,zero
}
80092be8:	e037883a 	mov	sp,fp
80092bec:	df000017 	ldw	fp,0(sp)
80092bf0:	dec00104 	addi	sp,sp,4
80092bf4:	f800283a 	ret

80092bf8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
80092bf8:	defffa04 	addi	sp,sp,-24
80092bfc:	df000515 	stw	fp,20(sp)
80092c00:	df000504 	addi	fp,sp,20
80092c04:	e13ffd15 	stw	r4,-12(fp)
80092c08:	e17ffe15 	stw	r5,-8(fp)
80092c0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
80092c10:	00bff9c4 	movi	r2,-25
80092c14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
80092c18:	e0bffe17 	ldw	r2,-8(fp)
80092c1c:	10da8060 	cmpeqi	r3,r2,27137
80092c20:	1800031e 	bne	r3,zero,80092c30 <altera_avalon_jtag_uart_ioctl+0x38>
80092c24:	109a80a0 	cmpeqi	r2,r2,27138
80092c28:	1000181e 	bne	r2,zero,80092c8c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
80092c2c:	00002906 	br	80092cd4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
80092c30:	e0bffd17 	ldw	r2,-12(fp)
80092c34:	10c00117 	ldw	r3,4(r2)
80092c38:	00a00034 	movhi	r2,32768
80092c3c:	10bfffc4 	addi	r2,r2,-1
80092c40:	18802126 	beq	r3,r2,80092cc8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
80092c44:	e0bfff17 	ldw	r2,-4(fp)
80092c48:	10800017 	ldw	r2,0(r2)
80092c4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
80092c50:	e0bffc17 	ldw	r2,-16(fp)
80092c54:	10800090 	cmplti	r2,r2,2
80092c58:	1000061e 	bne	r2,zero,80092c74 <altera_avalon_jtag_uart_ioctl+0x7c>
80092c5c:	e0fffc17 	ldw	r3,-16(fp)
80092c60:	00a00034 	movhi	r2,32768
80092c64:	10bfffc4 	addi	r2,r2,-1
80092c68:	18800226 	beq	r3,r2,80092c74 <altera_avalon_jtag_uart_ioctl+0x7c>
80092c6c:	e0bffc17 	ldw	r2,-16(fp)
80092c70:	00000206 	br	80092c7c <altera_avalon_jtag_uart_ioctl+0x84>
80092c74:	00a00034 	movhi	r2,32768
80092c78:	10bfff84 	addi	r2,r2,-2
80092c7c:	e0fffd17 	ldw	r3,-12(fp)
80092c80:	18800115 	stw	r2,4(r3)
      rc = 0;
80092c84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80092c88:	00000f06 	br	80092cc8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
80092c8c:	e0bffd17 	ldw	r2,-12(fp)
80092c90:	10c00117 	ldw	r3,4(r2)
80092c94:	00a00034 	movhi	r2,32768
80092c98:	10bfffc4 	addi	r2,r2,-1
80092c9c:	18800c26 	beq	r3,r2,80092cd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
80092ca0:	e0bffd17 	ldw	r2,-12(fp)
80092ca4:	10c00917 	ldw	r3,36(r2)
80092ca8:	e0bffd17 	ldw	r2,-12(fp)
80092cac:	10800117 	ldw	r2,4(r2)
80092cb0:	1885803a 	cmpltu	r2,r3,r2
80092cb4:	10c03fcc 	andi	r3,r2,255
80092cb8:	e0bfff17 	ldw	r2,-4(fp)
80092cbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
80092cc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80092cc4:	00000206 	br	80092cd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
80092cc8:	0001883a 	nop
80092ccc:	00000106 	br	80092cd4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
80092cd0:	0001883a 	nop

  default:
    break;
  }

  return rc;
80092cd4:	e0bffb17 	ldw	r2,-20(fp)
}
80092cd8:	e037883a 	mov	sp,fp
80092cdc:	df000017 	ldw	fp,0(sp)
80092ce0:	dec00104 	addi	sp,sp,4
80092ce4:	f800283a 	ret

80092ce8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
80092ce8:	defff304 	addi	sp,sp,-52
80092cec:	dfc00c15 	stw	ra,48(sp)
80092cf0:	df000b15 	stw	fp,44(sp)
80092cf4:	df000b04 	addi	fp,sp,44
80092cf8:	e13ffc15 	stw	r4,-16(fp)
80092cfc:	e17ffd15 	stw	r5,-12(fp)
80092d00:	e1bffe15 	stw	r6,-8(fp)
80092d04:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
80092d08:	e0bffd17 	ldw	r2,-12(fp)
80092d0c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80092d10:	00004706 	br	80092e30 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
80092d14:	e0bffc17 	ldw	r2,-16(fp)
80092d18:	10800a17 	ldw	r2,40(r2)
80092d1c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
80092d20:	e0bffc17 	ldw	r2,-16(fp)
80092d24:	10800b17 	ldw	r2,44(r2)
80092d28:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
80092d2c:	e0fff717 	ldw	r3,-36(fp)
80092d30:	e0bff817 	ldw	r2,-32(fp)
80092d34:	18800536 	bltu	r3,r2,80092d4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
80092d38:	e0fff717 	ldw	r3,-36(fp)
80092d3c:	e0bff817 	ldw	r2,-32(fp)
80092d40:	1885c83a 	sub	r2,r3,r2
80092d44:	e0bff615 	stw	r2,-40(fp)
80092d48:	00000406 	br	80092d5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
80092d4c:	00c20004 	movi	r3,2048
80092d50:	e0bff817 	ldw	r2,-32(fp)
80092d54:	1885c83a 	sub	r2,r3,r2
80092d58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80092d5c:	e0bff617 	ldw	r2,-40(fp)
80092d60:	10001e26 	beq	r2,zero,80092ddc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
80092d64:	e0fffe17 	ldw	r3,-8(fp)
80092d68:	e0bff617 	ldw	r2,-40(fp)
80092d6c:	1880022e 	bgeu	r3,r2,80092d78 <altera_avalon_jtag_uart_read+0x90>
        n = space;
80092d70:	e0bffe17 	ldw	r2,-8(fp)
80092d74:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
80092d78:	e0bffc17 	ldw	r2,-16(fp)
80092d7c:	10c00e04 	addi	r3,r2,56
80092d80:	e0bff817 	ldw	r2,-32(fp)
80092d84:	1885883a 	add	r2,r3,r2
80092d88:	e1bff617 	ldw	r6,-40(fp)
80092d8c:	100b883a 	mov	r5,r2
80092d90:	e13ff517 	ldw	r4,-44(fp)
80092d94:	0089c980 	call	80089c98 <memcpy>
      ptr   += n;
80092d98:	e0fff517 	ldw	r3,-44(fp)
80092d9c:	e0bff617 	ldw	r2,-40(fp)
80092da0:	1885883a 	add	r2,r3,r2
80092da4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
80092da8:	e0fffe17 	ldw	r3,-8(fp)
80092dac:	e0bff617 	ldw	r2,-40(fp)
80092db0:	1885c83a 	sub	r2,r3,r2
80092db4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80092db8:	e0fff817 	ldw	r3,-32(fp)
80092dbc:	e0bff617 	ldw	r2,-40(fp)
80092dc0:	1885883a 	add	r2,r3,r2
80092dc4:	10c1ffcc 	andi	r3,r2,2047
80092dc8:	e0bffc17 	ldw	r2,-16(fp)
80092dcc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
80092dd0:	e0bffe17 	ldw	r2,-8(fp)
80092dd4:	00bfcf16 	blt	zero,r2,80092d14 <altera_avalon_jtag_uart_read+0x2c>
80092dd8:	00000106 	br	80092de0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
80092ddc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80092de0:	e0fff517 	ldw	r3,-44(fp)
80092de4:	e0bffd17 	ldw	r2,-12(fp)
80092de8:	1880141e 	bne	r3,r2,80092e3c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
80092dec:	e0bfff17 	ldw	r2,-4(fp)
80092df0:	1090000c 	andi	r2,r2,16384
80092df4:	1000131e 	bne	r2,zero,80092e44 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
80092df8:	0001883a 	nop
80092dfc:	e0bffc17 	ldw	r2,-16(fp)
80092e00:	10c00a17 	ldw	r3,40(r2)
80092e04:	e0bff717 	ldw	r2,-36(fp)
80092e08:	1880051e 	bne	r3,r2,80092e20 <altera_avalon_jtag_uart_read+0x138>
80092e0c:	e0bffc17 	ldw	r2,-16(fp)
80092e10:	10c00917 	ldw	r3,36(r2)
80092e14:	e0bffc17 	ldw	r2,-16(fp)
80092e18:	10800117 	ldw	r2,4(r2)
80092e1c:	18bff736 	bltu	r3,r2,80092dfc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80092e20:	e0bffc17 	ldw	r2,-16(fp)
80092e24:	10c00a17 	ldw	r3,40(r2)
80092e28:	e0bff717 	ldw	r2,-36(fp)
80092e2c:	18800726 	beq	r3,r2,80092e4c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80092e30:	e0bffe17 	ldw	r2,-8(fp)
80092e34:	00bfb716 	blt	zero,r2,80092d14 <altera_avalon_jtag_uart_read+0x2c>
80092e38:	00000506 	br	80092e50 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
80092e3c:	0001883a 	nop
80092e40:	00000306 	br	80092e50 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
80092e44:	0001883a 	nop
80092e48:	00000106 	br	80092e50 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
80092e4c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80092e50:	e0fff517 	ldw	r3,-44(fp)
80092e54:	e0bffd17 	ldw	r2,-12(fp)
80092e58:	18801826 	beq	r3,r2,80092ebc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80092e5c:	0005303a 	rdctl	r2,status
80092e60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80092e64:	e0fffb17 	ldw	r3,-20(fp)
80092e68:	00bfff84 	movi	r2,-2
80092e6c:	1884703a 	and	r2,r3,r2
80092e70:	1001703a 	wrctl	status,r2
  
  return context;
80092e74:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
80092e78:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80092e7c:	e0bffc17 	ldw	r2,-16(fp)
80092e80:	10800817 	ldw	r2,32(r2)
80092e84:	10c00054 	ori	r3,r2,1
80092e88:	e0bffc17 	ldw	r2,-16(fp)
80092e8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80092e90:	e0bffc17 	ldw	r2,-16(fp)
80092e94:	10800017 	ldw	r2,0(r2)
80092e98:	10800104 	addi	r2,r2,4
80092e9c:	1007883a 	mov	r3,r2
80092ea0:	e0bffc17 	ldw	r2,-16(fp)
80092ea4:	10800817 	ldw	r2,32(r2)
80092ea8:	18800035 	stwio	r2,0(r3)
80092eac:	e0bffa17 	ldw	r2,-24(fp)
80092eb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80092eb4:	e0bff917 	ldw	r2,-28(fp)
80092eb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
80092ebc:	e0fff517 	ldw	r3,-44(fp)
80092ec0:	e0bffd17 	ldw	r2,-12(fp)
80092ec4:	18800426 	beq	r3,r2,80092ed8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
80092ec8:	e0fff517 	ldw	r3,-44(fp)
80092ecc:	e0bffd17 	ldw	r2,-12(fp)
80092ed0:	1885c83a 	sub	r2,r3,r2
80092ed4:	00000606 	br	80092ef0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
80092ed8:	e0bfff17 	ldw	r2,-4(fp)
80092edc:	1090000c 	andi	r2,r2,16384
80092ee0:	10000226 	beq	r2,zero,80092eec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80092ee4:	00bffd44 	movi	r2,-11
80092ee8:	00000106 	br	80092ef0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
80092eec:	00bffec4 	movi	r2,-5
}
80092ef0:	e037883a 	mov	sp,fp
80092ef4:	dfc00117 	ldw	ra,4(sp)
80092ef8:	df000017 	ldw	fp,0(sp)
80092efc:	dec00204 	addi	sp,sp,8
80092f00:	f800283a 	ret

80092f04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80092f04:	defff304 	addi	sp,sp,-52
80092f08:	dfc00c15 	stw	ra,48(sp)
80092f0c:	df000b15 	stw	fp,44(sp)
80092f10:	df000b04 	addi	fp,sp,44
80092f14:	e13ffc15 	stw	r4,-16(fp)
80092f18:	e17ffd15 	stw	r5,-12(fp)
80092f1c:	e1bffe15 	stw	r6,-8(fp)
80092f20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
80092f24:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
80092f28:	e0bffd17 	ldw	r2,-12(fp)
80092f2c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80092f30:	00003706 	br	80093010 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
80092f34:	e0bffc17 	ldw	r2,-16(fp)
80092f38:	10800c17 	ldw	r2,48(r2)
80092f3c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
80092f40:	e0bffc17 	ldw	r2,-16(fp)
80092f44:	10800d17 	ldw	r2,52(r2)
80092f48:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
80092f4c:	e0fff917 	ldw	r3,-28(fp)
80092f50:	e0bff517 	ldw	r2,-44(fp)
80092f54:	1880062e 	bgeu	r3,r2,80092f70 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
80092f58:	e0fff517 	ldw	r3,-44(fp)
80092f5c:	e0bff917 	ldw	r2,-28(fp)
80092f60:	1885c83a 	sub	r2,r3,r2
80092f64:	10bfffc4 	addi	r2,r2,-1
80092f68:	e0bff615 	stw	r2,-40(fp)
80092f6c:	00000b06 	br	80092f9c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
80092f70:	e0bff517 	ldw	r2,-44(fp)
80092f74:	10000526 	beq	r2,zero,80092f8c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80092f78:	00c20004 	movi	r3,2048
80092f7c:	e0bff917 	ldw	r2,-28(fp)
80092f80:	1885c83a 	sub	r2,r3,r2
80092f84:	e0bff615 	stw	r2,-40(fp)
80092f88:	00000406 	br	80092f9c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
80092f8c:	00c1ffc4 	movi	r3,2047
80092f90:	e0bff917 	ldw	r2,-28(fp)
80092f94:	1885c83a 	sub	r2,r3,r2
80092f98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80092f9c:	e0bff617 	ldw	r2,-40(fp)
80092fa0:	10001e26 	beq	r2,zero,8009301c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
80092fa4:	e0fffe17 	ldw	r3,-8(fp)
80092fa8:	e0bff617 	ldw	r2,-40(fp)
80092fac:	1880022e 	bgeu	r3,r2,80092fb8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
80092fb0:	e0bffe17 	ldw	r2,-8(fp)
80092fb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
80092fb8:	e0bffc17 	ldw	r2,-16(fp)
80092fbc:	10c20e04 	addi	r3,r2,2104
80092fc0:	e0bff917 	ldw	r2,-28(fp)
80092fc4:	1885883a 	add	r2,r3,r2
80092fc8:	e1bff617 	ldw	r6,-40(fp)
80092fcc:	e17ffd17 	ldw	r5,-12(fp)
80092fd0:	1009883a 	mov	r4,r2
80092fd4:	0089c980 	call	80089c98 <memcpy>
      ptr   += n;
80092fd8:	e0fffd17 	ldw	r3,-12(fp)
80092fdc:	e0bff617 	ldw	r2,-40(fp)
80092fe0:	1885883a 	add	r2,r3,r2
80092fe4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
80092fe8:	e0fffe17 	ldw	r3,-8(fp)
80092fec:	e0bff617 	ldw	r2,-40(fp)
80092ff0:	1885c83a 	sub	r2,r3,r2
80092ff4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80092ff8:	e0fff917 	ldw	r3,-28(fp)
80092ffc:	e0bff617 	ldw	r2,-40(fp)
80093000:	1885883a 	add	r2,r3,r2
80093004:	10c1ffcc 	andi	r3,r2,2047
80093008:	e0bffc17 	ldw	r2,-16(fp)
8009300c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80093010:	e0bffe17 	ldw	r2,-8(fp)
80093014:	00bfc716 	blt	zero,r2,80092f34 <altera_avalon_jtag_uart_write+0x30>
80093018:	00000106 	br	80093020 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8009301c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093020:	0005303a 	rdctl	r2,status
80093024:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80093028:	e0fffb17 	ldw	r3,-20(fp)
8009302c:	00bfff84 	movi	r2,-2
80093030:	1884703a 	and	r2,r3,r2
80093034:	1001703a 	wrctl	status,r2
  
  return context;
80093038:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8009303c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80093040:	e0bffc17 	ldw	r2,-16(fp)
80093044:	10800817 	ldw	r2,32(r2)
80093048:	10c00094 	ori	r3,r2,2
8009304c:	e0bffc17 	ldw	r2,-16(fp)
80093050:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80093054:	e0bffc17 	ldw	r2,-16(fp)
80093058:	10800017 	ldw	r2,0(r2)
8009305c:	10800104 	addi	r2,r2,4
80093060:	1007883a 	mov	r3,r2
80093064:	e0bffc17 	ldw	r2,-16(fp)
80093068:	10800817 	ldw	r2,32(r2)
8009306c:	18800035 	stwio	r2,0(r3)
80093070:	e0bffa17 	ldw	r2,-24(fp)
80093074:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093078:	e0bff817 	ldw	r2,-32(fp)
8009307c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
80093080:	e0bffe17 	ldw	r2,-8(fp)
80093084:	0080100e 	bge	zero,r2,800930c8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
80093088:	e0bfff17 	ldw	r2,-4(fp)
8009308c:	1090000c 	andi	r2,r2,16384
80093090:	1000101e 	bne	r2,zero,800930d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
80093094:	0001883a 	nop
80093098:	e0bffc17 	ldw	r2,-16(fp)
8009309c:	10c00d17 	ldw	r3,52(r2)
800930a0:	e0bff517 	ldw	r2,-44(fp)
800930a4:	1880051e 	bne	r3,r2,800930bc <altera_avalon_jtag_uart_write+0x1b8>
800930a8:	e0bffc17 	ldw	r2,-16(fp)
800930ac:	10c00917 	ldw	r3,36(r2)
800930b0:	e0bffc17 	ldw	r2,-16(fp)
800930b4:	10800117 	ldw	r2,4(r2)
800930b8:	18bff736 	bltu	r3,r2,80093098 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
800930bc:	e0bffc17 	ldw	r2,-16(fp)
800930c0:	10800917 	ldw	r2,36(r2)
800930c4:	1000051e 	bne	r2,zero,800930dc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
800930c8:	e0bffe17 	ldw	r2,-8(fp)
800930cc:	00bfd016 	blt	zero,r2,80093010 <altera_avalon_jtag_uart_write+0x10c>
800930d0:	00000306 	br	800930e0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
800930d4:	0001883a 	nop
800930d8:	00000106 	br	800930e0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
800930dc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
800930e0:	e0fffd17 	ldw	r3,-12(fp)
800930e4:	e0bff717 	ldw	r2,-36(fp)
800930e8:	18800426 	beq	r3,r2,800930fc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
800930ec:	e0fffd17 	ldw	r3,-12(fp)
800930f0:	e0bff717 	ldw	r2,-36(fp)
800930f4:	1885c83a 	sub	r2,r3,r2
800930f8:	00000606 	br	80093114 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
800930fc:	e0bfff17 	ldw	r2,-4(fp)
80093100:	1090000c 	andi	r2,r2,16384
80093104:	10000226 	beq	r2,zero,80093110 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
80093108:	00bffd44 	movi	r2,-11
8009310c:	00000106 	br	80093114 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
80093110:	00bffec4 	movi	r2,-5
}
80093114:	e037883a 	mov	sp,fp
80093118:	dfc00117 	ldw	ra,4(sp)
8009311c:	df000017 	ldw	fp,0(sp)
80093120:	dec00204 	addi	sp,sp,8
80093124:	f800283a 	ret

80093128 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
80093128:	defffa04 	addi	sp,sp,-24
8009312c:	dfc00515 	stw	ra,20(sp)
80093130:	df000415 	stw	fp,16(sp)
80093134:	df000404 	addi	fp,sp,16
80093138:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8009313c:	0007883a 	mov	r3,zero
80093140:	e0bfff17 	ldw	r2,-4(fp)
80093144:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
80093148:	e0bfff17 	ldw	r2,-4(fp)
8009314c:	10800104 	addi	r2,r2,4
80093150:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093154:	0005303a 	rdctl	r2,status
80093158:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009315c:	e0fffd17 	ldw	r3,-12(fp)
80093160:	00bfff84 	movi	r2,-2
80093164:	1884703a 	and	r2,r3,r2
80093168:	1001703a 	wrctl	status,r2
  
  return context;
8009316c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
80093170:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
80093174:	00923340 	call	80092334 <alt_tick>
80093178:	e0bffc17 	ldw	r2,-16(fp)
8009317c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093180:	e0bffe17 	ldw	r2,-8(fp)
80093184:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
80093188:	0001883a 	nop
8009318c:	e037883a 	mov	sp,fp
80093190:	dfc00117 	ldw	ra,4(sp)
80093194:	df000017 	ldw	fp,0(sp)
80093198:	dec00204 	addi	sp,sp,8
8009319c:	f800283a 	ret

800931a0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
800931a0:	defff804 	addi	sp,sp,-32
800931a4:	dfc00715 	stw	ra,28(sp)
800931a8:	df000615 	stw	fp,24(sp)
800931ac:	df000604 	addi	fp,sp,24
800931b0:	e13ffc15 	stw	r4,-16(fp)
800931b4:	e17ffd15 	stw	r5,-12(fp)
800931b8:	e1bffe15 	stw	r6,-8(fp)
800931bc:	e1ffff15 	stw	r7,-4(fp)
800931c0:	e0bfff17 	ldw	r2,-4(fp)
800931c4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
800931c8:	d0a74a17 	ldw	r2,-25304(gp)
800931cc:	1000021e 	bne	r2,zero,800931d8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
800931d0:	e0bffb17 	ldw	r2,-20(fp)
800931d4:	d0a74a15 	stw	r2,-25304(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
800931d8:	e0bffc17 	ldw	r2,-16(fp)
800931dc:	10800104 	addi	r2,r2,4
800931e0:	00c001c4 	movi	r3,7
800931e4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
800931e8:	d8000015 	stw	zero,0(sp)
800931ec:	e1fffc17 	ldw	r7,-16(fp)
800931f0:	01a00274 	movhi	r6,32777
800931f4:	318c4a04 	addi	r6,r6,12584
800931f8:	e17ffe17 	ldw	r5,-8(fp)
800931fc:	e13ffd17 	ldw	r4,-12(fp)
80093200:	0091a0c0 	call	80091a0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
80093204:	0001883a 	nop
80093208:	e037883a 	mov	sp,fp
8009320c:	dfc00117 	ldw	ra,4(sp)
80093210:	df000017 	ldw	fp,0(sp)
80093214:	dec00204 	addi	sp,sp,8
80093218:	f800283a 	ret

8009321c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8009321c:	defffe04 	addi	sp,sp,-8
80093220:	dfc00115 	stw	ra,4(sp)
80093224:	df000015 	stw	fp,0(sp)
80093228:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8009322c:	d0a01717 	ldw	r2,-32676(gp)
80093230:	10000326 	beq	r2,zero,80093240 <alt_get_errno+0x24>
80093234:	d0a01717 	ldw	r2,-32676(gp)
80093238:	103ee83a 	callr	r2
8009323c:	00000106 	br	80093244 <alt_get_errno+0x28>
80093240:	d0a74504 	addi	r2,gp,-25324
}
80093244:	e037883a 	mov	sp,fp
80093248:	dfc00117 	ldw	ra,4(sp)
8009324c:	df000017 	ldw	fp,0(sp)
80093250:	dec00204 	addi	sp,sp,8
80093254:	f800283a 	ret

80093258 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
80093258:	defffc04 	addi	sp,sp,-16
8009325c:	df000315 	stw	fp,12(sp)
80093260:	df000304 	addi	fp,sp,12
80093264:	e13ffd15 	stw	r4,-12(fp)
80093268:	e17ffe15 	stw	r5,-8(fp)
8009326c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80093270:	e0bffd17 	ldw	r2,-12(fp)
80093274:	10800037 	ldwio	r2,0(r2)
80093278:	1080010c 	andi	r2,r2,4
8009327c:	10000226 	beq	r2,zero,80093288 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
80093280:	00bff904 	movi	r2,-28
80093284:	00001506 	br	800932dc <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
80093288:	e0bfff17 	ldw	r2,-4(fp)
8009328c:	10800017 	ldw	r2,0(r2)
80093290:	1007883a 	mov	r3,r2
80093294:	e0bffe17 	ldw	r2,-8(fp)
80093298:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8009329c:	e0bffe17 	ldw	r2,-8(fp)
800932a0:	10800104 	addi	r2,r2,4
800932a4:	e0ffff17 	ldw	r3,-4(fp)
800932a8:	18c00117 	ldw	r3,4(r3)
800932ac:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
800932b0:	e0bffe17 	ldw	r2,-8(fp)
800932b4:	10800204 	addi	r2,r2,8
800932b8:	e0ffff17 	ldw	r3,-4(fp)
800932bc:	18c00217 	ldw	r3,8(r3)
800932c0:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
800932c4:	e0bffe17 	ldw	r2,-8(fp)
800932c8:	10800304 	addi	r2,r2,12
800932cc:	e0ffff17 	ldw	r3,-4(fp)
800932d0:	18c00317 	ldw	r3,12(r3)
800932d4:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
800932d8:	0005883a 	mov	r2,zero
}
800932dc:	e037883a 	mov	sp,fp
800932e0:	df000017 	ldw	fp,0(sp)
800932e4:	dec00104 	addi	sp,sp,4
800932e8:	f800283a 	ret

800932ec <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
800932ec:	defffc04 	addi	sp,sp,-16
800932f0:	df000315 	stw	fp,12(sp)
800932f4:	df000304 	addi	fp,sp,12
800932f8:	e13ffd15 	stw	r4,-12(fp)
800932fc:	e17ffe15 	stw	r5,-8(fp)
80093300:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80093304:	e0bffd17 	ldw	r2,-12(fp)
80093308:	10800037 	ldwio	r2,0(r2)
8009330c:	1080010c 	andi	r2,r2,4
80093310:	10000226 	beq	r2,zero,8009331c <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
80093314:	00bff904 	movi	r2,-28
80093318:	00003b06 	br	80093408 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8009331c:	e0bfff17 	ldw	r2,-4(fp)
80093320:	10800017 	ldw	r2,0(r2)
80093324:	1007883a 	mov	r3,r2
80093328:	e0bffe17 	ldw	r2,-8(fp)
8009332c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
80093330:	e0bffe17 	ldw	r2,-8(fp)
80093334:	10800104 	addi	r2,r2,4
80093338:	e0ffff17 	ldw	r3,-4(fp)
8009333c:	18c00117 	ldw	r3,4(r3)
80093340:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
80093344:	e0bffe17 	ldw	r2,-8(fp)
80093348:	10800204 	addi	r2,r2,8
8009334c:	e0ffff17 	ldw	r3,-4(fp)
80093350:	18c00217 	ldw	r3,8(r3)
80093354:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
80093358:	e0bffe17 	ldw	r2,-8(fp)
8009335c:	10800304 	addi	r2,r2,12
80093360:	e0ffff17 	ldw	r3,-4(fp)
80093364:	18c0030b 	ldhu	r3,12(r3)
80093368:	18ffffcc 	andi	r3,r3,65535
8009336c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
80093370:	e0bffe17 	ldw	r2,-8(fp)
80093374:	10800384 	addi	r2,r2,14
80093378:	e0ffff17 	ldw	r3,-4(fp)
8009337c:	18c00383 	ldbu	r3,14(r3)
80093380:	18c03fcc 	andi	r3,r3,255
80093384:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
80093388:	e0bffe17 	ldw	r2,-8(fp)
8009338c:	108003c4 	addi	r2,r2,15
80093390:	e0ffff17 	ldw	r3,-4(fp)
80093394:	18c003c3 	ldbu	r3,15(r3)
80093398:	18c03fcc 	andi	r3,r3,255
8009339c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
800933a0:	e0bffe17 	ldw	r2,-8(fp)
800933a4:	10800404 	addi	r2,r2,16
800933a8:	e0ffff17 	ldw	r3,-4(fp)
800933ac:	18c0040b 	ldhu	r3,16(r3)
800933b0:	18ffffcc 	andi	r3,r3,65535
800933b4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
800933b8:	e0bffe17 	ldw	r2,-8(fp)
800933bc:	10800484 	addi	r2,r2,18
800933c0:	e0ffff17 	ldw	r3,-4(fp)
800933c4:	18c0048b 	ldhu	r3,18(r3)
800933c8:	18ffffcc 	andi	r3,r3,65535
800933cc:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
800933d0:	e0bffe17 	ldw	r2,-8(fp)
800933d4:	10800504 	addi	r2,r2,20
800933d8:	0007883a 	mov	r3,zero
800933dc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
800933e0:	e0bffe17 	ldw	r2,-8(fp)
800933e4:	10800604 	addi	r2,r2,24
800933e8:	0007883a 	mov	r3,zero
800933ec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
800933f0:	e0bffe17 	ldw	r2,-8(fp)
800933f4:	10800704 	addi	r2,r2,28
800933f8:	e0ffff17 	ldw	r3,-4(fp)
800933fc:	18c00717 	ldw	r3,28(r3)
80093400:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
80093404:	0005883a 	mov	r2,zero
}
80093408:	e037883a 	mov	sp,fp
8009340c:	df000017 	ldw	fp,0(sp)
80093410:	dec00104 	addi	sp,sp,4
80093414:	f800283a 	ret

80093418 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
80093418:	defff804 	addi	sp,sp,-32
8009341c:	dfc00715 	stw	ra,28(sp)
80093420:	df000615 	stw	fp,24(sp)
80093424:	df000604 	addi	fp,sp,24
80093428:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8009342c:	e0bfff17 	ldw	r2,-4(fp)
80093430:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
80093434:	e0bffa17 	ldw	r2,-24(fp)
80093438:	10801783 	ldbu	r2,94(r2)
8009343c:	10803fcc 	andi	r2,r2,255
80093440:	10001126 	beq	r2,zero,80093488 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80093444:	e0bffa17 	ldw	r2,-24(fp)
80093448:	10800617 	ldw	r2,24(r2)
8009344c:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80093450:	1007883a 	mov	r3,r2
80093454:	00bffdc4 	movi	r2,-9
80093458:	1884703a 	and	r2,r3,r2
8009345c:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80093460:	e0bffa17 	ldw	r2,-24(fp)
80093464:	10800617 	ldw	r2,24(r2)
80093468:	e0fffb17 	ldw	r3,-20(fp)
8009346c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
80093470:	e0bffa17 	ldw	r2,-24(fp)
80093474:	10800617 	ldw	r2,24(r2)
80093478:	10800404 	addi	r2,r2,16
8009347c:	00c00044 	movi	r3,1
80093480:	10c00035 	stwio	r3,0(r2)
80093484:	00001106 	br	800934cc <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80093488:	e0bffa17 	ldw	r2,-24(fp)
8009348c:	10800317 	ldw	r2,12(r2)
80093490:	10800104 	addi	r2,r2,4
80093494:	10800037 	ldwio	r2,0(r2)
80093498:	1007883a 	mov	r3,r2
8009349c:	00bffbc4 	movi	r2,-17
800934a0:	1884703a 	and	r2,r3,r2
800934a4:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
800934a8:	e0bffa17 	ldw	r2,-24(fp)
800934ac:	10800317 	ldw	r2,12(r2)
800934b0:	10800104 	addi	r2,r2,4
800934b4:	e0fffb17 	ldw	r3,-20(fp)
800934b8:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
800934bc:	e0bffa17 	ldw	r2,-24(fp)
800934c0:	10800317 	ldw	r2,12(r2)
800934c4:	00c08004 	movi	r3,512
800934c8:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
800934cc:	e0bffa17 	ldw	r2,-24(fp)
800934d0:	10800b17 	ldw	r2,44(r2)
800934d4:	10001226 	beq	r2,zero,80093520 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800934d8:	0005303a 	rdctl	r2,status
800934dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800934e0:	e0fffd17 	ldw	r3,-12(fp)
800934e4:	00bfff84 	movi	r2,-2
800934e8:	1884703a 	and	r2,r3,r2
800934ec:	1001703a 	wrctl	status,r2
  
  return context;
800934f0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
800934f4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
800934f8:	e0bffa17 	ldw	r2,-24(fp)
800934fc:	10800b17 	ldw	r2,44(r2)
80093500:	e0fffa17 	ldw	r3,-24(fp)
80093504:	18c00c17 	ldw	r3,48(r3)
80093508:	1809883a 	mov	r4,r3
8009350c:	103ee83a 	callr	r2
80093510:	e0bffc17 	ldw	r2,-16(fp)
80093514:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093518:	e0bffe17 	ldw	r2,-8(fp)
8009351c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
80093520:	e0bffa17 	ldw	r2,-24(fp)
80093524:	10801783 	ldbu	r2,94(r2)
80093528:	10803fcc 	andi	r2,r2,255
8009352c:	10000a26 	beq	r2,zero,80093558 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80093530:	e0bffa17 	ldw	r2,-24(fp)
80093534:	10800617 	ldw	r2,24(r2)
80093538:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8009353c:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
80093540:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80093544:	e0bffa17 	ldw	r2,-24(fp)
80093548:	10800617 	ldw	r2,24(r2)
8009354c:	e0fffb17 	ldw	r3,-20(fp)
80093550:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
80093554:	00000c06 	br	80093588 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80093558:	e0bffa17 	ldw	r2,-24(fp)
8009355c:	10800317 	ldw	r2,12(r2)
80093560:	10800104 	addi	r2,r2,4
80093564:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
80093568:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8009356c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80093570:	e0bffa17 	ldw	r2,-24(fp)
80093574:	10800317 	ldw	r2,12(r2)
80093578:	10800104 	addi	r2,r2,4
8009357c:	e0fffb17 	ldw	r3,-20(fp)
80093580:	10c00035 	stwio	r3,0(r2)
    }

    return;
80093584:	0001883a 	nop
}
80093588:	e037883a 	mov	sp,fp
8009358c:	dfc00117 	ldw	ra,4(sp)
80093590:	df000017 	ldw	fp,0(sp)
80093594:	dec00204 	addi	sp,sp,8
80093598:	f800283a 	ret

8009359c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8009359c:	defffb04 	addi	sp,sp,-20
800935a0:	df000415 	stw	fp,16(sp)
800935a4:	df000404 	addi	fp,sp,16
800935a8:	e13ffc15 	stw	r4,-16(fp)
800935ac:	e17ffd15 	stw	r5,-12(fp)
800935b0:	e1bffe15 	stw	r6,-8(fp)
800935b4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
800935b8:	e0bffc17 	ldw	r2,-16(fp)
800935bc:	10c01217 	ldw	r3,72(r2)
800935c0:	e0800117 	ldw	r2,4(fp)
800935c4:	18800436 	bltu	r3,r2,800935d8 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
800935c8:	e0bffc17 	ldw	r2,-16(fp)
800935cc:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
800935d0:	10803fcc 	andi	r2,r2,255
800935d4:	10000226 	beq	r2,zero,800935e0 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
800935d8:	00bffa84 	movi	r2,-22
800935dc:	00000e06 	br	80093618 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
800935e0:	e0bffd17 	ldw	r2,-12(fp)
800935e4:	e0fffe17 	ldw	r3,-8(fp)
800935e8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
800935ec:	e0bffd17 	ldw	r2,-12(fp)
800935f0:	e0ffff17 	ldw	r3,-4(fp)
800935f4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
800935f8:	e0bffd17 	ldw	r2,-12(fp)
800935fc:	e0c00117 	ldw	r3,4(fp)
80093600:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80093604:	e0800217 	ldw	r2,8(fp)
80093608:	10e00034 	orhi	r3,r2,32768
8009360c:	e0bffd17 	ldw	r2,-12(fp)
80093610:	10c00315 	stw	r3,12(r2)
    
    return 0;
80093614:	0005883a 	mov	r2,zero
}
80093618:	e037883a 	mov	sp,fp
8009361c:	df000017 	ldw	fp,0(sp)
80093620:	dec00104 	addi	sp,sp,4
80093624:	f800283a 	ret

80093628 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
80093628:	defff604 	addi	sp,sp,-40
8009362c:	df000915 	stw	fp,36(sp)
80093630:	df000904 	addi	fp,sp,36
80093634:	e13ff715 	stw	r4,-36(fp)
80093638:	e17ff815 	stw	r5,-32(fp)
8009363c:	e1bff915 	stw	r6,-28(fp)
80093640:	e1fffa15 	stw	r7,-24(fp)
80093644:	e1800317 	ldw	r6,12(fp)
80093648:	e1400417 	ldw	r5,16(fp)
8009364c:	e1000517 	ldw	r4,20(fp)
80093650:	e0c00617 	ldw	r3,24(fp)
80093654:	e0800717 	ldw	r2,28(fp)
80093658:	e1bffb0d 	sth	r6,-20(fp)
8009365c:	e17ffc05 	stb	r5,-16(fp)
80093660:	e13ffd05 	stb	r4,-12(fp)
80093664:	e0fffe0d 	sth	r3,-8(fp)
80093668:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8009366c:	e0bff717 	ldw	r2,-36(fp)
80093670:	10c01217 	ldw	r3,72(r2)
80093674:	e0800117 	ldw	r2,4(fp)
80093678:	18801936 	bltu	r3,r2,800936e0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8009367c:	e13ff717 	ldw	r4,-36(fp)
80093680:	20801317 	ldw	r2,76(r4)
80093684:	20c01417 	ldw	r3,80(r4)
80093688:	e13ffe0b 	ldhu	r4,-8(fp)
8009368c:	213fffcc 	andi	r4,r4,65535
80093690:	2015883a 	mov	r10,r4
80093694:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80093698:	1ac01136 	bltu	r3,r11,800936e0 <alt_msgdma_construct_extended_descriptor+0xb8>
8009369c:	58c0011e 	bne	r11,r3,800936a4 <alt_msgdma_construct_extended_descriptor+0x7c>
800936a0:	12800f36 	bltu	r2,r10,800936e0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
800936a4:	e13ff717 	ldw	r4,-36(fp)
800936a8:	20801317 	ldw	r2,76(r4)
800936ac:	20c01417 	ldw	r3,80(r4)
800936b0:	e13fff0b 	ldhu	r4,-4(fp)
800936b4:	213fffcc 	andi	r4,r4,65535
800936b8:	2011883a 	mov	r8,r4
800936bc:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
800936c0:	1a400736 	bltu	r3,r9,800936e0 <alt_msgdma_construct_extended_descriptor+0xb8>
800936c4:	48c0011e 	bne	r9,r3,800936cc <alt_msgdma_construct_extended_descriptor+0xa4>
800936c8:	12000536 	bltu	r2,r8,800936e0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
800936cc:	e0bff717 	ldw	r2,-36(fp)
800936d0:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
800936d4:	10803fcc 	andi	r2,r2,255
800936d8:	10800060 	cmpeqi	r2,r2,1
800936dc:	1000021e 	bne	r2,zero,800936e8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
800936e0:	00bffa84 	movi	r2,-22
800936e4:	00002106 	br	8009376c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
800936e8:	e0bff817 	ldw	r2,-32(fp)
800936ec:	e0fff917 	ldw	r3,-28(fp)
800936f0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
800936f4:	e0bff817 	ldw	r2,-32(fp)
800936f8:	e0fffa17 	ldw	r3,-24(fp)
800936fc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80093700:	e0bff817 	ldw	r2,-32(fp)
80093704:	e0c00117 	ldw	r3,4(fp)
80093708:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8009370c:	e0bff817 	ldw	r2,-32(fp)
80093710:	e0fffb0b 	ldhu	r3,-20(fp)
80093714:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
80093718:	e0bff817 	ldw	r2,-32(fp)
8009371c:	e0fffc03 	ldbu	r3,-16(fp)
80093720:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
80093724:	e0bff817 	ldw	r2,-32(fp)
80093728:	e0fffd03 	ldbu	r3,-12(fp)
8009372c:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
80093730:	e0bff817 	ldw	r2,-32(fp)
80093734:	e0fffe0b 	ldhu	r3,-8(fp)
80093738:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8009373c:	e0bff817 	ldw	r2,-32(fp)
80093740:	e0ffff0b 	ldhu	r3,-4(fp)
80093744:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
80093748:	e0bff817 	ldw	r2,-32(fp)
8009374c:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
80093750:	e0bff817 	ldw	r2,-32(fp)
80093754:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80093758:	e0800217 	ldw	r2,8(fp)
8009375c:	10e00034 	orhi	r3,r2,32768
80093760:	e0bff817 	ldw	r2,-32(fp)
80093764:	10c00715 	stw	r3,28(r2)

  return 0 ;
80093768:	0005883a 	mov	r2,zero

}
8009376c:	e037883a 	mov	sp,fp
80093770:	df000017 	ldw	fp,0(sp)
80093774:	dec00104 	addi	sp,sp,4
80093778:	f800283a 	ret

8009377c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8009377c:	defff004 	addi	sp,sp,-64
80093780:	dfc00f15 	stw	ra,60(sp)
80093784:	df000e15 	stw	fp,56(sp)
80093788:	df000e04 	addi	fp,sp,56
8009378c:	e13ffd15 	stw	r4,-12(fp)
80093790:	e17ffe15 	stw	r5,-8(fp)
80093794:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
80093798:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8009379c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
800937a0:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
800937a4:	e0bffd17 	ldw	r2,-12(fp)
800937a8:	10800317 	ldw	r2,12(r2)
800937ac:	10800204 	addi	r2,r2,8
800937b0:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
800937b4:	10bfffcc 	andi	r2,r2,65535
800937b8:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
800937bc:	e0bffd17 	ldw	r2,-12(fp)
800937c0:	10800317 	ldw	r2,12(r2)
800937c4:	10800204 	addi	r2,r2,8
800937c8:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
800937cc:	1004d43a 	srli	r2,r2,16
800937d0:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
800937d4:	e0bffd17 	ldw	r2,-12(fp)
800937d8:	10800917 	ldw	r2,36(r2)
800937dc:	e0fff617 	ldw	r3,-40(fp)
800937e0:	1880042e 	bgeu	r3,r2,800937f4 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
800937e4:	e0bffd17 	ldw	r2,-12(fp)
800937e8:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
800937ec:	e0fff517 	ldw	r3,-44(fp)
800937f0:	18800236 	bltu	r3,r2,800937fc <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
800937f4:	00bff904 	movi	r2,-28
800937f8:	00008f06 	br	80093a38 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
800937fc:	00800804 	movi	r2,32
80093800:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093804:	0005303a 	rdctl	r2,status
80093808:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009380c:	e0fff717 	ldw	r3,-36(fp)
80093810:	00bfff84 	movi	r2,-2
80093814:	1884703a 	and	r2,r3,r2
80093818:	1001703a 	wrctl	status,r2
  
  return context;
8009381c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80093820:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80093824:	e0bffd17 	ldw	r2,-12(fp)
80093828:	10800317 	ldw	r2,12(r2)
8009382c:	10800104 	addi	r2,r2,4
80093830:	e0fff317 	ldw	r3,-52(fp)
80093834:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
80093838:	e0bffd17 	ldw	r2,-12(fp)
8009383c:	10800317 	ldw	r2,12(r2)
80093840:	e0fffd17 	ldw	r3,-12(fp)
80093844:	18c00317 	ldw	r3,12(r3)
80093848:	18c00037 	ldwio	r3,0(r3)
8009384c:	10c00035 	stwio	r3,0(r2)
80093850:	e0bff417 	ldw	r2,-48(fp)
80093854:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093858:	e0bffc17 	ldw	r2,-16(fp)
8009385c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
80093860:	e0bffe17 	ldw	r2,-8(fp)
80093864:	10001a26 	beq	r2,zero,800938d0 <alt_msgdma_descriptor_async_transfer+0x154>
80093868:	e0bfff17 	ldw	r2,-4(fp)
8009386c:	1000181e 	bne	r2,zero,800938d0 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80093870:	00000d06 	br	800938a8 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80093874:	01000044 	movi	r4,1
80093878:	00951c40 	call	800951c4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009387c:	e0bff20b 	ldhu	r2,-56(fp)
80093880:	1084e230 	cmpltui	r2,r2,5000
80093884:	1000051e 	bne	r2,zero,8009389c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
80093888:	01200274 	movhi	r4,32777
8009388c:	211b1f04 	addi	r4,r4,27772
80093890:	00959f80 	call	800959f8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
80093894:	00bff084 	movi	r2,-62
80093898:	00006706 	br	80093a38 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8009389c:	e0bff20b 	ldhu	r2,-56(fp)
800938a0:	10800044 	addi	r2,r2,1
800938a4:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
800938a8:	e0bffd17 	ldw	r2,-12(fp)
800938ac:	10c00317 	ldw	r3,12(r2)
800938b0:	e0bffd17 	ldw	r2,-12(fp)
800938b4:	10800417 	ldw	r2,16(r2)
800938b8:	e1bffe17 	ldw	r6,-8(fp)
800938bc:	100b883a 	mov	r5,r2
800938c0:	1809883a 	mov	r4,r3
800938c4:	00932580 	call	80093258 <alt_msgdma_write_standard_descriptor>
800938c8:	103fea1e 	bne	r2,zero,80093874 <alt_msgdma_descriptor_async_transfer+0xf8>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
800938cc:	00001f06 	br	8009394c <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
800938d0:	e0bffe17 	ldw	r2,-8(fp)
800938d4:	10001b1e 	bne	r2,zero,80093944 <alt_msgdma_descriptor_async_transfer+0x1c8>
800938d8:	e0bfff17 	ldw	r2,-4(fp)
800938dc:	10001926 	beq	r2,zero,80093944 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
800938e0:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
800938e4:	00000d06 	br	8009391c <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
800938e8:	01000044 	movi	r4,1
800938ec:	00951c40 	call	800951c4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
800938f0:	e0bff20b 	ldhu	r2,-56(fp)
800938f4:	1084e230 	cmpltui	r2,r2,5000
800938f8:	1000051e 	bne	r2,zero,80093910 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
800938fc:	01200274 	movhi	r4,32777
80093900:	211b3504 	addi	r4,r4,27860
80093904:	00959f80 	call	800959f8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
80093908:	00bff084 	movi	r2,-62
8009390c:	00004a06 	br	80093a38 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80093910:	e0bff20b 	ldhu	r2,-56(fp)
80093914:	10800044 	addi	r2,r2,1
80093918:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8009391c:	e0bffd17 	ldw	r2,-12(fp)
80093920:	10c00317 	ldw	r3,12(r2)
80093924:	e0bffd17 	ldw	r2,-12(fp)
80093928:	10800417 	ldw	r2,16(r2)
8009392c:	e1bfff17 	ldw	r6,-4(fp)
80093930:	100b883a 	mov	r5,r2
80093934:	1809883a 	mov	r4,r3
80093938:	00932ec0 	call	800932ec <alt_msgdma_write_extended_descriptor>
8009393c:	103fea1e 	bne	r2,zero,800938e8 <alt_msgdma_descriptor_async_transfer+0x16c>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80093940:	00000206 	br	8009394c <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80093944:	00bfffc4 	movi	r2,-1
80093948:	00003b06 	br	80093a38 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8009394c:	e0bffd17 	ldw	r2,-12(fp)
80093950:	10800b17 	ldw	r2,44(r2)
80093954:	10001c26 	beq	r2,zero,800939c8 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
80093958:	e0bffd17 	ldw	r2,-12(fp)
8009395c:	10c00d17 	ldw	r3,52(r2)
80093960:	e0bff317 	ldw	r2,-52(fp)
80093964:	1884b03a 	or	r2,r3,r2
80093968:	10800514 	ori	r2,r2,20
8009396c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80093970:	e0fff317 	ldw	r3,-52(fp)
80093974:	00bff7c4 	movi	r2,-33
80093978:	1884703a 	and	r2,r3,r2
8009397c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093980:	0005303a 	rdctl	r2,status
80093984:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80093988:	e0fffa17 	ldw	r3,-24(fp)
8009398c:	00bfff84 	movi	r2,-2
80093990:	1884703a 	and	r2,r3,r2
80093994:	1001703a 	wrctl	status,r2
  
  return context;
80093998:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8009399c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
800939a0:	e0bffd17 	ldw	r2,-12(fp)
800939a4:	10800317 	ldw	r2,12(r2)
800939a8:	10800104 	addi	r2,r2,4
800939ac:	e0fff317 	ldw	r3,-52(fp)
800939b0:	10c00035 	stwio	r3,0(r2)
800939b4:	e0bff417 	ldw	r2,-48(fp)
800939b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
800939bc:	e0bff817 	ldw	r2,-32(fp)
800939c0:	1001703a 	wrctl	status,r2
800939c4:	00001b06 	br	80093a34 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
800939c8:	e0bffd17 	ldw	r2,-12(fp)
800939cc:	10c00d17 	ldw	r3,52(r2)
800939d0:	e0bff317 	ldw	r2,-52(fp)
800939d4:	1884b03a 	or	r2,r3,r2
800939d8:	10800114 	ori	r2,r2,4
800939dc:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
800939e0:	e0fff317 	ldw	r3,-52(fp)
800939e4:	00bff3c4 	movi	r2,-49
800939e8:	1884703a 	and	r2,r3,r2
800939ec:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800939f0:	0005303a 	rdctl	r2,status
800939f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800939f8:	e0fffb17 	ldw	r3,-20(fp)
800939fc:	00bfff84 	movi	r2,-2
80093a00:	1884703a 	and	r2,r3,r2
80093a04:	1001703a 	wrctl	status,r2
  
  return context;
80093a08:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
80093a0c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80093a10:	e0bffd17 	ldw	r2,-12(fp)
80093a14:	10800317 	ldw	r2,12(r2)
80093a18:	10800104 	addi	r2,r2,4
80093a1c:	e0fff317 	ldw	r3,-52(fp)
80093a20:	10c00035 	stwio	r3,0(r2)
80093a24:	e0bff417 	ldw	r2,-48(fp)
80093a28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093a2c:	e0bff917 	ldw	r2,-28(fp)
80093a30:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80093a34:	0005883a 	mov	r2,zero
}
80093a38:	e037883a 	mov	sp,fp
80093a3c:	dfc00117 	ldw	ra,4(sp)
80093a40:	df000017 	ldw	fp,0(sp)
80093a44:	dec00204 	addi	sp,sp,8
80093a48:	f800283a 	ret

80093a4c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
80093a4c:	defff004 	addi	sp,sp,-64
80093a50:	dfc00f15 	stw	ra,60(sp)
80093a54:	df000e15 	stw	fp,56(sp)
80093a58:	df000e04 	addi	fp,sp,56
80093a5c:	e13ffd15 	stw	r4,-12(fp)
80093a60:	e17ffe15 	stw	r5,-8(fp)
80093a64:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
80093a68:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
80093a6c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
80093a70:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
80093a74:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80093a78:	e0bffd17 	ldw	r2,-12(fp)
80093a7c:	10800317 	ldw	r2,12(r2)
80093a80:	10800204 	addi	r2,r2,8
80093a84:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80093a88:	10bfffcc 	andi	r2,r2,65535
80093a8c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80093a90:	e0bffd17 	ldw	r2,-12(fp)
80093a94:	10800317 	ldw	r2,12(r2)
80093a98:	10800204 	addi	r2,r2,8
80093a9c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80093aa0:	1004d43a 	srli	r2,r2,16
80093aa4:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
80093aa8:	00807804 	movi	r2,480
80093aac:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80093ab0:	00001906 	br	80093b18 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
80093ab4:	01000044 	movi	r4,1
80093ab8:	00951c40 	call	800951c4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80093abc:	e0bff30b 	ldhu	r2,-52(fp)
80093ac0:	1084e230 	cmpltui	r2,r2,5000
80093ac4:	1000051e 	bne	r2,zero,80093adc <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
80093ac8:	01200274 	movhi	r4,32777
80093acc:	211b4b04 	addi	r4,r4,27948
80093ad0:	00959f80 	call	800959f8 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
80093ad4:	00bff084 	movi	r2,-62
80093ad8:	0000b506 	br	80093db0 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
80093adc:	e0bff30b 	ldhu	r2,-52(fp)
80093ae0:	10800044 	addi	r2,r2,1
80093ae4:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80093ae8:	e0bffd17 	ldw	r2,-12(fp)
80093aec:	10800317 	ldw	r2,12(r2)
80093af0:	10800204 	addi	r2,r2,8
80093af4:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
80093af8:	10bfffcc 	andi	r2,r2,65535
80093afc:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80093b00:	e0bffd17 	ldw	r2,-12(fp)
80093b04:	10800317 	ldw	r2,12(r2)
80093b08:	10800204 	addi	r2,r2,8
80093b0c:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
80093b10:	1004d43a 	srli	r2,r2,16
80093b14:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80093b18:	e0bffd17 	ldw	r2,-12(fp)
80093b1c:	10800917 	ldw	r2,36(r2)
80093b20:	e0fff517 	ldw	r3,-44(fp)
80093b24:	18bfe32e 	bgeu	r3,r2,80093ab4 <alt_msgdma_descriptor_sync_transfer+0x68>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
80093b28:	e0bffd17 	ldw	r2,-12(fp)
80093b2c:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80093b30:	e0fff417 	ldw	r3,-48(fp)
80093b34:	18bfdf2e 	bgeu	r3,r2,80093ab4 <alt_msgdma_descriptor_sync_transfer+0x68>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093b38:	0005303a 	rdctl	r2,status
80093b3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80093b40:	e0fffc17 	ldw	r3,-16(fp)
80093b44:	00bfff84 	movi	r2,-2
80093b48:	1884703a 	and	r2,r3,r2
80093b4c:	1001703a 	wrctl	status,r2
  
  return context;
80093b50:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80093b54:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80093b58:	e0bffd17 	ldw	r2,-12(fp)
80093b5c:	10800317 	ldw	r2,12(r2)
80093b60:	10800104 	addi	r2,r2,4
80093b64:	00c00804 	movi	r3,32
80093b68:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80093b6c:	e0bffd17 	ldw	r2,-12(fp)
80093b70:	10800317 	ldw	r2,12(r2)
80093b74:	e0fffd17 	ldw	r3,-12(fp)
80093b78:	18c00317 	ldw	r3,12(r3)
80093b7c:	18c00037 	ldwio	r3,0(r3)
80093b80:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80093b84:	e0bffe17 	ldw	r2,-8(fp)
80093b88:	10001b26 	beq	r2,zero,80093bf8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
80093b8c:	e0bfff17 	ldw	r2,-4(fp)
80093b90:	1000191e 	bne	r2,zero,80093bf8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
80093b94:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80093b98:	00000d06 	br	80093bd0 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
80093b9c:	01000044 	movi	r4,1
80093ba0:	00951c40 	call	800951c4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80093ba4:	e0bff30b 	ldhu	r2,-52(fp)
80093ba8:	1084e230 	cmpltui	r2,r2,5000
80093bac:	1000051e 	bne	r2,zero,80093bc4 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
80093bb0:	01200274 	movhi	r4,32777
80093bb4:	211b5f04 	addi	r4,r4,28028
80093bb8:	00959f80 	call	800959f8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
80093bbc:	00bff084 	movi	r2,-62
80093bc0:	00007b06 	br	80093db0 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
80093bc4:	e0bff30b 	ldhu	r2,-52(fp)
80093bc8:	10800044 	addi	r2,r2,1
80093bcc:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80093bd0:	e0bffd17 	ldw	r2,-12(fp)
80093bd4:	10c00317 	ldw	r3,12(r2)
80093bd8:	e0bffd17 	ldw	r2,-12(fp)
80093bdc:	10800417 	ldw	r2,16(r2)
80093be0:	e1bffe17 	ldw	r6,-8(fp)
80093be4:	100b883a 	mov	r5,r2
80093be8:	1809883a 	mov	r4,r3
80093bec:	00932580 	call	80093258 <alt_msgdma_write_standard_descriptor>
80093bf0:	103fea1e 	bne	r2,zero,80093b9c <alt_msgdma_descriptor_sync_transfer+0x150>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80093bf4:	00001f06 	br	80093c74 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80093bf8:	e0bffe17 	ldw	r2,-8(fp)
80093bfc:	10001b1e 	bne	r2,zero,80093c6c <alt_msgdma_descriptor_sync_transfer+0x220>
80093c00:	e0bfff17 	ldw	r2,-4(fp)
80093c04:	10001926 	beq	r2,zero,80093c6c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
80093c08:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80093c0c:	00000d06 	br	80093c44 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80093c10:	01000044 	movi	r4,1
80093c14:	00951c40 	call	800951c4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80093c18:	e0bff30b 	ldhu	r2,-52(fp)
80093c1c:	1084e230 	cmpltui	r2,r2,5000
80093c20:	1000051e 	bne	r2,zero,80093c38 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
80093c24:	01200274 	movhi	r4,32777
80093c28:	211b7004 	addi	r4,r4,28096
80093c2c:	00959f80 	call	800959f8 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
80093c30:	00bff084 	movi	r2,-62
80093c34:	00005e06 	br	80093db0 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
80093c38:	e0bff30b 	ldhu	r2,-52(fp)
80093c3c:	10800044 	addi	r2,r2,1
80093c40:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80093c44:	e0bffd17 	ldw	r2,-12(fp)
80093c48:	10c00317 	ldw	r3,12(r2)
80093c4c:	e0bffd17 	ldw	r2,-12(fp)
80093c50:	10800417 	ldw	r2,16(r2)
80093c54:	e1bfff17 	ldw	r6,-4(fp)
80093c58:	100b883a 	mov	r5,r2
80093c5c:	1809883a 	mov	r4,r3
80093c60:	00932ec0 	call	800932ec <alt_msgdma_write_extended_descriptor>
80093c64:	103fea1e 	bne	r2,zero,80093c10 <alt_msgdma_descriptor_sync_transfer+0x1c4>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80093c68:	00000206 	br	80093c74 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80093c6c:	00bfffc4 	movi	r2,-1
80093c70:	00004f06 	br	80093db0 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80093c74:	e0bffd17 	ldw	r2,-12(fp)
80093c78:	10800317 	ldw	r2,12(r2)
80093c7c:	10800104 	addi	r2,r2,4
80093c80:	e0fffd17 	ldw	r3,-12(fp)
80093c84:	19000d17 	ldw	r4,52(r3)
80093c88:	00fff2c4 	movi	r3,-53
80093c8c:	20c6703a 	and	r3,r4,r3
80093c90:	18c00114 	ori	r3,r3,4
80093c94:	10c00035 	stwio	r3,0(r2)
80093c98:	e0bff717 	ldw	r2,-36(fp)
80093c9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093ca0:	e0bff917 	ldw	r2,-28(fp)
80093ca4:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
80093ca8:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80093cac:	e0bffd17 	ldw	r2,-12(fp)
80093cb0:	10800317 	ldw	r2,12(r2)
80093cb4:	10800037 	ldwio	r2,0(r2)
80093cb8:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80093cbc:	00001106 	br	80093d04 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
80093cc0:	01000044 	movi	r4,1
80093cc4:	00951c40 	call	800951c4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80093cc8:	e0bff30b 	ldhu	r2,-52(fp)
80093ccc:	1084e230 	cmpltui	r2,r2,5000
80093cd0:	1000051e 	bne	r2,zero,80093ce8 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
80093cd4:	01200274 	movhi	r4,32777
80093cd8:	211b8104 	addi	r4,r4,28164
80093cdc:	00959f80 	call	800959f8 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
80093ce0:	00bff084 	movi	r2,-62
80093ce4:	00003206 	br	80093db0 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
80093ce8:	e0bff30b 	ldhu	r2,-52(fp)
80093cec:	10800044 	addi	r2,r2,1
80093cf0:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80093cf4:	e0bffd17 	ldw	r2,-12(fp)
80093cf8:	10800317 	ldw	r2,12(r2)
80093cfc:	10800037 	ldwio	r2,0(r2)
80093d00:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80093d04:	e0fff217 	ldw	r3,-56(fp)
80093d08:	e0bff817 	ldw	r2,-32(fp)
80093d0c:	1884703a 	and	r2,r3,r2
80093d10:	1000031e 	bne	r2,zero,80093d20 <alt_msgdma_descriptor_sync_transfer+0x2d4>
80093d14:	e0bff217 	ldw	r2,-56(fp)
80093d18:	1080004c 	andi	r2,r2,1
80093d1c:	103fe81e 	bne	r2,zero,80093cc0 <alt_msgdma_descriptor_sync_transfer+0x274>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
80093d20:	e0fff217 	ldw	r3,-56(fp)
80093d24:	e0bff817 	ldw	r2,-32(fp)
80093d28:	1884703a 	and	r2,r3,r2
80093d2c:	10000226 	beq	r2,zero,80093d38 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
80093d30:	e0bff817 	ldw	r2,-32(fp)
80093d34:	00001e06 	br	80093db0 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
80093d38:	e0bffd17 	ldw	r2,-12(fp)
80093d3c:	10800317 	ldw	r2,12(r2)
80093d40:	10800104 	addi	r2,r2,4
80093d44:	10800037 	ldwio	r2,0(r2)
80093d48:	10800814 	ori	r2,r2,32
80093d4c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093d50:	0005303a 	rdctl	r2,status
80093d54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80093d58:	e0fffa17 	ldw	r3,-24(fp)
80093d5c:	00bfff84 	movi	r2,-2
80093d60:	1884703a 	and	r2,r3,r2
80093d64:	1001703a 	wrctl	status,r2
  
  return context;
80093d68:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
80093d6c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80093d70:	e0bffd17 	ldw	r2,-12(fp)
80093d74:	10800317 	ldw	r2,12(r2)
80093d78:	10800104 	addi	r2,r2,4
80093d7c:	e0fff617 	ldw	r3,-40(fp)
80093d80:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80093d84:	e0bffd17 	ldw	r2,-12(fp)
80093d88:	10800317 	ldw	r2,12(r2)
80093d8c:	e0fffd17 	ldw	r3,-12(fp)
80093d90:	18c00317 	ldw	r3,12(r3)
80093d94:	18c00037 	ldwio	r3,0(r3)
80093d98:	10c00035 	stwio	r3,0(r2)
80093d9c:	e0bff717 	ldw	r2,-36(fp)
80093da0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093da4:	e0bffb17 	ldw	r2,-20(fp)
80093da8:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80093dac:	0005883a 	mov	r2,zero

}
80093db0:	e037883a 	mov	sp,fp
80093db4:	dfc00117 	ldw	ra,4(sp)
80093db8:	df000017 	ldw	fp,0(sp)
80093dbc:	dec00204 	addi	sp,sp,8
80093dc0:	f800283a 	ret

80093dc4 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
80093dc4:	defff804 	addi	sp,sp,-32
80093dc8:	dfc00715 	stw	ra,28(sp)
80093dcc:	df000615 	stw	fp,24(sp)
80093dd0:	df000604 	addi	fp,sp,24
80093dd4:	e13ffc15 	stw	r4,-16(fp)
80093dd8:	e17ffd15 	stw	r5,-12(fp)
80093ddc:	e1bffe15 	stw	r6,-8(fp)
80093de0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
80093de4:	e0800217 	ldw	r2,8(fp)
80093de8:	d8800115 	stw	r2,4(sp)
80093dec:	e0bfff17 	ldw	r2,-4(fp)
80093df0:	d8800015 	stw	r2,0(sp)
80093df4:	e1fffe17 	ldw	r7,-8(fp)
80093df8:	000d883a 	mov	r6,zero
80093dfc:	e17ffd17 	ldw	r5,-12(fp)
80093e00:	e13ffc17 	ldw	r4,-16(fp)
80093e04:	009359c0 	call	8009359c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80093e08:	e037883a 	mov	sp,fp
80093e0c:	dfc00117 	ldw	ra,4(sp)
80093e10:	df000017 	ldw	fp,0(sp)
80093e14:	dec00204 	addi	sp,sp,8
80093e18:	f800283a 	ret

80093e1c <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
80093e1c:	defff804 	addi	sp,sp,-32
80093e20:	dfc00715 	stw	ra,28(sp)
80093e24:	df000615 	stw	fp,24(sp)
80093e28:	df000604 	addi	fp,sp,24
80093e2c:	e13ffc15 	stw	r4,-16(fp)
80093e30:	e17ffd15 	stw	r5,-12(fp)
80093e34:	e1bffe15 	stw	r6,-8(fp)
80093e38:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80093e3c:	e0800217 	ldw	r2,8(fp)
80093e40:	d8800115 	stw	r2,4(sp)
80093e44:	e0bfff17 	ldw	r2,-4(fp)
80093e48:	d8800015 	stw	r2,0(sp)
80093e4c:	000f883a 	mov	r7,zero
80093e50:	e1bffe17 	ldw	r6,-8(fp)
80093e54:	e17ffd17 	ldw	r5,-12(fp)
80093e58:	e13ffc17 	ldw	r4,-16(fp)
80093e5c:	009359c0 	call	8009359c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
80093e60:	e037883a 	mov	sp,fp
80093e64:	dfc00117 	ldw	ra,4(sp)
80093e68:	df000017 	ldw	fp,0(sp)
80093e6c:	dec00204 	addi	sp,sp,8
80093e70:	f800283a 	ret

80093e74 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
80093e74:	defff804 	addi	sp,sp,-32
80093e78:	dfc00715 	stw	ra,28(sp)
80093e7c:	df000615 	stw	fp,24(sp)
80093e80:	df000604 	addi	fp,sp,24
80093e84:	e13ffc15 	stw	r4,-16(fp)
80093e88:	e17ffd15 	stw	r5,-12(fp)
80093e8c:	e1bffe15 	stw	r6,-8(fp)
80093e90:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80093e94:	e0800317 	ldw	r2,12(fp)
80093e98:	d8800115 	stw	r2,4(sp)
80093e9c:	e0800217 	ldw	r2,8(fp)
80093ea0:	d8800015 	stw	r2,0(sp)
80093ea4:	e1ffff17 	ldw	r7,-4(fp)
80093ea8:	e1bffe17 	ldw	r6,-8(fp)
80093eac:	e17ffd17 	ldw	r5,-12(fp)
80093eb0:	e13ffc17 	ldw	r4,-16(fp)
80093eb4:	009359c0 	call	8009359c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80093eb8:	e037883a 	mov	sp,fp
80093ebc:	dfc00117 	ldw	ra,4(sp)
80093ec0:	df000017 	ldw	fp,0(sp)
80093ec4:	dec00204 	addi	sp,sp,8
80093ec8:	f800283a 	ret

80093ecc <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
80093ecc:	defff004 	addi	sp,sp,-64
80093ed0:	dfc00f15 	stw	ra,60(sp)
80093ed4:	df000e15 	stw	fp,56(sp)
80093ed8:	df000e04 	addi	fp,sp,56
80093edc:	e13ff915 	stw	r4,-28(fp)
80093ee0:	e17ffa15 	stw	r5,-24(fp)
80093ee4:	e1bffb15 	stw	r6,-20(fp)
80093ee8:	e1fffc15 	stw	r7,-16(fp)
80093eec:	e1000317 	ldw	r4,12(fp)
80093ef0:	e0c00417 	ldw	r3,16(fp)
80093ef4:	e0800517 	ldw	r2,20(fp)
80093ef8:	e13ffd0d 	sth	r4,-12(fp)
80093efc:	e0fffe05 	stb	r3,-8(fp)
80093f00:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80093f04:	e0bffd0b 	ldhu	r2,-12(fp)
80093f08:	e0fffe03 	ldbu	r3,-8(fp)
80093f0c:	e13fff0b 	ldhu	r4,-4(fp)
80093f10:	d9000615 	stw	r4,24(sp)
80093f14:	d8000515 	stw	zero,20(sp)
80093f18:	d8c00415 	stw	r3,16(sp)
80093f1c:	d8000315 	stw	zero,12(sp)
80093f20:	d8800215 	stw	r2,8(sp)
80093f24:	e0800217 	ldw	r2,8(fp)
80093f28:	d8800115 	stw	r2,4(sp)
80093f2c:	e0bffc17 	ldw	r2,-16(fp)
80093f30:	d8800015 	stw	r2,0(sp)
80093f34:	e1fffb17 	ldw	r7,-20(fp)
80093f38:	000d883a 	mov	r6,zero
80093f3c:	e17ffa17 	ldw	r5,-24(fp)
80093f40:	e13ff917 	ldw	r4,-28(fp)
80093f44:	00936280 	call	80093628 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
80093f48:	e037883a 	mov	sp,fp
80093f4c:	dfc00117 	ldw	ra,4(sp)
80093f50:	df000017 	ldw	fp,0(sp)
80093f54:	dec00204 	addi	sp,sp,8
80093f58:	f800283a 	ret

80093f5c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
80093f5c:	defff004 	addi	sp,sp,-64
80093f60:	dfc00f15 	stw	ra,60(sp)
80093f64:	df000e15 	stw	fp,56(sp)
80093f68:	df000e04 	addi	fp,sp,56
80093f6c:	e13ff915 	stw	r4,-28(fp)
80093f70:	e17ffa15 	stw	r5,-24(fp)
80093f74:	e1bffb15 	stw	r6,-20(fp)
80093f78:	e1fffc15 	stw	r7,-16(fp)
80093f7c:	e1000317 	ldw	r4,12(fp)
80093f80:	e0c00417 	ldw	r3,16(fp)
80093f84:	e0800517 	ldw	r2,20(fp)
80093f88:	e13ffd0d 	sth	r4,-12(fp)
80093f8c:	e0fffe05 	stb	r3,-8(fp)
80093f90:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
80093f94:	e0bffd0b 	ldhu	r2,-12(fp)
80093f98:	e0fffe03 	ldbu	r3,-8(fp)
80093f9c:	e13fff0b 	ldhu	r4,-4(fp)
80093fa0:	d8000615 	stw	zero,24(sp)
80093fa4:	d9000515 	stw	r4,20(sp)
80093fa8:	d8000415 	stw	zero,16(sp)
80093fac:	d8c00315 	stw	r3,12(sp)
80093fb0:	d8800215 	stw	r2,8(sp)
80093fb4:	e0800217 	ldw	r2,8(fp)
80093fb8:	d8800115 	stw	r2,4(sp)
80093fbc:	e0bffc17 	ldw	r2,-16(fp)
80093fc0:	d8800015 	stw	r2,0(sp)
80093fc4:	000f883a 	mov	r7,zero
80093fc8:	e1bffb17 	ldw	r6,-20(fp)
80093fcc:	e17ffa17 	ldw	r5,-24(fp)
80093fd0:	e13ff917 	ldw	r4,-28(fp)
80093fd4:	00936280 	call	80093628 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
80093fd8:	e037883a 	mov	sp,fp
80093fdc:	dfc00117 	ldw	ra,4(sp)
80093fe0:	df000017 	ldw	fp,0(sp)
80093fe4:	dec00204 	addi	sp,sp,8
80093fe8:	f800283a 	ret

80093fec <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80093fec:	deffee04 	addi	sp,sp,-72
80093ff0:	dfc01115 	stw	ra,68(sp)
80093ff4:	df001015 	stw	fp,64(sp)
80093ff8:	df001004 	addi	fp,sp,64
80093ffc:	e13ff715 	stw	r4,-36(fp)
80094000:	e17ff815 	stw	r5,-32(fp)
80094004:	e1bff915 	stw	r6,-28(fp)
80094008:	e1fffa15 	stw	r7,-24(fp)
8009400c:	e1800417 	ldw	r6,16(fp)
80094010:	e1400517 	ldw	r5,20(fp)
80094014:	e1000617 	ldw	r4,24(fp)
80094018:	e0c00717 	ldw	r3,28(fp)
8009401c:	e0800817 	ldw	r2,32(fp)
80094020:	e1bffb0d 	sth	r6,-20(fp)
80094024:	e17ffc05 	stb	r5,-16(fp)
80094028:	e13ffd05 	stb	r4,-12(fp)
8009402c:	e0fffe0d 	sth	r3,-8(fp)
80094030:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80094034:	e0bffb0b 	ldhu	r2,-20(fp)
80094038:	e0fffc03 	ldbu	r3,-16(fp)
8009403c:	e13ffd03 	ldbu	r4,-12(fp)
80094040:	e17ffe0b 	ldhu	r5,-8(fp)
80094044:	e1bfff0b 	ldhu	r6,-4(fp)
80094048:	d9800615 	stw	r6,24(sp)
8009404c:	d9400515 	stw	r5,20(sp)
80094050:	d9000415 	stw	r4,16(sp)
80094054:	d8c00315 	stw	r3,12(sp)
80094058:	d8800215 	stw	r2,8(sp)
8009405c:	e0800317 	ldw	r2,12(fp)
80094060:	d8800115 	stw	r2,4(sp)
80094064:	e0800217 	ldw	r2,8(fp)
80094068:	d8800015 	stw	r2,0(sp)
8009406c:	e1fffa17 	ldw	r7,-24(fp)
80094070:	e1bff917 	ldw	r6,-28(fp)
80094074:	e17ff817 	ldw	r5,-32(fp)
80094078:	e13ff717 	ldw	r4,-36(fp)
8009407c:	00936280 	call	80093628 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80094080:	e037883a 	mov	sp,fp
80094084:	dfc00117 	ldw	ra,4(sp)
80094088:	df000017 	ldw	fp,0(sp)
8009408c:	dec00204 	addi	sp,sp,8
80094090:	f800283a 	ret

80094094 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
80094094:	defffb04 	addi	sp,sp,-20
80094098:	df000415 	stw	fp,16(sp)
8009409c:	df000404 	addi	fp,sp,16
800940a0:	e13ffc15 	stw	r4,-16(fp)
800940a4:	e17ffd15 	stw	r5,-12(fp)
800940a8:	e1bffe15 	stw	r6,-8(fp)
800940ac:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
800940b0:	e0bffc17 	ldw	r2,-16(fp)
800940b4:	10c01217 	ldw	r3,72(r2)
800940b8:	e0800117 	ldw	r2,4(fp)
800940bc:	18800436 	bltu	r3,r2,800940d0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
800940c0:	e0bffc17 	ldw	r2,-16(fp)
800940c4:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
800940c8:	10803fcc 	andi	r2,r2,255
800940cc:	10000226 	beq	r2,zero,800940d8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
800940d0:	00bffa84 	movi	r2,-22
800940d4:	00001406 	br	80094128 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
800940d8:	e0bffd17 	ldw	r2,-12(fp)
800940dc:	e0fffe17 	ldw	r3,-8(fp)
800940e0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
800940e4:	e0bffd17 	ldw	r2,-12(fp)
800940e8:	e0ffff17 	ldw	r3,-4(fp)
800940ec:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
800940f0:	e0bffd17 	ldw	r2,-12(fp)
800940f4:	e0c00117 	ldw	r3,4(fp)
800940f8:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
800940fc:	e0fffd17 	ldw	r3,-12(fp)
80094100:	e0bffd17 	ldw	r2,-12(fp)
80094104:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80094108:	e0c00217 	ldw	r3,8(fp)
8009410c:	00900034 	movhi	r2,16384
80094110:	10bfffc4 	addi	r2,r2,-1
80094114:	1884703a 	and	r2,r3,r2
80094118:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8009411c:	e0bffd17 	ldw	r2,-12(fp)
80094120:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80094124:	0005883a 	mov	r2,zero
}
80094128:	e037883a 	mov	sp,fp
8009412c:	df000017 	ldw	fp,0(sp)
80094130:	dec00104 	addi	sp,sp,4
80094134:	f800283a 	ret

80094138 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
80094138:	defff404 	addi	sp,sp,-48
8009413c:	df000b15 	stw	fp,44(sp)
80094140:	df000b04 	addi	fp,sp,44
80094144:	e13ff715 	stw	r4,-36(fp)
80094148:	e17ff815 	stw	r5,-32(fp)
8009414c:	e1bff915 	stw	r6,-28(fp)
80094150:	e1fffa15 	stw	r7,-24(fp)
80094154:	e1800517 	ldw	r6,20(fp)
80094158:	e1400617 	ldw	r5,24(fp)
8009415c:	e1000717 	ldw	r4,28(fp)
80094160:	e0c00817 	ldw	r3,32(fp)
80094164:	e0800917 	ldw	r2,36(fp)
80094168:	e1bffb0d 	sth	r6,-20(fp)
8009416c:	e17ffc05 	stb	r5,-16(fp)
80094170:	e13ffd05 	stb	r4,-12(fp)
80094174:	e0fffe0d 	sth	r3,-8(fp)
80094178:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8009417c:	e0bff717 	ldw	r2,-36(fp)
80094180:	10c01217 	ldw	r3,72(r2)
80094184:	e0800317 	ldw	r2,12(fp)
80094188:	18801936 	bltu	r3,r2,800941f0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8009418c:	e13ff717 	ldw	r4,-36(fp)
80094190:	20801317 	ldw	r2,76(r4)
80094194:	20c01417 	ldw	r3,80(r4)
80094198:	e13ffe0b 	ldhu	r4,-8(fp)
8009419c:	213fffcc 	andi	r4,r4,65535
800941a0:	2015883a 	mov	r10,r4
800941a4:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
800941a8:	1ac01136 	bltu	r3,r11,800941f0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
800941ac:	58c0011e 	bne	r11,r3,800941b4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
800941b0:	12800f36 	bltu	r2,r10,800941f0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
800941b4:	e13ff717 	ldw	r4,-36(fp)
800941b8:	20801317 	ldw	r2,76(r4)
800941bc:	20c01417 	ldw	r3,80(r4)
800941c0:	e13fff0b 	ldhu	r4,-4(fp)
800941c4:	213fffcc 	andi	r4,r4,65535
800941c8:	2011883a 	mov	r8,r4
800941cc:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
800941d0:	1a400736 	bltu	r3,r9,800941f0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
800941d4:	48c0011e 	bne	r9,r3,800941dc <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
800941d8:	12000536 	bltu	r2,r8,800941f0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
800941dc:	e0bff717 	ldw	r2,-36(fp)
800941e0:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
800941e4:	10803fcc 	andi	r2,r2,255
800941e8:	10800060 	cmpeqi	r2,r2,1
800941ec:	1000021e 	bne	r2,zero,800941f8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
800941f0:	00bffa84 	movi	r2,-22
800941f4:	00003106 	br	800942bc <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
800941f8:	e0bff817 	ldw	r2,-32(fp)
800941fc:	e0fff917 	ldw	r3,-28(fp)
80094200:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
80094204:	e0bff817 	ldw	r2,-32(fp)
80094208:	e0fffa17 	ldw	r3,-24(fp)
8009420c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
80094210:	e0bff817 	ldw	r2,-32(fp)
80094214:	e0c00117 	ldw	r3,4(fp)
80094218:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8009421c:	e0bff817 	ldw	r2,-32(fp)
80094220:	e0c00217 	ldw	r3,8(fp)
80094224:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80094228:	e0bff817 	ldw	r2,-32(fp)
8009422c:	e0c00317 	ldw	r3,12(fp)
80094230:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80094234:	e0bff817 	ldw	r2,-32(fp)
80094238:	e0fffb0b 	ldhu	r3,-20(fp)
8009423c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
80094240:	e0bff817 	ldw	r2,-32(fp)
80094244:	e0fffc03 	ldbu	r3,-16(fp)
80094248:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8009424c:	e0bff817 	ldw	r2,-32(fp)
80094250:	e0fffd03 	ldbu	r3,-12(fp)
80094254:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
80094258:	e0bff817 	ldw	r2,-32(fp)
8009425c:	e0fffe0b 	ldhu	r3,-8(fp)
80094260:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
80094264:	e0bff817 	ldw	r2,-32(fp)
80094268:	e0ffff0b 	ldhu	r3,-4(fp)
8009426c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
80094270:	e0bff817 	ldw	r2,-32(fp)
80094274:	1019883a 	mov	r12,r2
80094278:	001b883a 	mov	r13,zero
8009427c:	e33ff515 	stw	r12,-44(fp)
80094280:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
80094284:	e0fff517 	ldw	r3,-44(fp)
80094288:	e0bff817 	ldw	r2,-32(fp)
8009428c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80094290:	e0fff617 	ldw	r3,-40(fp)
80094294:	e0bff817 	ldw	r2,-32(fp)
80094298:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8009429c:	e0c00417 	ldw	r3,16(fp)
800942a0:	00900034 	movhi	r2,16384
800942a4:	10bfffc4 	addi	r2,r2,-1
800942a8:	1884703a 	and	r2,r3,r2
800942ac:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
800942b0:	e0bff817 	ldw	r2,-32(fp)
800942b4:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
800942b8:	0005883a 	mov	r2,zero
}
800942bc:	e037883a 	mov	sp,fp
800942c0:	df000017 	ldw	fp,0(sp)
800942c4:	dec00104 	addi	sp,sp,4
800942c8:	f800283a 	ret

800942cc <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
800942cc:	defff804 	addi	sp,sp,-32
800942d0:	dfc00715 	stw	ra,28(sp)
800942d4:	df000615 	stw	fp,24(sp)
800942d8:	df000604 	addi	fp,sp,24
800942dc:	e13ffc15 	stw	r4,-16(fp)
800942e0:	e17ffd15 	stw	r5,-12(fp)
800942e4:	e1bffe15 	stw	r6,-8(fp)
800942e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
800942ec:	e0800317 	ldw	r2,12(fp)
800942f0:	d8800115 	stw	r2,4(sp)
800942f4:	e0800217 	ldw	r2,8(fp)
800942f8:	d8800015 	stw	r2,0(sp)
800942fc:	e1ffff17 	ldw	r7,-4(fp)
80094300:	e1bffe17 	ldw	r6,-8(fp)
80094304:	e17ffd17 	ldw	r5,-12(fp)
80094308:	e13ffc17 	ldw	r4,-16(fp)
8009430c:	00940940 	call	80094094 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
80094310:	e037883a 	mov	sp,fp
80094314:	dfc00117 	ldw	ra,4(sp)
80094318:	df000017 	ldw	fp,0(sp)
8009431c:	dec00204 	addi	sp,sp,8
80094320:	f800283a 	ret

80094324 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
80094324:	defff804 	addi	sp,sp,-32
80094328:	dfc00715 	stw	ra,28(sp)
8009432c:	df000615 	stw	fp,24(sp)
80094330:	df000604 	addi	fp,sp,24
80094334:	e13ffc15 	stw	r4,-16(fp)
80094338:	e17ffd15 	stw	r5,-12(fp)
8009433c:	e1bffe15 	stw	r6,-8(fp)
80094340:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80094344:	e0800217 	ldw	r2,8(fp)
80094348:	d8800115 	stw	r2,4(sp)
8009434c:	e0bfff17 	ldw	r2,-4(fp)
80094350:	d8800015 	stw	r2,0(sp)
80094354:	e1fffe17 	ldw	r7,-8(fp)
80094358:	000d883a 	mov	r6,zero
8009435c:	e17ffd17 	ldw	r5,-12(fp)
80094360:	e13ffc17 	ldw	r4,-16(fp)
80094364:	00940940 	call	80094094 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
80094368:	e037883a 	mov	sp,fp
8009436c:	dfc00117 	ldw	ra,4(sp)
80094370:	df000017 	ldw	fp,0(sp)
80094374:	dec00204 	addi	sp,sp,8
80094378:	f800283a 	ret

8009437c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8009437c:	defff804 	addi	sp,sp,-32
80094380:	dfc00715 	stw	ra,28(sp)
80094384:	df000615 	stw	fp,24(sp)
80094388:	df000604 	addi	fp,sp,24
8009438c:	e13ffc15 	stw	r4,-16(fp)
80094390:	e17ffd15 	stw	r5,-12(fp)
80094394:	e1bffe15 	stw	r6,-8(fp)
80094398:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8009439c:	e0800217 	ldw	r2,8(fp)
800943a0:	d8800115 	stw	r2,4(sp)
800943a4:	e0bfff17 	ldw	r2,-4(fp)
800943a8:	d8800015 	stw	r2,0(sp)
800943ac:	000f883a 	mov	r7,zero
800943b0:	e1bffe17 	ldw	r6,-8(fp)
800943b4:	e17ffd17 	ldw	r5,-12(fp)
800943b8:	e13ffc17 	ldw	r4,-16(fp)
800943bc:	00940940 	call	80094094 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
800943c0:	e037883a 	mov	sp,fp
800943c4:	dfc00117 	ldw	ra,4(sp)
800943c8:	df000017 	ldw	fp,0(sp)
800943cc:	dec00204 	addi	sp,sp,8
800943d0:	f800283a 	ret

800943d4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
800943d4:	deffee04 	addi	sp,sp,-72
800943d8:	dfc01115 	stw	ra,68(sp)
800943dc:	df001015 	stw	fp,64(sp)
800943e0:	df001004 	addi	fp,sp,64
800943e4:	e13ff915 	stw	r4,-28(fp)
800943e8:	e17ffa15 	stw	r5,-24(fp)
800943ec:	e1bffb15 	stw	r6,-20(fp)
800943f0:	e1fffc15 	stw	r7,-16(fp)
800943f4:	e1000417 	ldw	r4,16(fp)
800943f8:	e0c00517 	ldw	r3,20(fp)
800943fc:	e0800617 	ldw	r2,24(fp)
80094400:	e13ffd0d 	sth	r4,-12(fp)
80094404:	e0fffe05 	stb	r3,-8(fp)
80094408:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8009440c:	e0bffd0b 	ldhu	r2,-12(fp)
80094410:	e0fffe03 	ldbu	r3,-8(fp)
80094414:	e13fff0b 	ldhu	r4,-4(fp)
80094418:	d9000815 	stw	r4,32(sp)
8009441c:	d8000715 	stw	zero,28(sp)
80094420:	d8c00615 	stw	r3,24(sp)
80094424:	d8000515 	stw	zero,20(sp)
80094428:	d8800415 	stw	r2,16(sp)
8009442c:	e0800317 	ldw	r2,12(fp)
80094430:	d8800315 	stw	r2,12(sp)
80094434:	e0800217 	ldw	r2,8(fp)
80094438:	d8800215 	stw	r2,8(sp)
8009443c:	e0bffc17 	ldw	r2,-16(fp)
80094440:	d8800115 	stw	r2,4(sp)
80094444:	e0bffb17 	ldw	r2,-20(fp)
80094448:	d8800015 	stw	r2,0(sp)
8009444c:	000f883a 	mov	r7,zero
80094450:	000d883a 	mov	r6,zero
80094454:	e17ffa17 	ldw	r5,-24(fp)
80094458:	e13ff917 	ldw	r4,-28(fp)
8009445c:	00941380 	call	80094138 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
80094460:	e037883a 	mov	sp,fp
80094464:	dfc00117 	ldw	ra,4(sp)
80094468:	df000017 	ldw	fp,0(sp)
8009446c:	dec00204 	addi	sp,sp,8
80094470:	f800283a 	ret

80094474 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
80094474:	deffee04 	addi	sp,sp,-72
80094478:	dfc01115 	stw	ra,68(sp)
8009447c:	df001015 	stw	fp,64(sp)
80094480:	df001004 	addi	fp,sp,64
80094484:	e13ff915 	stw	r4,-28(fp)
80094488:	e17ffa15 	stw	r5,-24(fp)
8009448c:	e1bffb15 	stw	r6,-20(fp)
80094490:	e1fffc15 	stw	r7,-16(fp)
80094494:	e1000417 	ldw	r4,16(fp)
80094498:	e0c00517 	ldw	r3,20(fp)
8009449c:	e0800617 	ldw	r2,24(fp)
800944a0:	e13ffd0d 	sth	r4,-12(fp)
800944a4:	e0fffe05 	stb	r3,-8(fp)
800944a8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
800944ac:	e0bffd0b 	ldhu	r2,-12(fp)
800944b0:	e0fffe03 	ldbu	r3,-8(fp)
800944b4:	e13fff0b 	ldhu	r4,-4(fp)
800944b8:	d8000815 	stw	zero,32(sp)
800944bc:	d9000715 	stw	r4,28(sp)
800944c0:	d8000615 	stw	zero,24(sp)
800944c4:	d8c00515 	stw	r3,20(sp)
800944c8:	d8800415 	stw	r2,16(sp)
800944cc:	e0800317 	ldw	r2,12(fp)
800944d0:	d8800315 	stw	r2,12(sp)
800944d4:	e0800217 	ldw	r2,8(fp)
800944d8:	d8800215 	stw	r2,8(sp)
800944dc:	d8000115 	stw	zero,4(sp)
800944e0:	d8000015 	stw	zero,0(sp)
800944e4:	e1fffc17 	ldw	r7,-16(fp)
800944e8:	e1bffb17 	ldw	r6,-20(fp)
800944ec:	e17ffa17 	ldw	r5,-24(fp)
800944f0:	e13ff917 	ldw	r4,-28(fp)
800944f4:	00941380 	call	80094138 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
800944f8:	e037883a 	mov	sp,fp
800944fc:	dfc00117 	ldw	ra,4(sp)
80094500:	df000017 	ldw	fp,0(sp)
80094504:	dec00204 	addi	sp,sp,8
80094508:	f800283a 	ret

8009450c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8009450c:	deffec04 	addi	sp,sp,-80
80094510:	dfc01315 	stw	ra,76(sp)
80094514:	df001215 	stw	fp,72(sp)
80094518:	df001204 	addi	fp,sp,72
8009451c:	e13ff715 	stw	r4,-36(fp)
80094520:	e17ff815 	stw	r5,-32(fp)
80094524:	e1bff915 	stw	r6,-28(fp)
80094528:	e1fffa15 	stw	r7,-24(fp)
8009452c:	e1800617 	ldw	r6,24(fp)
80094530:	e1400717 	ldw	r5,28(fp)
80094534:	e1000817 	ldw	r4,32(fp)
80094538:	e0c00917 	ldw	r3,36(fp)
8009453c:	e0800a17 	ldw	r2,40(fp)
80094540:	e1bffb0d 	sth	r6,-20(fp)
80094544:	e17ffc05 	stb	r5,-16(fp)
80094548:	e13ffd05 	stb	r4,-12(fp)
8009454c:	e0fffe0d 	sth	r3,-8(fp)
80094550:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
80094554:	e0bffb0b 	ldhu	r2,-20(fp)
80094558:	e0fffc03 	ldbu	r3,-16(fp)
8009455c:	e13ffd03 	ldbu	r4,-12(fp)
80094560:	e17ffe0b 	ldhu	r5,-8(fp)
80094564:	e1bfff0b 	ldhu	r6,-4(fp)
80094568:	d9800815 	stw	r6,32(sp)
8009456c:	d9400715 	stw	r5,28(sp)
80094570:	d9000615 	stw	r4,24(sp)
80094574:	d8c00515 	stw	r3,20(sp)
80094578:	d8800415 	stw	r2,16(sp)
8009457c:	e0800517 	ldw	r2,20(fp)
80094580:	d8800315 	stw	r2,12(sp)
80094584:	e0800417 	ldw	r2,16(fp)
80094588:	d8800215 	stw	r2,8(sp)
8009458c:	e0800317 	ldw	r2,12(fp)
80094590:	d8800115 	stw	r2,4(sp)
80094594:	e0800217 	ldw	r2,8(fp)
80094598:	d8800015 	stw	r2,0(sp)
8009459c:	e1fffa17 	ldw	r7,-24(fp)
800945a0:	e1bff917 	ldw	r6,-28(fp)
800945a4:	e17ff817 	ldw	r5,-32(fp)
800945a8:	e13ff717 	ldw	r4,-36(fp)
800945ac:	00941380 	call	80094138 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
800945b0:	e037883a 	mov	sp,fp
800945b4:	dfc00117 	ldw	ra,4(sp)
800945b8:	df000017 	ldw	fp,0(sp)
800945bc:	dec00204 	addi	sp,sp,8
800945c0:	f800283a 	ret

800945c4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
800945c4:	defffc04 	addi	sp,sp,-16
800945c8:	df000315 	stw	fp,12(sp)
800945cc:	df000304 	addi	fp,sp,12
800945d0:	e13ffe15 	stw	r4,-8(fp)
800945d4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
800945d8:	e0bfff17 	ldw	r2,-4(fp)
800945dc:	1000021e 	bne	r2,zero,800945e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
800945e0:	00bffa84 	movi	r2,-22
800945e4:	00002f06 	br	800946a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
800945e8:	e0bfff17 	ldw	r2,-4(fp)
800945ec:	10c00317 	ldw	r3,12(r2)
800945f0:	e0bfff17 	ldw	r2,-4(fp)
800945f4:	18800226 	beq	r3,r2,80094600 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
800945f8:	00bffa84 	movi	r2,-22
800945fc:	00002906 	br	800946a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
80094600:	e0bffe17 	ldw	r2,-8(fp)
80094604:	10800017 	ldw	r2,0(r2)
80094608:	1000051e 	bne	r2,zero,80094620 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8009460c:	e0bffe17 	ldw	r2,-8(fp)
80094610:	e0ffff17 	ldw	r3,-4(fp)
80094614:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
80094618:	0005883a 	mov	r2,zero
8009461c:	00002106 	br	800946a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
80094620:	e0bffe17 	ldw	r2,-8(fp)
80094624:	10c00017 	ldw	r3,0(r2)
80094628:	e0bfff17 	ldw	r2,-4(fp)
8009462c:	1880021e 	bne	r3,r2,80094638 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
80094630:	00bffa84 	movi	r2,-22
80094634:	00001b06 	br	800946a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
80094638:	e0bffe17 	ldw	r2,-8(fp)
8009463c:	10800017 	ldw	r2,0(r2)
80094640:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80094644:	00000906 	br	8009466c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
80094648:	e0bffd17 	ldw	r2,-12(fp)
8009464c:	10c00317 	ldw	r3,12(r2)
80094650:	e0bfff17 	ldw	r2,-4(fp)
80094654:	1880021e 	bne	r3,r2,80094660 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
80094658:	00bffa84 	movi	r2,-22
8009465c:	00001106 	br	800946a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80094660:	e0bffd17 	ldw	r2,-12(fp)
80094664:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
80094668:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8009466c:	e0bffd17 	ldw	r2,-12(fp)
80094670:	10800317 	ldw	r2,12(r2)
80094674:	e0fffe17 	ldw	r3,-8(fp)
80094678:	18c00017 	ldw	r3,0(r3)
8009467c:	10fff21e 	bne	r2,r3,80094648 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x84>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
80094680:	e0ffff17 	ldw	r3,-4(fp)
80094684:	e0bffd17 	ldw	r2,-12(fp)
80094688:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8009468c:	e0bffe17 	ldw	r2,-8(fp)
80094690:	10800017 	ldw	r2,0(r2)
80094694:	1007883a 	mov	r3,r2
80094698:	e0bfff17 	ldw	r2,-4(fp)
8009469c:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
800946a0:	0005883a 	mov	r2,zero
}
800946a4:	e037883a 	mov	sp,fp
800946a8:	df000017 	ldw	fp,0(sp)
800946ac:	dec00104 	addi	sp,sp,4
800946b0:	f800283a 	ret

800946b4 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
800946b4:	defff804 	addi	sp,sp,-32
800946b8:	df000715 	stw	fp,28(sp)
800946bc:	df000704 	addi	fp,sp,28
800946c0:	e13ffe15 	stw	r4,-8(fp)
800946c4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
800946c8:	e13fff17 	ldw	r4,-4(fp)
800946cc:	2000021e 	bne	r4,zero,800946d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
800946d0:	00bffa84 	movi	r2,-22
800946d4:	00005906 	br	8009483c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
800946d8:	e13fff17 	ldw	r4,-4(fp)
800946dc:	2015883a 	mov	r10,r4
800946e0:	0017883a 	mov	r11,zero
800946e4:	e2bffc15 	stw	r10,-16(fp)
800946e8:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
800946ec:	e13fff17 	ldw	r4,-4(fp)
800946f0:	21400317 	ldw	r5,12(r4)
800946f4:	e13ffc17 	ldw	r4,-16(fp)
800946f8:	29000626 	beq	r5,r4,80094714 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
800946fc:	e13fff17 	ldw	r4,-4(fp)
80094700:	21400b17 	ldw	r5,44(r4)
80094704:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
80094708:	29000226 	beq	r5,r4,80094714 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8009470c:	00bffa84 	movi	r2,-22
80094710:	00004a06 	br	8009483c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
80094714:	e13ffe17 	ldw	r4,-8(fp)
80094718:	21000017 	ldw	r4,0(r4)
8009471c:	2000051e 	bne	r4,zero,80094734 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
80094720:	e0bffe17 	ldw	r2,-8(fp)
80094724:	e0ffff17 	ldw	r3,-4(fp)
80094728:	10c00015 	stw	r3,0(r2)
		return 0;
8009472c:	0005883a 	mov	r2,zero
80094730:	00004206 	br	8009483c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
80094734:	e13ffe17 	ldw	r4,-8(fp)
80094738:	21400017 	ldw	r5,0(r4)
8009473c:	e13fff17 	ldw	r4,-4(fp)
80094740:	2900021e 	bne	r5,r4,8009474c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
80094744:	00bffa84 	movi	r2,-22
80094748:	00003c06 	br	8009483c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8009474c:	e13ffe17 	ldw	r4,-8(fp)
80094750:	21000017 	ldw	r4,0(r4)
80094754:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
80094758:	e13ffe17 	ldw	r4,-8(fp)
8009475c:	21000017 	ldw	r4,0(r4)
80094760:	2011883a 	mov	r8,r4
80094764:	0013883a 	mov	r9,zero
80094768:	e23ffa15 	stw	r8,-24(fp)
8009476c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80094770:	00001806 	br	800947d4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
80094774:	e13fff17 	ldw	r4,-4(fp)
80094778:	200d883a 	mov	r6,r4
8009477c:	000f883a 	mov	r7,zero
80094780:	e1bffc15 	stw	r6,-16(fp)
80094784:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
80094788:	e13ff917 	ldw	r4,-28(fp)
8009478c:	21400317 	ldw	r5,12(r4)
80094790:	e13ffc17 	ldw	r4,-16(fp)
80094794:	2900061e 	bne	r5,r4,800947b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
80094798:	e13ff917 	ldw	r4,-28(fp)
8009479c:	21400b17 	ldw	r5,44(r4)
800947a0:	e13ffd17 	ldw	r4,-12(fp)
800947a4:	2900021e 	bne	r5,r4,800947b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
800947a8:	00bffa84 	movi	r2,-22
800947ac:	00002306 	br	8009483c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
800947b0:	e13ff917 	ldw	r4,-28(fp)
800947b4:	21000317 	ldw	r4,12(r4)
800947b8:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
800947bc:	e13ff917 	ldw	r4,-28(fp)
800947c0:	21000b17 	ldw	r4,44(r4)
800947c4:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
800947c8:	e13ffc17 	ldw	r4,-16(fp)
800947cc:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
800947d0:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
800947d4:	e13ff917 	ldw	r4,-28(fp)
800947d8:	21400317 	ldw	r5,12(r4)
800947dc:	e13ffa17 	ldw	r4,-24(fp)
800947e0:	29000426 	beq	r5,r4,800947f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
800947e4:	e13ff917 	ldw	r4,-28(fp)
800947e8:	21400b17 	ldw	r5,44(r4)
800947ec:	e13ffb17 	ldw	r4,-20(fp)
800947f0:	293fe01e 	bne	r5,r4,80094774 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
800947f4:	e13fff17 	ldw	r4,-4(fp)
800947f8:	2005883a 	mov	r2,r4
800947fc:	0007883a 	mov	r3,zero
80094800:	e0bffc15 	stw	r2,-16(fp)
80094804:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
80094808:	e0fffc17 	ldw	r3,-16(fp)
8009480c:	e0bff917 	ldw	r2,-28(fp)
80094810:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
80094814:	e0fffd17 	ldw	r3,-12(fp)
80094818:	e0bff917 	ldw	r2,-28(fp)
8009481c:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
80094820:	e0fffa17 	ldw	r3,-24(fp)
80094824:	e0bfff17 	ldw	r2,-4(fp)
80094828:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8009482c:	e0fffb17 	ldw	r3,-20(fp)
80094830:	e0bfff17 	ldw	r2,-4(fp)
80094834:	10c00b15 	stw	r3,44(r2)
	return 0;
80094838:	0005883a 	mov	r2,zero
}
8009483c:	e037883a 	mov	sp,fp
80094840:	df000017 	ldw	fp,0(sp)
80094844:	dec00104 	addi	sp,sp,4
80094848:	f800283a 	ret

8009484c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8009484c:	defffc04 	addi	sp,sp,-16
80094850:	df000315 	stw	fp,12(sp)
80094854:	df000304 	addi	fp,sp,12
80094858:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8009485c:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
80094860:	e0bfff17 	ldw	r2,-4(fp)
80094864:	1000021e 	bne	r2,zero,80094870 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
80094868:	00bffa84 	movi	r2,-22
8009486c:	00001906 	br	800948d4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
80094870:	e0bfff17 	ldw	r2,-4(fp)
80094874:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80094878:	00000a06 	br	800948a4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8009487c:	e0bffd17 	ldw	r2,-12(fp)
80094880:	10800717 	ldw	r2,28(r2)
80094884:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80094888:	e0bffe17 	ldw	r2,-8(fp)
8009488c:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
80094890:	e0bffd17 	ldw	r2,-12(fp)
80094894:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80094898:	e0bffd17 	ldw	r2,-12(fp)
8009489c:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
800948a0:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
800948a4:	e0bffd17 	ldw	r2,-12(fp)
800948a8:	10c00317 	ldw	r3,12(r2)
800948ac:	e0bfff17 	ldw	r2,-4(fp)
800948b0:	18bff21e 	bne	r3,r2,8009487c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x30>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
800948b4:	e0bffd17 	ldw	r2,-12(fp)
800948b8:	10800717 	ldw	r2,28(r2)
800948bc:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
800948c0:	e0bffe17 	ldw	r2,-8(fp)
800948c4:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
800948c8:	e0bffd17 	ldw	r2,-12(fp)
800948cc:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
800948d0:	0005883a 	mov	r2,zero
}
800948d4:	e037883a 	mov	sp,fp
800948d8:	df000017 	ldw	fp,0(sp)
800948dc:	dec00104 	addi	sp,sp,4
800948e0:	f800283a 	ret

800948e4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
800948e4:	defff804 	addi	sp,sp,-32
800948e8:	df000715 	stw	fp,28(sp)
800948ec:	df000704 	addi	fp,sp,28
800948f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
800948f4:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
800948f8:	e13fff17 	ldw	r4,-4(fp)
800948fc:	2000021e 	bne	r4,zero,80094908 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
80094900:	00bffa84 	movi	r2,-22
80094904:	00002806 	br	800949a8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
80094908:	e13fff17 	ldw	r4,-4(fp)
8009490c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
80094910:	e13fff17 	ldw	r4,-4(fp)
80094914:	2005883a 	mov	r2,r4
80094918:	0007883a 	mov	r3,zero
8009491c:	e0bffb15 	stw	r2,-20(fp)
80094920:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80094924:	00001006 	br	80094968 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
80094928:	e0bff917 	ldw	r2,-28(fp)
8009492c:	10800f17 	ldw	r2,60(r2)
80094930:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80094934:	e0bffa17 	ldw	r2,-24(fp)
80094938:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8009493c:	e0bff917 	ldw	r2,-28(fp)
80094940:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80094944:	e0bff917 	ldw	r2,-28(fp)
80094948:	10800317 	ldw	r2,12(r2)
8009494c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
80094950:	e0bff917 	ldw	r2,-28(fp)
80094954:	10800b17 	ldw	r2,44(r2)
80094958:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8009495c:	e0bffd17 	ldw	r2,-12(fp)
80094960:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
80094964:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80094968:	e0bff917 	ldw	r2,-28(fp)
8009496c:	10c00317 	ldw	r3,12(r2)
80094970:	e0bffb17 	ldw	r2,-20(fp)
80094974:	18800426 	beq	r3,r2,80094988 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80094978:	e0bff917 	ldw	r2,-28(fp)
8009497c:	10c00b17 	ldw	r3,44(r2)
80094980:	e0bffc17 	ldw	r2,-16(fp)
80094984:	18bfe81e 	bne	r3,r2,80094928 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x44>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
80094988:	e0bff917 	ldw	r2,-28(fp)
8009498c:	10800f17 	ldw	r2,60(r2)
80094990:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80094994:	e0bffa17 	ldw	r2,-24(fp)
80094998:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8009499c:	e0bff917 	ldw	r2,-28(fp)
800949a0:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
800949a4:	0005883a 	mov	r2,zero
}
800949a8:	e037883a 	mov	sp,fp
800949ac:	df000017 	ldw	fp,0(sp)
800949b0:	dec00104 	addi	sp,sp,4
800949b4:	f800283a 	ret

800949b8 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
800949b8:	deffef04 	addi	sp,sp,-68
800949bc:	df001015 	stw	fp,64(sp)
800949c0:	df001004 	addi	fp,sp,64
800949c4:	e13ffb15 	stw	r4,-20(fp)
800949c8:	e17ffc15 	stw	r5,-16(fp)
800949cc:	e1bffd15 	stw	r6,-12(fp)
800949d0:	3807883a 	mov	r3,r7
800949d4:	e0800117 	ldw	r2,4(fp)
800949d8:	e0fffe05 	stb	r3,-8(fp)
800949dc:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
800949e0:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
800949e4:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
800949e8:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
800949ec:	e0bffc17 	ldw	r2,-16(fp)
800949f0:	e0bff915 	stw	r2,-28(fp)
800949f4:	e0bffd17 	ldw	r2,-12(fp)
800949f8:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
800949fc:	e0bffb17 	ldw	r2,-20(fp)
80094a00:	10800617 	ldw	r2,24(r2)
80094a04:	10800037 	ldwio	r2,0(r2)
80094a08:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
80094a0c:	e0bff017 	ldw	r2,-64(fp)
80094a10:	1080004c 	andi	r2,r2,1
80094a14:	10000226 	beq	r2,zero,80094a20 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
80094a18:	00bffc04 	movi	r2,-16
80094a1c:	00009206 	br	80094c68 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80094a20:	00800804 	movi	r2,32
80094a24:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80094a28:	0005303a 	rdctl	r2,status
80094a2c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80094a30:	e0fff517 	ldw	r3,-44(fp)
80094a34:	00bfff84 	movi	r2,-2
80094a38:	1884703a 	and	r2,r3,r2
80094a3c:	1001703a 	wrctl	status,r2
  
  return context;
80094a40:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80094a44:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80094a48:	e0bffb17 	ldw	r2,-20(fp)
80094a4c:	10800317 	ldw	r2,12(r2)
80094a50:	10800104 	addi	r2,r2,4
80094a54:	e0fff117 	ldw	r3,-60(fp)
80094a58:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
80094a5c:	e0bffb17 	ldw	r2,-20(fp)
80094a60:	10800317 	ldw	r2,12(r2)
80094a64:	e0fffb17 	ldw	r3,-20(fp)
80094a68:	18c00317 	ldw	r3,12(r3)
80094a6c:	18c00037 	ldwio	r3,0(r3)
80094a70:	10c00035 	stwio	r3,0(r2)
80094a74:	e0bff217 	ldw	r2,-56(fp)
80094a78:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80094a7c:	e0bff317 	ldw	r2,-52(fp)
80094a80:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
80094a84:	e0bffb17 	ldw	r2,-20(fp)
80094a88:	10800b17 	ldw	r2,44(r2)
80094a8c:	10002326 	beq	r2,zero,80094b1c <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
80094a90:	e0bffb17 	ldw	r2,-20(fp)
80094a94:	10c00d17 	ldw	r3,52(r2)
80094a98:	e0bff117 	ldw	r2,-60(fp)
80094a9c:	1884b03a 	or	r2,r3,r2
80094aa0:	10800514 	ori	r2,r2,20
80094aa4:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80094aa8:	e0fff117 	ldw	r3,-60(fp)
80094aac:	00bff7c4 	movi	r2,-33
80094ab0:	1884703a 	and	r2,r3,r2
80094ab4:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80094ab8:	e0bff017 	ldw	r2,-64(fp)
80094abc:	10800214 	ori	r2,r2,8
80094ac0:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80094ac4:	0005303a 	rdctl	r2,status
80094ac8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80094acc:	e0fff717 	ldw	r3,-36(fp)
80094ad0:	00bfff84 	movi	r2,-2
80094ad4:	1884703a 	and	r2,r3,r2
80094ad8:	1001703a 	wrctl	status,r2
  
  return context;
80094adc:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
80094ae0:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80094ae4:	e0bffb17 	ldw	r2,-20(fp)
80094ae8:	10800317 	ldw	r2,12(r2)
80094aec:	10800104 	addi	r2,r2,4
80094af0:	e0fff117 	ldw	r3,-60(fp)
80094af4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80094af8:	e0bffb17 	ldw	r2,-20(fp)
80094afc:	10800617 	ldw	r2,24(r2)
80094b00:	e0fff017 	ldw	r3,-64(fp)
80094b04:	10c00035 	stwio	r3,0(r2)
80094b08:	e0bff217 	ldw	r2,-56(fp)
80094b0c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80094b10:	e0bff417 	ldw	r2,-48(fp)
80094b14:	1001703a 	wrctl	status,r2
80094b18:	00002306 	br	80094ba8 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
80094b1c:	e0bffb17 	ldw	r2,-20(fp)
80094b20:	10c00d17 	ldw	r3,52(r2)
80094b24:	e0bff117 	ldw	r2,-60(fp)
80094b28:	1884b03a 	or	r2,r3,r2
80094b2c:	10800114 	ori	r2,r2,4
80094b30:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
80094b34:	e0fff117 	ldw	r3,-60(fp)
80094b38:	00bff3c4 	movi	r2,-49
80094b3c:	1884703a 	and	r2,r3,r2
80094b40:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
80094b44:	e0fff017 	ldw	r3,-64(fp)
80094b48:	00bffdc4 	movi	r2,-9
80094b4c:	1884703a 	and	r2,r3,r2
80094b50:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80094b54:	0005303a 	rdctl	r2,status
80094b58:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80094b5c:	e0fff817 	ldw	r3,-32(fp)
80094b60:	00bfff84 	movi	r2,-2
80094b64:	1884703a 	and	r2,r3,r2
80094b68:	1001703a 	wrctl	status,r2
  
  return context;
80094b6c:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
80094b70:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80094b74:	e0bffb17 	ldw	r2,-20(fp)
80094b78:	10800317 	ldw	r2,12(r2)
80094b7c:	10800104 	addi	r2,r2,4
80094b80:	e0fff117 	ldw	r3,-60(fp)
80094b84:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80094b88:	e0bffb17 	ldw	r2,-20(fp)
80094b8c:	10800617 	ldw	r2,24(r2)
80094b90:	e0fff017 	ldw	r3,-64(fp)
80094b94:	10c00035 	stwio	r3,0(r2)
80094b98:	e0bff217 	ldw	r2,-56(fp)
80094b9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80094ba0:	e0bff617 	ldw	r2,-40(fp)
80094ba4:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
80094ba8:	e0bffb17 	ldw	r2,-20(fp)
80094bac:	10800617 	ldw	r2,24(r2)
80094bb0:	10800104 	addi	r2,r2,4
80094bb4:	e0fff917 	ldw	r3,-28(fp)
80094bb8:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80094bbc:	e0bffb17 	ldw	r2,-20(fp)
80094bc0:	10800617 	ldw	r2,24(r2)
80094bc4:	10800204 	addi	r2,r2,8
80094bc8:	e0fffa17 	ldw	r3,-24(fp)
80094bcc:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
80094bd0:	e0bffe03 	ldbu	r2,-8(fp)
80094bd4:	10000426 	beq	r2,zero,80094be8 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
80094bd8:	e0bff017 	ldw	r2,-64(fp)
80094bdc:	10800414 	ori	r2,r2,16
80094be0:	e0bff015 	stw	r2,-64(fp)
80094be4:	00000406 	br	80094bf8 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
80094be8:	e0fff017 	ldw	r3,-64(fp)
80094bec:	00bffbc4 	movi	r2,-17
80094bf0:	1884703a 	and	r2,r3,r2
80094bf4:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
80094bf8:	e0bfff03 	ldbu	r2,-4(fp)
80094bfc:	10000e26 	beq	r2,zero,80094c38 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
80094c00:	e0bff017 	ldw	r2,-64(fp)
80094c04:	10800094 	ori	r2,r2,2
80094c08:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80094c0c:	e0bffb17 	ldw	r2,-20(fp)
80094c10:	10800617 	ldw	r2,24(r2)
80094c14:	10800304 	addi	r2,r2,12
80094c18:	10800037 	ldwio	r2,0(r2)
80094c1c:	10000a1e 	bne	r2,zero,80094c48 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80094c20:	e0bffb17 	ldw	r2,-20(fp)
80094c24:	10800617 	ldw	r2,24(r2)
80094c28:	10800304 	addi	r2,r2,12
80094c2c:	00c03fc4 	movi	r3,255
80094c30:	10c00035 	stwio	r3,0(r2)
80094c34:	00000406 	br	80094c48 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
80094c38:	e0fff017 	ldw	r3,-64(fp)
80094c3c:	00bfff44 	movi	r2,-3
80094c40:	1884703a 	and	r2,r3,r2
80094c44:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
80094c48:	e0bff017 	ldw	r2,-64(fp)
80094c4c:	10800054 	ori	r2,r2,1
80094c50:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80094c54:	e0bffb17 	ldw	r2,-20(fp)
80094c58:	10800617 	ldw	r2,24(r2)
80094c5c:	e0fff017 	ldw	r3,-64(fp)
80094c60:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
80094c64:	0005883a 	mov	r2,zero
}
80094c68:	e037883a 	mov	sp,fp
80094c6c:	df000017 	ldw	fp,0(sp)
80094c70:	dec00104 	addi	sp,sp,4
80094c74:	f800283a 	ret

80094c78 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
80094c78:	defff704 	addi	sp,sp,-36
80094c7c:	dfc00815 	stw	ra,32(sp)
80094c80:	df000715 	stw	fp,28(sp)
80094c84:	dc400615 	stw	r17,24(sp)
80094c88:	dc000515 	stw	r16,20(sp)
80094c8c:	df000704 	addi	fp,sp,28
80094c90:	e13ffa15 	stw	r4,-24(fp)
80094c94:	e17ffb15 	stw	r5,-20(fp)
80094c98:	3007883a 	mov	r3,r6
80094c9c:	3805883a 	mov	r2,r7
80094ca0:	e0fffc05 	stb	r3,-16(fp)
80094ca4:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
80094ca8:	e13ffb17 	ldw	r4,-20(fp)
80094cac:	009484c0 	call	8009484c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
80094cb0:	10000226 	beq	r2,zero,80094cbc <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
80094cb4:	00bffa84 	movi	r2,-22
80094cb8:	00000b06 	br	80094ce8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
80094cbc:	e0bffb17 	ldw	r2,-20(fp)
80094cc0:	1021883a 	mov	r16,r2
80094cc4:	0023883a 	mov	r17,zero
80094cc8:	e0fffc03 	ldbu	r3,-16(fp)
80094ccc:	e0bffd03 	ldbu	r2,-12(fp)
80094cd0:	d8800015 	stw	r2,0(sp)
80094cd4:	180f883a 	mov	r7,r3
80094cd8:	800b883a 	mov	r5,r16
80094cdc:	880d883a 	mov	r6,r17
80094ce0:	e13ffa17 	ldw	r4,-24(fp)
80094ce4:	00949b80 	call	800949b8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
80094ce8:	e6fffe04 	addi	sp,fp,-8
80094cec:	dfc00317 	ldw	ra,12(sp)
80094cf0:	df000217 	ldw	fp,8(sp)
80094cf4:	dc400117 	ldw	r17,4(sp)
80094cf8:	dc000017 	ldw	r16,0(sp)
80094cfc:	dec00404 	addi	sp,sp,16
80094d00:	f800283a 	ret

80094d04 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
80094d04:	defff704 	addi	sp,sp,-36
80094d08:	dfc00815 	stw	ra,32(sp)
80094d0c:	df000715 	stw	fp,28(sp)
80094d10:	dc400615 	stw	r17,24(sp)
80094d14:	dc000515 	stw	r16,20(sp)
80094d18:	df000704 	addi	fp,sp,28
80094d1c:	e13ffa15 	stw	r4,-24(fp)
80094d20:	e17ffb15 	stw	r5,-20(fp)
80094d24:	3007883a 	mov	r3,r6
80094d28:	3805883a 	mov	r2,r7
80094d2c:	e0fffc05 	stb	r3,-16(fp)
80094d30:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
80094d34:	e13ffb17 	ldw	r4,-20(fp)
80094d38:	00948e40 	call	800948e4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
80094d3c:	10000226 	beq	r2,zero,80094d48 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
80094d40:	00bffa84 	movi	r2,-22
80094d44:	00000b06 	br	80094d74 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
80094d48:	e0bffb17 	ldw	r2,-20(fp)
80094d4c:	1021883a 	mov	r16,r2
80094d50:	0023883a 	mov	r17,zero
80094d54:	e0fffc03 	ldbu	r3,-16(fp)
80094d58:	e0bffd03 	ldbu	r2,-12(fp)
80094d5c:	d8800015 	stw	r2,0(sp)
80094d60:	180f883a 	mov	r7,r3
80094d64:	800b883a 	mov	r5,r16
80094d68:	880d883a 	mov	r6,r17
80094d6c:	e13ffa17 	ldw	r4,-24(fp)
80094d70:	00949b80 	call	800949b8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
80094d74:	e6fffe04 	addi	sp,fp,-8
80094d78:	dfc00317 	ldw	ra,12(sp)
80094d7c:	df000217 	ldw	fp,8(sp)
80094d80:	dc400117 	ldw	r17,4(sp)
80094d84:	dc000017 	ldw	r16,0(sp)
80094d88:	dec00404 	addi	sp,sp,16
80094d8c:	f800283a 	ret

80094d90 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
80094d90:	defffc04 	addi	sp,sp,-16
80094d94:	dfc00315 	stw	ra,12(sp)
80094d98:	df000215 	stw	fp,8(sp)
80094d9c:	df000204 	addi	fp,sp,8
80094da0:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
80094da4:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
80094da8:	d1601c04 	addi	r5,gp,-32656
80094dac:	e13fff17 	ldw	r4,-4(fp)
80094db0:	00955040 	call	80095504 <alt_find_dev>
80094db4:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
80094db8:	e0bffe17 	ldw	r2,-8(fp)
80094dbc:	1000041e 	bne	r2,zero,80094dd0 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
80094dc0:	009321c0 	call	8009321c <alt_get_errno>
80094dc4:	1007883a 	mov	r3,r2
80094dc8:	008004c4 	movi	r2,19
80094dcc:	18800015 	stw	r2,0(r3)
    }

    return dev;
80094dd0:	e0bffe17 	ldw	r2,-8(fp)
}
80094dd4:	e037883a 	mov	sp,fp
80094dd8:	dfc00117 	ldw	ra,4(sp)
80094ddc:	df000017 	ldw	fp,0(sp)
80094de0:	dec00204 	addi	sp,sp,8
80094de4:	f800283a 	ret

80094de8 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
80094de8:	defff804 	addi	sp,sp,-32
80094dec:	dfc00715 	stw	ra,28(sp)
80094df0:	df000615 	stw	fp,24(sp)
80094df4:	df000604 	addi	fp,sp,24
80094df8:	e13ffd15 	stw	r4,-12(fp)
80094dfc:	e17ffe15 	stw	r5,-8(fp)
80094e00:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
80094e04:	e0bffd17 	ldw	r2,-12(fp)
80094e08:	10801783 	ldbu	r2,94(r2)
80094e0c:	10803fcc 	andi	r2,r2,255
80094e10:	10000b26 	beq	r2,zero,80094e40 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
80094e14:	e0bffd17 	ldw	r2,-12(fp)
80094e18:	10800617 	ldw	r2,24(r2)
80094e1c:	00c00104 	movi	r3,4
80094e20:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
80094e24:	0001883a 	nop
80094e28:	e0bffd17 	ldw	r2,-12(fp)
80094e2c:	10800617 	ldw	r2,24(r2)
80094e30:	10800037 	ldwio	r2,0(r2)
80094e34:	1080010c 	andi	r2,r2,4
80094e38:	1005d0ba 	srai	r2,r2,2
80094e3c:	103ffa1e 	bne	r2,zero,80094e28 <alt_msgdma_init+0x40>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80094e40:	e0bffd17 	ldw	r2,-12(fp)
80094e44:	10800317 	ldw	r2,12(r2)
80094e48:	10800104 	addi	r2,r2,4
80094e4c:	00c00084 	movi	r3,2
80094e50:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80094e54:	0001883a 	nop
80094e58:	e0bffd17 	ldw	r2,-12(fp)
80094e5c:	10800317 	ldw	r2,12(r2)
80094e60:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
80094e64:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80094e68:	103ffb1e 	bne	r2,zero,80094e58 <alt_msgdma_init+0x70>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80094e6c:	e0bffd17 	ldw	r2,-12(fp)
80094e70:	10800317 	ldw	r2,12(r2)
80094e74:	10800104 	addi	r2,r2,4
80094e78:	10800037 	ldwio	r2,0(r2)
80094e7c:	1007883a 	mov	r3,r2
80094e80:	00bffbc4 	movi	r2,-17
80094e84:	1884703a 	and	r2,r3,r2
80094e88:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80094e8c:	e0bffb17 	ldw	r2,-20(fp)
80094e90:	10800814 	ori	r2,r2,32
80094e94:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80094e98:	e0bffd17 	ldw	r2,-12(fp)
80094e9c:	10800317 	ldw	r2,12(r2)
80094ea0:	10800104 	addi	r2,r2,4
80094ea4:	e0fffb17 	ldw	r3,-20(fp)
80094ea8:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
80094eac:	e0bffd17 	ldw	r2,-12(fp)
80094eb0:	10800317 	ldw	r2,12(r2)
80094eb4:	e0fffd17 	ldw	r3,-12(fp)
80094eb8:	18c00317 	ldw	r3,12(r3)
80094ebc:	18c00037 	ldwio	r3,0(r3)
80094ec0:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
80094ec4:	e0bffd17 	ldw	r2,-12(fp)
80094ec8:	10801783 	ldbu	r2,94(r2)
80094ecc:	10803fcc 	andi	r2,r2,255
80094ed0:	10000826 	beq	r2,zero,80094ef4 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
80094ed4:	e0bffd17 	ldw	r2,-12(fp)
80094ed8:	10800617 	ldw	r2,24(r2)
80094edc:	10800404 	addi	r2,r2,16
80094ee0:	e0fffd17 	ldw	r3,-12(fp)
80094ee4:	18c00617 	ldw	r3,24(r3)
80094ee8:	18c00404 	addi	r3,r3,16
80094eec:	18c00037 	ldwio	r3,0(r3)
80094ef0:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
80094ef4:	d1601c04 	addi	r5,gp,-32656
80094ef8:	e13ffd17 	ldw	r4,-12(fp)
80094efc:	00953a00 	call	800953a0 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
80094f00:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
80094f04:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
80094f08:	e0bffc17 	ldw	r2,-16(fp)
80094f0c:	1000081e 	bne	r2,zero,80094f30 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
80094f10:	d8000015 	stw	zero,0(sp)
80094f14:	e1fffd17 	ldw	r7,-12(fp)
80094f18:	01a00274 	movhi	r6,32777
80094f1c:	318d0604 	addi	r6,r6,13336
80094f20:	e17fff17 	ldw	r5,-4(fp)
80094f24:	e13ffe17 	ldw	r4,-8(fp)
80094f28:	0091a0c0 	call	80091a0c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
80094f2c:	00000406 	br	80094f40 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
80094f30:	01200274 	movhi	r4,32777
80094f34:	211b9304 	addi	r4,r4,28236
80094f38:	00959f80 	call	800959f8 <alt_printf>
    }
    
    return;
80094f3c:	0001883a 	nop

}
80094f40:	e037883a 	mov	sp,fp
80094f44:	dfc00117 	ldw	ra,4(sp)
80094f48:	df000017 	ldw	fp,0(sp)
80094f4c:	dec00204 	addi	sp,sp,8
80094f50:	f800283a 	ret

80094f54 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
80094f54:	defffb04 	addi	sp,sp,-20
80094f58:	df000415 	stw	fp,16(sp)
80094f5c:	df000404 	addi	fp,sp,16
80094f60:	e13ffc15 	stw	r4,-16(fp)
80094f64:	e17ffd15 	stw	r5,-12(fp)
80094f68:	e1bffe15 	stw	r6,-8(fp)
80094f6c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
80094f70:	e0bffc17 	ldw	r2,-16(fp)
80094f74:	e0fffd17 	ldw	r3,-12(fp)
80094f78:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
80094f7c:	e0bffc17 	ldw	r2,-16(fp)
80094f80:	e0ffff17 	ldw	r3,-4(fp)
80094f84:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
80094f88:	e0bffc17 	ldw	r2,-16(fp)
80094f8c:	e0fffe17 	ldw	r3,-8(fp)
80094f90:	10c00d15 	stw	r3,52(r2)

    return ;
80094f94:	0001883a 	nop
}
80094f98:	e037883a 	mov	sp,fp
80094f9c:	df000017 	ldw	fp,0(sp)
80094fa0:	dec00104 	addi	sp,sp,4
80094fa4:	f800283a 	ret

80094fa8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
80094fa8:	defffc04 	addi	sp,sp,-16
80094fac:	dfc00315 	stw	ra,12(sp)
80094fb0:	df000215 	stw	fp,8(sp)
80094fb4:	df000204 	addi	fp,sp,8
80094fb8:	e13ffe15 	stw	r4,-8(fp)
80094fbc:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
80094fc0:	000d883a 	mov	r6,zero
80094fc4:	e17fff17 	ldw	r5,-4(fp)
80094fc8:	e13ffe17 	ldw	r4,-8(fp)
80094fcc:	009377c0 	call	8009377c <alt_msgdma_descriptor_async_transfer>

}
80094fd0:	e037883a 	mov	sp,fp
80094fd4:	dfc00117 	ldw	ra,4(sp)
80094fd8:	df000017 	ldw	fp,0(sp)
80094fdc:	dec00204 	addi	sp,sp,8
80094fe0:	f800283a 	ret

80094fe4 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
80094fe4:	defffc04 	addi	sp,sp,-16
80094fe8:	dfc00315 	stw	ra,12(sp)
80094fec:	df000215 	stw	fp,8(sp)
80094ff0:	df000204 	addi	fp,sp,8
80094ff4:	e13ffe15 	stw	r4,-8(fp)
80094ff8:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
80094ffc:	e1bfff17 	ldw	r6,-4(fp)
80095000:	000b883a 	mov	r5,zero
80095004:	e13ffe17 	ldw	r4,-8(fp)
80095008:	009377c0 	call	8009377c <alt_msgdma_descriptor_async_transfer>
}
8009500c:	e037883a 	mov	sp,fp
80095010:	dfc00117 	ldw	ra,4(sp)
80095014:	df000017 	ldw	fp,0(sp)
80095018:	dec00204 	addi	sp,sp,8
8009501c:	f800283a 	ret

80095020 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
80095020:	defffc04 	addi	sp,sp,-16
80095024:	dfc00315 	stw	ra,12(sp)
80095028:	df000215 	stw	fp,8(sp)
8009502c:	df000204 	addi	fp,sp,8
80095030:	e13ffe15 	stw	r4,-8(fp)
80095034:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
80095038:	000d883a 	mov	r6,zero
8009503c:	e17fff17 	ldw	r5,-4(fp)
80095040:	e13ffe17 	ldw	r4,-8(fp)
80095044:	0093a4c0 	call	80093a4c <alt_msgdma_descriptor_sync_transfer>
}
80095048:	e037883a 	mov	sp,fp
8009504c:	dfc00117 	ldw	ra,4(sp)
80095050:	df000017 	ldw	fp,0(sp)
80095054:	dec00204 	addi	sp,sp,8
80095058:	f800283a 	ret

8009505c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8009505c:	defffc04 	addi	sp,sp,-16
80095060:	dfc00315 	stw	ra,12(sp)
80095064:	df000215 	stw	fp,8(sp)
80095068:	df000204 	addi	fp,sp,8
8009506c:	e13ffe15 	stw	r4,-8(fp)
80095070:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
80095074:	e1bfff17 	ldw	r6,-4(fp)
80095078:	000b883a 	mov	r5,zero
8009507c:	e13ffe17 	ldw	r4,-8(fp)
80095080:	0093a4c0 	call	80093a4c <alt_msgdma_descriptor_sync_transfer>
}
80095084:	e037883a 	mov	sp,fp
80095088:	dfc00117 	ldw	ra,4(sp)
8009508c:	df000017 	ldw	fp,0(sp)
80095090:	dec00204 	addi	sp,sp,8
80095094:	f800283a 	ret

80095098 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
80095098:	defff504 	addi	sp,sp,-44
8009509c:	df000a15 	stw	fp,40(sp)
800950a0:	df000a04 	addi	fp,sp,40
800950a4:	e13ffc15 	stw	r4,-16(fp)
800950a8:	e17ffd15 	stw	r5,-12(fp)
800950ac:	e1bffe15 	stw	r6,-8(fp)
800950b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
800950b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
800950b8:	d0a74a17 	ldw	r2,-25304(gp)
  
  if (alt_ticks_per_second ())
800950bc:	10003c26 	beq	r2,zero,800951b0 <alt_alarm_start+0x118>
  {
    if (alarm)
800950c0:	e0bffc17 	ldw	r2,-16(fp)
800950c4:	10003826 	beq	r2,zero,800951a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
800950c8:	e0bffc17 	ldw	r2,-16(fp)
800950cc:	e0fffe17 	ldw	r3,-8(fp)
800950d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
800950d4:	e0bffc17 	ldw	r2,-16(fp)
800950d8:	e0ffff17 	ldw	r3,-4(fp)
800950dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800950e0:	0005303a 	rdctl	r2,status
800950e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800950e8:	e0fff917 	ldw	r3,-28(fp)
800950ec:	00bfff84 	movi	r2,-2
800950f0:	1884703a 	and	r2,r3,r2
800950f4:	1001703a 	wrctl	status,r2
  
  return context;
800950f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
800950fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80095100:	d0a74b17 	ldw	r2,-25300(gp)
      
      current_nticks = alt_nticks();
80095104:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
80095108:	e0fffd17 	ldw	r3,-12(fp)
8009510c:	e0bff617 	ldw	r2,-40(fp)
80095110:	1885883a 	add	r2,r3,r2
80095114:	10c00044 	addi	r3,r2,1
80095118:	e0bffc17 	ldw	r2,-16(fp)
8009511c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
80095120:	e0bffc17 	ldw	r2,-16(fp)
80095124:	10c00217 	ldw	r3,8(r2)
80095128:	e0bff617 	ldw	r2,-40(fp)
8009512c:	1880042e 	bgeu	r3,r2,80095140 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
80095130:	e0bffc17 	ldw	r2,-16(fp)
80095134:	00c00044 	movi	r3,1
80095138:	10c00405 	stb	r3,16(r2)
8009513c:	00000206 	br	80095148 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
80095140:	e0bffc17 	ldw	r2,-16(fp)
80095144:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
80095148:	e0bffc17 	ldw	r2,-16(fp)
8009514c:	d0e01a04 	addi	r3,gp,-32664
80095150:	e0fffa15 	stw	r3,-24(fp)
80095154:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80095158:	e0bffb17 	ldw	r2,-20(fp)
8009515c:	e0fffa17 	ldw	r3,-24(fp)
80095160:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80095164:	e0bffa17 	ldw	r2,-24(fp)
80095168:	10c00017 	ldw	r3,0(r2)
8009516c:	e0bffb17 	ldw	r2,-20(fp)
80095170:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80095174:	e0bffa17 	ldw	r2,-24(fp)
80095178:	10800017 	ldw	r2,0(r2)
8009517c:	e0fffb17 	ldw	r3,-20(fp)
80095180:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80095184:	e0bffa17 	ldw	r2,-24(fp)
80095188:	e0fffb17 	ldw	r3,-20(fp)
8009518c:	10c00015 	stw	r3,0(r2)
80095190:	e0bff817 	ldw	r2,-32(fp)
80095194:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80095198:	e0bff717 	ldw	r2,-36(fp)
8009519c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
800951a0:	0005883a 	mov	r2,zero
800951a4:	00000306 	br	800951b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
800951a8:	00bffa84 	movi	r2,-22
800951ac:	00000106 	br	800951b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
800951b0:	00bfde84 	movi	r2,-134
  }
}
800951b4:	e037883a 	mov	sp,fp
800951b8:	df000017 	ldw	fp,0(sp)
800951bc:	dec00104 	addi	sp,sp,4
800951c0:	f800283a 	ret

800951c4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
800951c4:	defffa04 	addi	sp,sp,-24
800951c8:	dfc00515 	stw	ra,20(sp)
800951cc:	df000415 	stw	fp,16(sp)
800951d0:	df000404 	addi	fp,sp,16
800951d4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
800951d8:	008000c4 	movi	r2,3
800951dc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
800951e0:	e0fffd17 	ldw	r3,-12(fp)
800951e4:	008003f4 	movhi	r2,15
800951e8:	10909004 	addi	r2,r2,16960
800951ec:	1885383a 	mul	r2,r3,r2
800951f0:	100b883a 	mov	r5,r2
800951f4:	0102fb34 	movhi	r4,3052
800951f8:	21308004 	addi	r4,r4,-15872
800951fc:	008f9c40 	call	8008f9c4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80095200:	100b883a 	mov	r5,r2
80095204:	01200034 	movhi	r4,32768
80095208:	213fffc4 	addi	r4,r4,-1
8009520c:	008f9c40 	call	8008f9c4 <__udivsi3>
80095210:	100b883a 	mov	r5,r2
80095214:	e13fff17 	ldw	r4,-4(fp)
80095218:	008f9c40 	call	8008f9c4 <__udivsi3>
8009521c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
80095220:	e0bffe17 	ldw	r2,-8(fp)
80095224:	10002a26 	beq	r2,zero,800952d0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
80095228:	e03ffc15 	stw	zero,-16(fp)
8009522c:	00001706 	br	8009528c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80095230:	00a00034 	movhi	r2,32768
80095234:	10bfffc4 	addi	r2,r2,-1
80095238:	10bfffc4 	addi	r2,r2,-1
8009523c:	103ffe1e 	bne	r2,zero,80095238 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
80095240:	e0fffd17 	ldw	r3,-12(fp)
80095244:	008003f4 	movhi	r2,15
80095248:	10909004 	addi	r2,r2,16960
8009524c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
80095250:	100b883a 	mov	r5,r2
80095254:	0102fb34 	movhi	r4,3052
80095258:	21308004 	addi	r4,r4,-15872
8009525c:	008f9c40 	call	8008f9c4 <__udivsi3>
80095260:	100b883a 	mov	r5,r2
80095264:	01200034 	movhi	r4,32768
80095268:	213fffc4 	addi	r4,r4,-1
8009526c:	008f9c40 	call	8008f9c4 <__udivsi3>
80095270:	1007883a 	mov	r3,r2
80095274:	e0bfff17 	ldw	r2,-4(fp)
80095278:	10c5c83a 	sub	r2,r2,r3
8009527c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
80095280:	e0bffc17 	ldw	r2,-16(fp)
80095284:	10800044 	addi	r2,r2,1
80095288:	e0bffc15 	stw	r2,-16(fp)
8009528c:	e0fffc17 	ldw	r3,-16(fp)
80095290:	e0bffe17 	ldw	r2,-8(fp)
80095294:	18bfe616 	blt	r3,r2,80095230 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80095298:	e0fffd17 	ldw	r3,-12(fp)
8009529c:	008003f4 	movhi	r2,15
800952a0:	10909004 	addi	r2,r2,16960
800952a4:	1885383a 	mul	r2,r3,r2
800952a8:	100b883a 	mov	r5,r2
800952ac:	0102fb34 	movhi	r4,3052
800952b0:	21308004 	addi	r4,r4,-15872
800952b4:	008f9c40 	call	8008f9c4 <__udivsi3>
800952b8:	1007883a 	mov	r3,r2
800952bc:	e0bfff17 	ldw	r2,-4(fp)
800952c0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
800952c4:	10bfffc4 	addi	r2,r2,-1
800952c8:	103ffe1e 	bne	r2,zero,800952c4 <alt_busy_sleep+0x100>
800952cc:	00000d06 	br	80095304 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
800952d0:	e0fffd17 	ldw	r3,-12(fp)
800952d4:	008003f4 	movhi	r2,15
800952d8:	10909004 	addi	r2,r2,16960
800952dc:	1885383a 	mul	r2,r3,r2
800952e0:	100b883a 	mov	r5,r2
800952e4:	0102fb34 	movhi	r4,3052
800952e8:	21308004 	addi	r4,r4,-15872
800952ec:	008f9c40 	call	8008f9c4 <__udivsi3>
800952f0:	1007883a 	mov	r3,r2
800952f4:	e0bfff17 	ldw	r2,-4(fp)
800952f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
800952fc:	10bfffc4 	addi	r2,r2,-1
80095300:	00bffe16 	blt	zero,r2,800952fc <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80095304:	0005883a 	mov	r2,zero
}
80095308:	e037883a 	mov	sp,fp
8009530c:	dfc00117 	ldw	ra,4(sp)
80095310:	df000017 	ldw	fp,0(sp)
80095314:	dec00204 	addi	sp,sp,8
80095318:	f800283a 	ret

8009531c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
8009531c:	defffe04 	addi	sp,sp,-8
80095320:	df000115 	stw	fp,4(sp)
80095324:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
80095328:	e03fff15 	stw	zero,-4(fp)
8009532c:	00000506 	br	80095344 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
80095330:	e0bfff17 	ldw	r2,-4(fp)
80095334:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
80095338:	e0bfff17 	ldw	r2,-4(fp)
8009533c:	10800804 	addi	r2,r2,32
80095340:	e0bfff15 	stw	r2,-4(fp)
80095344:	e0bfff17 	ldw	r2,-4(fp)
80095348:	10820030 	cmpltui	r2,r2,2048
8009534c:	103ff81e 	bne	r2,zero,80095330 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80095350:	0001883a 	nop
80095354:	e037883a 	mov	sp,fp
80095358:	df000017 	ldw	fp,0(sp)
8009535c:	dec00104 	addi	sp,sp,4
80095360:	f800283a 	ret

80095364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80095364:	defffe04 	addi	sp,sp,-8
80095368:	dfc00115 	stw	ra,4(sp)
8009536c:	df000015 	stw	fp,0(sp)
80095370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80095374:	d0a01717 	ldw	r2,-32676(gp)
80095378:	10000326 	beq	r2,zero,80095388 <alt_get_errno+0x24>
8009537c:	d0a01717 	ldw	r2,-32676(gp)
80095380:	103ee83a 	callr	r2
80095384:	00000106 	br	8009538c <alt_get_errno+0x28>
80095388:	d0a74504 	addi	r2,gp,-25324
}
8009538c:	e037883a 	mov	sp,fp
80095390:	dfc00117 	ldw	ra,4(sp)
80095394:	df000017 	ldw	fp,0(sp)
80095398:	dec00204 	addi	sp,sp,8
8009539c:	f800283a 	ret

800953a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
800953a0:	defffa04 	addi	sp,sp,-24
800953a4:	dfc00515 	stw	ra,20(sp)
800953a8:	df000415 	stw	fp,16(sp)
800953ac:	df000404 	addi	fp,sp,16
800953b0:	e13ffe15 	stw	r4,-8(fp)
800953b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
800953b8:	e0bffe17 	ldw	r2,-8(fp)
800953bc:	10000326 	beq	r2,zero,800953cc <alt_dev_llist_insert+0x2c>
800953c0:	e0bffe17 	ldw	r2,-8(fp)
800953c4:	10800217 	ldw	r2,8(r2)
800953c8:	1000061e 	bne	r2,zero,800953e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
800953cc:	00953640 	call	80095364 <alt_get_errno>
800953d0:	1007883a 	mov	r3,r2
800953d4:	00800584 	movi	r2,22
800953d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
800953dc:	00bffa84 	movi	r2,-22
800953e0:	00001306 	br	80095430 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
800953e4:	e0bffe17 	ldw	r2,-8(fp)
800953e8:	e0ffff17 	ldw	r3,-4(fp)
800953ec:	e0fffc15 	stw	r3,-16(fp)
800953f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
800953f4:	e0bffd17 	ldw	r2,-12(fp)
800953f8:	e0fffc17 	ldw	r3,-16(fp)
800953fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80095400:	e0bffc17 	ldw	r2,-16(fp)
80095404:	10c00017 	ldw	r3,0(r2)
80095408:	e0bffd17 	ldw	r2,-12(fp)
8009540c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80095410:	e0bffc17 	ldw	r2,-16(fp)
80095414:	10800017 	ldw	r2,0(r2)
80095418:	e0fffd17 	ldw	r3,-12(fp)
8009541c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80095420:	e0bffc17 	ldw	r2,-16(fp)
80095424:	e0fffd17 	ldw	r3,-12(fp)
80095428:	10c00015 	stw	r3,0(r2)

  return 0;  
8009542c:	0005883a 	mov	r2,zero
}
80095430:	e037883a 	mov	sp,fp
80095434:	dfc00117 	ldw	ra,4(sp)
80095438:	df000017 	ldw	fp,0(sp)
8009543c:	dec00204 	addi	sp,sp,8
80095440:	f800283a 	ret

80095444 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
80095444:	defffd04 	addi	sp,sp,-12
80095448:	dfc00215 	stw	ra,8(sp)
8009544c:	df000115 	stw	fp,4(sp)
80095450:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80095454:	00a00274 	movhi	r2,32777
80095458:	1098ee04 	addi	r2,r2,25528
8009545c:	e0bfff15 	stw	r2,-4(fp)
80095460:	00000606 	br	8009547c <_do_ctors+0x38>
        (*ctor) (); 
80095464:	e0bfff17 	ldw	r2,-4(fp)
80095468:	10800017 	ldw	r2,0(r2)
8009546c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80095470:	e0bfff17 	ldw	r2,-4(fp)
80095474:	10bfff04 	addi	r2,r2,-4
80095478:	e0bfff15 	stw	r2,-4(fp)
8009547c:	e0ffff17 	ldw	r3,-4(fp)
80095480:	00a00274 	movhi	r2,32777
80095484:	1098ef04 	addi	r2,r2,25532
80095488:	18bff62e 	bgeu	r3,r2,80095464 <_do_ctors+0x20>
        (*ctor) (); 
}
8009548c:	0001883a 	nop
80095490:	e037883a 	mov	sp,fp
80095494:	dfc00117 	ldw	ra,4(sp)
80095498:	df000017 	ldw	fp,0(sp)
8009549c:	dec00204 	addi	sp,sp,8
800954a0:	f800283a 	ret

800954a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
800954a4:	defffd04 	addi	sp,sp,-12
800954a8:	dfc00215 	stw	ra,8(sp)
800954ac:	df000115 	stw	fp,4(sp)
800954b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
800954b4:	00a00274 	movhi	r2,32777
800954b8:	1098ee04 	addi	r2,r2,25528
800954bc:	e0bfff15 	stw	r2,-4(fp)
800954c0:	00000606 	br	800954dc <_do_dtors+0x38>
        (*dtor) (); 
800954c4:	e0bfff17 	ldw	r2,-4(fp)
800954c8:	10800017 	ldw	r2,0(r2)
800954cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
800954d0:	e0bfff17 	ldw	r2,-4(fp)
800954d4:	10bfff04 	addi	r2,r2,-4
800954d8:	e0bfff15 	stw	r2,-4(fp)
800954dc:	e0ffff17 	ldw	r3,-4(fp)
800954e0:	00a00274 	movhi	r2,32777
800954e4:	1098ef04 	addi	r2,r2,25532
800954e8:	18bff62e 	bgeu	r3,r2,800954c4 <_do_dtors+0x20>
        (*dtor) (); 
}
800954ec:	0001883a 	nop
800954f0:	e037883a 	mov	sp,fp
800954f4:	dfc00117 	ldw	ra,4(sp)
800954f8:	df000017 	ldw	fp,0(sp)
800954fc:	dec00204 	addi	sp,sp,8
80095500:	f800283a 	ret

80095504 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
80095504:	defffa04 	addi	sp,sp,-24
80095508:	dfc00515 	stw	ra,20(sp)
8009550c:	df000415 	stw	fp,16(sp)
80095510:	df000404 	addi	fp,sp,16
80095514:	e13ffe15 	stw	r4,-8(fp)
80095518:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8009551c:	e0bfff17 	ldw	r2,-4(fp)
80095520:	10800017 	ldw	r2,0(r2)
80095524:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
80095528:	e13ffe17 	ldw	r4,-8(fp)
8009552c:	00820100 	call	80082010 <strlen>
80095530:	10800044 	addi	r2,r2,1
80095534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80095538:	00000d06 	br	80095570 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8009553c:	e0bffc17 	ldw	r2,-16(fp)
80095540:	10800217 	ldw	r2,8(r2)
80095544:	e0fffd17 	ldw	r3,-12(fp)
80095548:	180d883a 	mov	r6,r3
8009554c:	e17ffe17 	ldw	r5,-8(fp)
80095550:	1009883a 	mov	r4,r2
80095554:	0095f0c0 	call	80095f0c <memcmp>
80095558:	1000021e 	bne	r2,zero,80095564 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
8009555c:	e0bffc17 	ldw	r2,-16(fp)
80095560:	00000706 	br	80095580 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
80095564:	e0bffc17 	ldw	r2,-16(fp)
80095568:	10800017 	ldw	r2,0(r2)
8009556c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80095570:	e0fffc17 	ldw	r3,-16(fp)
80095574:	e0bfff17 	ldw	r2,-4(fp)
80095578:	18bff01e 	bne	r3,r2,8009553c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8009557c:	0005883a 	mov	r2,zero
}
80095580:	e037883a 	mov	sp,fp
80095584:	dfc00117 	ldw	ra,4(sp)
80095588:	df000017 	ldw	fp,0(sp)
8009558c:	dec00204 	addi	sp,sp,8
80095590:	f800283a 	ret

80095594 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
80095594:	defffe04 	addi	sp,sp,-8
80095598:	dfc00115 	stw	ra,4(sp)
8009559c:	df000015 	stw	fp,0(sp)
800955a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
800955a4:	01440004 	movi	r5,4096
800955a8:	0009883a 	mov	r4,zero
800955ac:	0095e300 	call	80095e30 <alt_icache_flush>
#endif
}
800955b0:	0001883a 	nop
800955b4:	e037883a 	mov	sp,fp
800955b8:	dfc00117 	ldw	ra,4(sp)
800955bc:	df000017 	ldw	fp,0(sp)
800955c0:	dec00204 	addi	sp,sp,8
800955c4:	f800283a 	ret

800955c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
800955c8:	defffe04 	addi	sp,sp,-8
800955cc:	df000115 	stw	fp,4(sp)
800955d0:	df000104 	addi	fp,sp,4
800955d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
800955d8:	e0bfff17 	ldw	r2,-4(fp)
800955dc:	10bffe84 	addi	r2,r2,-6
800955e0:	10c00428 	cmpgeui	r3,r2,16
800955e4:	18001a1e 	bne	r3,zero,80095650 <alt_exception_cause_generated_bad_addr+0x88>
800955e8:	100690ba 	slli	r3,r2,2
800955ec:	00a00274 	movhi	r2,32777
800955f0:	10958004 	addi	r2,r2,22016
800955f4:	1885883a 	add	r2,r3,r2
800955f8:	10800017 	ldw	r2,0(r2)
800955fc:	1000683a 	jmp	r2
80095600:	80095640 	call	88009564 <__alt_data_end+0x7f0c564>
80095604:	80095640 	call	88009564 <__alt_data_end+0x7f0c564>
80095608:	80095650 	cmplti	zero,r16,9561
8009560c:	80095650 	cmplti	zero,r16,9561
80095610:	80095650 	cmplti	zero,r16,9561
80095614:	80095640 	call	88009564 <__alt_data_end+0x7f0c564>
80095618:	80095648 	cmpgei	zero,r16,9561
8009561c:	80095650 	cmplti	zero,r16,9561
80095620:	80095640 	call	88009564 <__alt_data_end+0x7f0c564>
80095624:	80095640 	call	88009564 <__alt_data_end+0x7f0c564>
80095628:	80095650 	cmplti	zero,r16,9561
8009562c:	80095640 	call	88009564 <__alt_data_end+0x7f0c564>
80095630:	80095648 	cmpgei	zero,r16,9561
80095634:	80095650 	cmplti	zero,r16,9561
80095638:	80095650 	cmplti	zero,r16,9561
8009563c:	80095640 	call	88009564 <__alt_data_end+0x7f0c564>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
80095640:	00800044 	movi	r2,1
80095644:	00000306 	br	80095654 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
80095648:	0005883a 	mov	r2,zero
8009564c:	00000106 	br	80095654 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
80095650:	0005883a 	mov	r2,zero
  }
}
80095654:	e037883a 	mov	sp,fp
80095658:	df000017 	ldw	fp,0(sp)
8009565c:	dec00104 	addi	sp,sp,4
80095660:	f800283a 	ret

80095664 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
80095664:	defff904 	addi	sp,sp,-28
80095668:	dfc00615 	stw	ra,24(sp)
8009566c:	df000515 	stw	fp,20(sp)
80095670:	df000504 	addi	fp,sp,20
80095674:	e13ffc15 	stw	r4,-16(fp)
80095678:	e17ffd15 	stw	r5,-12(fp)
8009567c:	e1bffe15 	stw	r6,-8(fp)
80095680:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
80095684:	e1bfff17 	ldw	r6,-4(fp)
80095688:	e17ffe17 	ldw	r5,-8(fp)
8009568c:	e13ffd17 	ldw	r4,-12(fp)
80095690:	00958a40 	call	800958a4 <open>
80095694:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
80095698:	e0bffb17 	ldw	r2,-20(fp)
8009569c:	10001c16 	blt	r2,zero,80095710 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
800956a0:	00a00274 	movhi	r2,32777
800956a4:	109dd104 	addi	r2,r2,30532
800956a8:	e0fffb17 	ldw	r3,-20(fp)
800956ac:	18c00324 	muli	r3,r3,12
800956b0:	10c5883a 	add	r2,r2,r3
800956b4:	10c00017 	ldw	r3,0(r2)
800956b8:	e0bffc17 	ldw	r2,-16(fp)
800956bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
800956c0:	00a00274 	movhi	r2,32777
800956c4:	109dd104 	addi	r2,r2,30532
800956c8:	e0fffb17 	ldw	r3,-20(fp)
800956cc:	18c00324 	muli	r3,r3,12
800956d0:	10c5883a 	add	r2,r2,r3
800956d4:	10800104 	addi	r2,r2,4
800956d8:	10c00017 	ldw	r3,0(r2)
800956dc:	e0bffc17 	ldw	r2,-16(fp)
800956e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
800956e4:	00a00274 	movhi	r2,32777
800956e8:	109dd104 	addi	r2,r2,30532
800956ec:	e0fffb17 	ldw	r3,-20(fp)
800956f0:	18c00324 	muli	r3,r3,12
800956f4:	10c5883a 	add	r2,r2,r3
800956f8:	10800204 	addi	r2,r2,8
800956fc:	10c00017 	ldw	r3,0(r2)
80095700:	e0bffc17 	ldw	r2,-16(fp)
80095704:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
80095708:	e13ffb17 	ldw	r4,-20(fp)
8009570c:	00921840 	call	80092184 <alt_release_fd>
  }
} 
80095710:	0001883a 	nop
80095714:	e037883a 	mov	sp,fp
80095718:	dfc00117 	ldw	ra,4(sp)
8009571c:	df000017 	ldw	fp,0(sp)
80095720:	dec00204 	addi	sp,sp,8
80095724:	f800283a 	ret

80095728 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
80095728:	defffb04 	addi	sp,sp,-20
8009572c:	dfc00415 	stw	ra,16(sp)
80095730:	df000315 	stw	fp,12(sp)
80095734:	df000304 	addi	fp,sp,12
80095738:	e13ffd15 	stw	r4,-12(fp)
8009573c:	e17ffe15 	stw	r5,-8(fp)
80095740:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
80095744:	01c07fc4 	movi	r7,511
80095748:	01800044 	movi	r6,1
8009574c:	e17ffd17 	ldw	r5,-12(fp)
80095750:	01200274 	movhi	r4,32777
80095754:	211dd404 	addi	r4,r4,30544
80095758:	00956640 	call	80095664 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8009575c:	01c07fc4 	movi	r7,511
80095760:	000d883a 	mov	r6,zero
80095764:	e17ffe17 	ldw	r5,-8(fp)
80095768:	01200274 	movhi	r4,32777
8009576c:	211dd104 	addi	r4,r4,30532
80095770:	00956640 	call	80095664 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
80095774:	01c07fc4 	movi	r7,511
80095778:	01800044 	movi	r6,1
8009577c:	e17fff17 	ldw	r5,-4(fp)
80095780:	01200274 	movhi	r4,32777
80095784:	211dd704 	addi	r4,r4,30556
80095788:	00956640 	call	80095664 <alt_open_fd>
}  
8009578c:	0001883a 	nop
80095790:	e037883a 	mov	sp,fp
80095794:	dfc00117 	ldw	ra,4(sp)
80095798:	df000017 	ldw	fp,0(sp)
8009579c:	dec00204 	addi	sp,sp,8
800957a0:	f800283a 	ret

800957a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
800957a4:	defffe04 	addi	sp,sp,-8
800957a8:	dfc00115 	stw	ra,4(sp)
800957ac:	df000015 	stw	fp,0(sp)
800957b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
800957b4:	d0a01717 	ldw	r2,-32676(gp)
800957b8:	10000326 	beq	r2,zero,800957c8 <alt_get_errno+0x24>
800957bc:	d0a01717 	ldw	r2,-32676(gp)
800957c0:	103ee83a 	callr	r2
800957c4:	00000106 	br	800957cc <alt_get_errno+0x28>
800957c8:	d0a74504 	addi	r2,gp,-25324
}
800957cc:	e037883a 	mov	sp,fp
800957d0:	dfc00117 	ldw	ra,4(sp)
800957d4:	df000017 	ldw	fp,0(sp)
800957d8:	dec00204 	addi	sp,sp,8
800957dc:	f800283a 	ret

800957e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
800957e0:	defffd04 	addi	sp,sp,-12
800957e4:	df000215 	stw	fp,8(sp)
800957e8:	df000204 	addi	fp,sp,8
800957ec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
800957f0:	e0bfff17 	ldw	r2,-4(fp)
800957f4:	10800217 	ldw	r2,8(r2)
800957f8:	10d00034 	orhi	r3,r2,16384
800957fc:	e0bfff17 	ldw	r2,-4(fp)
80095800:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80095804:	e03ffe15 	stw	zero,-8(fp)
80095808:	00001d06 	br	80095880 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8009580c:	00a00274 	movhi	r2,32777
80095810:	109dd104 	addi	r2,r2,30532
80095814:	e0fffe17 	ldw	r3,-8(fp)
80095818:	18c00324 	muli	r3,r3,12
8009581c:	10c5883a 	add	r2,r2,r3
80095820:	10c00017 	ldw	r3,0(r2)
80095824:	e0bfff17 	ldw	r2,-4(fp)
80095828:	10800017 	ldw	r2,0(r2)
8009582c:	1880111e 	bne	r3,r2,80095874 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
80095830:	00a00274 	movhi	r2,32777
80095834:	109dd104 	addi	r2,r2,30532
80095838:	e0fffe17 	ldw	r3,-8(fp)
8009583c:	18c00324 	muli	r3,r3,12
80095840:	10c5883a 	add	r2,r2,r3
80095844:	10800204 	addi	r2,r2,8
80095848:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8009584c:	1000090e 	bge	r2,zero,80095874 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
80095850:	e0bffe17 	ldw	r2,-8(fp)
80095854:	10c00324 	muli	r3,r2,12
80095858:	00a00274 	movhi	r2,32777
8009585c:	109dd104 	addi	r2,r2,30532
80095860:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
80095864:	e0bfff17 	ldw	r2,-4(fp)
80095868:	18800226 	beq	r3,r2,80095874 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8009586c:	00bffcc4 	movi	r2,-13
80095870:	00000806 	br	80095894 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80095874:	e0bffe17 	ldw	r2,-8(fp)
80095878:	10800044 	addi	r2,r2,1
8009587c:	e0bffe15 	stw	r2,-8(fp)
80095880:	d0a01617 	ldw	r2,-32680(gp)
80095884:	1007883a 	mov	r3,r2
80095888:	e0bffe17 	ldw	r2,-8(fp)
8009588c:	18bfdf2e 	bgeu	r3,r2,8009580c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
80095890:	0005883a 	mov	r2,zero
}
80095894:	e037883a 	mov	sp,fp
80095898:	df000017 	ldw	fp,0(sp)
8009589c:	dec00104 	addi	sp,sp,4
800958a0:	f800283a 	ret

800958a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
800958a4:	defff604 	addi	sp,sp,-40
800958a8:	dfc00915 	stw	ra,36(sp)
800958ac:	df000815 	stw	fp,32(sp)
800958b0:	df000804 	addi	fp,sp,32
800958b4:	e13ffd15 	stw	r4,-12(fp)
800958b8:	e17ffe15 	stw	r5,-8(fp)
800958bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
800958c0:	00bfffc4 	movi	r2,-1
800958c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
800958c8:	00bffb44 	movi	r2,-19
800958cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
800958d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
800958d4:	d1601404 	addi	r5,gp,-32688
800958d8:	e13ffd17 	ldw	r4,-12(fp)
800958dc:	00955040 	call	80095504 <alt_find_dev>
800958e0:	e0bff815 	stw	r2,-32(fp)
800958e4:	e0bff817 	ldw	r2,-32(fp)
800958e8:	1000051e 	bne	r2,zero,80095900 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
800958ec:	e13ffd17 	ldw	r4,-12(fp)
800958f0:	0095c840 	call	80095c84 <alt_find_file>
800958f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
800958f8:	00800044 	movi	r2,1
800958fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80095900:	e0bff817 	ldw	r2,-32(fp)
80095904:	10002926 	beq	r2,zero,800959ac <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
80095908:	e13ff817 	ldw	r4,-32(fp)
8009590c:	0095d8c0 	call	80095d8c <alt_get_fd>
80095910:	e0bff915 	stw	r2,-28(fp)
80095914:	e0bff917 	ldw	r2,-28(fp)
80095918:	1000030e 	bge	r2,zero,80095928 <open+0x84>
    {
      status = index;
8009591c:	e0bff917 	ldw	r2,-28(fp)
80095920:	e0bffa15 	stw	r2,-24(fp)
80095924:	00002306 	br	800959b4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
80095928:	e0bff917 	ldw	r2,-28(fp)
8009592c:	10c00324 	muli	r3,r2,12
80095930:	00a00274 	movhi	r2,32777
80095934:	109dd104 	addi	r2,r2,30532
80095938:	1885883a 	add	r2,r3,r2
8009593c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
80095940:	e0fffe17 	ldw	r3,-8(fp)
80095944:	00900034 	movhi	r2,16384
80095948:	10bfffc4 	addi	r2,r2,-1
8009594c:	1886703a 	and	r3,r3,r2
80095950:	e0bffc17 	ldw	r2,-16(fp)
80095954:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
80095958:	e0bffb17 	ldw	r2,-20(fp)
8009595c:	1000051e 	bne	r2,zero,80095974 <open+0xd0>
80095960:	e13ffc17 	ldw	r4,-16(fp)
80095964:	00957e00 	call	800957e0 <alt_file_locked>
80095968:	e0bffa15 	stw	r2,-24(fp)
8009596c:	e0bffa17 	ldw	r2,-24(fp)
80095970:	10001016 	blt	r2,zero,800959b4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
80095974:	e0bff817 	ldw	r2,-32(fp)
80095978:	10800317 	ldw	r2,12(r2)
8009597c:	10000826 	beq	r2,zero,800959a0 <open+0xfc>
80095980:	e0bff817 	ldw	r2,-32(fp)
80095984:	10800317 	ldw	r2,12(r2)
80095988:	e1ffff17 	ldw	r7,-4(fp)
8009598c:	e1bffe17 	ldw	r6,-8(fp)
80095990:	e17ffd17 	ldw	r5,-12(fp)
80095994:	e13ffc17 	ldw	r4,-16(fp)
80095998:	103ee83a 	callr	r2
8009599c:	00000106 	br	800959a4 <open+0x100>
800959a0:	0005883a 	mov	r2,zero
800959a4:	e0bffa15 	stw	r2,-24(fp)
800959a8:	00000206 	br	800959b4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
800959ac:	00bffb44 	movi	r2,-19
800959b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
800959b4:	e0bffa17 	ldw	r2,-24(fp)
800959b8:	1000090e 	bge	r2,zero,800959e0 <open+0x13c>
  {
    alt_release_fd (index);  
800959bc:	e13ff917 	ldw	r4,-28(fp)
800959c0:	00921840 	call	80092184 <alt_release_fd>
    ALT_ERRNO = -status;
800959c4:	00957a40 	call	800957a4 <alt_get_errno>
800959c8:	1007883a 	mov	r3,r2
800959cc:	e0bffa17 	ldw	r2,-24(fp)
800959d0:	0085c83a 	sub	r2,zero,r2
800959d4:	18800015 	stw	r2,0(r3)
    return -1;
800959d8:	00bfffc4 	movi	r2,-1
800959dc:	00000106 	br	800959e4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
800959e0:	e0bff917 	ldw	r2,-28(fp)
}
800959e4:	e037883a 	mov	sp,fp
800959e8:	dfc00117 	ldw	ra,4(sp)
800959ec:	df000017 	ldw	fp,0(sp)
800959f0:	dec00204 	addi	sp,sp,8
800959f4:	f800283a 	ret

800959f8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
800959f8:	defff204 	addi	sp,sp,-56
800959fc:	dfc00a15 	stw	ra,40(sp)
80095a00:	df000915 	stw	fp,36(sp)
80095a04:	df000904 	addi	fp,sp,36
80095a08:	e13fff15 	stw	r4,-4(fp)
80095a0c:	e1400215 	stw	r5,8(fp)
80095a10:	e1800315 	stw	r6,12(fp)
80095a14:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
80095a18:	e0800204 	addi	r2,fp,8
80095a1c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
80095a20:	e0bfff17 	ldw	r2,-4(fp)
80095a24:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
80095a28:	00006f06 	br	80095be8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
80095a2c:	e0bff807 	ldb	r2,-32(fp)
80095a30:	10800960 	cmpeqi	r2,r2,37
80095a34:	1000041e 	bne	r2,zero,80095a48 <alt_printf+0x50>
        {
            alt_putchar(c);
80095a38:	e0bff807 	ldb	r2,-32(fp)
80095a3c:	1009883a 	mov	r4,r2
80095a40:	0095c240 	call	80095c24 <alt_putchar>
80095a44:	00006806 	br	80095be8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
80095a48:	e0bff717 	ldw	r2,-36(fp)
80095a4c:	10c00044 	addi	r3,r2,1
80095a50:	e0fff715 	stw	r3,-36(fp)
80095a54:	10800003 	ldbu	r2,0(r2)
80095a58:	e0bff805 	stb	r2,-32(fp)
80095a5c:	e0bff807 	ldb	r2,-32(fp)
80095a60:	10006926 	beq	r2,zero,80095c08 <alt_printf+0x210>
            {
                if (c == '%')
80095a64:	e0bff807 	ldb	r2,-32(fp)
80095a68:	10800958 	cmpnei	r2,r2,37
80095a6c:	1000041e 	bne	r2,zero,80095a80 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
80095a70:	e0bff807 	ldb	r2,-32(fp)
80095a74:	1009883a 	mov	r4,r2
80095a78:	0095c240 	call	80095c24 <alt_putchar>
80095a7c:	00005a06 	br	80095be8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
80095a80:	e0bff807 	ldb	r2,-32(fp)
80095a84:	108018d8 	cmpnei	r2,r2,99
80095a88:	1000081e 	bne	r2,zero,80095aac <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
80095a8c:	e0bffe17 	ldw	r2,-8(fp)
80095a90:	10c00104 	addi	r3,r2,4
80095a94:	e0fffe15 	stw	r3,-8(fp)
80095a98:	10800017 	ldw	r2,0(r2)
80095a9c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
80095aa0:	e13ffd17 	ldw	r4,-12(fp)
80095aa4:	0095c240 	call	80095c24 <alt_putchar>
80095aa8:	00004f06 	br	80095be8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
80095aac:	e0bff807 	ldb	r2,-32(fp)
80095ab0:	10801e18 	cmpnei	r2,r2,120
80095ab4:	1000341e 	bne	r2,zero,80095b88 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
80095ab8:	e0bffe17 	ldw	r2,-8(fp)
80095abc:	10c00104 	addi	r3,r2,4
80095ac0:	e0fffe15 	stw	r3,-8(fp)
80095ac4:	10800017 	ldw	r2,0(r2)
80095ac8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
80095acc:	e0bffb17 	ldw	r2,-20(fp)
80095ad0:	1000031e 	bne	r2,zero,80095ae0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
80095ad4:	01000c04 	movi	r4,48
80095ad8:	0095c240 	call	80095c24 <alt_putchar>
                        continue;
80095adc:	00004206 	br	80095be8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80095ae0:	00800704 	movi	r2,28
80095ae4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
80095ae8:	00000306 	br	80095af8 <alt_printf+0x100>
                        digit_shift -= 4;
80095aec:	e0bff917 	ldw	r2,-28(fp)
80095af0:	10bfff04 	addi	r2,r2,-4
80095af4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
80095af8:	00c003c4 	movi	r3,15
80095afc:	e0bff917 	ldw	r2,-28(fp)
80095b00:	1884983a 	sll	r2,r3,r2
80095b04:	1007883a 	mov	r3,r2
80095b08:	e0bffb17 	ldw	r2,-20(fp)
80095b0c:	1884703a 	and	r2,r3,r2
80095b10:	103ff626 	beq	r2,zero,80095aec <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80095b14:	00001906 	br	80095b7c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
80095b18:	00c003c4 	movi	r3,15
80095b1c:	e0bff917 	ldw	r2,-28(fp)
80095b20:	1884983a 	sll	r2,r3,r2
80095b24:	1007883a 	mov	r3,r2
80095b28:	e0bffb17 	ldw	r2,-20(fp)
80095b2c:	1886703a 	and	r3,r3,r2
80095b30:	e0bff917 	ldw	r2,-28(fp)
80095b34:	1884d83a 	srl	r2,r3,r2
80095b38:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
80095b3c:	e0bffc17 	ldw	r2,-16(fp)
80095b40:	108002a8 	cmpgeui	r2,r2,10
80095b44:	1000041e 	bne	r2,zero,80095b58 <alt_printf+0x160>
                            c = '0' + digit;
80095b48:	e0bffc17 	ldw	r2,-16(fp)
80095b4c:	10800c04 	addi	r2,r2,48
80095b50:	e0bff805 	stb	r2,-32(fp)
80095b54:	00000306 	br	80095b64 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
80095b58:	e0bffc17 	ldw	r2,-16(fp)
80095b5c:	108015c4 	addi	r2,r2,87
80095b60:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
80095b64:	e0bff807 	ldb	r2,-32(fp)
80095b68:	1009883a 	mov	r4,r2
80095b6c:	0095c240 	call	80095c24 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80095b70:	e0bff917 	ldw	r2,-28(fp)
80095b74:	10bfff04 	addi	r2,r2,-4
80095b78:	e0bff915 	stw	r2,-28(fp)
80095b7c:	e0bff917 	ldw	r2,-28(fp)
80095b80:	103fe50e 	bge	r2,zero,80095b18 <alt_printf+0x120>
80095b84:	00001806 	br	80095be8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
80095b88:	e0bff807 	ldb	r2,-32(fp)
80095b8c:	10801cd8 	cmpnei	r2,r2,115
80095b90:	1000151e 	bne	r2,zero,80095be8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
80095b94:	e0bffe17 	ldw	r2,-8(fp)
80095b98:	10c00104 	addi	r3,r2,4
80095b9c:	e0fffe15 	stw	r3,-8(fp)
80095ba0:	10800017 	ldw	r2,0(r2)
80095ba4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
80095ba8:	00000906 	br	80095bd0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
80095bac:	e0bffa17 	ldw	r2,-24(fp)
80095bb0:	10c00044 	addi	r3,r2,1
80095bb4:	e0fffa15 	stw	r3,-24(fp)
80095bb8:	10800003 	ldbu	r2,0(r2)
80095bbc:	10803fcc 	andi	r2,r2,255
80095bc0:	1080201c 	xori	r2,r2,128
80095bc4:	10bfe004 	addi	r2,r2,-128
80095bc8:	1009883a 	mov	r4,r2
80095bcc:	0095c240 	call	80095c24 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
80095bd0:	e0bffa17 	ldw	r2,-24(fp)
80095bd4:	10800003 	ldbu	r2,0(r2)
80095bd8:	10803fcc 	andi	r2,r2,255
80095bdc:	1080201c 	xori	r2,r2,128
80095be0:	10bfe004 	addi	r2,r2,-128
80095be4:	103ff11e 	bne	r2,zero,80095bac <alt_printf+0x1b4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
80095be8:	e0bff717 	ldw	r2,-36(fp)
80095bec:	10c00044 	addi	r3,r2,1
80095bf0:	e0fff715 	stw	r3,-36(fp)
80095bf4:	10800003 	ldbu	r2,0(r2)
80095bf8:	e0bff805 	stb	r2,-32(fp)
80095bfc:	e0bff807 	ldb	r2,-32(fp)
80095c00:	103f8a1e 	bne	r2,zero,80095a2c <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80095c04:	00000106 	br	80095c0c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
80095c08:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80095c0c:	0001883a 	nop
80095c10:	e037883a 	mov	sp,fp
80095c14:	dfc00117 	ldw	ra,4(sp)
80095c18:	df000017 	ldw	fp,0(sp)
80095c1c:	dec00504 	addi	sp,sp,20
80095c20:	f800283a 	ret

80095c24 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
80095c24:	defffd04 	addi	sp,sp,-12
80095c28:	dfc00215 	stw	ra,8(sp)
80095c2c:	df000115 	stw	fp,4(sp)
80095c30:	df000104 	addi	fp,sp,4
80095c34:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
80095c38:	d0a00d17 	ldw	r2,-32716(gp)
80095c3c:	10800217 	ldw	r2,8(r2)
80095c40:	100b883a 	mov	r5,r2
80095c44:	e13fff17 	ldw	r4,-4(fp)
80095c48:	00960280 	call	80096028 <putc>
#endif
#endif
}
80095c4c:	e037883a 	mov	sp,fp
80095c50:	dfc00117 	ldw	ra,4(sp)
80095c54:	df000017 	ldw	fp,0(sp)
80095c58:	dec00204 	addi	sp,sp,8
80095c5c:	f800283a 	ret

80095c60 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
80095c60:	deffff04 	addi	sp,sp,-4
80095c64:	df000015 	stw	fp,0(sp)
80095c68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
80095c6c:	000170fa 	wrctl	ienable,zero
}
80095c70:	0001883a 	nop
80095c74:	e037883a 	mov	sp,fp
80095c78:	df000017 	ldw	fp,0(sp)
80095c7c:	dec00104 	addi	sp,sp,4
80095c80:	f800283a 	ret

80095c84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
80095c84:	defffb04 	addi	sp,sp,-20
80095c88:	dfc00415 	stw	ra,16(sp)
80095c8c:	df000315 	stw	fp,12(sp)
80095c90:	df000304 	addi	fp,sp,12
80095c94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
80095c98:	d0a01217 	ldw	r2,-32696(gp)
80095c9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80095ca0:	00003106 	br	80095d68 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
80095ca4:	e0bffd17 	ldw	r2,-12(fp)
80095ca8:	10800217 	ldw	r2,8(r2)
80095cac:	1009883a 	mov	r4,r2
80095cb0:	00820100 	call	80082010 <strlen>
80095cb4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
80095cb8:	e0bffd17 	ldw	r2,-12(fp)
80095cbc:	10c00217 	ldw	r3,8(r2)
80095cc0:	e0bffe17 	ldw	r2,-8(fp)
80095cc4:	10bfffc4 	addi	r2,r2,-1
80095cc8:	1885883a 	add	r2,r3,r2
80095ccc:	10800003 	ldbu	r2,0(r2)
80095cd0:	10803fcc 	andi	r2,r2,255
80095cd4:	1080201c 	xori	r2,r2,128
80095cd8:	10bfe004 	addi	r2,r2,-128
80095cdc:	10800bd8 	cmpnei	r2,r2,47
80095ce0:	1000031e 	bne	r2,zero,80095cf0 <alt_find_file+0x6c>
    {
      len -= 1;
80095ce4:	e0bffe17 	ldw	r2,-8(fp)
80095ce8:	10bfffc4 	addi	r2,r2,-1
80095cec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80095cf0:	e0bffe17 	ldw	r2,-8(fp)
80095cf4:	e0ffff17 	ldw	r3,-4(fp)
80095cf8:	1885883a 	add	r2,r3,r2
80095cfc:	10800003 	ldbu	r2,0(r2)
80095d00:	10803fcc 	andi	r2,r2,255
80095d04:	1080201c 	xori	r2,r2,128
80095d08:	10bfe004 	addi	r2,r2,-128
80095d0c:	10800be0 	cmpeqi	r2,r2,47
80095d10:	1000081e 	bne	r2,zero,80095d34 <alt_find_file+0xb0>
80095d14:	e0bffe17 	ldw	r2,-8(fp)
80095d18:	e0ffff17 	ldw	r3,-4(fp)
80095d1c:	1885883a 	add	r2,r3,r2
80095d20:	10800003 	ldbu	r2,0(r2)
80095d24:	10803fcc 	andi	r2,r2,255
80095d28:	1080201c 	xori	r2,r2,128
80095d2c:	10bfe004 	addi	r2,r2,-128
80095d30:	10000a1e 	bne	r2,zero,80095d5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
80095d34:	e0bffd17 	ldw	r2,-12(fp)
80095d38:	10800217 	ldw	r2,8(r2)
80095d3c:	e0fffe17 	ldw	r3,-8(fp)
80095d40:	180d883a 	mov	r6,r3
80095d44:	e17fff17 	ldw	r5,-4(fp)
80095d48:	1009883a 	mov	r4,r2
80095d4c:	0095f0c0 	call	80095f0c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80095d50:	1000021e 	bne	r2,zero,80095d5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
80095d54:	e0bffd17 	ldw	r2,-12(fp)
80095d58:	00000706 	br	80095d78 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
80095d5c:	e0bffd17 	ldw	r2,-12(fp)
80095d60:	10800017 	ldw	r2,0(r2)
80095d64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80095d68:	e0fffd17 	ldw	r3,-12(fp)
80095d6c:	d0a01204 	addi	r2,gp,-32696
80095d70:	18bfcc1e 	bne	r3,r2,80095ca4 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
80095d74:	0005883a 	mov	r2,zero
}
80095d78:	e037883a 	mov	sp,fp
80095d7c:	dfc00117 	ldw	ra,4(sp)
80095d80:	df000017 	ldw	fp,0(sp)
80095d84:	dec00204 	addi	sp,sp,8
80095d88:	f800283a 	ret

80095d8c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
80095d8c:	defffc04 	addi	sp,sp,-16
80095d90:	df000315 	stw	fp,12(sp)
80095d94:	df000304 	addi	fp,sp,12
80095d98:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
80095d9c:	00bffa04 	movi	r2,-24
80095da0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80095da4:	e03ffd15 	stw	zero,-12(fp)
80095da8:	00001906 	br	80095e10 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
80095dac:	00a00274 	movhi	r2,32777
80095db0:	109dd104 	addi	r2,r2,30532
80095db4:	e0fffd17 	ldw	r3,-12(fp)
80095db8:	18c00324 	muli	r3,r3,12
80095dbc:	10c5883a 	add	r2,r2,r3
80095dc0:	10800017 	ldw	r2,0(r2)
80095dc4:	10000f1e 	bne	r2,zero,80095e04 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
80095dc8:	00a00274 	movhi	r2,32777
80095dcc:	109dd104 	addi	r2,r2,30532
80095dd0:	e0fffd17 	ldw	r3,-12(fp)
80095dd4:	18c00324 	muli	r3,r3,12
80095dd8:	10c5883a 	add	r2,r2,r3
80095ddc:	e0ffff17 	ldw	r3,-4(fp)
80095de0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
80095de4:	d0e01617 	ldw	r3,-32680(gp)
80095de8:	e0bffd17 	ldw	r2,-12(fp)
80095dec:	1880020e 	bge	r3,r2,80095df8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
80095df0:	e0bffd17 	ldw	r2,-12(fp)
80095df4:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
80095df8:	e0bffd17 	ldw	r2,-12(fp)
80095dfc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80095e00:	00000606 	br	80095e1c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80095e04:	e0bffd17 	ldw	r2,-12(fp)
80095e08:	10800044 	addi	r2,r2,1
80095e0c:	e0bffd15 	stw	r2,-12(fp)
80095e10:	e0bffd17 	ldw	r2,-12(fp)
80095e14:	10800810 	cmplti	r2,r2,32
80095e18:	103fe41e 	bne	r2,zero,80095dac <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
80095e1c:	e0bffe17 	ldw	r2,-8(fp)
}
80095e20:	e037883a 	mov	sp,fp
80095e24:	df000017 	ldw	fp,0(sp)
80095e28:	dec00104 	addi	sp,sp,4
80095e2c:	f800283a 	ret

80095e30 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
80095e30:	defffb04 	addi	sp,sp,-20
80095e34:	df000415 	stw	fp,16(sp)
80095e38:	df000404 	addi	fp,sp,16
80095e3c:	e13ffe15 	stw	r4,-8(fp)
80095e40:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
80095e44:	e0bfff17 	ldw	r2,-4(fp)
80095e48:	10840070 	cmpltui	r2,r2,4097
80095e4c:	1000021e 	bne	r2,zero,80095e58 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
80095e50:	00840004 	movi	r2,4096
80095e54:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
80095e58:	e0fffe17 	ldw	r3,-8(fp)
80095e5c:	e0bfff17 	ldw	r2,-4(fp)
80095e60:	1885883a 	add	r2,r3,r2
80095e64:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
80095e68:	e0bffe17 	ldw	r2,-8(fp)
80095e6c:	e0bffc15 	stw	r2,-16(fp)
80095e70:	00000506 	br	80095e88 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
80095e74:	e0bffc17 	ldw	r2,-16(fp)
80095e78:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
80095e7c:	e0bffc17 	ldw	r2,-16(fp)
80095e80:	10800804 	addi	r2,r2,32
80095e84:	e0bffc15 	stw	r2,-16(fp)
80095e88:	e0fffc17 	ldw	r3,-16(fp)
80095e8c:	e0bffd17 	ldw	r2,-12(fp)
80095e90:	18bff836 	bltu	r3,r2,80095e74 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
80095e94:	e0bffe17 	ldw	r2,-8(fp)
80095e98:	108007cc 	andi	r2,r2,31
80095e9c:	10000226 	beq	r2,zero,80095ea8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
80095ea0:	e0bffc17 	ldw	r2,-16(fp)
80095ea4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
80095ea8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
80095eac:	0001883a 	nop
80095eb0:	e037883a 	mov	sp,fp
80095eb4:	df000017 	ldw	fp,0(sp)
80095eb8:	dec00104 	addi	sp,sp,4
80095ebc:	f800283a 	ret

80095ec0 <atexit>:
80095ec0:	200b883a 	mov	r5,r4
80095ec4:	000f883a 	mov	r7,zero
80095ec8:	000d883a 	mov	r6,zero
80095ecc:	0009883a 	mov	r4,zero
80095ed0:	00960f01 	jmpi	800960f0 <__register_exitproc>

80095ed4 <exit>:
80095ed4:	defffe04 	addi	sp,sp,-8
80095ed8:	000b883a 	mov	r5,zero
80095edc:	dc000015 	stw	r16,0(sp)
80095ee0:	dfc00115 	stw	ra,4(sp)
80095ee4:	2021883a 	mov	r16,r4
80095ee8:	00962080 	call	80096208 <__call_exitprocs>
80095eec:	00a002b4 	movhi	r2,32778
80095ef0:	10a29d04 	addi	r2,r2,-30092
80095ef4:	11000017 	ldw	r4,0(r2)
80095ef8:	20800f17 	ldw	r2,60(r4)
80095efc:	10000126 	beq	r2,zero,80095f04 <exit+0x30>
80095f00:	103ee83a 	callr	r2
80095f04:	8009883a 	mov	r4,r16
80095f08:	00963880 	call	80096388 <_exit>

80095f0c <memcmp>:
80095f0c:	01c000c4 	movi	r7,3
80095f10:	3980192e 	bgeu	r7,r6,80095f78 <memcmp+0x6c>
80095f14:	2144b03a 	or	r2,r4,r5
80095f18:	11c4703a 	and	r2,r2,r7
80095f1c:	10000f26 	beq	r2,zero,80095f5c <memcmp+0x50>
80095f20:	20800003 	ldbu	r2,0(r4)
80095f24:	28c00003 	ldbu	r3,0(r5)
80095f28:	10c0151e 	bne	r2,r3,80095f80 <memcmp+0x74>
80095f2c:	31bfff84 	addi	r6,r6,-2
80095f30:	01ffffc4 	movi	r7,-1
80095f34:	00000406 	br	80095f48 <memcmp+0x3c>
80095f38:	20800003 	ldbu	r2,0(r4)
80095f3c:	28c00003 	ldbu	r3,0(r5)
80095f40:	31bfffc4 	addi	r6,r6,-1
80095f44:	10c00e1e 	bne	r2,r3,80095f80 <memcmp+0x74>
80095f48:	21000044 	addi	r4,r4,1
80095f4c:	29400044 	addi	r5,r5,1
80095f50:	31fff91e 	bne	r6,r7,80095f38 <memcmp+0x2c>
80095f54:	0005883a 	mov	r2,zero
80095f58:	f800283a 	ret
80095f5c:	20c00017 	ldw	r3,0(r4)
80095f60:	28800017 	ldw	r2,0(r5)
80095f64:	18bfee1e 	bne	r3,r2,80095f20 <memcmp+0x14>
80095f68:	31bfff04 	addi	r6,r6,-4
80095f6c:	21000104 	addi	r4,r4,4
80095f70:	29400104 	addi	r5,r5,4
80095f74:	39bff936 	bltu	r7,r6,80095f5c <memcmp+0x50>
80095f78:	303fe91e 	bne	r6,zero,80095f20 <memcmp+0x14>
80095f7c:	003ff506 	br	80095f54 <memcmp+0x48>
80095f80:	10c5c83a 	sub	r2,r2,r3
80095f84:	f800283a 	ret

80095f88 <_putc_r>:
80095f88:	defffc04 	addi	sp,sp,-16
80095f8c:	dc000215 	stw	r16,8(sp)
80095f90:	dfc00315 	stw	ra,12(sp)
80095f94:	2021883a 	mov	r16,r4
80095f98:	20000226 	beq	r4,zero,80095fa4 <_putc_r+0x1c>
80095f9c:	20800e17 	ldw	r2,56(r4)
80095fa0:	10001b26 	beq	r2,zero,80096010 <_putc_r+0x88>
80095fa4:	30800217 	ldw	r2,8(r6)
80095fa8:	10bfffc4 	addi	r2,r2,-1
80095fac:	30800215 	stw	r2,8(r6)
80095fb0:	10000a16 	blt	r2,zero,80095fdc <_putc_r+0x54>
80095fb4:	30800017 	ldw	r2,0(r6)
80095fb8:	11400005 	stb	r5,0(r2)
80095fbc:	30800017 	ldw	r2,0(r6)
80095fc0:	10c00044 	addi	r3,r2,1
80095fc4:	30c00015 	stw	r3,0(r6)
80095fc8:	10800003 	ldbu	r2,0(r2)
80095fcc:	dfc00317 	ldw	ra,12(sp)
80095fd0:	dc000217 	ldw	r16,8(sp)
80095fd4:	dec00404 	addi	sp,sp,16
80095fd8:	f800283a 	ret
80095fdc:	30c00617 	ldw	r3,24(r6)
80095fe0:	10c00616 	blt	r2,r3,80095ffc <_putc_r+0x74>
80095fe4:	30800017 	ldw	r2,0(r6)
80095fe8:	00c00284 	movi	r3,10
80095fec:	11400005 	stb	r5,0(r2)
80095ff0:	30800017 	ldw	r2,0(r6)
80095ff4:	11400003 	ldbu	r5,0(r2)
80095ff8:	28fff11e 	bne	r5,r3,80095fc0 <_putc_r+0x38>
80095ffc:	8009883a 	mov	r4,r16
80096000:	dfc00317 	ldw	ra,12(sp)
80096004:	dc000217 	ldw	r16,8(sp)
80096008:	dec00404 	addi	sp,sp,16
8009600c:	008eadc1 	jmpi	8008eadc <__swbuf_r>
80096010:	d9400015 	stw	r5,0(sp)
80096014:	d9800115 	stw	r6,4(sp)
80096018:	00886480 	call	80088648 <__sinit>
8009601c:	d9800117 	ldw	r6,4(sp)
80096020:	d9400017 	ldw	r5,0(sp)
80096024:	003fdf06 	br	80095fa4 <_putc_r+0x1c>

80096028 <putc>:
80096028:	00a002b4 	movhi	r2,32778
8009602c:	defffc04 	addi	sp,sp,-16
80096030:	10a29e04 	addi	r2,r2,-30088
80096034:	dc000115 	stw	r16,4(sp)
80096038:	14000017 	ldw	r16,0(r2)
8009603c:	dc400215 	stw	r17,8(sp)
80096040:	dfc00315 	stw	ra,12(sp)
80096044:	2023883a 	mov	r17,r4
80096048:	80000226 	beq	r16,zero,80096054 <putc+0x2c>
8009604c:	80800e17 	ldw	r2,56(r16)
80096050:	10001a26 	beq	r2,zero,800960bc <putc+0x94>
80096054:	28800217 	ldw	r2,8(r5)
80096058:	10bfffc4 	addi	r2,r2,-1
8009605c:	28800215 	stw	r2,8(r5)
80096060:	10000b16 	blt	r2,zero,80096090 <putc+0x68>
80096064:	28800017 	ldw	r2,0(r5)
80096068:	14400005 	stb	r17,0(r2)
8009606c:	28800017 	ldw	r2,0(r5)
80096070:	10c00044 	addi	r3,r2,1
80096074:	28c00015 	stw	r3,0(r5)
80096078:	10800003 	ldbu	r2,0(r2)
8009607c:	dfc00317 	ldw	ra,12(sp)
80096080:	dc400217 	ldw	r17,8(sp)
80096084:	dc000117 	ldw	r16,4(sp)
80096088:	dec00404 	addi	sp,sp,16
8009608c:	f800283a 	ret
80096090:	28c00617 	ldw	r3,24(r5)
80096094:	10c00e16 	blt	r2,r3,800960d0 <putc+0xa8>
80096098:	28800017 	ldw	r2,0(r5)
8009609c:	01000284 	movi	r4,10
800960a0:	14400005 	stb	r17,0(r2)
800960a4:	28800017 	ldw	r2,0(r5)
800960a8:	10c00003 	ldbu	r3,0(r2)
800960ac:	193ff01e 	bne	r3,r4,80096070 <putc+0x48>
800960b0:	280d883a 	mov	r6,r5
800960b4:	180b883a 	mov	r5,r3
800960b8:	00000706 	br	800960d8 <putc+0xb0>
800960bc:	8009883a 	mov	r4,r16
800960c0:	d9400015 	stw	r5,0(sp)
800960c4:	00886480 	call	80088648 <__sinit>
800960c8:	d9400017 	ldw	r5,0(sp)
800960cc:	003fe106 	br	80096054 <putc+0x2c>
800960d0:	280d883a 	mov	r6,r5
800960d4:	880b883a 	mov	r5,r17
800960d8:	8009883a 	mov	r4,r16
800960dc:	dfc00317 	ldw	ra,12(sp)
800960e0:	dc400217 	ldw	r17,8(sp)
800960e4:	dc000117 	ldw	r16,4(sp)
800960e8:	dec00404 	addi	sp,sp,16
800960ec:	008eadc1 	jmpi	8008eadc <__swbuf_r>

800960f0 <__register_exitproc>:
800960f0:	defffa04 	addi	sp,sp,-24
800960f4:	dc000315 	stw	r16,12(sp)
800960f8:	042002b4 	movhi	r16,32778
800960fc:	84229d04 	addi	r16,r16,-30092
80096100:	80c00017 	ldw	r3,0(r16)
80096104:	dc400415 	stw	r17,16(sp)
80096108:	dfc00515 	stw	ra,20(sp)
8009610c:	18805217 	ldw	r2,328(r3)
80096110:	2023883a 	mov	r17,r4
80096114:	10003726 	beq	r2,zero,800961f4 <__register_exitproc+0x104>
80096118:	10c00117 	ldw	r3,4(r2)
8009611c:	010007c4 	movi	r4,31
80096120:	20c00e16 	blt	r4,r3,8009615c <__register_exitproc+0x6c>
80096124:	1a000044 	addi	r8,r3,1
80096128:	8800221e 	bne	r17,zero,800961b4 <__register_exitproc+0xc4>
8009612c:	18c00084 	addi	r3,r3,2
80096130:	18c7883a 	add	r3,r3,r3
80096134:	18c7883a 	add	r3,r3,r3
80096138:	12000115 	stw	r8,4(r2)
8009613c:	10c7883a 	add	r3,r2,r3
80096140:	19400015 	stw	r5,0(r3)
80096144:	0005883a 	mov	r2,zero
80096148:	dfc00517 	ldw	ra,20(sp)
8009614c:	dc400417 	ldw	r17,16(sp)
80096150:	dc000317 	ldw	r16,12(sp)
80096154:	dec00604 	addi	sp,sp,24
80096158:	f800283a 	ret
8009615c:	00800034 	movhi	r2,0
80096160:	10800004 	addi	r2,r2,0
80096164:	10002626 	beq	r2,zero,80096200 <__register_exitproc+0x110>
80096168:	01006404 	movi	r4,400
8009616c:	d9400015 	stw	r5,0(sp)
80096170:	d9800115 	stw	r6,4(sp)
80096174:	d9c00215 	stw	r7,8(sp)
80096178:	00000000 	call	80000000 <__alt_mem_ddr2_ram_1+0x40000000>
8009617c:	d9400017 	ldw	r5,0(sp)
80096180:	d9800117 	ldw	r6,4(sp)
80096184:	d9c00217 	ldw	r7,8(sp)
80096188:	10001d26 	beq	r2,zero,80096200 <__register_exitproc+0x110>
8009618c:	81000017 	ldw	r4,0(r16)
80096190:	10000115 	stw	zero,4(r2)
80096194:	02000044 	movi	r8,1
80096198:	22405217 	ldw	r9,328(r4)
8009619c:	0007883a 	mov	r3,zero
800961a0:	12400015 	stw	r9,0(r2)
800961a4:	20805215 	stw	r2,328(r4)
800961a8:	10006215 	stw	zero,392(r2)
800961ac:	10006315 	stw	zero,396(r2)
800961b0:	883fde26 	beq	r17,zero,8009612c <__register_exitproc+0x3c>
800961b4:	18c9883a 	add	r4,r3,r3
800961b8:	2109883a 	add	r4,r4,r4
800961bc:	1109883a 	add	r4,r2,r4
800961c0:	21802215 	stw	r6,136(r4)
800961c4:	01800044 	movi	r6,1
800961c8:	12406217 	ldw	r9,392(r2)
800961cc:	30cc983a 	sll	r6,r6,r3
800961d0:	4992b03a 	or	r9,r9,r6
800961d4:	12406215 	stw	r9,392(r2)
800961d8:	21c04215 	stw	r7,264(r4)
800961dc:	01000084 	movi	r4,2
800961e0:	893fd21e 	bne	r17,r4,8009612c <__register_exitproc+0x3c>
800961e4:	11006317 	ldw	r4,396(r2)
800961e8:	218cb03a 	or	r6,r4,r6
800961ec:	11806315 	stw	r6,396(r2)
800961f0:	003fce06 	br	8009612c <__register_exitproc+0x3c>
800961f4:	18805304 	addi	r2,r3,332
800961f8:	18805215 	stw	r2,328(r3)
800961fc:	003fc606 	br	80096118 <__register_exitproc+0x28>
80096200:	00bfffc4 	movi	r2,-1
80096204:	003fd006 	br	80096148 <__register_exitproc+0x58>

80096208 <__call_exitprocs>:
80096208:	defff504 	addi	sp,sp,-44
8009620c:	df000915 	stw	fp,36(sp)
80096210:	dd400615 	stw	r21,24(sp)
80096214:	dc800315 	stw	r18,12(sp)
80096218:	dfc00a15 	stw	ra,40(sp)
8009621c:	ddc00815 	stw	r23,32(sp)
80096220:	dd800715 	stw	r22,28(sp)
80096224:	dd000515 	stw	r20,20(sp)
80096228:	dcc00415 	stw	r19,16(sp)
8009622c:	dc400215 	stw	r17,8(sp)
80096230:	dc000115 	stw	r16,4(sp)
80096234:	d9000015 	stw	r4,0(sp)
80096238:	2839883a 	mov	fp,r5
8009623c:	04800044 	movi	r18,1
80096240:	057fffc4 	movi	r21,-1
80096244:	00a002b4 	movhi	r2,32778
80096248:	10a29d04 	addi	r2,r2,-30092
8009624c:	12000017 	ldw	r8,0(r2)
80096250:	45005217 	ldw	r20,328(r8)
80096254:	44c05204 	addi	r19,r8,328
80096258:	a0001c26 	beq	r20,zero,800962cc <__call_exitprocs+0xc4>
8009625c:	a0800117 	ldw	r2,4(r20)
80096260:	15ffffc4 	addi	r23,r2,-1
80096264:	b8000d16 	blt	r23,zero,8009629c <__call_exitprocs+0x94>
80096268:	14000044 	addi	r16,r2,1
8009626c:	8421883a 	add	r16,r16,r16
80096270:	8421883a 	add	r16,r16,r16
80096274:	84402004 	addi	r17,r16,128
80096278:	a463883a 	add	r17,r20,r17
8009627c:	a421883a 	add	r16,r20,r16
80096280:	e0001e26 	beq	fp,zero,800962fc <__call_exitprocs+0xf4>
80096284:	80804017 	ldw	r2,256(r16)
80096288:	e0801c26 	beq	fp,r2,800962fc <__call_exitprocs+0xf4>
8009628c:	bdffffc4 	addi	r23,r23,-1
80096290:	843fff04 	addi	r16,r16,-4
80096294:	8c7fff04 	addi	r17,r17,-4
80096298:	bd7ff91e 	bne	r23,r21,80096280 <__call_exitprocs+0x78>
8009629c:	00800034 	movhi	r2,0
800962a0:	10800004 	addi	r2,r2,0
800962a4:	10000926 	beq	r2,zero,800962cc <__call_exitprocs+0xc4>
800962a8:	a0800117 	ldw	r2,4(r20)
800962ac:	1000301e 	bne	r2,zero,80096370 <__call_exitprocs+0x168>
800962b0:	a0800017 	ldw	r2,0(r20)
800962b4:	10003226 	beq	r2,zero,80096380 <__call_exitprocs+0x178>
800962b8:	a009883a 	mov	r4,r20
800962bc:	98800015 	stw	r2,0(r19)
800962c0:	00000000 	call	80000000 <__alt_mem_ddr2_ram_1+0x40000000>
800962c4:	9d000017 	ldw	r20,0(r19)
800962c8:	a03fe41e 	bne	r20,zero,8009625c <__call_exitprocs+0x54>
800962cc:	dfc00a17 	ldw	ra,40(sp)
800962d0:	df000917 	ldw	fp,36(sp)
800962d4:	ddc00817 	ldw	r23,32(sp)
800962d8:	dd800717 	ldw	r22,28(sp)
800962dc:	dd400617 	ldw	r21,24(sp)
800962e0:	dd000517 	ldw	r20,20(sp)
800962e4:	dcc00417 	ldw	r19,16(sp)
800962e8:	dc800317 	ldw	r18,12(sp)
800962ec:	dc400217 	ldw	r17,8(sp)
800962f0:	dc000117 	ldw	r16,4(sp)
800962f4:	dec00b04 	addi	sp,sp,44
800962f8:	f800283a 	ret
800962fc:	a0800117 	ldw	r2,4(r20)
80096300:	80c00017 	ldw	r3,0(r16)
80096304:	10bfffc4 	addi	r2,r2,-1
80096308:	15c01426 	beq	r2,r23,8009635c <__call_exitprocs+0x154>
8009630c:	80000015 	stw	zero,0(r16)
80096310:	183fde26 	beq	r3,zero,8009628c <__call_exitprocs+0x84>
80096314:	95c8983a 	sll	r4,r18,r23
80096318:	a0806217 	ldw	r2,392(r20)
8009631c:	a5800117 	ldw	r22,4(r20)
80096320:	2084703a 	and	r2,r4,r2
80096324:	10000b26 	beq	r2,zero,80096354 <__call_exitprocs+0x14c>
80096328:	a0806317 	ldw	r2,396(r20)
8009632c:	2088703a 	and	r4,r4,r2
80096330:	20000c1e 	bne	r4,zero,80096364 <__call_exitprocs+0x15c>
80096334:	89400017 	ldw	r5,0(r17)
80096338:	d9000017 	ldw	r4,0(sp)
8009633c:	183ee83a 	callr	r3
80096340:	a0800117 	ldw	r2,4(r20)
80096344:	15bfbf1e 	bne	r2,r22,80096244 <__call_exitprocs+0x3c>
80096348:	98800017 	ldw	r2,0(r19)
8009634c:	153fcf26 	beq	r2,r20,8009628c <__call_exitprocs+0x84>
80096350:	003fbc06 	br	80096244 <__call_exitprocs+0x3c>
80096354:	183ee83a 	callr	r3
80096358:	003ff906 	br	80096340 <__call_exitprocs+0x138>
8009635c:	a5c00115 	stw	r23,4(r20)
80096360:	003feb06 	br	80096310 <__call_exitprocs+0x108>
80096364:	89000017 	ldw	r4,0(r17)
80096368:	183ee83a 	callr	r3
8009636c:	003ff406 	br	80096340 <__call_exitprocs+0x138>
80096370:	a0800017 	ldw	r2,0(r20)
80096374:	a027883a 	mov	r19,r20
80096378:	1029883a 	mov	r20,r2
8009637c:	003fb606 	br	80096258 <__call_exitprocs+0x50>
80096380:	0005883a 	mov	r2,zero
80096384:	003ffb06 	br	80096374 <__call_exitprocs+0x16c>

80096388 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
80096388:	defffd04 	addi	sp,sp,-12
8009638c:	df000215 	stw	fp,8(sp)
80096390:	df000204 	addi	fp,sp,8
80096394:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
80096398:	0001883a 	nop
8009639c:	e0bfff17 	ldw	r2,-4(fp)
800963a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
800963a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
800963a8:	10000226 	beq	r2,zero,800963b4 <_exit+0x2c>
    ALT_SIM_FAIL();
800963ac:	002af070 	cmpltui	zero,zero,43969
800963b0:	00000106 	br	800963b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
800963b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
800963b8:	003fff06 	br	800963b8 <_exit+0x30>
