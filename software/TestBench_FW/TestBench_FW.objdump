
TestBench_FW.elf:     file format elf32-littlenios2
TestBench_FW.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80080244

Program Header:
    LOAD off    0x00001000 vaddr 0x80080000 paddr 0x80080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x80080020 paddr 0x80080020 align 2**12
         filesz 0x00016efc memsz 0x00016efc flags r-x
    LOAD off    0x00017f1c vaddr 0x80096f1c paddr 0x80098c8c align 2**12
         filesz 0x00001d70 memsz 0x00001d70 flags rw-
    LOAD off    0x0001a9fc vaddr 0x8009a9fc paddr 0x8009a9fc align 2**12
         filesz 0x00000000 memsz 0x00000408 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  80080000  80080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80080020  80080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015eac  80080244  80080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000e2c  800960f0  800960f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d70  80096f1c  80098c8c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000408  8009a9fc  8009a9fc  0001a9fc  2**4
                  ALLOC, SMALL_DATA
  6 .ddr2_ram     00000000  00000000  00000000  00019c8c  2**0
                  CONTENTS
  7 .ddr2_ram_1   00000000  40000000  40000000  00019c8c  2**0
                  CONTENTS
  8 .system_ram   00000000  8009ae04  8009ae04  00019c8c  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00019c8c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001098  00000000  00000000  00019cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002d552  00000000  00000000  0001ad48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000adb6  00000000  00000000  0004829a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e710  00000000  00000000  00053050  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002a84  00000000  00000000  00061760  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000048b5  00000000  00000000  000641e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001d6fb  00000000  00000000  00068a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  00086194  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001da0  00000000  00000000  000861f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0008c126  2**0
                  CONTENTS, READONLY
 20 .cpu          00000008  00000000  00000000  0008c129  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0008c131  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0008c132  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0008c133  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0008c137  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  0008c13b  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  0008c13f  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  0008c14b  2**0
                  CONTENTS, READONLY
 28 .jdi          0000b86e  00000000  00000000  0008c167  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00228651  00000000  00000000  000979d5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80080000 l    d  .entry	00000000 .entry
80080020 l    d  .exceptions	00000000 .exceptions
80080244 l    d  .text	00000000 .text
800960f0 l    d  .rodata	00000000 .rodata
80096f1c l    d  .rwdata	00000000 .rwdata
8009a9fc l    d  .bss	00000000 .bss
00000000 l    d  .ddr2_ram	00000000 .ddr2_ram
40000000 l    d  .ddr2_ram_1	00000000 .ddr2_ram_1
8009ae04 l    d  .system_ram	00000000 .system_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testbench_ls_bsp//obj/HAL/src/crt0.o
8008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 terasic_debug.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
80096f1c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
80096a4a l     O .rodata	00000010 zeroes.4389
80096a5a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
80096a6a l     O .rodata	00000010 zeroes.4404
80086144 l     F .text	000000bc __sbprintf
80096a7a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
80086478 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
80087fa8 l     F .text	00000008 __fp_unlock
80087fbc l     F .text	0000019c __sinit.part.1
80088158 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
80097360 l     O .rwdata	00000020 lc_ctype_charset
80097340 l     O .rwdata	00000020 lc_message_charset
80097380 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
80096aa4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
8008b274 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
80096bd8 l     O .rodata	00000010 blanks.4332
80096bc8 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
8008cb50 l     F .text	000000fc __sprint_r.part.0
80096bf8 l     O .rodata	00000010 blanks.4348
80096be8 l     O .rodata	00000010 zeroes.4349
8008e0dc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
80091498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
800915a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
800915d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
800916bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
8009179c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
80091888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
80091a5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
80098c74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
80091e4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
80091f80 l     F .text	00000034 alt_dev_reg
80097968 l     O .rwdata	00001060 jtag
800989c8 l     O .rwdata	00000060 dma_fifo_subsystem_1_dma
80098a28 l     O .rwdata	00000060 dma_fifo_subsystem_2_dma
80098a88 l     O .rwdata	00000060 dma_fifo_subsystem_3_dma
80098ae8 l     O .rwdata	00000060 dma_fifo_subsystem_4_dma
80098b48 l     O .rwdata	00000060 dma_fifo_susbystem_dma
80098ba8 l     O .rwdata	00000060 from_ETH_to_DDR_ETH_DMA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80092378 l     F .text	0000020c altera_avalon_jtag_uart_irq
80092584 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
80092bbc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
80092cb0 l     F .text	0000003c alt_get_errno
80092cec l     F .text	00000094 alt_msgdma_write_standard_descriptor
80092d80 l     F .text	0000012c alt_msgdma_write_extended_descriptor
80092eac l     F .text	00000184 alt_msgdma_irq
80093030 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
800930bc l     F .text	00000154 alt_msgdma_construct_extended_descriptor
80093210 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
800934e0 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
80093b28 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
80093bcc l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
80094df8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
800952fc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
8009543c l     F .text	0000003c alt_get_errno
80095478 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8009aa40 g     O .bss	00000004 alt_instruction_exception_handler
80094a3c g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8008ab98 g     F .text	00000074 _mprec_log10
8009aa08 g     O .bss	00000004 entry
8008ac84 g     F .text	0000008c __any_on
8008e678 g     F .text	00000054 _isatty_r
80096ab0 g     O .rodata	00000028 __mprec_tinytens
80091998 g     F .text	0000007c alt_main
80081aa0 g     F .text	000000c0 _puts_r
8009ad04 g     O .bss	00000100 alt_irq
8008e6cc g     F .text	00000060 _lseek_r
80098c8c g       *ABS*	00000000 __flash_rwdata_start
800908c4 g     F .text	00000088 .hidden __eqdf2
80093908 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8009ae04 g       *ABS*	00000000 __alt_heap_start
80081a64 g     F .text	0000003c printf
8009aa04 g     O .bss	00000004 control
8008e8e4 g     F .text	0000009c _wcrtomb_r
8008b604 g     F .text	0000005c __sseek
800882f8 g     F .text	00000010 __sinit
8008e78c g     F .text	00000140 __swbuf_r
8009aa70 g     O .bss	000001e0 dev
80088dc0 g     F .text	0000007c _setlocale_r
80088160 g     F .text	00000068 __sfmoreglue
80091a38 g     F .text	00000024 __malloc_unlock
80080290 g     F .text	00000080 GetInputString
80089a90 g     F .text	0000015c memmove
800882e0 g     F .text	00000018 _cleanup
80089d14 g     F .text	000000a8 _Balloc
80093858 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
80098c10 g     O .rwdata	00000004 FIFOUSEDW3
8009ac50 g     O .bss	00000014 dev_ptr
8008103c g     F .text	000000dc .hidden __gtdf2
800958f8 g     F .text	00000024 altera_nios2_gen2_irq_init
80080000 g     F .entry	0000001c __reset
80080020 g       *ABS*	00000000 __flash_exceptions_start
8008e61c g     F .text	0000005c _fstat_r
8009aa24 g     O .bss	00000004 errno
80081be8 g     F .text	00000014 __srget
8008b580 g     F .text	00000008 __seofread
8008b914 g     F .text	0000123c ___svfiprintf_internal_r
8009aa2c g     O .bss	00000004 alt_argv
800a0c08 g       *ABS*	00000000 _gp
80094378 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
800977e8 g     O .rwdata	00000180 alt_fd_list
8008193c g     F .text	00000070 _getc_r
800819ac g     F .text	00000088 getc
80094f98 g     F .text	00000090 alt_find_dev
80089948 g     F .text	00000148 memcpy
8009ac64 g     O .bss	00000014 rd_addr
80087fb0 g     F .text	0000000c _cleanup_r
800913bc g     F .text	000000dc .hidden __floatsidf
800953c0 g     F .text	0000007c alt_io_redirect
8009094c g     F .text	000000f4 .hidden __ltdf2
800960f0 g       *ABS*	00000000 __DTOR_END__
80094798 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
80094a78 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8009ac78 g     O .bss	00000014 a_descriptor_ptr
800949e8 g     F .text	00000054 alt_msgdma_register_callback
80081b60 g     F .text	00000014 puts
80095b58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8008b464 g     F .text	00000074 __fpclassifyd
8008aaf4 g     F .text	000000a4 __ratio
8008e0c0 g     F .text	0000001c __vfiprintf_internal
80098c24 g     O .rwdata	00000001 detectorUnderInit
8009277c g     F .text	0000021c altera_avalon_jtag_uart_read
80094058 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
80081a34 g     F .text	00000030 _printf_r
8008f674 g     F .text	00000064 .hidden __udivsi3
800916f8 g     F .text	000000a4 isatty
80098c30 g     O .rwdata	00000004 addressRAM1_1
80096b00 g     O .rodata	000000c8 __mprec_tens
80088e3c g     F .text	0000000c __locale_charset
800862f0 g     F .text	00000034 vsnprintf
8009a9fc g     O .bss	00000004 ISR_input_val
80095ac8 g     F .text	00000090 alt_icache_flush
8009aa20 g     O .bss	00000004 __malloc_top_pad
80098c4c g     O .rwdata	00000004 __mb_cur_max
80088e6c g     F .text	0000000c _localeconv_r
8008a120 g     F .text	0000003c __i2b
8008877c g     F .text	000004bc __sfvwrite_r
8008b4d8 g     F .text	00000054 _sbrk_r
8008e72c g     F .text	00000060 _read_r
80098c6c g     O .rwdata	00000004 alt_max_fd
8008e310 g     F .text	000000f0 _fclose_r
80087f78 g     F .text	00000030 fflush
8009aa1c g     O .bss	00000004 __malloc_max_sbrked_mem
8008f730 g     F .text	000008ac .hidden __adddf3
8008a89c g     F .text	0000010c __b2d
80093db8 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8008f044 g     F .text	00000538 .hidden __umoddi3
800918c4 g     F .text	000000d4 lseek
80098c44 g     O .rwdata	00000004 _global_impure_ptr
8008ad10 g     F .text	00000564 _realloc_r
8009ae04 g       *ABS*	00000000 __bss_end
8009520c g     F .text	000000f0 alt_iic_isr_register
80091d44 g     F .text	00000108 alt_tick
8009487c g     F .text	0000016c alt_msgdma_init
8008eacc g     F .text	00000578 .hidden __udivdi3
8008e578 g     F .text	00000024 _fputwc_r
80096ad8 g     O .rodata	00000028 __mprec_bigtens
80089f04 g     F .text	00000104 __s2b
80098c0c g     O .rwdata	00000004 FIFOUSEDW4
80081830 g     F .text	000000a8 .hidden __floatunsidf
8008a5dc g     F .text	00000060 __mcmp
80094af0 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80088318 g     F .text	00000018 __fp_lock_all
800951c0 g     F .text	0000004c alt_ic_irq_enabled
80091ca8 g     F .text	0000009c alt_alarm_stop
8009aa3c g     O .bss	00000004 alt_irq_active
80098c34 g     O .rwdata	00000004 addressRAM1_0
80098c08 g     O .rwdata	00000004 ISR_input_ptr
800800fc g     F .exceptions	000000d4 alt_irq_handler
800977c0 g     O .rwdata	00000028 alt_dev_null
800939f0 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
8009470c g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
80080000 g       *ABS*	00000000 __alt_mem_system_ram
80094db0 g     F .text	00000048 alt_dcache_flush_all
8008a008 g     F .text	00000068 __hi0bits
8009133c g     F .text	00000080 .hidden __fixdfsi
80098c8c g       *ABS*	00000000 __ram_rwdata_end
80098c64 g     O .rwdata	00000008 alt_dev_list
80091e88 g     F .text	000000f8 write
80095cbc g     F .text	000000a0 _putc_r
80096f1c g       *ABS*	00000000 __ram_rodata_end
8009160c g     F .text	000000b0 fstat
80098c14 g     O .rwdata	00000004 FIFOUSEDW2
8009094c g     F .text	000000f4 .hidden __ledf2
80080f24 g     F .text	0000004c myprintf
8008a354 g     F .text	00000140 __pow5mult
8008cc64 g     F .text	0000145c ___vfiprintf_internal_r
8009aa14 g     O .bss	00000004 __nlocale_changed
8008f6d8 g     F .text	00000058 .hidden __umodsi3
80093e10 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
80098c3c g     O .rwdata	00000004 addressRAM0_1
8009ae04 g       *ABS*	00000000 end
80098c1c g     O .rwdata	00000004 FIFOUSEDW0
800922b8 g     F .text	000000c0 altera_avalon_jtag_uart_init
800801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
800960f0 g       *ABS*	00000000 __CTOR_LIST__
800fd000 g       *ABS*	00000000 __alt_stack_pointer
80092c34 g     F .text	0000007c alt_avalon_timer_sc_init
800818d8 g     F .text	00000064 .hidden __clzsi2
80092998 g     F .text	00000224 altera_avalon_jtag_uart_write
80088308 g     F .text	00000004 __sfp_lock_acquire
80089864 g     F .text	000000e4 memchr
80083f30 g     F .text	000021f8 ___vfprintf_internal_r
80081bfc g     F .text	00000058 _sprintf_r
8008846c g     F .text	00000310 _free_r
80095690 g     F .text	0000022c alt_printf
80088e48 g     F .text	00000010 __locale_mb_cur_max
80095f3c g     F .text	00000180 __call_exitprocs
80081b74 g     F .text	00000074 __srget_r
80098c20 g     O .rwdata	00000004 FIFOEMPTY
8009aa10 g     O .bss	00000004 __mlocale_changed
80098c50 g     O .rwdata	00000004 __malloc_sbrk_base
80080244 g     F .text	0000004c _start
8009aa34 g     O .bss	00000004 _alt_tick_rate
8008a494 g     F .text	00000148 __lshift
800938b0 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8009aa38 g     O .bss	00000004 _alt_nticks
80091a98 g     F .text	000000fc read
80091fec g     F .text	00000168 alt_sys_init
8008b744 g     F .text	000001d0 __ssprint_r
80095e24 g     F .text	00000118 __register_exitproc
8008a15c g     F .text	000001f8 __multiply
80092624 g     F .text	00000068 altera_avalon_jtag_uart_close
80096f1c g       *ABS*	00000000 __ram_rwdata_start
800960f0 g       *ABS*	00000000 __ram_rodata_start
8009aa44 g     O .bss	00000028 __malloc_current_mallinfo
8008a9a8 g     F .text	0000014c __d2b
80092154 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
80095a24 g     F .text	000000a4 alt_get_fd
80094c58 g     F .text	00000158 alt_busy_sleep
8008e1f8 g     F .text	00000054 _close_r
40000000 g       *ABS*	00000000 __alt_mem_ddr2_ram_1
80093d60 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
80095c40 g     F .text	0000007c memcmp
80092214 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8009ae04 g       *ABS*	00000000 __alt_stack_base
80092264 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
80093e68 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
80086324 g     F .text	00000154 __swsetup_r
8008ffdc g     F .text	000008e8 .hidden __divdf3
800881c8 g     F .text	00000118 __sfp
8008ac0c g     F .text	00000078 __copybits
800973b8 g     O .rwdata	00000408 __malloc_av_
80088314 g     F .text	00000004 __sinit_lock_release
80086200 g     F .text	000000f0 _vsnprintf_r
80081118 g     F .text	00000718 .hidden __muldf3
8008b52c g     F .text	00000054 __sread
8009591c g     F .text	00000108 alt_find_file
80094e34 g     F .text	000000a4 alt_dev_llist_insert
80091a14 g     F .text	00000024 __malloc_lock
80091bf8 g     F .text	000000b0 sbrk
80081d58 g     F .text	000021d8 ___svfprintf_internal_r
80087f1c g     F .text	0000005c _fflush_r
8008e24c g     F .text	000000c4 _calloc_r
8009a9fc g       *ABS*	00000000 __bss_start
80089bec g     F .text	00000128 memset
80094824 g     F .text	00000058 alt_msgdma_open
80080310 g     F .text	00000c10 main
8009aa30 g     O .bss	00000004 alt_envp
8009aa18 g     O .bss	00000004 __malloc_max_total_mem
80094148 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
80080f70 g     F .text	00000064 myprintf_hexarray
800921b4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
8008e8cc g     F .text	00000018 __swbuf
8008b660 g     F .text	00000008 __sclose
800fd000 g       *ABS*	00000000 __alt_heap_limit
8008e400 g     F .text	00000014 fclose
80086678 g     F .text	00001688 _dtoa_r
8009444c g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
80089058 g     F .text	0000080c _malloc_r
8008ea40 g     F .text	00000030 __ascii_wctomb
80098c70 g     O .rwdata	00000004 alt_errno
80093fa0 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
80088c38 g     F .text	000000c4 _fwalk
80095d5c g     F .text	000000c8 putc
8008f57c g     F .text	00000084 .hidden __divsi3
80088348 g     F .text	00000124 _malloc_trim_r
800960f0 g       *ABS*	00000000 __CTOR_END__
8008b668 g     F .text	000000dc strcmp
800960f0 g       *ABS*	00000000 __flash_rodata_start
800960f0 g       *ABS*	00000000 __DTOR_LIST__
800908c4 g     F .text	00000088 .hidden __nedf2
80091fb4 g     F .text	00000038 alt_irq_init
80091b94 g     F .text	00000064 alt_release_fd
80094ab4 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
80081c54 g     F .text	0000006c sprintf
800968ff g     O .rodata	00000100 .hidden __clz_tab
80080f20 g     F .text	00000004 debug_output
8009aa0c g     O .bss	00000004 _PathLocale
80095bf4 g     F .text	00000014 atexit
8008e198 g     F .text	00000060 _write_r
80088e78 g     F .text	00000018 setlocale
80093f08 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
80098c48 g     O .rwdata	00000004 _impure_ptr
8009aa28 g     O .bss	00000004 alt_argc
80087d00 g     F .text	0000021c __sflush_r
80094f38 g     F .text	00000060 _do_dtors
80088e64 g     F .text	00000008 __locale_cjk_lang
80080fd4 g     F .text	00000068 myprintf_dwordarray
8008b290 g     F .text	000001d4 __srefill_r
80080020 g       .exceptions	00000000 alt_irq_entry
8008a838 g     F .text	00000064 __ulp
80088330 g     F .text	00000018 __fp_unlock_all
80098c5c g     O .rwdata	00000008 alt_fs_list
8009ac8c g     O .bss	00000014 rd_adr_p
80080020 g       *ABS*	00000000 __ram_exceptions_start
80088e90 g     F .text	0000000c localeconv
8009505c g     F .text	00000050 alt_ic_isr_register
8009aca0 g     O .bss	00000050 a_descriptor
80098c8c g       *ABS*	00000000 _edata
80098c18 g     O .rwdata	00000004 FIFOUSEDW1
8009ae04 g       *ABS*	00000000 _end
8008e414 g     F .text	00000164 __fputwc
80080244 g       *ABS*	00000000 __ram_exceptions_end
8009268c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
8009acf0 g     O .bss	00000014 ram_access_ptr
80095134 g     F .text	0000008c alt_ic_irq_disable
8008b588 g     F .text	0000007c __swrite
80098c54 g     O .rwdata	00000004 __malloc_trim_threshold
80088e58 g     F .text	0000000c __locale_msgcharset
80095c08 g     F .text	00000038 exit
80098c40 g     O .rwdata	00000004 addressRAM0_0
80088cfc g     F .text	000000c4 _fwalk_reent
800942e0 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8008a63c g     F .text	000001fc __mdiff
8008f600 g     F .text	00000074 .hidden __modsi3
800fd000 g       *ABS*	00000000 __alt_data_end
80080020 g     F .exceptions	00000000 alt_exception
8008830c g     F .text	00000004 __sfp_lock_release
80093a80 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
80093960 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
800960bc g     F .text	00000034 _exit
80094b2c g     F .text	0000012c alt_alarm_start
00000000 g       *ABS*	00000000 __alt_mem_ddr2_ram
80088e9c g     F .text	000001bc __smakebuf_r
80098c38 g     O .rwdata	00000004 addressRAM0_2
80098c80 g     O .rwdata	00000008 alt_msgdma_list
80081cc0 g     F .text	00000098 strlen
8009553c g     F .text	00000154 open
8008103c g     F .text	000000dc .hidden __gedf2
800958bc g     F .text	0000003c alt_putchar
80098c58 g     O .rwdata	00000004 __wctomb
8008cc4c g     F .text	00000018 __sprint_r
80095028 g     F .text	00000034 alt_icache_flush_all
80098c88 g     O .rwdata	00000004 alt_priority_mask
80098c2c g     O .rwdata	00000004 len
800950ac g     F .text	00000088 alt_ic_irq_enable
80086128 g     F .text	0000001c __vfprintf_internal
8008ea70 g     F .text	0000005c _wctomb_r
8009aa00 g     O .bss	00000001 ISR_transfer_flag
80090a40 g     F .text	000008fc .hidden __subdf3
8008a070 g     F .text	000000b0 __lo0bits
80098c78 g     O .rwdata	00000008 alt_alarm_list
80094ed8 g     F .text	00000060 _do_ctors
80098c28 g     O .rwdata	00000004 status
8008e980 g     F .text	000000c0 wcrtomb
800914d4 g     F .text	000000d0 close
80091804 g     F .text	00000084 alt_load
8008e59c g     F .text	00000080 fputwc
80088310 g     F .text	00000004 __sinit_lock_acquire
80089de4 g     F .text	00000120 __multadd
80089dbc g     F .text	00000028 _Bfree



Disassembly of section .entry:

80080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
80080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
80080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
80080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
8008000c:	00bffd16 	blt	zero,r2,80080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
80080010:	00600234 	movhi	at,32776
    ori r1, r1, %lo(_start)
80080014:	08409114 	ori	at,at,580
    jmp r1
80080018:	0800683a 	jmp	at
8008001c:	00000000 	call	80000000 <__alt_mem_ddr2_ram_1+0x40000000>

Disassembly of section .exceptions:

80080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8008007c:	10000326 	beq	r2,zero,8008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80080080:	20000226 	beq	r4,zero,8008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80080084:	00800fc0 	call	800800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80080088:	00000706 	br	800800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8008008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80080098:	00801d00 	call	800801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8008009c:	1000021e 	bne	r2,zero,800800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
800800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
800800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
800800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
800800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
800800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
800800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
800800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
800800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
800800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
800800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
800800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
800800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
800800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
800800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
800800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
800800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
800800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
800800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
800800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
800800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
800800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
800800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
800800f8:	ef80083a 	eret

800800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
800800fc:	defff904 	addi	sp,sp,-28
80080100:	dfc00615 	stw	ra,24(sp)
80080104:	df000515 	stw	fp,20(sp)
80080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80080110:	0005313a 	rdctl	r2,ipending
80080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80080124:	00800044 	movi	r2,1
80080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8008012c:	e0fffb17 	ldw	r3,-20(fp)
80080130:	e0bffc17 	ldw	r2,-16(fp)
80080134:	1884703a 	and	r2,r3,r2
80080138:	10001426 	beq	r2,zero,8008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8008013c:	00a002b4 	movhi	r2,32778
80080140:	10ab4104 	addi	r2,r2,-21244
80080144:	e0fffd17 	ldw	r3,-12(fp)
80080148:	180690fa 	slli	r3,r3,3
8008014c:	10c5883a 	add	r2,r2,r3
80080150:	10c00017 	ldw	r3,0(r2)
80080154:	00a002b4 	movhi	r2,32778
80080158:	10ab4104 	addi	r2,r2,-21244
8008015c:	e13ffd17 	ldw	r4,-12(fp)
80080160:	200890fa 	slli	r4,r4,3
80080164:	1105883a 	add	r2,r2,r4
80080168:	10800104 	addi	r2,r2,4
8008016c:	10800017 	ldw	r2,0(r2)
80080170:	1009883a 	mov	r4,r2
80080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8008017c:	0005313a 	rdctl	r2,ipending
80080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80080184:	e0bfff17 	ldw	r2,-4(fp)
80080188:	00000706 	br	800801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8008018c:	e0bffc17 	ldw	r2,-16(fp)
80080190:	1085883a 	add	r2,r2,r2
80080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80080198:	e0bffd17 	ldw	r2,-12(fp)
8008019c:	10800044 	addi	r2,r2,1
800801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
800801a4:	003fe106 	br	8008012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
800801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
800801ac:	e0bffb17 	ldw	r2,-20(fp)
800801b0:	103fdb1e 	bne	r2,zero,80080120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
800801b4:	0001883a 	nop
}
800801b8:	0001883a 	nop
800801bc:	e037883a 	mov	sp,fp
800801c0:	dfc00117 	ldw	ra,4(sp)
800801c4:	df000017 	ldw	fp,0(sp)
800801c8:	dec00204 	addi	sp,sp,8
800801cc:	f800283a 	ret

800801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
800801d0:	defffb04 	addi	sp,sp,-20
800801d4:	dfc00415 	stw	ra,16(sp)
800801d8:	df000315 	stw	fp,12(sp)
800801dc:	df000304 	addi	fp,sp,12
800801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
800801e4:	000531fa 	rdctl	r2,exception
800801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
800801ec:	e0bffd17 	ldw	r2,-12(fp)
800801f0:	10801f0c 	andi	r2,r2,124
800801f4:	1004d0ba 	srli	r2,r2,2
800801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
800801fc:	0005333a 	rdctl	r2,badaddr
80080200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80080204:	d0a78e17 	ldw	r2,-25032(gp)
80080208:	10000726 	beq	r2,zero,80080228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8008020c:	d0a78e17 	ldw	r2,-25032(gp)
80080210:	e0fffd17 	ldw	r3,-12(fp)
80080214:	e1bffe17 	ldw	r6,-8(fp)
80080218:	e17fff17 	ldw	r5,-4(fp)
8008021c:	1809883a 	mov	r4,r3
80080220:	103ee83a 	callr	r2
80080224:	00000206 	br	80080230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80080228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8008022c:	0005883a 	mov	r2,zero
}
80080230:	e037883a 	mov	sp,fp
80080234:	dfc00117 	ldw	ra,4(sp)
80080238:	df000017 	ldw	fp,0(sp)
8008023c:	dec00204 	addi	sp,sp,8
80080240:	f800283a 	ret

Disassembly of section .text:

80080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
80080244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
80080248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
8008024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
80080250:	00bffd16 	blt	zero,r2,80080248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80080254:	06e003f4 	movhi	sp,32783
    ori sp, sp, %lo(__alt_stack_pointer)
80080258:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
8008025c:	06a002b4 	movhi	gp,32778
    ori gp, gp, %lo(_gp)
80080260:	d6830214 	ori	gp,gp,3080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80080264:	00a00274 	movhi	r2,32777
    ori r2, r2, %lo(__bss_start)
80080268:	10aa7f14 	ori	r2,r2,43516

    movhi r3, %hi(__bss_end)
8008026c:	00e00274 	movhi	r3,32777
    ori r3, r3, %lo(__bss_end)
80080270:	18eb8114 	ori	r3,r3,44548

    beq r2, r3, 1f
80080274:	10c00326 	beq	r2,r3,80080284 <_start+0x40>

0:
    stw zero, (r2)
80080278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8008027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80080280:	10fffd36 	bltu	r2,r3,80080278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
80080284:	00918040 	call	80091804 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80080288:	00919980 	call	80091998 <alt_main>

8008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
8008028c:	003fff06 	br	8008028c <alt_after_alt_main>

80080290 <GetInputString>:
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080290:	01401e0e 	bge	zero,r5,8008030c <GetInputString+0x7c>
 *           encounters.
 *
 ******************************************************************/
char entry[4];
void GetInputString( char* entry, int size, FILE * stream )
{
80080294:	defff904 	addi	sp,sp,-28
80080298:	dd400515 	stw	r21,20(sp)
8008029c:	dd000415 	stw	r20,16(sp)
800802a0:	dcc00315 	stw	r19,12(sp)
800802a4:	dc800215 	stw	r18,8(sp)
800802a8:	dc400115 	stw	r17,4(sp)
800802ac:	dc000015 	stw	r16,0(sp)
800802b0:	dfc00615 	stw	ra,24(sp)
800802b4:	0021883a 	mov	r16,zero
800802b8:	3027883a 	mov	r19,r6
800802bc:	2025883a 	mov	r18,r4
800802c0:	2823883a 	mov	r17,r5
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800802c4:	05000344 	movi	r20,13
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
800802c8:	05400284 	movi	r21,10
    {
      if( (ch = getc(stream)) != '\r')
800802cc:	9809883a 	mov	r4,r19
800802d0:	00819ac0 	call	800819ac <getc>
	{
	  entry[i] = ch;
800802d4:	9407883a 	add	r3,r18,r16
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800802d8:	15000326 	beq	r2,r20,800802e8 <GetInputString+0x58>
	{
	  entry[i] = ch;
800802dc:	18800005 	stb	r2,0(r3)
	  i++;
800802e0:	84000044 	addi	r16,r16,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
800802e4:	15400126 	beq	r2,r21,800802ec <GetInputString+0x5c>
800802e8:	847ff816 	blt	r16,r17,800802cc <GetInputString+0x3c>
	{
	  entry[i] = ch;
	  i++;
	}
    }
}
800802ec:	dfc00617 	ldw	ra,24(sp)
800802f0:	dd400517 	ldw	r21,20(sp)
800802f4:	dd000417 	ldw	r20,16(sp)
800802f8:	dcc00317 	ldw	r19,12(sp)
800802fc:	dc800217 	ldw	r18,8(sp)
80080300:	dc400117 	ldw	r17,4(sp)
80080304:	dc000017 	ldw	r16,0(sp)
80080308:	dec00704 	addi	sp,sp,28
8008030c:	f800283a 	ret

80080310 <main>:


int main()
{
80080310:	deffeb04 	addi	sp,sp,-84
  printf("Welcome to the L0Tribe initializer program\n\n");
80080314:	01200274 	movhi	r4,32777
    }
}


int main()
{
80080318:	dfc01415 	stw	ra,80(sp)
8008031c:	df001315 	stw	fp,76(sp)
80080320:	ddc01215 	stw	r23,72(sp)
80080324:	df001304 	addi	fp,sp,76
80080328:	dd801115 	stw	r22,68(sp)
8008032c:	dd401015 	stw	r21,64(sp)
80080330:	dd000f15 	stw	r20,60(sp)
80080334:	dcc00e15 	stw	r19,56(sp)
80080338:	dc800d15 	stw	r18,52(sp)
8008033c:	dc400c15 	stw	r17,48(sp)
80080340:	dc000b15 	stw	r16,44(sp)
  printf("Welcome to the L0Tribe initializer program\n\n");
80080344:	21183c04 	addi	r4,r4,24816
    }
}


int main()
{
80080348:	defff804 	addi	sp,sp,-32
  printf("Welcome to the L0Tribe initializer program\n\n");
8008034c:	0081b600 	call	80081b60 <puts>
  printf("You should have the ethernet connection correctly setup to send primitives to the L0Tribe RAM\n");
80080350:	01200274 	movhi	r4,32777
    }
}


int main()
{
80080354:	dd4004c4 	addi	r21,sp,19
  printf("Welcome to the L0Tribe initializer program\n\n");
  printf("You should have the ethernet connection correctly setup to send primitives to the L0Tribe RAM\n");
80080358:	21184704 	addi	r4,r4,24860
8008035c:	0081b600 	call	80081b60 <puts>
    }
}


int main()
{
80080360:	a82ad13a 	srli	r21,r21,4
  printf("Welcome to the L0Tribe initializer program\n\n");
  printf("You should have the ethernet connection correctly setup to send primitives to the L0Tribe RAM\n");
  printf("Primitives to the L0Tribe RAM pass from the eth link 0: configured as 192.168.1.8; mac: 00:01:02:03:04:08\n\n");
80080364:	01200274 	movhi	r4,32777
80080368:	21185f04 	addi	r4,r4,24956
8008036c:	0081b600 	call	80081b60 <puts>
    }
}


int main()
{
80080370:	a82a913a 	slli	r21,r21,4
  printf("Welcome to the L0Tribe initializer program\n\n");
  printf("You should have the ethernet connection correctly setup to send primitives to the L0Tribe RAM\n");
  printf("Primitives to the L0Tribe RAM pass from the eth link 0: configured as 192.168.1.8; mac: 00:01:02:03:04:08\n\n");

  IOWR(CTRL_SIG_BASE,0,0);
80080374:	00a00434 	movhi	r2,32784
80080378:	10845404 	addi	r2,r2,4432
8008037c:	10000035 	stwio	zero,0(r2)
  printf("Type y when you are ready to start\n");
80080380:	01200274 	movhi	r4,32777
80080384:	21187a04 	addi	r4,r4,25064

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c, type y when you are ready to start\n", entry[0]);
    detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080388:	05e00434 	movhi	r23,32784
8008038c:	bdc44c04 	addi	r23,r23,4400
80080390:	d4278004 	addi	r16,gp,-25088
  printf("Welcome to the L0Tribe initializer program\n\n");
  printf("You should have the ethernet connection correctly setup to send primitives to the L0Tribe RAM\n");
  printf("Primitives to the L0Tribe RAM pass from the eth link 0: configured as 192.168.1.8; mac: 00:01:02:03:04:08\n\n");

  IOWR(CTRL_SIG_BASE,0,0);
  printf("Type y when you are ready to start\n");
80080394:	0081b600 	call	80081b60 <puts>
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080398:	05800344 	movi	r22,13
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
8008039c:	05000284 	movi	r20,10
800803a0:	04c000c4 	movi	r19,3
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c, type y when you are ready to start\n", entry[0]);
    detectorUnderInit=IORD(INPUT_IO_BASE,0);
    printf("Input from IO: %d\n",(int)detectorUnderInit);
    if(entry[0] == 'y')
800803a4:	04801e44 	movi	r18,121

  IOWR(CTRL_SIG_BASE,0,0);
  printf("Type y when you are ready to start\n");

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
800803a8:	d0a01017 	ldw	r2,-32704(gp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
800803ac:	0023883a 	mov	r17,zero

  IOWR(CTRL_SIG_BASE,0,0);
  printf("Type y when you are ready to start\n");

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
800803b0:	10c00117 	ldw	r3,4(r2)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800803b4:	1809883a 	mov	r4,r3
800803b8:	e0fff715 	stw	r3,-36(fp)
800803bc:	00819ac0 	call	800819ac <getc>
	{
	  entry[i] = ch;
800803c0:	8449883a 	add	r4,r16,r17
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800803c4:	e0fff717 	ldw	r3,-36(fp)
800803c8:	15800326 	beq	r2,r22,800803d8 <main+0xc8>
	{
	  entry[i] = ch;
800803cc:	20800005 	stb	r2,0(r4)
	  i++;
800803d0:	8c400044 	addi	r17,r17,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
800803d4:	15000126 	beq	r2,r20,800803dc <main+0xcc>
800803d8:	9c7ff60e 	bge	r19,r17,800803b4 <main+0xa4>
  IOWR(CTRL_SIG_BASE,0,0);
  printf("Type y when you are ready to start\n");

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c, type y when you are ready to start\n", entry[0]);
800803dc:	d1678007 	ldb	r5,-25088(gp)
800803e0:	01200274 	movhi	r4,32777
800803e4:	21188304 	addi	r4,r4,25100
800803e8:	0081a640 	call	80081a64 <printf>
    detectorUnderInit=IORD(INPUT_IO_BASE,0);
800803ec:	b8800037 	ldwio	r2,0(r23)
    printf("Input from IO: %d\n",(int)detectorUnderInit);
800803f0:	01200274 	movhi	r4,32777
800803f4:	21189004 	addi	r4,r4,25152
800803f8:	11403fcc 	andi	r5,r2,255
  printf("Type y when you are ready to start\n");

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c, type y when you are ready to start\n", entry[0]);
    detectorUnderInit=IORD(INPUT_IO_BASE,0);
800803fc:	d0a00705 	stb	r2,-32740(gp)
    printf("Input from IO: %d\n",(int)detectorUnderInit);
80080400:	0081a640 	call	80081a64 <printf>
    if(entry[0] == 'y')
80080404:	d0a78007 	ldb	r2,-25088(gp)
80080408:	14bfe71e 	bne	r2,r18,800803a8 <main+0x98>
      {
	printf(" OK!\n ");
8008040c:	01200274 	movhi	r4,32777
80080410:	21189504 	addi	r4,r4,25172
80080414:	0081a640 	call	80081a64 <printf>
  }

  for (int i=0; i < ndet; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
  for (int i=0;i<ndet;++i) dev_ptr[i]= &dev[i];
  for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
  for (int i=0;i<ndet;++i) rd_addr[i] = 0x0;
80080418:	00a002b4 	movhi	r2,32778
	printf(" OK!\n ");
	break;
      }
  }

  for (int i=0; i < ndet; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
8008041c:	01a002b4 	movhi	r6,32778
  for (int i=0;i<ndet;++i) dev_ptr[i]= &dev[i];
80080420:	016002b4 	movhi	r5,32778
  for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
  for (int i=0;i<ndet;++i) rd_addr[i] = 0x0;
80080424:	10ab1904 	addi	r2,r2,-21404
	printf(" OK!\n ");
	break;
      }
  }

  for (int i=0; i < ndet; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
80080428:	31ab2804 	addi	r6,r6,-21344
  for (int i=0;i<ndet;++i) dev_ptr[i]= &dev[i];
8008042c:	296a9c04 	addi	r5,r5,-21904
	printf(" OK!\n ");
	break;
      }
  }

  for (int i=0; i < ndet; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
80080430:	05a002b4 	movhi	r22,32778
  for (int i=0;i<ndet;++i) dev_ptr[i]= &dev[i];
80080434:	052002b4 	movhi	r20,32778
  for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
80080438:	046002b4 	movhi	r17,32778
  for (int i=0;i<ndet;++i) rd_addr[i] = 0x0;
  for (int i=0;i<ndet;++i) ram_access_ptr[i] = &rd_addr[i];
8008043c:	00e002b4 	movhi	r3,32778
//  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PILOT_SIG_BASE,0xf); //enabling interrupt on all 4 inputs
//  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE,0xf); //clearing older interrupts
//  alt_ic_isr_register(PILOT_SIG_IRQ_INTERRUPT_CONTROLLER_ID, PILOT_SIG_IRQ, ISR_transfer_callback, ISR_input_ptr,0x0);//setting interrupt callback


  printf("would you like to reset the FPGA? y/n\n ");
80080440:	01200274 	movhi	r4,32777

  for (int i=0; i < ndet; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
  for (int i=0;i<ndet;++i) dev_ptr[i]= &dev[i];
  for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
  for (int i=0;i<ndet;++i) rd_addr[i] = 0x0;
  for (int i=0;i<ndet;++i) ram_access_ptr[i] = &rd_addr[i];
80080444:	18eb3c04 	addi	r3,r3,-21264
	printf(" OK!\n ");
	break;
      }
  }

  for (int i=0; i < ndet; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
80080448:	b5ab1e04 	addi	r22,r22,-21384
  for (int i=0;i<ndet;++i) dev_ptr[i]= &dev[i];
8008044c:	a52b1404 	addi	r20,r20,-21424
  for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
80080450:	8c6b2304 	addi	r17,r17,-21364
	printf(" OK!\n ");
	break;
      }
  }

  for (int i=0; i < ndet; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
80080454:	35c00404 	addi	r23,r6,16
80080458:	34c00804 	addi	r19,r6,32
8008045c:	34800c04 	addi	r18,r6,48
80080460:	33c01004 	addi	r15,r6,64
  for (int i=0;i<ndet;++i) dev_ptr[i]= &dev[i];
80080464:	2b801804 	addi	r14,r5,96
80080468:	2b403004 	addi	r13,r5,192
8008046c:	2b004804 	addi	r12,r5,288
80080470:	2ac06004 	addi	r11,r5,384
  for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
  for (int i=0;i<ndet;++i) rd_addr[i] = 0x0;
  for (int i=0;i<ndet;++i) ram_access_ptr[i] = &rd_addr[i];
80080474:	12800104 	addi	r10,r2,4
80080478:	12400204 	addi	r9,r2,8
8008047c:	12000304 	addi	r8,r2,12
80080480:	11c00404 	addi	r7,r2,16
//  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PILOT_SIG_BASE,0xf); //enabling interrupt on all 4 inputs
//  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE,0xf); //clearing older interrupts
//  alt_ic_isr_register(PILOT_SIG_IRQ_INTERRUPT_CONTROLLER_ID, PILOT_SIG_IRQ, ISR_transfer_callback, ISR_input_ptr,0x0);//setting interrupt callback


  printf("would you like to reset the FPGA? y/n\n ");
80080484:	21189704 	addi	r4,r4,25180
	printf(" OK!\n ");
	break;
      }
  }

  for (int i=0; i < ndet; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
80080488:	b5c00115 	stw	r23,4(r22)
8008048c:	b4c00215 	stw	r19,8(r22)
80080490:	b4800315 	stw	r18,12(r22)
80080494:	b1800015 	stw	r6,0(r22)
80080498:	b3c00415 	stw	r15,16(r22)
  for (int i=0;i<ndet;++i) dev_ptr[i]= &dev[i];
8008049c:	a1400015 	stw	r5,0(r20)
800804a0:	a3800115 	stw	r14,4(r20)
800804a4:	a3400215 	stw	r13,8(r20)
800804a8:	a3000315 	stw	r12,12(r20)
800804ac:	a2c00415 	stw	r11,16(r20)
  for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
800804b0:	88000015 	stw	zero,0(r17)
800804b4:	88000115 	stw	zero,4(r17)
800804b8:	88000215 	stw	zero,8(r17)
800804bc:	88000315 	stw	zero,12(r17)
800804c0:	88000415 	stw	zero,16(r17)
  for (int i=0;i<ndet;++i) rd_addr[i] = 0x0;
800804c4:	10000015 	stw	zero,0(r2)
800804c8:	10000115 	stw	zero,4(r2)
800804cc:	10000215 	stw	zero,8(r2)
800804d0:	10000315 	stw	zero,12(r2)
800804d4:	10000415 	stw	zero,16(r2)
  for (int i=0;i<ndet;++i) ram_access_ptr[i] = &rd_addr[i];
800804d8:	18800015 	stw	r2,0(r3)
800804dc:	1a800115 	stw	r10,4(r3)
800804e0:	1a400215 	stw	r9,8(r3)
800804e4:	1a000315 	stw	r8,12(r3)
800804e8:	19c00415 	stw	r7,16(r3)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800804ec:	05c00344 	movi	r23,13
//  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PILOT_SIG_BASE,0xf); //enabling interrupt on all 4 inputs
//  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE,0xf); //clearing older interrupts
//  alt_ic_isr_register(PILOT_SIG_IRQ_INTERRUPT_CONTROLLER_ID, PILOT_SIG_IRQ, ISR_transfer_callback, ISR_input_ptr,0x0);//setting interrupt callback


  printf("would you like to reset the FPGA? y/n\n ");
800804f0:	0081a640 	call	80081a64 <printf>
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
800804f4:	04c00284 	movi	r19,10
800804f8:	048000c4 	movi	r18,3
//  alt_ic_isr_register(PILOT_SIG_IRQ_INTERRUPT_CONTROLLER_ID, PILOT_SIG_IRQ, ISR_transfer_callback, ISR_input_ptr,0x0);//setting interrupt callback


  printf("would you like to reset the FPGA? y/n\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
800804fc:	d0a01017 	ldw	r2,-32704(gp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080500:	0007883a 	mov	r3,zero
//  alt_ic_isr_register(PILOT_SIG_IRQ_INTERRUPT_CONTROLLER_ID, PILOT_SIG_IRQ, ISR_transfer_callback, ISR_input_ptr,0x0);//setting interrupt callback


  printf("would you like to reset the FPGA? y/n\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
80080504:	11400117 	ldw	r5,4(r2)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080508:	2809883a 	mov	r4,r5
8008050c:	e0fff715 	stw	r3,-36(fp)
80080510:	e17ff615 	stw	r5,-40(fp)
80080514:	00819ac0 	call	800819ac <getc>
	{
	  entry[i] = ch;
80080518:	e0fff717 	ldw	r3,-36(fp)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
8008051c:	e17ff617 	ldw	r5,-40(fp)
	{
	  entry[i] = ch;
80080520:	80c9883a 	add	r4,r16,r3
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080524:	15c00326 	beq	r2,r23,80080534 <main+0x224>
	{
	  entry[i] = ch;
80080528:	20800005 	stb	r2,0(r4)
	  i++;
8008052c:	18c00044 	addi	r3,r3,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080530:	14c00126 	beq	r2,r19,80080538 <main+0x228>
80080534:	90fff40e 	bge	r18,r3,80080508 <main+0x1f8>


  printf("would you like to reset the FPGA? y/n\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
80080538:	d1678007 	ldb	r5,-25088(gp)
8008053c:	01200274 	movhi	r4,32777
80080540:	2118a104 	addi	r4,r4,25220
80080544:	0081a640 	call	80081a64 <printf>
    if(entry[0] == 'y') {
80080548:	d0a78007 	ldb	r2,-25088(gp)
8008054c:	00c01e44 	movi	r3,121
80080550:	10c00326 	beq	r2,r3,80080560 <main+0x250>
      IOWR(CTRL_SIG_BASE,0,2); //SOB
      break;
    }
    if(entry[0] == 'n') {
80080554:	01001b84 	movi	r4,110
80080558:	113fe81e 	bne	r2,r4,800804fc <main+0x1ec>
8008055c:	00000406 	br	80080570 <main+0x260>
  printf("would you like to reset the FPGA? y/n\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
    if(entry[0] == 'y') {
      IOWR(CTRL_SIG_BASE,0,2); //SOB
80080560:	00a00434 	movhi	r2,32784
80080564:	10845404 	addi	r2,r2,4432
80080568:	00c00084 	movi	r3,2
8008056c:	10c00035 	stwio	r3,0(r2)
    }
  }

  ///////////////////////////
  //Test RAM INITIALIZATION:
  printf("Starting RAM INIT\n");
80080570:	01200274 	movhi	r4,32777
80080574:	2118a504 	addi	r4,r4,25236
80080578:	0081b600 	call	80081b60 <puts>
  ///////////////////////////


  printf("would you like to clean the ram? y/n\n ");
8008057c:	01200274 	movhi	r4,32777
80080580:	2118aa04 	addi	r4,r4,25256
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080584:	05c00344 	movi	r23,13
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080588:	04c00284 	movi	r19,10
8008058c:	048000c4 	movi	r18,3
  //Test RAM INITIALIZATION:
  printf("Starting RAM INIT\n");
  ///////////////////////////


  printf("would you like to clean the ram? y/n\n ");
80080590:	0081a640 	call	80081a64 <printf>
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
80080594:	d0a01017 	ldw	r2,-32704(gp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080598:	0007883a 	mov	r3,zero
  ///////////////////////////


  printf("would you like to clean the ram? y/n\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
8008059c:	11400117 	ldw	r5,4(r2)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800805a0:	2809883a 	mov	r4,r5
800805a4:	e0fff715 	stw	r3,-36(fp)
800805a8:	e17ff615 	stw	r5,-40(fp)
800805ac:	00819ac0 	call	800819ac <getc>
	{
	  entry[i] = ch;
800805b0:	e0fff717 	ldw	r3,-36(fp)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800805b4:	e17ff617 	ldw	r5,-40(fp)
	{
	  entry[i] = ch;
800805b8:	80c9883a 	add	r4,r16,r3
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800805bc:	15c00326 	beq	r2,r23,800805cc <main+0x2bc>
	{
	  entry[i] = ch;
800805c0:	20800005 	stb	r2,0(r4)
	  i++;
800805c4:	18c00044 	addi	r3,r3,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
800805c8:	14c00126 	beq	r2,r19,800805d0 <main+0x2c0>
800805cc:	90fff40e 	bge	r18,r3,800805a0 <main+0x290>


  printf("would you like to clean the ram? y/n\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
800805d0:	d1678007 	ldb	r5,-25088(gp)
800805d4:	01200274 	movhi	r4,32777
800805d8:	2118a104 	addi	r4,r4,25220
800805dc:	0081a640 	call	80081a64 <printf>
    if(entry[0] == 'y') {
800805e0:	d0a78007 	ldb	r2,-25088(gp)
800805e4:	01c01e44 	movi	r7,121
800805e8:	11c00226 	beq	r2,r7,800805f4 <main+0x2e4>
      IOWR(CTRL_SIG_BASE,0,0);
      break;
    }
    if(entry[0] == 'n') {
800805ec:	00c01b84 	movi	r3,110
800805f0:	10ffe81e 	bne	r2,r3,80080594 <main+0x284>
  printf("would you like to clean the ram? y/n\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
    if(entry[0] == 'y') {
      IOWR(CTRL_SIG_BASE,0,0);
800805f4:	00a00434 	movhi	r2,32784
800805f8:	10845404 	addi	r2,r2,4432
800805fc:	10000035 	stwio	zero,0(r2)
  }




  if(entry[0] == 'y') {
80080600:	d0e78007 	ldb	r3,-25088(gp)
80080604:	00801e44 	movi	r2,121
80080608:	1881c026 	beq	r3,r2,80080d0c <main+0x9fc>
    for (unsigned int i = 0x0; i < DDR2_RAM_1_SPAN; i+=4)
      {
	IOWR_32DIRECT(DDR2_RAM_1_BASE, i,0x0);
      }
  }
  else printf("OK! continuing without clean\n ");
8008060c:	01200274 	movhi	r4,32777
80080610:	2118c004 	addi	r4,r4,25344
80080614:	0081a640 	call	80081a64 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80080618:	d0a78c17 	ldw	r2,-25040(gp)

  alt_msgdma_standard_descriptor a_descriptor_wr;
  alt_msgdma_standard_descriptor * a_descriptor_ptr_wr = &a_descriptor_wr;
  alt_msgdma_dev dev_wr;
  alt_msgdma_dev *dev_ptr_wr = &dev_wr;
  dev_ptr_wr = alt_msgdma_open(FROM_ETH_TO_DDR_ETH_DMA_CSR_NAME);
8008061c:	01200274 	movhi	r4,32777
80080620:	d0a78c17 	ldw	r2,-25040(gp)
80080624:	2118c804 	addi	r4,r4,25376
80080628:	00948240 	call	80094824 <alt_msgdma_open>

  alt_u32 control_wr = 0;
  alt_u32  len_wr=256;
  alt_u32 * wr_adr_p = addressRAM0_0;
8008062c:	d4a00e17 	ldw	r18,-32712(gp)
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080630:	05e00434 	movhi	r23,32784
80080634:	bdc44c04 	addi	r23,r23,4400

  alt_msgdma_standard_descriptor a_descriptor_wr;
  alt_msgdma_standard_descriptor * a_descriptor_ptr_wr = &a_descriptor_wr;
  alt_msgdma_dev dev_wr;
  alt_msgdma_dev *dev_ptr_wr = &dev_wr;
  dev_ptr_wr = alt_msgdma_open(FROM_ETH_TO_DDR_ETH_DMA_CSR_NAME);
80080638:	1027883a 	mov	r19,r2

  alt_u32 control_wr = 0;
  alt_u32  len_wr=256;
  alt_u32 * wr_adr_p = addressRAM0_0;
  alt_u32 * ram_access_ptr_wr = &wr_adr_p;
  status=0;
8008063c:	d0200815 	stw	zero,-32736(gp)

  while(1) {
    printf("which detector you like to write into the ram (0-4)? n to skip\n");
80080640:	01200274 	movhi	r4,32777
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080644:	0007883a 	mov	r3,zero
  alt_u32 * wr_adr_p = addressRAM0_0;
  alt_u32 * ram_access_ptr_wr = &wr_adr_p;
  status=0;

  while(1) {
    printf("which detector you like to write into the ram (0-4)? n to skip\n");
80080648:	2118d104 	addi	r4,r4,25412
8008064c:	e0fff715 	stw	r3,-36(fp)
80080650:	0081b600 	call	80081b60 <puts>
    GetInputString( entry, sizeof(entry), stdin );
80080654:	d0a01017 	ldw	r2,-32704(gp)
80080658:	e0fff717 	ldw	r3,-36(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
8008065c:	018000c4 	movi	r6,3
  alt_u32 * ram_access_ptr_wr = &wr_adr_p;
  status=0;

  while(1) {
    printf("which detector you like to write into the ram (0-4)? n to skip\n");
    GetInputString( entry, sizeof(entry), stdin );
80080660:	11400117 	ldw	r5,4(r2)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080664:	2809883a 	mov	r4,r5
80080668:	e0fff715 	stw	r3,-36(fp)
8008066c:	e17ff615 	stw	r5,-40(fp)
80080670:	e1bff515 	stw	r6,-44(fp)
80080674:	00819ac0 	call	800819ac <getc>
	{
	  entry[i] = ch;
80080678:	e0fff717 	ldw	r3,-36(fp)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
8008067c:	01c00344 	movi	r7,13
80080680:	e17ff617 	ldw	r5,-40(fp)
	{
	  entry[i] = ch;
80080684:	80c9883a 	add	r4,r16,r3
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080688:	e1bff517 	ldw	r6,-44(fp)
8008068c:	11c00426 	beq	r2,r7,800806a0 <main+0x390>
	{
	  entry[i] = ch;
80080690:	20800005 	stb	r2,0(r4)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080694:	01000284 	movi	r4,10
    {
      if( (ch = getc(stream)) != '\r')
	{
	  entry[i] = ch;
	  i++;
80080698:	18c00044 	addi	r3,r3,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
8008069c:	11000126 	beq	r2,r4,800806a4 <main+0x394>
800806a0:	30fff00e 	bge	r6,r3,80080664 <main+0x354>
  status=0;

  while(1) {
    printf("which detector you like to write into the ram (0-4)? n to skip\n");
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
800806a4:	d1678007 	ldb	r5,-25088(gp)
800806a8:	01200274 	movhi	r4,32777
800806ac:	2118a104 	addi	r4,r4,25220
800806b0:	0081a640 	call	80081a64 <printf>

    if(entry[0] == '0') {
800806b4:	d0a78007 	ldb	r2,-25088(gp)
800806b8:	00c00c04 	movi	r3,48
800806bc:	10c20426 	beq	r2,r3,80080ed0 <main+0xbc0>
	    break;
	  }
	}
      }
    }
    else if(entry[0] == '1') {
800806c0:	00c00c44 	movi	r3,49
800806c4:	10c1d526 	beq	r2,r3,80080e1c <main+0xb0c>
	    break;
	  }
	}
      }
    }
    else if(entry[0] == '2') {
800806c8:	00c00c84 	movi	r3,50
800806cc:	10c1e826 	beq	r2,r3,80080e70 <main+0xb60>
	  }
	}
      }
    }

    else if(entry[0] == '3') {
800806d0:	00c00cc4 	movi	r3,51
800806d4:	10c1b926 	beq	r2,r3,80080dbc <main+0xaac>
	  }
	}
      }
    }

    else if(entry[0] == '4') {
800806d8:	00c00d04 	movi	r3,52
800806dc:	10c19b26 	beq	r2,r3,80080d4c <main+0xa3c>
	}
      }
    }


    else if(entry[0] == 'n') {
800806e0:	00c01b84 	movi	r3,110
800806e4:	10ffd61e 	bne	r2,r3,80080640 <main+0x330>
    }
  }



  printf("Fill complete\n");
800806e8:	01200274 	movhi	r4,32777
800806ec:	2118fa04 	addi	r4,r4,25576
800806f0:	0081b600 	call	80081b60 <puts>


  //Read back what I have written
  unsigned int write;

  for (unsigned int i = addressRAM0_0-0x80; i <  addressRAM0_0+0x5500; i+=4)
800806f4:	d0a00e17 	ldw	r2,-32712(gp)
800806f8:	14bfe004 	addi	r18,r2,-128
800806fc:	10954004 	addi	r2,r2,21760
80080700:	90800a2e 	bgeu	r18,r2,8008072c <main+0x41c>
    {
      write = IORD_32DIRECT(DDR2_RAM_BASE, i);

      printf("DETECTOR0 address: %x; octal-base: %o; data: %x\n",i,i,write);
80080704:	91c00037 	ldwio	r7,0(r18)
80080708:	01200274 	movhi	r4,32777
8008070c:	900d883a 	mov	r6,r18
80080710:	900b883a 	mov	r5,r18
80080714:	21190704 	addi	r4,r4,25628
80080718:	0081a640 	call	80081a64 <printf>


  //Read back what I have written
  unsigned int write;

  for (unsigned int i = addressRAM0_0-0x80; i <  addressRAM0_0+0x5500; i+=4)
8008071c:	d0a00e17 	ldw	r2,-32712(gp)
80080720:	94800104 	addi	r18,r18,4
80080724:	10954004 	addi	r2,r2,21760
80080728:	90bff636 	bltu	r18,r2,80080704 <main+0x3f4>

    }



  printf("UDP download PORT0 to RAM success\n");
8008072c:	01200274 	movhi	r4,32777
80080730:	2118fe04 	addi	r4,r4,25592
80080734:	0081b600 	call	80081b60 <puts>

  for (unsigned int i = addressRAM0_1-0x20; i <  addressRAM0_1 + 0x20 ; i+=4)
80080738:	d0a00d17 	ldw	r2,-32716(gp)
8008073c:	14bff804 	addi	r18,r2,-32
80080740:	10800804 	addi	r2,r2,32
80080744:	90800a2e 	bgeu	r18,r2,80080770 <main+0x460>
    {
      write = IORD_32DIRECT(DDR2_RAM_BASE, i);

      printf("DETECTOR1 address: %x; octal-base: %o; data: %x\n",i,i,write);
80080748:	91c00037 	ldwio	r7,0(r18)
8008074c:	01200274 	movhi	r4,32777
80080750:	900d883a 	mov	r6,r18
80080754:	900b883a 	mov	r5,r18
80080758:	21191d04 	addi	r4,r4,25716
8008075c:	0081a640 	call	80081a64 <printf>



  printf("UDP download PORT0 to RAM success\n");

  for (unsigned int i = addressRAM0_1-0x20; i <  addressRAM0_1 + 0x20 ; i+=4)
80080760:	d0a00d17 	ldw	r2,-32716(gp)
80080764:	94800104 	addi	r18,r18,4
80080768:	10800804 	addi	r2,r2,32
8008076c:	90bff636 	bltu	r18,r2,80080748 <main+0x438>
      write = IORD_32DIRECT(DDR2_RAM_BASE, i);

      printf("DETECTOR1 address: %x; octal-base: %o; data: %x\n",i,i,write);
    }

  printf("UDP download PORT1 to RAM success\n");
80080770:	01200274 	movhi	r4,32777
80080774:	21191404 	addi	r4,r4,25680
80080778:	0081b600 	call	80081b60 <puts>



  for (unsigned int i = addressRAM0_2-0x20; i <  addressRAM0_2 + 0x20 ; i+=4)
8008077c:	d0a00c17 	ldw	r2,-32720(gp)
80080780:	14bff804 	addi	r18,r2,-32
80080784:	10800804 	addi	r2,r2,32
80080788:	90800a2e 	bgeu	r18,r2,800807b4 <main+0x4a4>
    {
      write = IORD_32DIRECT(DDR2_RAM_BASE, i);

      printf("DETECTOR2 address: %x; octal-base: %o; data: %x\n",i,i,write);
8008078c:	91c00037 	ldwio	r7,0(r18)
80080790:	01200274 	movhi	r4,32777
80080794:	900d883a 	mov	r6,r18
80080798:	900b883a 	mov	r5,r18
8008079c:	21193304 	addi	r4,r4,25804
800807a0:	0081a640 	call	80081a64 <printf>

  printf("UDP download PORT1 to RAM success\n");



  for (unsigned int i = addressRAM0_2-0x20; i <  addressRAM0_2 + 0x20 ; i+=4)
800807a4:	d0a00c17 	ldw	r2,-32720(gp)
800807a8:	94800104 	addi	r18,r18,4
800807ac:	10800804 	addi	r2,r2,32
800807b0:	90bff636 	bltu	r18,r2,8008078c <main+0x47c>
      write = IORD_32DIRECT(DDR2_RAM_BASE, i);

      printf("DETECTOR2 address: %x; octal-base: %o; data: %x\n",i,i,write);
    }

  printf("UDP download PORT2 to RAM success\n");
800807b4:	01200274 	movhi	r4,32777
800807b8:	21192a04 	addi	r4,r4,25768
800807bc:	0081b600 	call	80081b60 <puts>


  for (unsigned int i = addressRAM1_0-0x20; i <  addressRAM1_0 + 0x20 ; i+=4)
800807c0:	d0a00b17 	ldw	r2,-32724(gp)
800807c4:	14bff804 	addi	r18,r2,-32
800807c8:	10800804 	addi	r2,r2,32
800807cc:	90800c2e 	bgeu	r18,r2,80080800 <main+0x4f0>
    {
      write = IORD_32DIRECT(DDR2_RAM_1_BASE, i);
800807d0:	04d00034 	movhi	r19,16384
800807d4:	94c5883a 	add	r2,r18,r19

      printf("DETECTOR3 address: %x; octal-base: %o; data: %x\n",i,i,write);
800807d8:	11c00037 	ldwio	r7,0(r2)
800807dc:	01200274 	movhi	r4,32777
800807e0:	900d883a 	mov	r6,r18
800807e4:	900b883a 	mov	r5,r18
800807e8:	21194904 	addi	r4,r4,25892
800807ec:	0081a640 	call	80081a64 <printf>
    }

  printf("UDP download PORT2 to RAM success\n");


  for (unsigned int i = addressRAM1_0-0x20; i <  addressRAM1_0 + 0x20 ; i+=4)
800807f0:	d0a00b17 	ldw	r2,-32724(gp)
800807f4:	94800104 	addi	r18,r18,4
800807f8:	10800804 	addi	r2,r2,32
800807fc:	90bff536 	bltu	r18,r2,800807d4 <main+0x4c4>
      write = IORD_32DIRECT(DDR2_RAM_1_BASE, i);

      printf("DETECTOR3 address: %x; octal-base: %o; data: %x\n",i,i,write);
    }

  printf("UDP download PORT3 to RAM success\n");
80080800:	01200274 	movhi	r4,32777
80080804:	21194004 	addi	r4,r4,25856
80080808:	0081b600 	call	80081b60 <puts>


  for (unsigned int i = addressRAM1_1-0x20; i <  addressRAM1_1 + 0x20 ; i+=4)
8008080c:	d0a00a17 	ldw	r2,-32728(gp)
80080810:	14bff804 	addi	r18,r2,-32
80080814:	10800804 	addi	r2,r2,32
80080818:	90800c2e 	bgeu	r18,r2,8008084c <main+0x53c>
    {
      write = IORD_32DIRECT(DDR2_RAM_1_BASE, i);
8008081c:	04d00034 	movhi	r19,16384
80080820:	94c5883a 	add	r2,r18,r19

      printf("DETECTOR4 address: %x; octal-base: %o; data: %x\n",i,i,write);
80080824:	11c00037 	ldwio	r7,0(r2)
80080828:	01200274 	movhi	r4,32777
8008082c:	900d883a 	mov	r6,r18
80080830:	900b883a 	mov	r5,r18
80080834:	2119eb04 	addi	r4,r4,26540
80080838:	0081a640 	call	80081a64 <printf>
    }

  printf("UDP download PORT3 to RAM success\n");


  for (unsigned int i = addressRAM1_1-0x20; i <  addressRAM1_1 + 0x20 ; i+=4)
8008083c:	d0a00a17 	ldw	r2,-32728(gp)
80080840:	94800104 	addi	r18,r18,4
80080844:	10800804 	addi	r2,r2,32
80080848:	90bff536 	bltu	r18,r2,80080820 <main+0x510>
      write = IORD_32DIRECT(DDR2_RAM_1_BASE, i);

      printf("DETECTOR4 address: %x; octal-base: %o; data: %x\n",i,i,write);
    }

  printf("UDP download PORT4 to RAM success\n");
8008084c:	01200274 	movhi	r4,32777
80080850:	21195604 	addi	r4,r4,25944
80080854:	0081b600 	call	80081b60 <puts>
  //printf("END");
  //return;

  ////////////////////////////////////////////

  printf("Initializing DATA transfer to ethernet...\n");
80080858:	01200274 	movhi	r4,32777
8008085c:	21195f04 	addi	r4,r4,25980
80080860:	0081b600 	call	80081b60 <puts>

  dev_ptr[0] = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);
80080864:	01200274 	movhi	r4,32777
80080868:	21196a04 	addi	r4,r4,26024
8008086c:	00948240 	call	80094824 <alt_msgdma_open>
  dev_ptr[1] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_1_DMA_CSR_NAME);
80080870:	01200274 	movhi	r4,32777
80080874:	21197204 	addi	r4,r4,26056

  ////////////////////////////////////////////

  printf("Initializing DATA transfer to ethernet...\n");

  dev_ptr[0] = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);
80080878:	a0800015 	stw	r2,0(r20)
  dev_ptr[1] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_1_DMA_CSR_NAME);
8008087c:	00948240 	call	80094824 <alt_msgdma_open>
  dev_ptr[2] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_2_DMA_CSR_NAME);
80080880:	01200274 	movhi	r4,32777
80080884:	21197b04 	addi	r4,r4,26092
  ////////////////////////////////////////////

  printf("Initializing DATA transfer to ethernet...\n");

  dev_ptr[0] = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);
  dev_ptr[1] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_1_DMA_CSR_NAME);
80080888:	a0800115 	stw	r2,4(r20)
  dev_ptr[2] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_2_DMA_CSR_NAME);
8008088c:	00948240 	call	80094824 <alt_msgdma_open>
  dev_ptr[3] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_3_DMA_CSR_NAME);
80080890:	01200274 	movhi	r4,32777
80080894:	21198404 	addi	r4,r4,26128

  printf("Initializing DATA transfer to ethernet...\n");

  dev_ptr[0] = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);
  dev_ptr[1] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_1_DMA_CSR_NAME);
  dev_ptr[2] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_2_DMA_CSR_NAME);
80080898:	a0800215 	stw	r2,8(r20)
  dev_ptr[3] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_3_DMA_CSR_NAME);
8008089c:	00948240 	call	80094824 <alt_msgdma_open>
  dev_ptr[4] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_4_DMA_CSR_NAME);
800808a0:	01200274 	movhi	r4,32777
800808a4:	21198d04 	addi	r4,r4,26164
  printf("Initializing DATA transfer to ethernet...\n");

  dev_ptr[0] = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);
  dev_ptr[1] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_1_DMA_CSR_NAME);
  dev_ptr[2] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_2_DMA_CSR_NAME);
  dev_ptr[3] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_3_DMA_CSR_NAME);
800808a8:	a0800315 	stw	r2,12(r20)
  dev_ptr[4] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_4_DMA_CSR_NAME);
800808ac:	00948240 	call	80094824 <alt_msgdma_open>
  ISR_transfer_flag = 0;

  //INIT DETECTORS
  for(int i = 0; i < ndet; ++i) {
    addr_update[i] =1;
    ninterrupt[i]  =1;
800808b0:	00c00044 	movi	r3,1
800808b4:	e0ffee15 	stw	r3,-72(fp)
800808b8:	e0ffef15 	stw	r3,-68(fp)
800808bc:	e0fff015 	stw	r3,-64(fp)
800808c0:	e0fff115 	stw	r3,-60(fp)
800808c4:	e0fff215 	stw	r3,-56(fp)
  //NOTE: TO BE CHANGED!!!!!!!!!!!
  //18-june-2020 I am testing the writing process in the right ram addresses,
  //but i still have only 2 DMA interfaces and 2 eth ports: dev_ptr and a_descriptor_ptr cannot be changed.

  rd_adr_p[0] = (alt_u32 *) addressRAM0_0;
  rd_adr_p[1] = (alt_u32 *) addressRAM0_1;
800808c8:	d0e00d17 	ldw	r3,-32716(gp)


  //-----------------MAIN SEND LOOP AFTER THIS LINE----------------------------


  len=1024;
800808cc:	01010004 	movi	r4,1024

  //NOTE: TO BE CHANGED!!!!!!!!!!!
  //18-june-2020 I am testing the writing process in the right ram addresses,
  //but i still have only 2 DMA interfaces and 2 eth ports: dev_ptr and a_descriptor_ptr cannot be changed.

  rd_adr_p[0] = (alt_u32 *) addressRAM0_0;
800808d0:	d1600e17 	ldw	r5,-32712(gp)
  rd_adr_p[1] = (alt_u32 *) addressRAM0_1;
800808d4:	88c00115 	stw	r3,4(r17)
  rd_adr_p[2] = (alt_u32 *) addressRAM0_2;
800808d8:	d0e00c17 	ldw	r3,-32720(gp)


  //-----------------MAIN SEND LOOP AFTER THIS LINE----------------------------


  len=1024;
800808dc:	d1200915 	stw	r4,-32732(gp)
800808e0:	01004074 	movhi	r4,257
  //18-june-2020 I am testing the writing process in the right ram addresses,
  //but i still have only 2 DMA interfaces and 2 eth ports: dev_ptr and a_descriptor_ptr cannot be changed.

  rd_adr_p[0] = (alt_u32 *) addressRAM0_0;
  rd_adr_p[1] = (alt_u32 *) addressRAM0_1;
  rd_adr_p[2] = (alt_u32 *) addressRAM0_2;
800808e4:	88c00215 	stw	r3,8(r17)

  rd_adr_p[3] = (alt_u32 *) addressRAM1_0;
800808e8:	d0e00b17 	ldw	r3,-32724(gp)
800808ec:	21004044 	addi	r4,r4,257
800808f0:	e13ff315 	stw	r4,-52(fp)
800808f4:	88c00315 	stw	r3,12(r17)
  rd_adr_p[4] = (alt_u32 *) addressRAM1_1;
800808f8:	d0e00a17 	ldw	r3,-32728(gp)
800808fc:	01000044 	movi	r4,1
80080900:	e13ff405 	stb	r4,-48(fp)

  //NOTE: TO BE CHANGED!!!!!!!!!!!
  //18-june-2020 I am testing the writing process in the right ram addresses,
  //but i still have only 2 DMA interfaces and 2 eth ports: dev_ptr and a_descriptor_ptr cannot be changed.

  rd_adr_p[0] = (alt_u32 *) addressRAM0_0;
80080904:	89400015 	stw	r5,0(r17)
  rd_adr_p[1] = (alt_u32 *) addressRAM0_1;
  rd_adr_p[2] = (alt_u32 *) addressRAM0_2;

  rd_adr_p[3] = (alt_u32 *) addressRAM1_0;
  rd_adr_p[4] = (alt_u32 *) addressRAM1_1;
80080908:	88c00415 	stw	r3,16(r17)

  dev_ptr[0] = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);
  dev_ptr[1] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_1_DMA_CSR_NAME);
  dev_ptr[2] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_2_DMA_CSR_NAME);
  dev_ptr[3] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_3_DMA_CSR_NAME);
  dev_ptr[4] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_4_DMA_CSR_NAME);
8008090c:	a0800415 	stw	r2,16(r20)
  alt_u32 gdiv4 = 1024;

  alt_u8  addr_update[ndet];
  alt_u32 ninterrupt[ndet];

  ISR_transfer_flag = 0;
80080910:	d0277e05 	stb	zero,-25096(gp)
  rd_adr_p[2] = (alt_u32 *) addressRAM0_2;

  rd_adr_p[3] = (alt_u32 *) addressRAM1_0;
  rd_adr_p[4] = (alt_u32 *) addressRAM1_1;

  printf("Port 0 - CHOD   : First init from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[0],g,IORD_32DIRECT(DDR2_RAM_BASE,addressRAM0_0));
80080914:	29c00037 	ldwio	r7,0(r5)
80080918:	01200274 	movhi	r4,32777
8008091c:	21199604 	addi	r4,r4,26200
80080920:	01840004 	movi	r6,4096
80080924:	0081a640 	call	80081a64 <printf>
  printf("Port 1 - RICH   : First init from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[1],g,IORD_32DIRECT(DDR2_RAM_BASE,addressRAM0_1));
80080928:	d0a00d17 	ldw	r2,-32716(gp)
8008092c:	11c00037 	ldwio	r7,0(r2)
80080930:	01200274 	movhi	r4,32777
80080934:	89400117 	ldw	r5,4(r17)
80080938:	2119a704 	addi	r4,r4,26268
8008093c:	01840004 	movi	r6,4096
80080940:	0081a640 	call	80081a64 <printf>
  printf("Port 2 - LKr    : First init from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[2],g,IORD_32DIRECT(DDR2_RAM_BASE,addressRAM0_2));
80080944:	d0a00c17 	ldw	r2,-32720(gp)
80080948:	11c00037 	ldwio	r7,0(r2)
8008094c:	01200274 	movhi	r4,32777
80080950:	89400217 	ldw	r5,8(r17)
80080954:	2119b804 	addi	r4,r4,26336
80080958:	01840004 	movi	r6,4096
8008095c:	0081a640 	call	80081a64 <printf>
  printf("Port 3 - MUV3   : First init from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[3],g,IORD_32DIRECT(DDR2_RAM_1_BASE,addressRAM1_0));
80080960:	d0a00b17 	ldw	r2,-32724(gp)
80080964:	04900034 	movhi	r18,16384
80080968:	1485883a 	add	r2,r2,r18
8008096c:	11c00037 	ldwio	r7,0(r2)
80080970:	01200274 	movhi	r4,32777
80080974:	89400317 	ldw	r5,12(r17)
80080978:	2119c904 	addi	r4,r4,26404
8008097c:	01840004 	movi	r6,4096
80080980:	0081a640 	call	80081a64 <printf>
  printf("Port 4 - NewCHOD: First init from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[4],g,IORD_32DIRECT(DDR2_RAM_1_BASE,addressRAM1_1));
80080984:	d0a00a17 	ldw	r2,-32728(gp)
80080988:	14a5883a 	add	r18,r2,r18
8008098c:	91c00037 	ldwio	r7,0(r18)
80080990:	01200274 	movhi	r4,32777
80080994:	89400417 	ldw	r5,16(r17)
80080998:	2119da04 	addi	r4,r4,26472
8008099c:	01840004 	movi	r6,4096
800809a0:	0081a640 	call	80081a64 <printf>

  ////RAM 0
  for(int i =0; i<1; ++i) {
    if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[i], a_descriptor_ptr[i], rd_adr_p[i], g, control)==-EINVAL) printf("Port %d - invalid arg\n",i);
800809a4:	d0a77f17 	ldw	r2,-25092(gp)
800809a8:	89800017 	ldw	r6,0(r17)
800809ac:	b1400017 	ldw	r5,0(r22)
800809b0:	a1000017 	ldw	r4,0(r20)
800809b4:	01c40004 	movi	r7,4096
800809b8:	d8800015 	stw	r2,0(sp)
800809bc:	00938b00 	call	800938b0 <alt_msgdma_construct_standard_mm_to_st_descriptor>
800809c0:	00fffa84 	movi	r3,-22
800809c4:	10c0041e 	bne	r2,r3,800809d8 <main+0x6c8>
800809c8:	01200274 	movhi	r4,32777
800809cc:	2119f804 	addi	r4,r4,26592
800809d0:	000b883a 	mov	r5,zero
800809d4:	0081a640 	call	80081a64 <printf>
    status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[i],a_descriptor_ptr[i]);
800809d8:	b1400017 	ldw	r5,0(r22)
800809dc:	a1000017 	ldw	r4,0(r20)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
800809e0:	05c00344 	movi	r23,13
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
800809e4:	05400284 	movi	r21,10
  printf("Port 4 - NewCHOD: First init from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[4],g,IORD_32DIRECT(DDR2_RAM_1_BASE,addressRAM1_1));

  ////RAM 0
  for(int i =0; i<1; ++i) {
    if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[i], a_descriptor_ptr[i], rd_adr_p[i], g, control)==-EINVAL) printf("Port %d - invalid arg\n",i);
    status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[i],a_descriptor_ptr[i]);
800809e8:	0094a3c0 	call	80094a3c <alt_msgdma_standard_descriptor_async_transfer>
    printf ("Port %d status: %d\n",i, (int)status);
800809ec:	01200274 	movhi	r4,32777
800809f0:	100d883a 	mov	r6,r2
800809f4:	2119fe04 	addi	r4,r4,26616
800809f8:	000b883a 	mov	r5,zero
  printf("Port 4 - NewCHOD: First init from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[4],g,IORD_32DIRECT(DDR2_RAM_1_BASE,addressRAM1_1));

  ////RAM 0
  for(int i =0; i<1; ++i) {
    if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[i], a_descriptor_ptr[i], rd_adr_p[i], g, control)==-EINVAL) printf("Port %d - invalid arg\n",i);
    status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[i],a_descriptor_ptr[i]);
800809fc:	d0a00815 	stw	r2,-32736(gp)
    printf ("Port %d status: %d\n",i, (int)status);
80080a00:	0081a640 	call	80081a64 <printf>
  }

  printf("FIFOUSEDW0 %d\n",*FIFOUSEDW0);
80080a04:	d0a00517 	ldw	r2,-32748(gp)
80080a08:	01200274 	movhi	r4,32777
80080a0c:	211a0304 	addi	r4,r4,26636
80080a10:	11400017 	ldw	r5,0(r2)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080a14:	04c000c4 	movi	r19,3
  printf(" Are you ready to start the burst? ");

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
    if(entry[0] == 'y') {
80080a18:	04801e44 	movi	r18,121
    if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[i], a_descriptor_ptr[i], rd_adr_p[i], g, control)==-EINVAL) printf("Port %d - invalid arg\n",i);
    status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[i],a_descriptor_ptr[i]);
    printf ("Port %d status: %d\n",i, (int)status);
  }

  printf("FIFOUSEDW0 %d\n",*FIFOUSEDW0);
80080a1c:	0081a640 	call	80081a64 <printf>
  printf("FIFOUSEDW1 %d\n",*FIFOUSEDW1);
80080a20:	d0a00417 	ldw	r2,-32752(gp)
80080a24:	01200274 	movhi	r4,32777
80080a28:	211a0704 	addi	r4,r4,26652
80080a2c:	11400017 	ldw	r5,0(r2)
80080a30:	0081a640 	call	80081a64 <printf>
  printf("FIFOUSEDW2 %d\n",*FIFOUSEDW2);
80080a34:	d0a00317 	ldw	r2,-32756(gp)
80080a38:	01200274 	movhi	r4,32777
80080a3c:	211a0b04 	addi	r4,r4,26668
80080a40:	11400017 	ldw	r5,0(r2)
80080a44:	0081a640 	call	80081a64 <printf>
  printf("FIFOUSEDW3 %d\n",*FIFOUSEDW3);
80080a48:	d0a00217 	ldw	r2,-32760(gp)
80080a4c:	01200274 	movhi	r4,32777
80080a50:	211a0f04 	addi	r4,r4,26684
80080a54:	11400017 	ldw	r5,0(r2)
80080a58:	0081a640 	call	80081a64 <printf>
  printf("FIFOUSEDW4 %d\n",*FIFOUSEDW4);
80080a5c:	d0a00117 	ldw	r2,-32764(gp)
80080a60:	01200274 	movhi	r4,32777
80080a64:	211a1304 	addi	r4,r4,26700
80080a68:	11400017 	ldw	r5,0(r2)
80080a6c:	0081a640 	call	80081a64 <printf>

  printf(" Are you ready to start the burst? ");
80080a70:	01200274 	movhi	r4,32777
80080a74:	211a1704 	addi	r4,r4,26716
80080a78:	0081a640 	call	80081a64 <printf>

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
80080a7c:	d0a01017 	ldw	r2,-32704(gp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080a80:	0007883a 	mov	r3,zero
  printf("FIFOUSEDW4 %d\n",*FIFOUSEDW4);

  printf(" Are you ready to start the burst? ");

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
80080a84:	11400117 	ldw	r5,4(r2)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080a88:	2809883a 	mov	r4,r5
80080a8c:	e0fff715 	stw	r3,-36(fp)
80080a90:	e17ff615 	stw	r5,-40(fp)
80080a94:	00819ac0 	call	800819ac <getc>
	{
	  entry[i] = ch;
80080a98:	e0fff717 	ldw	r3,-36(fp)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080a9c:	e17ff617 	ldw	r5,-40(fp)
	{
	  entry[i] = ch;
80080aa0:	80c9883a 	add	r4,r16,r3
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080aa4:	15c00326 	beq	r2,r23,80080ab4 <main+0x7a4>
	{
	  entry[i] = ch;
80080aa8:	20800005 	stb	r2,0(r4)
	  i++;
80080aac:	18c00044 	addi	r3,r3,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080ab0:	15400126 	beq	r2,r21,80080ab8 <main+0x7a8>
80080ab4:	98fff40e 	bge	r19,r3,80080a88 <main+0x778>

  printf(" Are you ready to start the burst? ");

  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
80080ab8:	d1678007 	ldb	r5,-25088(gp)
80080abc:	01200274 	movhi	r4,32777
80080ac0:	2118a104 	addi	r4,r4,25220
80080ac4:	0081a640 	call	80081a64 <printf>
    if(entry[0] == 'y') {
80080ac8:	d0a78007 	ldb	r2,-25088(gp)
80080acc:	14bfeb1e 	bne	r2,r18,80080a7c <main+0x76c>
80080ad0:	d4e78c17 	ldw	r19,-25040(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80080ad4:	d0a78b17 	ldw	r2,-25044(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80080ad8:	d2278c17 	ldw	r8,-25040(gp)
80080adc:	d1678c17 	ldw	r5,-25040(gp)
  }

  alt_u32 SOB = alt_nticks() * alt_ticks_per_second();
  alt_u32 EOB = alt_nticks() * alt_ticks_per_second();

  printf("SOB, time: %lu \n",alt_nticks()* alt_ticks_per_second());
80080ae0:	01200274 	movhi	r4,32777
80080ae4:	211a2004 	addi	r4,r4,26752
80080ae8:	288b383a 	mul	r5,r5,r2
    if(entry[0] == 'y') {
      break;
    }
  }

  alt_u32 SOB = alt_nticks() * alt_ticks_per_second();
80080aec:	98a7383a 	mul	r19,r19,r2
  alt_u32 EOB = alt_nticks() * alt_ticks_per_second();
80080af0:	40af383a 	mul	r23,r8,r2

  printf("SOB, time: %lu \n",alt_nticks()* alt_ticks_per_second());
80080af4:	0081a640 	call	80081a64 <printf>

  IOWR(CTRL_SIG_BASE,0,1); //SOB
80080af8:	00a00434 	movhi	r2,32784
80080afc:	04800044 	movi	r18,1
80080b00:	10845404 	addi	r2,r2,4432
80080b04:	14800035 	stwio	r18,0(r2)
80080b08:	e57fee17 	ldw	r21,-72(fp)
80080b0c:	bcefc83a 	sub	r23,r23,r19

  while(1) {
    if(EOB-SOB > 6.5e6) break;
80080b10:	b809883a 	mov	r4,r23
80080b14:	00818300 	call	80081830 <__floatunsidf>
80080b18:	01d05674 	movhi	r7,16729
80080b1c:	39f2ea04 	addi	r7,r7,-13400
80080b20:	180b883a 	mov	r5,r3
80080b24:	000d883a 	mov	r6,zero
80080b28:	1009883a 	mov	r4,r2
80080b2c:	008103c0 	call	8008103c <__gedf2>
80080b30:	00802416 	blt	zero,r2,80080bc4 <main+0x8b4>
    //CHOD
    for(int i=0;i<1;++i) {
      if(addr_update[i]) {
80080b34:	e0bff303 	ldbu	r2,-52(fp)
80080b38:	10000d26 	beq	r2,zero,80080b70 <main+0x860>
	//Preparing new transer and waiting for ISR
	rd_adr_p[i] = rd_adr_p[i] + gdiv4;
80080b3c:	88800017 	ldw	r2,0(r17)
	alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[i], a_descriptor_ptr[i], rd_adr_p[i], g, control);
80080b40:	d0e77f17 	ldw	r3,-25092(gp)
80080b44:	b1400017 	ldw	r5,0(r22)
80080b48:	a1000017 	ldw	r4,0(r20)
    if(EOB-SOB > 6.5e6) break;
    //CHOD
    for(int i=0;i<1;++i) {
      if(addr_update[i]) {
	//Preparing new transer and waiting for ISR
	rd_adr_p[i] = rd_adr_p[i] + gdiv4;
80080b4c:	10840004 	addi	r2,r2,4096
	alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[i], a_descriptor_ptr[i], rd_adr_p[i], g, control);
80080b50:	d8c00015 	stw	r3,0(sp)
80080b54:	01c40004 	movi	r7,4096
80080b58:	100d883a 	mov	r6,r2
	addr_update[i] = 0;
	ninterrupt[i]+=1;
80080b5c:	ad400044 	addi	r21,r21,1
    if(EOB-SOB > 6.5e6) break;
    //CHOD
    for(int i=0;i<1;++i) {
      if(addr_update[i]) {
	//Preparing new transer and waiting for ISR
	rd_adr_p[i] = rd_adr_p[i] + gdiv4;
80080b60:	88800015 	stw	r2,0(r17)
	alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[i], a_descriptor_ptr[i], rd_adr_p[i], g, control);
80080b64:	00938b00 	call	800938b0 <alt_msgdma_construct_standard_mm_to_st_descriptor>
	addr_update[i] = 0;
80080b68:	e03ff305 	stb	zero,-52(fp)
	ninterrupt[i]+=1;
80080b6c:	e57fee15 	stw	r21,-72(fp)
    //  alt_msgdma_standard_descriptor_async_transfer(dev_ptr[0],a_descriptor_ptr[0]);
    //  ISR_transfer_flag &= ~(1UL << 0);
    //  addr_update[0] = 1;
    //}

    if(*(FIFOUSEDW0) < 128 && addr_update[0]==0) {
80080b70:	d0a00517 	ldw	r2,-32748(gp)
80080b74:	01c01fc4 	movi	r7,127
80080b78:	10800017 	ldw	r2,0(r2)
80080b7c:	38800436 	bltu	r7,r2,80080b90 <main+0x880>
    alt_msgdma_standard_descriptor_async_transfer(dev_ptr[0],a_descriptor_ptr[0]);
80080b80:	b1400017 	ldw	r5,0(r22)
80080b84:	a1000017 	ldw	r4,0(r20)
80080b88:	0094a3c0 	call	80094a3c <alt_msgdma_standard_descriptor_async_transfer>
       addr_update[0] = 1;
80080b8c:	e4bff305 	stb	r18,-52(fp)
80080b90:	d2278c17 	ldw	r8,-25040(gp)
    //  if((*FIFOUSEDW4)< 128 && addr_update[4]==0){ //Primitive FIFO usedw < 0x80: send new data
    //    status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[4],a_descriptor_ptr[4]);
    //     addr_update[4] = 1;
    //  }
    // }
    EOB = alt_nticks() * alt_ticks_per_second();
80080b94:	d0a78b17 	ldw	r2,-25044(gp)
80080b98:	40af383a 	mul	r23,r8,r2
    if(EOB-SOB > 6.5e6) break;
80080b9c:	bcefc83a 	sub	r23,r23,r19
80080ba0:	b809883a 	mov	r4,r23
80080ba4:	00818300 	call	80081830 <__floatunsidf>
80080ba8:	01d05674 	movhi	r7,16729
80080bac:	39f2ea04 	addi	r7,r7,-13400
80080bb0:	000d883a 	mov	r6,zero
80080bb4:	1009883a 	mov	r4,r2
80080bb8:	180b883a 	mov	r5,r3
80080bbc:	008103c0 	call	8008103c <__gedf2>
80080bc0:	00bfd30e 	bge	zero,r2,80080b10 <main+0x800>
  }
  
  IOWR(CTRL_SIG_BASE,0,0);
80080bc4:	00a00434 	movhi	r2,32784
80080bc8:	10845404 	addi	r2,r2,4432
80080bcc:	10000035 	stwio	zero,0(r2)

  printf("EOB sent: burst long %f seconds\n",(EOB-SOB)*0.000001);
80080bd0:	b809883a 	mov	r4,r23
80080bd4:	00818300 	call	80081830 <__floatunsidf>
80080bd8:	01cfac74 	movhi	r7,16049
80080bdc:	01a82db4 	movhi	r6,41142
80080be0:	39f1bdc4 	addi	r7,r7,-14601
80080be4:	31bb6344 	addi	r6,r6,-4723
80080be8:	1009883a 	mov	r4,r2
80080bec:	180b883a 	mov	r5,r3
80080bf0:	00811180 	call	80081118 <__muldf3>
80080bf4:	01200274 	movhi	r4,32777
80080bf8:	100b883a 	mov	r5,r2
80080bfc:	180d883a 	mov	r6,r3
80080c00:	211a2504 	addi	r4,r4,26772

  for(int i=0;i<ndet;++i) {
80080c04:	0023883a 	mov	r17,zero
80080c08:	04c00144 	movi	r19,5
    if(EOB-SOB > 6.5e6) break;
  }
  
  IOWR(CTRL_SIG_BASE,0,0);

  printf("EOB sent: burst long %f seconds\n",(EOB-SOB)*0.000001);
80080c0c:	0081a640 	call	80081a64 <printf>
80080c10:	e4bfee04 	addi	r18,fp,-72

  for(int i=0;i<ndet;++i) {
    printf("Port%d: ninterrupt: %d \n",i,ninterrupt[i]);
80080c14:	91800017 	ldw	r6,0(r18)
80080c18:	01200274 	movhi	r4,32777
80080c1c:	880b883a 	mov	r5,r17
80080c20:	211a2e04 	addi	r4,r4,26808
  
  IOWR(CTRL_SIG_BASE,0,0);

  printf("EOB sent: burst long %f seconds\n",(EOB-SOB)*0.000001);

  for(int i=0;i<ndet;++i) {
80080c24:	8c400044 	addi	r17,r17,1
    printf("Port%d: ninterrupt: %d \n",i,ninterrupt[i]);
80080c28:	0081a640 	call	80081a64 <printf>
80080c2c:	94800104 	addi	r18,r18,4
  
  IOWR(CTRL_SIG_BASE,0,0);

  printf("EOB sent: burst long %f seconds\n",(EOB-SOB)*0.000001);

  for(int i=0;i<ndet;++i) {
80080c30:	8cfff81e 	bne	r17,r19,80080c14 <main+0x904>
    printf("Port%d: ninterrupt: %d \n",i,ninterrupt[i]);
  }
  printf("FIFOUSEDW0 %d\n",*FIFOUSEDW0);
80080c34:	d0a00517 	ldw	r2,-32748(gp)
80080c38:	01200274 	movhi	r4,32777
80080c3c:	211a0304 	addi	r4,r4,26636
80080c40:	11400017 	ldw	r5,0(r2)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080c44:	04c00344 	movi	r19,13
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080c48:	05400284 	movi	r21,10
  printf("EOB sent: burst long %f seconds\n",(EOB-SOB)*0.000001);

  for(int i=0;i<ndet;++i) {
    printf("Port%d: ninterrupt: %d \n",i,ninterrupt[i]);
  }
  printf("FIFOUSEDW0 %d\n",*FIFOUSEDW0);
80080c4c:	0081a640 	call	80081a64 <printf>
  printf("FIFOUSEDW1 %d\n",*FIFOUSEDW1);
80080c50:	d0a00417 	ldw	r2,-32752(gp)
80080c54:	01200274 	movhi	r4,32777
80080c58:	211a0704 	addi	r4,r4,26652
80080c5c:	11400017 	ldw	r5,0(r2)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080c60:	050000c4 	movi	r20,3

  printf(" Would you like to reset?\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
    if(entry[0] == 'y') {
80080c64:	05801e44 	movi	r22,121

  for(int i=0;i<ndet;++i) {
    printf("Port%d: ninterrupt: %d \n",i,ninterrupt[i]);
  }
  printf("FIFOUSEDW0 %d\n",*FIFOUSEDW0);
  printf("FIFOUSEDW1 %d\n",*FIFOUSEDW1);
80080c68:	0081a640 	call	80081a64 <printf>
  printf("FIFOUSEDW2 %d\n",*FIFOUSEDW2);
80080c6c:	d0a00317 	ldw	r2,-32756(gp)
80080c70:	01200274 	movhi	r4,32777
80080c74:	211a0b04 	addi	r4,r4,26668
80080c78:	11400017 	ldw	r5,0(r2)
  printf(" Would you like to reset?\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
    if(entry[0] == 'y') {
      HAL_PLATFORM_RESET();
80080c7c:	05e00234 	movhi	r23,32776
  for(int i=0;i<ndet;++i) {
    printf("Port%d: ninterrupt: %d \n",i,ninterrupt[i]);
  }
  printf("FIFOUSEDW0 %d\n",*FIFOUSEDW0);
  printf("FIFOUSEDW1 %d\n",*FIFOUSEDW1);
  printf("FIFOUSEDW2 %d\n",*FIFOUSEDW2);
80080c80:	0081a640 	call	80081a64 <printf>
  printf("FIFOUSEDW3 %d\n",*FIFOUSEDW3);
80080c84:	d0a00217 	ldw	r2,-32760(gp)
80080c88:	01200274 	movhi	r4,32777
80080c8c:	211a0f04 	addi	r4,r4,26684
80080c90:	11400017 	ldw	r5,0(r2)
80080c94:	0081a640 	call	80081a64 <printf>
  printf("FIFOUSEDW4 %d\n",*FIFOUSEDW4);
80080c98:	d0a00117 	ldw	r2,-32764(gp)
80080c9c:	01200274 	movhi	r4,32777
80080ca0:	211a1304 	addi	r4,r4,26700
80080ca4:	11400017 	ldw	r5,0(r2)
80080ca8:	0081a640 	call	80081a64 <printf>

  printf(" Would you like to reset?\n ");
80080cac:	01200274 	movhi	r4,32777
80080cb0:	211a3504 	addi	r4,r4,26836
80080cb4:	0081a640 	call	80081a64 <printf>
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
80080cb8:	d0a01017 	ldw	r2,-32704(gp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080cbc:	0023883a 	mov	r17,zero
  printf("FIFOUSEDW3 %d\n",*FIFOUSEDW3);
  printf("FIFOUSEDW4 %d\n",*FIFOUSEDW4);

  printf(" Would you like to reset?\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
80080cc0:	14800117 	ldw	r18,4(r2)
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080cc4:	9009883a 	mov	r4,r18
80080cc8:	00819ac0 	call	800819ac <getc>
	{
	  entry[i] = ch;
80080ccc:	8447883a 	add	r3,r16,r17
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
    {
      if( (ch = getc(stream)) != '\r')
80080cd0:	14c00326 	beq	r2,r19,80080ce0 <main+0x9d0>
	{
	  entry[i] = ch;
80080cd4:	18800005 	stb	r2,0(r3)
	  i++;
80080cd8:	8c400044 	addi	r17,r17,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
80080cdc:	15400126 	beq	r2,r21,80080ce4 <main+0x9d4>
80080ce0:	a47ff80e 	bge	r20,r17,80080cc4 <main+0x9b4>
  printf("FIFOUSEDW4 %d\n",*FIFOUSEDW4);

  printf(" Would you like to reset?\n ");
  while(1) {
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);
80080ce4:	d1678007 	ldb	r5,-25088(gp)
80080ce8:	01200274 	movhi	r4,32777
80080cec:	2118a104 	addi	r4,r4,25220
80080cf0:	0081a640 	call	80081a64 <printf>
    if(entry[0] == 'y') {
80080cf4:	d0a78007 	ldb	r2,-25088(gp)
80080cf8:	15bfef1e 	bne	r2,r22,80080cb8 <main+0x9a8>
      HAL_PLATFORM_RESET();
80080cfc:	0001703a 	wrctl	status,zero
80080d00:	000170fa 	wrctl	ienable,zero
80080d04:	b83ee83a 	callr	r23
80080d08:	003feb06 	br	80080cb8 <main+0x9a8>




  if(entry[0] == 'y') {
    printf("OK! cleaning RAM0...\n ");
80080d0c:	01200274 	movhi	r4,32777
80080d10:	2118b404 	addi	r4,r4,25296
80080d14:	0081a640 	call	80081a64 <printf>

    for (unsigned int i = 0x0; i < DDR2_RAM_SPAN; i+=4)
80080d18:	0025883a 	mov	r18,zero
80080d1c:	00900034 	movhi	r2,16384
      {
	IOWR_32DIRECT(DDR2_RAM_BASE, i,0x0);
80080d20:	90000035 	stwio	zero,0(r18)


  if(entry[0] == 'y') {
    printf("OK! cleaning RAM0...\n ");

    for (unsigned int i = 0x0; i < DDR2_RAM_SPAN; i+=4)
80080d24:	94800104 	addi	r18,r18,4
80080d28:	90bffd1e 	bne	r18,r2,80080d20 <main+0xa10>
      {
	IOWR_32DIRECT(DDR2_RAM_BASE, i,0x0);
      }

    printf("OK! cleaning RAM1...\n ");
80080d2c:	01200274 	movhi	r4,32777
80080d30:	2118ba04 	addi	r4,r4,25320
80080d34:	0081a640 	call	80081a64 <printf>

    for (unsigned int i = 0x0; i < DDR2_RAM_1_SPAN; i+=4)
80080d38:	00a00034 	movhi	r2,32768
      {
	IOWR_32DIRECT(DDR2_RAM_1_BASE, i,0x0);
80080d3c:	90000035 	stwio	zero,0(r18)
80080d40:	94800104 	addi	r18,r18,4
	IOWR_32DIRECT(DDR2_RAM_BASE, i,0x0);
      }

    printf("OK! cleaning RAM1...\n ");

    for (unsigned int i = 0x0; i < DDR2_RAM_1_SPAN; i+=4)
80080d44:	90bffd1e 	bne	r18,r2,80080d3c <main+0xa2c>
80080d48:	003e3306 	br	80080618 <main+0x308>
	}
      }
    }

    else if(entry[0] == '4') {
      printf("Waiting for Detector 4\n");
80080d4c:	01200274 	movhi	r4,32777
80080d50:	2118f404 	addi	r4,r4,25552
80080d54:	0081b600 	call	80081b60 <puts>


      if(dev_ptr_wr==NULL) {
80080d58:	98001426 	beq	r19,zero,80080dac <main+0xa9c>
      // alt_u32 * wr_adr_p4 = addressRAM1_1+DDR2_RAM_1_BASE;
      // alt_u32 * ram_access_ptr_wr4 = &wr_adr_p4;
      // status=0;

      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
80080d5c:	900d883a 	mov	r6,r18
80080d60:	01c04004 	movi	r7,256
80080d64:	a80b883a 	mov	r5,r21
80080d68:	9809883a 	mov	r4,r19
80080d6c:	d8000015 	stw	zero,0(sp)
80080d70:	00938580 	call	80093858 <alt_msgdma_construct_standard_st_to_mm_descriptor>
80080d74:	00fffa84 	movi	r3,-22
80080d78:	10fff826 	beq	r2,r3,80080d5c <main+0xa4c>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
80080d7c:	a80b883a 	mov	r5,r21
80080d80:	9809883a 	mov	r4,r19
80080d84:	0094a3c0 	call	80094a3c <alt_msgdma_standard_descriptor_async_transfer>
80080d88:	d0a00815 	stw	r2,-32736(gp)
	  if(status==0){
80080d8c:	1000011e 	bne	r2,zero,80080d94 <main+0xa84>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080d90:	94804004 	addi	r18,r18,256
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080d94:	b8800037 	ldwio	r2,0(r23)

	  if(detectorUnderInit!=4) {
80080d98:	01000104 	movi	r4,4
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080d9c:	d0a00705 	stb	r2,-32740(gp)

	  if(detectorUnderInit!=4) {
80080da0:	10803fcc 	andi	r2,r2,255
80080da4:	113fed26 	beq	r2,r4,80080d5c <main+0xa4c>
80080da8:	003e2506 	br	80080640 <main+0x330>
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);

    if(entry[0] == '0') {
      if(dev_ptr_wr==NULL) {
	printf("Cannot Open DMA interface\n");
80080dac:	01200274 	movhi	r4,32777
80080db0:	2118e104 	addi	r4,r4,25476
80080db4:	0081b600 	call	80081b60 <puts>
	break;
80080db8:	003e4b06 	br	800806e8 <main+0x3d8>
	}
      }
    }

    else if(entry[0] == '3') {
      printf("Waiting for Detector 3\n");
80080dbc:	01200274 	movhi	r4,32777
80080dc0:	2118ee04 	addi	r4,r4,25528
80080dc4:	0081b600 	call	80081b60 <puts>

      if(dev_ptr_wr==NULL) {
80080dc8:	983ff826 	beq	r19,zero,80080dac <main+0xa9c>
      // alt_u32 * wr_adr_p3 = addressRAM1_0+DDR2_RAM_1_BASE;
      // alt_u32 * ram_access_ptr_wr3 = &wr_adr_p3;
      //status=0;
      
      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
80080dcc:	9809883a 	mov	r4,r19
80080dd0:	900d883a 	mov	r6,r18
80080dd4:	01c04004 	movi	r7,256
80080dd8:	a80b883a 	mov	r5,r21
80080ddc:	d8000015 	stw	zero,0(sp)
80080de0:	00938580 	call	80093858 <alt_msgdma_construct_standard_st_to_mm_descriptor>
80080de4:	013ffa84 	movi	r4,-22
80080de8:	113ff826 	beq	r2,r4,80080dcc <main+0xabc>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
80080dec:	a80b883a 	mov	r5,r21
80080df0:	9809883a 	mov	r4,r19
80080df4:	0094a3c0 	call	80094a3c <alt_msgdma_standard_descriptor_async_transfer>
80080df8:	d0a00815 	stw	r2,-32736(gp)

	  if(status==0){
80080dfc:	1000011e 	bne	r2,zero,80080e04 <main+0xaf4>

	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080e00:	94804004 	addi	r18,r18,256
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080e04:	b8800037 	ldwio	r2,0(r23)
	  if(detectorUnderInit!=3){
80080e08:	01c000c4 	movi	r7,3
	  if(status==0){

	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080e0c:	d0a00705 	stb	r2,-32740(gp)
	  if(detectorUnderInit!=3){
80080e10:	10803fcc 	andi	r2,r2,255
80080e14:	11ffed26 	beq	r2,r7,80080dcc <main+0xabc>
80080e18:	003e0906 	br	80080640 <main+0x330>
	}
      }
    }
    else if(entry[0] == '1') {

      if(dev_ptr_wr==NULL) {
80080e1c:	983fe326 	beq	r19,zero,80080dac <main+0xa9c>
      // alt_u32 * wr_adr_p1 = addressRAM0_1;
      // alt_u32 * ram_access_ptr_wr1 = &wr_adr_p1;
      // status=0;

      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
80080e20:	900d883a 	mov	r6,r18
80080e24:	01c04004 	movi	r7,256
80080e28:	a80b883a 	mov	r5,r21
80080e2c:	9809883a 	mov	r4,r19
80080e30:	d8000015 	stw	zero,0(sp)
80080e34:	00938580 	call	80093858 <alt_msgdma_construct_standard_st_to_mm_descriptor>
80080e38:	00fffa84 	movi	r3,-22
80080e3c:	10fff826 	beq	r2,r3,80080e20 <main+0xb10>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
80080e40:	a80b883a 	mov	r5,r21
80080e44:	9809883a 	mov	r4,r19
80080e48:	0094a3c0 	call	80094a3c <alt_msgdma_standard_descriptor_async_transfer>
80080e4c:	d0a00815 	stw	r2,-32736(gp)
	  if(status==0){
80080e50:	1000011e 	bne	r2,zero,80080e58 <main+0xb48>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080e54:	94804004 	addi	r18,r18,256
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080e58:	b8800037 	ldwio	r2,0(r23)
	  if(detectorUnderInit!=1) {
80080e5c:	01000044 	movi	r4,1
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080e60:	d0a00705 	stb	r2,-32740(gp)
	  if(detectorUnderInit!=1) {
80080e64:	10803fcc 	andi	r2,r2,255
80080e68:	113fed26 	beq	r2,r4,80080e20 <main+0xb10>
80080e6c:	003df406 	br	80080640 <main+0x330>
	  }
	}
      }
    }
    else if(entry[0] == '2') {
      printf("Waiting for Detector 2\n");
80080e70:	01200274 	movhi	r4,32777
80080e74:	2118e804 	addi	r4,r4,25504
80080e78:	0081b600 	call	80081b60 <puts>

      if(dev_ptr_wr==NULL) {
80080e7c:	983fcb26 	beq	r19,zero,80080dac <main+0xa9c>
      // alt_u32 * wr_adr_p2 = addressRAM0_2;
      // alt_u32 * ram_access_ptr_wr2 = &wr_adr_p2;
      //status=0;
      
      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
80080e80:	01c04004 	movi	r7,256
80080e84:	900d883a 	mov	r6,r18
80080e88:	a80b883a 	mov	r5,r21
80080e8c:	9809883a 	mov	r4,r19
80080e90:	d8000015 	stw	zero,0(sp)
80080e94:	00938580 	call	80093858 <alt_msgdma_construct_standard_st_to_mm_descriptor>
80080e98:	01fffa84 	movi	r7,-22
80080e9c:	11fff826 	beq	r2,r7,80080e80 <main+0xb70>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
80080ea0:	a80b883a 	mov	r5,r21
80080ea4:	9809883a 	mov	r4,r19
80080ea8:	0094a3c0 	call	80094a3c <alt_msgdma_standard_descriptor_async_transfer>
80080eac:	d0a00815 	stw	r2,-32736(gp)
	  if(status==0){
80080eb0:	1000011e 	bne	r2,zero,80080eb8 <main+0xba8>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080eb4:	94804004 	addi	r18,r18,256
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080eb8:	b8800037 	ldwio	r2,0(r23)
	  if(detectorUnderInit!=2) {
80080ebc:	00c00084 	movi	r3,2
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  if(status==0){
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  }

	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080ec0:	d0a00705 	stb	r2,-32740(gp)
	  if(detectorUnderInit!=2) {
80080ec4:	10803fcc 	andi	r2,r2,255
80080ec8:	10ffed26 	beq	r2,r3,80080e80 <main+0xb70>
80080ecc:	003ddc06 	br	80080640 <main+0x330>
    printf("which detector you like to write into the ram (0-4)? n to skip\n");
    GetInputString( entry, sizeof(entry), stdin );
    printf("you wrote: %c\n",entry[0]);

    if(entry[0] == '0') {
      if(dev_ptr_wr==NULL) {
80080ed0:	983fb626 	beq	r19,zero,80080dac <main+0xa9c>
	printf("Cannot Open DMA interface\n");
	break;
      }

      while(1) {
	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
80080ed4:	01c04004 	movi	r7,256
80080ed8:	900d883a 	mov	r6,r18
80080edc:	a80b883a 	mov	r5,r21
80080ee0:	9809883a 	mov	r4,r19
80080ee4:	d8000015 	stw	zero,0(sp)
80080ee8:	00938580 	call	80093858 <alt_msgdma_construct_standard_st_to_mm_descriptor>
80080eec:	01fffa84 	movi	r7,-22
80080ef0:	11fff826 	beq	r2,r7,80080ed4 <main+0xbc4>
	  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
80080ef4:	a80b883a 	mov	r5,r21
80080ef8:	9809883a 	mov	r4,r19
80080efc:	0094a3c0 	call	80094a3c <alt_msgdma_standard_descriptor_async_transfer>
80080f00:	d0a00815 	stw	r2,-32736(gp)
	  if(status==0){
80080f04:	1000011e 	bne	r2,zero,80080f0c <main+0xbfc>
	    wr_adr_p+=64; //spedisco 1024 bytes: 1024
80080f08:	94804004 	addi	r18,r18,256
	  }
	  detectorUnderInit=IORD(INPUT_IO_BASE,0);
80080f0c:	b8800037 	ldwio	r2,0(r23)
80080f10:	d0a00705 	stb	r2,-32740(gp)
	  if(detectorUnderInit!=0) {
80080f14:	10803fcc 	andi	r2,r2,255
80080f18:	103fee26 	beq	r2,zero,80080ed4 <main+0xbc4>
80080f1c:	003dc806 	br	80080640 <main+0x330>

80080f20 <debug_output>:

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
80080f20:	0081a641 	jmpi	80081a64 <printf>

80080f24 <myprintf>:





int myprintf(char *format, ...){
80080f24:	deff7b04 	addi	sp,sp,-532
80080f28:	dfc08115 	stw	ra,516(sp)
80080f2c:	dc008015 	stw	r16,512(sp)
80080f30:	d9408215 	stw	r5,520(sp)
80080f34:	d9808315 	stw	r6,524(sp)
80080f38:	d9c08415 	stw	r7,528(sp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
80080f3c:	01408004 	movi	r5,512
80080f40:	200d883a 	mov	r6,r4
80080f44:	d9c08204 	addi	r7,sp,520
80080f48:	d809883a 	mov	r4,sp
80080f4c:	00862f00 	call	800862f0 <vsnprintf>

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
80080f50:	d809883a 	mov	r4,sp
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
80080f54:	1021883a 	mov	r16,r2

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
80080f58:	0081a640 	call	80081a64 <printf>
    va_end(paramList);
    
    debug_output(szText);

    return rc;    
}
80080f5c:	8005883a 	mov	r2,r16
80080f60:	dfc08117 	ldw	ra,516(sp)
80080f64:	dc008017 	ldw	r16,512(sp)
80080f68:	dec08504 	addi	sp,sp,532
80080f6c:	f800283a 	ret

80080f70 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
80080f70:	defff804 	addi	sp,sp,-32
80080f74:	dc800615 	stw	r18,24(sp)
80080f78:	dfc00715 	stw	ra,28(sp)
80080f7c:	dc400515 	stw	r17,20(sp)
80080f80:	dc000415 	stw	r16,16(sp)
80080f84:	2825883a 	mov	r18,r5
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
80080f88:	01400b0e 	bge	zero,r5,80080fb8 <myprintf_hexarray+0x48>
80080f8c:	2021883a 	mov	r16,r4
80080f90:	2163883a 	add	r17,r4,r5
        sprintf(szText, "[%02X]", *(pHex+i));
80080f94:	81800003 	ldbu	r6,0(r16)
80080f98:	01600274 	movhi	r5,32777
80080f9c:	d809883a 	mov	r4,sp
80080fa0:	295a3c04 	addi	r5,r5,26864
80080fa4:	0081c540 	call	80081c54 <sprintf>
80080fa8:	84000044 	addi	r16,r16,1
        DEBUG((szText));
80080fac:	d809883a 	mov	r4,sp
80080fb0:	0080f240 	call	80080f24 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
80080fb4:	847ff71e 	bne	r16,r17,80080f94 <myprintf_hexarray+0x24>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
}
80080fb8:	9005883a 	mov	r2,r18
80080fbc:	dfc00717 	ldw	ra,28(sp)
80080fc0:	dc800617 	ldw	r18,24(sp)
80080fc4:	dc400517 	ldw	r17,20(sp)
80080fc8:	dc000417 	ldw	r16,16(sp)
80080fcc:	dec00804 	addi	sp,sp,32
80080fd0:	f800283a 	ret

80080fd4 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
80080fd4:	defff804 	addi	sp,sp,-32
80080fd8:	dc800615 	stw	r18,24(sp)
80080fdc:	dfc00715 	stw	ra,28(sp)
80080fe0:	dc400515 	stw	r17,20(sp)
80080fe4:	dc000415 	stw	r16,16(sp)
80080fe8:	2825883a 	mov	r18,r5
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
80080fec:	01400c0e 	bge	zero,r5,80081020 <myprintf_dwordarray+0x4c>
80080ff0:	2021883a 	mov	r16,r4
80080ff4:	0023883a 	mov	r17,zero
        sprintf(szText, "[%08X]", *(pArray+i));
80080ff8:	81800017 	ldw	r6,0(r16)
80080ffc:	01600274 	movhi	r5,32777
80081000:	295a3e04 	addi	r5,r5,26872
80081004:	d809883a 	mov	r4,sp
80081008:	0081c540 	call	80081c54 <sprintf>
        DEBUG((szText));
8008100c:	d809883a 	mov	r4,sp
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
80081010:	8c400044 	addi	r17,r17,1
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
80081014:	0080f240 	call	80080f24 <myprintf>
80081018:	84000104 	addi	r16,r16,4
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
8008101c:	947ff61e 	bne	r18,r17,80080ff8 <myprintf_dwordarray+0x24>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
}
80081020:	9005883a 	mov	r2,r18
80081024:	dfc00717 	ldw	ra,28(sp)
80081028:	dc800617 	ldw	r18,24(sp)
8008102c:	dc400517 	ldw	r17,20(sp)
80081030:	dc000417 	ldw	r16,16(sp)
80081034:	dec00804 	addi	sp,sp,32
80081038:	f800283a 	ret

8008103c <__gedf2>:
8008103c:	2804d53a 	srli	r2,r5,20
80081040:	3806d53a 	srli	r3,r7,20
80081044:	02000434 	movhi	r8,16
80081048:	423fffc4 	addi	r8,r8,-1
8008104c:	1081ffcc 	andi	r2,r2,2047
80081050:	0241ffc4 	movi	r9,2047
80081054:	2a14703a 	and	r10,r5,r8
80081058:	18c1ffcc 	andi	r3,r3,2047
8008105c:	3a10703a 	and	r8,r7,r8
80081060:	280ad7fa 	srli	r5,r5,31
80081064:	380ed7fa 	srli	r7,r7,31
80081068:	12401d26 	beq	r2,r9,800810e0 <__gedf2+0xa4>
8008106c:	0241ffc4 	movi	r9,2047
80081070:	1a401226 	beq	r3,r9,800810bc <__gedf2+0x80>
80081074:	1000081e 	bne	r2,zero,80081098 <__gedf2+0x5c>
80081078:	2296b03a 	or	r11,r4,r10
8008107c:	5813003a 	cmpeq	r9,r11,zero
80081080:	1800091e 	bne	r3,zero,800810a8 <__gedf2+0x6c>
80081084:	3218b03a 	or	r12,r6,r8
80081088:	6000071e 	bne	r12,zero,800810a8 <__gedf2+0x6c>
8008108c:	0005883a 	mov	r2,zero
80081090:	5800101e 	bne	r11,zero,800810d4 <__gedf2+0x98>
80081094:	f800283a 	ret
80081098:	18000c1e 	bne	r3,zero,800810cc <__gedf2+0x90>
8008109c:	3212b03a 	or	r9,r6,r8
800810a0:	48000c26 	beq	r9,zero,800810d4 <__gedf2+0x98>
800810a4:	0013883a 	mov	r9,zero
800810a8:	39c03fcc 	andi	r7,r7,255
800810ac:	48000826 	beq	r9,zero,800810d0 <__gedf2+0x94>
800810b0:	38000926 	beq	r7,zero,800810d8 <__gedf2+0x9c>
800810b4:	00800044 	movi	r2,1
800810b8:	f800283a 	ret
800810bc:	3212b03a 	or	r9,r6,r8
800810c0:	483fec26 	beq	r9,zero,80081074 <__gedf2+0x38>
800810c4:	00bfff84 	movi	r2,-2
800810c8:	f800283a 	ret
800810cc:	39c03fcc 	andi	r7,r7,255
800810d0:	29c00626 	beq	r5,r7,800810ec <__gedf2+0xb0>
800810d4:	283ff726 	beq	r5,zero,800810b4 <__gedf2+0x78>
800810d8:	00bfffc4 	movi	r2,-1
800810dc:	f800283a 	ret
800810e0:	2292b03a 	or	r9,r4,r10
800810e4:	483fe126 	beq	r9,zero,8008106c <__gedf2+0x30>
800810e8:	003ff606 	br	800810c4 <__gedf2+0x88>
800810ec:	18bff916 	blt	r3,r2,800810d4 <__gedf2+0x98>
800810f0:	10c00316 	blt	r2,r3,80081100 <__gedf2+0xc4>
800810f4:	42bff736 	bltu	r8,r10,800810d4 <__gedf2+0x98>
800810f8:	52000326 	beq	r10,r8,80081108 <__gedf2+0xcc>
800810fc:	5200042e 	bgeu	r10,r8,80081110 <__gedf2+0xd4>
80081100:	283fec1e 	bne	r5,zero,800810b4 <__gedf2+0x78>
80081104:	003ff406 	br	800810d8 <__gedf2+0x9c>
80081108:	313ff236 	bltu	r6,r4,800810d4 <__gedf2+0x98>
8008110c:	21bffc36 	bltu	r4,r6,80081100 <__gedf2+0xc4>
80081110:	0005883a 	mov	r2,zero
80081114:	f800283a 	ret

80081118 <__muldf3>:
80081118:	defff304 	addi	sp,sp,-52
8008111c:	2804d53a 	srli	r2,r5,20
80081120:	dd800915 	stw	r22,36(sp)
80081124:	282cd7fa 	srli	r22,r5,31
80081128:	dc000315 	stw	r16,12(sp)
8008112c:	04000434 	movhi	r16,16
80081130:	dd400815 	stw	r21,32(sp)
80081134:	dc800515 	stw	r18,20(sp)
80081138:	843fffc4 	addi	r16,r16,-1
8008113c:	dfc00c15 	stw	ra,48(sp)
80081140:	df000b15 	stw	fp,44(sp)
80081144:	ddc00a15 	stw	r23,40(sp)
80081148:	dd000715 	stw	r20,28(sp)
8008114c:	dcc00615 	stw	r19,24(sp)
80081150:	dc400415 	stw	r17,16(sp)
80081154:	1481ffcc 	andi	r18,r2,2047
80081158:	2c20703a 	and	r16,r5,r16
8008115c:	b02b883a 	mov	r21,r22
80081160:	b2403fcc 	andi	r9,r22,255
80081164:	90006026 	beq	r18,zero,800812e8 <__muldf3+0x1d0>
80081168:	0081ffc4 	movi	r2,2047
8008116c:	2029883a 	mov	r20,r4
80081170:	90803626 	beq	r18,r2,8008124c <__muldf3+0x134>
80081174:	80800434 	orhi	r2,r16,16
80081178:	100490fa 	slli	r2,r2,3
8008117c:	2020d77a 	srli	r16,r4,29
80081180:	202890fa 	slli	r20,r4,3
80081184:	94bf0044 	addi	r18,r18,-1023
80081188:	80a0b03a 	or	r16,r16,r2
8008118c:	0027883a 	mov	r19,zero
80081190:	0039883a 	mov	fp,zero
80081194:	3804d53a 	srli	r2,r7,20
80081198:	382ed7fa 	srli	r23,r7,31
8008119c:	04400434 	movhi	r17,16
800811a0:	8c7fffc4 	addi	r17,r17,-1
800811a4:	1081ffcc 	andi	r2,r2,2047
800811a8:	3011883a 	mov	r8,r6
800811ac:	3c62703a 	and	r17,r7,r17
800811b0:	ba803fcc 	andi	r10,r23,255
800811b4:	10006d26 	beq	r2,zero,8008136c <__muldf3+0x254>
800811b8:	00c1ffc4 	movi	r3,2047
800811bc:	10c06526 	beq	r2,r3,80081354 <__muldf3+0x23c>
800811c0:	88c00434 	orhi	r3,r17,16
800811c4:	180690fa 	slli	r3,r3,3
800811c8:	3022d77a 	srli	r17,r6,29
800811cc:	301090fa 	slli	r8,r6,3
800811d0:	10bf0044 	addi	r2,r2,-1023
800811d4:	88e2b03a 	or	r17,r17,r3
800811d8:	000b883a 	mov	r5,zero
800811dc:	9085883a 	add	r2,r18,r2
800811e0:	2cc8b03a 	or	r4,r5,r19
800811e4:	00c003c4 	movi	r3,15
800811e8:	bdacf03a 	xor	r22,r23,r22
800811ec:	12c00044 	addi	r11,r2,1
800811f0:	19009936 	bltu	r3,r4,80081458 <__muldf3+0x340>
800811f4:	200890ba 	slli	r4,r4,2
800811f8:	00e00234 	movhi	r3,32776
800811fc:	18c48304 	addi	r3,r3,4620
80081200:	20c9883a 	add	r4,r4,r3
80081204:	20c00017 	ldw	r3,0(r4)
80081208:	1800683a 	jmp	r3
8008120c:	80081458 	cmpnei	zero,r16,8273
80081210:	8008126c 	andhi	zero,r16,8265
80081214:	8008126c 	andhi	zero,r16,8265
80081218:	80081268 	cmpgeui	zero,r16,8265
8008121c:	80081434 	orhi	zero,r16,8272
80081220:	80081434 	orhi	zero,r16,8272
80081224:	8008141c 	xori	zero,r16,8272
80081228:	80081268 	cmpgeui	zero,r16,8265
8008122c:	80081434 	orhi	zero,r16,8272
80081230:	8008141c 	xori	zero,r16,8272
80081234:	80081434 	orhi	zero,r16,8272
80081238:	80081268 	cmpgeui	zero,r16,8265
8008123c:	80081444 	addi	zero,r16,8273
80081240:	80081444 	addi	zero,r16,8273
80081244:	80081444 	addi	zero,r16,8273
80081248:	80081660 	cmpeqi	zero,r16,8281
8008124c:	2404b03a 	or	r2,r4,r16
80081250:	10006f1e 	bne	r2,zero,80081410 <__muldf3+0x2f8>
80081254:	04c00204 	movi	r19,8
80081258:	0021883a 	mov	r16,zero
8008125c:	0029883a 	mov	r20,zero
80081260:	07000084 	movi	fp,2
80081264:	003fcb06 	br	80081194 <__muldf3+0x7c>
80081268:	502d883a 	mov	r22,r10
8008126c:	00800084 	movi	r2,2
80081270:	28805726 	beq	r5,r2,800813d0 <__muldf3+0x2b8>
80081274:	008000c4 	movi	r2,3
80081278:	28816626 	beq	r5,r2,80081814 <__muldf3+0x6fc>
8008127c:	00800044 	movi	r2,1
80081280:	2881411e 	bne	r5,r2,80081788 <__muldf3+0x670>
80081284:	b02b883a 	mov	r21,r22
80081288:	0005883a 	mov	r2,zero
8008128c:	000b883a 	mov	r5,zero
80081290:	0029883a 	mov	r20,zero
80081294:	1004953a 	slli	r2,r2,20
80081298:	a8c03fcc 	andi	r3,r21,255
8008129c:	04400434 	movhi	r17,16
800812a0:	8c7fffc4 	addi	r17,r17,-1
800812a4:	180697fa 	slli	r3,r3,31
800812a8:	2c4a703a 	and	r5,r5,r17
800812ac:	288ab03a 	or	r5,r5,r2
800812b0:	28c6b03a 	or	r3,r5,r3
800812b4:	a005883a 	mov	r2,r20
800812b8:	dfc00c17 	ldw	ra,48(sp)
800812bc:	df000b17 	ldw	fp,44(sp)
800812c0:	ddc00a17 	ldw	r23,40(sp)
800812c4:	dd800917 	ldw	r22,36(sp)
800812c8:	dd400817 	ldw	r21,32(sp)
800812cc:	dd000717 	ldw	r20,28(sp)
800812d0:	dcc00617 	ldw	r19,24(sp)
800812d4:	dc800517 	ldw	r18,20(sp)
800812d8:	dc400417 	ldw	r17,16(sp)
800812dc:	dc000317 	ldw	r16,12(sp)
800812e0:	dec00d04 	addi	sp,sp,52
800812e4:	f800283a 	ret
800812e8:	2404b03a 	or	r2,r4,r16
800812ec:	2027883a 	mov	r19,r4
800812f0:	10004226 	beq	r2,zero,800813fc <__muldf3+0x2e4>
800812f4:	8000fc26 	beq	r16,zero,800816e8 <__muldf3+0x5d0>
800812f8:	8009883a 	mov	r4,r16
800812fc:	d9800215 	stw	r6,8(sp)
80081300:	d9c00015 	stw	r7,0(sp)
80081304:	da400115 	stw	r9,4(sp)
80081308:	00818d80 	call	800818d8 <__clzsi2>
8008130c:	d9800217 	ldw	r6,8(sp)
80081310:	d9c00017 	ldw	r7,0(sp)
80081314:	da400117 	ldw	r9,4(sp)
80081318:	113ffd44 	addi	r4,r2,-11
8008131c:	00c00704 	movi	r3,28
80081320:	1900ed16 	blt	r3,r4,800816d8 <__muldf3+0x5c0>
80081324:	00c00744 	movi	r3,29
80081328:	147ffe04 	addi	r17,r2,-8
8008132c:	1907c83a 	sub	r3,r3,r4
80081330:	8460983a 	sll	r16,r16,r17
80081334:	98c6d83a 	srl	r3,r19,r3
80081338:	9c68983a 	sll	r20,r19,r17
8008133c:	1c20b03a 	or	r16,r3,r16
80081340:	1080fcc4 	addi	r2,r2,1011
80081344:	00a5c83a 	sub	r18,zero,r2
80081348:	0027883a 	mov	r19,zero
8008134c:	0039883a 	mov	fp,zero
80081350:	003f9006 	br	80081194 <__muldf3+0x7c>
80081354:	3446b03a 	or	r3,r6,r17
80081358:	1800261e 	bne	r3,zero,800813f4 <__muldf3+0x2dc>
8008135c:	0023883a 	mov	r17,zero
80081360:	0011883a 	mov	r8,zero
80081364:	01400084 	movi	r5,2
80081368:	003f9c06 	br	800811dc <__muldf3+0xc4>
8008136c:	3446b03a 	or	r3,r6,r17
80081370:	18001c26 	beq	r3,zero,800813e4 <__muldf3+0x2cc>
80081374:	8800ce26 	beq	r17,zero,800816b0 <__muldf3+0x598>
80081378:	8809883a 	mov	r4,r17
8008137c:	d9800215 	stw	r6,8(sp)
80081380:	da400115 	stw	r9,4(sp)
80081384:	da800015 	stw	r10,0(sp)
80081388:	00818d80 	call	800818d8 <__clzsi2>
8008138c:	d9800217 	ldw	r6,8(sp)
80081390:	da400117 	ldw	r9,4(sp)
80081394:	da800017 	ldw	r10,0(sp)
80081398:	113ffd44 	addi	r4,r2,-11
8008139c:	00c00704 	movi	r3,28
800813a0:	1900bf16 	blt	r3,r4,800816a0 <__muldf3+0x588>
800813a4:	00c00744 	movi	r3,29
800813a8:	123ffe04 	addi	r8,r2,-8
800813ac:	1907c83a 	sub	r3,r3,r4
800813b0:	8a22983a 	sll	r17,r17,r8
800813b4:	30c6d83a 	srl	r3,r6,r3
800813b8:	3210983a 	sll	r8,r6,r8
800813bc:	1c62b03a 	or	r17,r3,r17
800813c0:	1080fcc4 	addi	r2,r2,1011
800813c4:	0085c83a 	sub	r2,zero,r2
800813c8:	000b883a 	mov	r5,zero
800813cc:	003f8306 	br	800811dc <__muldf3+0xc4>
800813d0:	b02b883a 	mov	r21,r22
800813d4:	0081ffc4 	movi	r2,2047
800813d8:	000b883a 	mov	r5,zero
800813dc:	0029883a 	mov	r20,zero
800813e0:	003fac06 	br	80081294 <__muldf3+0x17c>
800813e4:	0023883a 	mov	r17,zero
800813e8:	0011883a 	mov	r8,zero
800813ec:	01400044 	movi	r5,1
800813f0:	003f7a06 	br	800811dc <__muldf3+0xc4>
800813f4:	014000c4 	movi	r5,3
800813f8:	003f7806 	br	800811dc <__muldf3+0xc4>
800813fc:	04c00104 	movi	r19,4
80081400:	0021883a 	mov	r16,zero
80081404:	0029883a 	mov	r20,zero
80081408:	07000044 	movi	fp,1
8008140c:	003f6106 	br	80081194 <__muldf3+0x7c>
80081410:	04c00304 	movi	r19,12
80081414:	070000c4 	movi	fp,3
80081418:	003f5e06 	br	80081194 <__muldf3+0x7c>
8008141c:	01400434 	movhi	r5,16
80081420:	002b883a 	mov	r21,zero
80081424:	297fffc4 	addi	r5,r5,-1
80081428:	053fffc4 	movi	r20,-1
8008142c:	0081ffc4 	movi	r2,2047
80081430:	003f9806 	br	80081294 <__muldf3+0x17c>
80081434:	8023883a 	mov	r17,r16
80081438:	a011883a 	mov	r8,r20
8008143c:	e00b883a 	mov	r5,fp
80081440:	003f8a06 	br	8008126c <__muldf3+0x154>
80081444:	8023883a 	mov	r17,r16
80081448:	a011883a 	mov	r8,r20
8008144c:	482d883a 	mov	r22,r9
80081450:	e00b883a 	mov	r5,fp
80081454:	003f8506 	br	8008126c <__muldf3+0x154>
80081458:	a00ad43a 	srli	r5,r20,16
8008145c:	401ad43a 	srli	r13,r8,16
80081460:	a53fffcc 	andi	r20,r20,65535
80081464:	423fffcc 	andi	r8,r8,65535
80081468:	4519383a 	mul	r12,r8,r20
8008146c:	4147383a 	mul	r3,r8,r5
80081470:	6d09383a 	mul	r4,r13,r20
80081474:	600cd43a 	srli	r6,r12,16
80081478:	2b5d383a 	mul	r14,r5,r13
8008147c:	20c9883a 	add	r4,r4,r3
80081480:	310d883a 	add	r6,r6,r4
80081484:	30c0022e 	bgeu	r6,r3,80081490 <__muldf3+0x378>
80081488:	00c00074 	movhi	r3,1
8008148c:	70dd883a 	add	r14,r14,r3
80081490:	8826d43a 	srli	r19,r17,16
80081494:	8bffffcc 	andi	r15,r17,65535
80081498:	7d23383a 	mul	r17,r15,r20
8008149c:	7949383a 	mul	r4,r15,r5
800814a0:	9d29383a 	mul	r20,r19,r20
800814a4:	8814d43a 	srli	r10,r17,16
800814a8:	3012943a 	slli	r9,r6,16
800814ac:	a129883a 	add	r20,r20,r4
800814b0:	633fffcc 	andi	r12,r12,65535
800814b4:	5515883a 	add	r10,r10,r20
800814b8:	3006d43a 	srli	r3,r6,16
800814bc:	4b13883a 	add	r9,r9,r12
800814c0:	2ccb383a 	mul	r5,r5,r19
800814c4:	5100022e 	bgeu	r10,r4,800814d0 <__muldf3+0x3b8>
800814c8:	01000074 	movhi	r4,1
800814cc:	290b883a 	add	r5,r5,r4
800814d0:	802ad43a 	srli	r21,r16,16
800814d4:	843fffcc 	andi	r16,r16,65535
800814d8:	440d383a 	mul	r6,r8,r16
800814dc:	4565383a 	mul	r18,r8,r21
800814e0:	8349383a 	mul	r4,r16,r13
800814e4:	500e943a 	slli	r7,r10,16
800814e8:	3010d43a 	srli	r8,r6,16
800814ec:	5028d43a 	srli	r20,r10,16
800814f0:	2489883a 	add	r4,r4,r18
800814f4:	8abfffcc 	andi	r10,r17,65535
800814f8:	3a95883a 	add	r10,r7,r10
800814fc:	4119883a 	add	r12,r8,r4
80081500:	a169883a 	add	r20,r20,r5
80081504:	1a87883a 	add	r3,r3,r10
80081508:	6d5b383a 	mul	r13,r13,r21
8008150c:	6480022e 	bgeu	r12,r18,80081518 <__muldf3+0x400>
80081510:	01000074 	movhi	r4,1
80081514:	691b883a 	add	r13,r13,r4
80081518:	7c25383a 	mul	r18,r15,r16
8008151c:	7d4b383a 	mul	r5,r15,r21
80081520:	84cf383a 	mul	r7,r16,r19
80081524:	901ed43a 	srli	r15,r18,16
80081528:	6008d43a 	srli	r4,r12,16
8008152c:	6010943a 	slli	r8,r12,16
80081530:	394f883a 	add	r7,r7,r5
80081534:	333fffcc 	andi	r12,r6,65535
80081538:	79df883a 	add	r15,r15,r7
8008153c:	235b883a 	add	r13,r4,r13
80081540:	9d63383a 	mul	r17,r19,r21
80081544:	4309883a 	add	r4,r8,r12
80081548:	7940022e 	bgeu	r15,r5,80081554 <__muldf3+0x43c>
8008154c:	01400074 	movhi	r5,1
80081550:	8963883a 	add	r17,r17,r5
80081554:	780a943a 	slli	r5,r15,16
80081558:	91bfffcc 	andi	r6,r18,65535
8008155c:	70c7883a 	add	r3,r14,r3
80081560:	298d883a 	add	r6,r5,r6
80081564:	1a8f803a 	cmpltu	r7,r3,r10
80081568:	350b883a 	add	r5,r6,r20
8008156c:	20c7883a 	add	r3,r4,r3
80081570:	3955883a 	add	r10,r7,r5
80081574:	1909803a 	cmpltu	r4,r3,r4
80081578:	6a91883a 	add	r8,r13,r10
8008157c:	780cd43a 	srli	r6,r15,16
80081580:	2219883a 	add	r12,r4,r8
80081584:	2d0b803a 	cmpltu	r5,r5,r20
80081588:	51cf803a 	cmpltu	r7,r10,r7
8008158c:	29ceb03a 	or	r7,r5,r7
80081590:	4351803a 	cmpltu	r8,r8,r13
80081594:	610b803a 	cmpltu	r5,r12,r4
80081598:	4148b03a 	or	r4,r8,r5
8008159c:	398f883a 	add	r7,r7,r6
800815a0:	3909883a 	add	r4,r7,r4
800815a4:	1810927a 	slli	r8,r3,9
800815a8:	2449883a 	add	r4,r4,r17
800815ac:	2008927a 	slli	r4,r4,9
800815b0:	6022d5fa 	srli	r17,r12,23
800815b4:	1806d5fa 	srli	r3,r3,23
800815b8:	4252b03a 	or	r9,r8,r9
800815bc:	600a927a 	slli	r5,r12,9
800815c0:	4810c03a 	cmpne	r8,r9,zero
800815c4:	2462b03a 	or	r17,r4,r17
800815c8:	40c6b03a 	or	r3,r8,r3
800815cc:	8900402c 	andhi	r4,r17,256
800815d0:	1950b03a 	or	r8,r3,r5
800815d4:	20000726 	beq	r4,zero,800815f4 <__muldf3+0x4dc>
800815d8:	4006d07a 	srli	r3,r8,1
800815dc:	880497fa 	slli	r2,r17,31
800815e0:	4200004c 	andi	r8,r8,1
800815e4:	8822d07a 	srli	r17,r17,1
800815e8:	1a10b03a 	or	r8,r3,r8
800815ec:	1210b03a 	or	r8,r2,r8
800815f0:	5805883a 	mov	r2,r11
800815f4:	1140ffc4 	addi	r5,r2,1023
800815f8:	0140440e 	bge	zero,r5,8008170c <__muldf3+0x5f4>
800815fc:	40c001cc 	andi	r3,r8,7
80081600:	18000726 	beq	r3,zero,80081620 <__muldf3+0x508>
80081604:	40c003cc 	andi	r3,r8,15
80081608:	01000104 	movi	r4,4
8008160c:	19000426 	beq	r3,r4,80081620 <__muldf3+0x508>
80081610:	4107883a 	add	r3,r8,r4
80081614:	1a11803a 	cmpltu	r8,r3,r8
80081618:	8a23883a 	add	r17,r17,r8
8008161c:	1811883a 	mov	r8,r3
80081620:	88c0402c 	andhi	r3,r17,256
80081624:	18000426 	beq	r3,zero,80081638 <__muldf3+0x520>
80081628:	11410004 	addi	r5,r2,1024
8008162c:	00bfc034 	movhi	r2,65280
80081630:	10bfffc4 	addi	r2,r2,-1
80081634:	88a2703a 	and	r17,r17,r2
80081638:	0081ff84 	movi	r2,2046
8008163c:	117f6416 	blt	r2,r5,800813d0 <__muldf3+0x2b8>
80081640:	8828977a 	slli	r20,r17,29
80081644:	4010d0fa 	srli	r8,r8,3
80081648:	8822927a 	slli	r17,r17,9
8008164c:	2881ffcc 	andi	r2,r5,2047
80081650:	a228b03a 	or	r20,r20,r8
80081654:	880ad33a 	srli	r5,r17,12
80081658:	b02b883a 	mov	r21,r22
8008165c:	003f0d06 	br	80081294 <__muldf3+0x17c>
80081660:	8080022c 	andhi	r2,r16,8
80081664:	10000926 	beq	r2,zero,8008168c <__muldf3+0x574>
80081668:	8880022c 	andhi	r2,r17,8
8008166c:	1000071e 	bne	r2,zero,8008168c <__muldf3+0x574>
80081670:	00800434 	movhi	r2,16
80081674:	89400234 	orhi	r5,r17,8
80081678:	10bfffc4 	addi	r2,r2,-1
8008167c:	b82b883a 	mov	r21,r23
80081680:	288a703a 	and	r5,r5,r2
80081684:	4029883a 	mov	r20,r8
80081688:	003f6806 	br	8008142c <__muldf3+0x314>
8008168c:	00800434 	movhi	r2,16
80081690:	81400234 	orhi	r5,r16,8
80081694:	10bfffc4 	addi	r2,r2,-1
80081698:	288a703a 	and	r5,r5,r2
8008169c:	003f6306 	br	8008142c <__muldf3+0x314>
800816a0:	147ff604 	addi	r17,r2,-40
800816a4:	3462983a 	sll	r17,r6,r17
800816a8:	0011883a 	mov	r8,zero
800816ac:	003f4406 	br	800813c0 <__muldf3+0x2a8>
800816b0:	3009883a 	mov	r4,r6
800816b4:	d9800215 	stw	r6,8(sp)
800816b8:	da400115 	stw	r9,4(sp)
800816bc:	da800015 	stw	r10,0(sp)
800816c0:	00818d80 	call	800818d8 <__clzsi2>
800816c4:	10800804 	addi	r2,r2,32
800816c8:	da800017 	ldw	r10,0(sp)
800816cc:	da400117 	ldw	r9,4(sp)
800816d0:	d9800217 	ldw	r6,8(sp)
800816d4:	003f3006 	br	80081398 <__muldf3+0x280>
800816d8:	143ff604 	addi	r16,r2,-40
800816dc:	9c20983a 	sll	r16,r19,r16
800816e0:	0029883a 	mov	r20,zero
800816e4:	003f1606 	br	80081340 <__muldf3+0x228>
800816e8:	d9800215 	stw	r6,8(sp)
800816ec:	d9c00015 	stw	r7,0(sp)
800816f0:	da400115 	stw	r9,4(sp)
800816f4:	00818d80 	call	800818d8 <__clzsi2>
800816f8:	10800804 	addi	r2,r2,32
800816fc:	da400117 	ldw	r9,4(sp)
80081700:	d9c00017 	ldw	r7,0(sp)
80081704:	d9800217 	ldw	r6,8(sp)
80081708:	003f0306 	br	80081318 <__muldf3+0x200>
8008170c:	00c00044 	movi	r3,1
80081710:	1947c83a 	sub	r3,r3,r5
80081714:	00800e04 	movi	r2,56
80081718:	10feda16 	blt	r2,r3,80081284 <__muldf3+0x16c>
8008171c:	008007c4 	movi	r2,31
80081720:	10c01b16 	blt	r2,r3,80081790 <__muldf3+0x678>
80081724:	00800804 	movi	r2,32
80081728:	10c5c83a 	sub	r2,r2,r3
8008172c:	888a983a 	sll	r5,r17,r2
80081730:	40c8d83a 	srl	r4,r8,r3
80081734:	4084983a 	sll	r2,r8,r2
80081738:	88e2d83a 	srl	r17,r17,r3
8008173c:	2906b03a 	or	r3,r5,r4
80081740:	1004c03a 	cmpne	r2,r2,zero
80081744:	1886b03a 	or	r3,r3,r2
80081748:	188001cc 	andi	r2,r3,7
8008174c:	10000726 	beq	r2,zero,8008176c <__muldf3+0x654>
80081750:	188003cc 	andi	r2,r3,15
80081754:	01000104 	movi	r4,4
80081758:	11000426 	beq	r2,r4,8008176c <__muldf3+0x654>
8008175c:	1805883a 	mov	r2,r3
80081760:	10c00104 	addi	r3,r2,4
80081764:	1885803a 	cmpltu	r2,r3,r2
80081768:	88a3883a 	add	r17,r17,r2
8008176c:	8880202c 	andhi	r2,r17,128
80081770:	10001c26 	beq	r2,zero,800817e4 <__muldf3+0x6cc>
80081774:	b02b883a 	mov	r21,r22
80081778:	00800044 	movi	r2,1
8008177c:	000b883a 	mov	r5,zero
80081780:	0029883a 	mov	r20,zero
80081784:	003ec306 	br	80081294 <__muldf3+0x17c>
80081788:	5805883a 	mov	r2,r11
8008178c:	003f9906 	br	800815f4 <__muldf3+0x4dc>
80081790:	00bff844 	movi	r2,-31
80081794:	1145c83a 	sub	r2,r2,r5
80081798:	8888d83a 	srl	r4,r17,r2
8008179c:	00800804 	movi	r2,32
800817a0:	18801a26 	beq	r3,r2,8008180c <__muldf3+0x6f4>
800817a4:	00801004 	movi	r2,64
800817a8:	10c5c83a 	sub	r2,r2,r3
800817ac:	8884983a 	sll	r2,r17,r2
800817b0:	1204b03a 	or	r2,r2,r8
800817b4:	1004c03a 	cmpne	r2,r2,zero
800817b8:	2084b03a 	or	r2,r4,r2
800817bc:	144001cc 	andi	r17,r2,7
800817c0:	88000d1e 	bne	r17,zero,800817f8 <__muldf3+0x6e0>
800817c4:	000b883a 	mov	r5,zero
800817c8:	1028d0fa 	srli	r20,r2,3
800817cc:	b02b883a 	mov	r21,r22
800817d0:	0005883a 	mov	r2,zero
800817d4:	a468b03a 	or	r20,r20,r17
800817d8:	003eae06 	br	80081294 <__muldf3+0x17c>
800817dc:	1007883a 	mov	r3,r2
800817e0:	0023883a 	mov	r17,zero
800817e4:	880a927a 	slli	r5,r17,9
800817e8:	1805883a 	mov	r2,r3
800817ec:	8822977a 	slli	r17,r17,29
800817f0:	280ad33a 	srli	r5,r5,12
800817f4:	003ff406 	br	800817c8 <__muldf3+0x6b0>
800817f8:	10c003cc 	andi	r3,r2,15
800817fc:	01000104 	movi	r4,4
80081800:	193ff626 	beq	r3,r4,800817dc <__muldf3+0x6c4>
80081804:	0023883a 	mov	r17,zero
80081808:	003fd506 	br	80081760 <__muldf3+0x648>
8008180c:	0005883a 	mov	r2,zero
80081810:	003fe706 	br	800817b0 <__muldf3+0x698>
80081814:	00800434 	movhi	r2,16
80081818:	89400234 	orhi	r5,r17,8
8008181c:	10bfffc4 	addi	r2,r2,-1
80081820:	b02b883a 	mov	r21,r22
80081824:	288a703a 	and	r5,r5,r2
80081828:	4029883a 	mov	r20,r8
8008182c:	003eff06 	br	8008142c <__muldf3+0x314>

80081830 <__floatunsidf>:
80081830:	defffe04 	addi	sp,sp,-8
80081834:	dc000015 	stw	r16,0(sp)
80081838:	dfc00115 	stw	ra,4(sp)
8008183c:	2021883a 	mov	r16,r4
80081840:	20002226 	beq	r4,zero,800818cc <__floatunsidf+0x9c>
80081844:	00818d80 	call	800818d8 <__clzsi2>
80081848:	01010784 	movi	r4,1054
8008184c:	2089c83a 	sub	r4,r4,r2
80081850:	01810cc4 	movi	r6,1075
80081854:	310dc83a 	sub	r6,r6,r4
80081858:	00c007c4 	movi	r3,31
8008185c:	1980120e 	bge	r3,r6,800818a8 <__floatunsidf+0x78>
80081860:	00c104c4 	movi	r3,1043
80081864:	1907c83a 	sub	r3,r3,r4
80081868:	80ca983a 	sll	r5,r16,r3
8008186c:	00800434 	movhi	r2,16
80081870:	10bfffc4 	addi	r2,r2,-1
80081874:	2101ffcc 	andi	r4,r4,2047
80081878:	0021883a 	mov	r16,zero
8008187c:	288a703a 	and	r5,r5,r2
80081880:	2008953a 	slli	r4,r4,20
80081884:	00c00434 	movhi	r3,16
80081888:	18ffffc4 	addi	r3,r3,-1
8008188c:	28c6703a 	and	r3,r5,r3
80081890:	8005883a 	mov	r2,r16
80081894:	1906b03a 	or	r3,r3,r4
80081898:	dfc00117 	ldw	ra,4(sp)
8008189c:	dc000017 	ldw	r16,0(sp)
800818a0:	dec00204 	addi	sp,sp,8
800818a4:	f800283a 	ret
800818a8:	00c002c4 	movi	r3,11
800818ac:	188bc83a 	sub	r5,r3,r2
800818b0:	814ad83a 	srl	r5,r16,r5
800818b4:	00c00434 	movhi	r3,16
800818b8:	18ffffc4 	addi	r3,r3,-1
800818bc:	81a0983a 	sll	r16,r16,r6
800818c0:	2101ffcc 	andi	r4,r4,2047
800818c4:	28ca703a 	and	r5,r5,r3
800818c8:	003fed06 	br	80081880 <__floatunsidf+0x50>
800818cc:	0009883a 	mov	r4,zero
800818d0:	000b883a 	mov	r5,zero
800818d4:	003fea06 	br	80081880 <__floatunsidf+0x50>

800818d8 <__clzsi2>:
800818d8:	00bfffd4 	movui	r2,65535
800818dc:	11000536 	bltu	r2,r4,800818f4 <__clzsi2+0x1c>
800818e0:	00803fc4 	movi	r2,255
800818e4:	11000f36 	bltu	r2,r4,80081924 <__clzsi2+0x4c>
800818e8:	00800804 	movi	r2,32
800818ec:	0007883a 	mov	r3,zero
800818f0:	00000506 	br	80081908 <__clzsi2+0x30>
800818f4:	00804034 	movhi	r2,256
800818f8:	10bfffc4 	addi	r2,r2,-1
800818fc:	11000c2e 	bgeu	r2,r4,80081930 <__clzsi2+0x58>
80081900:	00800204 	movi	r2,8
80081904:	00c00604 	movi	r3,24
80081908:	20c8d83a 	srl	r4,r4,r3
8008190c:	00e00274 	movhi	r3,32777
80081910:	18da3fc4 	addi	r3,r3,26879
80081914:	1909883a 	add	r4,r3,r4
80081918:	20c00003 	ldbu	r3,0(r4)
8008191c:	10c5c83a 	sub	r2,r2,r3
80081920:	f800283a 	ret
80081924:	00800604 	movi	r2,24
80081928:	00c00204 	movi	r3,8
8008192c:	003ff606 	br	80081908 <__clzsi2+0x30>
80081930:	00800404 	movi	r2,16
80081934:	1007883a 	mov	r3,r2
80081938:	003ff306 	br	80081908 <__clzsi2+0x30>

8008193c <_getc_r>:
8008193c:	defffd04 	addi	sp,sp,-12
80081940:	dc000115 	stw	r16,4(sp)
80081944:	dfc00215 	stw	ra,8(sp)
80081948:	2021883a 	mov	r16,r4
8008194c:	20000226 	beq	r4,zero,80081958 <_getc_r+0x1c>
80081950:	20800e17 	ldw	r2,56(r4)
80081954:	10000c26 	beq	r2,zero,80081988 <_getc_r+0x4c>
80081958:	28800117 	ldw	r2,4(r5)
8008195c:	10bfffc4 	addi	r2,r2,-1
80081960:	28800115 	stw	r2,4(r5)
80081964:	10000c16 	blt	r2,zero,80081998 <_getc_r+0x5c>
80081968:	28800017 	ldw	r2,0(r5)
8008196c:	10c00044 	addi	r3,r2,1
80081970:	28c00015 	stw	r3,0(r5)
80081974:	10800003 	ldbu	r2,0(r2)
80081978:	dfc00217 	ldw	ra,8(sp)
8008197c:	dc000117 	ldw	r16,4(sp)
80081980:	dec00304 	addi	sp,sp,12
80081984:	f800283a 	ret
80081988:	d9400015 	stw	r5,0(sp)
8008198c:	00882f80 	call	800882f8 <__sinit>
80081990:	d9400017 	ldw	r5,0(sp)
80081994:	003ff006 	br	80081958 <_getc_r+0x1c>
80081998:	8009883a 	mov	r4,r16
8008199c:	dfc00217 	ldw	ra,8(sp)
800819a0:	dc000117 	ldw	r16,4(sp)
800819a4:	dec00304 	addi	sp,sp,12
800819a8:	0081b741 	jmpi	80081b74 <__srget_r>

800819ac <getc>:
800819ac:	00a002b4 	movhi	r2,32778
800819b0:	defffd04 	addi	sp,sp,-12
800819b4:	10a31204 	addi	r2,r2,-29624
800819b8:	dc400115 	stw	r17,4(sp)
800819bc:	14400017 	ldw	r17,0(r2)
800819c0:	dc000015 	stw	r16,0(sp)
800819c4:	dfc00215 	stw	ra,8(sp)
800819c8:	2021883a 	mov	r16,r4
800819cc:	88000226 	beq	r17,zero,800819d8 <getc+0x2c>
800819d0:	88800e17 	ldw	r2,56(r17)
800819d4:	10000d26 	beq	r2,zero,80081a0c <getc+0x60>
800819d8:	80800117 	ldw	r2,4(r16)
800819dc:	10bfffc4 	addi	r2,r2,-1
800819e0:	80800115 	stw	r2,4(r16)
800819e4:	10000c16 	blt	r2,zero,80081a18 <getc+0x6c>
800819e8:	80800017 	ldw	r2,0(r16)
800819ec:	10c00044 	addi	r3,r2,1
800819f0:	80c00015 	stw	r3,0(r16)
800819f4:	10800003 	ldbu	r2,0(r2)
800819f8:	dfc00217 	ldw	ra,8(sp)
800819fc:	dc400117 	ldw	r17,4(sp)
80081a00:	dc000017 	ldw	r16,0(sp)
80081a04:	dec00304 	addi	sp,sp,12
80081a08:	f800283a 	ret
80081a0c:	8809883a 	mov	r4,r17
80081a10:	00882f80 	call	800882f8 <__sinit>
80081a14:	003ff006 	br	800819d8 <getc+0x2c>
80081a18:	800b883a 	mov	r5,r16
80081a1c:	8809883a 	mov	r4,r17
80081a20:	dfc00217 	ldw	ra,8(sp)
80081a24:	dc400117 	ldw	r17,4(sp)
80081a28:	dc000017 	ldw	r16,0(sp)
80081a2c:	dec00304 	addi	sp,sp,12
80081a30:	0081b741 	jmpi	80081b74 <__srget_r>

80081a34 <_printf_r>:
80081a34:	defffd04 	addi	sp,sp,-12
80081a38:	2805883a 	mov	r2,r5
80081a3c:	dfc00015 	stw	ra,0(sp)
80081a40:	d9800115 	stw	r6,4(sp)
80081a44:	d9c00215 	stw	r7,8(sp)
80081a48:	21400217 	ldw	r5,8(r4)
80081a4c:	d9c00104 	addi	r7,sp,4
80081a50:	100d883a 	mov	r6,r2
80081a54:	0083f300 	call	80083f30 <___vfprintf_internal_r>
80081a58:	dfc00017 	ldw	ra,0(sp)
80081a5c:	dec00304 	addi	sp,sp,12
80081a60:	f800283a 	ret

80081a64 <printf>:
80081a64:	defffc04 	addi	sp,sp,-16
80081a68:	dfc00015 	stw	ra,0(sp)
80081a6c:	d9400115 	stw	r5,4(sp)
80081a70:	d9800215 	stw	r6,8(sp)
80081a74:	d9c00315 	stw	r7,12(sp)
80081a78:	00a002b4 	movhi	r2,32778
80081a7c:	10a31204 	addi	r2,r2,-29624
80081a80:	10800017 	ldw	r2,0(r2)
80081a84:	200b883a 	mov	r5,r4
80081a88:	d9800104 	addi	r6,sp,4
80081a8c:	11000217 	ldw	r4,8(r2)
80081a90:	00861280 	call	80086128 <__vfprintf_internal>
80081a94:	dfc00017 	ldw	ra,0(sp)
80081a98:	dec00404 	addi	sp,sp,16
80081a9c:	f800283a 	ret

80081aa0 <_puts_r>:
80081aa0:	defff604 	addi	sp,sp,-40
80081aa4:	dc000715 	stw	r16,28(sp)
80081aa8:	2021883a 	mov	r16,r4
80081aac:	2809883a 	mov	r4,r5
80081ab0:	dc400815 	stw	r17,32(sp)
80081ab4:	dfc00915 	stw	ra,36(sp)
80081ab8:	2823883a 	mov	r17,r5
80081abc:	0081cc00 	call	80081cc0 <strlen>
80081ac0:	10c00044 	addi	r3,r2,1
80081ac4:	d8800115 	stw	r2,4(sp)
80081ac8:	00a00274 	movhi	r2,32777
80081acc:	109a8104 	addi	r2,r2,27140
80081ad0:	d8800215 	stw	r2,8(sp)
80081ad4:	00800044 	movi	r2,1
80081ad8:	d8800315 	stw	r2,12(sp)
80081adc:	00800084 	movi	r2,2
80081ae0:	dc400015 	stw	r17,0(sp)
80081ae4:	d8c00615 	stw	r3,24(sp)
80081ae8:	dec00415 	stw	sp,16(sp)
80081aec:	d8800515 	stw	r2,20(sp)
80081af0:	80000226 	beq	r16,zero,80081afc <_puts_r+0x5c>
80081af4:	80800e17 	ldw	r2,56(r16)
80081af8:	10001426 	beq	r2,zero,80081b4c <_puts_r+0xac>
80081afc:	81400217 	ldw	r5,8(r16)
80081b00:	2880030b 	ldhu	r2,12(r5)
80081b04:	10c8000c 	andi	r3,r2,8192
80081b08:	1800061e 	bne	r3,zero,80081b24 <_puts_r+0x84>
80081b0c:	29001917 	ldw	r4,100(r5)
80081b10:	00f7ffc4 	movi	r3,-8193
80081b14:	10880014 	ori	r2,r2,8192
80081b18:	20c6703a 	and	r3,r4,r3
80081b1c:	2880030d 	sth	r2,12(r5)
80081b20:	28c01915 	stw	r3,100(r5)
80081b24:	d9800404 	addi	r6,sp,16
80081b28:	8009883a 	mov	r4,r16
80081b2c:	008877c0 	call	8008877c <__sfvwrite_r>
80081b30:	1000091e 	bne	r2,zero,80081b58 <_puts_r+0xb8>
80081b34:	00800284 	movi	r2,10
80081b38:	dfc00917 	ldw	ra,36(sp)
80081b3c:	dc400817 	ldw	r17,32(sp)
80081b40:	dc000717 	ldw	r16,28(sp)
80081b44:	dec00a04 	addi	sp,sp,40
80081b48:	f800283a 	ret
80081b4c:	8009883a 	mov	r4,r16
80081b50:	00882f80 	call	800882f8 <__sinit>
80081b54:	003fe906 	br	80081afc <_puts_r+0x5c>
80081b58:	00bfffc4 	movi	r2,-1
80081b5c:	003ff606 	br	80081b38 <_puts_r+0x98>

80081b60 <puts>:
80081b60:	00a002b4 	movhi	r2,32778
80081b64:	10a31204 	addi	r2,r2,-29624
80081b68:	200b883a 	mov	r5,r4
80081b6c:	11000017 	ldw	r4,0(r2)
80081b70:	0081aa01 	jmpi	80081aa0 <_puts_r>

80081b74 <__srget_r>:
80081b74:	defffd04 	addi	sp,sp,-12
80081b78:	dc400115 	stw	r17,4(sp)
80081b7c:	dc000015 	stw	r16,0(sp)
80081b80:	dfc00215 	stw	ra,8(sp)
80081b84:	2023883a 	mov	r17,r4
80081b88:	2821883a 	mov	r16,r5
80081b8c:	20000226 	beq	r4,zero,80081b98 <__srget_r+0x24>
80081b90:	20800e17 	ldw	r2,56(r4)
80081b94:	10001026 	beq	r2,zero,80081bd8 <__srget_r+0x64>
80081b98:	800b883a 	mov	r5,r16
80081b9c:	8809883a 	mov	r4,r17
80081ba0:	008b2900 	call	8008b290 <__srefill_r>
80081ba4:	10000e1e 	bne	r2,zero,80081be0 <__srget_r+0x6c>
80081ba8:	80c00017 	ldw	r3,0(r16)
80081bac:	80800117 	ldw	r2,4(r16)
80081bb0:	19000044 	addi	r4,r3,1
80081bb4:	10bfffc4 	addi	r2,r2,-1
80081bb8:	80800115 	stw	r2,4(r16)
80081bbc:	81000015 	stw	r4,0(r16)
80081bc0:	18800003 	ldbu	r2,0(r3)
80081bc4:	dfc00217 	ldw	ra,8(sp)
80081bc8:	dc400117 	ldw	r17,4(sp)
80081bcc:	dc000017 	ldw	r16,0(sp)
80081bd0:	dec00304 	addi	sp,sp,12
80081bd4:	f800283a 	ret
80081bd8:	00882f80 	call	800882f8 <__sinit>
80081bdc:	003fee06 	br	80081b98 <__srget_r+0x24>
80081be0:	00bfffc4 	movi	r2,-1
80081be4:	003ff706 	br	80081bc4 <__srget_r+0x50>

80081be8 <__srget>:
80081be8:	00a002b4 	movhi	r2,32778
80081bec:	10a31204 	addi	r2,r2,-29624
80081bf0:	200b883a 	mov	r5,r4
80081bf4:	11000017 	ldw	r4,0(r2)
80081bf8:	0081b741 	jmpi	80081b74 <__srget_r>

80081bfc <_sprintf_r>:
80081bfc:	deffe404 	addi	sp,sp,-112
80081c00:	2807883a 	mov	r3,r5
80081c04:	dfc01a15 	stw	ra,104(sp)
80081c08:	d9c01b15 	stw	r7,108(sp)
80081c0c:	00a00034 	movhi	r2,32768
80081c10:	10bfffc4 	addi	r2,r2,-1
80081c14:	02008204 	movi	r8,520
80081c18:	d8800215 	stw	r2,8(sp)
80081c1c:	d8800515 	stw	r2,20(sp)
80081c20:	d9c01b04 	addi	r7,sp,108
80081c24:	d80b883a 	mov	r5,sp
80081c28:	00bfffc4 	movi	r2,-1
80081c2c:	d8c00015 	stw	r3,0(sp)
80081c30:	d8c00415 	stw	r3,16(sp)
80081c34:	da00030d 	sth	r8,12(sp)
80081c38:	d880038d 	sth	r2,14(sp)
80081c3c:	0081d580 	call	80081d58 <___svfprintf_internal_r>
80081c40:	d8c00017 	ldw	r3,0(sp)
80081c44:	18000005 	stb	zero,0(r3)
80081c48:	dfc01a17 	ldw	ra,104(sp)
80081c4c:	dec01c04 	addi	sp,sp,112
80081c50:	f800283a 	ret

80081c54 <sprintf>:
80081c54:	deffe304 	addi	sp,sp,-116
80081c58:	2007883a 	mov	r3,r4
80081c5c:	dfc01a15 	stw	ra,104(sp)
80081c60:	d9801b15 	stw	r6,108(sp)
80081c64:	d9c01c15 	stw	r7,112(sp)
80081c68:	012002b4 	movhi	r4,32778
80081c6c:	21231204 	addi	r4,r4,-29624
80081c70:	21000017 	ldw	r4,0(r4)
80081c74:	00a00034 	movhi	r2,32768
80081c78:	10bfffc4 	addi	r2,r2,-1
80081c7c:	280d883a 	mov	r6,r5
80081c80:	02008204 	movi	r8,520
80081c84:	d8800215 	stw	r2,8(sp)
80081c88:	d8800515 	stw	r2,20(sp)
80081c8c:	d9c01b04 	addi	r7,sp,108
80081c90:	d80b883a 	mov	r5,sp
80081c94:	00bfffc4 	movi	r2,-1
80081c98:	d8c00015 	stw	r3,0(sp)
80081c9c:	d8c00415 	stw	r3,16(sp)
80081ca0:	da00030d 	sth	r8,12(sp)
80081ca4:	d880038d 	sth	r2,14(sp)
80081ca8:	0081d580 	call	80081d58 <___svfprintf_internal_r>
80081cac:	d8c00017 	ldw	r3,0(sp)
80081cb0:	18000005 	stb	zero,0(r3)
80081cb4:	dfc01a17 	ldw	ra,104(sp)
80081cb8:	dec01d04 	addi	sp,sp,116
80081cbc:	f800283a 	ret

80081cc0 <strlen>:
80081cc0:	208000cc 	andi	r2,r4,3
80081cc4:	10002026 	beq	r2,zero,80081d48 <strlen+0x88>
80081cc8:	20800007 	ldb	r2,0(r4)
80081ccc:	10002026 	beq	r2,zero,80081d50 <strlen+0x90>
80081cd0:	2005883a 	mov	r2,r4
80081cd4:	00000206 	br	80081ce0 <strlen+0x20>
80081cd8:	10c00007 	ldb	r3,0(r2)
80081cdc:	18001826 	beq	r3,zero,80081d40 <strlen+0x80>
80081ce0:	10800044 	addi	r2,r2,1
80081ce4:	10c000cc 	andi	r3,r2,3
80081ce8:	183ffb1e 	bne	r3,zero,80081cd8 <strlen+0x18>
80081cec:	10c00017 	ldw	r3,0(r2)
80081cf0:	01ffbff4 	movhi	r7,65279
80081cf4:	39ffbfc4 	addi	r7,r7,-257
80081cf8:	00ca303a 	nor	r5,zero,r3
80081cfc:	01a02074 	movhi	r6,32897
80081d00:	19c7883a 	add	r3,r3,r7
80081d04:	31a02004 	addi	r6,r6,-32640
80081d08:	1946703a 	and	r3,r3,r5
80081d0c:	1986703a 	and	r3,r3,r6
80081d10:	1800091e 	bne	r3,zero,80081d38 <strlen+0x78>
80081d14:	10800104 	addi	r2,r2,4
80081d18:	10c00017 	ldw	r3,0(r2)
80081d1c:	19cb883a 	add	r5,r3,r7
80081d20:	00c6303a 	nor	r3,zero,r3
80081d24:	28c6703a 	and	r3,r5,r3
80081d28:	1986703a 	and	r3,r3,r6
80081d2c:	183ff926 	beq	r3,zero,80081d14 <strlen+0x54>
80081d30:	00000106 	br	80081d38 <strlen+0x78>
80081d34:	10800044 	addi	r2,r2,1
80081d38:	10c00007 	ldb	r3,0(r2)
80081d3c:	183ffd1e 	bne	r3,zero,80081d34 <strlen+0x74>
80081d40:	1105c83a 	sub	r2,r2,r4
80081d44:	f800283a 	ret
80081d48:	2005883a 	mov	r2,r4
80081d4c:	003fe706 	br	80081cec <strlen+0x2c>
80081d50:	0005883a 	mov	r2,zero
80081d54:	f800283a 	ret

80081d58 <___svfprintf_internal_r>:
80081d58:	deffb704 	addi	sp,sp,-292
80081d5c:	dfc04815 	stw	ra,288(sp)
80081d60:	ddc04615 	stw	r23,280(sp)
80081d64:	d9402c15 	stw	r5,176(sp)
80081d68:	d9003915 	stw	r4,228(sp)
80081d6c:	302f883a 	mov	r23,r6
80081d70:	d9c02d15 	stw	r7,180(sp)
80081d74:	df004715 	stw	fp,284(sp)
80081d78:	dd804515 	stw	r22,276(sp)
80081d7c:	dd404415 	stw	r21,272(sp)
80081d80:	dd004315 	stw	r20,268(sp)
80081d84:	dcc04215 	stw	r19,264(sp)
80081d88:	dc804115 	stw	r18,260(sp)
80081d8c:	dc404015 	stw	r17,256(sp)
80081d90:	dc003f15 	stw	r16,252(sp)
80081d94:	0088e6c0 	call	80088e6c <_localeconv_r>
80081d98:	10800017 	ldw	r2,0(r2)
80081d9c:	1009883a 	mov	r4,r2
80081da0:	d8803415 	stw	r2,208(sp)
80081da4:	0081cc00 	call	80081cc0 <strlen>
80081da8:	d8c02c17 	ldw	r3,176(sp)
80081dac:	d8803815 	stw	r2,224(sp)
80081db0:	1880030b 	ldhu	r2,12(r3)
80081db4:	1080200c 	andi	r2,r2,128
80081db8:	10000226 	beq	r2,zero,80081dc4 <___svfprintf_internal_r+0x6c>
80081dbc:	18800417 	ldw	r2,16(r3)
80081dc0:	10067f26 	beq	r2,zero,800837c0 <___svfprintf_internal_r+0x1a68>
80081dc4:	dcc03917 	ldw	r19,228(sp)
80081dc8:	d8c00404 	addi	r3,sp,16
80081dcc:	05600274 	movhi	r21,32777
80081dd0:	d9001e04 	addi	r4,sp,120
80081dd4:	ad5a9284 	addi	r21,r21,27210
80081dd8:	d8c01e15 	stw	r3,120(sp)
80081ddc:	d8002015 	stw	zero,128(sp)
80081de0:	d8001f15 	stw	zero,124(sp)
80081de4:	d8003315 	stw	zero,204(sp)
80081de8:	d8003615 	stw	zero,216(sp)
80081dec:	d8003715 	stw	zero,220(sp)
80081df0:	1811883a 	mov	r8,r3
80081df4:	d8003a15 	stw	zero,232(sp)
80081df8:	d8003b15 	stw	zero,236(sp)
80081dfc:	d8002f15 	stw	zero,188(sp)
80081e00:	d9002815 	stw	r4,160(sp)
80081e04:	b8800007 	ldb	r2,0(r23)
80081e08:	10026726 	beq	r2,zero,800827a8 <___svfprintf_internal_r+0xa50>
80081e0c:	00c00944 	movi	r3,37
80081e10:	b821883a 	mov	r16,r23
80081e14:	10c0021e 	bne	r2,r3,80081e20 <___svfprintf_internal_r+0xc8>
80081e18:	00001406 	br	80081e6c <___svfprintf_internal_r+0x114>
80081e1c:	10c00326 	beq	r2,r3,80081e2c <___svfprintf_internal_r+0xd4>
80081e20:	84000044 	addi	r16,r16,1
80081e24:	80800007 	ldb	r2,0(r16)
80081e28:	103ffc1e 	bne	r2,zero,80081e1c <___svfprintf_internal_r+0xc4>
80081e2c:	85e3c83a 	sub	r17,r16,r23
80081e30:	88000e26 	beq	r17,zero,80081e6c <___svfprintf_internal_r+0x114>
80081e34:	d8c02017 	ldw	r3,128(sp)
80081e38:	d8801f17 	ldw	r2,124(sp)
80081e3c:	45c00015 	stw	r23,0(r8)
80081e40:	1c47883a 	add	r3,r3,r17
80081e44:	10800044 	addi	r2,r2,1
80081e48:	d8c02015 	stw	r3,128(sp)
80081e4c:	44400115 	stw	r17,4(r8)
80081e50:	d8801f15 	stw	r2,124(sp)
80081e54:	00c001c4 	movi	r3,7
80081e58:	18809716 	blt	r3,r2,800820b8 <___svfprintf_internal_r+0x360>
80081e5c:	42000204 	addi	r8,r8,8
80081e60:	d9402f17 	ldw	r5,188(sp)
80081e64:	2c4b883a 	add	r5,r5,r17
80081e68:	d9402f15 	stw	r5,188(sp)
80081e6c:	80800007 	ldb	r2,0(r16)
80081e70:	10009826 	beq	r2,zero,800820d4 <___svfprintf_internal_r+0x37c>
80081e74:	84400047 	ldb	r17,1(r16)
80081e78:	00bfffc4 	movi	r2,-1
80081e7c:	85c00044 	addi	r23,r16,1
80081e80:	d8002785 	stb	zero,158(sp)
80081e84:	0007883a 	mov	r3,zero
80081e88:	000f883a 	mov	r7,zero
80081e8c:	d8802915 	stw	r2,164(sp)
80081e90:	d8003115 	stw	zero,196(sp)
80081e94:	0025883a 	mov	r18,zero
80081e98:	01401604 	movi	r5,88
80081e9c:	01800244 	movi	r6,9
80081ea0:	02800a84 	movi	r10,42
80081ea4:	02401b04 	movi	r9,108
80081ea8:	bdc00044 	addi	r23,r23,1
80081eac:	88bff804 	addi	r2,r17,-32
80081eb0:	2882f036 	bltu	r5,r2,80082a74 <___svfprintf_internal_r+0xd1c>
80081eb4:	100490ba 	slli	r2,r2,2
80081eb8:	01200234 	movhi	r4,32776
80081ebc:	2107b304 	addi	r4,r4,7884
80081ec0:	1105883a 	add	r2,r2,r4
80081ec4:	10800017 	ldw	r2,0(r2)
80081ec8:	1000683a 	jmp	r2
80081ecc:	800829dc 	xori	zero,r16,8359
80081ed0:	80082a74 	orhi	zero,r16,8361
80081ed4:	80082a74 	orhi	zero,r16,8361
80081ed8:	800829d0 	cmplti	zero,r16,8359
80081edc:	80082a74 	orhi	zero,r16,8361
80081ee0:	80082a74 	orhi	zero,r16,8361
80081ee4:	80082a74 	orhi	zero,r16,8361
80081ee8:	80082a74 	orhi	zero,r16,8361
80081eec:	80082a74 	orhi	zero,r16,8361
80081ef0:	80082a74 	orhi	zero,r16,8361
80081ef4:	80082130 	cmpltui	zero,r16,8324
80081ef8:	8008290c 	andi	zero,r16,8356
80081efc:	80082a74 	orhi	zero,r16,8361
80081f00:	80082040 	call	88008204 <__alt_data_end+0x7f0b204>
80081f04:	80082158 	cmpnei	zero,r16,8325
80081f08:	80082a74 	orhi	zero,r16,8361
80081f0c:	800821cc 	andi	zero,r16,8327
80081f10:	80082198 	cmpnei	zero,r16,8326
80081f14:	80082198 	cmpnei	zero,r16,8326
80081f18:	80082198 	cmpnei	zero,r16,8326
80081f1c:	80082198 	cmpnei	zero,r16,8326
80081f20:	80082198 	cmpnei	zero,r16,8326
80081f24:	80082198 	cmpnei	zero,r16,8326
80081f28:	80082198 	cmpnei	zero,r16,8326
80081f2c:	80082198 	cmpnei	zero,r16,8326
80081f30:	80082198 	cmpnei	zero,r16,8326
80081f34:	80082a74 	orhi	zero,r16,8361
80081f38:	80082a74 	orhi	zero,r16,8361
80081f3c:	80082a74 	orhi	zero,r16,8361
80081f40:	80082a74 	orhi	zero,r16,8361
80081f44:	80082a74 	orhi	zero,r16,8361
80081f48:	80082a74 	orhi	zero,r16,8361
80081f4c:	80082a74 	orhi	zero,r16,8361
80081f50:	80082a74 	orhi	zero,r16,8361
80081f54:	80082a74 	orhi	zero,r16,8361
80081f58:	80082a74 	orhi	zero,r16,8361
80081f5c:	80082284 	addi	zero,r16,8330
80081f60:	800821d8 	cmpnei	zero,r16,8327
80081f64:	80082a74 	orhi	zero,r16,8361
80081f68:	800821d8 	cmpnei	zero,r16,8327
80081f6c:	80082a74 	orhi	zero,r16,8361
80081f70:	80082a74 	orhi	zero,r16,8361
80081f74:	80082a74 	orhi	zero,r16,8361
80081f78:	80082a74 	orhi	zero,r16,8361
80081f7c:	80082278 	rdprs	zero,r16,8329
80081f80:	80082a74 	orhi	zero,r16,8361
80081f84:	80082a74 	orhi	zero,r16,8361
80081f88:	80082340 	call	88008234 <__alt_data_end+0x7f0b234>
80081f8c:	80082a74 	orhi	zero,r16,8361
80081f90:	80082a74 	orhi	zero,r16,8361
80081f94:	80082a74 	orhi	zero,r16,8361
80081f98:	80082a74 	orhi	zero,r16,8361
80081f9c:	80082a74 	orhi	zero,r16,8361
80081fa0:	800827b0 	cmpltui	zero,r16,8350
80081fa4:	80082a74 	orhi	zero,r16,8361
80081fa8:	80082a74 	orhi	zero,r16,8361
80081fac:	80082810 	cmplti	zero,r16,8352
80081fb0:	80082a74 	orhi	zero,r16,8361
80081fb4:	80082a74 	orhi	zero,r16,8361
80081fb8:	80082a74 	orhi	zero,r16,8361
80081fbc:	80082a74 	orhi	zero,r16,8361
80081fc0:	80082a74 	orhi	zero,r16,8361
80081fc4:	80082a74 	orhi	zero,r16,8361
80081fc8:	80082a74 	orhi	zero,r16,8361
80081fcc:	80082a74 	orhi	zero,r16,8361
80081fd0:	80082a74 	orhi	zero,r16,8361
80081fd4:	80082a74 	orhi	zero,r16,8361
80081fd8:	800828c0 	call	8800828c <__alt_data_end+0x7f0b28c>
80081fdc:	800829fc 	xorhi	zero,r16,8359
80081fe0:	800821d8 	cmpnei	zero,r16,8327
80081fe4:	800821d8 	cmpnei	zero,r16,8327
80081fe8:	800821d8 	cmpnei	zero,r16,8327
80081fec:	80082a50 	cmplti	zero,r16,8361
80081ff0:	800829fc 	xorhi	zero,r16,8359
80081ff4:	80082a74 	orhi	zero,r16,8361
80081ff8:	80082a74 	orhi	zero,r16,8361
80081ffc:	80082a0c 	andi	zero,r16,8360
80082000:	80082a74 	orhi	zero,r16,8361
80082004:	80082a1c 	xori	zero,r16,8360
80082008:	800828fc 	xorhi	zero,r16,8355
8008200c:	8008204c 	andi	zero,r16,8321
80082010:	8008291c 	xori	zero,r16,8356
80082014:	80082a74 	orhi	zero,r16,8361
80082018:	80082928 	cmpgeui	zero,r16,8356
8008201c:	80082a74 	orhi	zero,r16,8361
80082020:	80082984 	addi	zero,r16,8358
80082024:	80082a74 	orhi	zero,r16,8361
80082028:	80082a74 	orhi	zero,r16,8361
8008202c:	80082994 	ori	zero,r16,8358
80082030:	d9003117 	ldw	r4,196(sp)
80082034:	d8802d15 	stw	r2,180(sp)
80082038:	0109c83a 	sub	r4,zero,r4
8008203c:	d9003115 	stw	r4,196(sp)
80082040:	94800114 	ori	r18,r18,4
80082044:	bc400007 	ldb	r17,0(r23)
80082048:	003f9706 	br	80081ea8 <___svfprintf_internal_r+0x150>
8008204c:	00800c04 	movi	r2,48
80082050:	d9002d17 	ldw	r4,180(sp)
80082054:	d9402917 	ldw	r5,164(sp)
80082058:	d8802705 	stb	r2,156(sp)
8008205c:	00801e04 	movi	r2,120
80082060:	d8802745 	stb	r2,157(sp)
80082064:	d8002785 	stb	zero,158(sp)
80082068:	20c00104 	addi	r3,r4,4
8008206c:	25000017 	ldw	r20,0(r4)
80082070:	002d883a 	mov	r22,zero
80082074:	90800094 	ori	r2,r18,2
80082078:	28028616 	blt	r5,zero,80082a94 <___svfprintf_internal_r+0xd3c>
8008207c:	00bfdfc4 	movi	r2,-129
80082080:	90a4703a 	and	r18,r18,r2
80082084:	d8c02d15 	stw	r3,180(sp)
80082088:	94800094 	ori	r18,r18,2
8008208c:	a002731e 	bne	r20,zero,80082a5c <___svfprintf_internal_r+0xd04>
80082090:	00a00274 	movhi	r2,32777
80082094:	109a8b04 	addi	r2,r2,27180
80082098:	d8803a15 	stw	r2,232(sp)
8008209c:	04401e04 	movi	r17,120
800820a0:	d8c02917 	ldw	r3,164(sp)
800820a4:	0039883a 	mov	fp,zero
800820a8:	1801d526 	beq	r3,zero,80082800 <___svfprintf_internal_r+0xaa8>
800820ac:	0029883a 	mov	r20,zero
800820b0:	002d883a 	mov	r22,zero
800820b4:	0001f106 	br	8008287c <___svfprintf_internal_r+0xb24>
800820b8:	d9402c17 	ldw	r5,176(sp)
800820bc:	d9801e04 	addi	r6,sp,120
800820c0:	9809883a 	mov	r4,r19
800820c4:	008b7440 	call	8008b744 <__ssprint_r>
800820c8:	1000081e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
800820cc:	da000404 	addi	r8,sp,16
800820d0:	003f6306 	br	80081e60 <___svfprintf_internal_r+0x108>
800820d4:	d8802017 	ldw	r2,128(sp)
800820d8:	10000426 	beq	r2,zero,800820ec <___svfprintf_internal_r+0x394>
800820dc:	d9402c17 	ldw	r5,176(sp)
800820e0:	d9003917 	ldw	r4,228(sp)
800820e4:	d9801e04 	addi	r6,sp,120
800820e8:	008b7440 	call	8008b744 <__ssprint_r>
800820ec:	d8802c17 	ldw	r2,176(sp)
800820f0:	10c0030b 	ldhu	r3,12(r2)
800820f4:	d8802f17 	ldw	r2,188(sp)
800820f8:	18c0100c 	andi	r3,r3,64
800820fc:	1805f51e 	bne	r3,zero,800838d4 <___svfprintf_internal_r+0x1b7c>
80082100:	dfc04817 	ldw	ra,288(sp)
80082104:	df004717 	ldw	fp,284(sp)
80082108:	ddc04617 	ldw	r23,280(sp)
8008210c:	dd804517 	ldw	r22,276(sp)
80082110:	dd404417 	ldw	r21,272(sp)
80082114:	dd004317 	ldw	r20,268(sp)
80082118:	dcc04217 	ldw	r19,264(sp)
8008211c:	dc804117 	ldw	r18,260(sp)
80082120:	dc404017 	ldw	r17,256(sp)
80082124:	dc003f17 	ldw	r16,252(sp)
80082128:	dec04904 	addi	sp,sp,292
8008212c:	f800283a 	ret
80082130:	d8802d17 	ldw	r2,180(sp)
80082134:	d9002d17 	ldw	r4,180(sp)
80082138:	10800017 	ldw	r2,0(r2)
8008213c:	d8803115 	stw	r2,196(sp)
80082140:	20800104 	addi	r2,r4,4
80082144:	d9003117 	ldw	r4,196(sp)
80082148:	203fb916 	blt	r4,zero,80082030 <___svfprintf_internal_r+0x2d8>
8008214c:	d8802d15 	stw	r2,180(sp)
80082150:	bc400007 	ldb	r17,0(r23)
80082154:	003f5406 	br	80081ea8 <___svfprintf_internal_r+0x150>
80082158:	bc400007 	ldb	r17,0(r23)
8008215c:	bac00044 	addi	r11,r23,1
80082160:	8a873926 	beq	r17,r10,80083e48 <___svfprintf_internal_r+0x20f0>
80082164:	88bff404 	addi	r2,r17,-48
80082168:	0009883a 	mov	r4,zero
8008216c:	30868836 	bltu	r6,r2,80083b90 <___svfprintf_internal_r+0x1e38>
80082170:	5c400007 	ldb	r17,0(r11)
80082174:	210002a4 	muli	r4,r4,10
80082178:	5dc00044 	addi	r23,r11,1
8008217c:	b817883a 	mov	r11,r23
80082180:	2089883a 	add	r4,r4,r2
80082184:	88bff404 	addi	r2,r17,-48
80082188:	30bff92e 	bgeu	r6,r2,80082170 <___svfprintf_internal_r+0x418>
8008218c:	2005d716 	blt	r4,zero,800838ec <___svfprintf_internal_r+0x1b94>
80082190:	d9002915 	stw	r4,164(sp)
80082194:	003f4506 	br	80081eac <___svfprintf_internal_r+0x154>
80082198:	b809883a 	mov	r4,r23
8008219c:	d8003115 	stw	zero,196(sp)
800821a0:	88bff404 	addi	r2,r17,-48
800821a4:	0017883a 	mov	r11,zero
800821a8:	24400007 	ldb	r17,0(r4)
800821ac:	5ac002a4 	muli	r11,r11,10
800821b0:	bdc00044 	addi	r23,r23,1
800821b4:	b809883a 	mov	r4,r23
800821b8:	12d7883a 	add	r11,r2,r11
800821bc:	88bff404 	addi	r2,r17,-48
800821c0:	30bff92e 	bgeu	r6,r2,800821a8 <___svfprintf_internal_r+0x450>
800821c4:	dac03115 	stw	r11,196(sp)
800821c8:	003f3806 	br	80081eac <___svfprintf_internal_r+0x154>
800821cc:	94802014 	ori	r18,r18,128
800821d0:	bc400007 	ldb	r17,0(r23)
800821d4:	003f3406 	br	80081ea8 <___svfprintf_internal_r+0x150>
800821d8:	18c03fcc 	andi	r3,r3,255
800821dc:	1807471e 	bne	r3,zero,80083efc <___svfprintf_internal_r+0x21a4>
800821e0:	9080020c 	andi	r2,r18,8
800821e4:	10047d26 	beq	r2,zero,800833dc <___svfprintf_internal_r+0x1684>
800821e8:	d8c02d17 	ldw	r3,180(sp)
800821ec:	d9002d17 	ldw	r4,180(sp)
800821f0:	d9402d17 	ldw	r5,180(sp)
800821f4:	18c00017 	ldw	r3,0(r3)
800821f8:	21000117 	ldw	r4,4(r4)
800821fc:	29400204 	addi	r5,r5,8
80082200:	d8c03615 	stw	r3,216(sp)
80082204:	d9003715 	stw	r4,220(sp)
80082208:	d9402d15 	stw	r5,180(sp)
8008220c:	d9003617 	ldw	r4,216(sp)
80082210:	d9403717 	ldw	r5,220(sp)
80082214:	da003e15 	stw	r8,248(sp)
80082218:	04000044 	movi	r16,1
8008221c:	008b4640 	call	8008b464 <__fpclassifyd>
80082220:	da003e17 	ldw	r8,248(sp)
80082224:	14044b1e 	bne	r2,r16,80083354 <___svfprintf_internal_r+0x15fc>
80082228:	d9003617 	ldw	r4,216(sp)
8008222c:	d9403717 	ldw	r5,220(sp)
80082230:	000d883a 	mov	r6,zero
80082234:	000f883a 	mov	r7,zero
80082238:	009094c0 	call	8009094c <__ledf2>
8008223c:	da003e17 	ldw	r8,248(sp)
80082240:	1005f316 	blt	r2,zero,80083a10 <___svfprintf_internal_r+0x1cb8>
80082244:	df002783 	ldbu	fp,158(sp)
80082248:	008011c4 	movi	r2,71
8008224c:	1445590e 	bge	r2,r17,800837b4 <___svfprintf_internal_r+0x1a5c>
80082250:	04200274 	movhi	r16,32777
80082254:	841a8304 	addi	r16,r16,27148
80082258:	00c000c4 	movi	r3,3
8008225c:	00bfdfc4 	movi	r2,-129
80082260:	d8c02a15 	stw	r3,168(sp)
80082264:	90a4703a 	and	r18,r18,r2
80082268:	d8c02e15 	stw	r3,184(sp)
8008226c:	d8002915 	stw	zero,164(sp)
80082270:	d8003215 	stw	zero,200(sp)
80082274:	00006606 	br	80082410 <___svfprintf_internal_r+0x6b8>
80082278:	94800214 	ori	r18,r18,8
8008227c:	bc400007 	ldb	r17,0(r23)
80082280:	003f0906 	br	80081ea8 <___svfprintf_internal_r+0x150>
80082284:	18c03fcc 	andi	r3,r3,255
80082288:	1807181e 	bne	r3,zero,80083eec <___svfprintf_internal_r+0x2194>
8008228c:	94800414 	ori	r18,r18,16
80082290:	9080080c 	andi	r2,r18,32
80082294:	10039626 	beq	r2,zero,800830f0 <___svfprintf_internal_r+0x1398>
80082298:	d9402d17 	ldw	r5,180(sp)
8008229c:	28800117 	ldw	r2,4(r5)
800822a0:	2d000017 	ldw	r20,0(r5)
800822a4:	29400204 	addi	r5,r5,8
800822a8:	d9402d15 	stw	r5,180(sp)
800822ac:	102d883a 	mov	r22,r2
800822b0:	10039816 	blt	r2,zero,80083114 <___svfprintf_internal_r+0x13bc>
800822b4:	d9402917 	ldw	r5,164(sp)
800822b8:	df002783 	ldbu	fp,158(sp)
800822bc:	2803ab16 	blt	r5,zero,8008316c <___svfprintf_internal_r+0x1414>
800822c0:	00ffdfc4 	movi	r3,-129
800822c4:	a584b03a 	or	r2,r20,r22
800822c8:	90e4703a 	and	r18,r18,r3
800822cc:	10014a26 	beq	r2,zero,800827f8 <___svfprintf_internal_r+0xaa0>
800822d0:	b0034b26 	beq	r22,zero,80083000 <___svfprintf_internal_r+0x12a8>
800822d4:	dc402a15 	stw	r17,168(sp)
800822d8:	dc001e04 	addi	r16,sp,120
800822dc:	b023883a 	mov	r17,r22
800822e0:	402d883a 	mov	r22,r8
800822e4:	a009883a 	mov	r4,r20
800822e8:	880b883a 	mov	r5,r17
800822ec:	01800284 	movi	r6,10
800822f0:	000f883a 	mov	r7,zero
800822f4:	008f0440 	call	8008f044 <__umoddi3>
800822f8:	10800c04 	addi	r2,r2,48
800822fc:	843fffc4 	addi	r16,r16,-1
80082300:	a009883a 	mov	r4,r20
80082304:	880b883a 	mov	r5,r17
80082308:	80800005 	stb	r2,0(r16)
8008230c:	01800284 	movi	r6,10
80082310:	000f883a 	mov	r7,zero
80082314:	008eacc0 	call	8008eacc <__udivdi3>
80082318:	1029883a 	mov	r20,r2
8008231c:	10c4b03a 	or	r2,r2,r3
80082320:	1823883a 	mov	r17,r3
80082324:	103fef1e 	bne	r2,zero,800822e4 <___svfprintf_internal_r+0x58c>
80082328:	d8c02817 	ldw	r3,160(sp)
8008232c:	dc402a17 	ldw	r17,168(sp)
80082330:	b011883a 	mov	r8,r22
80082334:	1c07c83a 	sub	r3,r3,r16
80082338:	d8c02e15 	stw	r3,184(sp)
8008233c:	00002e06 	br	800823f8 <___svfprintf_internal_r+0x6a0>
80082340:	18c03fcc 	andi	r3,r3,255
80082344:	1806e71e 	bne	r3,zero,80083ee4 <___svfprintf_internal_r+0x218c>
80082348:	94800414 	ori	r18,r18,16
8008234c:	9080080c 	andi	r2,r18,32
80082350:	1002d426 	beq	r2,zero,80082ea4 <___svfprintf_internal_r+0x114c>
80082354:	d9402d17 	ldw	r5,180(sp)
80082358:	d8c02917 	ldw	r3,164(sp)
8008235c:	d8002785 	stb	zero,158(sp)
80082360:	28800204 	addi	r2,r5,8
80082364:	2d000017 	ldw	r20,0(r5)
80082368:	2d800117 	ldw	r22,4(r5)
8008236c:	18041516 	blt	r3,zero,800833c4 <___svfprintf_internal_r+0x166c>
80082370:	013fdfc4 	movi	r4,-129
80082374:	a586b03a 	or	r3,r20,r22
80082378:	d8802d15 	stw	r2,180(sp)
8008237c:	9124703a 	and	r18,r18,r4
80082380:	1802d51e 	bne	r3,zero,80082ed8 <___svfprintf_internal_r+0x1180>
80082384:	d9402917 	ldw	r5,164(sp)
80082388:	0039883a 	mov	fp,zero
8008238c:	2806be26 	beq	r5,zero,80083e88 <___svfprintf_internal_r+0x2130>
80082390:	0029883a 	mov	r20,zero
80082394:	002d883a 	mov	r22,zero
80082398:	dc001e04 	addi	r16,sp,120
8008239c:	a006d0fa 	srli	r3,r20,3
800823a0:	b008977a 	slli	r4,r22,29
800823a4:	b02cd0fa 	srli	r22,r22,3
800823a8:	a50001cc 	andi	r20,r20,7
800823ac:	a0800c04 	addi	r2,r20,48
800823b0:	843fffc4 	addi	r16,r16,-1
800823b4:	20e8b03a 	or	r20,r4,r3
800823b8:	80800005 	stb	r2,0(r16)
800823bc:	a586b03a 	or	r3,r20,r22
800823c0:	183ff61e 	bne	r3,zero,8008239c <___svfprintf_internal_r+0x644>
800823c4:	90c0004c 	andi	r3,r18,1
800823c8:	18013926 	beq	r3,zero,800828b0 <___svfprintf_internal_r+0xb58>
800823cc:	10803fcc 	andi	r2,r2,255
800823d0:	1080201c 	xori	r2,r2,128
800823d4:	10bfe004 	addi	r2,r2,-128
800823d8:	00c00c04 	movi	r3,48
800823dc:	10c13426 	beq	r2,r3,800828b0 <___svfprintf_internal_r+0xb58>
800823e0:	80ffffc5 	stb	r3,-1(r16)
800823e4:	d8c02817 	ldw	r3,160(sp)
800823e8:	80bfffc4 	addi	r2,r16,-1
800823ec:	1021883a 	mov	r16,r2
800823f0:	1887c83a 	sub	r3,r3,r2
800823f4:	d8c02e15 	stw	r3,184(sp)
800823f8:	d8802e17 	ldw	r2,184(sp)
800823fc:	d9002917 	ldw	r4,164(sp)
80082400:	1100010e 	bge	r2,r4,80082408 <___svfprintf_internal_r+0x6b0>
80082404:	2005883a 	mov	r2,r4
80082408:	d8802a15 	stw	r2,168(sp)
8008240c:	d8003215 	stw	zero,200(sp)
80082410:	e7003fcc 	andi	fp,fp,255
80082414:	e700201c 	xori	fp,fp,128
80082418:	e73fe004 	addi	fp,fp,-128
8008241c:	e0000326 	beq	fp,zero,8008242c <___svfprintf_internal_r+0x6d4>
80082420:	d8c02a17 	ldw	r3,168(sp)
80082424:	18c00044 	addi	r3,r3,1
80082428:	d8c02a15 	stw	r3,168(sp)
8008242c:	90c0008c 	andi	r3,r18,2
80082430:	d8c02b15 	stw	r3,172(sp)
80082434:	18000326 	beq	r3,zero,80082444 <___svfprintf_internal_r+0x6ec>
80082438:	d8c02a17 	ldw	r3,168(sp)
8008243c:	18c00084 	addi	r3,r3,2
80082440:	d8c02a15 	stw	r3,168(sp)
80082444:	90c0210c 	andi	r3,r18,132
80082448:	d8c03015 	stw	r3,192(sp)
8008244c:	1801a11e 	bne	r3,zero,80082ad4 <___svfprintf_internal_r+0xd7c>
80082450:	d9003117 	ldw	r4,196(sp)
80082454:	d8c02a17 	ldw	r3,168(sp)
80082458:	20e9c83a 	sub	r20,r4,r3
8008245c:	05019d0e 	bge	zero,r20,80082ad4 <___svfprintf_internal_r+0xd7c>
80082460:	02400404 	movi	r9,16
80082464:	d8c02017 	ldw	r3,128(sp)
80082468:	d8801f17 	ldw	r2,124(sp)
8008246c:	4d051b0e 	bge	r9,r20,800838dc <___svfprintf_internal_r+0x1b84>
80082470:	01600274 	movhi	r5,32777
80082474:	295a9684 	addi	r5,r5,27226
80082478:	dc403c15 	stw	r17,240(sp)
8008247c:	d9403515 	stw	r5,212(sp)
80082480:	a023883a 	mov	r17,r20
80082484:	482d883a 	mov	r22,r9
80082488:	9029883a 	mov	r20,r18
8008248c:	070001c4 	movi	fp,7
80082490:	8025883a 	mov	r18,r16
80082494:	dc002c17 	ldw	r16,176(sp)
80082498:	00000306 	br	800824a8 <___svfprintf_internal_r+0x750>
8008249c:	8c7ffc04 	addi	r17,r17,-16
800824a0:	42000204 	addi	r8,r8,8
800824a4:	b440130e 	bge	r22,r17,800824f4 <___svfprintf_internal_r+0x79c>
800824a8:	01200274 	movhi	r4,32777
800824ac:	18c00404 	addi	r3,r3,16
800824b0:	10800044 	addi	r2,r2,1
800824b4:	211a9684 	addi	r4,r4,27226
800824b8:	41000015 	stw	r4,0(r8)
800824bc:	45800115 	stw	r22,4(r8)
800824c0:	d8c02015 	stw	r3,128(sp)
800824c4:	d8801f15 	stw	r2,124(sp)
800824c8:	e0bff40e 	bge	fp,r2,8008249c <___svfprintf_internal_r+0x744>
800824cc:	d9801e04 	addi	r6,sp,120
800824d0:	800b883a 	mov	r5,r16
800824d4:	9809883a 	mov	r4,r19
800824d8:	008b7440 	call	8008b744 <__ssprint_r>
800824dc:	103f031e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
800824e0:	8c7ffc04 	addi	r17,r17,-16
800824e4:	d8c02017 	ldw	r3,128(sp)
800824e8:	d8801f17 	ldw	r2,124(sp)
800824ec:	da000404 	addi	r8,sp,16
800824f0:	b47fed16 	blt	r22,r17,800824a8 <___svfprintf_internal_r+0x750>
800824f4:	9021883a 	mov	r16,r18
800824f8:	a025883a 	mov	r18,r20
800824fc:	8829883a 	mov	r20,r17
80082500:	dc403c17 	ldw	r17,240(sp)
80082504:	d9403517 	ldw	r5,212(sp)
80082508:	a0c7883a 	add	r3,r20,r3
8008250c:	10800044 	addi	r2,r2,1
80082510:	41400015 	stw	r5,0(r8)
80082514:	45000115 	stw	r20,4(r8)
80082518:	d8c02015 	stw	r3,128(sp)
8008251c:	d8801f15 	stw	r2,124(sp)
80082520:	010001c4 	movi	r4,7
80082524:	20829f16 	blt	r4,r2,80082fa4 <___svfprintf_internal_r+0x124c>
80082528:	df002787 	ldb	fp,158(sp)
8008252c:	42000204 	addi	r8,r8,8
80082530:	e0000c26 	beq	fp,zero,80082564 <___svfprintf_internal_r+0x80c>
80082534:	d8801f17 	ldw	r2,124(sp)
80082538:	d9002784 	addi	r4,sp,158
8008253c:	18c00044 	addi	r3,r3,1
80082540:	10800044 	addi	r2,r2,1
80082544:	41000015 	stw	r4,0(r8)
80082548:	01000044 	movi	r4,1
8008254c:	41000115 	stw	r4,4(r8)
80082550:	d8c02015 	stw	r3,128(sp)
80082554:	d8801f15 	stw	r2,124(sp)
80082558:	010001c4 	movi	r4,7
8008255c:	20823816 	blt	r4,r2,80082e40 <___svfprintf_internal_r+0x10e8>
80082560:	42000204 	addi	r8,r8,8
80082564:	d8802b17 	ldw	r2,172(sp)
80082568:	10000c26 	beq	r2,zero,8008259c <___svfprintf_internal_r+0x844>
8008256c:	d8801f17 	ldw	r2,124(sp)
80082570:	d9002704 	addi	r4,sp,156
80082574:	18c00084 	addi	r3,r3,2
80082578:	10800044 	addi	r2,r2,1
8008257c:	41000015 	stw	r4,0(r8)
80082580:	01000084 	movi	r4,2
80082584:	41000115 	stw	r4,4(r8)
80082588:	d8c02015 	stw	r3,128(sp)
8008258c:	d8801f15 	stw	r2,124(sp)
80082590:	010001c4 	movi	r4,7
80082594:	20823216 	blt	r4,r2,80082e60 <___svfprintf_internal_r+0x1108>
80082598:	42000204 	addi	r8,r8,8
8008259c:	d9003017 	ldw	r4,192(sp)
800825a0:	00802004 	movi	r2,128
800825a4:	20819726 	beq	r4,r2,80082c04 <___svfprintf_internal_r+0xeac>
800825a8:	d9402917 	ldw	r5,164(sp)
800825ac:	d8802e17 	ldw	r2,184(sp)
800825b0:	28adc83a 	sub	r22,r5,r2
800825b4:	05802f0e 	bge	zero,r22,80082674 <___svfprintf_internal_r+0x91c>
800825b8:	07000404 	movi	fp,16
800825bc:	d8801f17 	ldw	r2,124(sp)
800825c0:	e583c00e 	bge	fp,r22,800834c4 <___svfprintf_internal_r+0x176c>
800825c4:	01600274 	movhi	r5,32777
800825c8:	295a9284 	addi	r5,r5,27210
800825cc:	dc402915 	stw	r17,164(sp)
800825d0:	d9402b15 	stw	r5,172(sp)
800825d4:	b023883a 	mov	r17,r22
800825d8:	050001c4 	movi	r20,7
800825dc:	902d883a 	mov	r22,r18
800825e0:	8025883a 	mov	r18,r16
800825e4:	dc002c17 	ldw	r16,176(sp)
800825e8:	00000306 	br	800825f8 <___svfprintf_internal_r+0x8a0>
800825ec:	8c7ffc04 	addi	r17,r17,-16
800825f0:	42000204 	addi	r8,r8,8
800825f4:	e440110e 	bge	fp,r17,8008263c <___svfprintf_internal_r+0x8e4>
800825f8:	18c00404 	addi	r3,r3,16
800825fc:	10800044 	addi	r2,r2,1
80082600:	45400015 	stw	r21,0(r8)
80082604:	47000115 	stw	fp,4(r8)
80082608:	d8c02015 	stw	r3,128(sp)
8008260c:	d8801f15 	stw	r2,124(sp)
80082610:	a0bff60e 	bge	r20,r2,800825ec <___svfprintf_internal_r+0x894>
80082614:	d9801e04 	addi	r6,sp,120
80082618:	800b883a 	mov	r5,r16
8008261c:	9809883a 	mov	r4,r19
80082620:	008b7440 	call	8008b744 <__ssprint_r>
80082624:	103eb11e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082628:	8c7ffc04 	addi	r17,r17,-16
8008262c:	d8c02017 	ldw	r3,128(sp)
80082630:	d8801f17 	ldw	r2,124(sp)
80082634:	da000404 	addi	r8,sp,16
80082638:	e47fef16 	blt	fp,r17,800825f8 <___svfprintf_internal_r+0x8a0>
8008263c:	9021883a 	mov	r16,r18
80082640:	b025883a 	mov	r18,r22
80082644:	882d883a 	mov	r22,r17
80082648:	dc402917 	ldw	r17,164(sp)
8008264c:	d9002b17 	ldw	r4,172(sp)
80082650:	1d87883a 	add	r3,r3,r22
80082654:	10800044 	addi	r2,r2,1
80082658:	41000015 	stw	r4,0(r8)
8008265c:	45800115 	stw	r22,4(r8)
80082660:	d8c02015 	stw	r3,128(sp)
80082664:	d8801f15 	stw	r2,124(sp)
80082668:	010001c4 	movi	r4,7
8008266c:	2081ec16 	blt	r4,r2,80082e20 <___svfprintf_internal_r+0x10c8>
80082670:	42000204 	addi	r8,r8,8
80082674:	9080400c 	andi	r2,r18,256
80082678:	1001181e 	bne	r2,zero,80082adc <___svfprintf_internal_r+0xd84>
8008267c:	d9402e17 	ldw	r5,184(sp)
80082680:	d8801f17 	ldw	r2,124(sp)
80082684:	44000015 	stw	r16,0(r8)
80082688:	1947883a 	add	r3,r3,r5
8008268c:	10800044 	addi	r2,r2,1
80082690:	41400115 	stw	r5,4(r8)
80082694:	d8c02015 	stw	r3,128(sp)
80082698:	d8801f15 	stw	r2,124(sp)
8008269c:	010001c4 	movi	r4,7
800826a0:	2081d116 	blt	r4,r2,80082de8 <___svfprintf_internal_r+0x1090>
800826a4:	42000204 	addi	r8,r8,8
800826a8:	9480010c 	andi	r18,r18,4
800826ac:	90003226 	beq	r18,zero,80082778 <___svfprintf_internal_r+0xa20>
800826b0:	d9403117 	ldw	r5,196(sp)
800826b4:	d8802a17 	ldw	r2,168(sp)
800826b8:	28a1c83a 	sub	r16,r5,r2
800826bc:	04002e0e 	bge	zero,r16,80082778 <___svfprintf_internal_r+0xa20>
800826c0:	04400404 	movi	r17,16
800826c4:	d8801f17 	ldw	r2,124(sp)
800826c8:	8c04b90e 	bge	r17,r16,800839b0 <___svfprintf_internal_r+0x1c58>
800826cc:	01600274 	movhi	r5,32777
800826d0:	295a9684 	addi	r5,r5,27226
800826d4:	d9403515 	stw	r5,212(sp)
800826d8:	048001c4 	movi	r18,7
800826dc:	dd002c17 	ldw	r20,176(sp)
800826e0:	00000306 	br	800826f0 <___svfprintf_internal_r+0x998>
800826e4:	843ffc04 	addi	r16,r16,-16
800826e8:	42000204 	addi	r8,r8,8
800826ec:	8c00130e 	bge	r17,r16,8008273c <___svfprintf_internal_r+0x9e4>
800826f0:	01200274 	movhi	r4,32777
800826f4:	18c00404 	addi	r3,r3,16
800826f8:	10800044 	addi	r2,r2,1
800826fc:	211a9684 	addi	r4,r4,27226
80082700:	41000015 	stw	r4,0(r8)
80082704:	44400115 	stw	r17,4(r8)
80082708:	d8c02015 	stw	r3,128(sp)
8008270c:	d8801f15 	stw	r2,124(sp)
80082710:	90bff40e 	bge	r18,r2,800826e4 <___svfprintf_internal_r+0x98c>
80082714:	d9801e04 	addi	r6,sp,120
80082718:	a00b883a 	mov	r5,r20
8008271c:	9809883a 	mov	r4,r19
80082720:	008b7440 	call	8008b744 <__ssprint_r>
80082724:	103e711e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082728:	843ffc04 	addi	r16,r16,-16
8008272c:	d8c02017 	ldw	r3,128(sp)
80082730:	d8801f17 	ldw	r2,124(sp)
80082734:	da000404 	addi	r8,sp,16
80082738:	8c3fed16 	blt	r17,r16,800826f0 <___svfprintf_internal_r+0x998>
8008273c:	d9403517 	ldw	r5,212(sp)
80082740:	1c07883a 	add	r3,r3,r16
80082744:	10800044 	addi	r2,r2,1
80082748:	41400015 	stw	r5,0(r8)
8008274c:	44000115 	stw	r16,4(r8)
80082750:	d8c02015 	stw	r3,128(sp)
80082754:	d8801f15 	stw	r2,124(sp)
80082758:	010001c4 	movi	r4,7
8008275c:	2080060e 	bge	r4,r2,80082778 <___svfprintf_internal_r+0xa20>
80082760:	d9402c17 	ldw	r5,176(sp)
80082764:	d9801e04 	addi	r6,sp,120
80082768:	9809883a 	mov	r4,r19
8008276c:	008b7440 	call	8008b744 <__ssprint_r>
80082770:	103e5e1e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082774:	d8c02017 	ldw	r3,128(sp)
80082778:	d8803117 	ldw	r2,196(sp)
8008277c:	d9002a17 	ldw	r4,168(sp)
80082780:	1100010e 	bge	r2,r4,80082788 <___svfprintf_internal_r+0xa30>
80082784:	2005883a 	mov	r2,r4
80082788:	d9402f17 	ldw	r5,188(sp)
8008278c:	288b883a 	add	r5,r5,r2
80082790:	d9402f15 	stw	r5,188(sp)
80082794:	18019c1e 	bne	r3,zero,80082e08 <___svfprintf_internal_r+0x10b0>
80082798:	b8800007 	ldb	r2,0(r23)
8008279c:	d8001f15 	stw	zero,124(sp)
800827a0:	da000404 	addi	r8,sp,16
800827a4:	103d991e 	bne	r2,zero,80081e0c <___svfprintf_internal_r+0xb4>
800827a8:	b821883a 	mov	r16,r23
800827ac:	003daf06 	br	80081e6c <___svfprintf_internal_r+0x114>
800827b0:	18c03fcc 	andi	r3,r3,255
800827b4:	1805c71e 	bne	r3,zero,80083ed4 <___svfprintf_internal_r+0x217c>
800827b8:	94800414 	ori	r18,r18,16
800827bc:	9080080c 	andi	r2,r18,32
800827c0:	10020126 	beq	r2,zero,80082fc8 <___svfprintf_internal_r+0x1270>
800827c4:	d8802d17 	ldw	r2,180(sp)
800827c8:	d9002917 	ldw	r4,164(sp)
800827cc:	d8002785 	stb	zero,158(sp)
800827d0:	10c00204 	addi	r3,r2,8
800827d4:	15000017 	ldw	r20,0(r2)
800827d8:	15800117 	ldw	r22,4(r2)
800827dc:	20038e16 	blt	r4,zero,80083618 <___svfprintf_internal_r+0x18c0>
800827e0:	013fdfc4 	movi	r4,-129
800827e4:	a584b03a 	or	r2,r20,r22
800827e8:	d8c02d15 	stw	r3,180(sp)
800827ec:	9124703a 	and	r18,r18,r4
800827f0:	0039883a 	mov	fp,zero
800827f4:	103eb61e 	bne	r2,zero,800822d0 <___svfprintf_internal_r+0x578>
800827f8:	d8802917 	ldw	r2,164(sp)
800827fc:	1002c81e 	bne	r2,zero,80083320 <___svfprintf_internal_r+0x15c8>
80082800:	d8002915 	stw	zero,164(sp)
80082804:	d8002e15 	stw	zero,184(sp)
80082808:	dc001e04 	addi	r16,sp,120
8008280c:	003efa06 	br	800823f8 <___svfprintf_internal_r+0x6a0>
80082810:	18c03fcc 	andi	r3,r3,255
80082814:	1805ad1e 	bne	r3,zero,80083ecc <___svfprintf_internal_r+0x2174>
80082818:	01600274 	movhi	r5,32777
8008281c:	295a8604 	addi	r5,r5,27160
80082820:	d9403a15 	stw	r5,232(sp)
80082824:	9080080c 	andi	r2,r18,32
80082828:	10006126 	beq	r2,zero,800829b0 <___svfprintf_internal_r+0xc58>
8008282c:	d8802d17 	ldw	r2,180(sp)
80082830:	15000017 	ldw	r20,0(r2)
80082834:	15800117 	ldw	r22,4(r2)
80082838:	10800204 	addi	r2,r2,8
8008283c:	d8802d15 	stw	r2,180(sp)
80082840:	9080004c 	andi	r2,r18,1
80082844:	10018e26 	beq	r2,zero,80082e80 <___svfprintf_internal_r+0x1128>
80082848:	a584b03a 	or	r2,r20,r22
8008284c:	10030926 	beq	r2,zero,80083474 <___svfprintf_internal_r+0x171c>
80082850:	d8c02917 	ldw	r3,164(sp)
80082854:	00800c04 	movi	r2,48
80082858:	d8802705 	stb	r2,156(sp)
8008285c:	dc402745 	stb	r17,157(sp)
80082860:	d8002785 	stb	zero,158(sp)
80082864:	90800094 	ori	r2,r18,2
80082868:	18048716 	blt	r3,zero,80083a88 <___svfprintf_internal_r+0x1d30>
8008286c:	00bfdfc4 	movi	r2,-129
80082870:	90a4703a 	and	r18,r18,r2
80082874:	94800094 	ori	r18,r18,2
80082878:	0039883a 	mov	fp,zero
8008287c:	d9003a17 	ldw	r4,232(sp)
80082880:	dc001e04 	addi	r16,sp,120
80082884:	a08003cc 	andi	r2,r20,15
80082888:	b006973a 	slli	r3,r22,28
8008288c:	2085883a 	add	r2,r4,r2
80082890:	a028d13a 	srli	r20,r20,4
80082894:	10800003 	ldbu	r2,0(r2)
80082898:	b02cd13a 	srli	r22,r22,4
8008289c:	843fffc4 	addi	r16,r16,-1
800828a0:	1d28b03a 	or	r20,r3,r20
800828a4:	80800005 	stb	r2,0(r16)
800828a8:	a584b03a 	or	r2,r20,r22
800828ac:	103ff51e 	bne	r2,zero,80082884 <___svfprintf_internal_r+0xb2c>
800828b0:	d8c02817 	ldw	r3,160(sp)
800828b4:	1c07c83a 	sub	r3,r3,r16
800828b8:	d8c02e15 	stw	r3,184(sp)
800828bc:	003ece06 	br	800823f8 <___svfprintf_internal_r+0x6a0>
800828c0:	d8c02d17 	ldw	r3,180(sp)
800828c4:	d9002d17 	ldw	r4,180(sp)
800828c8:	d8002785 	stb	zero,158(sp)
800828cc:	18800017 	ldw	r2,0(r3)
800828d0:	21000104 	addi	r4,r4,4
800828d4:	00c00044 	movi	r3,1
800828d8:	d8c02a15 	stw	r3,168(sp)
800828dc:	d8801405 	stb	r2,80(sp)
800828e0:	d9002d15 	stw	r4,180(sp)
800828e4:	d8c02e15 	stw	r3,184(sp)
800828e8:	d8002915 	stw	zero,164(sp)
800828ec:	d8003215 	stw	zero,200(sp)
800828f0:	dc001404 	addi	r16,sp,80
800828f4:	0039883a 	mov	fp,zero
800828f8:	003ecc06 	br	8008242c <___svfprintf_internal_r+0x6d4>
800828fc:	18c03fcc 	andi	r3,r3,255
80082900:	183e9226 	beq	r3,zero,8008234c <___svfprintf_internal_r+0x5f4>
80082904:	d9c02785 	stb	r7,158(sp)
80082908:	003e9006 	br	8008234c <___svfprintf_internal_r+0x5f4>
8008290c:	00c00044 	movi	r3,1
80082910:	01c00ac4 	movi	r7,43
80082914:	bc400007 	ldb	r17,0(r23)
80082918:	003d6306 	br	80081ea8 <___svfprintf_internal_r+0x150>
8008291c:	94800814 	ori	r18,r18,32
80082920:	bc400007 	ldb	r17,0(r23)
80082924:	003d6006 	br	80081ea8 <___svfprintf_internal_r+0x150>
80082928:	d8c02d17 	ldw	r3,180(sp)
8008292c:	d8002785 	stb	zero,158(sp)
80082930:	1c000017 	ldw	r16,0(r3)
80082934:	1d000104 	addi	r20,r3,4
80082938:	80040f26 	beq	r16,zero,80083978 <___svfprintf_internal_r+0x1c20>
8008293c:	d9002917 	ldw	r4,164(sp)
80082940:	2003dc16 	blt	r4,zero,800838b4 <___svfprintf_internal_r+0x1b5c>
80082944:	200d883a 	mov	r6,r4
80082948:	000b883a 	mov	r5,zero
8008294c:	8009883a 	mov	r4,r16
80082950:	da003e15 	stw	r8,248(sp)
80082954:	00898640 	call	80089864 <memchr>
80082958:	da003e17 	ldw	r8,248(sp)
8008295c:	10045826 	beq	r2,zero,80083ac0 <___svfprintf_internal_r+0x1d68>
80082960:	1405c83a 	sub	r2,r2,r16
80082964:	d8802e15 	stw	r2,184(sp)
80082968:	1003d816 	blt	r2,zero,800838cc <___svfprintf_internal_r+0x1b74>
8008296c:	df002783 	ldbu	fp,158(sp)
80082970:	d8802a15 	stw	r2,168(sp)
80082974:	dd002d15 	stw	r20,180(sp)
80082978:	d8002915 	stw	zero,164(sp)
8008297c:	d8003215 	stw	zero,200(sp)
80082980:	003ea306 	br	80082410 <___svfprintf_internal_r+0x6b8>
80082984:	18c03fcc 	andi	r3,r3,255
80082988:	183f8c26 	beq	r3,zero,800827bc <___svfprintf_internal_r+0xa64>
8008298c:	d9c02785 	stb	r7,158(sp)
80082990:	003f8a06 	br	800827bc <___svfprintf_internal_r+0xa64>
80082994:	18c03fcc 	andi	r3,r3,255
80082998:	1805631e 	bne	r3,zero,80083f28 <___svfprintf_internal_r+0x21d0>
8008299c:	01600274 	movhi	r5,32777
800829a0:	295a8b04 	addi	r5,r5,27180
800829a4:	d9403a15 	stw	r5,232(sp)
800829a8:	9080080c 	andi	r2,r18,32
800829ac:	103f9f1e 	bne	r2,zero,8008282c <___svfprintf_internal_r+0xad4>
800829b0:	9080040c 	andi	r2,r18,16
800829b4:	10029c26 	beq	r2,zero,80083428 <___svfprintf_internal_r+0x16d0>
800829b8:	d8c02d17 	ldw	r3,180(sp)
800829bc:	002d883a 	mov	r22,zero
800829c0:	1d000017 	ldw	r20,0(r3)
800829c4:	18c00104 	addi	r3,r3,4
800829c8:	d8c02d15 	stw	r3,180(sp)
800829cc:	003f9c06 	br	80082840 <___svfprintf_internal_r+0xae8>
800829d0:	94800054 	ori	r18,r18,1
800829d4:	bc400007 	ldb	r17,0(r23)
800829d8:	003d3306 	br	80081ea8 <___svfprintf_internal_r+0x150>
800829dc:	38803fcc 	andi	r2,r7,255
800829e0:	1080201c 	xori	r2,r2,128
800829e4:	10bfe004 	addi	r2,r2,-128
800829e8:	1002971e 	bne	r2,zero,80083448 <___svfprintf_internal_r+0x16f0>
800829ec:	00c00044 	movi	r3,1
800829f0:	01c00804 	movi	r7,32
800829f4:	bc400007 	ldb	r17,0(r23)
800829f8:	003d2b06 	br	80081ea8 <___svfprintf_internal_r+0x150>
800829fc:	18c03fcc 	andi	r3,r3,255
80082a00:	183e2326 	beq	r3,zero,80082290 <___svfprintf_internal_r+0x538>
80082a04:	d9c02785 	stb	r7,158(sp)
80082a08:	003e2106 	br	80082290 <___svfprintf_internal_r+0x538>
80082a0c:	bc400007 	ldb	r17,0(r23)
80082a10:	8a430426 	beq	r17,r9,80083624 <___svfprintf_internal_r+0x18cc>
80082a14:	94800414 	ori	r18,r18,16
80082a18:	003d2306 	br	80081ea8 <___svfprintf_internal_r+0x150>
80082a1c:	18c03fcc 	andi	r3,r3,255
80082a20:	18053f1e 	bne	r3,zero,80083f20 <___svfprintf_internal_r+0x21c8>
80082a24:	9080080c 	andi	r2,r18,32
80082a28:	10028926 	beq	r2,zero,80083450 <___svfprintf_internal_r+0x16f8>
80082a2c:	d9402d17 	ldw	r5,180(sp)
80082a30:	d9002f17 	ldw	r4,188(sp)
80082a34:	28800017 	ldw	r2,0(r5)
80082a38:	2007d7fa 	srai	r3,r4,31
80082a3c:	29400104 	addi	r5,r5,4
80082a40:	d9402d15 	stw	r5,180(sp)
80082a44:	11000015 	stw	r4,0(r2)
80082a48:	10c00115 	stw	r3,4(r2)
80082a4c:	003ced06 	br	80081e04 <___svfprintf_internal_r+0xac>
80082a50:	94801014 	ori	r18,r18,64
80082a54:	bc400007 	ldb	r17,0(r23)
80082a58:	003d1306 	br	80081ea8 <___svfprintf_internal_r+0x150>
80082a5c:	01200274 	movhi	r4,32777
80082a60:	211a8b04 	addi	r4,r4,27180
80082a64:	0039883a 	mov	fp,zero
80082a68:	d9003a15 	stw	r4,232(sp)
80082a6c:	04401e04 	movi	r17,120
80082a70:	003f8206 	br	8008287c <___svfprintf_internal_r+0xb24>
80082a74:	18c03fcc 	andi	r3,r3,255
80082a78:	1805221e 	bne	r3,zero,80083f04 <___svfprintf_internal_r+0x21ac>
80082a7c:	883d9526 	beq	r17,zero,800820d4 <___svfprintf_internal_r+0x37c>
80082a80:	00c00044 	movi	r3,1
80082a84:	d8c02a15 	stw	r3,168(sp)
80082a88:	dc401405 	stb	r17,80(sp)
80082a8c:	d8002785 	stb	zero,158(sp)
80082a90:	003f9406 	br	800828e4 <___svfprintf_internal_r+0xb8c>
80082a94:	01200274 	movhi	r4,32777
80082a98:	211a8b04 	addi	r4,r4,27180
80082a9c:	d9003a15 	stw	r4,232(sp)
80082aa0:	d8c02d15 	stw	r3,180(sp)
80082aa4:	1025883a 	mov	r18,r2
80082aa8:	04401e04 	movi	r17,120
80082aac:	a584b03a 	or	r2,r20,r22
80082ab0:	1000fa1e 	bne	r2,zero,80082e9c <___svfprintf_internal_r+0x1144>
80082ab4:	0039883a 	mov	fp,zero
80082ab8:	00800084 	movi	r2,2
80082abc:	10803fcc 	andi	r2,r2,255
80082ac0:	00c00044 	movi	r3,1
80082ac4:	10c21626 	beq	r2,r3,80083320 <___svfprintf_internal_r+0x15c8>
80082ac8:	00c00084 	movi	r3,2
80082acc:	10fe301e 	bne	r2,r3,80082390 <___svfprintf_internal_r+0x638>
80082ad0:	003d7606 	br	800820ac <___svfprintf_internal_r+0x354>
80082ad4:	d8c02017 	ldw	r3,128(sp)
80082ad8:	003e9506 	br	80082530 <___svfprintf_internal_r+0x7d8>
80082adc:	00801944 	movi	r2,101
80082ae0:	14407c0e 	bge	r2,r17,80082cd4 <___svfprintf_internal_r+0xf7c>
80082ae4:	d9003617 	ldw	r4,216(sp)
80082ae8:	d9403717 	ldw	r5,220(sp)
80082aec:	000d883a 	mov	r6,zero
80082af0:	000f883a 	mov	r7,zero
80082af4:	d8c03d15 	stw	r3,244(sp)
80082af8:	da003e15 	stw	r8,248(sp)
80082afc:	00908c40 	call	800908c4 <__eqdf2>
80082b00:	d8c03d17 	ldw	r3,244(sp)
80082b04:	da003e17 	ldw	r8,248(sp)
80082b08:	1000f51e 	bne	r2,zero,80082ee0 <___svfprintf_internal_r+0x1188>
80082b0c:	d8801f17 	ldw	r2,124(sp)
80082b10:	01200274 	movhi	r4,32777
80082b14:	211a9204 	addi	r4,r4,27208
80082b18:	18c00044 	addi	r3,r3,1
80082b1c:	10800044 	addi	r2,r2,1
80082b20:	41000015 	stw	r4,0(r8)
80082b24:	01000044 	movi	r4,1
80082b28:	41000115 	stw	r4,4(r8)
80082b2c:	d8c02015 	stw	r3,128(sp)
80082b30:	d8801f15 	stw	r2,124(sp)
80082b34:	010001c4 	movi	r4,7
80082b38:	20826616 	blt	r4,r2,800834d4 <___svfprintf_internal_r+0x177c>
80082b3c:	42000204 	addi	r8,r8,8
80082b40:	d8802617 	ldw	r2,152(sp)
80082b44:	d9403317 	ldw	r5,204(sp)
80082b48:	11400216 	blt	r2,r5,80082b54 <___svfprintf_internal_r+0xdfc>
80082b4c:	9080004c 	andi	r2,r18,1
80082b50:	103ed526 	beq	r2,zero,800826a8 <___svfprintf_internal_r+0x950>
80082b54:	d8803817 	ldw	r2,224(sp)
80082b58:	d9003417 	ldw	r4,208(sp)
80082b5c:	d9403817 	ldw	r5,224(sp)
80082b60:	1887883a 	add	r3,r3,r2
80082b64:	d8801f17 	ldw	r2,124(sp)
80082b68:	41000015 	stw	r4,0(r8)
80082b6c:	41400115 	stw	r5,4(r8)
80082b70:	10800044 	addi	r2,r2,1
80082b74:	d8c02015 	stw	r3,128(sp)
80082b78:	d8801f15 	stw	r2,124(sp)
80082b7c:	010001c4 	movi	r4,7
80082b80:	2082af16 	blt	r4,r2,80083640 <___svfprintf_internal_r+0x18e8>
80082b84:	42000204 	addi	r8,r8,8
80082b88:	d8803317 	ldw	r2,204(sp)
80082b8c:	143fffc4 	addi	r16,r2,-1
80082b90:	043ec50e 	bge	zero,r16,800826a8 <___svfprintf_internal_r+0x950>
80082b94:	04400404 	movi	r17,16
80082b98:	d8801f17 	ldw	r2,124(sp)
80082b9c:	8c00860e 	bge	r17,r16,80082db8 <___svfprintf_internal_r+0x1060>
80082ba0:	01600274 	movhi	r5,32777
80082ba4:	295a9284 	addi	r5,r5,27210
80082ba8:	d9402b15 	stw	r5,172(sp)
80082bac:	058001c4 	movi	r22,7
80082bb0:	dd002c17 	ldw	r20,176(sp)
80082bb4:	00000306 	br	80082bc4 <___svfprintf_internal_r+0xe6c>
80082bb8:	42000204 	addi	r8,r8,8
80082bbc:	843ffc04 	addi	r16,r16,-16
80082bc0:	8c00800e 	bge	r17,r16,80082dc4 <___svfprintf_internal_r+0x106c>
80082bc4:	18c00404 	addi	r3,r3,16
80082bc8:	10800044 	addi	r2,r2,1
80082bcc:	45400015 	stw	r21,0(r8)
80082bd0:	44400115 	stw	r17,4(r8)
80082bd4:	d8c02015 	stw	r3,128(sp)
80082bd8:	d8801f15 	stw	r2,124(sp)
80082bdc:	b0bff60e 	bge	r22,r2,80082bb8 <___svfprintf_internal_r+0xe60>
80082be0:	d9801e04 	addi	r6,sp,120
80082be4:	a00b883a 	mov	r5,r20
80082be8:	9809883a 	mov	r4,r19
80082bec:	008b7440 	call	8008b744 <__ssprint_r>
80082bf0:	103d3e1e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082bf4:	d8c02017 	ldw	r3,128(sp)
80082bf8:	d8801f17 	ldw	r2,124(sp)
80082bfc:	da000404 	addi	r8,sp,16
80082c00:	003fee06 	br	80082bbc <___svfprintf_internal_r+0xe64>
80082c04:	d9403117 	ldw	r5,196(sp)
80082c08:	d8802a17 	ldw	r2,168(sp)
80082c0c:	28adc83a 	sub	r22,r5,r2
80082c10:	05be650e 	bge	zero,r22,800825a8 <___svfprintf_internal_r+0x850>
80082c14:	07000404 	movi	fp,16
80082c18:	d8801f17 	ldw	r2,124(sp)
80082c1c:	e583a20e 	bge	fp,r22,80083aa8 <___svfprintf_internal_r+0x1d50>
80082c20:	01600274 	movhi	r5,32777
80082c24:	295a9284 	addi	r5,r5,27210
80082c28:	dc403015 	stw	r17,192(sp)
80082c2c:	d9402b15 	stw	r5,172(sp)
80082c30:	b023883a 	mov	r17,r22
80082c34:	050001c4 	movi	r20,7
80082c38:	902d883a 	mov	r22,r18
80082c3c:	8025883a 	mov	r18,r16
80082c40:	dc002c17 	ldw	r16,176(sp)
80082c44:	00000306 	br	80082c54 <___svfprintf_internal_r+0xefc>
80082c48:	8c7ffc04 	addi	r17,r17,-16
80082c4c:	42000204 	addi	r8,r8,8
80082c50:	e440110e 	bge	fp,r17,80082c98 <___svfprintf_internal_r+0xf40>
80082c54:	18c00404 	addi	r3,r3,16
80082c58:	10800044 	addi	r2,r2,1
80082c5c:	45400015 	stw	r21,0(r8)
80082c60:	47000115 	stw	fp,4(r8)
80082c64:	d8c02015 	stw	r3,128(sp)
80082c68:	d8801f15 	stw	r2,124(sp)
80082c6c:	a0bff60e 	bge	r20,r2,80082c48 <___svfprintf_internal_r+0xef0>
80082c70:	d9801e04 	addi	r6,sp,120
80082c74:	800b883a 	mov	r5,r16
80082c78:	9809883a 	mov	r4,r19
80082c7c:	008b7440 	call	8008b744 <__ssprint_r>
80082c80:	103d1a1e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082c84:	8c7ffc04 	addi	r17,r17,-16
80082c88:	d8c02017 	ldw	r3,128(sp)
80082c8c:	d8801f17 	ldw	r2,124(sp)
80082c90:	da000404 	addi	r8,sp,16
80082c94:	e47fef16 	blt	fp,r17,80082c54 <___svfprintf_internal_r+0xefc>
80082c98:	9021883a 	mov	r16,r18
80082c9c:	b025883a 	mov	r18,r22
80082ca0:	882d883a 	mov	r22,r17
80082ca4:	dc403017 	ldw	r17,192(sp)
80082ca8:	d9002b17 	ldw	r4,172(sp)
80082cac:	1d87883a 	add	r3,r3,r22
80082cb0:	10800044 	addi	r2,r2,1
80082cb4:	41000015 	stw	r4,0(r8)
80082cb8:	45800115 	stw	r22,4(r8)
80082cbc:	d8c02015 	stw	r3,128(sp)
80082cc0:	d8801f15 	stw	r2,124(sp)
80082cc4:	010001c4 	movi	r4,7
80082cc8:	20819a16 	blt	r4,r2,80083334 <___svfprintf_internal_r+0x15dc>
80082ccc:	42000204 	addi	r8,r8,8
80082cd0:	003e3506 	br	800825a8 <___svfprintf_internal_r+0x850>
80082cd4:	d9403317 	ldw	r5,204(sp)
80082cd8:	00800044 	movi	r2,1
80082cdc:	18c00044 	addi	r3,r3,1
80082ce0:	1141710e 	bge	r2,r5,800832a8 <___svfprintf_internal_r+0x1550>
80082ce4:	dc401f17 	ldw	r17,124(sp)
80082ce8:	00800044 	movi	r2,1
80082cec:	40800115 	stw	r2,4(r8)
80082cf0:	8c400044 	addi	r17,r17,1
80082cf4:	44000015 	stw	r16,0(r8)
80082cf8:	d8c02015 	stw	r3,128(sp)
80082cfc:	dc401f15 	stw	r17,124(sp)
80082d00:	008001c4 	movi	r2,7
80082d04:	14417416 	blt	r2,r17,800832d8 <___svfprintf_internal_r+0x1580>
80082d08:	42000204 	addi	r8,r8,8
80082d0c:	d8803817 	ldw	r2,224(sp)
80082d10:	d9003417 	ldw	r4,208(sp)
80082d14:	8c400044 	addi	r17,r17,1
80082d18:	10c7883a 	add	r3,r2,r3
80082d1c:	40800115 	stw	r2,4(r8)
80082d20:	41000015 	stw	r4,0(r8)
80082d24:	d8c02015 	stw	r3,128(sp)
80082d28:	dc401f15 	stw	r17,124(sp)
80082d2c:	008001c4 	movi	r2,7
80082d30:	14417216 	blt	r2,r17,800832fc <___svfprintf_internal_r+0x15a4>
80082d34:	45800204 	addi	r22,r8,8
80082d38:	d9003617 	ldw	r4,216(sp)
80082d3c:	d9403717 	ldw	r5,220(sp)
80082d40:	000d883a 	mov	r6,zero
80082d44:	000f883a 	mov	r7,zero
80082d48:	d8c03d15 	stw	r3,244(sp)
80082d4c:	00908c40 	call	800908c4 <__eqdf2>
80082d50:	d8c03d17 	ldw	r3,244(sp)
80082d54:	1000b326 	beq	r2,zero,80083024 <___svfprintf_internal_r+0x12cc>
80082d58:	d9403317 	ldw	r5,204(sp)
80082d5c:	84000044 	addi	r16,r16,1
80082d60:	8c400044 	addi	r17,r17,1
80082d64:	28bfffc4 	addi	r2,r5,-1
80082d68:	1887883a 	add	r3,r3,r2
80082d6c:	b0800115 	stw	r2,4(r22)
80082d70:	b4000015 	stw	r16,0(r22)
80082d74:	d8c02015 	stw	r3,128(sp)
80082d78:	dc401f15 	stw	r17,124(sp)
80082d7c:	008001c4 	movi	r2,7
80082d80:	1440d216 	blt	r2,r17,800830cc <___svfprintf_internal_r+0x1374>
80082d84:	b5800204 	addi	r22,r22,8
80082d88:	d9003b17 	ldw	r4,236(sp)
80082d8c:	df0022c4 	addi	fp,sp,139
80082d90:	8c400044 	addi	r17,r17,1
80082d94:	20c7883a 	add	r3,r4,r3
80082d98:	b7000015 	stw	fp,0(r22)
80082d9c:	b1000115 	stw	r4,4(r22)
80082da0:	d8c02015 	stw	r3,128(sp)
80082da4:	dc401f15 	stw	r17,124(sp)
80082da8:	008001c4 	movi	r2,7
80082dac:	14400e16 	blt	r2,r17,80082de8 <___svfprintf_internal_r+0x1090>
80082db0:	b2000204 	addi	r8,r22,8
80082db4:	003e3c06 	br	800826a8 <___svfprintf_internal_r+0x950>
80082db8:	01200274 	movhi	r4,32777
80082dbc:	211a9284 	addi	r4,r4,27210
80082dc0:	d9002b15 	stw	r4,172(sp)
80082dc4:	d9002b17 	ldw	r4,172(sp)
80082dc8:	1c07883a 	add	r3,r3,r16
80082dcc:	44000115 	stw	r16,4(r8)
80082dd0:	41000015 	stw	r4,0(r8)
80082dd4:	10800044 	addi	r2,r2,1
80082dd8:	d8c02015 	stw	r3,128(sp)
80082ddc:	d8801f15 	stw	r2,124(sp)
80082de0:	010001c4 	movi	r4,7
80082de4:	20be2f0e 	bge	r4,r2,800826a4 <___svfprintf_internal_r+0x94c>
80082de8:	d9402c17 	ldw	r5,176(sp)
80082dec:	d9801e04 	addi	r6,sp,120
80082df0:	9809883a 	mov	r4,r19
80082df4:	008b7440 	call	8008b744 <__ssprint_r>
80082df8:	103cbc1e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082dfc:	d8c02017 	ldw	r3,128(sp)
80082e00:	da000404 	addi	r8,sp,16
80082e04:	003e2806 	br	800826a8 <___svfprintf_internal_r+0x950>
80082e08:	d9402c17 	ldw	r5,176(sp)
80082e0c:	d9801e04 	addi	r6,sp,120
80082e10:	9809883a 	mov	r4,r19
80082e14:	008b7440 	call	8008b744 <__ssprint_r>
80082e18:	103e5f26 	beq	r2,zero,80082798 <___svfprintf_internal_r+0xa40>
80082e1c:	003cb306 	br	800820ec <___svfprintf_internal_r+0x394>
80082e20:	d9402c17 	ldw	r5,176(sp)
80082e24:	d9801e04 	addi	r6,sp,120
80082e28:	9809883a 	mov	r4,r19
80082e2c:	008b7440 	call	8008b744 <__ssprint_r>
80082e30:	103cae1e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082e34:	d8c02017 	ldw	r3,128(sp)
80082e38:	da000404 	addi	r8,sp,16
80082e3c:	003e0d06 	br	80082674 <___svfprintf_internal_r+0x91c>
80082e40:	d9402c17 	ldw	r5,176(sp)
80082e44:	d9801e04 	addi	r6,sp,120
80082e48:	9809883a 	mov	r4,r19
80082e4c:	008b7440 	call	8008b744 <__ssprint_r>
80082e50:	103ca61e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082e54:	d8c02017 	ldw	r3,128(sp)
80082e58:	da000404 	addi	r8,sp,16
80082e5c:	003dc106 	br	80082564 <___svfprintf_internal_r+0x80c>
80082e60:	d9402c17 	ldw	r5,176(sp)
80082e64:	d9801e04 	addi	r6,sp,120
80082e68:	9809883a 	mov	r4,r19
80082e6c:	008b7440 	call	8008b744 <__ssprint_r>
80082e70:	103c9e1e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082e74:	d8c02017 	ldw	r3,128(sp)
80082e78:	da000404 	addi	r8,sp,16
80082e7c:	003dc706 	br	8008259c <___svfprintf_internal_r+0x844>
80082e80:	d8802917 	ldw	r2,164(sp)
80082e84:	d8002785 	stb	zero,158(sp)
80082e88:	103f0816 	blt	r2,zero,80082aac <___svfprintf_internal_r+0xd54>
80082e8c:	00ffdfc4 	movi	r3,-129
80082e90:	a584b03a 	or	r2,r20,r22
80082e94:	90e4703a 	and	r18,r18,r3
80082e98:	103c8126 	beq	r2,zero,800820a0 <___svfprintf_internal_r+0x348>
80082e9c:	0039883a 	mov	fp,zero
80082ea0:	003e7606 	br	8008287c <___svfprintf_internal_r+0xb24>
80082ea4:	9080040c 	andi	r2,r18,16
80082ea8:	10013d26 	beq	r2,zero,800833a0 <___svfprintf_internal_r+0x1648>
80082eac:	d9002d17 	ldw	r4,180(sp)
80082eb0:	d9402917 	ldw	r5,164(sp)
80082eb4:	d8002785 	stb	zero,158(sp)
80082eb8:	20800104 	addi	r2,r4,4
80082ebc:	25000017 	ldw	r20,0(r4)
80082ec0:	002d883a 	mov	r22,zero
80082ec4:	28013f16 	blt	r5,zero,800833c4 <___svfprintf_internal_r+0x166c>
80082ec8:	00ffdfc4 	movi	r3,-129
80082ecc:	d8802d15 	stw	r2,180(sp)
80082ed0:	90e4703a 	and	r18,r18,r3
80082ed4:	a03d2b26 	beq	r20,zero,80082384 <___svfprintf_internal_r+0x62c>
80082ed8:	0039883a 	mov	fp,zero
80082edc:	003d2e06 	br	80082398 <___svfprintf_internal_r+0x640>
80082ee0:	dc402617 	ldw	r17,152(sp)
80082ee4:	0441830e 	bge	zero,r17,800834f4 <___svfprintf_internal_r+0x179c>
80082ee8:	dc403217 	ldw	r17,200(sp)
80082eec:	d8803317 	ldw	r2,204(sp)
80082ef0:	1440010e 	bge	r2,r17,80082ef8 <___svfprintf_internal_r+0x11a0>
80082ef4:	1023883a 	mov	r17,r2
80082ef8:	04400a0e 	bge	zero,r17,80082f24 <___svfprintf_internal_r+0x11cc>
80082efc:	d8801f17 	ldw	r2,124(sp)
80082f00:	1c47883a 	add	r3,r3,r17
80082f04:	44000015 	stw	r16,0(r8)
80082f08:	10800044 	addi	r2,r2,1
80082f0c:	44400115 	stw	r17,4(r8)
80082f10:	d8c02015 	stw	r3,128(sp)
80082f14:	d8801f15 	stw	r2,124(sp)
80082f18:	010001c4 	movi	r4,7
80082f1c:	20827516 	blt	r4,r2,800838f4 <___svfprintf_internal_r+0x1b9c>
80082f20:	42000204 	addi	r8,r8,8
80082f24:	88027b16 	blt	r17,zero,80083914 <___svfprintf_internal_r+0x1bbc>
80082f28:	d9003217 	ldw	r4,200(sp)
80082f2c:	2463c83a 	sub	r17,r4,r17
80082f30:	0440990e 	bge	zero,r17,80083198 <___svfprintf_internal_r+0x1440>
80082f34:	05800404 	movi	r22,16
80082f38:	d8801f17 	ldw	r2,124(sp)
80082f3c:	b441530e 	bge	r22,r17,8008348c <___svfprintf_internal_r+0x1734>
80082f40:	01200274 	movhi	r4,32777
80082f44:	211a9284 	addi	r4,r4,27210
80082f48:	d9002b15 	stw	r4,172(sp)
80082f4c:	070001c4 	movi	fp,7
80082f50:	dd002c17 	ldw	r20,176(sp)
80082f54:	00000306 	br	80082f64 <___svfprintf_internal_r+0x120c>
80082f58:	42000204 	addi	r8,r8,8
80082f5c:	8c7ffc04 	addi	r17,r17,-16
80082f60:	b4414d0e 	bge	r22,r17,80083498 <___svfprintf_internal_r+0x1740>
80082f64:	18c00404 	addi	r3,r3,16
80082f68:	10800044 	addi	r2,r2,1
80082f6c:	45400015 	stw	r21,0(r8)
80082f70:	45800115 	stw	r22,4(r8)
80082f74:	d8c02015 	stw	r3,128(sp)
80082f78:	d8801f15 	stw	r2,124(sp)
80082f7c:	e0bff60e 	bge	fp,r2,80082f58 <___svfprintf_internal_r+0x1200>
80082f80:	d9801e04 	addi	r6,sp,120
80082f84:	a00b883a 	mov	r5,r20
80082f88:	9809883a 	mov	r4,r19
80082f8c:	008b7440 	call	8008b744 <__ssprint_r>
80082f90:	103c561e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082f94:	d8c02017 	ldw	r3,128(sp)
80082f98:	d8801f17 	ldw	r2,124(sp)
80082f9c:	da000404 	addi	r8,sp,16
80082fa0:	003fee06 	br	80082f5c <___svfprintf_internal_r+0x1204>
80082fa4:	d9402c17 	ldw	r5,176(sp)
80082fa8:	d9801e04 	addi	r6,sp,120
80082fac:	9809883a 	mov	r4,r19
80082fb0:	008b7440 	call	8008b744 <__ssprint_r>
80082fb4:	103c4d1e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80082fb8:	d8c02017 	ldw	r3,128(sp)
80082fbc:	df002787 	ldb	fp,158(sp)
80082fc0:	da000404 	addi	r8,sp,16
80082fc4:	003d5a06 	br	80082530 <___svfprintf_internal_r+0x7d8>
80082fc8:	9080040c 	andi	r2,r18,16
80082fcc:	10005c26 	beq	r2,zero,80083140 <___svfprintf_internal_r+0x13e8>
80082fd0:	d9402d17 	ldw	r5,180(sp)
80082fd4:	d8c02917 	ldw	r3,164(sp)
80082fd8:	d8002785 	stb	zero,158(sp)
80082fdc:	28800104 	addi	r2,r5,4
80082fe0:	2d000017 	ldw	r20,0(r5)
80082fe4:	002d883a 	mov	r22,zero
80082fe8:	18005e16 	blt	r3,zero,80083164 <___svfprintf_internal_r+0x140c>
80082fec:	00ffdfc4 	movi	r3,-129
80082ff0:	d8802d15 	stw	r2,180(sp)
80082ff4:	90e4703a 	and	r18,r18,r3
80082ff8:	0039883a 	mov	fp,zero
80082ffc:	a03dfe26 	beq	r20,zero,800827f8 <___svfprintf_internal_r+0xaa0>
80083000:	00800244 	movi	r2,9
80083004:	153cb336 	bltu	r2,r20,800822d4 <___svfprintf_internal_r+0x57c>
80083008:	a5000c04 	addi	r20,r20,48
8008300c:	dc001dc4 	addi	r16,sp,119
80083010:	dd001dc5 	stb	r20,119(sp)
80083014:	d8c02817 	ldw	r3,160(sp)
80083018:	1c07c83a 	sub	r3,r3,r16
8008301c:	d8c02e15 	stw	r3,184(sp)
80083020:	003cf506 	br	800823f8 <___svfprintf_internal_r+0x6a0>
80083024:	d8803317 	ldw	r2,204(sp)
80083028:	143fffc4 	addi	r16,r2,-1
8008302c:	043f560e 	bge	zero,r16,80082d88 <___svfprintf_internal_r+0x1030>
80083030:	07000404 	movi	fp,16
80083034:	e403530e 	bge	fp,r16,80083d84 <___svfprintf_internal_r+0x202c>
80083038:	01600274 	movhi	r5,32777
8008303c:	295a9284 	addi	r5,r5,27210
80083040:	d9402b15 	stw	r5,172(sp)
80083044:	01c001c4 	movi	r7,7
80083048:	dd002c17 	ldw	r20,176(sp)
8008304c:	00000306 	br	8008305c <___svfprintf_internal_r+0x1304>
80083050:	843ffc04 	addi	r16,r16,-16
80083054:	b5800204 	addi	r22,r22,8
80083058:	e400130e 	bge	fp,r16,800830a8 <___svfprintf_internal_r+0x1350>
8008305c:	18c00404 	addi	r3,r3,16
80083060:	8c400044 	addi	r17,r17,1
80083064:	b5400015 	stw	r21,0(r22)
80083068:	b7000115 	stw	fp,4(r22)
8008306c:	d8c02015 	stw	r3,128(sp)
80083070:	dc401f15 	stw	r17,124(sp)
80083074:	3c7ff60e 	bge	r7,r17,80083050 <___svfprintf_internal_r+0x12f8>
80083078:	d9801e04 	addi	r6,sp,120
8008307c:	a00b883a 	mov	r5,r20
80083080:	9809883a 	mov	r4,r19
80083084:	d9c03d15 	stw	r7,244(sp)
80083088:	008b7440 	call	8008b744 <__ssprint_r>
8008308c:	d9c03d17 	ldw	r7,244(sp)
80083090:	103c161e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083094:	843ffc04 	addi	r16,r16,-16
80083098:	d8c02017 	ldw	r3,128(sp)
8008309c:	dc401f17 	ldw	r17,124(sp)
800830a0:	dd800404 	addi	r22,sp,16
800830a4:	e43fed16 	blt	fp,r16,8008305c <___svfprintf_internal_r+0x1304>
800830a8:	d8802b17 	ldw	r2,172(sp)
800830ac:	1c07883a 	add	r3,r3,r16
800830b0:	8c400044 	addi	r17,r17,1
800830b4:	b0800015 	stw	r2,0(r22)
800830b8:	b4000115 	stw	r16,4(r22)
800830bc:	d8c02015 	stw	r3,128(sp)
800830c0:	dc401f15 	stw	r17,124(sp)
800830c4:	008001c4 	movi	r2,7
800830c8:	147f2e0e 	bge	r2,r17,80082d84 <___svfprintf_internal_r+0x102c>
800830cc:	d9402c17 	ldw	r5,176(sp)
800830d0:	d9801e04 	addi	r6,sp,120
800830d4:	9809883a 	mov	r4,r19
800830d8:	008b7440 	call	8008b744 <__ssprint_r>
800830dc:	103c031e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
800830e0:	d8c02017 	ldw	r3,128(sp)
800830e4:	dc401f17 	ldw	r17,124(sp)
800830e8:	dd800404 	addi	r22,sp,16
800830ec:	003f2606 	br	80082d88 <___svfprintf_internal_r+0x1030>
800830f0:	9080040c 	andi	r2,r18,16
800830f4:	1000c326 	beq	r2,zero,80083404 <___svfprintf_internal_r+0x16ac>
800830f8:	d8802d17 	ldw	r2,180(sp)
800830fc:	15000017 	ldw	r20,0(r2)
80083100:	10800104 	addi	r2,r2,4
80083104:	d8802d15 	stw	r2,180(sp)
80083108:	a02dd7fa 	srai	r22,r20,31
8008310c:	b005883a 	mov	r2,r22
80083110:	103c680e 	bge	r2,zero,800822b4 <___svfprintf_internal_r+0x55c>
80083114:	0529c83a 	sub	r20,zero,r20
80083118:	a004c03a 	cmpne	r2,r20,zero
8008311c:	05adc83a 	sub	r22,zero,r22
80083120:	b0adc83a 	sub	r22,r22,r2
80083124:	d8802917 	ldw	r2,164(sp)
80083128:	07000b44 	movi	fp,45
8008312c:	df002785 	stb	fp,158(sp)
80083130:	10022e16 	blt	r2,zero,800839ec <___svfprintf_internal_r+0x1c94>
80083134:	00bfdfc4 	movi	r2,-129
80083138:	90a4703a 	and	r18,r18,r2
8008313c:	003c6406 	br	800822d0 <___svfprintf_internal_r+0x578>
80083140:	9080100c 	andi	r2,r18,64
80083144:	d8002785 	stb	zero,158(sp)
80083148:	10012526 	beq	r2,zero,800835e0 <___svfprintf_internal_r+0x1888>
8008314c:	d9002d17 	ldw	r4,180(sp)
80083150:	d9402917 	ldw	r5,164(sp)
80083154:	002d883a 	mov	r22,zero
80083158:	20800104 	addi	r2,r4,4
8008315c:	2500000b 	ldhu	r20,0(r4)
80083160:	283fa20e 	bge	r5,zero,80082fec <___svfprintf_internal_r+0x1294>
80083164:	d8802d15 	stw	r2,180(sp)
80083168:	0039883a 	mov	fp,zero
8008316c:	a584b03a 	or	r2,r20,r22
80083170:	103c571e 	bne	r2,zero,800822d0 <___svfprintf_internal_r+0x578>
80083174:	00800044 	movi	r2,1
80083178:	003e5006 	br	80082abc <___svfprintf_internal_r+0xd64>
8008317c:	d9402c17 	ldw	r5,176(sp)
80083180:	d9801e04 	addi	r6,sp,120
80083184:	9809883a 	mov	r4,r19
80083188:	008b7440 	call	8008b744 <__ssprint_r>
8008318c:	103bd71e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083190:	d8c02017 	ldw	r3,128(sp)
80083194:	da000404 	addi	r8,sp,16
80083198:	d9003217 	ldw	r4,200(sp)
8008319c:	d8802617 	ldw	r2,152(sp)
800831a0:	d9403317 	ldw	r5,204(sp)
800831a4:	8123883a 	add	r17,r16,r4
800831a8:	11400216 	blt	r2,r5,800831b4 <___svfprintf_internal_r+0x145c>
800831ac:	9100004c 	andi	r4,r18,1
800831b0:	20000d26 	beq	r4,zero,800831e8 <___svfprintf_internal_r+0x1490>
800831b4:	d9003817 	ldw	r4,224(sp)
800831b8:	d9403417 	ldw	r5,208(sp)
800831bc:	1907883a 	add	r3,r3,r4
800831c0:	d9001f17 	ldw	r4,124(sp)
800831c4:	41400015 	stw	r5,0(r8)
800831c8:	d9403817 	ldw	r5,224(sp)
800831cc:	21000044 	addi	r4,r4,1
800831d0:	d8c02015 	stw	r3,128(sp)
800831d4:	41400115 	stw	r5,4(r8)
800831d8:	d9001f15 	stw	r4,124(sp)
800831dc:	014001c4 	movi	r5,7
800831e0:	2901dc16 	blt	r5,r4,80083954 <___svfprintf_internal_r+0x1bfc>
800831e4:	42000204 	addi	r8,r8,8
800831e8:	d9003317 	ldw	r4,204(sp)
800831ec:	8121883a 	add	r16,r16,r4
800831f0:	2085c83a 	sub	r2,r4,r2
800831f4:	8461c83a 	sub	r16,r16,r17
800831f8:	1400010e 	bge	r2,r16,80083200 <___svfprintf_internal_r+0x14a8>
800831fc:	1021883a 	mov	r16,r2
80083200:	04000a0e 	bge	zero,r16,8008322c <___svfprintf_internal_r+0x14d4>
80083204:	d9001f17 	ldw	r4,124(sp)
80083208:	1c07883a 	add	r3,r3,r16
8008320c:	44400015 	stw	r17,0(r8)
80083210:	21000044 	addi	r4,r4,1
80083214:	44000115 	stw	r16,4(r8)
80083218:	d8c02015 	stw	r3,128(sp)
8008321c:	d9001f15 	stw	r4,124(sp)
80083220:	014001c4 	movi	r5,7
80083224:	2901e616 	blt	r5,r4,800839c0 <___svfprintf_internal_r+0x1c68>
80083228:	42000204 	addi	r8,r8,8
8008322c:	8001f616 	blt	r16,zero,80083a08 <___svfprintf_internal_r+0x1cb0>
80083230:	1421c83a 	sub	r16,r2,r16
80083234:	043d1c0e 	bge	zero,r16,800826a8 <___svfprintf_internal_r+0x950>
80083238:	04400404 	movi	r17,16
8008323c:	d8801f17 	ldw	r2,124(sp)
80083240:	8c3edd0e 	bge	r17,r16,80082db8 <___svfprintf_internal_r+0x1060>
80083244:	01600274 	movhi	r5,32777
80083248:	295a9284 	addi	r5,r5,27210
8008324c:	d9402b15 	stw	r5,172(sp)
80083250:	058001c4 	movi	r22,7
80083254:	dd002c17 	ldw	r20,176(sp)
80083258:	00000306 	br	80083268 <___svfprintf_internal_r+0x1510>
8008325c:	42000204 	addi	r8,r8,8
80083260:	843ffc04 	addi	r16,r16,-16
80083264:	8c3ed70e 	bge	r17,r16,80082dc4 <___svfprintf_internal_r+0x106c>
80083268:	18c00404 	addi	r3,r3,16
8008326c:	10800044 	addi	r2,r2,1
80083270:	45400015 	stw	r21,0(r8)
80083274:	44400115 	stw	r17,4(r8)
80083278:	d8c02015 	stw	r3,128(sp)
8008327c:	d8801f15 	stw	r2,124(sp)
80083280:	b0bff60e 	bge	r22,r2,8008325c <___svfprintf_internal_r+0x1504>
80083284:	d9801e04 	addi	r6,sp,120
80083288:	a00b883a 	mov	r5,r20
8008328c:	9809883a 	mov	r4,r19
80083290:	008b7440 	call	8008b744 <__ssprint_r>
80083294:	103b951e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083298:	d8c02017 	ldw	r3,128(sp)
8008329c:	d8801f17 	ldw	r2,124(sp)
800832a0:	da000404 	addi	r8,sp,16
800832a4:	003fee06 	br	80083260 <___svfprintf_internal_r+0x1508>
800832a8:	9088703a 	and	r4,r18,r2
800832ac:	203e8d1e 	bne	r4,zero,80082ce4 <___svfprintf_internal_r+0xf8c>
800832b0:	dc401f17 	ldw	r17,124(sp)
800832b4:	40800115 	stw	r2,4(r8)
800832b8:	44000015 	stw	r16,0(r8)
800832bc:	8c400044 	addi	r17,r17,1
800832c0:	d8c02015 	stw	r3,128(sp)
800832c4:	dc401f15 	stw	r17,124(sp)
800832c8:	008001c4 	movi	r2,7
800832cc:	147f7f16 	blt	r2,r17,800830cc <___svfprintf_internal_r+0x1374>
800832d0:	45800204 	addi	r22,r8,8
800832d4:	003eac06 	br	80082d88 <___svfprintf_internal_r+0x1030>
800832d8:	d9402c17 	ldw	r5,176(sp)
800832dc:	d9801e04 	addi	r6,sp,120
800832e0:	9809883a 	mov	r4,r19
800832e4:	008b7440 	call	8008b744 <__ssprint_r>
800832e8:	103b801e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
800832ec:	d8c02017 	ldw	r3,128(sp)
800832f0:	dc401f17 	ldw	r17,124(sp)
800832f4:	da000404 	addi	r8,sp,16
800832f8:	003e8406 	br	80082d0c <___svfprintf_internal_r+0xfb4>
800832fc:	d9402c17 	ldw	r5,176(sp)
80083300:	d9801e04 	addi	r6,sp,120
80083304:	9809883a 	mov	r4,r19
80083308:	008b7440 	call	8008b744 <__ssprint_r>
8008330c:	103b771e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083310:	d8c02017 	ldw	r3,128(sp)
80083314:	dc401f17 	ldw	r17,124(sp)
80083318:	dd800404 	addi	r22,sp,16
8008331c:	003e8606 	br	80082d38 <___svfprintf_internal_r+0xfe0>
80083320:	0029883a 	mov	r20,zero
80083324:	a5000c04 	addi	r20,r20,48
80083328:	dc001dc4 	addi	r16,sp,119
8008332c:	dd001dc5 	stb	r20,119(sp)
80083330:	003f3806 	br	80083014 <___svfprintf_internal_r+0x12bc>
80083334:	d9402c17 	ldw	r5,176(sp)
80083338:	d9801e04 	addi	r6,sp,120
8008333c:	9809883a 	mov	r4,r19
80083340:	008b7440 	call	8008b744 <__ssprint_r>
80083344:	103b691e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083348:	d8c02017 	ldw	r3,128(sp)
8008334c:	da000404 	addi	r8,sp,16
80083350:	003c9506 	br	800825a8 <___svfprintf_internal_r+0x850>
80083354:	d9003617 	ldw	r4,216(sp)
80083358:	d9403717 	ldw	r5,220(sp)
8008335c:	da003e15 	stw	r8,248(sp)
80083360:	008b4640 	call	8008b464 <__fpclassifyd>
80083364:	da003e17 	ldw	r8,248(sp)
80083368:	1000bd1e 	bne	r2,zero,80083660 <___svfprintf_internal_r+0x1908>
8008336c:	008011c4 	movi	r2,71
80083370:	14411e0e 	bge	r2,r17,800837ec <___svfprintf_internal_r+0x1a94>
80083374:	04200274 	movhi	r16,32777
80083378:	841a8504 	addi	r16,r16,27156
8008337c:	00c000c4 	movi	r3,3
80083380:	00bfdfc4 	movi	r2,-129
80083384:	d8c02a15 	stw	r3,168(sp)
80083388:	90a4703a 	and	r18,r18,r2
8008338c:	df002783 	ldbu	fp,158(sp)
80083390:	d8c02e15 	stw	r3,184(sp)
80083394:	d8002915 	stw	zero,164(sp)
80083398:	d8003215 	stw	zero,200(sp)
8008339c:	003c1c06 	br	80082410 <___svfprintf_internal_r+0x6b8>
800833a0:	9080100c 	andi	r2,r18,64
800833a4:	d8002785 	stb	zero,158(sp)
800833a8:	10009426 	beq	r2,zero,800835fc <___svfprintf_internal_r+0x18a4>
800833ac:	d8c02d17 	ldw	r3,180(sp)
800833b0:	d9002917 	ldw	r4,164(sp)
800833b4:	002d883a 	mov	r22,zero
800833b8:	18800104 	addi	r2,r3,4
800833bc:	1d00000b 	ldhu	r20,0(r3)
800833c0:	203ec10e 	bge	r4,zero,80082ec8 <___svfprintf_internal_r+0x1170>
800833c4:	a586b03a 	or	r3,r20,r22
800833c8:	d8802d15 	stw	r2,180(sp)
800833cc:	183ec21e 	bne	r3,zero,80082ed8 <___svfprintf_internal_r+0x1180>
800833d0:	0039883a 	mov	fp,zero
800833d4:	0005883a 	mov	r2,zero
800833d8:	003db806 	br	80082abc <___svfprintf_internal_r+0xd64>
800833dc:	d8802d17 	ldw	r2,180(sp)
800833e0:	d8c02d17 	ldw	r3,180(sp)
800833e4:	d9002d17 	ldw	r4,180(sp)
800833e8:	10800017 	ldw	r2,0(r2)
800833ec:	18c00117 	ldw	r3,4(r3)
800833f0:	21000204 	addi	r4,r4,8
800833f4:	d8803615 	stw	r2,216(sp)
800833f8:	d8c03715 	stw	r3,220(sp)
800833fc:	d9002d15 	stw	r4,180(sp)
80083400:	003b8206 	br	8008220c <___svfprintf_internal_r+0x4b4>
80083404:	9080100c 	andi	r2,r18,64
80083408:	10010726 	beq	r2,zero,80083828 <___svfprintf_internal_r+0x1ad0>
8008340c:	d8c02d17 	ldw	r3,180(sp)
80083410:	1d00000f 	ldh	r20,0(r3)
80083414:	18c00104 	addi	r3,r3,4
80083418:	d8c02d15 	stw	r3,180(sp)
8008341c:	a02dd7fa 	srai	r22,r20,31
80083420:	b005883a 	mov	r2,r22
80083424:	003ba206 	br	800822b0 <___svfprintf_internal_r+0x558>
80083428:	9080100c 	andi	r2,r18,64
8008342c:	10010526 	beq	r2,zero,80083844 <___svfprintf_internal_r+0x1aec>
80083430:	d9002d17 	ldw	r4,180(sp)
80083434:	002d883a 	mov	r22,zero
80083438:	2500000b 	ldhu	r20,0(r4)
8008343c:	21000104 	addi	r4,r4,4
80083440:	d9002d15 	stw	r4,180(sp)
80083444:	003cfe06 	br	80082840 <___svfprintf_internal_r+0xae8>
80083448:	bc400007 	ldb	r17,0(r23)
8008344c:	003a9606 	br	80081ea8 <___svfprintf_internal_r+0x150>
80083450:	9080040c 	andi	r2,r18,16
80083454:	10010126 	beq	r2,zero,8008385c <___svfprintf_internal_r+0x1b04>
80083458:	d9402d17 	ldw	r5,180(sp)
8008345c:	d8c02f17 	ldw	r3,188(sp)
80083460:	28800017 	ldw	r2,0(r5)
80083464:	29400104 	addi	r5,r5,4
80083468:	d9402d15 	stw	r5,180(sp)
8008346c:	10c00015 	stw	r3,0(r2)
80083470:	003a6406 	br	80081e04 <___svfprintf_internal_r+0xac>
80083474:	d9002917 	ldw	r4,164(sp)
80083478:	d8002785 	stb	zero,158(sp)
8008347c:	203d8d16 	blt	r4,zero,80082ab4 <___svfprintf_internal_r+0xd5c>
80083480:	00bfdfc4 	movi	r2,-129
80083484:	90a4703a 	and	r18,r18,r2
80083488:	003b0506 	br	800820a0 <___svfprintf_internal_r+0x348>
8008348c:	01600274 	movhi	r5,32777
80083490:	295a9284 	addi	r5,r5,27210
80083494:	d9402b15 	stw	r5,172(sp)
80083498:	d9402b17 	ldw	r5,172(sp)
8008349c:	1c47883a 	add	r3,r3,r17
800834a0:	10800044 	addi	r2,r2,1
800834a4:	41400015 	stw	r5,0(r8)
800834a8:	44400115 	stw	r17,4(r8)
800834ac:	d8c02015 	stw	r3,128(sp)
800834b0:	d8801f15 	stw	r2,124(sp)
800834b4:	010001c4 	movi	r4,7
800834b8:	20bf3016 	blt	r4,r2,8008317c <___svfprintf_internal_r+0x1424>
800834bc:	42000204 	addi	r8,r8,8
800834c0:	003f3506 	br	80083198 <___svfprintf_internal_r+0x1440>
800834c4:	01200274 	movhi	r4,32777
800834c8:	211a9284 	addi	r4,r4,27210
800834cc:	d9002b15 	stw	r4,172(sp)
800834d0:	003c5e06 	br	8008264c <___svfprintf_internal_r+0x8f4>
800834d4:	d9402c17 	ldw	r5,176(sp)
800834d8:	d9801e04 	addi	r6,sp,120
800834dc:	9809883a 	mov	r4,r19
800834e0:	008b7440 	call	8008b744 <__ssprint_r>
800834e4:	103b011e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
800834e8:	d8c02017 	ldw	r3,128(sp)
800834ec:	da000404 	addi	r8,sp,16
800834f0:	003d9306 	br	80082b40 <___svfprintf_internal_r+0xde8>
800834f4:	d8801f17 	ldw	r2,124(sp)
800834f8:	01600274 	movhi	r5,32777
800834fc:	01000044 	movi	r4,1
80083500:	18c00044 	addi	r3,r3,1
80083504:	10800044 	addi	r2,r2,1
80083508:	295a9204 	addi	r5,r5,27208
8008350c:	41000115 	stw	r4,4(r8)
80083510:	41400015 	stw	r5,0(r8)
80083514:	d8c02015 	stw	r3,128(sp)
80083518:	d8801f15 	stw	r2,124(sp)
8008351c:	010001c4 	movi	r4,7
80083520:	2080b516 	blt	r4,r2,800837f8 <___svfprintf_internal_r+0x1aa0>
80083524:	42000204 	addi	r8,r8,8
80083528:	8800041e 	bne	r17,zero,8008353c <___svfprintf_internal_r+0x17e4>
8008352c:	d8803317 	ldw	r2,204(sp)
80083530:	1000021e 	bne	r2,zero,8008353c <___svfprintf_internal_r+0x17e4>
80083534:	9080004c 	andi	r2,r18,1
80083538:	103c5b26 	beq	r2,zero,800826a8 <___svfprintf_internal_r+0x950>
8008353c:	d9003817 	ldw	r4,224(sp)
80083540:	d8801f17 	ldw	r2,124(sp)
80083544:	d9403417 	ldw	r5,208(sp)
80083548:	20c7883a 	add	r3,r4,r3
8008354c:	10800044 	addi	r2,r2,1
80083550:	41000115 	stw	r4,4(r8)
80083554:	41400015 	stw	r5,0(r8)
80083558:	d8c02015 	stw	r3,128(sp)
8008355c:	d8801f15 	stw	r2,124(sp)
80083560:	010001c4 	movi	r4,7
80083564:	20818016 	blt	r4,r2,80083b68 <___svfprintf_internal_r+0x1e10>
80083568:	42000204 	addi	r8,r8,8
8008356c:	0463c83a 	sub	r17,zero,r17
80083570:	0440cb0e 	bge	zero,r17,800838a0 <___svfprintf_internal_r+0x1b48>
80083574:	05800404 	movi	r22,16
80083578:	b440e80e 	bge	r22,r17,8008391c <___svfprintf_internal_r+0x1bc4>
8008357c:	01600274 	movhi	r5,32777
80083580:	295a9284 	addi	r5,r5,27210
80083584:	d9402b15 	stw	r5,172(sp)
80083588:	070001c4 	movi	fp,7
8008358c:	dd002c17 	ldw	r20,176(sp)
80083590:	00000306 	br	800835a0 <___svfprintf_internal_r+0x1848>
80083594:	42000204 	addi	r8,r8,8
80083598:	8c7ffc04 	addi	r17,r17,-16
8008359c:	b440e20e 	bge	r22,r17,80083928 <___svfprintf_internal_r+0x1bd0>
800835a0:	18c00404 	addi	r3,r3,16
800835a4:	10800044 	addi	r2,r2,1
800835a8:	45400015 	stw	r21,0(r8)
800835ac:	45800115 	stw	r22,4(r8)
800835b0:	d8c02015 	stw	r3,128(sp)
800835b4:	d8801f15 	stw	r2,124(sp)
800835b8:	e0bff60e 	bge	fp,r2,80083594 <___svfprintf_internal_r+0x183c>
800835bc:	d9801e04 	addi	r6,sp,120
800835c0:	a00b883a 	mov	r5,r20
800835c4:	9809883a 	mov	r4,r19
800835c8:	008b7440 	call	8008b744 <__ssprint_r>
800835cc:	103ac71e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
800835d0:	d8c02017 	ldw	r3,128(sp)
800835d4:	d8801f17 	ldw	r2,124(sp)
800835d8:	da000404 	addi	r8,sp,16
800835dc:	003fee06 	br	80083598 <___svfprintf_internal_r+0x1840>
800835e0:	d8c02d17 	ldw	r3,180(sp)
800835e4:	d9002917 	ldw	r4,164(sp)
800835e8:	002d883a 	mov	r22,zero
800835ec:	18800104 	addi	r2,r3,4
800835f0:	1d000017 	ldw	r20,0(r3)
800835f4:	203e7d0e 	bge	r4,zero,80082fec <___svfprintf_internal_r+0x1294>
800835f8:	003eda06 	br	80083164 <___svfprintf_internal_r+0x140c>
800835fc:	d9402d17 	ldw	r5,180(sp)
80083600:	d8c02917 	ldw	r3,164(sp)
80083604:	002d883a 	mov	r22,zero
80083608:	28800104 	addi	r2,r5,4
8008360c:	2d000017 	ldw	r20,0(r5)
80083610:	183e2d0e 	bge	r3,zero,80082ec8 <___svfprintf_internal_r+0x1170>
80083614:	003f6b06 	br	800833c4 <___svfprintf_internal_r+0x166c>
80083618:	d8c02d15 	stw	r3,180(sp)
8008361c:	0039883a 	mov	fp,zero
80083620:	003ed206 	br	8008316c <___svfprintf_internal_r+0x1414>
80083624:	bc400043 	ldbu	r17,1(r23)
80083628:	94800814 	ori	r18,r18,32
8008362c:	bdc00044 	addi	r23,r23,1
80083630:	8c403fcc 	andi	r17,r17,255
80083634:	8c40201c 	xori	r17,r17,128
80083638:	8c7fe004 	addi	r17,r17,-128
8008363c:	003a1a06 	br	80081ea8 <___svfprintf_internal_r+0x150>
80083640:	d9402c17 	ldw	r5,176(sp)
80083644:	d9801e04 	addi	r6,sp,120
80083648:	9809883a 	mov	r4,r19
8008364c:	008b7440 	call	8008b744 <__ssprint_r>
80083650:	103aa61e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083654:	d8c02017 	ldw	r3,128(sp)
80083658:	da000404 	addi	r8,sp,16
8008365c:	003d4a06 	br	80082b88 <___svfprintf_internal_r+0xe30>
80083660:	d9002917 	ldw	r4,164(sp)
80083664:	05bff7c4 	movi	r22,-33
80083668:	00bfffc4 	movi	r2,-1
8008366c:	8dac703a 	and	r22,r17,r22
80083670:	20806a26 	beq	r4,r2,8008381c <___svfprintf_internal_r+0x1ac4>
80083674:	008011c4 	movi	r2,71
80083678:	b0813726 	beq	r22,r2,80083b58 <___svfprintf_internal_r+0x1e00>
8008367c:	d9003717 	ldw	r4,220(sp)
80083680:	90c04014 	ori	r3,r18,256
80083684:	d8c02b15 	stw	r3,172(sp)
80083688:	20015d16 	blt	r4,zero,80083c00 <___svfprintf_internal_r+0x1ea8>
8008368c:	dd003717 	ldw	r20,220(sp)
80083690:	d8002a05 	stb	zero,168(sp)
80083694:	00801984 	movi	r2,102
80083698:	88814026 	beq	r17,r2,80083b9c <___svfprintf_internal_r+0x1e44>
8008369c:	00801184 	movi	r2,70
800836a0:	88817126 	beq	r17,r2,80083c68 <___svfprintf_internal_r+0x1f10>
800836a4:	00801144 	movi	r2,69
800836a8:	b0816226 	beq	r22,r2,80083c34 <___svfprintf_internal_r+0x1edc>
800836ac:	d8c02917 	ldw	r3,164(sp)
800836b0:	d8802104 	addi	r2,sp,132
800836b4:	d8800315 	stw	r2,12(sp)
800836b8:	d9403617 	ldw	r5,216(sp)
800836bc:	d8802504 	addi	r2,sp,148
800836c0:	d8800215 	stw	r2,8(sp)
800836c4:	d8802604 	addi	r2,sp,152
800836c8:	d8c00015 	stw	r3,0(sp)
800836cc:	d8800115 	stw	r2,4(sp)
800836d0:	01c00084 	movi	r7,2
800836d4:	a00d883a 	mov	r6,r20
800836d8:	9809883a 	mov	r4,r19
800836dc:	d8c03d15 	stw	r3,244(sp)
800836e0:	da003e15 	stw	r8,248(sp)
800836e4:	00866780 	call	80086678 <_dtoa_r>
800836e8:	1021883a 	mov	r16,r2
800836ec:	008019c4 	movi	r2,103
800836f0:	d8c03d17 	ldw	r3,244(sp)
800836f4:	da003e17 	ldw	r8,248(sp)
800836f8:	8880e726 	beq	r17,r2,80083a98 <___svfprintf_internal_r+0x1d40>
800836fc:	008011c4 	movi	r2,71
80083700:	8880d426 	beq	r17,r2,80083a54 <___svfprintf_internal_r+0x1cfc>
80083704:	80f9883a 	add	fp,r16,r3
80083708:	d9003617 	ldw	r4,216(sp)
8008370c:	000d883a 	mov	r6,zero
80083710:	000f883a 	mov	r7,zero
80083714:	a00b883a 	mov	r5,r20
80083718:	da003e15 	stw	r8,248(sp)
8008371c:	00908c40 	call	800908c4 <__eqdf2>
80083720:	da003e17 	ldw	r8,248(sp)
80083724:	1000e426 	beq	r2,zero,80083ab8 <___svfprintf_internal_r+0x1d60>
80083728:	d8802117 	ldw	r2,132(sp)
8008372c:	1700062e 	bgeu	r2,fp,80083748 <___svfprintf_internal_r+0x19f0>
80083730:	01000c04 	movi	r4,48
80083734:	10c00044 	addi	r3,r2,1
80083738:	d8c02115 	stw	r3,132(sp)
8008373c:	11000005 	stb	r4,0(r2)
80083740:	d8802117 	ldw	r2,132(sp)
80083744:	173ffb36 	bltu	r2,fp,80083734 <___svfprintf_internal_r+0x19dc>
80083748:	1405c83a 	sub	r2,r2,r16
8008374c:	d8803315 	stw	r2,204(sp)
80083750:	008011c4 	movi	r2,71
80083754:	b080c526 	beq	r22,r2,80083a6c <___svfprintf_internal_r+0x1d14>
80083758:	00801944 	movi	r2,101
8008375c:	1441d90e 	bge	r2,r17,80083ec4 <___svfprintf_internal_r+0x216c>
80083760:	d8c02617 	ldw	r3,152(sp)
80083764:	00801984 	movi	r2,102
80083768:	d8c03215 	stw	r3,200(sp)
8008376c:	88813426 	beq	r17,r2,80083c40 <___svfprintf_internal_r+0x1ee8>
80083770:	d8c03217 	ldw	r3,200(sp)
80083774:	d9003317 	ldw	r4,204(sp)
80083778:	19012516 	blt	r3,r4,80083c10 <___svfprintf_internal_r+0x1eb8>
8008377c:	9480004c 	andi	r18,r18,1
80083780:	9001841e 	bne	r18,zero,80083d94 <___svfprintf_internal_r+0x203c>
80083784:	1805883a 	mov	r2,r3
80083788:	1801cc16 	blt	r3,zero,80083ebc <___svfprintf_internal_r+0x2164>
8008378c:	d8c03217 	ldw	r3,200(sp)
80083790:	044019c4 	movi	r17,103
80083794:	d8c02e15 	stw	r3,184(sp)
80083798:	df002a07 	ldb	fp,168(sp)
8008379c:	e000a61e 	bne	fp,zero,80083a38 <___svfprintf_internal_r+0x1ce0>
800837a0:	df002783 	ldbu	fp,158(sp)
800837a4:	d8802a15 	stw	r2,168(sp)
800837a8:	dc802b17 	ldw	r18,172(sp)
800837ac:	d8002915 	stw	zero,164(sp)
800837b0:	003b1706 	br	80082410 <___svfprintf_internal_r+0x6b8>
800837b4:	04200274 	movhi	r16,32777
800837b8:	841a8204 	addi	r16,r16,27144
800837bc:	003aa606 	br	80082258 <___svfprintf_internal_r+0x500>
800837c0:	d9003917 	ldw	r4,228(sp)
800837c4:	04001004 	movi	r16,64
800837c8:	800b883a 	mov	r5,r16
800837cc:	00890580 	call	80089058 <_malloc_r>
800837d0:	d9002c17 	ldw	r4,176(sp)
800837d4:	20800015 	stw	r2,0(r4)
800837d8:	20800415 	stw	r2,16(r4)
800837dc:	1001cb26 	beq	r2,zero,80083f0c <___svfprintf_internal_r+0x21b4>
800837e0:	d8802c17 	ldw	r2,176(sp)
800837e4:	14000515 	stw	r16,20(r2)
800837e8:	00397606 	br	80081dc4 <___svfprintf_internal_r+0x6c>
800837ec:	04200274 	movhi	r16,32777
800837f0:	841a8404 	addi	r16,r16,27152
800837f4:	003ee106 	br	8008337c <___svfprintf_internal_r+0x1624>
800837f8:	d9402c17 	ldw	r5,176(sp)
800837fc:	d9801e04 	addi	r6,sp,120
80083800:	9809883a 	mov	r4,r19
80083804:	008b7440 	call	8008b744 <__ssprint_r>
80083808:	103a381e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
8008380c:	dc402617 	ldw	r17,152(sp)
80083810:	d8c02017 	ldw	r3,128(sp)
80083814:	da000404 	addi	r8,sp,16
80083818:	003f4306 	br	80083528 <___svfprintf_internal_r+0x17d0>
8008381c:	01400184 	movi	r5,6
80083820:	d9402915 	stw	r5,164(sp)
80083824:	003f9506 	br	8008367c <___svfprintf_internal_r+0x1924>
80083828:	d9002d17 	ldw	r4,180(sp)
8008382c:	25000017 	ldw	r20,0(r4)
80083830:	21000104 	addi	r4,r4,4
80083834:	d9002d15 	stw	r4,180(sp)
80083838:	a02dd7fa 	srai	r22,r20,31
8008383c:	b005883a 	mov	r2,r22
80083840:	003a9b06 	br	800822b0 <___svfprintf_internal_r+0x558>
80083844:	d9402d17 	ldw	r5,180(sp)
80083848:	002d883a 	mov	r22,zero
8008384c:	2d000017 	ldw	r20,0(r5)
80083850:	29400104 	addi	r5,r5,4
80083854:	d9402d15 	stw	r5,180(sp)
80083858:	003bf906 	br	80082840 <___svfprintf_internal_r+0xae8>
8008385c:	9480100c 	andi	r18,r18,64
80083860:	90006e26 	beq	r18,zero,80083a1c <___svfprintf_internal_r+0x1cc4>
80083864:	d9002d17 	ldw	r4,180(sp)
80083868:	d9402f17 	ldw	r5,188(sp)
8008386c:	20800017 	ldw	r2,0(r4)
80083870:	21000104 	addi	r4,r4,4
80083874:	d9002d15 	stw	r4,180(sp)
80083878:	1140000d 	sth	r5,0(r2)
8008387c:	00396106 	br	80081e04 <___svfprintf_internal_r+0xac>
80083880:	d9402c17 	ldw	r5,176(sp)
80083884:	d9801e04 	addi	r6,sp,120
80083888:	9809883a 	mov	r4,r19
8008388c:	008b7440 	call	8008b744 <__ssprint_r>
80083890:	103a161e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083894:	d8c02017 	ldw	r3,128(sp)
80083898:	d8801f17 	ldw	r2,124(sp)
8008389c:	da000404 	addi	r8,sp,16
800838a0:	d9403317 	ldw	r5,204(sp)
800838a4:	10800044 	addi	r2,r2,1
800838a8:	44000015 	stw	r16,0(r8)
800838ac:	28c7883a 	add	r3,r5,r3
800838b0:	003b7706 	br	80082690 <___svfprintf_internal_r+0x938>
800838b4:	8009883a 	mov	r4,r16
800838b8:	da003e15 	stw	r8,248(sp)
800838bc:	0081cc00 	call	80081cc0 <strlen>
800838c0:	d8802e15 	stw	r2,184(sp)
800838c4:	da003e17 	ldw	r8,248(sp)
800838c8:	103c280e 	bge	r2,zero,8008296c <___svfprintf_internal_r+0xc14>
800838cc:	0005883a 	mov	r2,zero
800838d0:	003c2606 	br	8008296c <___svfprintf_internal_r+0xc14>
800838d4:	00bfffc4 	movi	r2,-1
800838d8:	003a0906 	br	80082100 <___svfprintf_internal_r+0x3a8>
800838dc:	01200274 	movhi	r4,32777
800838e0:	211a9684 	addi	r4,r4,27226
800838e4:	d9003515 	stw	r4,212(sp)
800838e8:	003b0606 	br	80082504 <___svfprintf_internal_r+0x7ac>
800838ec:	013fffc4 	movi	r4,-1
800838f0:	003a2706 	br	80082190 <___svfprintf_internal_r+0x438>
800838f4:	d9402c17 	ldw	r5,176(sp)
800838f8:	d9801e04 	addi	r6,sp,120
800838fc:	9809883a 	mov	r4,r19
80083900:	008b7440 	call	8008b744 <__ssprint_r>
80083904:	1039f91e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083908:	d8c02017 	ldw	r3,128(sp)
8008390c:	da000404 	addi	r8,sp,16
80083910:	003d8406 	br	80082f24 <___svfprintf_internal_r+0x11cc>
80083914:	0023883a 	mov	r17,zero
80083918:	003d8306 	br	80082f28 <___svfprintf_internal_r+0x11d0>
8008391c:	01200274 	movhi	r4,32777
80083920:	211a9284 	addi	r4,r4,27210
80083924:	d9002b15 	stw	r4,172(sp)
80083928:	d9002b17 	ldw	r4,172(sp)
8008392c:	1c47883a 	add	r3,r3,r17
80083930:	10800044 	addi	r2,r2,1
80083934:	41000015 	stw	r4,0(r8)
80083938:	44400115 	stw	r17,4(r8)
8008393c:	d8c02015 	stw	r3,128(sp)
80083940:	d8801f15 	stw	r2,124(sp)
80083944:	010001c4 	movi	r4,7
80083948:	20bfcd16 	blt	r4,r2,80083880 <___svfprintf_internal_r+0x1b28>
8008394c:	42000204 	addi	r8,r8,8
80083950:	003fd306 	br	800838a0 <___svfprintf_internal_r+0x1b48>
80083954:	d9402c17 	ldw	r5,176(sp)
80083958:	d9801e04 	addi	r6,sp,120
8008395c:	9809883a 	mov	r4,r19
80083960:	008b7440 	call	8008b744 <__ssprint_r>
80083964:	1039e11e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083968:	d8802617 	ldw	r2,152(sp)
8008396c:	d8c02017 	ldw	r3,128(sp)
80083970:	da000404 	addi	r8,sp,16
80083974:	003e1c06 	br	800831e8 <___svfprintf_internal_r+0x1490>
80083978:	d8802917 	ldw	r2,164(sp)
8008397c:	00c00184 	movi	r3,6
80083980:	1880012e 	bgeu	r3,r2,80083988 <___svfprintf_internal_r+0x1c30>
80083984:	1805883a 	mov	r2,r3
80083988:	d8802e15 	stw	r2,184(sp)
8008398c:	1000f316 	blt	r2,zero,80083d5c <___svfprintf_internal_r+0x2004>
80083990:	04200274 	movhi	r16,32777
80083994:	d8802a15 	stw	r2,168(sp)
80083998:	dd002d15 	stw	r20,180(sp)
8008399c:	d8002915 	stw	zero,164(sp)
800839a0:	d8003215 	stw	zero,200(sp)
800839a4:	841a9004 	addi	r16,r16,27200
800839a8:	0039883a 	mov	fp,zero
800839ac:	003a9f06 	br	8008242c <___svfprintf_internal_r+0x6d4>
800839b0:	01200274 	movhi	r4,32777
800839b4:	211a9684 	addi	r4,r4,27226
800839b8:	d9003515 	stw	r4,212(sp)
800839bc:	003b5f06 	br	8008273c <___svfprintf_internal_r+0x9e4>
800839c0:	d9402c17 	ldw	r5,176(sp)
800839c4:	d9801e04 	addi	r6,sp,120
800839c8:	9809883a 	mov	r4,r19
800839cc:	008b7440 	call	8008b744 <__ssprint_r>
800839d0:	1039c61e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
800839d4:	d8802617 	ldw	r2,152(sp)
800839d8:	d9403317 	ldw	r5,204(sp)
800839dc:	d8c02017 	ldw	r3,128(sp)
800839e0:	da000404 	addi	r8,sp,16
800839e4:	2885c83a 	sub	r2,r5,r2
800839e8:	003e1006 	br	8008322c <___svfprintf_internal_r+0x14d4>
800839ec:	00800044 	movi	r2,1
800839f0:	10803fcc 	andi	r2,r2,255
800839f4:	00c00044 	movi	r3,1
800839f8:	10fa3526 	beq	r2,r3,800822d0 <___svfprintf_internal_r+0x578>
800839fc:	00c00084 	movi	r3,2
80083a00:	10fb9e26 	beq	r2,r3,8008287c <___svfprintf_internal_r+0xb24>
80083a04:	003a6406 	br	80082398 <___svfprintf_internal_r+0x640>
80083a08:	0021883a 	mov	r16,zero
80083a0c:	003e0806 	br	80083230 <___svfprintf_internal_r+0x14d8>
80083a10:	07000b44 	movi	fp,45
80083a14:	df002785 	stb	fp,158(sp)
80083a18:	003a0b06 	br	80082248 <___svfprintf_internal_r+0x4f0>
80083a1c:	d8c02d17 	ldw	r3,180(sp)
80083a20:	d9002f17 	ldw	r4,188(sp)
80083a24:	18800017 	ldw	r2,0(r3)
80083a28:	18c00104 	addi	r3,r3,4
80083a2c:	d8c02d15 	stw	r3,180(sp)
80083a30:	11000015 	stw	r4,0(r2)
80083a34:	0038f306 	br	80081e04 <___svfprintf_internal_r+0xac>
80083a38:	00c00b44 	movi	r3,45
80083a3c:	d8c02785 	stb	r3,158(sp)
80083a40:	d8802a15 	stw	r2,168(sp)
80083a44:	dc802b17 	ldw	r18,172(sp)
80083a48:	d8002915 	stw	zero,164(sp)
80083a4c:	07000b44 	movi	fp,45
80083a50:	003a7306 	br	80082420 <___svfprintf_internal_r+0x6c8>
80083a54:	9080004c 	andi	r2,r18,1
80083a58:	1000941e 	bne	r2,zero,80083cac <___svfprintf_internal_r+0x1f54>
80083a5c:	d8802117 	ldw	r2,132(sp)
80083a60:	1405c83a 	sub	r2,r2,r16
80083a64:	d8803315 	stw	r2,204(sp)
80083a68:	b441161e 	bne	r22,r17,80083ec4 <___svfprintf_internal_r+0x216c>
80083a6c:	dd802617 	ldw	r22,152(sp)
80083a70:	00bfff44 	movi	r2,-3
80083a74:	b0801a16 	blt	r22,r2,80083ae0 <___svfprintf_internal_r+0x1d88>
80083a78:	d9402917 	ldw	r5,164(sp)
80083a7c:	2d801816 	blt	r5,r22,80083ae0 <___svfprintf_internal_r+0x1d88>
80083a80:	dd803215 	stw	r22,200(sp)
80083a84:	003f3a06 	br	80083770 <___svfprintf_internal_r+0x1a18>
80083a88:	1025883a 	mov	r18,r2
80083a8c:	0039883a 	mov	fp,zero
80083a90:	00800084 	movi	r2,2
80083a94:	003fd606 	br	800839f0 <___svfprintf_internal_r+0x1c98>
80083a98:	9080004c 	andi	r2,r18,1
80083a9c:	103f191e 	bne	r2,zero,80083704 <___svfprintf_internal_r+0x19ac>
80083aa0:	d8802117 	ldw	r2,132(sp)
80083aa4:	003f2806 	br	80083748 <___svfprintf_internal_r+0x19f0>
80083aa8:	01200274 	movhi	r4,32777
80083aac:	211a9284 	addi	r4,r4,27210
80083ab0:	d9002b15 	stw	r4,172(sp)
80083ab4:	003c7c06 	br	80082ca8 <___svfprintf_internal_r+0xf50>
80083ab8:	e005883a 	mov	r2,fp
80083abc:	003f2206 	br	80083748 <___svfprintf_internal_r+0x19f0>
80083ac0:	d9402917 	ldw	r5,164(sp)
80083ac4:	df002783 	ldbu	fp,158(sp)
80083ac8:	dd002d15 	stw	r20,180(sp)
80083acc:	d9402a15 	stw	r5,168(sp)
80083ad0:	d9402e15 	stw	r5,184(sp)
80083ad4:	d8002915 	stw	zero,164(sp)
80083ad8:	d8003215 	stw	zero,200(sp)
80083adc:	003a4c06 	br	80082410 <___svfprintf_internal_r+0x6b8>
80083ae0:	8c7fff84 	addi	r17,r17,-2
80083ae4:	b5bfffc4 	addi	r22,r22,-1
80083ae8:	dd802615 	stw	r22,152(sp)
80083aec:	dc4022c5 	stb	r17,139(sp)
80083af0:	b000c316 	blt	r22,zero,80083e00 <___svfprintf_internal_r+0x20a8>
80083af4:	00800ac4 	movi	r2,43
80083af8:	d8802305 	stb	r2,140(sp)
80083afc:	00800244 	movi	r2,9
80083b00:	15806e16 	blt	r2,r22,80083cbc <___svfprintf_internal_r+0x1f64>
80083b04:	00800c04 	movi	r2,48
80083b08:	b5800c04 	addi	r22,r22,48
80083b0c:	d8802345 	stb	r2,141(sp)
80083b10:	dd802385 	stb	r22,142(sp)
80083b14:	d88023c4 	addi	r2,sp,143
80083b18:	df0022c4 	addi	fp,sp,139
80083b1c:	d8c03317 	ldw	r3,204(sp)
80083b20:	1739c83a 	sub	fp,r2,fp
80083b24:	d9003317 	ldw	r4,204(sp)
80083b28:	e0c7883a 	add	r3,fp,r3
80083b2c:	df003b15 	stw	fp,236(sp)
80083b30:	d8c02e15 	stw	r3,184(sp)
80083b34:	00800044 	movi	r2,1
80083b38:	1100b70e 	bge	r2,r4,80083e18 <___svfprintf_internal_r+0x20c0>
80083b3c:	d8c02e17 	ldw	r3,184(sp)
80083b40:	18c00044 	addi	r3,r3,1
80083b44:	d8c02e15 	stw	r3,184(sp)
80083b48:	1805883a 	mov	r2,r3
80083b4c:	1800b016 	blt	r3,zero,80083e10 <___svfprintf_internal_r+0x20b8>
80083b50:	d8003215 	stw	zero,200(sp)
80083b54:	003f1006 	br	80083798 <___svfprintf_internal_r+0x1a40>
80083b58:	d8802917 	ldw	r2,164(sp)
80083b5c:	103ec71e 	bne	r2,zero,8008367c <___svfprintf_internal_r+0x1924>
80083b60:	dc002915 	stw	r16,164(sp)
80083b64:	003ec506 	br	8008367c <___svfprintf_internal_r+0x1924>
80083b68:	d9402c17 	ldw	r5,176(sp)
80083b6c:	d9801e04 	addi	r6,sp,120
80083b70:	9809883a 	mov	r4,r19
80083b74:	008b7440 	call	8008b744 <__ssprint_r>
80083b78:	10395c1e 	bne	r2,zero,800820ec <___svfprintf_internal_r+0x394>
80083b7c:	dc402617 	ldw	r17,152(sp)
80083b80:	d8c02017 	ldw	r3,128(sp)
80083b84:	d8801f17 	ldw	r2,124(sp)
80083b88:	da000404 	addi	r8,sp,16
80083b8c:	003e7706 	br	8008356c <___svfprintf_internal_r+0x1814>
80083b90:	582f883a 	mov	r23,r11
80083b94:	d8002915 	stw	zero,164(sp)
80083b98:	0038c406 	br	80081eac <___svfprintf_internal_r+0x154>
80083b9c:	d8c02917 	ldw	r3,164(sp)
80083ba0:	d8802104 	addi	r2,sp,132
80083ba4:	d8800315 	stw	r2,12(sp)
80083ba8:	d9403617 	ldw	r5,216(sp)
80083bac:	d8802504 	addi	r2,sp,148
80083bb0:	d8800215 	stw	r2,8(sp)
80083bb4:	d8802604 	addi	r2,sp,152
80083bb8:	d8c00015 	stw	r3,0(sp)
80083bbc:	9809883a 	mov	r4,r19
80083bc0:	d8800115 	stw	r2,4(sp)
80083bc4:	01c000c4 	movi	r7,3
80083bc8:	a00d883a 	mov	r6,r20
80083bcc:	da003e15 	stw	r8,248(sp)
80083bd0:	00866780 	call	80086678 <_dtoa_r>
80083bd4:	d9002917 	ldw	r4,164(sp)
80083bd8:	da003e17 	ldw	r8,248(sp)
80083bdc:	1021883a 	mov	r16,r2
80083be0:	1139883a 	add	fp,r2,r4
80083be4:	2007883a 	mov	r3,r4
80083be8:	81000007 	ldb	r4,0(r16)
80083bec:	00800c04 	movi	r2,48
80083bf0:	20806f26 	beq	r4,r2,80083db0 <___svfprintf_internal_r+0x2058>
80083bf4:	d8c02617 	ldw	r3,152(sp)
80083bf8:	e0f9883a 	add	fp,fp,r3
80083bfc:	003ec206 	br	80083708 <___svfprintf_internal_r+0x19b0>
80083c00:	00c00b44 	movi	r3,45
80083c04:	2520003c 	xorhi	r20,r4,32768
80083c08:	d8c02a05 	stb	r3,168(sp)
80083c0c:	003ea106 	br	80083694 <___svfprintf_internal_r+0x193c>
80083c10:	d8c03217 	ldw	r3,200(sp)
80083c14:	00c0890e 	bge	zero,r3,80083e3c <___svfprintf_internal_r+0x20e4>
80083c18:	00800044 	movi	r2,1
80083c1c:	d9003317 	ldw	r4,204(sp)
80083c20:	1105883a 	add	r2,r2,r4
80083c24:	d8802e15 	stw	r2,184(sp)
80083c28:	10005f16 	blt	r2,zero,80083da8 <___svfprintf_internal_r+0x2050>
80083c2c:	044019c4 	movi	r17,103
80083c30:	003ed906 	br	80083798 <___svfprintf_internal_r+0x1a40>
80083c34:	d9002917 	ldw	r4,164(sp)
80083c38:	20c00044 	addi	r3,r4,1
80083c3c:	003e9c06 	br	800836b0 <___svfprintf_internal_r+0x1958>
80083c40:	d9002917 	ldw	r4,164(sp)
80083c44:	00c0680e 	bge	zero,r3,80083de8 <___svfprintf_internal_r+0x2090>
80083c48:	2000461e 	bne	r4,zero,80083d64 <___svfprintf_internal_r+0x200c>
80083c4c:	9480004c 	andi	r18,r18,1
80083c50:	9000441e 	bne	r18,zero,80083d64 <___svfprintf_internal_r+0x200c>
80083c54:	1805883a 	mov	r2,r3
80083c58:	1800a016 	blt	r3,zero,80083edc <___svfprintf_internal_r+0x2184>
80083c5c:	d8c03217 	ldw	r3,200(sp)
80083c60:	d8c02e15 	stw	r3,184(sp)
80083c64:	003ecc06 	br	80083798 <___svfprintf_internal_r+0x1a40>
80083c68:	d9402917 	ldw	r5,164(sp)
80083c6c:	d8802104 	addi	r2,sp,132
80083c70:	d8800315 	stw	r2,12(sp)
80083c74:	d9400015 	stw	r5,0(sp)
80083c78:	d8802504 	addi	r2,sp,148
80083c7c:	d9403617 	ldw	r5,216(sp)
80083c80:	d8800215 	stw	r2,8(sp)
80083c84:	d8802604 	addi	r2,sp,152
80083c88:	d8800115 	stw	r2,4(sp)
80083c8c:	01c000c4 	movi	r7,3
80083c90:	a00d883a 	mov	r6,r20
80083c94:	9809883a 	mov	r4,r19
80083c98:	da003e15 	stw	r8,248(sp)
80083c9c:	00866780 	call	80086678 <_dtoa_r>
80083ca0:	d8c02917 	ldw	r3,164(sp)
80083ca4:	da003e17 	ldw	r8,248(sp)
80083ca8:	1021883a 	mov	r16,r2
80083cac:	00801184 	movi	r2,70
80083cb0:	80f9883a 	add	fp,r16,r3
80083cb4:	88bfcc26 	beq	r17,r2,80083be8 <___svfprintf_internal_r+0x1e90>
80083cb8:	003e9306 	br	80083708 <___svfprintf_internal_r+0x19b0>
80083cbc:	df0022c4 	addi	fp,sp,139
80083cc0:	dc002915 	stw	r16,164(sp)
80083cc4:	9829883a 	mov	r20,r19
80083cc8:	e021883a 	mov	r16,fp
80083ccc:	4027883a 	mov	r19,r8
80083cd0:	b009883a 	mov	r4,r22
80083cd4:	01400284 	movi	r5,10
80083cd8:	008f6000 	call	8008f600 <__modsi3>
80083cdc:	10800c04 	addi	r2,r2,48
80083ce0:	843fffc4 	addi	r16,r16,-1
80083ce4:	b009883a 	mov	r4,r22
80083ce8:	01400284 	movi	r5,10
80083cec:	80800005 	stb	r2,0(r16)
80083cf0:	008f57c0 	call	8008f57c <__divsi3>
80083cf4:	102d883a 	mov	r22,r2
80083cf8:	00800244 	movi	r2,9
80083cfc:	15bff416 	blt	r2,r22,80083cd0 <___svfprintf_internal_r+0x1f78>
80083d00:	9811883a 	mov	r8,r19
80083d04:	b0800c04 	addi	r2,r22,48
80083d08:	a027883a 	mov	r19,r20
80083d0c:	8029883a 	mov	r20,r16
80083d10:	a17fffc4 	addi	r5,r20,-1
80083d14:	a0bfffc5 	stb	r2,-1(r20)
80083d18:	dc002917 	ldw	r16,164(sp)
80083d1c:	2f00752e 	bgeu	r5,fp,80083ef4 <___svfprintf_internal_r+0x219c>
80083d20:	d9c02384 	addi	r7,sp,142
80083d24:	3d0fc83a 	sub	r7,r7,r20
80083d28:	d9002344 	addi	r4,sp,141
80083d2c:	e1cf883a 	add	r7,fp,r7
80083d30:	00000106 	br	80083d38 <___svfprintf_internal_r+0x1fe0>
80083d34:	28800003 	ldbu	r2,0(r5)
80083d38:	20800005 	stb	r2,0(r4)
80083d3c:	21000044 	addi	r4,r4,1
80083d40:	29400044 	addi	r5,r5,1
80083d44:	21fffb1e 	bne	r4,r7,80083d34 <___svfprintf_internal_r+0x1fdc>
80083d48:	d8802304 	addi	r2,sp,140
80083d4c:	1505c83a 	sub	r2,r2,r20
80083d50:	d8c02344 	addi	r3,sp,141
80083d54:	1885883a 	add	r2,r3,r2
80083d58:	003f7006 	br	80083b1c <___svfprintf_internal_r+0x1dc4>
80083d5c:	0005883a 	mov	r2,zero
80083d60:	003f0b06 	br	80083990 <___svfprintf_internal_r+0x1c38>
80083d64:	d9002917 	ldw	r4,164(sp)
80083d68:	d8c03217 	ldw	r3,200(sp)
80083d6c:	20800044 	addi	r2,r4,1
80083d70:	1885883a 	add	r2,r3,r2
80083d74:	d8802e15 	stw	r2,184(sp)
80083d78:	103e870e 	bge	r2,zero,80083798 <___svfprintf_internal_r+0x1a40>
80083d7c:	0005883a 	mov	r2,zero
80083d80:	003e8506 	br	80083798 <___svfprintf_internal_r+0x1a40>
80083d84:	01200274 	movhi	r4,32777
80083d88:	211a9284 	addi	r4,r4,27210
80083d8c:	d9002b15 	stw	r4,172(sp)
80083d90:	003cc506 	br	800830a8 <___svfprintf_internal_r+0x1350>
80083d94:	d8c03217 	ldw	r3,200(sp)
80083d98:	18c00044 	addi	r3,r3,1
80083d9c:	d8c02e15 	stw	r3,184(sp)
80083da0:	1805883a 	mov	r2,r3
80083da4:	183fa10e 	bge	r3,zero,80083c2c <___svfprintf_internal_r+0x1ed4>
80083da8:	0005883a 	mov	r2,zero
80083dac:	003f9f06 	br	80083c2c <___svfprintf_internal_r+0x1ed4>
80083db0:	d9003617 	ldw	r4,216(sp)
80083db4:	000d883a 	mov	r6,zero
80083db8:	000f883a 	mov	r7,zero
80083dbc:	a00b883a 	mov	r5,r20
80083dc0:	d8c03d15 	stw	r3,244(sp)
80083dc4:	da003e15 	stw	r8,248(sp)
80083dc8:	00908c40 	call	800908c4 <__eqdf2>
80083dcc:	d8c03d17 	ldw	r3,244(sp)
80083dd0:	da003e17 	ldw	r8,248(sp)
80083dd4:	103f8726 	beq	r2,zero,80083bf4 <___svfprintf_internal_r+0x1e9c>
80083dd8:	00800044 	movi	r2,1
80083ddc:	10c7c83a 	sub	r3,r2,r3
80083de0:	d8c02615 	stw	r3,152(sp)
80083de4:	003f8406 	br	80083bf8 <___svfprintf_internal_r+0x1ea0>
80083de8:	20000e1e 	bne	r4,zero,80083e24 <___svfprintf_internal_r+0x20cc>
80083dec:	9480004c 	andi	r18,r18,1
80083df0:	90000c1e 	bne	r18,zero,80083e24 <___svfprintf_internal_r+0x20cc>
80083df4:	00800044 	movi	r2,1
80083df8:	d8802e15 	stw	r2,184(sp)
80083dfc:	003e6606 	br	80083798 <___svfprintf_internal_r+0x1a40>
80083e00:	00800b44 	movi	r2,45
80083e04:	05adc83a 	sub	r22,zero,r22
80083e08:	d8802305 	stb	r2,140(sp)
80083e0c:	003f3b06 	br	80083afc <___svfprintf_internal_r+0x1da4>
80083e10:	0005883a 	mov	r2,zero
80083e14:	003f4e06 	br	80083b50 <___svfprintf_internal_r+0x1df8>
80083e18:	90a4703a 	and	r18,r18,r2
80083e1c:	903f4a26 	beq	r18,zero,80083b48 <___svfprintf_internal_r+0x1df0>
80083e20:	003f4606 	br	80083b3c <___svfprintf_internal_r+0x1de4>
80083e24:	d8c02917 	ldw	r3,164(sp)
80083e28:	18c00084 	addi	r3,r3,2
80083e2c:	d8c02e15 	stw	r3,184(sp)
80083e30:	1805883a 	mov	r2,r3
80083e34:	183e580e 	bge	r3,zero,80083798 <___svfprintf_internal_r+0x1a40>
80083e38:	003fd006 	br	80083d7c <___svfprintf_internal_r+0x2024>
80083e3c:	00800084 	movi	r2,2
80083e40:	10c5c83a 	sub	r2,r2,r3
80083e44:	003f7506 	br	80083c1c <___svfprintf_internal_r+0x1ec4>
80083e48:	d8802d17 	ldw	r2,180(sp)
80083e4c:	d9002d17 	ldw	r4,180(sp)
80083e50:	bc400043 	ldbu	r17,1(r23)
80083e54:	10800017 	ldw	r2,0(r2)
80083e58:	582f883a 	mov	r23,r11
80083e5c:	d8802915 	stw	r2,164(sp)
80083e60:	20800104 	addi	r2,r4,4
80083e64:	d9002917 	ldw	r4,164(sp)
80083e68:	d8802d15 	stw	r2,180(sp)
80083e6c:	203df00e 	bge	r4,zero,80083630 <___svfprintf_internal_r+0x18d8>
80083e70:	8c403fcc 	andi	r17,r17,255
80083e74:	00bfffc4 	movi	r2,-1
80083e78:	8c40201c 	xori	r17,r17,128
80083e7c:	d8802915 	stw	r2,164(sp)
80083e80:	8c7fe004 	addi	r17,r17,-128
80083e84:	00380806 	br	80081ea8 <___svfprintf_internal_r+0x150>
80083e88:	9080004c 	andi	r2,r18,1
80083e8c:	0039883a 	mov	fp,zero
80083e90:	10000726 	beq	r2,zero,80083eb0 <___svfprintf_internal_r+0x2158>
80083e94:	d8c02817 	ldw	r3,160(sp)
80083e98:	dc001dc4 	addi	r16,sp,119
80083e9c:	00800c04 	movi	r2,48
80083ea0:	1c07c83a 	sub	r3,r3,r16
80083ea4:	d8801dc5 	stb	r2,119(sp)
80083ea8:	d8c02e15 	stw	r3,184(sp)
80083eac:	00395206 	br	800823f8 <___svfprintf_internal_r+0x6a0>
80083eb0:	d8002e15 	stw	zero,184(sp)
80083eb4:	dc001e04 	addi	r16,sp,120
80083eb8:	00394f06 	br	800823f8 <___svfprintf_internal_r+0x6a0>
80083ebc:	0005883a 	mov	r2,zero
80083ec0:	003e3206 	br	8008378c <___svfprintf_internal_r+0x1a34>
80083ec4:	dd802617 	ldw	r22,152(sp)
80083ec8:	003f0606 	br	80083ae4 <___svfprintf_internal_r+0x1d8c>
80083ecc:	d9c02785 	stb	r7,158(sp)
80083ed0:	003a5106 	br	80082818 <___svfprintf_internal_r+0xac0>
80083ed4:	d9c02785 	stb	r7,158(sp)
80083ed8:	003a3706 	br	800827b8 <___svfprintf_internal_r+0xa60>
80083edc:	0005883a 	mov	r2,zero
80083ee0:	003f5e06 	br	80083c5c <___svfprintf_internal_r+0x1f04>
80083ee4:	d9c02785 	stb	r7,158(sp)
80083ee8:	00391706 	br	80082348 <___svfprintf_internal_r+0x5f0>
80083eec:	d9c02785 	stb	r7,158(sp)
80083ef0:	0038e606 	br	8008228c <___svfprintf_internal_r+0x534>
80083ef4:	d8802344 	addi	r2,sp,141
80083ef8:	003f0806 	br	80083b1c <___svfprintf_internal_r+0x1dc4>
80083efc:	d9c02785 	stb	r7,158(sp)
80083f00:	0038b706 	br	800821e0 <___svfprintf_internal_r+0x488>
80083f04:	d9c02785 	stb	r7,158(sp)
80083f08:	003adc06 	br	80082a7c <___svfprintf_internal_r+0xd24>
80083f0c:	d9403917 	ldw	r5,228(sp)
80083f10:	00800304 	movi	r2,12
80083f14:	28800015 	stw	r2,0(r5)
80083f18:	00bfffc4 	movi	r2,-1
80083f1c:	00387806 	br	80082100 <___svfprintf_internal_r+0x3a8>
80083f20:	d9c02785 	stb	r7,158(sp)
80083f24:	003abf06 	br	80082a24 <___svfprintf_internal_r+0xccc>
80083f28:	d9c02785 	stb	r7,158(sp)
80083f2c:	003a9b06 	br	8008299c <___svfprintf_internal_r+0xc44>

80083f30 <___vfprintf_internal_r>:
80083f30:	deffb804 	addi	sp,sp,-288
80083f34:	dfc04715 	stw	ra,284(sp)
80083f38:	ddc04515 	stw	r23,276(sp)
80083f3c:	dd404315 	stw	r21,268(sp)
80083f40:	d9002c15 	stw	r4,176(sp)
80083f44:	282f883a 	mov	r23,r5
80083f48:	302b883a 	mov	r21,r6
80083f4c:	d9c02d15 	stw	r7,180(sp)
80083f50:	df004615 	stw	fp,280(sp)
80083f54:	dd804415 	stw	r22,272(sp)
80083f58:	dd004215 	stw	r20,264(sp)
80083f5c:	dcc04115 	stw	r19,260(sp)
80083f60:	dc804015 	stw	r18,256(sp)
80083f64:	dc403f15 	stw	r17,252(sp)
80083f68:	dc003e15 	stw	r16,248(sp)
80083f6c:	0088e6c0 	call	80088e6c <_localeconv_r>
80083f70:	10800017 	ldw	r2,0(r2)
80083f74:	1009883a 	mov	r4,r2
80083f78:	d8803415 	stw	r2,208(sp)
80083f7c:	0081cc00 	call	80081cc0 <strlen>
80083f80:	d8803715 	stw	r2,220(sp)
80083f84:	d8802c17 	ldw	r2,176(sp)
80083f88:	10000226 	beq	r2,zero,80083f94 <___vfprintf_internal_r+0x64>
80083f8c:	10800e17 	ldw	r2,56(r2)
80083f90:	1000f926 	beq	r2,zero,80084378 <___vfprintf_internal_r+0x448>
80083f94:	b880030b 	ldhu	r2,12(r23)
80083f98:	10c8000c 	andi	r3,r2,8192
80083f9c:	1800061e 	bne	r3,zero,80083fb8 <___vfprintf_internal_r+0x88>
80083fa0:	b9001917 	ldw	r4,100(r23)
80083fa4:	00f7ffc4 	movi	r3,-8193
80083fa8:	10880014 	ori	r2,r2,8192
80083fac:	20c6703a 	and	r3,r4,r3
80083fb0:	b880030d 	sth	r2,12(r23)
80083fb4:	b8c01915 	stw	r3,100(r23)
80083fb8:	10c0020c 	andi	r3,r2,8
80083fbc:	1800c126 	beq	r3,zero,800842c4 <___vfprintf_internal_r+0x394>
80083fc0:	b8c00417 	ldw	r3,16(r23)
80083fc4:	1800bf26 	beq	r3,zero,800842c4 <___vfprintf_internal_r+0x394>
80083fc8:	1080068c 	andi	r2,r2,26
80083fcc:	00c00284 	movi	r3,10
80083fd0:	10c0c426 	beq	r2,r3,800842e4 <___vfprintf_internal_r+0x3b4>
80083fd4:	d8c00404 	addi	r3,sp,16
80083fd8:	05200274 	movhi	r20,32777
80083fdc:	d9001e04 	addi	r4,sp,120
80083fe0:	a51a9a84 	addi	r20,r20,27242
80083fe4:	d8c01e15 	stw	r3,120(sp)
80083fe8:	d8002015 	stw	zero,128(sp)
80083fec:	d8001f15 	stw	zero,124(sp)
80083ff0:	d8003315 	stw	zero,204(sp)
80083ff4:	d8003615 	stw	zero,216(sp)
80083ff8:	d8003815 	stw	zero,224(sp)
80083ffc:	1811883a 	mov	r8,r3
80084000:	d8003915 	stw	zero,228(sp)
80084004:	d8003a15 	stw	zero,232(sp)
80084008:	d8002f15 	stw	zero,188(sp)
8008400c:	d9002815 	stw	r4,160(sp)
80084010:	a8800007 	ldb	r2,0(r21)
80084014:	10027b26 	beq	r2,zero,80084a04 <___vfprintf_internal_r+0xad4>
80084018:	00c00944 	movi	r3,37
8008401c:	a821883a 	mov	r16,r21
80084020:	10c0021e 	bne	r2,r3,8008402c <___vfprintf_internal_r+0xfc>
80084024:	00001406 	br	80084078 <___vfprintf_internal_r+0x148>
80084028:	10c00326 	beq	r2,r3,80084038 <___vfprintf_internal_r+0x108>
8008402c:	84000044 	addi	r16,r16,1
80084030:	80800007 	ldb	r2,0(r16)
80084034:	103ffc1e 	bne	r2,zero,80084028 <___vfprintf_internal_r+0xf8>
80084038:	8563c83a 	sub	r17,r16,r21
8008403c:	88000e26 	beq	r17,zero,80084078 <___vfprintf_internal_r+0x148>
80084040:	d8c02017 	ldw	r3,128(sp)
80084044:	d8801f17 	ldw	r2,124(sp)
80084048:	45400015 	stw	r21,0(r8)
8008404c:	1c47883a 	add	r3,r3,r17
80084050:	10800044 	addi	r2,r2,1
80084054:	d8c02015 	stw	r3,128(sp)
80084058:	44400115 	stw	r17,4(r8)
8008405c:	d8801f15 	stw	r2,124(sp)
80084060:	00c001c4 	movi	r3,7
80084064:	1880a716 	blt	r3,r2,80084304 <___vfprintf_internal_r+0x3d4>
80084068:	42000204 	addi	r8,r8,8
8008406c:	d9402f17 	ldw	r5,188(sp)
80084070:	2c4b883a 	add	r5,r5,r17
80084074:	d9402f15 	stw	r5,188(sp)
80084078:	80800007 	ldb	r2,0(r16)
8008407c:	1000a826 	beq	r2,zero,80084320 <___vfprintf_internal_r+0x3f0>
80084080:	84400047 	ldb	r17,1(r16)
80084084:	00bfffc4 	movi	r2,-1
80084088:	85400044 	addi	r21,r16,1
8008408c:	d8002785 	stb	zero,158(sp)
80084090:	0007883a 	mov	r3,zero
80084094:	000f883a 	mov	r7,zero
80084098:	d8802915 	stw	r2,164(sp)
8008409c:	d8003115 	stw	zero,196(sp)
800840a0:	0025883a 	mov	r18,zero
800840a4:	01401604 	movi	r5,88
800840a8:	01800244 	movi	r6,9
800840ac:	02800a84 	movi	r10,42
800840b0:	02401b04 	movi	r9,108
800840b4:	ad400044 	addi	r21,r21,1
800840b8:	88bff804 	addi	r2,r17,-32
800840bc:	28830436 	bltu	r5,r2,80084cd0 <___vfprintf_internal_r+0xda0>
800840c0:	100490ba 	slli	r2,r2,2
800840c4:	01200234 	movhi	r4,32776
800840c8:	21103604 	addi	r4,r4,16600
800840cc:	1105883a 	add	r2,r2,r4
800840d0:	10800017 	ldw	r2,0(r2)
800840d4:	1000683a 	jmp	r2
800840d8:	80084bf0 	cmpltui	zero,r16,8495
800840dc:	80084cd0 	cmplti	zero,r16,8499
800840e0:	80084cd0 	cmplti	zero,r16,8499
800840e4:	80084c10 	cmplti	zero,r16,8496
800840e8:	80084cd0 	cmplti	zero,r16,8499
800840ec:	80084cd0 	cmplti	zero,r16,8499
800840f0:	80084cd0 	cmplti	zero,r16,8499
800840f4:	80084cd0 	cmplti	zero,r16,8499
800840f8:	80084cd0 	cmplti	zero,r16,8499
800840fc:	80084cd0 	cmplti	zero,r16,8499
80084100:	80084384 	addi	zero,r16,8462
80084104:	80084b2c 	andhi	zero,r16,8492
80084108:	80084cd0 	cmplti	zero,r16,8499
8008410c:	8008424c 	andi	zero,r16,8457
80084110:	800843ac 	andhi	zero,r16,8462
80084114:	80084cd0 	cmplti	zero,r16,8499
80084118:	800843ec 	andhi	zero,r16,8463
8008411c:	800843f8 	rdprs	zero,r16,8463
80084120:	800843f8 	rdprs	zero,r16,8463
80084124:	800843f8 	rdprs	zero,r16,8463
80084128:	800843f8 	rdprs	zero,r16,8463
8008412c:	800843f8 	rdprs	zero,r16,8463
80084130:	800843f8 	rdprs	zero,r16,8463
80084134:	800843f8 	rdprs	zero,r16,8463
80084138:	800843f8 	rdprs	zero,r16,8463
8008413c:	800843f8 	rdprs	zero,r16,8463
80084140:	80084cd0 	cmplti	zero,r16,8499
80084144:	80084cd0 	cmplti	zero,r16,8499
80084148:	80084cd0 	cmplti	zero,r16,8499
8008414c:	80084cd0 	cmplti	zero,r16,8499
80084150:	80084cd0 	cmplti	zero,r16,8499
80084154:	80084cd0 	cmplti	zero,r16,8499
80084158:	80084cd0 	cmplti	zero,r16,8499
8008415c:	80084cd0 	cmplti	zero,r16,8499
80084160:	80084cd0 	cmplti	zero,r16,8499
80084164:	80084cd0 	cmplti	zero,r16,8499
80084168:	8008442c 	andhi	zero,r16,8464
8008416c:	800844e8 	cmpgeui	zero,r16,8467
80084170:	80084cd0 	cmplti	zero,r16,8499
80084174:	800844e8 	cmpgeui	zero,r16,8467
80084178:	80084cd0 	cmplti	zero,r16,8499
8008417c:	80084cd0 	cmplti	zero,r16,8499
80084180:	80084cd0 	cmplti	zero,r16,8499
80084184:	80084cd0 	cmplti	zero,r16,8499
80084188:	80084588 	cmpgei	zero,r16,8470
8008418c:	80084cd0 	cmplti	zero,r16,8499
80084190:	80084cd0 	cmplti	zero,r16,8499
80084194:	80084594 	ori	zero,r16,8470
80084198:	80084cd0 	cmplti	zero,r16,8499
8008419c:	80084cd0 	cmplti	zero,r16,8499
800841a0:	80084cd0 	cmplti	zero,r16,8499
800841a4:	80084cd0 	cmplti	zero,r16,8499
800841a8:	80084cd0 	cmplti	zero,r16,8499
800841ac:	80084a0c 	andi	zero,r16,8488
800841b0:	80084cd0 	cmplti	zero,r16,8499
800841b4:	80084cd0 	cmplti	zero,r16,8499
800841b8:	80084a6c 	andhi	zero,r16,8489
800841bc:	80084cd0 	cmplti	zero,r16,8499
800841c0:	80084cd0 	cmplti	zero,r16,8499
800841c4:	80084cd0 	cmplti	zero,r16,8499
800841c8:	80084cd0 	cmplti	zero,r16,8499
800841cc:	80084cd0 	cmplti	zero,r16,8499
800841d0:	80084cd0 	cmplti	zero,r16,8499
800841d4:	80084cd0 	cmplti	zero,r16,8499
800841d8:	80084cd0 	cmplti	zero,r16,8499
800841dc:	80084cd0 	cmplti	zero,r16,8499
800841e0:	80084cd0 	cmplti	zero,r16,8499
800841e4:	80084c7c 	xorhi	zero,r16,8497
800841e8:	80084c1c 	xori	zero,r16,8496
800841ec:	800844e8 	cmpgeui	zero,r16,8467
800841f0:	800844e8 	cmpgeui	zero,r16,8467
800841f4:	800844e8 	cmpgeui	zero,r16,8467
800841f8:	80084c2c 	andhi	zero,r16,8496
800841fc:	80084c1c 	xori	zero,r16,8496
80084200:	80084cd0 	cmplti	zero,r16,8499
80084204:	80084cd0 	cmplti	zero,r16,8499
80084208:	80084c38 	rdprs	zero,r16,8496
8008420c:	80084cd0 	cmplti	zero,r16,8499
80084210:	80084c48 	cmpgei	zero,r16,8497
80084214:	80084b1c 	xori	zero,r16,8492
80084218:	80084258 	cmpnei	zero,r16,8457
8008421c:	80084b3c 	xorhi	zero,r16,8492
80084220:	80084cd0 	cmplti	zero,r16,8499
80084224:	80084b48 	cmpgei	zero,r16,8493
80084228:	80084cd0 	cmplti	zero,r16,8499
8008422c:	80084ba4 	muli	zero,r16,8494
80084230:	80084cd0 	cmplti	zero,r16,8499
80084234:	80084cd0 	cmplti	zero,r16,8499
80084238:	80084bb4 	orhi	zero,r16,8494
8008423c:	d9003117 	ldw	r4,196(sp)
80084240:	d8802d15 	stw	r2,180(sp)
80084244:	0109c83a 	sub	r4,zero,r4
80084248:	d9003115 	stw	r4,196(sp)
8008424c:	94800114 	ori	r18,r18,4
80084250:	ac400007 	ldb	r17,0(r21)
80084254:	003f9706 	br	800840b4 <___vfprintf_internal_r+0x184>
80084258:	00800c04 	movi	r2,48
8008425c:	d9002d17 	ldw	r4,180(sp)
80084260:	d9402917 	ldw	r5,164(sp)
80084264:	d8802705 	stb	r2,156(sp)
80084268:	00801e04 	movi	r2,120
8008426c:	d8802745 	stb	r2,157(sp)
80084270:	d8002785 	stb	zero,158(sp)
80084274:	20c00104 	addi	r3,r4,4
80084278:	24c00017 	ldw	r19,0(r4)
8008427c:	002d883a 	mov	r22,zero
80084280:	90800094 	ori	r2,r18,2
80084284:	28029a16 	blt	r5,zero,80084cf0 <___vfprintf_internal_r+0xdc0>
80084288:	00bfdfc4 	movi	r2,-129
8008428c:	90a4703a 	and	r18,r18,r2
80084290:	d8c02d15 	stw	r3,180(sp)
80084294:	94800094 	ori	r18,r18,2
80084298:	9802871e 	bne	r19,zero,80084cb8 <___vfprintf_internal_r+0xd88>
8008429c:	00a00274 	movhi	r2,32777
800842a0:	109a8b04 	addi	r2,r2,27180
800842a4:	d8803915 	stw	r2,228(sp)
800842a8:	04401e04 	movi	r17,120
800842ac:	d8802917 	ldw	r2,164(sp)
800842b0:	0039883a 	mov	fp,zero
800842b4:	1001e926 	beq	r2,zero,80084a5c <___vfprintf_internal_r+0xb2c>
800842b8:	0027883a 	mov	r19,zero
800842bc:	002d883a 	mov	r22,zero
800842c0:	00020506 	br	80084ad8 <___vfprintf_internal_r+0xba8>
800842c4:	d9002c17 	ldw	r4,176(sp)
800842c8:	b80b883a 	mov	r5,r23
800842cc:	00863240 	call	80086324 <__swsetup_r>
800842d0:	1005ac1e 	bne	r2,zero,80085984 <___vfprintf_internal_r+0x1a54>
800842d4:	b880030b 	ldhu	r2,12(r23)
800842d8:	00c00284 	movi	r3,10
800842dc:	1080068c 	andi	r2,r2,26
800842e0:	10ff3c1e 	bne	r2,r3,80083fd4 <___vfprintf_internal_r+0xa4>
800842e4:	b880038f 	ldh	r2,14(r23)
800842e8:	103f3a16 	blt	r2,zero,80083fd4 <___vfprintf_internal_r+0xa4>
800842ec:	d9c02d17 	ldw	r7,180(sp)
800842f0:	d9002c17 	ldw	r4,176(sp)
800842f4:	a80d883a 	mov	r6,r21
800842f8:	b80b883a 	mov	r5,r23
800842fc:	00861440 	call	80086144 <__sbprintf>
80084300:	00001106 	br	80084348 <___vfprintf_internal_r+0x418>
80084304:	d9002c17 	ldw	r4,176(sp)
80084308:	d9801e04 	addi	r6,sp,120
8008430c:	b80b883a 	mov	r5,r23
80084310:	008cc4c0 	call	8008cc4c <__sprint_r>
80084314:	1000081e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80084318:	da000404 	addi	r8,sp,16
8008431c:	003f5306 	br	8008406c <___vfprintf_internal_r+0x13c>
80084320:	d8802017 	ldw	r2,128(sp)
80084324:	10000426 	beq	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80084328:	d9002c17 	ldw	r4,176(sp)
8008432c:	d9801e04 	addi	r6,sp,120
80084330:	b80b883a 	mov	r5,r23
80084334:	008cc4c0 	call	8008cc4c <__sprint_r>
80084338:	b880030b 	ldhu	r2,12(r23)
8008433c:	1080100c 	andi	r2,r2,64
80084340:	1005901e 	bne	r2,zero,80085984 <___vfprintf_internal_r+0x1a54>
80084344:	d8802f17 	ldw	r2,188(sp)
80084348:	dfc04717 	ldw	ra,284(sp)
8008434c:	df004617 	ldw	fp,280(sp)
80084350:	ddc04517 	ldw	r23,276(sp)
80084354:	dd804417 	ldw	r22,272(sp)
80084358:	dd404317 	ldw	r21,268(sp)
8008435c:	dd004217 	ldw	r20,264(sp)
80084360:	dcc04117 	ldw	r19,260(sp)
80084364:	dc804017 	ldw	r18,256(sp)
80084368:	dc403f17 	ldw	r17,252(sp)
8008436c:	dc003e17 	ldw	r16,248(sp)
80084370:	dec04804 	addi	sp,sp,288
80084374:	f800283a 	ret
80084378:	d9002c17 	ldw	r4,176(sp)
8008437c:	00882f80 	call	800882f8 <__sinit>
80084380:	003f0406 	br	80083f94 <___vfprintf_internal_r+0x64>
80084384:	d8802d17 	ldw	r2,180(sp)
80084388:	d9002d17 	ldw	r4,180(sp)
8008438c:	10800017 	ldw	r2,0(r2)
80084390:	d8803115 	stw	r2,196(sp)
80084394:	20800104 	addi	r2,r4,4
80084398:	d9003117 	ldw	r4,196(sp)
8008439c:	203fa716 	blt	r4,zero,8008423c <___vfprintf_internal_r+0x30c>
800843a0:	d8802d15 	stw	r2,180(sp)
800843a4:	ac400007 	ldb	r17,0(r21)
800843a8:	003f4206 	br	800840b4 <___vfprintf_internal_r+0x184>
800843ac:	ac400007 	ldb	r17,0(r21)
800843b0:	aac00044 	addi	r11,r21,1
800843b4:	8a872826 	beq	r17,r10,80086058 <___vfprintf_internal_r+0x2128>
800843b8:	88bff404 	addi	r2,r17,-48
800843bc:	0009883a 	mov	r4,zero
800843c0:	30867d36 	bltu	r6,r2,80085db8 <___vfprintf_internal_r+0x1e88>
800843c4:	5c400007 	ldb	r17,0(r11)
800843c8:	210002a4 	muli	r4,r4,10
800843cc:	5d400044 	addi	r21,r11,1
800843d0:	a817883a 	mov	r11,r21
800843d4:	2089883a 	add	r4,r4,r2
800843d8:	88bff404 	addi	r2,r17,-48
800843dc:	30bff92e 	bgeu	r6,r2,800843c4 <___vfprintf_internal_r+0x494>
800843e0:	2005c916 	blt	r4,zero,80085b08 <___vfprintf_internal_r+0x1bd8>
800843e4:	d9002915 	stw	r4,164(sp)
800843e8:	003f3306 	br	800840b8 <___vfprintf_internal_r+0x188>
800843ec:	94802014 	ori	r18,r18,128
800843f0:	ac400007 	ldb	r17,0(r21)
800843f4:	003f2f06 	br	800840b4 <___vfprintf_internal_r+0x184>
800843f8:	a809883a 	mov	r4,r21
800843fc:	d8003115 	stw	zero,196(sp)
80084400:	88bff404 	addi	r2,r17,-48
80084404:	0017883a 	mov	r11,zero
80084408:	24400007 	ldb	r17,0(r4)
8008440c:	5ac002a4 	muli	r11,r11,10
80084410:	ad400044 	addi	r21,r21,1
80084414:	a809883a 	mov	r4,r21
80084418:	12d7883a 	add	r11,r2,r11
8008441c:	88bff404 	addi	r2,r17,-48
80084420:	30bff92e 	bgeu	r6,r2,80084408 <___vfprintf_internal_r+0x4d8>
80084424:	dac03115 	stw	r11,196(sp)
80084428:	003f2306 	br	800840b8 <___vfprintf_internal_r+0x188>
8008442c:	18c03fcc 	andi	r3,r3,255
80084430:	18072b1e 	bne	r3,zero,800860e0 <___vfprintf_internal_r+0x21b0>
80084434:	94800414 	ori	r18,r18,16
80084438:	9080080c 	andi	r2,r18,32
8008443c:	10037b26 	beq	r2,zero,8008522c <___vfprintf_internal_r+0x12fc>
80084440:	d9402d17 	ldw	r5,180(sp)
80084444:	28800117 	ldw	r2,4(r5)
80084448:	2cc00017 	ldw	r19,0(r5)
8008444c:	29400204 	addi	r5,r5,8
80084450:	d9402d15 	stw	r5,180(sp)
80084454:	102d883a 	mov	r22,r2
80084458:	10044b16 	blt	r2,zero,80085588 <___vfprintf_internal_r+0x1658>
8008445c:	d9402917 	ldw	r5,164(sp)
80084460:	df002783 	ldbu	fp,158(sp)
80084464:	2803bc16 	blt	r5,zero,80085358 <___vfprintf_internal_r+0x1428>
80084468:	00ffdfc4 	movi	r3,-129
8008446c:	9d84b03a 	or	r2,r19,r22
80084470:	90e4703a 	and	r18,r18,r3
80084474:	10017726 	beq	r2,zero,80084a54 <___vfprintf_internal_r+0xb24>
80084478:	b0038326 	beq	r22,zero,80085288 <___vfprintf_internal_r+0x1358>
8008447c:	dc402a15 	stw	r17,168(sp)
80084480:	dc001e04 	addi	r16,sp,120
80084484:	b023883a 	mov	r17,r22
80084488:	402d883a 	mov	r22,r8
8008448c:	9809883a 	mov	r4,r19
80084490:	880b883a 	mov	r5,r17
80084494:	01800284 	movi	r6,10
80084498:	000f883a 	mov	r7,zero
8008449c:	008f0440 	call	8008f044 <__umoddi3>
800844a0:	10800c04 	addi	r2,r2,48
800844a4:	843fffc4 	addi	r16,r16,-1
800844a8:	9809883a 	mov	r4,r19
800844ac:	880b883a 	mov	r5,r17
800844b0:	80800005 	stb	r2,0(r16)
800844b4:	01800284 	movi	r6,10
800844b8:	000f883a 	mov	r7,zero
800844bc:	008eacc0 	call	8008eacc <__udivdi3>
800844c0:	1027883a 	mov	r19,r2
800844c4:	10c4b03a 	or	r2,r2,r3
800844c8:	1823883a 	mov	r17,r3
800844cc:	103fef1e 	bne	r2,zero,8008448c <___vfprintf_internal_r+0x55c>
800844d0:	d8c02817 	ldw	r3,160(sp)
800844d4:	dc402a17 	ldw	r17,168(sp)
800844d8:	b011883a 	mov	r8,r22
800844dc:	1c07c83a 	sub	r3,r3,r16
800844e0:	d8c02e15 	stw	r3,184(sp)
800844e4:	00005906 	br	8008464c <___vfprintf_internal_r+0x71c>
800844e8:	18c03fcc 	andi	r3,r3,255
800844ec:	1806fa1e 	bne	r3,zero,800860d8 <___vfprintf_internal_r+0x21a8>
800844f0:	9080020c 	andi	r2,r18,8
800844f4:	10048a26 	beq	r2,zero,80085720 <___vfprintf_internal_r+0x17f0>
800844f8:	d8c02d17 	ldw	r3,180(sp)
800844fc:	d9002d17 	ldw	r4,180(sp)
80084500:	d9402d17 	ldw	r5,180(sp)
80084504:	18c00017 	ldw	r3,0(r3)
80084508:	21000117 	ldw	r4,4(r4)
8008450c:	29400204 	addi	r5,r5,8
80084510:	d8c03615 	stw	r3,216(sp)
80084514:	d9003815 	stw	r4,224(sp)
80084518:	d9402d15 	stw	r5,180(sp)
8008451c:	d9003617 	ldw	r4,216(sp)
80084520:	d9403817 	ldw	r5,224(sp)
80084524:	da003d15 	stw	r8,244(sp)
80084528:	04000044 	movi	r16,1
8008452c:	008b4640 	call	8008b464 <__fpclassifyd>
80084530:	da003d17 	ldw	r8,244(sp)
80084534:	14041f1e 	bne	r2,r16,800855b4 <___vfprintf_internal_r+0x1684>
80084538:	d9003617 	ldw	r4,216(sp)
8008453c:	d9403817 	ldw	r5,224(sp)
80084540:	000d883a 	mov	r6,zero
80084544:	000f883a 	mov	r7,zero
80084548:	009094c0 	call	8009094c <__ledf2>
8008454c:	da003d17 	ldw	r8,244(sp)
80084550:	1005be16 	blt	r2,zero,80085c4c <___vfprintf_internal_r+0x1d1c>
80084554:	df002783 	ldbu	fp,158(sp)
80084558:	008011c4 	movi	r2,71
8008455c:	1445330e 	bge	r2,r17,80085a2c <___vfprintf_internal_r+0x1afc>
80084560:	04200274 	movhi	r16,32777
80084564:	841a8304 	addi	r16,r16,27148
80084568:	00c000c4 	movi	r3,3
8008456c:	00bfdfc4 	movi	r2,-129
80084570:	d8c02a15 	stw	r3,168(sp)
80084574:	90a4703a 	and	r18,r18,r2
80084578:	d8c02e15 	stw	r3,184(sp)
8008457c:	d8002915 	stw	zero,164(sp)
80084580:	d8003215 	stw	zero,200(sp)
80084584:	00003706 	br	80084664 <___vfprintf_internal_r+0x734>
80084588:	94800214 	ori	r18,r18,8
8008458c:	ac400007 	ldb	r17,0(r21)
80084590:	003ec806 	br	800840b4 <___vfprintf_internal_r+0x184>
80084594:	18c03fcc 	andi	r3,r3,255
80084598:	1806db1e 	bne	r3,zero,80086108 <___vfprintf_internal_r+0x21d8>
8008459c:	94800414 	ori	r18,r18,16
800845a0:	9080080c 	andi	r2,r18,32
800845a4:	1002d826 	beq	r2,zero,80085108 <___vfprintf_internal_r+0x11d8>
800845a8:	d9402d17 	ldw	r5,180(sp)
800845ac:	d8c02917 	ldw	r3,164(sp)
800845b0:	d8002785 	stb	zero,158(sp)
800845b4:	28800204 	addi	r2,r5,8
800845b8:	2cc00017 	ldw	r19,0(r5)
800845bc:	2d800117 	ldw	r22,4(r5)
800845c0:	18048f16 	blt	r3,zero,80085800 <___vfprintf_internal_r+0x18d0>
800845c4:	013fdfc4 	movi	r4,-129
800845c8:	9d86b03a 	or	r3,r19,r22
800845cc:	d8802d15 	stw	r2,180(sp)
800845d0:	9124703a 	and	r18,r18,r4
800845d4:	1802d91e 	bne	r3,zero,8008513c <___vfprintf_internal_r+0x120c>
800845d8:	d8c02917 	ldw	r3,164(sp)
800845dc:	0039883a 	mov	fp,zero
800845e0:	1805c326 	beq	r3,zero,80085cf0 <___vfprintf_internal_r+0x1dc0>
800845e4:	0027883a 	mov	r19,zero
800845e8:	002d883a 	mov	r22,zero
800845ec:	dc001e04 	addi	r16,sp,120
800845f0:	9806d0fa 	srli	r3,r19,3
800845f4:	b008977a 	slli	r4,r22,29
800845f8:	b02cd0fa 	srli	r22,r22,3
800845fc:	9cc001cc 	andi	r19,r19,7
80084600:	98800c04 	addi	r2,r19,48
80084604:	843fffc4 	addi	r16,r16,-1
80084608:	20e6b03a 	or	r19,r4,r3
8008460c:	80800005 	stb	r2,0(r16)
80084610:	9d86b03a 	or	r3,r19,r22
80084614:	183ff61e 	bne	r3,zero,800845f0 <___vfprintf_internal_r+0x6c0>
80084618:	90c0004c 	andi	r3,r18,1
8008461c:	18013b26 	beq	r3,zero,80084b0c <___vfprintf_internal_r+0xbdc>
80084620:	10803fcc 	andi	r2,r2,255
80084624:	1080201c 	xori	r2,r2,128
80084628:	10bfe004 	addi	r2,r2,-128
8008462c:	00c00c04 	movi	r3,48
80084630:	10c13626 	beq	r2,r3,80084b0c <___vfprintf_internal_r+0xbdc>
80084634:	80ffffc5 	stb	r3,-1(r16)
80084638:	d8c02817 	ldw	r3,160(sp)
8008463c:	80bfffc4 	addi	r2,r16,-1
80084640:	1021883a 	mov	r16,r2
80084644:	1887c83a 	sub	r3,r3,r2
80084648:	d8c02e15 	stw	r3,184(sp)
8008464c:	d8802e17 	ldw	r2,184(sp)
80084650:	d9002917 	ldw	r4,164(sp)
80084654:	1100010e 	bge	r2,r4,8008465c <___vfprintf_internal_r+0x72c>
80084658:	2005883a 	mov	r2,r4
8008465c:	d8802a15 	stw	r2,168(sp)
80084660:	d8003215 	stw	zero,200(sp)
80084664:	e7003fcc 	andi	fp,fp,255
80084668:	e700201c 	xori	fp,fp,128
8008466c:	e73fe004 	addi	fp,fp,-128
80084670:	e0000326 	beq	fp,zero,80084680 <___vfprintf_internal_r+0x750>
80084674:	d8c02a17 	ldw	r3,168(sp)
80084678:	18c00044 	addi	r3,r3,1
8008467c:	d8c02a15 	stw	r3,168(sp)
80084680:	90c0008c 	andi	r3,r18,2
80084684:	d8c02b15 	stw	r3,172(sp)
80084688:	18000326 	beq	r3,zero,80084698 <___vfprintf_internal_r+0x768>
8008468c:	d8c02a17 	ldw	r3,168(sp)
80084690:	18c00084 	addi	r3,r3,2
80084694:	d8c02a15 	stw	r3,168(sp)
80084698:	90c0210c 	andi	r3,r18,132
8008469c:	d8c03015 	stw	r3,192(sp)
800846a0:	1801a31e 	bne	r3,zero,80084d30 <___vfprintf_internal_r+0xe00>
800846a4:	d9003117 	ldw	r4,196(sp)
800846a8:	d8c02a17 	ldw	r3,168(sp)
800846ac:	20e7c83a 	sub	r19,r4,r3
800846b0:	04c19f0e 	bge	zero,r19,80084d30 <___vfprintf_internal_r+0xe00>
800846b4:	02400404 	movi	r9,16
800846b8:	d8c02017 	ldw	r3,128(sp)
800846bc:	d8801f17 	ldw	r2,124(sp)
800846c0:	4cc50d0e 	bge	r9,r19,80085af8 <___vfprintf_internal_r+0x1bc8>
800846c4:	01600274 	movhi	r5,32777
800846c8:	295a9e84 	addi	r5,r5,27258
800846cc:	dc403b15 	stw	r17,236(sp)
800846d0:	d9403515 	stw	r5,212(sp)
800846d4:	9823883a 	mov	r17,r19
800846d8:	482d883a 	mov	r22,r9
800846dc:	9027883a 	mov	r19,r18
800846e0:	070001c4 	movi	fp,7
800846e4:	8025883a 	mov	r18,r16
800846e8:	dc002c17 	ldw	r16,176(sp)
800846ec:	00000306 	br	800846fc <___vfprintf_internal_r+0x7cc>
800846f0:	8c7ffc04 	addi	r17,r17,-16
800846f4:	42000204 	addi	r8,r8,8
800846f8:	b440130e 	bge	r22,r17,80084748 <___vfprintf_internal_r+0x818>
800846fc:	01200274 	movhi	r4,32777
80084700:	18c00404 	addi	r3,r3,16
80084704:	10800044 	addi	r2,r2,1
80084708:	211a9e84 	addi	r4,r4,27258
8008470c:	41000015 	stw	r4,0(r8)
80084710:	45800115 	stw	r22,4(r8)
80084714:	d8c02015 	stw	r3,128(sp)
80084718:	d8801f15 	stw	r2,124(sp)
8008471c:	e0bff40e 	bge	fp,r2,800846f0 <___vfprintf_internal_r+0x7c0>
80084720:	d9801e04 	addi	r6,sp,120
80084724:	b80b883a 	mov	r5,r23
80084728:	8009883a 	mov	r4,r16
8008472c:	008cc4c0 	call	8008cc4c <__sprint_r>
80084730:	103f011e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80084734:	8c7ffc04 	addi	r17,r17,-16
80084738:	d8c02017 	ldw	r3,128(sp)
8008473c:	d8801f17 	ldw	r2,124(sp)
80084740:	da000404 	addi	r8,sp,16
80084744:	b47fed16 	blt	r22,r17,800846fc <___vfprintf_internal_r+0x7cc>
80084748:	9021883a 	mov	r16,r18
8008474c:	9825883a 	mov	r18,r19
80084750:	8827883a 	mov	r19,r17
80084754:	dc403b17 	ldw	r17,236(sp)
80084758:	d9403517 	ldw	r5,212(sp)
8008475c:	98c7883a 	add	r3,r19,r3
80084760:	10800044 	addi	r2,r2,1
80084764:	41400015 	stw	r5,0(r8)
80084768:	44c00115 	stw	r19,4(r8)
8008476c:	d8c02015 	stw	r3,128(sp)
80084770:	d8801f15 	stw	r2,124(sp)
80084774:	010001c4 	movi	r4,7
80084778:	2082a316 	blt	r4,r2,80085208 <___vfprintf_internal_r+0x12d8>
8008477c:	df002787 	ldb	fp,158(sp)
80084780:	42000204 	addi	r8,r8,8
80084784:	e0000c26 	beq	fp,zero,800847b8 <___vfprintf_internal_r+0x888>
80084788:	d8801f17 	ldw	r2,124(sp)
8008478c:	d9002784 	addi	r4,sp,158
80084790:	18c00044 	addi	r3,r3,1
80084794:	10800044 	addi	r2,r2,1
80084798:	41000015 	stw	r4,0(r8)
8008479c:	01000044 	movi	r4,1
800847a0:	41000115 	stw	r4,4(r8)
800847a4:	d8c02015 	stw	r3,128(sp)
800847a8:	d8801f15 	stw	r2,124(sp)
800847ac:	010001c4 	movi	r4,7
800847b0:	20823c16 	blt	r4,r2,800850a4 <___vfprintf_internal_r+0x1174>
800847b4:	42000204 	addi	r8,r8,8
800847b8:	d8802b17 	ldw	r2,172(sp)
800847bc:	10000c26 	beq	r2,zero,800847f0 <___vfprintf_internal_r+0x8c0>
800847c0:	d8801f17 	ldw	r2,124(sp)
800847c4:	d9002704 	addi	r4,sp,156
800847c8:	18c00084 	addi	r3,r3,2
800847cc:	10800044 	addi	r2,r2,1
800847d0:	41000015 	stw	r4,0(r8)
800847d4:	01000084 	movi	r4,2
800847d8:	41000115 	stw	r4,4(r8)
800847dc:	d8c02015 	stw	r3,128(sp)
800847e0:	d8801f15 	stw	r2,124(sp)
800847e4:	010001c4 	movi	r4,7
800847e8:	20823616 	blt	r4,r2,800850c4 <___vfprintf_internal_r+0x1194>
800847ec:	42000204 	addi	r8,r8,8
800847f0:	d9003017 	ldw	r4,192(sp)
800847f4:	00802004 	movi	r2,128
800847f8:	20819926 	beq	r4,r2,80084e60 <___vfprintf_internal_r+0xf30>
800847fc:	d9402917 	ldw	r5,164(sp)
80084800:	d8802e17 	ldw	r2,184(sp)
80084804:	28adc83a 	sub	r22,r5,r2
80084808:	0580310e 	bge	zero,r22,800848d0 <___vfprintf_internal_r+0x9a0>
8008480c:	07000404 	movi	fp,16
80084810:	d8801f17 	ldw	r2,124(sp)
80084814:	e584140e 	bge	fp,r22,80085868 <___vfprintf_internal_r+0x1938>
80084818:	01600274 	movhi	r5,32777
8008481c:	295a9a84 	addi	r5,r5,27242
80084820:	dc402915 	stw	r17,164(sp)
80084824:	d9402b15 	stw	r5,172(sp)
80084828:	b023883a 	mov	r17,r22
8008482c:	04c001c4 	movi	r19,7
80084830:	a82d883a 	mov	r22,r21
80084834:	902b883a 	mov	r21,r18
80084838:	8025883a 	mov	r18,r16
8008483c:	dc002c17 	ldw	r16,176(sp)
80084840:	00000306 	br	80084850 <___vfprintf_internal_r+0x920>
80084844:	8c7ffc04 	addi	r17,r17,-16
80084848:	42000204 	addi	r8,r8,8
8008484c:	e440110e 	bge	fp,r17,80084894 <___vfprintf_internal_r+0x964>
80084850:	18c00404 	addi	r3,r3,16
80084854:	10800044 	addi	r2,r2,1
80084858:	45000015 	stw	r20,0(r8)
8008485c:	47000115 	stw	fp,4(r8)
80084860:	d8c02015 	stw	r3,128(sp)
80084864:	d8801f15 	stw	r2,124(sp)
80084868:	98bff60e 	bge	r19,r2,80084844 <___vfprintf_internal_r+0x914>
8008486c:	d9801e04 	addi	r6,sp,120
80084870:	b80b883a 	mov	r5,r23
80084874:	8009883a 	mov	r4,r16
80084878:	008cc4c0 	call	8008cc4c <__sprint_r>
8008487c:	103eae1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80084880:	8c7ffc04 	addi	r17,r17,-16
80084884:	d8c02017 	ldw	r3,128(sp)
80084888:	d8801f17 	ldw	r2,124(sp)
8008488c:	da000404 	addi	r8,sp,16
80084890:	e47fef16 	blt	fp,r17,80084850 <___vfprintf_internal_r+0x920>
80084894:	9021883a 	mov	r16,r18
80084898:	a825883a 	mov	r18,r21
8008489c:	b02b883a 	mov	r21,r22
800848a0:	882d883a 	mov	r22,r17
800848a4:	dc402917 	ldw	r17,164(sp)
800848a8:	d9002b17 	ldw	r4,172(sp)
800848ac:	1d87883a 	add	r3,r3,r22
800848b0:	10800044 	addi	r2,r2,1
800848b4:	41000015 	stw	r4,0(r8)
800848b8:	45800115 	stw	r22,4(r8)
800848bc:	d8c02015 	stw	r3,128(sp)
800848c0:	d8801f15 	stw	r2,124(sp)
800848c4:	010001c4 	movi	r4,7
800848c8:	2081ee16 	blt	r4,r2,80085084 <___vfprintf_internal_r+0x1154>
800848cc:	42000204 	addi	r8,r8,8
800848d0:	9080400c 	andi	r2,r18,256
800848d4:	1001181e 	bne	r2,zero,80084d38 <___vfprintf_internal_r+0xe08>
800848d8:	d9402e17 	ldw	r5,184(sp)
800848dc:	d8801f17 	ldw	r2,124(sp)
800848e0:	44000015 	stw	r16,0(r8)
800848e4:	1947883a 	add	r3,r3,r5
800848e8:	10800044 	addi	r2,r2,1
800848ec:	41400115 	stw	r5,4(r8)
800848f0:	d8c02015 	stw	r3,128(sp)
800848f4:	d8801f15 	stw	r2,124(sp)
800848f8:	010001c4 	movi	r4,7
800848fc:	2081d316 	blt	r4,r2,8008504c <___vfprintf_internal_r+0x111c>
80084900:	42000204 	addi	r8,r8,8
80084904:	9480010c 	andi	r18,r18,4
80084908:	90003226 	beq	r18,zero,800849d4 <___vfprintf_internal_r+0xaa4>
8008490c:	d9403117 	ldw	r5,196(sp)
80084910:	d8802a17 	ldw	r2,168(sp)
80084914:	28a1c83a 	sub	r16,r5,r2
80084918:	04002e0e 	bge	zero,r16,800849d4 <___vfprintf_internal_r+0xaa4>
8008491c:	04400404 	movi	r17,16
80084920:	d8801f17 	ldw	r2,124(sp)
80084924:	8c04a20e 	bge	r17,r16,80085bb0 <___vfprintf_internal_r+0x1c80>
80084928:	01600274 	movhi	r5,32777
8008492c:	295a9e84 	addi	r5,r5,27258
80084930:	d9403515 	stw	r5,212(sp)
80084934:	048001c4 	movi	r18,7
80084938:	dcc02c17 	ldw	r19,176(sp)
8008493c:	00000306 	br	8008494c <___vfprintf_internal_r+0xa1c>
80084940:	843ffc04 	addi	r16,r16,-16
80084944:	42000204 	addi	r8,r8,8
80084948:	8c00130e 	bge	r17,r16,80084998 <___vfprintf_internal_r+0xa68>
8008494c:	01200274 	movhi	r4,32777
80084950:	18c00404 	addi	r3,r3,16
80084954:	10800044 	addi	r2,r2,1
80084958:	211a9e84 	addi	r4,r4,27258
8008495c:	41000015 	stw	r4,0(r8)
80084960:	44400115 	stw	r17,4(r8)
80084964:	d8c02015 	stw	r3,128(sp)
80084968:	d8801f15 	stw	r2,124(sp)
8008496c:	90bff40e 	bge	r18,r2,80084940 <___vfprintf_internal_r+0xa10>
80084970:	d9801e04 	addi	r6,sp,120
80084974:	b80b883a 	mov	r5,r23
80084978:	9809883a 	mov	r4,r19
8008497c:	008cc4c0 	call	8008cc4c <__sprint_r>
80084980:	103e6d1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80084984:	843ffc04 	addi	r16,r16,-16
80084988:	d8c02017 	ldw	r3,128(sp)
8008498c:	d8801f17 	ldw	r2,124(sp)
80084990:	da000404 	addi	r8,sp,16
80084994:	8c3fed16 	blt	r17,r16,8008494c <___vfprintf_internal_r+0xa1c>
80084998:	d9403517 	ldw	r5,212(sp)
8008499c:	1c07883a 	add	r3,r3,r16
800849a0:	10800044 	addi	r2,r2,1
800849a4:	41400015 	stw	r5,0(r8)
800849a8:	44000115 	stw	r16,4(r8)
800849ac:	d8c02015 	stw	r3,128(sp)
800849b0:	d8801f15 	stw	r2,124(sp)
800849b4:	010001c4 	movi	r4,7
800849b8:	2080060e 	bge	r4,r2,800849d4 <___vfprintf_internal_r+0xaa4>
800849bc:	d9002c17 	ldw	r4,176(sp)
800849c0:	d9801e04 	addi	r6,sp,120
800849c4:	b80b883a 	mov	r5,r23
800849c8:	008cc4c0 	call	8008cc4c <__sprint_r>
800849cc:	103e5a1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
800849d0:	d8c02017 	ldw	r3,128(sp)
800849d4:	d8803117 	ldw	r2,196(sp)
800849d8:	d9002a17 	ldw	r4,168(sp)
800849dc:	1100010e 	bge	r2,r4,800849e4 <___vfprintf_internal_r+0xab4>
800849e0:	2005883a 	mov	r2,r4
800849e4:	d9402f17 	ldw	r5,188(sp)
800849e8:	288b883a 	add	r5,r5,r2
800849ec:	d9402f15 	stw	r5,188(sp)
800849f0:	18019e1e 	bne	r3,zero,8008506c <___vfprintf_internal_r+0x113c>
800849f4:	a8800007 	ldb	r2,0(r21)
800849f8:	d8001f15 	stw	zero,124(sp)
800849fc:	da000404 	addi	r8,sp,16
80084a00:	103d851e 	bne	r2,zero,80084018 <___vfprintf_internal_r+0xe8>
80084a04:	a821883a 	mov	r16,r21
80084a08:	003d9b06 	br	80084078 <___vfprintf_internal_r+0x148>
80084a0c:	18c03fcc 	andi	r3,r3,255
80084a10:	1805c11e 	bne	r3,zero,80086118 <___vfprintf_internal_r+0x21e8>
80084a14:	94800414 	ori	r18,r18,16
80084a18:	9080080c 	andi	r2,r18,32
80084a1c:	10020c26 	beq	r2,zero,80085250 <___vfprintf_internal_r+0x1320>
80084a20:	d8802d17 	ldw	r2,180(sp)
80084a24:	d9002917 	ldw	r4,164(sp)
80084a28:	d8002785 	stb	zero,158(sp)
80084a2c:	10c00204 	addi	r3,r2,8
80084a30:	14c00017 	ldw	r19,0(r2)
80084a34:	15800117 	ldw	r22,4(r2)
80084a38:	20040f16 	blt	r4,zero,80085a78 <___vfprintf_internal_r+0x1b48>
80084a3c:	013fdfc4 	movi	r4,-129
80084a40:	9d84b03a 	or	r2,r19,r22
80084a44:	d8c02d15 	stw	r3,180(sp)
80084a48:	9124703a 	and	r18,r18,r4
80084a4c:	0039883a 	mov	fp,zero
80084a50:	103e891e 	bne	r2,zero,80084478 <___vfprintf_internal_r+0x548>
80084a54:	d9002917 	ldw	r4,164(sp)
80084a58:	2002c11e 	bne	r4,zero,80085560 <___vfprintf_internal_r+0x1630>
80084a5c:	d8002915 	stw	zero,164(sp)
80084a60:	d8002e15 	stw	zero,184(sp)
80084a64:	dc001e04 	addi	r16,sp,120
80084a68:	003ef806 	br	8008464c <___vfprintf_internal_r+0x71c>
80084a6c:	18c03fcc 	andi	r3,r3,255
80084a70:	18059d1e 	bne	r3,zero,800860e8 <___vfprintf_internal_r+0x21b8>
80084a74:	01600274 	movhi	r5,32777
80084a78:	295a8604 	addi	r5,r5,27160
80084a7c:	d9403915 	stw	r5,228(sp)
80084a80:	9080080c 	andi	r2,r18,32
80084a84:	10005226 	beq	r2,zero,80084bd0 <___vfprintf_internal_r+0xca0>
80084a88:	d8802d17 	ldw	r2,180(sp)
80084a8c:	14c00017 	ldw	r19,0(r2)
80084a90:	15800117 	ldw	r22,4(r2)
80084a94:	10800204 	addi	r2,r2,8
80084a98:	d8802d15 	stw	r2,180(sp)
80084a9c:	9080004c 	andi	r2,r18,1
80084aa0:	10019026 	beq	r2,zero,800850e4 <___vfprintf_internal_r+0x11b4>
80084aa4:	9d84b03a 	or	r2,r19,r22
80084aa8:	10036926 	beq	r2,zero,80085850 <___vfprintf_internal_r+0x1920>
80084aac:	d8c02917 	ldw	r3,164(sp)
80084ab0:	00800c04 	movi	r2,48
80084ab4:	d8802705 	stb	r2,156(sp)
80084ab8:	dc402745 	stb	r17,157(sp)
80084abc:	d8002785 	stb	zero,158(sp)
80084ac0:	90800094 	ori	r2,r18,2
80084ac4:	18045d16 	blt	r3,zero,80085c3c <___vfprintf_internal_r+0x1d0c>
80084ac8:	00bfdfc4 	movi	r2,-129
80084acc:	90a4703a 	and	r18,r18,r2
80084ad0:	94800094 	ori	r18,r18,2
80084ad4:	0039883a 	mov	fp,zero
80084ad8:	d9003917 	ldw	r4,228(sp)
80084adc:	dc001e04 	addi	r16,sp,120
80084ae0:	988003cc 	andi	r2,r19,15
80084ae4:	b006973a 	slli	r3,r22,28
80084ae8:	2085883a 	add	r2,r4,r2
80084aec:	9826d13a 	srli	r19,r19,4
80084af0:	10800003 	ldbu	r2,0(r2)
80084af4:	b02cd13a 	srli	r22,r22,4
80084af8:	843fffc4 	addi	r16,r16,-1
80084afc:	1ce6b03a 	or	r19,r3,r19
80084b00:	80800005 	stb	r2,0(r16)
80084b04:	9d84b03a 	or	r2,r19,r22
80084b08:	103ff51e 	bne	r2,zero,80084ae0 <___vfprintf_internal_r+0xbb0>
80084b0c:	d8c02817 	ldw	r3,160(sp)
80084b10:	1c07c83a 	sub	r3,r3,r16
80084b14:	d8c02e15 	stw	r3,184(sp)
80084b18:	003ecc06 	br	8008464c <___vfprintf_internal_r+0x71c>
80084b1c:	18c03fcc 	andi	r3,r3,255
80084b20:	183e9f26 	beq	r3,zero,800845a0 <___vfprintf_internal_r+0x670>
80084b24:	d9c02785 	stb	r7,158(sp)
80084b28:	003e9d06 	br	800845a0 <___vfprintf_internal_r+0x670>
80084b2c:	00c00044 	movi	r3,1
80084b30:	01c00ac4 	movi	r7,43
80084b34:	ac400007 	ldb	r17,0(r21)
80084b38:	003d5e06 	br	800840b4 <___vfprintf_internal_r+0x184>
80084b3c:	94800814 	ori	r18,r18,32
80084b40:	ac400007 	ldb	r17,0(r21)
80084b44:	003d5b06 	br	800840b4 <___vfprintf_internal_r+0x184>
80084b48:	d8c02d17 	ldw	r3,180(sp)
80084b4c:	d8002785 	stb	zero,158(sp)
80084b50:	1c000017 	ldw	r16,0(r3)
80084b54:	1cc00104 	addi	r19,r3,4
80084b58:	80041926 	beq	r16,zero,80085bc0 <___vfprintf_internal_r+0x1c90>
80084b5c:	d9002917 	ldw	r4,164(sp)
80084b60:	2003d016 	blt	r4,zero,80085aa4 <___vfprintf_internal_r+0x1b74>
80084b64:	200d883a 	mov	r6,r4
80084b68:	000b883a 	mov	r5,zero
80084b6c:	8009883a 	mov	r4,r16
80084b70:	da003d15 	stw	r8,244(sp)
80084b74:	00898640 	call	80089864 <memchr>
80084b78:	da003d17 	ldw	r8,244(sp)
80084b7c:	10045426 	beq	r2,zero,80085cd0 <___vfprintf_internal_r+0x1da0>
80084b80:	1405c83a 	sub	r2,r2,r16
80084b84:	d8802e15 	stw	r2,184(sp)
80084b88:	1003cc16 	blt	r2,zero,80085abc <___vfprintf_internal_r+0x1b8c>
80084b8c:	df002783 	ldbu	fp,158(sp)
80084b90:	d8802a15 	stw	r2,168(sp)
80084b94:	dcc02d15 	stw	r19,180(sp)
80084b98:	d8002915 	stw	zero,164(sp)
80084b9c:	d8003215 	stw	zero,200(sp)
80084ba0:	003eb006 	br	80084664 <___vfprintf_internal_r+0x734>
80084ba4:	18c03fcc 	andi	r3,r3,255
80084ba8:	183f9b26 	beq	r3,zero,80084a18 <___vfprintf_internal_r+0xae8>
80084bac:	d9c02785 	stb	r7,158(sp)
80084bb0:	003f9906 	br	80084a18 <___vfprintf_internal_r+0xae8>
80084bb4:	18c03fcc 	andi	r3,r3,255
80084bb8:	1805551e 	bne	r3,zero,80086110 <___vfprintf_internal_r+0x21e0>
80084bbc:	01600274 	movhi	r5,32777
80084bc0:	295a8b04 	addi	r5,r5,27180
80084bc4:	d9403915 	stw	r5,228(sp)
80084bc8:	9080080c 	andi	r2,r18,32
80084bcc:	103fae1e 	bne	r2,zero,80084a88 <___vfprintf_internal_r+0xb58>
80084bd0:	9080040c 	andi	r2,r18,16
80084bd4:	1002de26 	beq	r2,zero,80085750 <___vfprintf_internal_r+0x1820>
80084bd8:	d8c02d17 	ldw	r3,180(sp)
80084bdc:	002d883a 	mov	r22,zero
80084be0:	1cc00017 	ldw	r19,0(r3)
80084be4:	18c00104 	addi	r3,r3,4
80084be8:	d8c02d15 	stw	r3,180(sp)
80084bec:	003fab06 	br	80084a9c <___vfprintf_internal_r+0xb6c>
80084bf0:	38803fcc 	andi	r2,r7,255
80084bf4:	1080201c 	xori	r2,r2,128
80084bf8:	10bfe004 	addi	r2,r2,-128
80084bfc:	1002d21e 	bne	r2,zero,80085748 <___vfprintf_internal_r+0x1818>
80084c00:	00c00044 	movi	r3,1
80084c04:	01c00804 	movi	r7,32
80084c08:	ac400007 	ldb	r17,0(r21)
80084c0c:	003d2906 	br	800840b4 <___vfprintf_internal_r+0x184>
80084c10:	94800054 	ori	r18,r18,1
80084c14:	ac400007 	ldb	r17,0(r21)
80084c18:	003d2606 	br	800840b4 <___vfprintf_internal_r+0x184>
80084c1c:	18c03fcc 	andi	r3,r3,255
80084c20:	183e0526 	beq	r3,zero,80084438 <___vfprintf_internal_r+0x508>
80084c24:	d9c02785 	stb	r7,158(sp)
80084c28:	003e0306 	br	80084438 <___vfprintf_internal_r+0x508>
80084c2c:	94801014 	ori	r18,r18,64
80084c30:	ac400007 	ldb	r17,0(r21)
80084c34:	003d1f06 	br	800840b4 <___vfprintf_internal_r+0x184>
80084c38:	ac400007 	ldb	r17,0(r21)
80084c3c:	8a438726 	beq	r17,r9,80085a5c <___vfprintf_internal_r+0x1b2c>
80084c40:	94800414 	ori	r18,r18,16
80084c44:	003d1b06 	br	800840b4 <___vfprintf_internal_r+0x184>
80084c48:	18c03fcc 	andi	r3,r3,255
80084c4c:	1805341e 	bne	r3,zero,80086120 <___vfprintf_internal_r+0x21f0>
80084c50:	9080080c 	andi	r2,r18,32
80084c54:	1002cd26 	beq	r2,zero,8008578c <___vfprintf_internal_r+0x185c>
80084c58:	d9402d17 	ldw	r5,180(sp)
80084c5c:	d9002f17 	ldw	r4,188(sp)
80084c60:	28800017 	ldw	r2,0(r5)
80084c64:	2007d7fa 	srai	r3,r4,31
80084c68:	29400104 	addi	r5,r5,4
80084c6c:	d9402d15 	stw	r5,180(sp)
80084c70:	11000015 	stw	r4,0(r2)
80084c74:	10c00115 	stw	r3,4(r2)
80084c78:	003ce506 	br	80084010 <___vfprintf_internal_r+0xe0>
80084c7c:	d8c02d17 	ldw	r3,180(sp)
80084c80:	d9002d17 	ldw	r4,180(sp)
80084c84:	d8002785 	stb	zero,158(sp)
80084c88:	18800017 	ldw	r2,0(r3)
80084c8c:	21000104 	addi	r4,r4,4
80084c90:	00c00044 	movi	r3,1
80084c94:	d8c02a15 	stw	r3,168(sp)
80084c98:	d8801405 	stb	r2,80(sp)
80084c9c:	d9002d15 	stw	r4,180(sp)
80084ca0:	d8c02e15 	stw	r3,184(sp)
80084ca4:	d8002915 	stw	zero,164(sp)
80084ca8:	d8003215 	stw	zero,200(sp)
80084cac:	dc001404 	addi	r16,sp,80
80084cb0:	0039883a 	mov	fp,zero
80084cb4:	003e7206 	br	80084680 <___vfprintf_internal_r+0x750>
80084cb8:	01200274 	movhi	r4,32777
80084cbc:	211a8b04 	addi	r4,r4,27180
80084cc0:	0039883a 	mov	fp,zero
80084cc4:	d9003915 	stw	r4,228(sp)
80084cc8:	04401e04 	movi	r17,120
80084ccc:	003f8206 	br	80084ad8 <___vfprintf_internal_r+0xba8>
80084cd0:	18c03fcc 	andi	r3,r3,255
80084cd4:	1805061e 	bne	r3,zero,800860f0 <___vfprintf_internal_r+0x21c0>
80084cd8:	883d9126 	beq	r17,zero,80084320 <___vfprintf_internal_r+0x3f0>
80084cdc:	00c00044 	movi	r3,1
80084ce0:	d8c02a15 	stw	r3,168(sp)
80084ce4:	dc401405 	stb	r17,80(sp)
80084ce8:	d8002785 	stb	zero,158(sp)
80084cec:	003fec06 	br	80084ca0 <___vfprintf_internal_r+0xd70>
80084cf0:	01600274 	movhi	r5,32777
80084cf4:	295a8b04 	addi	r5,r5,27180
80084cf8:	d9403915 	stw	r5,228(sp)
80084cfc:	d8c02d15 	stw	r3,180(sp)
80084d00:	1025883a 	mov	r18,r2
80084d04:	04401e04 	movi	r17,120
80084d08:	9d84b03a 	or	r2,r19,r22
80084d0c:	1000fc1e 	bne	r2,zero,80085100 <___vfprintf_internal_r+0x11d0>
80084d10:	0039883a 	mov	fp,zero
80084d14:	00800084 	movi	r2,2
80084d18:	10803fcc 	andi	r2,r2,255
80084d1c:	00c00044 	movi	r3,1
80084d20:	10c20f26 	beq	r2,r3,80085560 <___vfprintf_internal_r+0x1630>
80084d24:	00c00084 	movi	r3,2
80084d28:	10fd6326 	beq	r2,r3,800842b8 <___vfprintf_internal_r+0x388>
80084d2c:	003e2d06 	br	800845e4 <___vfprintf_internal_r+0x6b4>
80084d30:	d8c02017 	ldw	r3,128(sp)
80084d34:	003e9306 	br	80084784 <___vfprintf_internal_r+0x854>
80084d38:	00801944 	movi	r2,101
80084d3c:	14407e0e 	bge	r2,r17,80084f38 <___vfprintf_internal_r+0x1008>
80084d40:	d9003617 	ldw	r4,216(sp)
80084d44:	d9403817 	ldw	r5,224(sp)
80084d48:	000d883a 	mov	r6,zero
80084d4c:	000f883a 	mov	r7,zero
80084d50:	d8c03c15 	stw	r3,240(sp)
80084d54:	da003d15 	stw	r8,244(sp)
80084d58:	00908c40 	call	800908c4 <__eqdf2>
80084d5c:	d8c03c17 	ldw	r3,240(sp)
80084d60:	da003d17 	ldw	r8,244(sp)
80084d64:	1000f71e 	bne	r2,zero,80085144 <___vfprintf_internal_r+0x1214>
80084d68:	d8801f17 	ldw	r2,124(sp)
80084d6c:	01200274 	movhi	r4,32777
80084d70:	211a9204 	addi	r4,r4,27208
80084d74:	18c00044 	addi	r3,r3,1
80084d78:	10800044 	addi	r2,r2,1
80084d7c:	41000015 	stw	r4,0(r8)
80084d80:	01000044 	movi	r4,1
80084d84:	41000115 	stw	r4,4(r8)
80084d88:	d8c02015 	stw	r3,128(sp)
80084d8c:	d8801f15 	stw	r2,124(sp)
80084d90:	010001c4 	movi	r4,7
80084d94:	2082b816 	blt	r4,r2,80085878 <___vfprintf_internal_r+0x1948>
80084d98:	42000204 	addi	r8,r8,8
80084d9c:	d8802617 	ldw	r2,152(sp)
80084da0:	d9403317 	ldw	r5,204(sp)
80084da4:	11400216 	blt	r2,r5,80084db0 <___vfprintf_internal_r+0xe80>
80084da8:	9080004c 	andi	r2,r18,1
80084dac:	103ed526 	beq	r2,zero,80084904 <___vfprintf_internal_r+0x9d4>
80084db0:	d8803717 	ldw	r2,220(sp)
80084db4:	d9003417 	ldw	r4,208(sp)
80084db8:	d9403717 	ldw	r5,220(sp)
80084dbc:	1887883a 	add	r3,r3,r2
80084dc0:	d8801f17 	ldw	r2,124(sp)
80084dc4:	41000015 	stw	r4,0(r8)
80084dc8:	41400115 	stw	r5,4(r8)
80084dcc:	10800044 	addi	r2,r2,1
80084dd0:	d8c02015 	stw	r3,128(sp)
80084dd4:	d8801f15 	stw	r2,124(sp)
80084dd8:	010001c4 	movi	r4,7
80084ddc:	20832916 	blt	r4,r2,80085a84 <___vfprintf_internal_r+0x1b54>
80084de0:	42000204 	addi	r8,r8,8
80084de4:	d8803317 	ldw	r2,204(sp)
80084de8:	143fffc4 	addi	r16,r2,-1
80084dec:	043ec50e 	bge	zero,r16,80084904 <___vfprintf_internal_r+0x9d4>
80084df0:	04400404 	movi	r17,16
80084df4:	d8801f17 	ldw	r2,124(sp)
80084df8:	8c00880e 	bge	r17,r16,8008501c <___vfprintf_internal_r+0x10ec>
80084dfc:	01600274 	movhi	r5,32777
80084e00:	295a9a84 	addi	r5,r5,27242
80084e04:	d9402b15 	stw	r5,172(sp)
80084e08:	058001c4 	movi	r22,7
80084e0c:	dcc02c17 	ldw	r19,176(sp)
80084e10:	00000306 	br	80084e20 <___vfprintf_internal_r+0xef0>
80084e14:	42000204 	addi	r8,r8,8
80084e18:	843ffc04 	addi	r16,r16,-16
80084e1c:	8c00820e 	bge	r17,r16,80085028 <___vfprintf_internal_r+0x10f8>
80084e20:	18c00404 	addi	r3,r3,16
80084e24:	10800044 	addi	r2,r2,1
80084e28:	45000015 	stw	r20,0(r8)
80084e2c:	44400115 	stw	r17,4(r8)
80084e30:	d8c02015 	stw	r3,128(sp)
80084e34:	d8801f15 	stw	r2,124(sp)
80084e38:	b0bff60e 	bge	r22,r2,80084e14 <___vfprintf_internal_r+0xee4>
80084e3c:	d9801e04 	addi	r6,sp,120
80084e40:	b80b883a 	mov	r5,r23
80084e44:	9809883a 	mov	r4,r19
80084e48:	008cc4c0 	call	8008cc4c <__sprint_r>
80084e4c:	103d3a1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80084e50:	d8c02017 	ldw	r3,128(sp)
80084e54:	d8801f17 	ldw	r2,124(sp)
80084e58:	da000404 	addi	r8,sp,16
80084e5c:	003fee06 	br	80084e18 <___vfprintf_internal_r+0xee8>
80084e60:	d9403117 	ldw	r5,196(sp)
80084e64:	d8802a17 	ldw	r2,168(sp)
80084e68:	28adc83a 	sub	r22,r5,r2
80084e6c:	05be630e 	bge	zero,r22,800847fc <___vfprintf_internal_r+0x8cc>
80084e70:	07000404 	movi	fp,16
80084e74:	d8801f17 	ldw	r2,124(sp)
80084e78:	e5838f0e 	bge	fp,r22,80085cb8 <___vfprintf_internal_r+0x1d88>
80084e7c:	01600274 	movhi	r5,32777
80084e80:	295a9a84 	addi	r5,r5,27242
80084e84:	dc403015 	stw	r17,192(sp)
80084e88:	d9402b15 	stw	r5,172(sp)
80084e8c:	b023883a 	mov	r17,r22
80084e90:	04c001c4 	movi	r19,7
80084e94:	a82d883a 	mov	r22,r21
80084e98:	902b883a 	mov	r21,r18
80084e9c:	8025883a 	mov	r18,r16
80084ea0:	dc002c17 	ldw	r16,176(sp)
80084ea4:	00000306 	br	80084eb4 <___vfprintf_internal_r+0xf84>
80084ea8:	8c7ffc04 	addi	r17,r17,-16
80084eac:	42000204 	addi	r8,r8,8
80084eb0:	e440110e 	bge	fp,r17,80084ef8 <___vfprintf_internal_r+0xfc8>
80084eb4:	18c00404 	addi	r3,r3,16
80084eb8:	10800044 	addi	r2,r2,1
80084ebc:	45000015 	stw	r20,0(r8)
80084ec0:	47000115 	stw	fp,4(r8)
80084ec4:	d8c02015 	stw	r3,128(sp)
80084ec8:	d8801f15 	stw	r2,124(sp)
80084ecc:	98bff60e 	bge	r19,r2,80084ea8 <___vfprintf_internal_r+0xf78>
80084ed0:	d9801e04 	addi	r6,sp,120
80084ed4:	b80b883a 	mov	r5,r23
80084ed8:	8009883a 	mov	r4,r16
80084edc:	008cc4c0 	call	8008cc4c <__sprint_r>
80084ee0:	103d151e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80084ee4:	8c7ffc04 	addi	r17,r17,-16
80084ee8:	d8c02017 	ldw	r3,128(sp)
80084eec:	d8801f17 	ldw	r2,124(sp)
80084ef0:	da000404 	addi	r8,sp,16
80084ef4:	e47fef16 	blt	fp,r17,80084eb4 <___vfprintf_internal_r+0xf84>
80084ef8:	9021883a 	mov	r16,r18
80084efc:	a825883a 	mov	r18,r21
80084f00:	b02b883a 	mov	r21,r22
80084f04:	882d883a 	mov	r22,r17
80084f08:	dc403017 	ldw	r17,192(sp)
80084f0c:	d9002b17 	ldw	r4,172(sp)
80084f10:	1d87883a 	add	r3,r3,r22
80084f14:	10800044 	addi	r2,r2,1
80084f18:	41000015 	stw	r4,0(r8)
80084f1c:	45800115 	stw	r22,4(r8)
80084f20:	d8c02015 	stw	r3,128(sp)
80084f24:	d8801f15 	stw	r2,124(sp)
80084f28:	010001c4 	movi	r4,7
80084f2c:	20818e16 	blt	r4,r2,80085568 <___vfprintf_internal_r+0x1638>
80084f30:	42000204 	addi	r8,r8,8
80084f34:	003e3106 	br	800847fc <___vfprintf_internal_r+0x8cc>
80084f38:	d9403317 	ldw	r5,204(sp)
80084f3c:	00800044 	movi	r2,1
80084f40:	18c00044 	addi	r3,r3,1
80084f44:	1141530e 	bge	r2,r5,80085494 <___vfprintf_internal_r+0x1564>
80084f48:	dc401f17 	ldw	r17,124(sp)
80084f4c:	00800044 	movi	r2,1
80084f50:	40800115 	stw	r2,4(r8)
80084f54:	8c400044 	addi	r17,r17,1
80084f58:	44000015 	stw	r16,0(r8)
80084f5c:	d8c02015 	stw	r3,128(sp)
80084f60:	dc401f15 	stw	r17,124(sp)
80084f64:	008001c4 	movi	r2,7
80084f68:	14416b16 	blt	r2,r17,80085518 <___vfprintf_internal_r+0x15e8>
80084f6c:	42000204 	addi	r8,r8,8
80084f70:	d8803717 	ldw	r2,220(sp)
80084f74:	d9003417 	ldw	r4,208(sp)
80084f78:	8c400044 	addi	r17,r17,1
80084f7c:	10c7883a 	add	r3,r2,r3
80084f80:	40800115 	stw	r2,4(r8)
80084f84:	41000015 	stw	r4,0(r8)
80084f88:	d8c02015 	stw	r3,128(sp)
80084f8c:	dc401f15 	stw	r17,124(sp)
80084f90:	008001c4 	movi	r2,7
80084f94:	14416916 	blt	r2,r17,8008553c <___vfprintf_internal_r+0x160c>
80084f98:	45800204 	addi	r22,r8,8
80084f9c:	d9003617 	ldw	r4,216(sp)
80084fa0:	d9403817 	ldw	r5,224(sp)
80084fa4:	000d883a 	mov	r6,zero
80084fa8:	000f883a 	mov	r7,zero
80084fac:	d8c03c15 	stw	r3,240(sp)
80084fb0:	00908c40 	call	800908c4 <__eqdf2>
80084fb4:	d8c03c17 	ldw	r3,240(sp)
80084fb8:	1000bc26 	beq	r2,zero,800852ac <___vfprintf_internal_r+0x137c>
80084fbc:	d9403317 	ldw	r5,204(sp)
80084fc0:	84000044 	addi	r16,r16,1
80084fc4:	8c400044 	addi	r17,r17,1
80084fc8:	28bfffc4 	addi	r2,r5,-1
80084fcc:	1887883a 	add	r3,r3,r2
80084fd0:	b0800115 	stw	r2,4(r22)
80084fd4:	b4000015 	stw	r16,0(r22)
80084fd8:	d8c02015 	stw	r3,128(sp)
80084fdc:	dc401f15 	stw	r17,124(sp)
80084fe0:	008001c4 	movi	r2,7
80084fe4:	14414316 	blt	r2,r17,800854f4 <___vfprintf_internal_r+0x15c4>
80084fe8:	b5800204 	addi	r22,r22,8
80084fec:	d9003a17 	ldw	r4,232(sp)
80084ff0:	df0022c4 	addi	fp,sp,139
80084ff4:	8c400044 	addi	r17,r17,1
80084ff8:	20c7883a 	add	r3,r4,r3
80084ffc:	b7000015 	stw	fp,0(r22)
80085000:	b1000115 	stw	r4,4(r22)
80085004:	d8c02015 	stw	r3,128(sp)
80085008:	dc401f15 	stw	r17,124(sp)
8008500c:	008001c4 	movi	r2,7
80085010:	14400e16 	blt	r2,r17,8008504c <___vfprintf_internal_r+0x111c>
80085014:	b2000204 	addi	r8,r22,8
80085018:	003e3a06 	br	80084904 <___vfprintf_internal_r+0x9d4>
8008501c:	01200274 	movhi	r4,32777
80085020:	211a9a84 	addi	r4,r4,27242
80085024:	d9002b15 	stw	r4,172(sp)
80085028:	d9002b17 	ldw	r4,172(sp)
8008502c:	1c07883a 	add	r3,r3,r16
80085030:	44000115 	stw	r16,4(r8)
80085034:	41000015 	stw	r4,0(r8)
80085038:	10800044 	addi	r2,r2,1
8008503c:	d8c02015 	stw	r3,128(sp)
80085040:	d8801f15 	stw	r2,124(sp)
80085044:	010001c4 	movi	r4,7
80085048:	20be2d0e 	bge	r4,r2,80084900 <___vfprintf_internal_r+0x9d0>
8008504c:	d9002c17 	ldw	r4,176(sp)
80085050:	d9801e04 	addi	r6,sp,120
80085054:	b80b883a 	mov	r5,r23
80085058:	008cc4c0 	call	8008cc4c <__sprint_r>
8008505c:	103cb61e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085060:	d8c02017 	ldw	r3,128(sp)
80085064:	da000404 	addi	r8,sp,16
80085068:	003e2606 	br	80084904 <___vfprintf_internal_r+0x9d4>
8008506c:	d9002c17 	ldw	r4,176(sp)
80085070:	d9801e04 	addi	r6,sp,120
80085074:	b80b883a 	mov	r5,r23
80085078:	008cc4c0 	call	8008cc4c <__sprint_r>
8008507c:	103e5d26 	beq	r2,zero,800849f4 <___vfprintf_internal_r+0xac4>
80085080:	003cad06 	br	80084338 <___vfprintf_internal_r+0x408>
80085084:	d9002c17 	ldw	r4,176(sp)
80085088:	d9801e04 	addi	r6,sp,120
8008508c:	b80b883a 	mov	r5,r23
80085090:	008cc4c0 	call	8008cc4c <__sprint_r>
80085094:	103ca81e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085098:	d8c02017 	ldw	r3,128(sp)
8008509c:	da000404 	addi	r8,sp,16
800850a0:	003e0b06 	br	800848d0 <___vfprintf_internal_r+0x9a0>
800850a4:	d9002c17 	ldw	r4,176(sp)
800850a8:	d9801e04 	addi	r6,sp,120
800850ac:	b80b883a 	mov	r5,r23
800850b0:	008cc4c0 	call	8008cc4c <__sprint_r>
800850b4:	103ca01e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
800850b8:	d8c02017 	ldw	r3,128(sp)
800850bc:	da000404 	addi	r8,sp,16
800850c0:	003dbd06 	br	800847b8 <___vfprintf_internal_r+0x888>
800850c4:	d9002c17 	ldw	r4,176(sp)
800850c8:	d9801e04 	addi	r6,sp,120
800850cc:	b80b883a 	mov	r5,r23
800850d0:	008cc4c0 	call	8008cc4c <__sprint_r>
800850d4:	103c981e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
800850d8:	d8c02017 	ldw	r3,128(sp)
800850dc:	da000404 	addi	r8,sp,16
800850e0:	003dc306 	br	800847f0 <___vfprintf_internal_r+0x8c0>
800850e4:	d8802917 	ldw	r2,164(sp)
800850e8:	d8002785 	stb	zero,158(sp)
800850ec:	103f0616 	blt	r2,zero,80084d08 <___vfprintf_internal_r+0xdd8>
800850f0:	00ffdfc4 	movi	r3,-129
800850f4:	9d84b03a 	or	r2,r19,r22
800850f8:	90e4703a 	and	r18,r18,r3
800850fc:	103c6b26 	beq	r2,zero,800842ac <___vfprintf_internal_r+0x37c>
80085100:	0039883a 	mov	fp,zero
80085104:	003e7406 	br	80084ad8 <___vfprintf_internal_r+0xba8>
80085108:	9080040c 	andi	r2,r18,16
8008510c:	1001b326 	beq	r2,zero,800857dc <___vfprintf_internal_r+0x18ac>
80085110:	d9002d17 	ldw	r4,180(sp)
80085114:	d9402917 	ldw	r5,164(sp)
80085118:	d8002785 	stb	zero,158(sp)
8008511c:	20800104 	addi	r2,r4,4
80085120:	24c00017 	ldw	r19,0(r4)
80085124:	002d883a 	mov	r22,zero
80085128:	2801b516 	blt	r5,zero,80085800 <___vfprintf_internal_r+0x18d0>
8008512c:	00ffdfc4 	movi	r3,-129
80085130:	d8802d15 	stw	r2,180(sp)
80085134:	90e4703a 	and	r18,r18,r3
80085138:	983d2726 	beq	r19,zero,800845d8 <___vfprintf_internal_r+0x6a8>
8008513c:	0039883a 	mov	fp,zero
80085140:	003d2a06 	br	800845ec <___vfprintf_internal_r+0x6bc>
80085144:	dc402617 	ldw	r17,152(sp)
80085148:	0441d30e 	bge	zero,r17,80085898 <___vfprintf_internal_r+0x1968>
8008514c:	dc403217 	ldw	r17,200(sp)
80085150:	d8803317 	ldw	r2,204(sp)
80085154:	1440010e 	bge	r2,r17,8008515c <___vfprintf_internal_r+0x122c>
80085158:	1023883a 	mov	r17,r2
8008515c:	04400a0e 	bge	zero,r17,80085188 <___vfprintf_internal_r+0x1258>
80085160:	d8801f17 	ldw	r2,124(sp)
80085164:	1c47883a 	add	r3,r3,r17
80085168:	44000015 	stw	r16,0(r8)
8008516c:	10800044 	addi	r2,r2,1
80085170:	44400115 	stw	r17,4(r8)
80085174:	d8c02015 	stw	r3,128(sp)
80085178:	d8801f15 	stw	r2,124(sp)
8008517c:	010001c4 	movi	r4,7
80085180:	20826516 	blt	r4,r2,80085b18 <___vfprintf_internal_r+0x1be8>
80085184:	42000204 	addi	r8,r8,8
80085188:	88026116 	blt	r17,zero,80085b10 <___vfprintf_internal_r+0x1be0>
8008518c:	d9003217 	ldw	r4,200(sp)
80085190:	2463c83a 	sub	r17,r4,r17
80085194:	04407b0e 	bge	zero,r17,80085384 <___vfprintf_internal_r+0x1454>
80085198:	05800404 	movi	r22,16
8008519c:	d8801f17 	ldw	r2,124(sp)
800851a0:	b4419d0e 	bge	r22,r17,80085818 <___vfprintf_internal_r+0x18e8>
800851a4:	01200274 	movhi	r4,32777
800851a8:	211a9a84 	addi	r4,r4,27242
800851ac:	d9002b15 	stw	r4,172(sp)
800851b0:	070001c4 	movi	fp,7
800851b4:	dcc02c17 	ldw	r19,176(sp)
800851b8:	00000306 	br	800851c8 <___vfprintf_internal_r+0x1298>
800851bc:	42000204 	addi	r8,r8,8
800851c0:	8c7ffc04 	addi	r17,r17,-16
800851c4:	b441970e 	bge	r22,r17,80085824 <___vfprintf_internal_r+0x18f4>
800851c8:	18c00404 	addi	r3,r3,16
800851cc:	10800044 	addi	r2,r2,1
800851d0:	45000015 	stw	r20,0(r8)
800851d4:	45800115 	stw	r22,4(r8)
800851d8:	d8c02015 	stw	r3,128(sp)
800851dc:	d8801f15 	stw	r2,124(sp)
800851e0:	e0bff60e 	bge	fp,r2,800851bc <___vfprintf_internal_r+0x128c>
800851e4:	d9801e04 	addi	r6,sp,120
800851e8:	b80b883a 	mov	r5,r23
800851ec:	9809883a 	mov	r4,r19
800851f0:	008cc4c0 	call	8008cc4c <__sprint_r>
800851f4:	103c501e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
800851f8:	d8c02017 	ldw	r3,128(sp)
800851fc:	d8801f17 	ldw	r2,124(sp)
80085200:	da000404 	addi	r8,sp,16
80085204:	003fee06 	br	800851c0 <___vfprintf_internal_r+0x1290>
80085208:	d9002c17 	ldw	r4,176(sp)
8008520c:	d9801e04 	addi	r6,sp,120
80085210:	b80b883a 	mov	r5,r23
80085214:	008cc4c0 	call	8008cc4c <__sprint_r>
80085218:	103c471e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
8008521c:	d8c02017 	ldw	r3,128(sp)
80085220:	df002787 	ldb	fp,158(sp)
80085224:	da000404 	addi	r8,sp,16
80085228:	003d5606 	br	80084784 <___vfprintf_internal_r+0x854>
8008522c:	9080040c 	andi	r2,r18,16
80085230:	10016126 	beq	r2,zero,800857b8 <___vfprintf_internal_r+0x1888>
80085234:	d8802d17 	ldw	r2,180(sp)
80085238:	14c00017 	ldw	r19,0(r2)
8008523c:	10800104 	addi	r2,r2,4
80085240:	d8802d15 	stw	r2,180(sp)
80085244:	982dd7fa 	srai	r22,r19,31
80085248:	b005883a 	mov	r2,r22
8008524c:	003c8206 	br	80084458 <___vfprintf_internal_r+0x528>
80085250:	9080040c 	andi	r2,r18,16
80085254:	10003526 	beq	r2,zero,8008532c <___vfprintf_internal_r+0x13fc>
80085258:	d9402d17 	ldw	r5,180(sp)
8008525c:	d8c02917 	ldw	r3,164(sp)
80085260:	d8002785 	stb	zero,158(sp)
80085264:	28800104 	addi	r2,r5,4
80085268:	2cc00017 	ldw	r19,0(r5)
8008526c:	002d883a 	mov	r22,zero
80085270:	18003716 	blt	r3,zero,80085350 <___vfprintf_internal_r+0x1420>
80085274:	00ffdfc4 	movi	r3,-129
80085278:	d8802d15 	stw	r2,180(sp)
8008527c:	90e4703a 	and	r18,r18,r3
80085280:	0039883a 	mov	fp,zero
80085284:	983df326 	beq	r19,zero,80084a54 <___vfprintf_internal_r+0xb24>
80085288:	00800244 	movi	r2,9
8008528c:	14fc7b36 	bltu	r2,r19,8008447c <___vfprintf_internal_r+0x54c>
80085290:	d8c02817 	ldw	r3,160(sp)
80085294:	dc001dc4 	addi	r16,sp,119
80085298:	9cc00c04 	addi	r19,r19,48
8008529c:	1c07c83a 	sub	r3,r3,r16
800852a0:	dcc01dc5 	stb	r19,119(sp)
800852a4:	d8c02e15 	stw	r3,184(sp)
800852a8:	003ce806 	br	8008464c <___vfprintf_internal_r+0x71c>
800852ac:	d8803317 	ldw	r2,204(sp)
800852b0:	143fffc4 	addi	r16,r2,-1
800852b4:	043f4d0e 	bge	zero,r16,80084fec <___vfprintf_internal_r+0x10bc>
800852b8:	07000404 	movi	fp,16
800852bc:	e400810e 	bge	fp,r16,800854c4 <___vfprintf_internal_r+0x1594>
800852c0:	01600274 	movhi	r5,32777
800852c4:	295a9a84 	addi	r5,r5,27242
800852c8:	d9402b15 	stw	r5,172(sp)
800852cc:	01c001c4 	movi	r7,7
800852d0:	dcc02c17 	ldw	r19,176(sp)
800852d4:	00000306 	br	800852e4 <___vfprintf_internal_r+0x13b4>
800852d8:	b5800204 	addi	r22,r22,8
800852dc:	843ffc04 	addi	r16,r16,-16
800852e0:	e4007b0e 	bge	fp,r16,800854d0 <___vfprintf_internal_r+0x15a0>
800852e4:	18c00404 	addi	r3,r3,16
800852e8:	8c400044 	addi	r17,r17,1
800852ec:	b5000015 	stw	r20,0(r22)
800852f0:	b7000115 	stw	fp,4(r22)
800852f4:	d8c02015 	stw	r3,128(sp)
800852f8:	dc401f15 	stw	r17,124(sp)
800852fc:	3c7ff60e 	bge	r7,r17,800852d8 <___vfprintf_internal_r+0x13a8>
80085300:	d9801e04 	addi	r6,sp,120
80085304:	b80b883a 	mov	r5,r23
80085308:	9809883a 	mov	r4,r19
8008530c:	d9c03c15 	stw	r7,240(sp)
80085310:	008cc4c0 	call	8008cc4c <__sprint_r>
80085314:	d9c03c17 	ldw	r7,240(sp)
80085318:	103c071e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
8008531c:	d8c02017 	ldw	r3,128(sp)
80085320:	dc401f17 	ldw	r17,124(sp)
80085324:	dd800404 	addi	r22,sp,16
80085328:	003fec06 	br	800852dc <___vfprintf_internal_r+0x13ac>
8008532c:	9080100c 	andi	r2,r18,64
80085330:	d8002785 	stb	zero,158(sp)
80085334:	10010e26 	beq	r2,zero,80085770 <___vfprintf_internal_r+0x1840>
80085338:	d9002d17 	ldw	r4,180(sp)
8008533c:	d9402917 	ldw	r5,164(sp)
80085340:	002d883a 	mov	r22,zero
80085344:	20800104 	addi	r2,r4,4
80085348:	24c0000b 	ldhu	r19,0(r4)
8008534c:	283fc90e 	bge	r5,zero,80085274 <___vfprintf_internal_r+0x1344>
80085350:	d8802d15 	stw	r2,180(sp)
80085354:	0039883a 	mov	fp,zero
80085358:	9d84b03a 	or	r2,r19,r22
8008535c:	103c461e 	bne	r2,zero,80084478 <___vfprintf_internal_r+0x548>
80085360:	00800044 	movi	r2,1
80085364:	003e6c06 	br	80084d18 <___vfprintf_internal_r+0xde8>
80085368:	d9002c17 	ldw	r4,176(sp)
8008536c:	d9801e04 	addi	r6,sp,120
80085370:	b80b883a 	mov	r5,r23
80085374:	008cc4c0 	call	8008cc4c <__sprint_r>
80085378:	103bef1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
8008537c:	d8c02017 	ldw	r3,128(sp)
80085380:	da000404 	addi	r8,sp,16
80085384:	d9003217 	ldw	r4,200(sp)
80085388:	d8802617 	ldw	r2,152(sp)
8008538c:	d9403317 	ldw	r5,204(sp)
80085390:	8123883a 	add	r17,r16,r4
80085394:	11400216 	blt	r2,r5,800853a0 <___vfprintf_internal_r+0x1470>
80085398:	9100004c 	andi	r4,r18,1
8008539c:	20000d26 	beq	r4,zero,800853d4 <___vfprintf_internal_r+0x14a4>
800853a0:	d9003717 	ldw	r4,220(sp)
800853a4:	d9403417 	ldw	r5,208(sp)
800853a8:	1907883a 	add	r3,r3,r4
800853ac:	d9001f17 	ldw	r4,124(sp)
800853b0:	41400015 	stw	r5,0(r8)
800853b4:	d9403717 	ldw	r5,220(sp)
800853b8:	21000044 	addi	r4,r4,1
800853bc:	d8c02015 	stw	r3,128(sp)
800853c0:	41400115 	stw	r5,4(r8)
800853c4:	d9001f15 	stw	r4,124(sp)
800853c8:	014001c4 	movi	r5,7
800853cc:	2901e816 	blt	r5,r4,80085b70 <___vfprintf_internal_r+0x1c40>
800853d0:	42000204 	addi	r8,r8,8
800853d4:	d9003317 	ldw	r4,204(sp)
800853d8:	8121883a 	add	r16,r16,r4
800853dc:	2085c83a 	sub	r2,r4,r2
800853e0:	8461c83a 	sub	r16,r16,r17
800853e4:	1400010e 	bge	r2,r16,800853ec <___vfprintf_internal_r+0x14bc>
800853e8:	1021883a 	mov	r16,r2
800853ec:	04000a0e 	bge	zero,r16,80085418 <___vfprintf_internal_r+0x14e8>
800853f0:	d9001f17 	ldw	r4,124(sp)
800853f4:	1c07883a 	add	r3,r3,r16
800853f8:	44400015 	stw	r17,0(r8)
800853fc:	21000044 	addi	r4,r4,1
80085400:	44000115 	stw	r16,4(r8)
80085404:	d8c02015 	stw	r3,128(sp)
80085408:	d9001f15 	stw	r4,124(sp)
8008540c:	014001c4 	movi	r5,7
80085410:	2901fb16 	blt	r5,r4,80085c00 <___vfprintf_internal_r+0x1cd0>
80085414:	42000204 	addi	r8,r8,8
80085418:	8001f716 	blt	r16,zero,80085bf8 <___vfprintf_internal_r+0x1cc8>
8008541c:	1421c83a 	sub	r16,r2,r16
80085420:	043d380e 	bge	zero,r16,80084904 <___vfprintf_internal_r+0x9d4>
80085424:	04400404 	movi	r17,16
80085428:	d8801f17 	ldw	r2,124(sp)
8008542c:	8c3efb0e 	bge	r17,r16,8008501c <___vfprintf_internal_r+0x10ec>
80085430:	01600274 	movhi	r5,32777
80085434:	295a9a84 	addi	r5,r5,27242
80085438:	d9402b15 	stw	r5,172(sp)
8008543c:	058001c4 	movi	r22,7
80085440:	dcc02c17 	ldw	r19,176(sp)
80085444:	00000306 	br	80085454 <___vfprintf_internal_r+0x1524>
80085448:	42000204 	addi	r8,r8,8
8008544c:	843ffc04 	addi	r16,r16,-16
80085450:	8c3ef50e 	bge	r17,r16,80085028 <___vfprintf_internal_r+0x10f8>
80085454:	18c00404 	addi	r3,r3,16
80085458:	10800044 	addi	r2,r2,1
8008545c:	45000015 	stw	r20,0(r8)
80085460:	44400115 	stw	r17,4(r8)
80085464:	d8c02015 	stw	r3,128(sp)
80085468:	d8801f15 	stw	r2,124(sp)
8008546c:	b0bff60e 	bge	r22,r2,80085448 <___vfprintf_internal_r+0x1518>
80085470:	d9801e04 	addi	r6,sp,120
80085474:	b80b883a 	mov	r5,r23
80085478:	9809883a 	mov	r4,r19
8008547c:	008cc4c0 	call	8008cc4c <__sprint_r>
80085480:	103bad1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085484:	d8c02017 	ldw	r3,128(sp)
80085488:	d8801f17 	ldw	r2,124(sp)
8008548c:	da000404 	addi	r8,sp,16
80085490:	003fee06 	br	8008544c <___vfprintf_internal_r+0x151c>
80085494:	9088703a 	and	r4,r18,r2
80085498:	203eab1e 	bne	r4,zero,80084f48 <___vfprintf_internal_r+0x1018>
8008549c:	dc401f17 	ldw	r17,124(sp)
800854a0:	40800115 	stw	r2,4(r8)
800854a4:	44000015 	stw	r16,0(r8)
800854a8:	8c400044 	addi	r17,r17,1
800854ac:	d8c02015 	stw	r3,128(sp)
800854b0:	dc401f15 	stw	r17,124(sp)
800854b4:	008001c4 	movi	r2,7
800854b8:	14400e16 	blt	r2,r17,800854f4 <___vfprintf_internal_r+0x15c4>
800854bc:	45800204 	addi	r22,r8,8
800854c0:	003eca06 	br	80084fec <___vfprintf_internal_r+0x10bc>
800854c4:	01200274 	movhi	r4,32777
800854c8:	211a9a84 	addi	r4,r4,27242
800854cc:	d9002b15 	stw	r4,172(sp)
800854d0:	d8802b17 	ldw	r2,172(sp)
800854d4:	1c07883a 	add	r3,r3,r16
800854d8:	8c400044 	addi	r17,r17,1
800854dc:	b0800015 	stw	r2,0(r22)
800854e0:	b4000115 	stw	r16,4(r22)
800854e4:	d8c02015 	stw	r3,128(sp)
800854e8:	dc401f15 	stw	r17,124(sp)
800854ec:	008001c4 	movi	r2,7
800854f0:	147ebd0e 	bge	r2,r17,80084fe8 <___vfprintf_internal_r+0x10b8>
800854f4:	d9002c17 	ldw	r4,176(sp)
800854f8:	d9801e04 	addi	r6,sp,120
800854fc:	b80b883a 	mov	r5,r23
80085500:	008cc4c0 	call	8008cc4c <__sprint_r>
80085504:	103b8c1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085508:	d8c02017 	ldw	r3,128(sp)
8008550c:	dc401f17 	ldw	r17,124(sp)
80085510:	dd800404 	addi	r22,sp,16
80085514:	003eb506 	br	80084fec <___vfprintf_internal_r+0x10bc>
80085518:	d9002c17 	ldw	r4,176(sp)
8008551c:	d9801e04 	addi	r6,sp,120
80085520:	b80b883a 	mov	r5,r23
80085524:	008cc4c0 	call	8008cc4c <__sprint_r>
80085528:	103b831e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
8008552c:	d8c02017 	ldw	r3,128(sp)
80085530:	dc401f17 	ldw	r17,124(sp)
80085534:	da000404 	addi	r8,sp,16
80085538:	003e8d06 	br	80084f70 <___vfprintf_internal_r+0x1040>
8008553c:	d9002c17 	ldw	r4,176(sp)
80085540:	d9801e04 	addi	r6,sp,120
80085544:	b80b883a 	mov	r5,r23
80085548:	008cc4c0 	call	8008cc4c <__sprint_r>
8008554c:	103b7a1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085550:	d8c02017 	ldw	r3,128(sp)
80085554:	dc401f17 	ldw	r17,124(sp)
80085558:	dd800404 	addi	r22,sp,16
8008555c:	003e8f06 	br	80084f9c <___vfprintf_internal_r+0x106c>
80085560:	0027883a 	mov	r19,zero
80085564:	003f4a06 	br	80085290 <___vfprintf_internal_r+0x1360>
80085568:	d9002c17 	ldw	r4,176(sp)
8008556c:	d9801e04 	addi	r6,sp,120
80085570:	b80b883a 	mov	r5,r23
80085574:	008cc4c0 	call	8008cc4c <__sprint_r>
80085578:	103b6f1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
8008557c:	d8c02017 	ldw	r3,128(sp)
80085580:	da000404 	addi	r8,sp,16
80085584:	003c9d06 	br	800847fc <___vfprintf_internal_r+0x8cc>
80085588:	04e7c83a 	sub	r19,zero,r19
8008558c:	9804c03a 	cmpne	r2,r19,zero
80085590:	05adc83a 	sub	r22,zero,r22
80085594:	b0adc83a 	sub	r22,r22,r2
80085598:	d8802917 	ldw	r2,164(sp)
8008559c:	07000b44 	movi	fp,45
800855a0:	df002785 	stb	fp,158(sp)
800855a4:	10017b16 	blt	r2,zero,80085b94 <___vfprintf_internal_r+0x1c64>
800855a8:	00bfdfc4 	movi	r2,-129
800855ac:	90a4703a 	and	r18,r18,r2
800855b0:	003bb106 	br	80084478 <___vfprintf_internal_r+0x548>
800855b4:	d9003617 	ldw	r4,216(sp)
800855b8:	d9403817 	ldw	r5,224(sp)
800855bc:	da003d15 	stw	r8,244(sp)
800855c0:	008b4640 	call	8008b464 <__fpclassifyd>
800855c4:	da003d17 	ldw	r8,244(sp)
800855c8:	1000f026 	beq	r2,zero,8008598c <___vfprintf_internal_r+0x1a5c>
800855cc:	d9002917 	ldw	r4,164(sp)
800855d0:	05bff7c4 	movi	r22,-33
800855d4:	00bfffc4 	movi	r2,-1
800855d8:	8dac703a 	and	r22,r17,r22
800855dc:	20820026 	beq	r4,r2,80085de0 <___vfprintf_internal_r+0x1eb0>
800855e0:	008011c4 	movi	r2,71
800855e4:	b081f726 	beq	r22,r2,80085dc4 <___vfprintf_internal_r+0x1e94>
800855e8:	d9003817 	ldw	r4,224(sp)
800855ec:	90c04014 	ori	r3,r18,256
800855f0:	d8c02b15 	stw	r3,172(sp)
800855f4:	20021516 	blt	r4,zero,80085e4c <___vfprintf_internal_r+0x1f1c>
800855f8:	dcc03817 	ldw	r19,224(sp)
800855fc:	d8002a05 	stb	zero,168(sp)
80085600:	00801984 	movi	r2,102
80085604:	8881f926 	beq	r17,r2,80085dec <___vfprintf_internal_r+0x1ebc>
80085608:	00801184 	movi	r2,70
8008560c:	88821c26 	beq	r17,r2,80085e80 <___vfprintf_internal_r+0x1f50>
80085610:	00801144 	movi	r2,69
80085614:	b081ef26 	beq	r22,r2,80085dd4 <___vfprintf_internal_r+0x1ea4>
80085618:	d8c02917 	ldw	r3,164(sp)
8008561c:	d8802104 	addi	r2,sp,132
80085620:	d8800315 	stw	r2,12(sp)
80085624:	d9403617 	ldw	r5,216(sp)
80085628:	d8802504 	addi	r2,sp,148
8008562c:	d9002c17 	ldw	r4,176(sp)
80085630:	d8800215 	stw	r2,8(sp)
80085634:	d8802604 	addi	r2,sp,152
80085638:	d8c00015 	stw	r3,0(sp)
8008563c:	d8800115 	stw	r2,4(sp)
80085640:	01c00084 	movi	r7,2
80085644:	980d883a 	mov	r6,r19
80085648:	d8c03c15 	stw	r3,240(sp)
8008564c:	da003d15 	stw	r8,244(sp)
80085650:	00866780 	call	80086678 <_dtoa_r>
80085654:	1021883a 	mov	r16,r2
80085658:	008019c4 	movi	r2,103
8008565c:	d8c03c17 	ldw	r3,240(sp)
80085660:	da003d17 	ldw	r8,244(sp)
80085664:	88817126 	beq	r17,r2,80085c2c <___vfprintf_internal_r+0x1cfc>
80085668:	008011c4 	movi	r2,71
8008566c:	88829226 	beq	r17,r2,800860b8 <___vfprintf_internal_r+0x2188>
80085670:	80f9883a 	add	fp,r16,r3
80085674:	d9003617 	ldw	r4,216(sp)
80085678:	000d883a 	mov	r6,zero
8008567c:	000f883a 	mov	r7,zero
80085680:	980b883a 	mov	r5,r19
80085684:	da003d15 	stw	r8,244(sp)
80085688:	00908c40 	call	800908c4 <__eqdf2>
8008568c:	da003d17 	ldw	r8,244(sp)
80085690:	10018d26 	beq	r2,zero,80085cc8 <___vfprintf_internal_r+0x1d98>
80085694:	d8802117 	ldw	r2,132(sp)
80085698:	1700062e 	bgeu	r2,fp,800856b4 <___vfprintf_internal_r+0x1784>
8008569c:	01000c04 	movi	r4,48
800856a0:	10c00044 	addi	r3,r2,1
800856a4:	d8c02115 	stw	r3,132(sp)
800856a8:	11000005 	stb	r4,0(r2)
800856ac:	d8802117 	ldw	r2,132(sp)
800856b0:	173ffb36 	bltu	r2,fp,800856a0 <___vfprintf_internal_r+0x1770>
800856b4:	1405c83a 	sub	r2,r2,r16
800856b8:	d8803315 	stw	r2,204(sp)
800856bc:	008011c4 	movi	r2,71
800856c0:	b0817626 	beq	r22,r2,80085c9c <___vfprintf_internal_r+0x1d6c>
800856c4:	00801944 	movi	r2,101
800856c8:	1442810e 	bge	r2,r17,800860d0 <___vfprintf_internal_r+0x21a0>
800856cc:	d8c02617 	ldw	r3,152(sp)
800856d0:	00801984 	movi	r2,102
800856d4:	d8c03215 	stw	r3,200(sp)
800856d8:	8881fe26 	beq	r17,r2,80085ed4 <___vfprintf_internal_r+0x1fa4>
800856dc:	d8c03217 	ldw	r3,200(sp)
800856e0:	d9003317 	ldw	r4,204(sp)
800856e4:	1901dd16 	blt	r3,r4,80085e5c <___vfprintf_internal_r+0x1f2c>
800856e8:	9480004c 	andi	r18,r18,1
800856ec:	90022b1e 	bne	r18,zero,80085f9c <___vfprintf_internal_r+0x206c>
800856f0:	1805883a 	mov	r2,r3
800856f4:	18028016 	blt	r3,zero,800860f8 <___vfprintf_internal_r+0x21c8>
800856f8:	d8c03217 	ldw	r3,200(sp)
800856fc:	044019c4 	movi	r17,103
80085700:	d8c02e15 	stw	r3,184(sp)
80085704:	df002a07 	ldb	fp,168(sp)
80085708:	e001531e 	bne	fp,zero,80085c58 <___vfprintf_internal_r+0x1d28>
8008570c:	df002783 	ldbu	fp,158(sp)
80085710:	d8802a15 	stw	r2,168(sp)
80085714:	dc802b17 	ldw	r18,172(sp)
80085718:	d8002915 	stw	zero,164(sp)
8008571c:	003bd106 	br	80084664 <___vfprintf_internal_r+0x734>
80085720:	d8802d17 	ldw	r2,180(sp)
80085724:	d8c02d17 	ldw	r3,180(sp)
80085728:	d9002d17 	ldw	r4,180(sp)
8008572c:	10800017 	ldw	r2,0(r2)
80085730:	18c00117 	ldw	r3,4(r3)
80085734:	21000204 	addi	r4,r4,8
80085738:	d8803615 	stw	r2,216(sp)
8008573c:	d8c03815 	stw	r3,224(sp)
80085740:	d9002d15 	stw	r4,180(sp)
80085744:	003b7506 	br	8008451c <___vfprintf_internal_r+0x5ec>
80085748:	ac400007 	ldb	r17,0(r21)
8008574c:	003a5906 	br	800840b4 <___vfprintf_internal_r+0x184>
80085750:	9080100c 	andi	r2,r18,64
80085754:	1000a826 	beq	r2,zero,800859f8 <___vfprintf_internal_r+0x1ac8>
80085758:	d9002d17 	ldw	r4,180(sp)
8008575c:	002d883a 	mov	r22,zero
80085760:	24c0000b 	ldhu	r19,0(r4)
80085764:	21000104 	addi	r4,r4,4
80085768:	d9002d15 	stw	r4,180(sp)
8008576c:	003ccb06 	br	80084a9c <___vfprintf_internal_r+0xb6c>
80085770:	d8c02d17 	ldw	r3,180(sp)
80085774:	d9002917 	ldw	r4,164(sp)
80085778:	002d883a 	mov	r22,zero
8008577c:	18800104 	addi	r2,r3,4
80085780:	1cc00017 	ldw	r19,0(r3)
80085784:	203ebb0e 	bge	r4,zero,80085274 <___vfprintf_internal_r+0x1344>
80085788:	003ef106 	br	80085350 <___vfprintf_internal_r+0x1420>
8008578c:	9080040c 	andi	r2,r18,16
80085790:	1000921e 	bne	r2,zero,800859dc <___vfprintf_internal_r+0x1aac>
80085794:	9480100c 	andi	r18,r18,64
80085798:	90013926 	beq	r18,zero,80085c80 <___vfprintf_internal_r+0x1d50>
8008579c:	d9002d17 	ldw	r4,180(sp)
800857a0:	d9402f17 	ldw	r5,188(sp)
800857a4:	20800017 	ldw	r2,0(r4)
800857a8:	21000104 	addi	r4,r4,4
800857ac:	d9002d15 	stw	r4,180(sp)
800857b0:	1140000d 	sth	r5,0(r2)
800857b4:	003a1606 	br	80084010 <___vfprintf_internal_r+0xe0>
800857b8:	9080100c 	andi	r2,r18,64
800857bc:	10008026 	beq	r2,zero,800859c0 <___vfprintf_internal_r+0x1a90>
800857c0:	d8c02d17 	ldw	r3,180(sp)
800857c4:	1cc0000f 	ldh	r19,0(r3)
800857c8:	18c00104 	addi	r3,r3,4
800857cc:	d8c02d15 	stw	r3,180(sp)
800857d0:	982dd7fa 	srai	r22,r19,31
800857d4:	b005883a 	mov	r2,r22
800857d8:	003b1f06 	br	80084458 <___vfprintf_internal_r+0x528>
800857dc:	9080100c 	andi	r2,r18,64
800857e0:	d8002785 	stb	zero,158(sp)
800857e4:	10008a1e 	bne	r2,zero,80085a10 <___vfprintf_internal_r+0x1ae0>
800857e8:	d9402d17 	ldw	r5,180(sp)
800857ec:	d8c02917 	ldw	r3,164(sp)
800857f0:	002d883a 	mov	r22,zero
800857f4:	28800104 	addi	r2,r5,4
800857f8:	2cc00017 	ldw	r19,0(r5)
800857fc:	183e4b0e 	bge	r3,zero,8008512c <___vfprintf_internal_r+0x11fc>
80085800:	9d86b03a 	or	r3,r19,r22
80085804:	d8802d15 	stw	r2,180(sp)
80085808:	183e4c1e 	bne	r3,zero,8008513c <___vfprintf_internal_r+0x120c>
8008580c:	0039883a 	mov	fp,zero
80085810:	0005883a 	mov	r2,zero
80085814:	003d4006 	br	80084d18 <___vfprintf_internal_r+0xde8>
80085818:	01600274 	movhi	r5,32777
8008581c:	295a9a84 	addi	r5,r5,27242
80085820:	d9402b15 	stw	r5,172(sp)
80085824:	d9402b17 	ldw	r5,172(sp)
80085828:	1c47883a 	add	r3,r3,r17
8008582c:	10800044 	addi	r2,r2,1
80085830:	41400015 	stw	r5,0(r8)
80085834:	44400115 	stw	r17,4(r8)
80085838:	d8c02015 	stw	r3,128(sp)
8008583c:	d8801f15 	stw	r2,124(sp)
80085840:	010001c4 	movi	r4,7
80085844:	20bec816 	blt	r4,r2,80085368 <___vfprintf_internal_r+0x1438>
80085848:	42000204 	addi	r8,r8,8
8008584c:	003ecd06 	br	80085384 <___vfprintf_internal_r+0x1454>
80085850:	d9002917 	ldw	r4,164(sp)
80085854:	d8002785 	stb	zero,158(sp)
80085858:	203d2d16 	blt	r4,zero,80084d10 <___vfprintf_internal_r+0xde0>
8008585c:	00bfdfc4 	movi	r2,-129
80085860:	90a4703a 	and	r18,r18,r2
80085864:	003a9106 	br	800842ac <___vfprintf_internal_r+0x37c>
80085868:	01200274 	movhi	r4,32777
8008586c:	211a9a84 	addi	r4,r4,27242
80085870:	d9002b15 	stw	r4,172(sp)
80085874:	003c0c06 	br	800848a8 <___vfprintf_internal_r+0x978>
80085878:	d9002c17 	ldw	r4,176(sp)
8008587c:	d9801e04 	addi	r6,sp,120
80085880:	b80b883a 	mov	r5,r23
80085884:	008cc4c0 	call	8008cc4c <__sprint_r>
80085888:	103aab1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
8008588c:	d8c02017 	ldw	r3,128(sp)
80085890:	da000404 	addi	r8,sp,16
80085894:	003d4106 	br	80084d9c <___vfprintf_internal_r+0xe6c>
80085898:	d8801f17 	ldw	r2,124(sp)
8008589c:	01600274 	movhi	r5,32777
800858a0:	01000044 	movi	r4,1
800858a4:	18c00044 	addi	r3,r3,1
800858a8:	10800044 	addi	r2,r2,1
800858ac:	295a9204 	addi	r5,r5,27208
800858b0:	41000115 	stw	r4,4(r8)
800858b4:	41400015 	stw	r5,0(r8)
800858b8:	d8c02015 	stw	r3,128(sp)
800858bc:	d8801f15 	stw	r2,124(sp)
800858c0:	010001c4 	movi	r4,7
800858c4:	20805c16 	blt	r4,r2,80085a38 <___vfprintf_internal_r+0x1b08>
800858c8:	42000204 	addi	r8,r8,8
800858cc:	8800041e 	bne	r17,zero,800858e0 <___vfprintf_internal_r+0x19b0>
800858d0:	d8803317 	ldw	r2,204(sp)
800858d4:	1000021e 	bne	r2,zero,800858e0 <___vfprintf_internal_r+0x19b0>
800858d8:	9080004c 	andi	r2,r18,1
800858dc:	103c0926 	beq	r2,zero,80084904 <___vfprintf_internal_r+0x9d4>
800858e0:	d9003717 	ldw	r4,220(sp)
800858e4:	d8801f17 	ldw	r2,124(sp)
800858e8:	d9403417 	ldw	r5,208(sp)
800858ec:	20c7883a 	add	r3,r4,r3
800858f0:	10800044 	addi	r2,r2,1
800858f4:	41000115 	stw	r4,4(r8)
800858f8:	41400015 	stw	r5,0(r8)
800858fc:	d8c02015 	stw	r3,128(sp)
80085900:	d8801f15 	stw	r2,124(sp)
80085904:	010001c4 	movi	r4,7
80085908:	20812116 	blt	r4,r2,80085d90 <___vfprintf_internal_r+0x1e60>
8008590c:	42000204 	addi	r8,r8,8
80085910:	0463c83a 	sub	r17,zero,r17
80085914:	0440730e 	bge	zero,r17,80085ae4 <___vfprintf_internal_r+0x1bb4>
80085918:	05800404 	movi	r22,16
8008591c:	b440860e 	bge	r22,r17,80085b38 <___vfprintf_internal_r+0x1c08>
80085920:	01600274 	movhi	r5,32777
80085924:	295a9a84 	addi	r5,r5,27242
80085928:	d9402b15 	stw	r5,172(sp)
8008592c:	070001c4 	movi	fp,7
80085930:	dcc02c17 	ldw	r19,176(sp)
80085934:	00000306 	br	80085944 <___vfprintf_internal_r+0x1a14>
80085938:	42000204 	addi	r8,r8,8
8008593c:	8c7ffc04 	addi	r17,r17,-16
80085940:	b440800e 	bge	r22,r17,80085b44 <___vfprintf_internal_r+0x1c14>
80085944:	18c00404 	addi	r3,r3,16
80085948:	10800044 	addi	r2,r2,1
8008594c:	45000015 	stw	r20,0(r8)
80085950:	45800115 	stw	r22,4(r8)
80085954:	d8c02015 	stw	r3,128(sp)
80085958:	d8801f15 	stw	r2,124(sp)
8008595c:	e0bff60e 	bge	fp,r2,80085938 <___vfprintf_internal_r+0x1a08>
80085960:	d9801e04 	addi	r6,sp,120
80085964:	b80b883a 	mov	r5,r23
80085968:	9809883a 	mov	r4,r19
8008596c:	008cc4c0 	call	8008cc4c <__sprint_r>
80085970:	103a711e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085974:	d8c02017 	ldw	r3,128(sp)
80085978:	d8801f17 	ldw	r2,124(sp)
8008597c:	da000404 	addi	r8,sp,16
80085980:	003fee06 	br	8008593c <___vfprintf_internal_r+0x1a0c>
80085984:	00bfffc4 	movi	r2,-1
80085988:	003a6f06 	br	80084348 <___vfprintf_internal_r+0x418>
8008598c:	008011c4 	movi	r2,71
80085990:	1440b816 	blt	r2,r17,80085c74 <___vfprintf_internal_r+0x1d44>
80085994:	04200274 	movhi	r16,32777
80085998:	841a8404 	addi	r16,r16,27152
8008599c:	00c000c4 	movi	r3,3
800859a0:	00bfdfc4 	movi	r2,-129
800859a4:	d8c02a15 	stw	r3,168(sp)
800859a8:	90a4703a 	and	r18,r18,r2
800859ac:	df002783 	ldbu	fp,158(sp)
800859b0:	d8c02e15 	stw	r3,184(sp)
800859b4:	d8002915 	stw	zero,164(sp)
800859b8:	d8003215 	stw	zero,200(sp)
800859bc:	003b2906 	br	80084664 <___vfprintf_internal_r+0x734>
800859c0:	d9002d17 	ldw	r4,180(sp)
800859c4:	24c00017 	ldw	r19,0(r4)
800859c8:	21000104 	addi	r4,r4,4
800859cc:	d9002d15 	stw	r4,180(sp)
800859d0:	982dd7fa 	srai	r22,r19,31
800859d4:	b005883a 	mov	r2,r22
800859d8:	003a9f06 	br	80084458 <___vfprintf_internal_r+0x528>
800859dc:	d9402d17 	ldw	r5,180(sp)
800859e0:	d8c02f17 	ldw	r3,188(sp)
800859e4:	28800017 	ldw	r2,0(r5)
800859e8:	29400104 	addi	r5,r5,4
800859ec:	d9402d15 	stw	r5,180(sp)
800859f0:	10c00015 	stw	r3,0(r2)
800859f4:	00398606 	br	80084010 <___vfprintf_internal_r+0xe0>
800859f8:	d9402d17 	ldw	r5,180(sp)
800859fc:	002d883a 	mov	r22,zero
80085a00:	2cc00017 	ldw	r19,0(r5)
80085a04:	29400104 	addi	r5,r5,4
80085a08:	d9402d15 	stw	r5,180(sp)
80085a0c:	003c2306 	br	80084a9c <___vfprintf_internal_r+0xb6c>
80085a10:	d8c02d17 	ldw	r3,180(sp)
80085a14:	d9002917 	ldw	r4,164(sp)
80085a18:	002d883a 	mov	r22,zero
80085a1c:	18800104 	addi	r2,r3,4
80085a20:	1cc0000b 	ldhu	r19,0(r3)
80085a24:	203dc10e 	bge	r4,zero,8008512c <___vfprintf_internal_r+0x11fc>
80085a28:	003f7506 	br	80085800 <___vfprintf_internal_r+0x18d0>
80085a2c:	04200274 	movhi	r16,32777
80085a30:	841a8204 	addi	r16,r16,27144
80085a34:	003acc06 	br	80084568 <___vfprintf_internal_r+0x638>
80085a38:	d9002c17 	ldw	r4,176(sp)
80085a3c:	d9801e04 	addi	r6,sp,120
80085a40:	b80b883a 	mov	r5,r23
80085a44:	008cc4c0 	call	8008cc4c <__sprint_r>
80085a48:	103a3b1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085a4c:	dc402617 	ldw	r17,152(sp)
80085a50:	d8c02017 	ldw	r3,128(sp)
80085a54:	da000404 	addi	r8,sp,16
80085a58:	003f9c06 	br	800858cc <___vfprintf_internal_r+0x199c>
80085a5c:	ac400043 	ldbu	r17,1(r21)
80085a60:	94800814 	ori	r18,r18,32
80085a64:	ad400044 	addi	r21,r21,1
80085a68:	8c403fcc 	andi	r17,r17,255
80085a6c:	8c40201c 	xori	r17,r17,128
80085a70:	8c7fe004 	addi	r17,r17,-128
80085a74:	00398f06 	br	800840b4 <___vfprintf_internal_r+0x184>
80085a78:	d8c02d15 	stw	r3,180(sp)
80085a7c:	0039883a 	mov	fp,zero
80085a80:	003e3506 	br	80085358 <___vfprintf_internal_r+0x1428>
80085a84:	d9002c17 	ldw	r4,176(sp)
80085a88:	d9801e04 	addi	r6,sp,120
80085a8c:	b80b883a 	mov	r5,r23
80085a90:	008cc4c0 	call	8008cc4c <__sprint_r>
80085a94:	103a281e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085a98:	d8c02017 	ldw	r3,128(sp)
80085a9c:	da000404 	addi	r8,sp,16
80085aa0:	003cd006 	br	80084de4 <___vfprintf_internal_r+0xeb4>
80085aa4:	8009883a 	mov	r4,r16
80085aa8:	da003d15 	stw	r8,244(sp)
80085aac:	0081cc00 	call	80081cc0 <strlen>
80085ab0:	d8802e15 	stw	r2,184(sp)
80085ab4:	da003d17 	ldw	r8,244(sp)
80085ab8:	103c340e 	bge	r2,zero,80084b8c <___vfprintf_internal_r+0xc5c>
80085abc:	0005883a 	mov	r2,zero
80085ac0:	003c3206 	br	80084b8c <___vfprintf_internal_r+0xc5c>
80085ac4:	d9002c17 	ldw	r4,176(sp)
80085ac8:	d9801e04 	addi	r6,sp,120
80085acc:	b80b883a 	mov	r5,r23
80085ad0:	008cc4c0 	call	8008cc4c <__sprint_r>
80085ad4:	103a181e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085ad8:	d8c02017 	ldw	r3,128(sp)
80085adc:	d8801f17 	ldw	r2,124(sp)
80085ae0:	da000404 	addi	r8,sp,16
80085ae4:	d9403317 	ldw	r5,204(sp)
80085ae8:	10800044 	addi	r2,r2,1
80085aec:	44000015 	stw	r16,0(r8)
80085af0:	28c7883a 	add	r3,r5,r3
80085af4:	003b7d06 	br	800848ec <___vfprintf_internal_r+0x9bc>
80085af8:	01200274 	movhi	r4,32777
80085afc:	211a9e84 	addi	r4,r4,27258
80085b00:	d9003515 	stw	r4,212(sp)
80085b04:	003b1406 	br	80084758 <___vfprintf_internal_r+0x828>
80085b08:	013fffc4 	movi	r4,-1
80085b0c:	003a3506 	br	800843e4 <___vfprintf_internal_r+0x4b4>
80085b10:	0023883a 	mov	r17,zero
80085b14:	003d9d06 	br	8008518c <___vfprintf_internal_r+0x125c>
80085b18:	d9002c17 	ldw	r4,176(sp)
80085b1c:	d9801e04 	addi	r6,sp,120
80085b20:	b80b883a 	mov	r5,r23
80085b24:	008cc4c0 	call	8008cc4c <__sprint_r>
80085b28:	103a031e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085b2c:	d8c02017 	ldw	r3,128(sp)
80085b30:	da000404 	addi	r8,sp,16
80085b34:	003d9406 	br	80085188 <___vfprintf_internal_r+0x1258>
80085b38:	01200274 	movhi	r4,32777
80085b3c:	211a9a84 	addi	r4,r4,27242
80085b40:	d9002b15 	stw	r4,172(sp)
80085b44:	d9002b17 	ldw	r4,172(sp)
80085b48:	1c47883a 	add	r3,r3,r17
80085b4c:	10800044 	addi	r2,r2,1
80085b50:	41000015 	stw	r4,0(r8)
80085b54:	44400115 	stw	r17,4(r8)
80085b58:	d8c02015 	stw	r3,128(sp)
80085b5c:	d8801f15 	stw	r2,124(sp)
80085b60:	010001c4 	movi	r4,7
80085b64:	20bfd716 	blt	r4,r2,80085ac4 <___vfprintf_internal_r+0x1b94>
80085b68:	42000204 	addi	r8,r8,8
80085b6c:	003fdd06 	br	80085ae4 <___vfprintf_internal_r+0x1bb4>
80085b70:	d9002c17 	ldw	r4,176(sp)
80085b74:	d9801e04 	addi	r6,sp,120
80085b78:	b80b883a 	mov	r5,r23
80085b7c:	008cc4c0 	call	8008cc4c <__sprint_r>
80085b80:	1039ed1e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085b84:	d8802617 	ldw	r2,152(sp)
80085b88:	d8c02017 	ldw	r3,128(sp)
80085b8c:	da000404 	addi	r8,sp,16
80085b90:	003e1006 	br	800853d4 <___vfprintf_internal_r+0x14a4>
80085b94:	00800044 	movi	r2,1
80085b98:	10803fcc 	andi	r2,r2,255
80085b9c:	00c00044 	movi	r3,1
80085ba0:	10fa3526 	beq	r2,r3,80084478 <___vfprintf_internal_r+0x548>
80085ba4:	00c00084 	movi	r3,2
80085ba8:	10fbcb26 	beq	r2,r3,80084ad8 <___vfprintf_internal_r+0xba8>
80085bac:	003a8f06 	br	800845ec <___vfprintf_internal_r+0x6bc>
80085bb0:	01200274 	movhi	r4,32777
80085bb4:	211a9e84 	addi	r4,r4,27258
80085bb8:	d9003515 	stw	r4,212(sp)
80085bbc:	003b7606 	br	80084998 <___vfprintf_internal_r+0xa68>
80085bc0:	d8802917 	ldw	r2,164(sp)
80085bc4:	00c00184 	movi	r3,6
80085bc8:	1880012e 	bgeu	r3,r2,80085bd0 <___vfprintf_internal_r+0x1ca0>
80085bcc:	1805883a 	mov	r2,r3
80085bd0:	d8802e15 	stw	r2,184(sp)
80085bd4:	1000ef16 	blt	r2,zero,80085f94 <___vfprintf_internal_r+0x2064>
80085bd8:	04200274 	movhi	r16,32777
80085bdc:	d8802a15 	stw	r2,168(sp)
80085be0:	dcc02d15 	stw	r19,180(sp)
80085be4:	d8002915 	stw	zero,164(sp)
80085be8:	d8003215 	stw	zero,200(sp)
80085bec:	841a9004 	addi	r16,r16,27200
80085bf0:	0039883a 	mov	fp,zero
80085bf4:	003aa206 	br	80084680 <___vfprintf_internal_r+0x750>
80085bf8:	0021883a 	mov	r16,zero
80085bfc:	003e0706 	br	8008541c <___vfprintf_internal_r+0x14ec>
80085c00:	d9002c17 	ldw	r4,176(sp)
80085c04:	d9801e04 	addi	r6,sp,120
80085c08:	b80b883a 	mov	r5,r23
80085c0c:	008cc4c0 	call	8008cc4c <__sprint_r>
80085c10:	1039c91e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085c14:	d8802617 	ldw	r2,152(sp)
80085c18:	d9403317 	ldw	r5,204(sp)
80085c1c:	d8c02017 	ldw	r3,128(sp)
80085c20:	da000404 	addi	r8,sp,16
80085c24:	2885c83a 	sub	r2,r5,r2
80085c28:	003dfb06 	br	80085418 <___vfprintf_internal_r+0x14e8>
80085c2c:	9080004c 	andi	r2,r18,1
80085c30:	103e8f1e 	bne	r2,zero,80085670 <___vfprintf_internal_r+0x1740>
80085c34:	d8802117 	ldw	r2,132(sp)
80085c38:	003e9e06 	br	800856b4 <___vfprintf_internal_r+0x1784>
80085c3c:	1025883a 	mov	r18,r2
80085c40:	0039883a 	mov	fp,zero
80085c44:	00800084 	movi	r2,2
80085c48:	003fd306 	br	80085b98 <___vfprintf_internal_r+0x1c68>
80085c4c:	07000b44 	movi	fp,45
80085c50:	df002785 	stb	fp,158(sp)
80085c54:	003a4006 	br	80084558 <___vfprintf_internal_r+0x628>
80085c58:	00c00b44 	movi	r3,45
80085c5c:	d8c02785 	stb	r3,158(sp)
80085c60:	d8802a15 	stw	r2,168(sp)
80085c64:	dc802b17 	ldw	r18,172(sp)
80085c68:	d8002915 	stw	zero,164(sp)
80085c6c:	07000b44 	movi	fp,45
80085c70:	003a8006 	br	80084674 <___vfprintf_internal_r+0x744>
80085c74:	04200274 	movhi	r16,32777
80085c78:	841a8504 	addi	r16,r16,27156
80085c7c:	003f4706 	br	8008599c <___vfprintf_internal_r+0x1a6c>
80085c80:	d8c02d17 	ldw	r3,180(sp)
80085c84:	d9002f17 	ldw	r4,188(sp)
80085c88:	18800017 	ldw	r2,0(r3)
80085c8c:	18c00104 	addi	r3,r3,4
80085c90:	d8c02d15 	stw	r3,180(sp)
80085c94:	11000015 	stw	r4,0(r2)
80085c98:	0038dd06 	br	80084010 <___vfprintf_internal_r+0xe0>
80085c9c:	dd802617 	ldw	r22,152(sp)
80085ca0:	00bfff44 	movi	r2,-3
80085ca4:	b0801c16 	blt	r22,r2,80085d18 <___vfprintf_internal_r+0x1de8>
80085ca8:	d9402917 	ldw	r5,164(sp)
80085cac:	2d801a16 	blt	r5,r22,80085d18 <___vfprintf_internal_r+0x1de8>
80085cb0:	dd803215 	stw	r22,200(sp)
80085cb4:	003e8906 	br	800856dc <___vfprintf_internal_r+0x17ac>
80085cb8:	01200274 	movhi	r4,32777
80085cbc:	211a9a84 	addi	r4,r4,27242
80085cc0:	d9002b15 	stw	r4,172(sp)
80085cc4:	003c9106 	br	80084f0c <___vfprintf_internal_r+0xfdc>
80085cc8:	e005883a 	mov	r2,fp
80085ccc:	003e7906 	br	800856b4 <___vfprintf_internal_r+0x1784>
80085cd0:	d9402917 	ldw	r5,164(sp)
80085cd4:	df002783 	ldbu	fp,158(sp)
80085cd8:	dcc02d15 	stw	r19,180(sp)
80085cdc:	d9402a15 	stw	r5,168(sp)
80085ce0:	d9402e15 	stw	r5,184(sp)
80085ce4:	d8002915 	stw	zero,164(sp)
80085ce8:	d8003215 	stw	zero,200(sp)
80085cec:	003a5d06 	br	80084664 <___vfprintf_internal_r+0x734>
80085cf0:	9080004c 	andi	r2,r18,1
80085cf4:	0039883a 	mov	fp,zero
80085cf8:	10000426 	beq	r2,zero,80085d0c <___vfprintf_internal_r+0x1ddc>
80085cfc:	00800c04 	movi	r2,48
80085d00:	dc001dc4 	addi	r16,sp,119
80085d04:	d8801dc5 	stb	r2,119(sp)
80085d08:	003b8006 	br	80084b0c <___vfprintf_internal_r+0xbdc>
80085d0c:	d8002e15 	stw	zero,184(sp)
80085d10:	dc001e04 	addi	r16,sp,120
80085d14:	003a4d06 	br	8008464c <___vfprintf_internal_r+0x71c>
80085d18:	8c7fff84 	addi	r17,r17,-2
80085d1c:	b5bfffc4 	addi	r22,r22,-1
80085d20:	dd802615 	stw	r22,152(sp)
80085d24:	dc4022c5 	stb	r17,139(sp)
80085d28:	b000bf16 	blt	r22,zero,80086028 <___vfprintf_internal_r+0x20f8>
80085d2c:	00800ac4 	movi	r2,43
80085d30:	d8802305 	stb	r2,140(sp)
80085d34:	00800244 	movi	r2,9
80085d38:	15807016 	blt	r2,r22,80085efc <___vfprintf_internal_r+0x1fcc>
80085d3c:	00800c04 	movi	r2,48
80085d40:	b5800c04 	addi	r22,r22,48
80085d44:	d8802345 	stb	r2,141(sp)
80085d48:	dd802385 	stb	r22,142(sp)
80085d4c:	d88023c4 	addi	r2,sp,143
80085d50:	df0022c4 	addi	fp,sp,139
80085d54:	d8c03317 	ldw	r3,204(sp)
80085d58:	1739c83a 	sub	fp,r2,fp
80085d5c:	d9003317 	ldw	r4,204(sp)
80085d60:	e0c7883a 	add	r3,fp,r3
80085d64:	df003a15 	stw	fp,232(sp)
80085d68:	d8c02e15 	stw	r3,184(sp)
80085d6c:	00800044 	movi	r2,1
80085d70:	1100b30e 	bge	r2,r4,80086040 <___vfprintf_internal_r+0x2110>
80085d74:	d8c02e17 	ldw	r3,184(sp)
80085d78:	18c00044 	addi	r3,r3,1
80085d7c:	d8c02e15 	stw	r3,184(sp)
80085d80:	1805883a 	mov	r2,r3
80085d84:	1800ac16 	blt	r3,zero,80086038 <___vfprintf_internal_r+0x2108>
80085d88:	d8003215 	stw	zero,200(sp)
80085d8c:	003e5d06 	br	80085704 <___vfprintf_internal_r+0x17d4>
80085d90:	d9002c17 	ldw	r4,176(sp)
80085d94:	d9801e04 	addi	r6,sp,120
80085d98:	b80b883a 	mov	r5,r23
80085d9c:	008cc4c0 	call	8008cc4c <__sprint_r>
80085da0:	1039651e 	bne	r2,zero,80084338 <___vfprintf_internal_r+0x408>
80085da4:	dc402617 	ldw	r17,152(sp)
80085da8:	d8c02017 	ldw	r3,128(sp)
80085dac:	d8801f17 	ldw	r2,124(sp)
80085db0:	da000404 	addi	r8,sp,16
80085db4:	003ed606 	br	80085910 <___vfprintf_internal_r+0x19e0>
80085db8:	582b883a 	mov	r21,r11
80085dbc:	d8002915 	stw	zero,164(sp)
80085dc0:	0038bd06 	br	800840b8 <___vfprintf_internal_r+0x188>
80085dc4:	d8802917 	ldw	r2,164(sp)
80085dc8:	103e071e 	bne	r2,zero,800855e8 <___vfprintf_internal_r+0x16b8>
80085dcc:	dc002915 	stw	r16,164(sp)
80085dd0:	003e0506 	br	800855e8 <___vfprintf_internal_r+0x16b8>
80085dd4:	d9002917 	ldw	r4,164(sp)
80085dd8:	20c00044 	addi	r3,r4,1
80085ddc:	003e0f06 	br	8008561c <___vfprintf_internal_r+0x16ec>
80085de0:	01400184 	movi	r5,6
80085de4:	d9402915 	stw	r5,164(sp)
80085de8:	003dff06 	br	800855e8 <___vfprintf_internal_r+0x16b8>
80085dec:	d8802104 	addi	r2,sp,132
80085df0:	d8800315 	stw	r2,12(sp)
80085df4:	d8802504 	addi	r2,sp,148
80085df8:	d8800215 	stw	r2,8(sp)
80085dfc:	d8802604 	addi	r2,sp,152
80085e00:	d8800115 	stw	r2,4(sp)
80085e04:	d8802917 	ldw	r2,164(sp)
80085e08:	d9403617 	ldw	r5,216(sp)
80085e0c:	d9002c17 	ldw	r4,176(sp)
80085e10:	d8800015 	stw	r2,0(sp)
80085e14:	01c000c4 	movi	r7,3
80085e18:	980d883a 	mov	r6,r19
80085e1c:	da003d15 	stw	r8,244(sp)
80085e20:	00866780 	call	80086678 <_dtoa_r>
80085e24:	d8c02917 	ldw	r3,164(sp)
80085e28:	da003d17 	ldw	r8,244(sp)
80085e2c:	1021883a 	mov	r16,r2
80085e30:	10f9883a 	add	fp,r2,r3
80085e34:	81000007 	ldb	r4,0(r16)
80085e38:	00800c04 	movi	r2,48
80085e3c:	20805e26 	beq	r4,r2,80085fb8 <___vfprintf_internal_r+0x2088>
80085e40:	d8c02617 	ldw	r3,152(sp)
80085e44:	e0f9883a 	add	fp,fp,r3
80085e48:	003e0a06 	br	80085674 <___vfprintf_internal_r+0x1744>
80085e4c:	00c00b44 	movi	r3,45
80085e50:	24e0003c 	xorhi	r19,r4,32768
80085e54:	d8c02a05 	stb	r3,168(sp)
80085e58:	003de906 	br	80085600 <___vfprintf_internal_r+0x16d0>
80085e5c:	d8c03217 	ldw	r3,200(sp)
80085e60:	00c07a0e 	bge	zero,r3,8008604c <___vfprintf_internal_r+0x211c>
80085e64:	00800044 	movi	r2,1
80085e68:	d9003317 	ldw	r4,204(sp)
80085e6c:	1105883a 	add	r2,r2,r4
80085e70:	d8802e15 	stw	r2,184(sp)
80085e74:	10004e16 	blt	r2,zero,80085fb0 <___vfprintf_internal_r+0x2080>
80085e78:	044019c4 	movi	r17,103
80085e7c:	003e2106 	br	80085704 <___vfprintf_internal_r+0x17d4>
80085e80:	d9002917 	ldw	r4,164(sp)
80085e84:	d8802104 	addi	r2,sp,132
80085e88:	d8800315 	stw	r2,12(sp)
80085e8c:	d9000015 	stw	r4,0(sp)
80085e90:	d8802504 	addi	r2,sp,148
80085e94:	d9403617 	ldw	r5,216(sp)
80085e98:	d9002c17 	ldw	r4,176(sp)
80085e9c:	d8800215 	stw	r2,8(sp)
80085ea0:	d8802604 	addi	r2,sp,152
80085ea4:	d8800115 	stw	r2,4(sp)
80085ea8:	01c000c4 	movi	r7,3
80085eac:	980d883a 	mov	r6,r19
80085eb0:	da003d15 	stw	r8,244(sp)
80085eb4:	00866780 	call	80086678 <_dtoa_r>
80085eb8:	d8c02917 	ldw	r3,164(sp)
80085ebc:	da003d17 	ldw	r8,244(sp)
80085ec0:	1021883a 	mov	r16,r2
80085ec4:	00801184 	movi	r2,70
80085ec8:	80f9883a 	add	fp,r16,r3
80085ecc:	88bfd926 	beq	r17,r2,80085e34 <___vfprintf_internal_r+0x1f04>
80085ed0:	003de806 	br	80085674 <___vfprintf_internal_r+0x1744>
80085ed4:	d9002917 	ldw	r4,164(sp)
80085ed8:	00c04d0e 	bge	zero,r3,80086010 <___vfprintf_internal_r+0x20e0>
80085edc:	2000441e 	bne	r4,zero,80085ff0 <___vfprintf_internal_r+0x20c0>
80085ee0:	9480004c 	andi	r18,r18,1
80085ee4:	9000421e 	bne	r18,zero,80085ff0 <___vfprintf_internal_r+0x20c0>
80085ee8:	1805883a 	mov	r2,r3
80085eec:	18007016 	blt	r3,zero,800860b0 <___vfprintf_internal_r+0x2180>
80085ef0:	d8c03217 	ldw	r3,200(sp)
80085ef4:	d8c02e15 	stw	r3,184(sp)
80085ef8:	003e0206 	br	80085704 <___vfprintf_internal_r+0x17d4>
80085efc:	df0022c4 	addi	fp,sp,139
80085f00:	dc002915 	stw	r16,164(sp)
80085f04:	4027883a 	mov	r19,r8
80085f08:	e021883a 	mov	r16,fp
80085f0c:	b009883a 	mov	r4,r22
80085f10:	01400284 	movi	r5,10
80085f14:	008f6000 	call	8008f600 <__modsi3>
80085f18:	10800c04 	addi	r2,r2,48
80085f1c:	843fffc4 	addi	r16,r16,-1
80085f20:	b009883a 	mov	r4,r22
80085f24:	01400284 	movi	r5,10
80085f28:	80800005 	stb	r2,0(r16)
80085f2c:	008f57c0 	call	8008f57c <__divsi3>
80085f30:	102d883a 	mov	r22,r2
80085f34:	00800244 	movi	r2,9
80085f38:	15bff416 	blt	r2,r22,80085f0c <___vfprintf_internal_r+0x1fdc>
80085f3c:	9811883a 	mov	r8,r19
80085f40:	b0800c04 	addi	r2,r22,48
80085f44:	8027883a 	mov	r19,r16
80085f48:	997fffc4 	addi	r5,r19,-1
80085f4c:	98bfffc5 	stb	r2,-1(r19)
80085f50:	dc002917 	ldw	r16,164(sp)
80085f54:	2f006a2e 	bgeu	r5,fp,80086100 <___vfprintf_internal_r+0x21d0>
80085f58:	d9c02384 	addi	r7,sp,142
80085f5c:	3ccfc83a 	sub	r7,r7,r19
80085f60:	d9002344 	addi	r4,sp,141
80085f64:	e1cf883a 	add	r7,fp,r7
80085f68:	00000106 	br	80085f70 <___vfprintf_internal_r+0x2040>
80085f6c:	28800003 	ldbu	r2,0(r5)
80085f70:	20800005 	stb	r2,0(r4)
80085f74:	21000044 	addi	r4,r4,1
80085f78:	29400044 	addi	r5,r5,1
80085f7c:	393ffb1e 	bne	r7,r4,80085f6c <___vfprintf_internal_r+0x203c>
80085f80:	d8802304 	addi	r2,sp,140
80085f84:	14c5c83a 	sub	r2,r2,r19
80085f88:	d8c02344 	addi	r3,sp,141
80085f8c:	1885883a 	add	r2,r3,r2
80085f90:	003f7006 	br	80085d54 <___vfprintf_internal_r+0x1e24>
80085f94:	0005883a 	mov	r2,zero
80085f98:	003f0f06 	br	80085bd8 <___vfprintf_internal_r+0x1ca8>
80085f9c:	d8c03217 	ldw	r3,200(sp)
80085fa0:	18c00044 	addi	r3,r3,1
80085fa4:	d8c02e15 	stw	r3,184(sp)
80085fa8:	1805883a 	mov	r2,r3
80085fac:	183fb20e 	bge	r3,zero,80085e78 <___vfprintf_internal_r+0x1f48>
80085fb0:	0005883a 	mov	r2,zero
80085fb4:	003fb006 	br	80085e78 <___vfprintf_internal_r+0x1f48>
80085fb8:	d9003617 	ldw	r4,216(sp)
80085fbc:	000d883a 	mov	r6,zero
80085fc0:	000f883a 	mov	r7,zero
80085fc4:	980b883a 	mov	r5,r19
80085fc8:	d8c03c15 	stw	r3,240(sp)
80085fcc:	da003d15 	stw	r8,244(sp)
80085fd0:	00908c40 	call	800908c4 <__eqdf2>
80085fd4:	d8c03c17 	ldw	r3,240(sp)
80085fd8:	da003d17 	ldw	r8,244(sp)
80085fdc:	103f9826 	beq	r2,zero,80085e40 <___vfprintf_internal_r+0x1f10>
80085fe0:	00800044 	movi	r2,1
80085fe4:	10c7c83a 	sub	r3,r2,r3
80085fe8:	d8c02615 	stw	r3,152(sp)
80085fec:	003f9506 	br	80085e44 <___vfprintf_internal_r+0x1f14>
80085ff0:	d9002917 	ldw	r4,164(sp)
80085ff4:	d8c03217 	ldw	r3,200(sp)
80085ff8:	20800044 	addi	r2,r4,1
80085ffc:	1885883a 	add	r2,r3,r2
80086000:	d8802e15 	stw	r2,184(sp)
80086004:	103dbf0e 	bge	r2,zero,80085704 <___vfprintf_internal_r+0x17d4>
80086008:	0005883a 	mov	r2,zero
8008600c:	003dbd06 	br	80085704 <___vfprintf_internal_r+0x17d4>
80086010:	2000211e 	bne	r4,zero,80086098 <___vfprintf_internal_r+0x2168>
80086014:	9480004c 	andi	r18,r18,1
80086018:	90001f1e 	bne	r18,zero,80086098 <___vfprintf_internal_r+0x2168>
8008601c:	00800044 	movi	r2,1
80086020:	d8802e15 	stw	r2,184(sp)
80086024:	003db706 	br	80085704 <___vfprintf_internal_r+0x17d4>
80086028:	00800b44 	movi	r2,45
8008602c:	05adc83a 	sub	r22,zero,r22
80086030:	d8802305 	stb	r2,140(sp)
80086034:	003f3f06 	br	80085d34 <___vfprintf_internal_r+0x1e04>
80086038:	0005883a 	mov	r2,zero
8008603c:	003f5206 	br	80085d88 <___vfprintf_internal_r+0x1e58>
80086040:	90a4703a 	and	r18,r18,r2
80086044:	903f4e26 	beq	r18,zero,80085d80 <___vfprintf_internal_r+0x1e50>
80086048:	003f4a06 	br	80085d74 <___vfprintf_internal_r+0x1e44>
8008604c:	00800084 	movi	r2,2
80086050:	10c5c83a 	sub	r2,r2,r3
80086054:	003f8406 	br	80085e68 <___vfprintf_internal_r+0x1f38>
80086058:	d8802d17 	ldw	r2,180(sp)
8008605c:	d9002d17 	ldw	r4,180(sp)
80086060:	ac400043 	ldbu	r17,1(r21)
80086064:	10800017 	ldw	r2,0(r2)
80086068:	582b883a 	mov	r21,r11
8008606c:	d8802915 	stw	r2,164(sp)
80086070:	20800104 	addi	r2,r4,4
80086074:	d9002917 	ldw	r4,164(sp)
80086078:	d8802d15 	stw	r2,180(sp)
8008607c:	203e7a0e 	bge	r4,zero,80085a68 <___vfprintf_internal_r+0x1b38>
80086080:	8c403fcc 	andi	r17,r17,255
80086084:	00bfffc4 	movi	r2,-1
80086088:	8c40201c 	xori	r17,r17,128
8008608c:	d8802915 	stw	r2,164(sp)
80086090:	8c7fe004 	addi	r17,r17,-128
80086094:	00380706 	br	800840b4 <___vfprintf_internal_r+0x184>
80086098:	d8c02917 	ldw	r3,164(sp)
8008609c:	18c00084 	addi	r3,r3,2
800860a0:	d8c02e15 	stw	r3,184(sp)
800860a4:	1805883a 	mov	r2,r3
800860a8:	183d960e 	bge	r3,zero,80085704 <___vfprintf_internal_r+0x17d4>
800860ac:	003fd606 	br	80086008 <___vfprintf_internal_r+0x20d8>
800860b0:	0005883a 	mov	r2,zero
800860b4:	003f8e06 	br	80085ef0 <___vfprintf_internal_r+0x1fc0>
800860b8:	9080004c 	andi	r2,r18,1
800860bc:	103f811e 	bne	r2,zero,80085ec4 <___vfprintf_internal_r+0x1f94>
800860c0:	d8802117 	ldw	r2,132(sp)
800860c4:	1405c83a 	sub	r2,r2,r16
800860c8:	d8803315 	stw	r2,204(sp)
800860cc:	b47ef326 	beq	r22,r17,80085c9c <___vfprintf_internal_r+0x1d6c>
800860d0:	dd802617 	ldw	r22,152(sp)
800860d4:	003f1106 	br	80085d1c <___vfprintf_internal_r+0x1dec>
800860d8:	d9c02785 	stb	r7,158(sp)
800860dc:	00390406 	br	800844f0 <___vfprintf_internal_r+0x5c0>
800860e0:	d9c02785 	stb	r7,158(sp)
800860e4:	0038d306 	br	80084434 <___vfprintf_internal_r+0x504>
800860e8:	d9c02785 	stb	r7,158(sp)
800860ec:	003a6106 	br	80084a74 <___vfprintf_internal_r+0xb44>
800860f0:	d9c02785 	stb	r7,158(sp)
800860f4:	003af806 	br	80084cd8 <___vfprintf_internal_r+0xda8>
800860f8:	0005883a 	mov	r2,zero
800860fc:	003d7e06 	br	800856f8 <___vfprintf_internal_r+0x17c8>
80086100:	d8802344 	addi	r2,sp,141
80086104:	003f1306 	br	80085d54 <___vfprintf_internal_r+0x1e24>
80086108:	d9c02785 	stb	r7,158(sp)
8008610c:	00392306 	br	8008459c <___vfprintf_internal_r+0x66c>
80086110:	d9c02785 	stb	r7,158(sp)
80086114:	003aa906 	br	80084bbc <___vfprintf_internal_r+0xc8c>
80086118:	d9c02785 	stb	r7,158(sp)
8008611c:	003a3d06 	br	80084a14 <___vfprintf_internal_r+0xae4>
80086120:	d9c02785 	stb	r7,158(sp)
80086124:	003aca06 	br	80084c50 <___vfprintf_internal_r+0xd20>

80086128 <__vfprintf_internal>:
80086128:	00a002b4 	movhi	r2,32778
8008612c:	10a31204 	addi	r2,r2,-29624
80086130:	300f883a 	mov	r7,r6
80086134:	280d883a 	mov	r6,r5
80086138:	200b883a 	mov	r5,r4
8008613c:	11000017 	ldw	r4,0(r2)
80086140:	0083f301 	jmpi	80083f30 <___vfprintf_internal_r>

80086144 <__sbprintf>:
80086144:	2880030b 	ldhu	r2,12(r5)
80086148:	2ac01917 	ldw	r11,100(r5)
8008614c:	2a80038b 	ldhu	r10,14(r5)
80086150:	2a400717 	ldw	r9,28(r5)
80086154:	2a000917 	ldw	r8,36(r5)
80086158:	defee204 	addi	sp,sp,-1144
8008615c:	00c10004 	movi	r3,1024
80086160:	dc011a15 	stw	r16,1128(sp)
80086164:	10bfff4c 	andi	r2,r2,65533
80086168:	2821883a 	mov	r16,r5
8008616c:	d8cb883a 	add	r5,sp,r3
80086170:	dc811c15 	stw	r18,1136(sp)
80086174:	dc411b15 	stw	r17,1132(sp)
80086178:	dfc11d15 	stw	ra,1140(sp)
8008617c:	2025883a 	mov	r18,r4
80086180:	d881030d 	sth	r2,1036(sp)
80086184:	dac11915 	stw	r11,1124(sp)
80086188:	da81038d 	sth	r10,1038(sp)
8008618c:	da410715 	stw	r9,1052(sp)
80086190:	da010915 	stw	r8,1060(sp)
80086194:	dec10015 	stw	sp,1024(sp)
80086198:	dec10415 	stw	sp,1040(sp)
8008619c:	d8c10215 	stw	r3,1032(sp)
800861a0:	d8c10515 	stw	r3,1044(sp)
800861a4:	d8010615 	stw	zero,1048(sp)
800861a8:	0083f300 	call	80083f30 <___vfprintf_internal_r>
800861ac:	1023883a 	mov	r17,r2
800861b0:	10000416 	blt	r2,zero,800861c4 <__sbprintf+0x80>
800861b4:	d9410004 	addi	r5,sp,1024
800861b8:	9009883a 	mov	r4,r18
800861bc:	0087f1c0 	call	80087f1c <_fflush_r>
800861c0:	10000d1e 	bne	r2,zero,800861f8 <__sbprintf+0xb4>
800861c4:	d881030b 	ldhu	r2,1036(sp)
800861c8:	1080100c 	andi	r2,r2,64
800861cc:	10000326 	beq	r2,zero,800861dc <__sbprintf+0x98>
800861d0:	8080030b 	ldhu	r2,12(r16)
800861d4:	10801014 	ori	r2,r2,64
800861d8:	8080030d 	sth	r2,12(r16)
800861dc:	8805883a 	mov	r2,r17
800861e0:	dfc11d17 	ldw	ra,1140(sp)
800861e4:	dc811c17 	ldw	r18,1136(sp)
800861e8:	dc411b17 	ldw	r17,1132(sp)
800861ec:	dc011a17 	ldw	r16,1128(sp)
800861f0:	dec11e04 	addi	sp,sp,1144
800861f4:	f800283a 	ret
800861f8:	047fffc4 	movi	r17,-1
800861fc:	003ff106 	br	800861c4 <__sbprintf+0x80>

80086200 <_vsnprintf_r>:
80086200:	30003716 	blt	r6,zero,800862e0 <_vsnprintf_r+0xe0>
80086204:	deffe404 	addi	sp,sp,-112
80086208:	00c08204 	movi	r3,520
8008620c:	dc001a15 	stw	r16,104(sp)
80086210:	3005883a 	mov	r2,r6
80086214:	dfc01b15 	stw	ra,108(sp)
80086218:	d8c0030d 	sth	r3,12(sp)
8008621c:	d9400015 	stw	r5,0(sp)
80086220:	d9400415 	stw	r5,16(sp)
80086224:	380d883a 	mov	r6,r7
80086228:	2021883a 	mov	r16,r4
8008622c:	10001326 	beq	r2,zero,8008627c <_vsnprintf_r+0x7c>
80086230:	00e002b4 	movhi	r3,32778
80086234:	18e31204 	addi	r3,r3,-29624
80086238:	19000017 	ldw	r4,0(r3)
8008623c:	d9c01c17 	ldw	r7,112(sp)
80086240:	10bfffc4 	addi	r2,r2,-1
80086244:	d8800215 	stw	r2,8(sp)
80086248:	d8800515 	stw	r2,20(sp)
8008624c:	d80b883a 	mov	r5,sp
80086250:	00bfffc4 	movi	r2,-1
80086254:	d880038d 	sth	r2,14(sp)
80086258:	0081d580 	call	80081d58 <___svfprintf_internal_r>
8008625c:	00ffffc4 	movi	r3,-1
80086260:	10c01616 	blt	r2,r3,800862bc <_vsnprintf_r+0xbc>
80086264:	d8c00017 	ldw	r3,0(sp)
80086268:	18000005 	stb	zero,0(r3)
8008626c:	dfc01b17 	ldw	ra,108(sp)
80086270:	dc001a17 	ldw	r16,104(sp)
80086274:	dec01c04 	addi	sp,sp,112
80086278:	f800283a 	ret
8008627c:	00a002b4 	movhi	r2,32778
80086280:	10a31204 	addi	r2,r2,-29624
80086284:	11000017 	ldw	r4,0(r2)
80086288:	d9c01c17 	ldw	r7,112(sp)
8008628c:	00bfffc4 	movi	r2,-1
80086290:	d80b883a 	mov	r5,sp
80086294:	d8000215 	stw	zero,8(sp)
80086298:	d8000515 	stw	zero,20(sp)
8008629c:	d880038d 	sth	r2,14(sp)
800862a0:	0081d580 	call	80081d58 <___svfprintf_internal_r>
800862a4:	00ffffc4 	movi	r3,-1
800862a8:	10c00716 	blt	r2,r3,800862c8 <_vsnprintf_r+0xc8>
800862ac:	dfc01b17 	ldw	ra,108(sp)
800862b0:	dc001a17 	ldw	r16,104(sp)
800862b4:	dec01c04 	addi	sp,sp,112
800862b8:	f800283a 	ret
800862bc:	00c022c4 	movi	r3,139
800862c0:	80c00015 	stw	r3,0(r16)
800862c4:	003fe706 	br	80086264 <_vsnprintf_r+0x64>
800862c8:	00c022c4 	movi	r3,139
800862cc:	80c00015 	stw	r3,0(r16)
800862d0:	dfc01b17 	ldw	ra,108(sp)
800862d4:	dc001a17 	ldw	r16,104(sp)
800862d8:	dec01c04 	addi	sp,sp,112
800862dc:	f800283a 	ret
800862e0:	008022c4 	movi	r2,139
800862e4:	20800015 	stw	r2,0(r4)
800862e8:	00bfffc4 	movi	r2,-1
800862ec:	f800283a 	ret

800862f0 <vsnprintf>:
800862f0:	defffe04 	addi	sp,sp,-8
800862f4:	00a002b4 	movhi	r2,32778
800862f8:	d9c00015 	stw	r7,0(sp)
800862fc:	10a31204 	addi	r2,r2,-29624
80086300:	300f883a 	mov	r7,r6
80086304:	280d883a 	mov	r6,r5
80086308:	200b883a 	mov	r5,r4
8008630c:	11000017 	ldw	r4,0(r2)
80086310:	dfc00115 	stw	ra,4(sp)
80086314:	00862000 	call	80086200 <_vsnprintf_r>
80086318:	dfc00117 	ldw	ra,4(sp)
8008631c:	dec00204 	addi	sp,sp,8
80086320:	f800283a 	ret

80086324 <__swsetup_r>:
80086324:	00a002b4 	movhi	r2,32778
80086328:	defffd04 	addi	sp,sp,-12
8008632c:	10a31204 	addi	r2,r2,-29624
80086330:	dc400115 	stw	r17,4(sp)
80086334:	2023883a 	mov	r17,r4
80086338:	11000017 	ldw	r4,0(r2)
8008633c:	dc000015 	stw	r16,0(sp)
80086340:	dfc00215 	stw	ra,8(sp)
80086344:	2821883a 	mov	r16,r5
80086348:	20000226 	beq	r4,zero,80086354 <__swsetup_r+0x30>
8008634c:	20800e17 	ldw	r2,56(r4)
80086350:	10003126 	beq	r2,zero,80086418 <__swsetup_r+0xf4>
80086354:	8080030b 	ldhu	r2,12(r16)
80086358:	10c0020c 	andi	r3,r2,8
8008635c:	1009883a 	mov	r4,r2
80086360:	18000f26 	beq	r3,zero,800863a0 <__swsetup_r+0x7c>
80086364:	80c00417 	ldw	r3,16(r16)
80086368:	18001526 	beq	r3,zero,800863c0 <__swsetup_r+0x9c>
8008636c:	1100004c 	andi	r4,r2,1
80086370:	20001c1e 	bne	r4,zero,800863e4 <__swsetup_r+0xc0>
80086374:	1080008c 	andi	r2,r2,2
80086378:	1000291e 	bne	r2,zero,80086420 <__swsetup_r+0xfc>
8008637c:	80800517 	ldw	r2,20(r16)
80086380:	80800215 	stw	r2,8(r16)
80086384:	18001c26 	beq	r3,zero,800863f8 <__swsetup_r+0xd4>
80086388:	0005883a 	mov	r2,zero
8008638c:	dfc00217 	ldw	ra,8(sp)
80086390:	dc400117 	ldw	r17,4(sp)
80086394:	dc000017 	ldw	r16,0(sp)
80086398:	dec00304 	addi	sp,sp,12
8008639c:	f800283a 	ret
800863a0:	2080040c 	andi	r2,r4,16
800863a4:	10002e26 	beq	r2,zero,80086460 <__swsetup_r+0x13c>
800863a8:	2080010c 	andi	r2,r4,4
800863ac:	10001e1e 	bne	r2,zero,80086428 <__swsetup_r+0x104>
800863b0:	80c00417 	ldw	r3,16(r16)
800863b4:	20800214 	ori	r2,r4,8
800863b8:	8080030d 	sth	r2,12(r16)
800863bc:	183feb1e 	bne	r3,zero,8008636c <__swsetup_r+0x48>
800863c0:	1100a00c 	andi	r4,r2,640
800863c4:	01408004 	movi	r5,512
800863c8:	217fe826 	beq	r4,r5,8008636c <__swsetup_r+0x48>
800863cc:	800b883a 	mov	r5,r16
800863d0:	8809883a 	mov	r4,r17
800863d4:	0088e9c0 	call	80088e9c <__smakebuf_r>
800863d8:	8080030b 	ldhu	r2,12(r16)
800863dc:	80c00417 	ldw	r3,16(r16)
800863e0:	003fe206 	br	8008636c <__swsetup_r+0x48>
800863e4:	80800517 	ldw	r2,20(r16)
800863e8:	80000215 	stw	zero,8(r16)
800863ec:	0085c83a 	sub	r2,zero,r2
800863f0:	80800615 	stw	r2,24(r16)
800863f4:	183fe41e 	bne	r3,zero,80086388 <__swsetup_r+0x64>
800863f8:	80c0030b 	ldhu	r3,12(r16)
800863fc:	0005883a 	mov	r2,zero
80086400:	1900200c 	andi	r4,r3,128
80086404:	203fe126 	beq	r4,zero,8008638c <__swsetup_r+0x68>
80086408:	18c01014 	ori	r3,r3,64
8008640c:	80c0030d 	sth	r3,12(r16)
80086410:	00bfffc4 	movi	r2,-1
80086414:	003fdd06 	br	8008638c <__swsetup_r+0x68>
80086418:	00882f80 	call	800882f8 <__sinit>
8008641c:	003fcd06 	br	80086354 <__swsetup_r+0x30>
80086420:	0005883a 	mov	r2,zero
80086424:	003fd606 	br	80086380 <__swsetup_r+0x5c>
80086428:	81400c17 	ldw	r5,48(r16)
8008642c:	28000626 	beq	r5,zero,80086448 <__swsetup_r+0x124>
80086430:	80801004 	addi	r2,r16,64
80086434:	28800326 	beq	r5,r2,80086444 <__swsetup_r+0x120>
80086438:	8809883a 	mov	r4,r17
8008643c:	008846c0 	call	8008846c <_free_r>
80086440:	8100030b 	ldhu	r4,12(r16)
80086444:	80000c15 	stw	zero,48(r16)
80086448:	80c00417 	ldw	r3,16(r16)
8008644c:	00bff6c4 	movi	r2,-37
80086450:	1108703a 	and	r4,r2,r4
80086454:	80000115 	stw	zero,4(r16)
80086458:	80c00015 	stw	r3,0(r16)
8008645c:	003fd506 	br	800863b4 <__swsetup_r+0x90>
80086460:	00800244 	movi	r2,9
80086464:	88800015 	stw	r2,0(r17)
80086468:	20801014 	ori	r2,r4,64
8008646c:	8080030d 	sth	r2,12(r16)
80086470:	00bfffc4 	movi	r2,-1
80086474:	003fc506 	br	8008638c <__swsetup_r+0x68>

80086478 <quorem>:
80086478:	defff704 	addi	sp,sp,-36
8008647c:	dc800215 	stw	r18,8(sp)
80086480:	20800417 	ldw	r2,16(r4)
80086484:	2c800417 	ldw	r18,16(r5)
80086488:	dfc00815 	stw	ra,32(sp)
8008648c:	ddc00715 	stw	r23,28(sp)
80086490:	dd800615 	stw	r22,24(sp)
80086494:	dd400515 	stw	r21,20(sp)
80086498:	dd000415 	stw	r20,16(sp)
8008649c:	dcc00315 	stw	r19,12(sp)
800864a0:	dc400115 	stw	r17,4(sp)
800864a4:	dc000015 	stw	r16,0(sp)
800864a8:	14807116 	blt	r2,r18,80086670 <quorem+0x1f8>
800864ac:	94bfffc4 	addi	r18,r18,-1
800864b0:	94ad883a 	add	r22,r18,r18
800864b4:	b5ad883a 	add	r22,r22,r22
800864b8:	2c400504 	addi	r17,r5,20
800864bc:	8da9883a 	add	r20,r17,r22
800864c0:	25400504 	addi	r21,r4,20
800864c4:	282f883a 	mov	r23,r5
800864c8:	adad883a 	add	r22,r21,r22
800864cc:	a1400017 	ldw	r5,0(r20)
800864d0:	2021883a 	mov	r16,r4
800864d4:	b1000017 	ldw	r4,0(r22)
800864d8:	29400044 	addi	r5,r5,1
800864dc:	008f6740 	call	8008f674 <__udivsi3>
800864e0:	1027883a 	mov	r19,r2
800864e4:	10002c26 	beq	r2,zero,80086598 <quorem+0x120>
800864e8:	a813883a 	mov	r9,r21
800864ec:	880b883a 	mov	r5,r17
800864f0:	0009883a 	mov	r4,zero
800864f4:	000d883a 	mov	r6,zero
800864f8:	2a000017 	ldw	r8,0(r5)
800864fc:	49c00017 	ldw	r7,0(r9)
80086500:	29400104 	addi	r5,r5,4
80086504:	40bfffcc 	andi	r2,r8,65535
80086508:	14c5383a 	mul	r2,r2,r19
8008650c:	4010d43a 	srli	r8,r8,16
80086510:	38ffffcc 	andi	r3,r7,65535
80086514:	1105883a 	add	r2,r2,r4
80086518:	1008d43a 	srli	r4,r2,16
8008651c:	44d1383a 	mul	r8,r8,r19
80086520:	198d883a 	add	r6,r3,r6
80086524:	10ffffcc 	andi	r3,r2,65535
80086528:	30c7c83a 	sub	r3,r6,r3
8008652c:	380ed43a 	srli	r7,r7,16
80086530:	4105883a 	add	r2,r8,r4
80086534:	180dd43a 	srai	r6,r3,16
80086538:	113fffcc 	andi	r4,r2,65535
8008653c:	390fc83a 	sub	r7,r7,r4
80086540:	398d883a 	add	r6,r7,r6
80086544:	300e943a 	slli	r7,r6,16
80086548:	18ffffcc 	andi	r3,r3,65535
8008654c:	1008d43a 	srli	r4,r2,16
80086550:	38ceb03a 	or	r7,r7,r3
80086554:	49c00015 	stw	r7,0(r9)
80086558:	300dd43a 	srai	r6,r6,16
8008655c:	4a400104 	addi	r9,r9,4
80086560:	a17fe52e 	bgeu	r20,r5,800864f8 <quorem+0x80>
80086564:	b0800017 	ldw	r2,0(r22)
80086568:	10000b1e 	bne	r2,zero,80086598 <quorem+0x120>
8008656c:	b0bfff04 	addi	r2,r22,-4
80086570:	a880082e 	bgeu	r21,r2,80086594 <quorem+0x11c>
80086574:	b0ffff17 	ldw	r3,-4(r22)
80086578:	18000326 	beq	r3,zero,80086588 <quorem+0x110>
8008657c:	00000506 	br	80086594 <quorem+0x11c>
80086580:	10c00017 	ldw	r3,0(r2)
80086584:	1800031e 	bne	r3,zero,80086594 <quorem+0x11c>
80086588:	10bfff04 	addi	r2,r2,-4
8008658c:	94bfffc4 	addi	r18,r18,-1
80086590:	a8bffb36 	bltu	r21,r2,80086580 <quorem+0x108>
80086594:	84800415 	stw	r18,16(r16)
80086598:	b80b883a 	mov	r5,r23
8008659c:	8009883a 	mov	r4,r16
800865a0:	008a5dc0 	call	8008a5dc <__mcmp>
800865a4:	10002616 	blt	r2,zero,80086640 <quorem+0x1c8>
800865a8:	9cc00044 	addi	r19,r19,1
800865ac:	a805883a 	mov	r2,r21
800865b0:	000b883a 	mov	r5,zero
800865b4:	11000017 	ldw	r4,0(r2)
800865b8:	89800017 	ldw	r6,0(r17)
800865bc:	10800104 	addi	r2,r2,4
800865c0:	20ffffcc 	andi	r3,r4,65535
800865c4:	194b883a 	add	r5,r3,r5
800865c8:	30ffffcc 	andi	r3,r6,65535
800865cc:	28c7c83a 	sub	r3,r5,r3
800865d0:	300cd43a 	srli	r6,r6,16
800865d4:	2008d43a 	srli	r4,r4,16
800865d8:	180bd43a 	srai	r5,r3,16
800865dc:	18ffffcc 	andi	r3,r3,65535
800865e0:	2189c83a 	sub	r4,r4,r6
800865e4:	2149883a 	add	r4,r4,r5
800865e8:	200c943a 	slli	r6,r4,16
800865ec:	8c400104 	addi	r17,r17,4
800865f0:	200bd43a 	srai	r5,r4,16
800865f4:	30c6b03a 	or	r3,r6,r3
800865f8:	10ffff15 	stw	r3,-4(r2)
800865fc:	a47fed2e 	bgeu	r20,r17,800865b4 <quorem+0x13c>
80086600:	9485883a 	add	r2,r18,r18
80086604:	1085883a 	add	r2,r2,r2
80086608:	a887883a 	add	r3,r21,r2
8008660c:	18800017 	ldw	r2,0(r3)
80086610:	10000b1e 	bne	r2,zero,80086640 <quorem+0x1c8>
80086614:	18bfff04 	addi	r2,r3,-4
80086618:	a880082e 	bgeu	r21,r2,8008663c <quorem+0x1c4>
8008661c:	18ffff17 	ldw	r3,-4(r3)
80086620:	18000326 	beq	r3,zero,80086630 <quorem+0x1b8>
80086624:	00000506 	br	8008663c <quorem+0x1c4>
80086628:	10c00017 	ldw	r3,0(r2)
8008662c:	1800031e 	bne	r3,zero,8008663c <quorem+0x1c4>
80086630:	10bfff04 	addi	r2,r2,-4
80086634:	94bfffc4 	addi	r18,r18,-1
80086638:	a8bffb36 	bltu	r21,r2,80086628 <quorem+0x1b0>
8008663c:	84800415 	stw	r18,16(r16)
80086640:	9805883a 	mov	r2,r19
80086644:	dfc00817 	ldw	ra,32(sp)
80086648:	ddc00717 	ldw	r23,28(sp)
8008664c:	dd800617 	ldw	r22,24(sp)
80086650:	dd400517 	ldw	r21,20(sp)
80086654:	dd000417 	ldw	r20,16(sp)
80086658:	dcc00317 	ldw	r19,12(sp)
8008665c:	dc800217 	ldw	r18,8(sp)
80086660:	dc400117 	ldw	r17,4(sp)
80086664:	dc000017 	ldw	r16,0(sp)
80086668:	dec00904 	addi	sp,sp,36
8008666c:	f800283a 	ret
80086670:	0005883a 	mov	r2,zero
80086674:	003ff306 	br	80086644 <quorem+0x1cc>

80086678 <_dtoa_r>:
80086678:	20801017 	ldw	r2,64(r4)
8008667c:	deffde04 	addi	sp,sp,-136
80086680:	df002015 	stw	fp,128(sp)
80086684:	dcc01b15 	stw	r19,108(sp)
80086688:	dc801a15 	stw	r18,104(sp)
8008668c:	dc401915 	stw	r17,100(sp)
80086690:	dc001815 	stw	r16,96(sp)
80086694:	dfc02115 	stw	ra,132(sp)
80086698:	ddc01f15 	stw	r23,124(sp)
8008669c:	dd801e15 	stw	r22,120(sp)
800866a0:	dd401d15 	stw	r21,116(sp)
800866a4:	dd001c15 	stw	r20,112(sp)
800866a8:	d9c00315 	stw	r7,12(sp)
800866ac:	2039883a 	mov	fp,r4
800866b0:	3023883a 	mov	r17,r6
800866b4:	2825883a 	mov	r18,r5
800866b8:	dc002417 	ldw	r16,144(sp)
800866bc:	3027883a 	mov	r19,r6
800866c0:	10000826 	beq	r2,zero,800866e4 <_dtoa_r+0x6c>
800866c4:	21801117 	ldw	r6,68(r4)
800866c8:	00c00044 	movi	r3,1
800866cc:	100b883a 	mov	r5,r2
800866d0:	1986983a 	sll	r3,r3,r6
800866d4:	11800115 	stw	r6,4(r2)
800866d8:	10c00215 	stw	r3,8(r2)
800866dc:	0089dbc0 	call	80089dbc <_Bfree>
800866e0:	e0001015 	stw	zero,64(fp)
800866e4:	88002e16 	blt	r17,zero,800867a0 <_dtoa_r+0x128>
800866e8:	80000015 	stw	zero,0(r16)
800866ec:	889ffc2c 	andhi	r2,r17,32752
800866f0:	00dffc34 	movhi	r3,32752
800866f4:	10c01c26 	beq	r2,r3,80086768 <_dtoa_r+0xf0>
800866f8:	000d883a 	mov	r6,zero
800866fc:	000f883a 	mov	r7,zero
80086700:	9009883a 	mov	r4,r18
80086704:	980b883a 	mov	r5,r19
80086708:	00908c40 	call	800908c4 <__eqdf2>
8008670c:	10002b1e 	bne	r2,zero,800867bc <_dtoa_r+0x144>
80086710:	d9c02317 	ldw	r7,140(sp)
80086714:	00800044 	movi	r2,1
80086718:	38800015 	stw	r2,0(r7)
8008671c:	d8802517 	ldw	r2,148(sp)
80086720:	10019e26 	beq	r2,zero,80086d9c <_dtoa_r+0x724>
80086724:	d8c02517 	ldw	r3,148(sp)
80086728:	00a00274 	movhi	r2,32777
8008672c:	109a9244 	addi	r2,r2,27209
80086730:	18800015 	stw	r2,0(r3)
80086734:	10bfffc4 	addi	r2,r2,-1
80086738:	dfc02117 	ldw	ra,132(sp)
8008673c:	df002017 	ldw	fp,128(sp)
80086740:	ddc01f17 	ldw	r23,124(sp)
80086744:	dd801e17 	ldw	r22,120(sp)
80086748:	dd401d17 	ldw	r21,116(sp)
8008674c:	dd001c17 	ldw	r20,112(sp)
80086750:	dcc01b17 	ldw	r19,108(sp)
80086754:	dc801a17 	ldw	r18,104(sp)
80086758:	dc401917 	ldw	r17,100(sp)
8008675c:	dc001817 	ldw	r16,96(sp)
80086760:	dec02204 	addi	sp,sp,136
80086764:	f800283a 	ret
80086768:	d8c02317 	ldw	r3,140(sp)
8008676c:	0089c3c4 	movi	r2,9999
80086770:	18800015 	stw	r2,0(r3)
80086774:	90017726 	beq	r18,zero,80086d54 <_dtoa_r+0x6dc>
80086778:	00a00274 	movhi	r2,32777
8008677c:	109aa604 	addi	r2,r2,27288
80086780:	d9002517 	ldw	r4,148(sp)
80086784:	203fec26 	beq	r4,zero,80086738 <_dtoa_r+0xc0>
80086788:	10c000c7 	ldb	r3,3(r2)
8008678c:	1801781e 	bne	r3,zero,80086d70 <_dtoa_r+0x6f8>
80086790:	10c000c4 	addi	r3,r2,3
80086794:	d9802517 	ldw	r6,148(sp)
80086798:	30c00015 	stw	r3,0(r6)
8008679c:	003fe606 	br	80086738 <_dtoa_r+0xc0>
800867a0:	04e00034 	movhi	r19,32768
800867a4:	9cffffc4 	addi	r19,r19,-1
800867a8:	00800044 	movi	r2,1
800867ac:	8ce6703a 	and	r19,r17,r19
800867b0:	80800015 	stw	r2,0(r16)
800867b4:	9823883a 	mov	r17,r19
800867b8:	003fcc06 	br	800866ec <_dtoa_r+0x74>
800867bc:	d8800204 	addi	r2,sp,8
800867c0:	d8800015 	stw	r2,0(sp)
800867c4:	d9c00104 	addi	r7,sp,4
800867c8:	900b883a 	mov	r5,r18
800867cc:	980d883a 	mov	r6,r19
800867d0:	e009883a 	mov	r4,fp
800867d4:	8820d53a 	srli	r16,r17,20
800867d8:	008a9a80 	call	8008a9a8 <__d2b>
800867dc:	d8800915 	stw	r2,36(sp)
800867e0:	8001651e 	bne	r16,zero,80086d78 <_dtoa_r+0x700>
800867e4:	dd800217 	ldw	r22,8(sp)
800867e8:	dc000117 	ldw	r16,4(sp)
800867ec:	00800804 	movi	r2,32
800867f0:	b421883a 	add	r16,r22,r16
800867f4:	80c10c84 	addi	r3,r16,1074
800867f8:	10c2d10e 	bge	r2,r3,80087340 <_dtoa_r+0xcc8>
800867fc:	00801004 	movi	r2,64
80086800:	81010484 	addi	r4,r16,1042
80086804:	10c7c83a 	sub	r3,r2,r3
80086808:	9108d83a 	srl	r4,r18,r4
8008680c:	88e2983a 	sll	r17,r17,r3
80086810:	2448b03a 	or	r4,r4,r17
80086814:	00818300 	call	80081830 <__floatunsidf>
80086818:	017f8434 	movhi	r5,65040
8008681c:	01800044 	movi	r6,1
80086820:	1009883a 	mov	r4,r2
80086824:	194b883a 	add	r5,r3,r5
80086828:	843fffc4 	addi	r16,r16,-1
8008682c:	d9801115 	stw	r6,68(sp)
80086830:	000d883a 	mov	r6,zero
80086834:	01cffe34 	movhi	r7,16376
80086838:	0090a400 	call	80090a40 <__subdf3>
8008683c:	0198dbf4 	movhi	r6,25455
80086840:	01cff4f4 	movhi	r7,16339
80086844:	3190d844 	addi	r6,r6,17249
80086848:	39e1e9c4 	addi	r7,r7,-30809
8008684c:	1009883a 	mov	r4,r2
80086850:	180b883a 	mov	r5,r3
80086854:	00811180 	call	80081118 <__muldf3>
80086858:	01a2d874 	movhi	r6,35681
8008685c:	01cff1f4 	movhi	r7,16327
80086860:	31b22cc4 	addi	r6,r6,-14157
80086864:	39e28a04 	addi	r7,r7,-30168
80086868:	180b883a 	mov	r5,r3
8008686c:	1009883a 	mov	r4,r2
80086870:	008f7300 	call	8008f730 <__adddf3>
80086874:	8009883a 	mov	r4,r16
80086878:	1029883a 	mov	r20,r2
8008687c:	1823883a 	mov	r17,r3
80086880:	00913bc0 	call	800913bc <__floatsidf>
80086884:	019427f4 	movhi	r6,20639
80086888:	01cff4f4 	movhi	r7,16339
8008688c:	319e7ec4 	addi	r6,r6,31227
80086890:	39d104c4 	addi	r7,r7,17427
80086894:	1009883a 	mov	r4,r2
80086898:	180b883a 	mov	r5,r3
8008689c:	00811180 	call	80081118 <__muldf3>
800868a0:	100d883a 	mov	r6,r2
800868a4:	180f883a 	mov	r7,r3
800868a8:	a009883a 	mov	r4,r20
800868ac:	880b883a 	mov	r5,r17
800868b0:	008f7300 	call	8008f730 <__adddf3>
800868b4:	1009883a 	mov	r4,r2
800868b8:	180b883a 	mov	r5,r3
800868bc:	1029883a 	mov	r20,r2
800868c0:	1823883a 	mov	r17,r3
800868c4:	009133c0 	call	8009133c <__fixdfsi>
800868c8:	000d883a 	mov	r6,zero
800868cc:	000f883a 	mov	r7,zero
800868d0:	a009883a 	mov	r4,r20
800868d4:	880b883a 	mov	r5,r17
800868d8:	d8800515 	stw	r2,20(sp)
800868dc:	009094c0 	call	8009094c <__ledf2>
800868e0:	10028716 	blt	r2,zero,80087300 <_dtoa_r+0xc88>
800868e4:	d8c00517 	ldw	r3,20(sp)
800868e8:	00800584 	movi	r2,22
800868ec:	10c27536 	bltu	r2,r3,800872c4 <_dtoa_r+0xc4c>
800868f0:	180490fa 	slli	r2,r3,3
800868f4:	00e00274 	movhi	r3,32777
800868f8:	18dac004 	addi	r3,r3,27392
800868fc:	1885883a 	add	r2,r3,r2
80086900:	11000017 	ldw	r4,0(r2)
80086904:	11400117 	ldw	r5,4(r2)
80086908:	900d883a 	mov	r6,r18
8008690c:	980f883a 	mov	r7,r19
80086910:	008103c0 	call	8008103c <__gedf2>
80086914:	00828d0e 	bge	zero,r2,8008734c <_dtoa_r+0xcd4>
80086918:	d9000517 	ldw	r4,20(sp)
8008691c:	d8000e15 	stw	zero,56(sp)
80086920:	213fffc4 	addi	r4,r4,-1
80086924:	d9000515 	stw	r4,20(sp)
80086928:	b42dc83a 	sub	r22,r22,r16
8008692c:	b5bfffc4 	addi	r22,r22,-1
80086930:	b0026f16 	blt	r22,zero,800872f0 <_dtoa_r+0xc78>
80086934:	d8000815 	stw	zero,32(sp)
80086938:	d9c00517 	ldw	r7,20(sp)
8008693c:	38026416 	blt	r7,zero,800872d0 <_dtoa_r+0xc58>
80086940:	b1ed883a 	add	r22,r22,r7
80086944:	d9c00d15 	stw	r7,52(sp)
80086948:	d8000a15 	stw	zero,40(sp)
8008694c:	d9800317 	ldw	r6,12(sp)
80086950:	00800244 	movi	r2,9
80086954:	11811436 	bltu	r2,r6,80086da8 <_dtoa_r+0x730>
80086958:	00800144 	movi	r2,5
8008695c:	1184e10e 	bge	r2,r6,80087ce4 <_dtoa_r+0x166c>
80086960:	31bfff04 	addi	r6,r6,-4
80086964:	d9800315 	stw	r6,12(sp)
80086968:	0023883a 	mov	r17,zero
8008696c:	d9800317 	ldw	r6,12(sp)
80086970:	008000c4 	movi	r2,3
80086974:	30836726 	beq	r6,r2,80087714 <_dtoa_r+0x109c>
80086978:	1183410e 	bge	r2,r6,80087680 <_dtoa_r+0x1008>
8008697c:	d9c00317 	ldw	r7,12(sp)
80086980:	00800104 	movi	r2,4
80086984:	38827c26 	beq	r7,r2,80087378 <_dtoa_r+0xd00>
80086988:	00800144 	movi	r2,5
8008698c:	3884c41e 	bne	r7,r2,80087ca0 <_dtoa_r+0x1628>
80086990:	00800044 	movi	r2,1
80086994:	d8800b15 	stw	r2,44(sp)
80086998:	d8c00517 	ldw	r3,20(sp)
8008699c:	d9002217 	ldw	r4,136(sp)
800869a0:	1907883a 	add	r3,r3,r4
800869a4:	19800044 	addi	r6,r3,1
800869a8:	d8c00c15 	stw	r3,48(sp)
800869ac:	d9800615 	stw	r6,24(sp)
800869b0:	0183a40e 	bge	zero,r6,80087844 <_dtoa_r+0x11cc>
800869b4:	d9800617 	ldw	r6,24(sp)
800869b8:	3021883a 	mov	r16,r6
800869bc:	e0001115 	stw	zero,68(fp)
800869c0:	008005c4 	movi	r2,23
800869c4:	1184c92e 	bgeu	r2,r6,80087cec <_dtoa_r+0x1674>
800869c8:	00c00044 	movi	r3,1
800869cc:	00800104 	movi	r2,4
800869d0:	1085883a 	add	r2,r2,r2
800869d4:	11000504 	addi	r4,r2,20
800869d8:	180b883a 	mov	r5,r3
800869dc:	18c00044 	addi	r3,r3,1
800869e0:	313ffb2e 	bgeu	r6,r4,800869d0 <_dtoa_r+0x358>
800869e4:	e1401115 	stw	r5,68(fp)
800869e8:	e009883a 	mov	r4,fp
800869ec:	0089d140 	call	80089d14 <_Balloc>
800869f0:	d8800715 	stw	r2,28(sp)
800869f4:	e0801015 	stw	r2,64(fp)
800869f8:	00800384 	movi	r2,14
800869fc:	1400f736 	bltu	r2,r16,80086ddc <_dtoa_r+0x764>
80086a00:	8800f626 	beq	r17,zero,80086ddc <_dtoa_r+0x764>
80086a04:	d9c00517 	ldw	r7,20(sp)
80086a08:	01c39a0e 	bge	zero,r7,80087874 <_dtoa_r+0x11fc>
80086a0c:	388003cc 	andi	r2,r7,15
80086a10:	100490fa 	slli	r2,r2,3
80086a14:	382bd13a 	srai	r21,r7,4
80086a18:	00e00274 	movhi	r3,32777
80086a1c:	18dac004 	addi	r3,r3,27392
80086a20:	1885883a 	add	r2,r3,r2
80086a24:	a8c0040c 	andi	r3,r21,16
80086a28:	12400017 	ldw	r9,0(r2)
80086a2c:	12000117 	ldw	r8,4(r2)
80086a30:	18037926 	beq	r3,zero,80087818 <_dtoa_r+0x11a0>
80086a34:	00a00274 	movhi	r2,32777
80086a38:	109ab604 	addi	r2,r2,27352
80086a3c:	11800817 	ldw	r6,32(r2)
80086a40:	11c00917 	ldw	r7,36(r2)
80086a44:	9009883a 	mov	r4,r18
80086a48:	980b883a 	mov	r5,r19
80086a4c:	da001715 	stw	r8,92(sp)
80086a50:	da401615 	stw	r9,88(sp)
80086a54:	008ffdc0 	call	8008ffdc <__divdf3>
80086a58:	da001717 	ldw	r8,92(sp)
80086a5c:	da401617 	ldw	r9,88(sp)
80086a60:	ad4003cc 	andi	r21,r21,15
80086a64:	040000c4 	movi	r16,3
80086a68:	1023883a 	mov	r17,r2
80086a6c:	1829883a 	mov	r20,r3
80086a70:	a8001126 	beq	r21,zero,80086ab8 <_dtoa_r+0x440>
80086a74:	05e00274 	movhi	r23,32777
80086a78:	bddab604 	addi	r23,r23,27352
80086a7c:	4805883a 	mov	r2,r9
80086a80:	4007883a 	mov	r3,r8
80086a84:	a980004c 	andi	r6,r21,1
80086a88:	1009883a 	mov	r4,r2
80086a8c:	a82bd07a 	srai	r21,r21,1
80086a90:	180b883a 	mov	r5,r3
80086a94:	30000426 	beq	r6,zero,80086aa8 <_dtoa_r+0x430>
80086a98:	b9800017 	ldw	r6,0(r23)
80086a9c:	b9c00117 	ldw	r7,4(r23)
80086aa0:	84000044 	addi	r16,r16,1
80086aa4:	00811180 	call	80081118 <__muldf3>
80086aa8:	bdc00204 	addi	r23,r23,8
80086aac:	a83ff51e 	bne	r21,zero,80086a84 <_dtoa_r+0x40c>
80086ab0:	1013883a 	mov	r9,r2
80086ab4:	1811883a 	mov	r8,r3
80086ab8:	480d883a 	mov	r6,r9
80086abc:	400f883a 	mov	r7,r8
80086ac0:	8809883a 	mov	r4,r17
80086ac4:	a00b883a 	mov	r5,r20
80086ac8:	008ffdc0 	call	8008ffdc <__divdf3>
80086acc:	d8800f15 	stw	r2,60(sp)
80086ad0:	d8c01015 	stw	r3,64(sp)
80086ad4:	d8c00e17 	ldw	r3,56(sp)
80086ad8:	18000626 	beq	r3,zero,80086af4 <_dtoa_r+0x47c>
80086adc:	d9000f17 	ldw	r4,60(sp)
80086ae0:	d9401017 	ldw	r5,64(sp)
80086ae4:	000d883a 	mov	r6,zero
80086ae8:	01cffc34 	movhi	r7,16368
80086aec:	009094c0 	call	8009094c <__ledf2>
80086af0:	10040b16 	blt	r2,zero,80087b20 <_dtoa_r+0x14a8>
80086af4:	8009883a 	mov	r4,r16
80086af8:	00913bc0 	call	800913bc <__floatsidf>
80086afc:	d9800f17 	ldw	r6,60(sp)
80086b00:	d9c01017 	ldw	r7,64(sp)
80086b04:	1009883a 	mov	r4,r2
80086b08:	180b883a 	mov	r5,r3
80086b0c:	00811180 	call	80081118 <__muldf3>
80086b10:	000d883a 	mov	r6,zero
80086b14:	01d00734 	movhi	r7,16412
80086b18:	1009883a 	mov	r4,r2
80086b1c:	180b883a 	mov	r5,r3
80086b20:	008f7300 	call	8008f730 <__adddf3>
80086b24:	1021883a 	mov	r16,r2
80086b28:	d8800617 	ldw	r2,24(sp)
80086b2c:	047f3034 	movhi	r17,64704
80086b30:	1c63883a 	add	r17,r3,r17
80086b34:	10031826 	beq	r2,zero,80087798 <_dtoa_r+0x1120>
80086b38:	d8c00517 	ldw	r3,20(sp)
80086b3c:	db000617 	ldw	r12,24(sp)
80086b40:	d8c01315 	stw	r3,76(sp)
80086b44:	d9000b17 	ldw	r4,44(sp)
80086b48:	20038f26 	beq	r4,zero,80087988 <_dtoa_r+0x1310>
80086b4c:	60bfffc4 	addi	r2,r12,-1
80086b50:	100490fa 	slli	r2,r2,3
80086b54:	00e00274 	movhi	r3,32777
80086b58:	18dac004 	addi	r3,r3,27392
80086b5c:	1885883a 	add	r2,r3,r2
80086b60:	11800017 	ldw	r6,0(r2)
80086b64:	11c00117 	ldw	r7,4(r2)
80086b68:	d8800717 	ldw	r2,28(sp)
80086b6c:	0009883a 	mov	r4,zero
80086b70:	014ff834 	movhi	r5,16352
80086b74:	db001615 	stw	r12,88(sp)
80086b78:	15c00044 	addi	r23,r2,1
80086b7c:	008ffdc0 	call	8008ffdc <__divdf3>
80086b80:	800d883a 	mov	r6,r16
80086b84:	880f883a 	mov	r7,r17
80086b88:	1009883a 	mov	r4,r2
80086b8c:	180b883a 	mov	r5,r3
80086b90:	0090a400 	call	80090a40 <__subdf3>
80086b94:	d9401017 	ldw	r5,64(sp)
80086b98:	d9000f17 	ldw	r4,60(sp)
80086b9c:	102b883a 	mov	r21,r2
80086ba0:	d8c01215 	stw	r3,72(sp)
80086ba4:	009133c0 	call	8009133c <__fixdfsi>
80086ba8:	1009883a 	mov	r4,r2
80086bac:	1029883a 	mov	r20,r2
80086bb0:	00913bc0 	call	800913bc <__floatsidf>
80086bb4:	d9000f17 	ldw	r4,60(sp)
80086bb8:	d9401017 	ldw	r5,64(sp)
80086bbc:	100d883a 	mov	r6,r2
80086bc0:	180f883a 	mov	r7,r3
80086bc4:	0090a400 	call	80090a40 <__subdf3>
80086bc8:	1823883a 	mov	r17,r3
80086bcc:	d8c00717 	ldw	r3,28(sp)
80086bd0:	d9401217 	ldw	r5,72(sp)
80086bd4:	a2000c04 	addi	r8,r20,48
80086bd8:	1021883a 	mov	r16,r2
80086bdc:	1a000005 	stb	r8,0(r3)
80086be0:	800d883a 	mov	r6,r16
80086be4:	880f883a 	mov	r7,r17
80086be8:	a809883a 	mov	r4,r21
80086bec:	4029883a 	mov	r20,r8
80086bf0:	008103c0 	call	8008103c <__gedf2>
80086bf4:	00841d16 	blt	zero,r2,80087c6c <_dtoa_r+0x15f4>
80086bf8:	800d883a 	mov	r6,r16
80086bfc:	880f883a 	mov	r7,r17
80086c00:	0009883a 	mov	r4,zero
80086c04:	014ffc34 	movhi	r5,16368
80086c08:	0090a400 	call	80090a40 <__subdf3>
80086c0c:	d9401217 	ldw	r5,72(sp)
80086c10:	100d883a 	mov	r6,r2
80086c14:	180f883a 	mov	r7,r3
80086c18:	a809883a 	mov	r4,r21
80086c1c:	008103c0 	call	8008103c <__gedf2>
80086c20:	db001617 	ldw	r12,88(sp)
80086c24:	00840e16 	blt	zero,r2,80087c60 <_dtoa_r+0x15e8>
80086c28:	00800044 	movi	r2,1
80086c2c:	13006b0e 	bge	r2,r12,80086ddc <_dtoa_r+0x764>
80086c30:	d9000717 	ldw	r4,28(sp)
80086c34:	dd800f15 	stw	r22,60(sp)
80086c38:	dcc01015 	stw	r19,64(sp)
80086c3c:	2319883a 	add	r12,r4,r12
80086c40:	dcc01217 	ldw	r19,72(sp)
80086c44:	602d883a 	mov	r22,r12
80086c48:	dc801215 	stw	r18,72(sp)
80086c4c:	b825883a 	mov	r18,r23
80086c50:	00000906 	br	80086c78 <_dtoa_r+0x600>
80086c54:	0090a400 	call	80090a40 <__subdf3>
80086c58:	a80d883a 	mov	r6,r21
80086c5c:	980f883a 	mov	r7,r19
80086c60:	1009883a 	mov	r4,r2
80086c64:	180b883a 	mov	r5,r3
80086c68:	009094c0 	call	8009094c <__ledf2>
80086c6c:	1003e816 	blt	r2,zero,80087c10 <_dtoa_r+0x1598>
80086c70:	b825883a 	mov	r18,r23
80086c74:	bd83e926 	beq	r23,r22,80087c1c <_dtoa_r+0x15a4>
80086c78:	a809883a 	mov	r4,r21
80086c7c:	980b883a 	mov	r5,r19
80086c80:	000d883a 	mov	r6,zero
80086c84:	01d00934 	movhi	r7,16420
80086c88:	00811180 	call	80081118 <__muldf3>
80086c8c:	000d883a 	mov	r6,zero
80086c90:	01d00934 	movhi	r7,16420
80086c94:	8009883a 	mov	r4,r16
80086c98:	880b883a 	mov	r5,r17
80086c9c:	102b883a 	mov	r21,r2
80086ca0:	1827883a 	mov	r19,r3
80086ca4:	00811180 	call	80081118 <__muldf3>
80086ca8:	180b883a 	mov	r5,r3
80086cac:	1009883a 	mov	r4,r2
80086cb0:	1821883a 	mov	r16,r3
80086cb4:	1023883a 	mov	r17,r2
80086cb8:	009133c0 	call	8009133c <__fixdfsi>
80086cbc:	1009883a 	mov	r4,r2
80086cc0:	1029883a 	mov	r20,r2
80086cc4:	00913bc0 	call	800913bc <__floatsidf>
80086cc8:	8809883a 	mov	r4,r17
80086ccc:	800b883a 	mov	r5,r16
80086cd0:	100d883a 	mov	r6,r2
80086cd4:	180f883a 	mov	r7,r3
80086cd8:	0090a400 	call	80090a40 <__subdf3>
80086cdc:	a5000c04 	addi	r20,r20,48
80086ce0:	a80d883a 	mov	r6,r21
80086ce4:	980f883a 	mov	r7,r19
80086ce8:	1009883a 	mov	r4,r2
80086cec:	180b883a 	mov	r5,r3
80086cf0:	95000005 	stb	r20,0(r18)
80086cf4:	1021883a 	mov	r16,r2
80086cf8:	1823883a 	mov	r17,r3
80086cfc:	009094c0 	call	8009094c <__ledf2>
80086d00:	bdc00044 	addi	r23,r23,1
80086d04:	800d883a 	mov	r6,r16
80086d08:	880f883a 	mov	r7,r17
80086d0c:	0009883a 	mov	r4,zero
80086d10:	014ffc34 	movhi	r5,16368
80086d14:	103fcf0e 	bge	r2,zero,80086c54 <_dtoa_r+0x5dc>
80086d18:	d8c01317 	ldw	r3,76(sp)
80086d1c:	d8c00515 	stw	r3,20(sp)
80086d20:	d9400917 	ldw	r5,36(sp)
80086d24:	e009883a 	mov	r4,fp
80086d28:	0089dbc0 	call	80089dbc <_Bfree>
80086d2c:	d9000517 	ldw	r4,20(sp)
80086d30:	d9802317 	ldw	r6,140(sp)
80086d34:	d9c02517 	ldw	r7,148(sp)
80086d38:	b8000005 	stb	zero,0(r23)
80086d3c:	20800044 	addi	r2,r4,1
80086d40:	30800015 	stw	r2,0(r6)
80086d44:	3802aa26 	beq	r7,zero,800877f0 <_dtoa_r+0x1178>
80086d48:	3dc00015 	stw	r23,0(r7)
80086d4c:	d8800717 	ldw	r2,28(sp)
80086d50:	003e7906 	br	80086738 <_dtoa_r+0xc0>
80086d54:	00800434 	movhi	r2,16
80086d58:	10bfffc4 	addi	r2,r2,-1
80086d5c:	88a2703a 	and	r17,r17,r2
80086d60:	883e851e 	bne	r17,zero,80086778 <_dtoa_r+0x100>
80086d64:	00a00274 	movhi	r2,32777
80086d68:	109aa304 	addi	r2,r2,27276
80086d6c:	003e8406 	br	80086780 <_dtoa_r+0x108>
80086d70:	10c00204 	addi	r3,r2,8
80086d74:	003e8706 	br	80086794 <_dtoa_r+0x11c>
80086d78:	01400434 	movhi	r5,16
80086d7c:	297fffc4 	addi	r5,r5,-1
80086d80:	994a703a 	and	r5,r19,r5
80086d84:	9009883a 	mov	r4,r18
80086d88:	843f0044 	addi	r16,r16,-1023
80086d8c:	294ffc34 	orhi	r5,r5,16368
80086d90:	dd800217 	ldw	r22,8(sp)
80086d94:	d8001115 	stw	zero,68(sp)
80086d98:	003ea506 	br	80086830 <_dtoa_r+0x1b8>
80086d9c:	00a00274 	movhi	r2,32777
80086da0:	109a9204 	addi	r2,r2,27208
80086da4:	003e6406 	br	80086738 <_dtoa_r+0xc0>
80086da8:	e0001115 	stw	zero,68(fp)
80086dac:	000b883a 	mov	r5,zero
80086db0:	e009883a 	mov	r4,fp
80086db4:	0089d140 	call	80089d14 <_Balloc>
80086db8:	01bfffc4 	movi	r6,-1
80086dbc:	01c00044 	movi	r7,1
80086dc0:	d8800715 	stw	r2,28(sp)
80086dc4:	d9800c15 	stw	r6,48(sp)
80086dc8:	e0801015 	stw	r2,64(fp)
80086dcc:	d8000315 	stw	zero,12(sp)
80086dd0:	d9c00b15 	stw	r7,44(sp)
80086dd4:	d9800615 	stw	r6,24(sp)
80086dd8:	d8002215 	stw	zero,136(sp)
80086ddc:	d8800117 	ldw	r2,4(sp)
80086de0:	10008916 	blt	r2,zero,80087008 <_dtoa_r+0x990>
80086de4:	d9000517 	ldw	r4,20(sp)
80086de8:	00c00384 	movi	r3,14
80086dec:	19008616 	blt	r3,r4,80087008 <_dtoa_r+0x990>
80086df0:	200490fa 	slli	r2,r4,3
80086df4:	00e00274 	movhi	r3,32777
80086df8:	d9802217 	ldw	r6,136(sp)
80086dfc:	18dac004 	addi	r3,r3,27392
80086e00:	1885883a 	add	r2,r3,r2
80086e04:	14000017 	ldw	r16,0(r2)
80086e08:	14400117 	ldw	r17,4(r2)
80086e0c:	30016316 	blt	r6,zero,8008739c <_dtoa_r+0xd24>
80086e10:	800d883a 	mov	r6,r16
80086e14:	880f883a 	mov	r7,r17
80086e18:	9009883a 	mov	r4,r18
80086e1c:	980b883a 	mov	r5,r19
80086e20:	008ffdc0 	call	8008ffdc <__divdf3>
80086e24:	180b883a 	mov	r5,r3
80086e28:	1009883a 	mov	r4,r2
80086e2c:	009133c0 	call	8009133c <__fixdfsi>
80086e30:	1009883a 	mov	r4,r2
80086e34:	102b883a 	mov	r21,r2
80086e38:	00913bc0 	call	800913bc <__floatsidf>
80086e3c:	800d883a 	mov	r6,r16
80086e40:	880f883a 	mov	r7,r17
80086e44:	1009883a 	mov	r4,r2
80086e48:	180b883a 	mov	r5,r3
80086e4c:	00811180 	call	80081118 <__muldf3>
80086e50:	100d883a 	mov	r6,r2
80086e54:	180f883a 	mov	r7,r3
80086e58:	9009883a 	mov	r4,r18
80086e5c:	980b883a 	mov	r5,r19
80086e60:	0090a400 	call	80090a40 <__subdf3>
80086e64:	d9c00717 	ldw	r7,28(sp)
80086e68:	1009883a 	mov	r4,r2
80086e6c:	a8800c04 	addi	r2,r21,48
80086e70:	38800005 	stb	r2,0(r7)
80086e74:	3dc00044 	addi	r23,r7,1
80086e78:	d9c00617 	ldw	r7,24(sp)
80086e7c:	01800044 	movi	r6,1
80086e80:	180b883a 	mov	r5,r3
80086e84:	2005883a 	mov	r2,r4
80086e88:	39803826 	beq	r7,r6,80086f6c <_dtoa_r+0x8f4>
80086e8c:	000d883a 	mov	r6,zero
80086e90:	01d00934 	movhi	r7,16420
80086e94:	00811180 	call	80081118 <__muldf3>
80086e98:	000d883a 	mov	r6,zero
80086e9c:	000f883a 	mov	r7,zero
80086ea0:	1009883a 	mov	r4,r2
80086ea4:	180b883a 	mov	r5,r3
80086ea8:	1025883a 	mov	r18,r2
80086eac:	1827883a 	mov	r19,r3
80086eb0:	00908c40 	call	800908c4 <__eqdf2>
80086eb4:	103f9a26 	beq	r2,zero,80086d20 <_dtoa_r+0x6a8>
80086eb8:	d9c00617 	ldw	r7,24(sp)
80086ebc:	d8c00717 	ldw	r3,28(sp)
80086ec0:	b829883a 	mov	r20,r23
80086ec4:	38bfffc4 	addi	r2,r7,-1
80086ec8:	18ad883a 	add	r22,r3,r2
80086ecc:	00000a06 	br	80086ef8 <_dtoa_r+0x880>
80086ed0:	00811180 	call	80081118 <__muldf3>
80086ed4:	000d883a 	mov	r6,zero
80086ed8:	000f883a 	mov	r7,zero
80086edc:	1009883a 	mov	r4,r2
80086ee0:	180b883a 	mov	r5,r3
80086ee4:	1025883a 	mov	r18,r2
80086ee8:	1827883a 	mov	r19,r3
80086eec:	b829883a 	mov	r20,r23
80086ef0:	00908c40 	call	800908c4 <__eqdf2>
80086ef4:	103f8a26 	beq	r2,zero,80086d20 <_dtoa_r+0x6a8>
80086ef8:	800d883a 	mov	r6,r16
80086efc:	880f883a 	mov	r7,r17
80086f00:	9009883a 	mov	r4,r18
80086f04:	980b883a 	mov	r5,r19
80086f08:	008ffdc0 	call	8008ffdc <__divdf3>
80086f0c:	180b883a 	mov	r5,r3
80086f10:	1009883a 	mov	r4,r2
80086f14:	009133c0 	call	8009133c <__fixdfsi>
80086f18:	1009883a 	mov	r4,r2
80086f1c:	102b883a 	mov	r21,r2
80086f20:	00913bc0 	call	800913bc <__floatsidf>
80086f24:	800d883a 	mov	r6,r16
80086f28:	880f883a 	mov	r7,r17
80086f2c:	1009883a 	mov	r4,r2
80086f30:	180b883a 	mov	r5,r3
80086f34:	00811180 	call	80081118 <__muldf3>
80086f38:	100d883a 	mov	r6,r2
80086f3c:	180f883a 	mov	r7,r3
80086f40:	9009883a 	mov	r4,r18
80086f44:	980b883a 	mov	r5,r19
80086f48:	0090a400 	call	80090a40 <__subdf3>
80086f4c:	aa000c04 	addi	r8,r21,48
80086f50:	a2000005 	stb	r8,0(r20)
80086f54:	000d883a 	mov	r6,zero
80086f58:	01d00934 	movhi	r7,16420
80086f5c:	1009883a 	mov	r4,r2
80086f60:	180b883a 	mov	r5,r3
80086f64:	a5c00044 	addi	r23,r20,1
80086f68:	b53fd91e 	bne	r22,r20,80086ed0 <_dtoa_r+0x858>
80086f6c:	100d883a 	mov	r6,r2
80086f70:	180f883a 	mov	r7,r3
80086f74:	1009883a 	mov	r4,r2
80086f78:	180b883a 	mov	r5,r3
80086f7c:	008f7300 	call	8008f730 <__adddf3>
80086f80:	100d883a 	mov	r6,r2
80086f84:	180f883a 	mov	r7,r3
80086f88:	8009883a 	mov	r4,r16
80086f8c:	880b883a 	mov	r5,r17
80086f90:	1027883a 	mov	r19,r2
80086f94:	1825883a 	mov	r18,r3
80086f98:	009094c0 	call	8009094c <__ledf2>
80086f9c:	10000816 	blt	r2,zero,80086fc0 <_dtoa_r+0x948>
80086fa0:	980d883a 	mov	r6,r19
80086fa4:	900f883a 	mov	r7,r18
80086fa8:	8009883a 	mov	r4,r16
80086fac:	880b883a 	mov	r5,r17
80086fb0:	00908c40 	call	800908c4 <__eqdf2>
80086fb4:	103f5a1e 	bne	r2,zero,80086d20 <_dtoa_r+0x6a8>
80086fb8:	ad40004c 	andi	r21,r21,1
80086fbc:	a83f5826 	beq	r21,zero,80086d20 <_dtoa_r+0x6a8>
80086fc0:	bd3fffc3 	ldbu	r20,-1(r23)
80086fc4:	b8bfffc4 	addi	r2,r23,-1
80086fc8:	1007883a 	mov	r3,r2
80086fcc:	01400e44 	movi	r5,57
80086fd0:	d9800717 	ldw	r6,28(sp)
80086fd4:	00000506 	br	80086fec <_dtoa_r+0x974>
80086fd8:	18ffffc4 	addi	r3,r3,-1
80086fdc:	11824726 	beq	r2,r6,800878fc <_dtoa_r+0x1284>
80086fe0:	1d000003 	ldbu	r20,0(r3)
80086fe4:	102f883a 	mov	r23,r2
80086fe8:	10bfffc4 	addi	r2,r2,-1
80086fec:	a1003fcc 	andi	r4,r20,255
80086ff0:	2100201c 	xori	r4,r4,128
80086ff4:	213fe004 	addi	r4,r4,-128
80086ff8:	217ff726 	beq	r4,r5,80086fd8 <_dtoa_r+0x960>
80086ffc:	a2000044 	addi	r8,r20,1
80087000:	12000005 	stb	r8,0(r2)
80087004:	003f4606 	br	80086d20 <_dtoa_r+0x6a8>
80087008:	d9000b17 	ldw	r4,44(sp)
8008700c:	2000c826 	beq	r4,zero,80087330 <_dtoa_r+0xcb8>
80087010:	d9800317 	ldw	r6,12(sp)
80087014:	00c00044 	movi	r3,1
80087018:	1980f90e 	bge	r3,r6,80087400 <_dtoa_r+0xd88>
8008701c:	d8800617 	ldw	r2,24(sp)
80087020:	d8c00a17 	ldw	r3,40(sp)
80087024:	157fffc4 	addi	r21,r2,-1
80087028:	1d41f316 	blt	r3,r21,800877f8 <_dtoa_r+0x1180>
8008702c:	1d6bc83a 	sub	r21,r3,r21
80087030:	d9c00617 	ldw	r7,24(sp)
80087034:	3802aa16 	blt	r7,zero,80087ae0 <_dtoa_r+0x1468>
80087038:	dd000817 	ldw	r20,32(sp)
8008703c:	d8800617 	ldw	r2,24(sp)
80087040:	d8c00817 	ldw	r3,32(sp)
80087044:	01400044 	movi	r5,1
80087048:	e009883a 	mov	r4,fp
8008704c:	1887883a 	add	r3,r3,r2
80087050:	d8c00815 	stw	r3,32(sp)
80087054:	b0ad883a 	add	r22,r22,r2
80087058:	008a1200 	call	8008a120 <__i2b>
8008705c:	1023883a 	mov	r17,r2
80087060:	a0000826 	beq	r20,zero,80087084 <_dtoa_r+0xa0c>
80087064:	0580070e 	bge	zero,r22,80087084 <_dtoa_r+0xa0c>
80087068:	a005883a 	mov	r2,r20
8008706c:	b500b916 	blt	r22,r20,80087354 <_dtoa_r+0xcdc>
80087070:	d9000817 	ldw	r4,32(sp)
80087074:	a0a9c83a 	sub	r20,r20,r2
80087078:	b0adc83a 	sub	r22,r22,r2
8008707c:	2089c83a 	sub	r4,r4,r2
80087080:	d9000815 	stw	r4,32(sp)
80087084:	d9800a17 	ldw	r6,40(sp)
80087088:	0181810e 	bge	zero,r6,80087690 <_dtoa_r+0x1018>
8008708c:	d9c00b17 	ldw	r7,44(sp)
80087090:	3800b326 	beq	r7,zero,80087360 <_dtoa_r+0xce8>
80087094:	a800b226 	beq	r21,zero,80087360 <_dtoa_r+0xce8>
80087098:	880b883a 	mov	r5,r17
8008709c:	a80d883a 	mov	r6,r21
800870a0:	e009883a 	mov	r4,fp
800870a4:	008a3540 	call	8008a354 <__pow5mult>
800870a8:	d9800917 	ldw	r6,36(sp)
800870ac:	100b883a 	mov	r5,r2
800870b0:	e009883a 	mov	r4,fp
800870b4:	1023883a 	mov	r17,r2
800870b8:	008a15c0 	call	8008a15c <__multiply>
800870bc:	1021883a 	mov	r16,r2
800870c0:	d8800a17 	ldw	r2,40(sp)
800870c4:	d9400917 	ldw	r5,36(sp)
800870c8:	e009883a 	mov	r4,fp
800870cc:	1545c83a 	sub	r2,r2,r21
800870d0:	d8800a15 	stw	r2,40(sp)
800870d4:	0089dbc0 	call	80089dbc <_Bfree>
800870d8:	d8c00a17 	ldw	r3,40(sp)
800870dc:	18009f1e 	bne	r3,zero,8008735c <_dtoa_r+0xce4>
800870e0:	05c00044 	movi	r23,1
800870e4:	e009883a 	mov	r4,fp
800870e8:	b80b883a 	mov	r5,r23
800870ec:	008a1200 	call	8008a120 <__i2b>
800870f0:	d9000d17 	ldw	r4,52(sp)
800870f4:	102b883a 	mov	r21,r2
800870f8:	2000ce26 	beq	r4,zero,80087434 <_dtoa_r+0xdbc>
800870fc:	200d883a 	mov	r6,r4
80087100:	100b883a 	mov	r5,r2
80087104:	e009883a 	mov	r4,fp
80087108:	008a3540 	call	8008a354 <__pow5mult>
8008710c:	d9800317 	ldw	r6,12(sp)
80087110:	102b883a 	mov	r21,r2
80087114:	b981810e 	bge	r23,r6,8008771c <_dtoa_r+0x10a4>
80087118:	0027883a 	mov	r19,zero
8008711c:	a8800417 	ldw	r2,16(r21)
80087120:	05c00804 	movi	r23,32
80087124:	10800104 	addi	r2,r2,4
80087128:	1085883a 	add	r2,r2,r2
8008712c:	1085883a 	add	r2,r2,r2
80087130:	a885883a 	add	r2,r21,r2
80087134:	11000017 	ldw	r4,0(r2)
80087138:	008a0080 	call	8008a008 <__hi0bits>
8008713c:	b885c83a 	sub	r2,r23,r2
80087140:	1585883a 	add	r2,r2,r22
80087144:	108007cc 	andi	r2,r2,31
80087148:	1000b326 	beq	r2,zero,80087418 <_dtoa_r+0xda0>
8008714c:	00c00804 	movi	r3,32
80087150:	1887c83a 	sub	r3,r3,r2
80087154:	01000104 	movi	r4,4
80087158:	20c2cd0e 	bge	r4,r3,80087c90 <_dtoa_r+0x1618>
8008715c:	00c00704 	movi	r3,28
80087160:	1885c83a 	sub	r2,r3,r2
80087164:	d8c00817 	ldw	r3,32(sp)
80087168:	a0a9883a 	add	r20,r20,r2
8008716c:	b0ad883a 	add	r22,r22,r2
80087170:	1887883a 	add	r3,r3,r2
80087174:	d8c00815 	stw	r3,32(sp)
80087178:	d9800817 	ldw	r6,32(sp)
8008717c:	0180040e 	bge	zero,r6,80087190 <_dtoa_r+0xb18>
80087180:	800b883a 	mov	r5,r16
80087184:	e009883a 	mov	r4,fp
80087188:	008a4940 	call	8008a494 <__lshift>
8008718c:	1021883a 	mov	r16,r2
80087190:	0580050e 	bge	zero,r22,800871a8 <_dtoa_r+0xb30>
80087194:	a80b883a 	mov	r5,r21
80087198:	b00d883a 	mov	r6,r22
8008719c:	e009883a 	mov	r4,fp
800871a0:	008a4940 	call	8008a494 <__lshift>
800871a4:	102b883a 	mov	r21,r2
800871a8:	d9c00e17 	ldw	r7,56(sp)
800871ac:	3801211e 	bne	r7,zero,80087634 <_dtoa_r+0xfbc>
800871b0:	d9800617 	ldw	r6,24(sp)
800871b4:	0181380e 	bge	zero,r6,80087698 <_dtoa_r+0x1020>
800871b8:	d8c00b17 	ldw	r3,44(sp)
800871bc:	1800ab1e 	bne	r3,zero,8008746c <_dtoa_r+0xdf4>
800871c0:	dc800717 	ldw	r18,28(sp)
800871c4:	dcc00617 	ldw	r19,24(sp)
800871c8:	9029883a 	mov	r20,r18
800871cc:	00000206 	br	800871d8 <_dtoa_r+0xb60>
800871d0:	0089de40 	call	80089de4 <__multadd>
800871d4:	1021883a 	mov	r16,r2
800871d8:	a80b883a 	mov	r5,r21
800871dc:	8009883a 	mov	r4,r16
800871e0:	00864780 	call	80086478 <quorem>
800871e4:	10800c04 	addi	r2,r2,48
800871e8:	90800005 	stb	r2,0(r18)
800871ec:	94800044 	addi	r18,r18,1
800871f0:	9507c83a 	sub	r3,r18,r20
800871f4:	000f883a 	mov	r7,zero
800871f8:	01800284 	movi	r6,10
800871fc:	800b883a 	mov	r5,r16
80087200:	e009883a 	mov	r4,fp
80087204:	1cfff216 	blt	r3,r19,800871d0 <_dtoa_r+0xb58>
80087208:	1011883a 	mov	r8,r2
8008720c:	d8800617 	ldw	r2,24(sp)
80087210:	0082370e 	bge	zero,r2,80087af0 <_dtoa_r+0x1478>
80087214:	d9000717 	ldw	r4,28(sp)
80087218:	0025883a 	mov	r18,zero
8008721c:	20af883a 	add	r23,r4,r2
80087220:	01800044 	movi	r6,1
80087224:	800b883a 	mov	r5,r16
80087228:	e009883a 	mov	r4,fp
8008722c:	da001715 	stw	r8,92(sp)
80087230:	008a4940 	call	8008a494 <__lshift>
80087234:	a80b883a 	mov	r5,r21
80087238:	1009883a 	mov	r4,r2
8008723c:	d8800915 	stw	r2,36(sp)
80087240:	008a5dc0 	call	8008a5dc <__mcmp>
80087244:	da001717 	ldw	r8,92(sp)
80087248:	0081800e 	bge	zero,r2,8008784c <_dtoa_r+0x11d4>
8008724c:	b93fffc3 	ldbu	r4,-1(r23)
80087250:	b8bfffc4 	addi	r2,r23,-1
80087254:	1007883a 	mov	r3,r2
80087258:	01800e44 	movi	r6,57
8008725c:	d9c00717 	ldw	r7,28(sp)
80087260:	00000506 	br	80087278 <_dtoa_r+0xc00>
80087264:	18ffffc4 	addi	r3,r3,-1
80087268:	11c12326 	beq	r2,r7,800876f8 <_dtoa_r+0x1080>
8008726c:	19000003 	ldbu	r4,0(r3)
80087270:	102f883a 	mov	r23,r2
80087274:	10bfffc4 	addi	r2,r2,-1
80087278:	21403fcc 	andi	r5,r4,255
8008727c:	2940201c 	xori	r5,r5,128
80087280:	297fe004 	addi	r5,r5,-128
80087284:	29bff726 	beq	r5,r6,80087264 <_dtoa_r+0xbec>
80087288:	21000044 	addi	r4,r4,1
8008728c:	11000005 	stb	r4,0(r2)
80087290:	a80b883a 	mov	r5,r21
80087294:	e009883a 	mov	r4,fp
80087298:	0089dbc0 	call	80089dbc <_Bfree>
8008729c:	883ea026 	beq	r17,zero,80086d20 <_dtoa_r+0x6a8>
800872a0:	90000426 	beq	r18,zero,800872b4 <_dtoa_r+0xc3c>
800872a4:	94400326 	beq	r18,r17,800872b4 <_dtoa_r+0xc3c>
800872a8:	900b883a 	mov	r5,r18
800872ac:	e009883a 	mov	r4,fp
800872b0:	0089dbc0 	call	80089dbc <_Bfree>
800872b4:	880b883a 	mov	r5,r17
800872b8:	e009883a 	mov	r4,fp
800872bc:	0089dbc0 	call	80089dbc <_Bfree>
800872c0:	003e9706 	br	80086d20 <_dtoa_r+0x6a8>
800872c4:	01800044 	movi	r6,1
800872c8:	d9800e15 	stw	r6,56(sp)
800872cc:	003d9606 	br	80086928 <_dtoa_r+0x2b0>
800872d0:	d8800817 	ldw	r2,32(sp)
800872d4:	d8c00517 	ldw	r3,20(sp)
800872d8:	d8000d15 	stw	zero,52(sp)
800872dc:	10c5c83a 	sub	r2,r2,r3
800872e0:	00c9c83a 	sub	r4,zero,r3
800872e4:	d8800815 	stw	r2,32(sp)
800872e8:	d9000a15 	stw	r4,40(sp)
800872ec:	003d9706 	br	8008694c <_dtoa_r+0x2d4>
800872f0:	05adc83a 	sub	r22,zero,r22
800872f4:	dd800815 	stw	r22,32(sp)
800872f8:	002d883a 	mov	r22,zero
800872fc:	003d8e06 	br	80086938 <_dtoa_r+0x2c0>
80087300:	d9000517 	ldw	r4,20(sp)
80087304:	00913bc0 	call	800913bc <__floatsidf>
80087308:	100d883a 	mov	r6,r2
8008730c:	180f883a 	mov	r7,r3
80087310:	a009883a 	mov	r4,r20
80087314:	880b883a 	mov	r5,r17
80087318:	00908c40 	call	800908c4 <__eqdf2>
8008731c:	103d7126 	beq	r2,zero,800868e4 <_dtoa_r+0x26c>
80087320:	d9c00517 	ldw	r7,20(sp)
80087324:	39ffffc4 	addi	r7,r7,-1
80087328:	d9c00515 	stw	r7,20(sp)
8008732c:	003d6d06 	br	800868e4 <_dtoa_r+0x26c>
80087330:	dd400a17 	ldw	r21,40(sp)
80087334:	dd000817 	ldw	r20,32(sp)
80087338:	0023883a 	mov	r17,zero
8008733c:	003f4806 	br	80087060 <_dtoa_r+0x9e8>
80087340:	10e3c83a 	sub	r17,r2,r3
80087344:	9448983a 	sll	r4,r18,r17
80087348:	003d3206 	br	80086814 <_dtoa_r+0x19c>
8008734c:	d8000e15 	stw	zero,56(sp)
80087350:	003d7506 	br	80086928 <_dtoa_r+0x2b0>
80087354:	b005883a 	mov	r2,r22
80087358:	003f4506 	br	80087070 <_dtoa_r+0x9f8>
8008735c:	dc000915 	stw	r16,36(sp)
80087360:	d9800a17 	ldw	r6,40(sp)
80087364:	d9400917 	ldw	r5,36(sp)
80087368:	e009883a 	mov	r4,fp
8008736c:	008a3540 	call	8008a354 <__pow5mult>
80087370:	1021883a 	mov	r16,r2
80087374:	003f5a06 	br	800870e0 <_dtoa_r+0xa68>
80087378:	01c00044 	movi	r7,1
8008737c:	d9c00b15 	stw	r7,44(sp)
80087380:	d8802217 	ldw	r2,136(sp)
80087384:	0081280e 	bge	zero,r2,80087828 <_dtoa_r+0x11b0>
80087388:	100d883a 	mov	r6,r2
8008738c:	1021883a 	mov	r16,r2
80087390:	d8800c15 	stw	r2,48(sp)
80087394:	d8800615 	stw	r2,24(sp)
80087398:	003d8806 	br	800869bc <_dtoa_r+0x344>
8008739c:	d8800617 	ldw	r2,24(sp)
800873a0:	00be9b16 	blt	zero,r2,80086e10 <_dtoa_r+0x798>
800873a4:	10010f1e 	bne	r2,zero,800877e4 <_dtoa_r+0x116c>
800873a8:	880b883a 	mov	r5,r17
800873ac:	000d883a 	mov	r6,zero
800873b0:	01d00534 	movhi	r7,16404
800873b4:	8009883a 	mov	r4,r16
800873b8:	00811180 	call	80081118 <__muldf3>
800873bc:	900d883a 	mov	r6,r18
800873c0:	980f883a 	mov	r7,r19
800873c4:	1009883a 	mov	r4,r2
800873c8:	180b883a 	mov	r5,r3
800873cc:	008103c0 	call	8008103c <__gedf2>
800873d0:	002b883a 	mov	r21,zero
800873d4:	0023883a 	mov	r17,zero
800873d8:	1000bf16 	blt	r2,zero,800876d8 <_dtoa_r+0x1060>
800873dc:	d9802217 	ldw	r6,136(sp)
800873e0:	ddc00717 	ldw	r23,28(sp)
800873e4:	018c303a 	nor	r6,zero,r6
800873e8:	d9800515 	stw	r6,20(sp)
800873ec:	a80b883a 	mov	r5,r21
800873f0:	e009883a 	mov	r4,fp
800873f4:	0089dbc0 	call	80089dbc <_Bfree>
800873f8:	883e4926 	beq	r17,zero,80086d20 <_dtoa_r+0x6a8>
800873fc:	003fad06 	br	800872b4 <_dtoa_r+0xc3c>
80087400:	d9c01117 	ldw	r7,68(sp)
80087404:	3801bc26 	beq	r7,zero,80087af8 <_dtoa_r+0x1480>
80087408:	10810cc4 	addi	r2,r2,1075
8008740c:	dd400a17 	ldw	r21,40(sp)
80087410:	dd000817 	ldw	r20,32(sp)
80087414:	003f0a06 	br	80087040 <_dtoa_r+0x9c8>
80087418:	00800704 	movi	r2,28
8008741c:	d9000817 	ldw	r4,32(sp)
80087420:	a0a9883a 	add	r20,r20,r2
80087424:	b0ad883a 	add	r22,r22,r2
80087428:	2089883a 	add	r4,r4,r2
8008742c:	d9000815 	stw	r4,32(sp)
80087430:	003f5106 	br	80087178 <_dtoa_r+0xb00>
80087434:	d8c00317 	ldw	r3,12(sp)
80087438:	b8c1fc0e 	bge	r23,r3,80087c2c <_dtoa_r+0x15b4>
8008743c:	0027883a 	mov	r19,zero
80087440:	b805883a 	mov	r2,r23
80087444:	003f3e06 	br	80087140 <_dtoa_r+0xac8>
80087448:	880b883a 	mov	r5,r17
8008744c:	e009883a 	mov	r4,fp
80087450:	000f883a 	mov	r7,zero
80087454:	01800284 	movi	r6,10
80087458:	0089de40 	call	80089de4 <__multadd>
8008745c:	d9000c17 	ldw	r4,48(sp)
80087460:	1023883a 	mov	r17,r2
80087464:	0102040e 	bge	zero,r4,80087c78 <_dtoa_r+0x1600>
80087468:	d9000615 	stw	r4,24(sp)
8008746c:	0500050e 	bge	zero,r20,80087484 <_dtoa_r+0xe0c>
80087470:	880b883a 	mov	r5,r17
80087474:	a00d883a 	mov	r6,r20
80087478:	e009883a 	mov	r4,fp
8008747c:	008a4940 	call	8008a494 <__lshift>
80087480:	1023883a 	mov	r17,r2
80087484:	9801241e 	bne	r19,zero,80087918 <_dtoa_r+0x12a0>
80087488:	8829883a 	mov	r20,r17
8008748c:	d9000617 	ldw	r4,24(sp)
80087490:	dcc00717 	ldw	r19,28(sp)
80087494:	9480004c 	andi	r18,r18,1
80087498:	20bfffc4 	addi	r2,r4,-1
8008749c:	9885883a 	add	r2,r19,r2
800874a0:	d8800415 	stw	r2,16(sp)
800874a4:	dc800615 	stw	r18,24(sp)
800874a8:	a80b883a 	mov	r5,r21
800874ac:	8009883a 	mov	r4,r16
800874b0:	00864780 	call	80086478 <quorem>
800874b4:	880b883a 	mov	r5,r17
800874b8:	8009883a 	mov	r4,r16
800874bc:	102f883a 	mov	r23,r2
800874c0:	008a5dc0 	call	8008a5dc <__mcmp>
800874c4:	a80b883a 	mov	r5,r21
800874c8:	a00d883a 	mov	r6,r20
800874cc:	e009883a 	mov	r4,fp
800874d0:	102d883a 	mov	r22,r2
800874d4:	008a63c0 	call	8008a63c <__mdiff>
800874d8:	1007883a 	mov	r3,r2
800874dc:	10800317 	ldw	r2,12(r2)
800874e0:	bc800c04 	addi	r18,r23,48
800874e4:	180b883a 	mov	r5,r3
800874e8:	10004e1e 	bne	r2,zero,80087624 <_dtoa_r+0xfac>
800874ec:	8009883a 	mov	r4,r16
800874f0:	d8c01615 	stw	r3,88(sp)
800874f4:	008a5dc0 	call	8008a5dc <__mcmp>
800874f8:	d8c01617 	ldw	r3,88(sp)
800874fc:	e009883a 	mov	r4,fp
80087500:	d8801615 	stw	r2,88(sp)
80087504:	180b883a 	mov	r5,r3
80087508:	0089dbc0 	call	80089dbc <_Bfree>
8008750c:	d8801617 	ldw	r2,88(sp)
80087510:	1000041e 	bne	r2,zero,80087524 <_dtoa_r+0xeac>
80087514:	d9800317 	ldw	r6,12(sp)
80087518:	3000021e 	bne	r6,zero,80087524 <_dtoa_r+0xeac>
8008751c:	d8c00617 	ldw	r3,24(sp)
80087520:	18003726 	beq	r3,zero,80087600 <_dtoa_r+0xf88>
80087524:	b0002016 	blt	r22,zero,800875a8 <_dtoa_r+0xf30>
80087528:	b000041e 	bne	r22,zero,8008753c <_dtoa_r+0xec4>
8008752c:	d9000317 	ldw	r4,12(sp)
80087530:	2000021e 	bne	r4,zero,8008753c <_dtoa_r+0xec4>
80087534:	d8c00617 	ldw	r3,24(sp)
80087538:	18001b26 	beq	r3,zero,800875a8 <_dtoa_r+0xf30>
8008753c:	00810716 	blt	zero,r2,8008795c <_dtoa_r+0x12e4>
80087540:	d8c00417 	ldw	r3,16(sp)
80087544:	9d800044 	addi	r22,r19,1
80087548:	9c800005 	stb	r18,0(r19)
8008754c:	b02f883a 	mov	r23,r22
80087550:	98c10626 	beq	r19,r3,8008796c <_dtoa_r+0x12f4>
80087554:	800b883a 	mov	r5,r16
80087558:	000f883a 	mov	r7,zero
8008755c:	01800284 	movi	r6,10
80087560:	e009883a 	mov	r4,fp
80087564:	0089de40 	call	80089de4 <__multadd>
80087568:	1021883a 	mov	r16,r2
8008756c:	000f883a 	mov	r7,zero
80087570:	01800284 	movi	r6,10
80087574:	880b883a 	mov	r5,r17
80087578:	e009883a 	mov	r4,fp
8008757c:	8d002526 	beq	r17,r20,80087614 <_dtoa_r+0xf9c>
80087580:	0089de40 	call	80089de4 <__multadd>
80087584:	a00b883a 	mov	r5,r20
80087588:	000f883a 	mov	r7,zero
8008758c:	01800284 	movi	r6,10
80087590:	e009883a 	mov	r4,fp
80087594:	1023883a 	mov	r17,r2
80087598:	0089de40 	call	80089de4 <__multadd>
8008759c:	1029883a 	mov	r20,r2
800875a0:	b027883a 	mov	r19,r22
800875a4:	003fc006 	br	800874a8 <_dtoa_r+0xe30>
800875a8:	9011883a 	mov	r8,r18
800875ac:	00800e0e 	bge	zero,r2,800875e8 <_dtoa_r+0xf70>
800875b0:	800b883a 	mov	r5,r16
800875b4:	01800044 	movi	r6,1
800875b8:	e009883a 	mov	r4,fp
800875bc:	da001715 	stw	r8,92(sp)
800875c0:	008a4940 	call	8008a494 <__lshift>
800875c4:	a80b883a 	mov	r5,r21
800875c8:	1009883a 	mov	r4,r2
800875cc:	1021883a 	mov	r16,r2
800875d0:	008a5dc0 	call	8008a5dc <__mcmp>
800875d4:	da001717 	ldw	r8,92(sp)
800875d8:	0081960e 	bge	zero,r2,80087c34 <_dtoa_r+0x15bc>
800875dc:	00800e44 	movi	r2,57
800875e0:	40817026 	beq	r8,r2,80087ba4 <_dtoa_r+0x152c>
800875e4:	ba000c44 	addi	r8,r23,49
800875e8:	8825883a 	mov	r18,r17
800875ec:	9dc00044 	addi	r23,r19,1
800875f0:	9a000005 	stb	r8,0(r19)
800875f4:	a023883a 	mov	r17,r20
800875f8:	dc000915 	stw	r16,36(sp)
800875fc:	003f2406 	br	80087290 <_dtoa_r+0xc18>
80087600:	00800e44 	movi	r2,57
80087604:	9011883a 	mov	r8,r18
80087608:	90816626 	beq	r18,r2,80087ba4 <_dtoa_r+0x152c>
8008760c:	05bff516 	blt	zero,r22,800875e4 <_dtoa_r+0xf6c>
80087610:	003ff506 	br	800875e8 <_dtoa_r+0xf70>
80087614:	0089de40 	call	80089de4 <__multadd>
80087618:	1023883a 	mov	r17,r2
8008761c:	1029883a 	mov	r20,r2
80087620:	003fdf06 	br	800875a0 <_dtoa_r+0xf28>
80087624:	e009883a 	mov	r4,fp
80087628:	0089dbc0 	call	80089dbc <_Bfree>
8008762c:	00800044 	movi	r2,1
80087630:	003fbc06 	br	80087524 <_dtoa_r+0xeac>
80087634:	a80b883a 	mov	r5,r21
80087638:	8009883a 	mov	r4,r16
8008763c:	008a5dc0 	call	8008a5dc <__mcmp>
80087640:	103edb0e 	bge	r2,zero,800871b0 <_dtoa_r+0xb38>
80087644:	800b883a 	mov	r5,r16
80087648:	000f883a 	mov	r7,zero
8008764c:	01800284 	movi	r6,10
80087650:	e009883a 	mov	r4,fp
80087654:	0089de40 	call	80089de4 <__multadd>
80087658:	1021883a 	mov	r16,r2
8008765c:	d8800517 	ldw	r2,20(sp)
80087660:	d8c00b17 	ldw	r3,44(sp)
80087664:	10bfffc4 	addi	r2,r2,-1
80087668:	d8800515 	stw	r2,20(sp)
8008766c:	183f761e 	bne	r3,zero,80087448 <_dtoa_r+0xdd0>
80087670:	d9000c17 	ldw	r4,48(sp)
80087674:	0101730e 	bge	zero,r4,80087c44 <_dtoa_r+0x15cc>
80087678:	d9000615 	stw	r4,24(sp)
8008767c:	003ed006 	br	800871c0 <_dtoa_r+0xb48>
80087680:	00800084 	movi	r2,2
80087684:	3081861e 	bne	r6,r2,80087ca0 <_dtoa_r+0x1628>
80087688:	d8000b15 	stw	zero,44(sp)
8008768c:	003f3c06 	br	80087380 <_dtoa_r+0xd08>
80087690:	dc000917 	ldw	r16,36(sp)
80087694:	003e9206 	br	800870e0 <_dtoa_r+0xa68>
80087698:	d9c00317 	ldw	r7,12(sp)
8008769c:	00800084 	movi	r2,2
800876a0:	11fec50e 	bge	r2,r7,800871b8 <_dtoa_r+0xb40>
800876a4:	d9000617 	ldw	r4,24(sp)
800876a8:	20013c1e 	bne	r4,zero,80087b9c <_dtoa_r+0x1524>
800876ac:	a80b883a 	mov	r5,r21
800876b0:	000f883a 	mov	r7,zero
800876b4:	01800144 	movi	r6,5
800876b8:	e009883a 	mov	r4,fp
800876bc:	0089de40 	call	80089de4 <__multadd>
800876c0:	100b883a 	mov	r5,r2
800876c4:	8009883a 	mov	r4,r16
800876c8:	102b883a 	mov	r21,r2
800876cc:	008a5dc0 	call	8008a5dc <__mcmp>
800876d0:	dc000915 	stw	r16,36(sp)
800876d4:	00bf410e 	bge	zero,r2,800873dc <_dtoa_r+0xd64>
800876d8:	d9c00717 	ldw	r7,28(sp)
800876dc:	00800c44 	movi	r2,49
800876e0:	38800005 	stb	r2,0(r7)
800876e4:	d8800517 	ldw	r2,20(sp)
800876e8:	3dc00044 	addi	r23,r7,1
800876ec:	10800044 	addi	r2,r2,1
800876f0:	d8800515 	stw	r2,20(sp)
800876f4:	003f3d06 	br	800873ec <_dtoa_r+0xd74>
800876f8:	d9800517 	ldw	r6,20(sp)
800876fc:	d9c00717 	ldw	r7,28(sp)
80087700:	00800c44 	movi	r2,49
80087704:	31800044 	addi	r6,r6,1
80087708:	d9800515 	stw	r6,20(sp)
8008770c:	38800005 	stb	r2,0(r7)
80087710:	003edf06 	br	80087290 <_dtoa_r+0xc18>
80087714:	d8000b15 	stw	zero,44(sp)
80087718:	003c9f06 	br	80086998 <_dtoa_r+0x320>
8008771c:	903e7e1e 	bne	r18,zero,80087118 <_dtoa_r+0xaa0>
80087720:	00800434 	movhi	r2,16
80087724:	10bfffc4 	addi	r2,r2,-1
80087728:	9884703a 	and	r2,r19,r2
8008772c:	1000ea1e 	bne	r2,zero,80087ad8 <_dtoa_r+0x1460>
80087730:	9cdffc2c 	andhi	r19,r19,32752
80087734:	9800e826 	beq	r19,zero,80087ad8 <_dtoa_r+0x1460>
80087738:	d9c00817 	ldw	r7,32(sp)
8008773c:	b5800044 	addi	r22,r22,1
80087740:	04c00044 	movi	r19,1
80087744:	39c00044 	addi	r7,r7,1
80087748:	d9c00815 	stw	r7,32(sp)
8008774c:	d8800d17 	ldw	r2,52(sp)
80087750:	103e721e 	bne	r2,zero,8008711c <_dtoa_r+0xaa4>
80087754:	00800044 	movi	r2,1
80087758:	003e7906 	br	80087140 <_dtoa_r+0xac8>
8008775c:	8009883a 	mov	r4,r16
80087760:	00913bc0 	call	800913bc <__floatsidf>
80087764:	d9800f17 	ldw	r6,60(sp)
80087768:	d9c01017 	ldw	r7,64(sp)
8008776c:	1009883a 	mov	r4,r2
80087770:	180b883a 	mov	r5,r3
80087774:	00811180 	call	80081118 <__muldf3>
80087778:	000d883a 	mov	r6,zero
8008777c:	01d00734 	movhi	r7,16412
80087780:	1009883a 	mov	r4,r2
80087784:	180b883a 	mov	r5,r3
80087788:	008f7300 	call	8008f730 <__adddf3>
8008778c:	047f3034 	movhi	r17,64704
80087790:	1021883a 	mov	r16,r2
80087794:	1c63883a 	add	r17,r3,r17
80087798:	d9000f17 	ldw	r4,60(sp)
8008779c:	d9401017 	ldw	r5,64(sp)
800877a0:	000d883a 	mov	r6,zero
800877a4:	01d00534 	movhi	r7,16404
800877a8:	0090a400 	call	80090a40 <__subdf3>
800877ac:	800d883a 	mov	r6,r16
800877b0:	880f883a 	mov	r7,r17
800877b4:	1009883a 	mov	r4,r2
800877b8:	180b883a 	mov	r5,r3
800877bc:	102b883a 	mov	r21,r2
800877c0:	1829883a 	mov	r20,r3
800877c4:	008103c0 	call	8008103c <__gedf2>
800877c8:	00806c16 	blt	zero,r2,8008797c <_dtoa_r+0x1304>
800877cc:	89e0003c 	xorhi	r7,r17,32768
800877d0:	800d883a 	mov	r6,r16
800877d4:	a809883a 	mov	r4,r21
800877d8:	a00b883a 	mov	r5,r20
800877dc:	009094c0 	call	8009094c <__ledf2>
800877e0:	103d7e0e 	bge	r2,zero,80086ddc <_dtoa_r+0x764>
800877e4:	002b883a 	mov	r21,zero
800877e8:	0023883a 	mov	r17,zero
800877ec:	003efb06 	br	800873dc <_dtoa_r+0xd64>
800877f0:	d8800717 	ldw	r2,28(sp)
800877f4:	003bd006 	br	80086738 <_dtoa_r+0xc0>
800877f8:	d9000a17 	ldw	r4,40(sp)
800877fc:	d9800d17 	ldw	r6,52(sp)
80087800:	dd400a15 	stw	r21,40(sp)
80087804:	a905c83a 	sub	r2,r21,r4
80087808:	308d883a 	add	r6,r6,r2
8008780c:	d9800d15 	stw	r6,52(sp)
80087810:	002b883a 	mov	r21,zero
80087814:	003e0606 	br	80087030 <_dtoa_r+0x9b8>
80087818:	9023883a 	mov	r17,r18
8008781c:	9829883a 	mov	r20,r19
80087820:	04000084 	movi	r16,2
80087824:	003c9206 	br	80086a70 <_dtoa_r+0x3f8>
80087828:	04000044 	movi	r16,1
8008782c:	dc000c15 	stw	r16,48(sp)
80087830:	dc000615 	stw	r16,24(sp)
80087834:	dc002215 	stw	r16,136(sp)
80087838:	e0001115 	stw	zero,68(fp)
8008783c:	000b883a 	mov	r5,zero
80087840:	003c6906 	br	800869e8 <_dtoa_r+0x370>
80087844:	3021883a 	mov	r16,r6
80087848:	003ffb06 	br	80087838 <_dtoa_r+0x11c0>
8008784c:	1000021e 	bne	r2,zero,80087858 <_dtoa_r+0x11e0>
80087850:	4200004c 	andi	r8,r8,1
80087854:	403e7d1e 	bne	r8,zero,8008724c <_dtoa_r+0xbd4>
80087858:	01000c04 	movi	r4,48
8008785c:	00000106 	br	80087864 <_dtoa_r+0x11ec>
80087860:	102f883a 	mov	r23,r2
80087864:	b8bfffc4 	addi	r2,r23,-1
80087868:	10c00007 	ldb	r3,0(r2)
8008786c:	193ffc26 	beq	r3,r4,80087860 <_dtoa_r+0x11e8>
80087870:	003e8706 	br	80087290 <_dtoa_r+0xc18>
80087874:	d8800517 	ldw	r2,20(sp)
80087878:	00a3c83a 	sub	r17,zero,r2
8008787c:	8800a426 	beq	r17,zero,80087b10 <_dtoa_r+0x1498>
80087880:	888003cc 	andi	r2,r17,15
80087884:	100490fa 	slli	r2,r2,3
80087888:	00e00274 	movhi	r3,32777
8008788c:	18dac004 	addi	r3,r3,27392
80087890:	1885883a 	add	r2,r3,r2
80087894:	11800017 	ldw	r6,0(r2)
80087898:	11c00117 	ldw	r7,4(r2)
8008789c:	9009883a 	mov	r4,r18
800878a0:	980b883a 	mov	r5,r19
800878a4:	8823d13a 	srai	r17,r17,4
800878a8:	00811180 	call	80081118 <__muldf3>
800878ac:	d8800f15 	stw	r2,60(sp)
800878b0:	d8c01015 	stw	r3,64(sp)
800878b4:	8800e826 	beq	r17,zero,80087c58 <_dtoa_r+0x15e0>
800878b8:	05200274 	movhi	r20,32777
800878bc:	a51ab604 	addi	r20,r20,27352
800878c0:	04000084 	movi	r16,2
800878c4:	8980004c 	andi	r6,r17,1
800878c8:	1009883a 	mov	r4,r2
800878cc:	8823d07a 	srai	r17,r17,1
800878d0:	180b883a 	mov	r5,r3
800878d4:	30000426 	beq	r6,zero,800878e8 <_dtoa_r+0x1270>
800878d8:	a1800017 	ldw	r6,0(r20)
800878dc:	a1c00117 	ldw	r7,4(r20)
800878e0:	84000044 	addi	r16,r16,1
800878e4:	00811180 	call	80081118 <__muldf3>
800878e8:	a5000204 	addi	r20,r20,8
800878ec:	883ff51e 	bne	r17,zero,800878c4 <_dtoa_r+0x124c>
800878f0:	d8800f15 	stw	r2,60(sp)
800878f4:	d8c01015 	stw	r3,64(sp)
800878f8:	003c7606 	br	80086ad4 <_dtoa_r+0x45c>
800878fc:	00c00c04 	movi	r3,48
80087900:	10c00005 	stb	r3,0(r2)
80087904:	d8c00517 	ldw	r3,20(sp)
80087908:	bd3fffc3 	ldbu	r20,-1(r23)
8008790c:	18c00044 	addi	r3,r3,1
80087910:	d8c00515 	stw	r3,20(sp)
80087914:	003db906 	br	80086ffc <_dtoa_r+0x984>
80087918:	89400117 	ldw	r5,4(r17)
8008791c:	e009883a 	mov	r4,fp
80087920:	0089d140 	call	80089d14 <_Balloc>
80087924:	89800417 	ldw	r6,16(r17)
80087928:	89400304 	addi	r5,r17,12
8008792c:	11000304 	addi	r4,r2,12
80087930:	31800084 	addi	r6,r6,2
80087934:	318d883a 	add	r6,r6,r6
80087938:	318d883a 	add	r6,r6,r6
8008793c:	1027883a 	mov	r19,r2
80087940:	00899480 	call	80089948 <memcpy>
80087944:	01800044 	movi	r6,1
80087948:	980b883a 	mov	r5,r19
8008794c:	e009883a 	mov	r4,fp
80087950:	008a4940 	call	8008a494 <__lshift>
80087954:	1029883a 	mov	r20,r2
80087958:	003ecc06 	br	8008748c <_dtoa_r+0xe14>
8008795c:	00800e44 	movi	r2,57
80087960:	90809026 	beq	r18,r2,80087ba4 <_dtoa_r+0x152c>
80087964:	92000044 	addi	r8,r18,1
80087968:	003f1f06 	br	800875e8 <_dtoa_r+0xf70>
8008796c:	9011883a 	mov	r8,r18
80087970:	8825883a 	mov	r18,r17
80087974:	a023883a 	mov	r17,r20
80087978:	003e2906 	br	80087220 <_dtoa_r+0xba8>
8008797c:	002b883a 	mov	r21,zero
80087980:	0023883a 	mov	r17,zero
80087984:	003f5406 	br	800876d8 <_dtoa_r+0x1060>
80087988:	61bfffc4 	addi	r6,r12,-1
8008798c:	300490fa 	slli	r2,r6,3
80087990:	00e00274 	movhi	r3,32777
80087994:	18dac004 	addi	r3,r3,27392
80087998:	1885883a 	add	r2,r3,r2
8008799c:	11000017 	ldw	r4,0(r2)
800879a0:	11400117 	ldw	r5,4(r2)
800879a4:	d8800717 	ldw	r2,28(sp)
800879a8:	880f883a 	mov	r7,r17
800879ac:	d9801215 	stw	r6,72(sp)
800879b0:	800d883a 	mov	r6,r16
800879b4:	db001615 	stw	r12,88(sp)
800879b8:	15c00044 	addi	r23,r2,1
800879bc:	00811180 	call	80081118 <__muldf3>
800879c0:	d9401017 	ldw	r5,64(sp)
800879c4:	d9000f17 	ldw	r4,60(sp)
800879c8:	d8c01515 	stw	r3,84(sp)
800879cc:	d8801415 	stw	r2,80(sp)
800879d0:	009133c0 	call	8009133c <__fixdfsi>
800879d4:	1009883a 	mov	r4,r2
800879d8:	1021883a 	mov	r16,r2
800879dc:	00913bc0 	call	800913bc <__floatsidf>
800879e0:	d9000f17 	ldw	r4,60(sp)
800879e4:	d9401017 	ldw	r5,64(sp)
800879e8:	100d883a 	mov	r6,r2
800879ec:	180f883a 	mov	r7,r3
800879f0:	0090a400 	call	80090a40 <__subdf3>
800879f4:	1829883a 	mov	r20,r3
800879f8:	d8c00717 	ldw	r3,28(sp)
800879fc:	84000c04 	addi	r16,r16,48
80087a00:	1023883a 	mov	r17,r2
80087a04:	1c000005 	stb	r16,0(r3)
80087a08:	db001617 	ldw	r12,88(sp)
80087a0c:	00800044 	movi	r2,1
80087a10:	60802226 	beq	r12,r2,80087a9c <_dtoa_r+0x1424>
80087a14:	d9c00717 	ldw	r7,28(sp)
80087a18:	8805883a 	mov	r2,r17
80087a1c:	b82b883a 	mov	r21,r23
80087a20:	3b19883a 	add	r12,r7,r12
80087a24:	6023883a 	mov	r17,r12
80087a28:	a007883a 	mov	r3,r20
80087a2c:	dc800f15 	stw	r18,60(sp)
80087a30:	000d883a 	mov	r6,zero
80087a34:	01d00934 	movhi	r7,16420
80087a38:	1009883a 	mov	r4,r2
80087a3c:	180b883a 	mov	r5,r3
80087a40:	00811180 	call	80081118 <__muldf3>
80087a44:	180b883a 	mov	r5,r3
80087a48:	1009883a 	mov	r4,r2
80087a4c:	1829883a 	mov	r20,r3
80087a50:	1025883a 	mov	r18,r2
80087a54:	009133c0 	call	8009133c <__fixdfsi>
80087a58:	1009883a 	mov	r4,r2
80087a5c:	1021883a 	mov	r16,r2
80087a60:	00913bc0 	call	800913bc <__floatsidf>
80087a64:	100d883a 	mov	r6,r2
80087a68:	180f883a 	mov	r7,r3
80087a6c:	9009883a 	mov	r4,r18
80087a70:	a00b883a 	mov	r5,r20
80087a74:	84000c04 	addi	r16,r16,48
80087a78:	0090a400 	call	80090a40 <__subdf3>
80087a7c:	ad400044 	addi	r21,r21,1
80087a80:	ac3fffc5 	stb	r16,-1(r21)
80087a84:	ac7fea1e 	bne	r21,r17,80087a30 <_dtoa_r+0x13b8>
80087a88:	1023883a 	mov	r17,r2
80087a8c:	d8801217 	ldw	r2,72(sp)
80087a90:	dc800f17 	ldw	r18,60(sp)
80087a94:	1829883a 	mov	r20,r3
80087a98:	b8af883a 	add	r23,r23,r2
80087a9c:	d9001417 	ldw	r4,80(sp)
80087aa0:	d9401517 	ldw	r5,84(sp)
80087aa4:	000d883a 	mov	r6,zero
80087aa8:	01cff834 	movhi	r7,16352
80087aac:	008f7300 	call	8008f730 <__adddf3>
80087ab0:	880d883a 	mov	r6,r17
80087ab4:	a00f883a 	mov	r7,r20
80087ab8:	1009883a 	mov	r4,r2
80087abc:	180b883a 	mov	r5,r3
80087ac0:	009094c0 	call	8009094c <__ledf2>
80087ac4:	10003e0e 	bge	r2,zero,80087bc0 <_dtoa_r+0x1548>
80087ac8:	d9001317 	ldw	r4,76(sp)
80087acc:	bd3fffc3 	ldbu	r20,-1(r23)
80087ad0:	d9000515 	stw	r4,20(sp)
80087ad4:	003d3b06 	br	80086fc4 <_dtoa_r+0x94c>
80087ad8:	0027883a 	mov	r19,zero
80087adc:	003f1b06 	br	8008774c <_dtoa_r+0x10d4>
80087ae0:	d8800817 	ldw	r2,32(sp)
80087ae4:	11e9c83a 	sub	r20,r2,r7
80087ae8:	0005883a 	mov	r2,zero
80087aec:	003d5406 	br	80087040 <_dtoa_r+0x9c8>
80087af0:	00800044 	movi	r2,1
80087af4:	003dc706 	br	80087214 <_dtoa_r+0xb9c>
80087af8:	d8c00217 	ldw	r3,8(sp)
80087afc:	00800d84 	movi	r2,54
80087b00:	dd400a17 	ldw	r21,40(sp)
80087b04:	10c5c83a 	sub	r2,r2,r3
80087b08:	dd000817 	ldw	r20,32(sp)
80087b0c:	003d4c06 	br	80087040 <_dtoa_r+0x9c8>
80087b10:	dc800f15 	stw	r18,60(sp)
80087b14:	dcc01015 	stw	r19,64(sp)
80087b18:	04000084 	movi	r16,2
80087b1c:	003bed06 	br	80086ad4 <_dtoa_r+0x45c>
80087b20:	d9000617 	ldw	r4,24(sp)
80087b24:	203f0d26 	beq	r4,zero,8008775c <_dtoa_r+0x10e4>
80087b28:	d9800c17 	ldw	r6,48(sp)
80087b2c:	01bcab0e 	bge	zero,r6,80086ddc <_dtoa_r+0x764>
80087b30:	d9401017 	ldw	r5,64(sp)
80087b34:	d9000f17 	ldw	r4,60(sp)
80087b38:	000d883a 	mov	r6,zero
80087b3c:	01d00934 	movhi	r7,16420
80087b40:	00811180 	call	80081118 <__muldf3>
80087b44:	81000044 	addi	r4,r16,1
80087b48:	d8800f15 	stw	r2,60(sp)
80087b4c:	d8c01015 	stw	r3,64(sp)
80087b50:	00913bc0 	call	800913bc <__floatsidf>
80087b54:	d9800f17 	ldw	r6,60(sp)
80087b58:	d9c01017 	ldw	r7,64(sp)
80087b5c:	1009883a 	mov	r4,r2
80087b60:	180b883a 	mov	r5,r3
80087b64:	00811180 	call	80081118 <__muldf3>
80087b68:	01d00734 	movhi	r7,16412
80087b6c:	000d883a 	mov	r6,zero
80087b70:	1009883a 	mov	r4,r2
80087b74:	180b883a 	mov	r5,r3
80087b78:	008f7300 	call	8008f730 <__adddf3>
80087b7c:	d9c00517 	ldw	r7,20(sp)
80087b80:	047f3034 	movhi	r17,64704
80087b84:	1021883a 	mov	r16,r2
80087b88:	39ffffc4 	addi	r7,r7,-1
80087b8c:	d9c01315 	stw	r7,76(sp)
80087b90:	1c63883a 	add	r17,r3,r17
80087b94:	db000c17 	ldw	r12,48(sp)
80087b98:	003bea06 	br	80086b44 <_dtoa_r+0x4cc>
80087b9c:	dc000915 	stw	r16,36(sp)
80087ba0:	003e0e06 	br	800873dc <_dtoa_r+0xd64>
80087ba4:	01000e44 	movi	r4,57
80087ba8:	8825883a 	mov	r18,r17
80087bac:	9dc00044 	addi	r23,r19,1
80087bb0:	99000005 	stb	r4,0(r19)
80087bb4:	a023883a 	mov	r17,r20
80087bb8:	dc000915 	stw	r16,36(sp)
80087bbc:	003da406 	br	80087250 <_dtoa_r+0xbd8>
80087bc0:	d9801417 	ldw	r6,80(sp)
80087bc4:	d9c01517 	ldw	r7,84(sp)
80087bc8:	0009883a 	mov	r4,zero
80087bcc:	014ff834 	movhi	r5,16352
80087bd0:	0090a400 	call	80090a40 <__subdf3>
80087bd4:	880d883a 	mov	r6,r17
80087bd8:	a00f883a 	mov	r7,r20
80087bdc:	1009883a 	mov	r4,r2
80087be0:	180b883a 	mov	r5,r3
80087be4:	008103c0 	call	8008103c <__gedf2>
80087be8:	00bc7c0e 	bge	zero,r2,80086ddc <_dtoa_r+0x764>
80087bec:	01000c04 	movi	r4,48
80087bf0:	00000106 	br	80087bf8 <_dtoa_r+0x1580>
80087bf4:	102f883a 	mov	r23,r2
80087bf8:	b8bfffc4 	addi	r2,r23,-1
80087bfc:	10c00007 	ldb	r3,0(r2)
80087c00:	193ffc26 	beq	r3,r4,80087bf4 <_dtoa_r+0x157c>
80087c04:	d9801317 	ldw	r6,76(sp)
80087c08:	d9800515 	stw	r6,20(sp)
80087c0c:	003c4406 	br	80086d20 <_dtoa_r+0x6a8>
80087c10:	d9801317 	ldw	r6,76(sp)
80087c14:	d9800515 	stw	r6,20(sp)
80087c18:	003cea06 	br	80086fc4 <_dtoa_r+0x94c>
80087c1c:	dd800f17 	ldw	r22,60(sp)
80087c20:	dcc01017 	ldw	r19,64(sp)
80087c24:	dc801217 	ldw	r18,72(sp)
80087c28:	003c6c06 	br	80086ddc <_dtoa_r+0x764>
80087c2c:	903e031e 	bne	r18,zero,8008743c <_dtoa_r+0xdc4>
80087c30:	003ebb06 	br	80087720 <_dtoa_r+0x10a8>
80087c34:	103e6c1e 	bne	r2,zero,800875e8 <_dtoa_r+0xf70>
80087c38:	4080004c 	andi	r2,r8,1
80087c3c:	103e6a26 	beq	r2,zero,800875e8 <_dtoa_r+0xf70>
80087c40:	003e6606 	br	800875dc <_dtoa_r+0xf64>
80087c44:	d8c00317 	ldw	r3,12(sp)
80087c48:	00800084 	movi	r2,2
80087c4c:	10c02916 	blt	r2,r3,80087cf4 <_dtoa_r+0x167c>
80087c50:	d9000c17 	ldw	r4,48(sp)
80087c54:	003e8806 	br	80087678 <_dtoa_r+0x1000>
80087c58:	04000084 	movi	r16,2
80087c5c:	003b9d06 	br	80086ad4 <_dtoa_r+0x45c>
80087c60:	d9001317 	ldw	r4,76(sp)
80087c64:	d9000515 	stw	r4,20(sp)
80087c68:	003cd606 	br	80086fc4 <_dtoa_r+0x94c>
80087c6c:	d8801317 	ldw	r2,76(sp)
80087c70:	d8800515 	stw	r2,20(sp)
80087c74:	003c2a06 	br	80086d20 <_dtoa_r+0x6a8>
80087c78:	d9800317 	ldw	r6,12(sp)
80087c7c:	00800084 	movi	r2,2
80087c80:	11801516 	blt	r2,r6,80087cd8 <_dtoa_r+0x1660>
80087c84:	d9c00c17 	ldw	r7,48(sp)
80087c88:	d9c00615 	stw	r7,24(sp)
80087c8c:	003df706 	br	8008746c <_dtoa_r+0xdf4>
80087c90:	193d3926 	beq	r3,r4,80087178 <_dtoa_r+0xb00>
80087c94:	00c00f04 	movi	r3,60
80087c98:	1885c83a 	sub	r2,r3,r2
80087c9c:	003ddf06 	br	8008741c <_dtoa_r+0xda4>
80087ca0:	e009883a 	mov	r4,fp
80087ca4:	e0001115 	stw	zero,68(fp)
80087ca8:	000b883a 	mov	r5,zero
80087cac:	0089d140 	call	80089d14 <_Balloc>
80087cb0:	d8800715 	stw	r2,28(sp)
80087cb4:	d8c00717 	ldw	r3,28(sp)
80087cb8:	00bfffc4 	movi	r2,-1
80087cbc:	01000044 	movi	r4,1
80087cc0:	d8800c15 	stw	r2,48(sp)
80087cc4:	e0c01015 	stw	r3,64(fp)
80087cc8:	d9000b15 	stw	r4,44(sp)
80087ccc:	d8800615 	stw	r2,24(sp)
80087cd0:	d8002215 	stw	zero,136(sp)
80087cd4:	003c4106 	br	80086ddc <_dtoa_r+0x764>
80087cd8:	d8c00c17 	ldw	r3,48(sp)
80087cdc:	d8c00615 	stw	r3,24(sp)
80087ce0:	003e7006 	br	800876a4 <_dtoa_r+0x102c>
80087ce4:	04400044 	movi	r17,1
80087ce8:	003b2006 	br	8008696c <_dtoa_r+0x2f4>
80087cec:	000b883a 	mov	r5,zero
80087cf0:	003b3d06 	br	800869e8 <_dtoa_r+0x370>
80087cf4:	d8800c17 	ldw	r2,48(sp)
80087cf8:	d8800615 	stw	r2,24(sp)
80087cfc:	003e6906 	br	800876a4 <_dtoa_r+0x102c>

80087d00 <__sflush_r>:
80087d00:	2880030b 	ldhu	r2,12(r5)
80087d04:	defffb04 	addi	sp,sp,-20
80087d08:	dcc00315 	stw	r19,12(sp)
80087d0c:	dc400115 	stw	r17,4(sp)
80087d10:	dfc00415 	stw	ra,16(sp)
80087d14:	dc800215 	stw	r18,8(sp)
80087d18:	dc000015 	stw	r16,0(sp)
80087d1c:	10c0020c 	andi	r3,r2,8
80087d20:	2823883a 	mov	r17,r5
80087d24:	2027883a 	mov	r19,r4
80087d28:	1800311e 	bne	r3,zero,80087df0 <__sflush_r+0xf0>
80087d2c:	28c00117 	ldw	r3,4(r5)
80087d30:	10820014 	ori	r2,r2,2048
80087d34:	2880030d 	sth	r2,12(r5)
80087d38:	00c04b0e 	bge	zero,r3,80087e68 <__sflush_r+0x168>
80087d3c:	8a000a17 	ldw	r8,40(r17)
80087d40:	40002326 	beq	r8,zero,80087dd0 <__sflush_r+0xd0>
80087d44:	9c000017 	ldw	r16,0(r19)
80087d48:	10c4000c 	andi	r3,r2,4096
80087d4c:	98000015 	stw	zero,0(r19)
80087d50:	18004826 	beq	r3,zero,80087e74 <__sflush_r+0x174>
80087d54:	89801417 	ldw	r6,80(r17)
80087d58:	10c0010c 	andi	r3,r2,4
80087d5c:	18000626 	beq	r3,zero,80087d78 <__sflush_r+0x78>
80087d60:	88c00117 	ldw	r3,4(r17)
80087d64:	88800c17 	ldw	r2,48(r17)
80087d68:	30cdc83a 	sub	r6,r6,r3
80087d6c:	10000226 	beq	r2,zero,80087d78 <__sflush_r+0x78>
80087d70:	88800f17 	ldw	r2,60(r17)
80087d74:	308dc83a 	sub	r6,r6,r2
80087d78:	89400717 	ldw	r5,28(r17)
80087d7c:	000f883a 	mov	r7,zero
80087d80:	9809883a 	mov	r4,r19
80087d84:	403ee83a 	callr	r8
80087d88:	00ffffc4 	movi	r3,-1
80087d8c:	10c04426 	beq	r2,r3,80087ea0 <__sflush_r+0x1a0>
80087d90:	88c0030b 	ldhu	r3,12(r17)
80087d94:	89000417 	ldw	r4,16(r17)
80087d98:	88000115 	stw	zero,4(r17)
80087d9c:	197dffcc 	andi	r5,r3,63487
80087da0:	8940030d 	sth	r5,12(r17)
80087da4:	89000015 	stw	r4,0(r17)
80087da8:	18c4000c 	andi	r3,r3,4096
80087dac:	18002c1e 	bne	r3,zero,80087e60 <__sflush_r+0x160>
80087db0:	89400c17 	ldw	r5,48(r17)
80087db4:	9c000015 	stw	r16,0(r19)
80087db8:	28000526 	beq	r5,zero,80087dd0 <__sflush_r+0xd0>
80087dbc:	88801004 	addi	r2,r17,64
80087dc0:	28800226 	beq	r5,r2,80087dcc <__sflush_r+0xcc>
80087dc4:	9809883a 	mov	r4,r19
80087dc8:	008846c0 	call	8008846c <_free_r>
80087dcc:	88000c15 	stw	zero,48(r17)
80087dd0:	0005883a 	mov	r2,zero
80087dd4:	dfc00417 	ldw	ra,16(sp)
80087dd8:	dcc00317 	ldw	r19,12(sp)
80087ddc:	dc800217 	ldw	r18,8(sp)
80087de0:	dc400117 	ldw	r17,4(sp)
80087de4:	dc000017 	ldw	r16,0(sp)
80087de8:	dec00504 	addi	sp,sp,20
80087dec:	f800283a 	ret
80087df0:	2c800417 	ldw	r18,16(r5)
80087df4:	903ff626 	beq	r18,zero,80087dd0 <__sflush_r+0xd0>
80087df8:	2c000017 	ldw	r16,0(r5)
80087dfc:	108000cc 	andi	r2,r2,3
80087e00:	2c800015 	stw	r18,0(r5)
80087e04:	84a1c83a 	sub	r16,r16,r18
80087e08:	1000131e 	bne	r2,zero,80087e58 <__sflush_r+0x158>
80087e0c:	28800517 	ldw	r2,20(r5)
80087e10:	88800215 	stw	r2,8(r17)
80087e14:	04000316 	blt	zero,r16,80087e24 <__sflush_r+0x124>
80087e18:	003fed06 	br	80087dd0 <__sflush_r+0xd0>
80087e1c:	90a5883a 	add	r18,r18,r2
80087e20:	043feb0e 	bge	zero,r16,80087dd0 <__sflush_r+0xd0>
80087e24:	88800917 	ldw	r2,36(r17)
80087e28:	89400717 	ldw	r5,28(r17)
80087e2c:	800f883a 	mov	r7,r16
80087e30:	900d883a 	mov	r6,r18
80087e34:	9809883a 	mov	r4,r19
80087e38:	103ee83a 	callr	r2
80087e3c:	80a1c83a 	sub	r16,r16,r2
80087e40:	00bff616 	blt	zero,r2,80087e1c <__sflush_r+0x11c>
80087e44:	88c0030b 	ldhu	r3,12(r17)
80087e48:	00bfffc4 	movi	r2,-1
80087e4c:	18c01014 	ori	r3,r3,64
80087e50:	88c0030d 	sth	r3,12(r17)
80087e54:	003fdf06 	br	80087dd4 <__sflush_r+0xd4>
80087e58:	0005883a 	mov	r2,zero
80087e5c:	003fec06 	br	80087e10 <__sflush_r+0x110>
80087e60:	88801415 	stw	r2,80(r17)
80087e64:	003fd206 	br	80087db0 <__sflush_r+0xb0>
80087e68:	28c00f17 	ldw	r3,60(r5)
80087e6c:	00ffb316 	blt	zero,r3,80087d3c <__sflush_r+0x3c>
80087e70:	003fd706 	br	80087dd0 <__sflush_r+0xd0>
80087e74:	89400717 	ldw	r5,28(r17)
80087e78:	000d883a 	mov	r6,zero
80087e7c:	01c00044 	movi	r7,1
80087e80:	9809883a 	mov	r4,r19
80087e84:	403ee83a 	callr	r8
80087e88:	100d883a 	mov	r6,r2
80087e8c:	00bfffc4 	movi	r2,-1
80087e90:	30801426 	beq	r6,r2,80087ee4 <__sflush_r+0x1e4>
80087e94:	8880030b 	ldhu	r2,12(r17)
80087e98:	8a000a17 	ldw	r8,40(r17)
80087e9c:	003fae06 	br	80087d58 <__sflush_r+0x58>
80087ea0:	98c00017 	ldw	r3,0(r19)
80087ea4:	183fba26 	beq	r3,zero,80087d90 <__sflush_r+0x90>
80087ea8:	01000744 	movi	r4,29
80087eac:	19000626 	beq	r3,r4,80087ec8 <__sflush_r+0x1c8>
80087eb0:	01000584 	movi	r4,22
80087eb4:	19000426 	beq	r3,r4,80087ec8 <__sflush_r+0x1c8>
80087eb8:	88c0030b 	ldhu	r3,12(r17)
80087ebc:	18c01014 	ori	r3,r3,64
80087ec0:	88c0030d 	sth	r3,12(r17)
80087ec4:	003fc306 	br	80087dd4 <__sflush_r+0xd4>
80087ec8:	8880030b 	ldhu	r2,12(r17)
80087ecc:	88c00417 	ldw	r3,16(r17)
80087ed0:	88000115 	stw	zero,4(r17)
80087ed4:	10bdffcc 	andi	r2,r2,63487
80087ed8:	8880030d 	sth	r2,12(r17)
80087edc:	88c00015 	stw	r3,0(r17)
80087ee0:	003fb306 	br	80087db0 <__sflush_r+0xb0>
80087ee4:	98800017 	ldw	r2,0(r19)
80087ee8:	103fea26 	beq	r2,zero,80087e94 <__sflush_r+0x194>
80087eec:	00c00744 	movi	r3,29
80087ef0:	10c00226 	beq	r2,r3,80087efc <__sflush_r+0x1fc>
80087ef4:	00c00584 	movi	r3,22
80087ef8:	10c0031e 	bne	r2,r3,80087f08 <__sflush_r+0x208>
80087efc:	9c000015 	stw	r16,0(r19)
80087f00:	0005883a 	mov	r2,zero
80087f04:	003fb306 	br	80087dd4 <__sflush_r+0xd4>
80087f08:	88c0030b 	ldhu	r3,12(r17)
80087f0c:	3005883a 	mov	r2,r6
80087f10:	18c01014 	ori	r3,r3,64
80087f14:	88c0030d 	sth	r3,12(r17)
80087f18:	003fae06 	br	80087dd4 <__sflush_r+0xd4>

80087f1c <_fflush_r>:
80087f1c:	defffd04 	addi	sp,sp,-12
80087f20:	dc000115 	stw	r16,4(sp)
80087f24:	dfc00215 	stw	ra,8(sp)
80087f28:	2021883a 	mov	r16,r4
80087f2c:	20000226 	beq	r4,zero,80087f38 <_fflush_r+0x1c>
80087f30:	20800e17 	ldw	r2,56(r4)
80087f34:	10000c26 	beq	r2,zero,80087f68 <_fflush_r+0x4c>
80087f38:	2880030f 	ldh	r2,12(r5)
80087f3c:	1000051e 	bne	r2,zero,80087f54 <_fflush_r+0x38>
80087f40:	0005883a 	mov	r2,zero
80087f44:	dfc00217 	ldw	ra,8(sp)
80087f48:	dc000117 	ldw	r16,4(sp)
80087f4c:	dec00304 	addi	sp,sp,12
80087f50:	f800283a 	ret
80087f54:	8009883a 	mov	r4,r16
80087f58:	dfc00217 	ldw	ra,8(sp)
80087f5c:	dc000117 	ldw	r16,4(sp)
80087f60:	dec00304 	addi	sp,sp,12
80087f64:	0087d001 	jmpi	80087d00 <__sflush_r>
80087f68:	d9400015 	stw	r5,0(sp)
80087f6c:	00882f80 	call	800882f8 <__sinit>
80087f70:	d9400017 	ldw	r5,0(sp)
80087f74:	003ff006 	br	80087f38 <_fflush_r+0x1c>

80087f78 <fflush>:
80087f78:	20000526 	beq	r4,zero,80087f90 <fflush+0x18>
80087f7c:	00a002b4 	movhi	r2,32778
80087f80:	10a31204 	addi	r2,r2,-29624
80087f84:	200b883a 	mov	r5,r4
80087f88:	11000017 	ldw	r4,0(r2)
80087f8c:	0087f1c1 	jmpi	80087f1c <_fflush_r>
80087f90:	00a002b4 	movhi	r2,32778
80087f94:	10a31104 	addi	r2,r2,-29628
80087f98:	11000017 	ldw	r4,0(r2)
80087f9c:	01600234 	movhi	r5,32776
80087fa0:	295fc704 	addi	r5,r5,32540
80087fa4:	0088cfc1 	jmpi	80088cfc <_fwalk_reent>

80087fa8 <__fp_unlock>:
80087fa8:	0005883a 	mov	r2,zero
80087fac:	f800283a 	ret

80087fb0 <_cleanup_r>:
80087fb0:	01600274 	movhi	r5,32777
80087fb4:	2978c404 	addi	r5,r5,-7408
80087fb8:	0088cfc1 	jmpi	80088cfc <_fwalk_reent>

80087fbc <__sinit.part.1>:
80087fbc:	defff704 	addi	sp,sp,-36
80087fc0:	00e00234 	movhi	r3,32776
80087fc4:	dfc00815 	stw	ra,32(sp)
80087fc8:	ddc00715 	stw	r23,28(sp)
80087fcc:	dd800615 	stw	r22,24(sp)
80087fd0:	dd400515 	stw	r21,20(sp)
80087fd4:	dd000415 	stw	r20,16(sp)
80087fd8:	dcc00315 	stw	r19,12(sp)
80087fdc:	dc800215 	stw	r18,8(sp)
80087fe0:	dc400115 	stw	r17,4(sp)
80087fe4:	dc000015 	stw	r16,0(sp)
80087fe8:	18dfec04 	addi	r3,r3,32688
80087fec:	24000117 	ldw	r16,4(r4)
80087ff0:	20c00f15 	stw	r3,60(r4)
80087ff4:	2080bb04 	addi	r2,r4,748
80087ff8:	00c000c4 	movi	r3,3
80087ffc:	20c0b915 	stw	r3,740(r4)
80088000:	2080ba15 	stw	r2,744(r4)
80088004:	2000b815 	stw	zero,736(r4)
80088008:	05c00204 	movi	r23,8
8008800c:	00800104 	movi	r2,4
80088010:	2025883a 	mov	r18,r4
80088014:	b80d883a 	mov	r6,r23
80088018:	81001704 	addi	r4,r16,92
8008801c:	000b883a 	mov	r5,zero
80088020:	80000015 	stw	zero,0(r16)
80088024:	80000115 	stw	zero,4(r16)
80088028:	80000215 	stw	zero,8(r16)
8008802c:	8080030d 	sth	r2,12(r16)
80088030:	80001915 	stw	zero,100(r16)
80088034:	8000038d 	sth	zero,14(r16)
80088038:	80000415 	stw	zero,16(r16)
8008803c:	80000515 	stw	zero,20(r16)
80088040:	80000615 	stw	zero,24(r16)
80088044:	0089bec0 	call	80089bec <memset>
80088048:	05a00274 	movhi	r22,32777
8008804c:	94400217 	ldw	r17,8(r18)
80088050:	05600274 	movhi	r21,32777
80088054:	05200274 	movhi	r20,32777
80088058:	04e00274 	movhi	r19,32777
8008805c:	b5ad4b04 	addi	r22,r22,-19156
80088060:	ad6d6204 	addi	r21,r21,-19064
80088064:	a52d8104 	addi	r20,r20,-18940
80088068:	9ced9804 	addi	r19,r19,-18848
8008806c:	85800815 	stw	r22,32(r16)
80088070:	85400915 	stw	r21,36(r16)
80088074:	85000a15 	stw	r20,40(r16)
80088078:	84c00b15 	stw	r19,44(r16)
8008807c:	84000715 	stw	r16,28(r16)
80088080:	00800284 	movi	r2,10
80088084:	8880030d 	sth	r2,12(r17)
80088088:	00800044 	movi	r2,1
8008808c:	b80d883a 	mov	r6,r23
80088090:	89001704 	addi	r4,r17,92
80088094:	000b883a 	mov	r5,zero
80088098:	88000015 	stw	zero,0(r17)
8008809c:	88000115 	stw	zero,4(r17)
800880a0:	88000215 	stw	zero,8(r17)
800880a4:	88001915 	stw	zero,100(r17)
800880a8:	8880038d 	sth	r2,14(r17)
800880ac:	88000415 	stw	zero,16(r17)
800880b0:	88000515 	stw	zero,20(r17)
800880b4:	88000615 	stw	zero,24(r17)
800880b8:	0089bec0 	call	80089bec <memset>
800880bc:	94000317 	ldw	r16,12(r18)
800880c0:	00800484 	movi	r2,18
800880c4:	8c400715 	stw	r17,28(r17)
800880c8:	8d800815 	stw	r22,32(r17)
800880cc:	8d400915 	stw	r21,36(r17)
800880d0:	8d000a15 	stw	r20,40(r17)
800880d4:	8cc00b15 	stw	r19,44(r17)
800880d8:	8080030d 	sth	r2,12(r16)
800880dc:	00800084 	movi	r2,2
800880e0:	80000015 	stw	zero,0(r16)
800880e4:	80000115 	stw	zero,4(r16)
800880e8:	80000215 	stw	zero,8(r16)
800880ec:	80001915 	stw	zero,100(r16)
800880f0:	8080038d 	sth	r2,14(r16)
800880f4:	80000415 	stw	zero,16(r16)
800880f8:	80000515 	stw	zero,20(r16)
800880fc:	80000615 	stw	zero,24(r16)
80088100:	b80d883a 	mov	r6,r23
80088104:	000b883a 	mov	r5,zero
80088108:	81001704 	addi	r4,r16,92
8008810c:	0089bec0 	call	80089bec <memset>
80088110:	00800044 	movi	r2,1
80088114:	84000715 	stw	r16,28(r16)
80088118:	85800815 	stw	r22,32(r16)
8008811c:	85400915 	stw	r21,36(r16)
80088120:	85000a15 	stw	r20,40(r16)
80088124:	84c00b15 	stw	r19,44(r16)
80088128:	90800e15 	stw	r2,56(r18)
8008812c:	dfc00817 	ldw	ra,32(sp)
80088130:	ddc00717 	ldw	r23,28(sp)
80088134:	dd800617 	ldw	r22,24(sp)
80088138:	dd400517 	ldw	r21,20(sp)
8008813c:	dd000417 	ldw	r20,16(sp)
80088140:	dcc00317 	ldw	r19,12(sp)
80088144:	dc800217 	ldw	r18,8(sp)
80088148:	dc400117 	ldw	r17,4(sp)
8008814c:	dc000017 	ldw	r16,0(sp)
80088150:	dec00904 	addi	sp,sp,36
80088154:	f800283a 	ret

80088158 <__fp_lock>:
80088158:	0005883a 	mov	r2,zero
8008815c:	f800283a 	ret

80088160 <__sfmoreglue>:
80088160:	defffc04 	addi	sp,sp,-16
80088164:	dc400115 	stw	r17,4(sp)
80088168:	2c7fffc4 	addi	r17,r5,-1
8008816c:	8c401a24 	muli	r17,r17,104
80088170:	dc800215 	stw	r18,8(sp)
80088174:	2825883a 	mov	r18,r5
80088178:	89401d04 	addi	r5,r17,116
8008817c:	dc000015 	stw	r16,0(sp)
80088180:	dfc00315 	stw	ra,12(sp)
80088184:	00890580 	call	80089058 <_malloc_r>
80088188:	1021883a 	mov	r16,r2
8008818c:	10000726 	beq	r2,zero,800881ac <__sfmoreglue+0x4c>
80088190:	11000304 	addi	r4,r2,12
80088194:	10000015 	stw	zero,0(r2)
80088198:	14800115 	stw	r18,4(r2)
8008819c:	11000215 	stw	r4,8(r2)
800881a0:	89801a04 	addi	r6,r17,104
800881a4:	000b883a 	mov	r5,zero
800881a8:	0089bec0 	call	80089bec <memset>
800881ac:	8005883a 	mov	r2,r16
800881b0:	dfc00317 	ldw	ra,12(sp)
800881b4:	dc800217 	ldw	r18,8(sp)
800881b8:	dc400117 	ldw	r17,4(sp)
800881bc:	dc000017 	ldw	r16,0(sp)
800881c0:	dec00404 	addi	sp,sp,16
800881c4:	f800283a 	ret

800881c8 <__sfp>:
800881c8:	defffb04 	addi	sp,sp,-20
800881cc:	dc000015 	stw	r16,0(sp)
800881d0:	042002b4 	movhi	r16,32778
800881d4:	84231104 	addi	r16,r16,-29628
800881d8:	dcc00315 	stw	r19,12(sp)
800881dc:	2027883a 	mov	r19,r4
800881e0:	81000017 	ldw	r4,0(r16)
800881e4:	dfc00415 	stw	ra,16(sp)
800881e8:	dc800215 	stw	r18,8(sp)
800881ec:	20800e17 	ldw	r2,56(r4)
800881f0:	dc400115 	stw	r17,4(sp)
800881f4:	1000021e 	bne	r2,zero,80088200 <__sfp+0x38>
800881f8:	0087fbc0 	call	80087fbc <__sinit.part.1>
800881fc:	81000017 	ldw	r4,0(r16)
80088200:	2480b804 	addi	r18,r4,736
80088204:	047fffc4 	movi	r17,-1
80088208:	91000117 	ldw	r4,4(r18)
8008820c:	94000217 	ldw	r16,8(r18)
80088210:	213fffc4 	addi	r4,r4,-1
80088214:	20000a16 	blt	r4,zero,80088240 <__sfp+0x78>
80088218:	8080030f 	ldh	r2,12(r16)
8008821c:	10000c26 	beq	r2,zero,80088250 <__sfp+0x88>
80088220:	80c01d04 	addi	r3,r16,116
80088224:	00000206 	br	80088230 <__sfp+0x68>
80088228:	18bfe60f 	ldh	r2,-104(r3)
8008822c:	10000826 	beq	r2,zero,80088250 <__sfp+0x88>
80088230:	213fffc4 	addi	r4,r4,-1
80088234:	1c3ffd04 	addi	r16,r3,-12
80088238:	18c01a04 	addi	r3,r3,104
8008823c:	247ffa1e 	bne	r4,r17,80088228 <__sfp+0x60>
80088240:	90800017 	ldw	r2,0(r18)
80088244:	10001d26 	beq	r2,zero,800882bc <__sfp+0xf4>
80088248:	1025883a 	mov	r18,r2
8008824c:	003fee06 	br	80088208 <__sfp+0x40>
80088250:	00bfffc4 	movi	r2,-1
80088254:	8080038d 	sth	r2,14(r16)
80088258:	00800044 	movi	r2,1
8008825c:	8080030d 	sth	r2,12(r16)
80088260:	80001915 	stw	zero,100(r16)
80088264:	80000015 	stw	zero,0(r16)
80088268:	80000215 	stw	zero,8(r16)
8008826c:	80000115 	stw	zero,4(r16)
80088270:	80000415 	stw	zero,16(r16)
80088274:	80000515 	stw	zero,20(r16)
80088278:	80000615 	stw	zero,24(r16)
8008827c:	01800204 	movi	r6,8
80088280:	000b883a 	mov	r5,zero
80088284:	81001704 	addi	r4,r16,92
80088288:	0089bec0 	call	80089bec <memset>
8008828c:	8005883a 	mov	r2,r16
80088290:	80000c15 	stw	zero,48(r16)
80088294:	80000d15 	stw	zero,52(r16)
80088298:	80001115 	stw	zero,68(r16)
8008829c:	80001215 	stw	zero,72(r16)
800882a0:	dfc00417 	ldw	ra,16(sp)
800882a4:	dcc00317 	ldw	r19,12(sp)
800882a8:	dc800217 	ldw	r18,8(sp)
800882ac:	dc400117 	ldw	r17,4(sp)
800882b0:	dc000017 	ldw	r16,0(sp)
800882b4:	dec00504 	addi	sp,sp,20
800882b8:	f800283a 	ret
800882bc:	01400104 	movi	r5,4
800882c0:	9809883a 	mov	r4,r19
800882c4:	00881600 	call	80088160 <__sfmoreglue>
800882c8:	90800015 	stw	r2,0(r18)
800882cc:	103fde1e 	bne	r2,zero,80088248 <__sfp+0x80>
800882d0:	00800304 	movi	r2,12
800882d4:	98800015 	stw	r2,0(r19)
800882d8:	0005883a 	mov	r2,zero
800882dc:	003ff006 	br	800882a0 <__sfp+0xd8>

800882e0 <_cleanup>:
800882e0:	00a002b4 	movhi	r2,32778
800882e4:	10a31104 	addi	r2,r2,-29628
800882e8:	11000017 	ldw	r4,0(r2)
800882ec:	01600274 	movhi	r5,32777
800882f0:	2978c404 	addi	r5,r5,-7408
800882f4:	0088cfc1 	jmpi	80088cfc <_fwalk_reent>

800882f8 <__sinit>:
800882f8:	20800e17 	ldw	r2,56(r4)
800882fc:	10000126 	beq	r2,zero,80088304 <__sinit+0xc>
80088300:	f800283a 	ret
80088304:	0087fbc1 	jmpi	80087fbc <__sinit.part.1>

80088308 <__sfp_lock_acquire>:
80088308:	f800283a 	ret

8008830c <__sfp_lock_release>:
8008830c:	f800283a 	ret

80088310 <__sinit_lock_acquire>:
80088310:	f800283a 	ret

80088314 <__sinit_lock_release>:
80088314:	f800283a 	ret

80088318 <__fp_lock_all>:
80088318:	00a002b4 	movhi	r2,32778
8008831c:	10a31204 	addi	r2,r2,-29624
80088320:	11000017 	ldw	r4,0(r2)
80088324:	01600274 	movhi	r5,32777
80088328:	29605604 	addi	r5,r5,-32424
8008832c:	0088c381 	jmpi	80088c38 <_fwalk>

80088330 <__fp_unlock_all>:
80088330:	00a002b4 	movhi	r2,32778
80088334:	10a31204 	addi	r2,r2,-29624
80088338:	11000017 	ldw	r4,0(r2)
8008833c:	01600234 	movhi	r5,32776
80088340:	295fea04 	addi	r5,r5,32680
80088344:	0088c381 	jmpi	80088c38 <_fwalk>

80088348 <_malloc_trim_r>:
80088348:	defffb04 	addi	sp,sp,-20
8008834c:	dcc00315 	stw	r19,12(sp)
80088350:	04e00274 	movhi	r19,32777
80088354:	dc800215 	stw	r18,8(sp)
80088358:	dc400115 	stw	r17,4(sp)
8008835c:	dc000015 	stw	r16,0(sp)
80088360:	dfc00415 	stw	ra,16(sp)
80088364:	2821883a 	mov	r16,r5
80088368:	9cdcee04 	addi	r19,r19,29624
8008836c:	2025883a 	mov	r18,r4
80088370:	0091a140 	call	80091a14 <__malloc_lock>
80088374:	98800217 	ldw	r2,8(r19)
80088378:	14400117 	ldw	r17,4(r2)
8008837c:	00bfff04 	movi	r2,-4
80088380:	88a2703a 	and	r17,r17,r2
80088384:	8c21c83a 	sub	r16,r17,r16
80088388:	8403fbc4 	addi	r16,r16,4079
8008838c:	8020d33a 	srli	r16,r16,12
80088390:	0083ffc4 	movi	r2,4095
80088394:	843fffc4 	addi	r16,r16,-1
80088398:	8020933a 	slli	r16,r16,12
8008839c:	1400060e 	bge	r2,r16,800883b8 <_malloc_trim_r+0x70>
800883a0:	000b883a 	mov	r5,zero
800883a4:	9009883a 	mov	r4,r18
800883a8:	008b4d80 	call	8008b4d8 <_sbrk_r>
800883ac:	98c00217 	ldw	r3,8(r19)
800883b0:	1c47883a 	add	r3,r3,r17
800883b4:	10c00a26 	beq	r2,r3,800883e0 <_malloc_trim_r+0x98>
800883b8:	9009883a 	mov	r4,r18
800883bc:	0091a380 	call	80091a38 <__malloc_unlock>
800883c0:	0005883a 	mov	r2,zero
800883c4:	dfc00417 	ldw	ra,16(sp)
800883c8:	dcc00317 	ldw	r19,12(sp)
800883cc:	dc800217 	ldw	r18,8(sp)
800883d0:	dc400117 	ldw	r17,4(sp)
800883d4:	dc000017 	ldw	r16,0(sp)
800883d8:	dec00504 	addi	sp,sp,20
800883dc:	f800283a 	ret
800883e0:	040bc83a 	sub	r5,zero,r16
800883e4:	9009883a 	mov	r4,r18
800883e8:	008b4d80 	call	8008b4d8 <_sbrk_r>
800883ec:	00ffffc4 	movi	r3,-1
800883f0:	10c00d26 	beq	r2,r3,80088428 <_malloc_trim_r+0xe0>
800883f4:	00e002b4 	movhi	r3,32778
800883f8:	18ea9104 	addi	r3,r3,-21948
800883fc:	18800017 	ldw	r2,0(r3)
80088400:	99000217 	ldw	r4,8(r19)
80088404:	8c23c83a 	sub	r17,r17,r16
80088408:	8c400054 	ori	r17,r17,1
8008840c:	1421c83a 	sub	r16,r2,r16
80088410:	24400115 	stw	r17,4(r4)
80088414:	9009883a 	mov	r4,r18
80088418:	1c000015 	stw	r16,0(r3)
8008841c:	0091a380 	call	80091a38 <__malloc_unlock>
80088420:	00800044 	movi	r2,1
80088424:	003fe706 	br	800883c4 <_malloc_trim_r+0x7c>
80088428:	000b883a 	mov	r5,zero
8008842c:	9009883a 	mov	r4,r18
80088430:	008b4d80 	call	8008b4d8 <_sbrk_r>
80088434:	99000217 	ldw	r4,8(r19)
80088438:	014003c4 	movi	r5,15
8008843c:	1107c83a 	sub	r3,r2,r4
80088440:	28ffdd0e 	bge	r5,r3,800883b8 <_malloc_trim_r+0x70>
80088444:	016002b4 	movhi	r5,32778
80088448:	29631404 	addi	r5,r5,-29616
8008844c:	29400017 	ldw	r5,0(r5)
80088450:	18c00054 	ori	r3,r3,1
80088454:	20c00115 	stw	r3,4(r4)
80088458:	00e002b4 	movhi	r3,32778
8008845c:	1145c83a 	sub	r2,r2,r5
80088460:	18ea9104 	addi	r3,r3,-21948
80088464:	18800015 	stw	r2,0(r3)
80088468:	003fd306 	br	800883b8 <_malloc_trim_r+0x70>

8008846c <_free_r>:
8008846c:	28004126 	beq	r5,zero,80088574 <_free_r+0x108>
80088470:	defffd04 	addi	sp,sp,-12
80088474:	dc400115 	stw	r17,4(sp)
80088478:	dc000015 	stw	r16,0(sp)
8008847c:	2023883a 	mov	r17,r4
80088480:	2821883a 	mov	r16,r5
80088484:	dfc00215 	stw	ra,8(sp)
80088488:	0091a140 	call	80091a14 <__malloc_lock>
8008848c:	81ffff17 	ldw	r7,-4(r16)
80088490:	00bfff84 	movi	r2,-2
80088494:	01200274 	movhi	r4,32777
80088498:	81bffe04 	addi	r6,r16,-8
8008849c:	3884703a 	and	r2,r7,r2
800884a0:	211cee04 	addi	r4,r4,29624
800884a4:	308b883a 	add	r5,r6,r2
800884a8:	2a400117 	ldw	r9,4(r5)
800884ac:	22000217 	ldw	r8,8(r4)
800884b0:	00ffff04 	movi	r3,-4
800884b4:	48c6703a 	and	r3,r9,r3
800884b8:	2a005726 	beq	r5,r8,80088618 <_free_r+0x1ac>
800884bc:	28c00115 	stw	r3,4(r5)
800884c0:	39c0004c 	andi	r7,r7,1
800884c4:	3800091e 	bne	r7,zero,800884ec <_free_r+0x80>
800884c8:	823ffe17 	ldw	r8,-8(r16)
800884cc:	22400204 	addi	r9,r4,8
800884d0:	320dc83a 	sub	r6,r6,r8
800884d4:	31c00217 	ldw	r7,8(r6)
800884d8:	1205883a 	add	r2,r2,r8
800884dc:	3a406526 	beq	r7,r9,80088674 <_free_r+0x208>
800884e0:	32000317 	ldw	r8,12(r6)
800884e4:	3a000315 	stw	r8,12(r7)
800884e8:	41c00215 	stw	r7,8(r8)
800884ec:	28cf883a 	add	r7,r5,r3
800884f0:	39c00117 	ldw	r7,4(r7)
800884f4:	39c0004c 	andi	r7,r7,1
800884f8:	38003a26 	beq	r7,zero,800885e4 <_free_r+0x178>
800884fc:	10c00054 	ori	r3,r2,1
80088500:	30c00115 	stw	r3,4(r6)
80088504:	3087883a 	add	r3,r6,r2
80088508:	18800015 	stw	r2,0(r3)
8008850c:	00c07fc4 	movi	r3,511
80088510:	18801936 	bltu	r3,r2,80088578 <_free_r+0x10c>
80088514:	1004d0fa 	srli	r2,r2,3
80088518:	01c00044 	movi	r7,1
8008851c:	21400117 	ldw	r5,4(r4)
80088520:	10c00044 	addi	r3,r2,1
80088524:	18c7883a 	add	r3,r3,r3
80088528:	1005d0ba 	srai	r2,r2,2
8008852c:	18c7883a 	add	r3,r3,r3
80088530:	18c7883a 	add	r3,r3,r3
80088534:	1907883a 	add	r3,r3,r4
80088538:	3884983a 	sll	r2,r7,r2
8008853c:	19c00017 	ldw	r7,0(r3)
80088540:	1a3ffe04 	addi	r8,r3,-8
80088544:	1144b03a 	or	r2,r2,r5
80088548:	32000315 	stw	r8,12(r6)
8008854c:	31c00215 	stw	r7,8(r6)
80088550:	20800115 	stw	r2,4(r4)
80088554:	19800015 	stw	r6,0(r3)
80088558:	39800315 	stw	r6,12(r7)
8008855c:	8809883a 	mov	r4,r17
80088560:	dfc00217 	ldw	ra,8(sp)
80088564:	dc400117 	ldw	r17,4(sp)
80088568:	dc000017 	ldw	r16,0(sp)
8008856c:	dec00304 	addi	sp,sp,12
80088570:	0091a381 	jmpi	80091a38 <__malloc_unlock>
80088574:	f800283a 	ret
80088578:	100ad27a 	srli	r5,r2,9
8008857c:	00c00104 	movi	r3,4
80088580:	19404a36 	bltu	r3,r5,800886ac <_free_r+0x240>
80088584:	100ad1ba 	srli	r5,r2,6
80088588:	28c00e44 	addi	r3,r5,57
8008858c:	18c7883a 	add	r3,r3,r3
80088590:	29400e04 	addi	r5,r5,56
80088594:	18c7883a 	add	r3,r3,r3
80088598:	18c7883a 	add	r3,r3,r3
8008859c:	1909883a 	add	r4,r3,r4
800885a0:	20c00017 	ldw	r3,0(r4)
800885a4:	01e00274 	movhi	r7,32777
800885a8:	213ffe04 	addi	r4,r4,-8
800885ac:	39dcee04 	addi	r7,r7,29624
800885b0:	20c04426 	beq	r4,r3,800886c4 <_free_r+0x258>
800885b4:	01ffff04 	movi	r7,-4
800885b8:	19400117 	ldw	r5,4(r3)
800885bc:	29ca703a 	and	r5,r5,r7
800885c0:	1140022e 	bgeu	r2,r5,800885cc <_free_r+0x160>
800885c4:	18c00217 	ldw	r3,8(r3)
800885c8:	20fffb1e 	bne	r4,r3,800885b8 <_free_r+0x14c>
800885cc:	19000317 	ldw	r4,12(r3)
800885d0:	31000315 	stw	r4,12(r6)
800885d4:	30c00215 	stw	r3,8(r6)
800885d8:	21800215 	stw	r6,8(r4)
800885dc:	19800315 	stw	r6,12(r3)
800885e0:	003fde06 	br	8008855c <_free_r+0xf0>
800885e4:	29c00217 	ldw	r7,8(r5)
800885e8:	10c5883a 	add	r2,r2,r3
800885ec:	00e00274 	movhi	r3,32777
800885f0:	18dcf004 	addi	r3,r3,29632
800885f4:	38c03b26 	beq	r7,r3,800886e4 <_free_r+0x278>
800885f8:	2a000317 	ldw	r8,12(r5)
800885fc:	11400054 	ori	r5,r2,1
80088600:	3087883a 	add	r3,r6,r2
80088604:	3a000315 	stw	r8,12(r7)
80088608:	41c00215 	stw	r7,8(r8)
8008860c:	31400115 	stw	r5,4(r6)
80088610:	18800015 	stw	r2,0(r3)
80088614:	003fbd06 	br	8008850c <_free_r+0xa0>
80088618:	39c0004c 	andi	r7,r7,1
8008861c:	10c5883a 	add	r2,r2,r3
80088620:	3800071e 	bne	r7,zero,80088640 <_free_r+0x1d4>
80088624:	81fffe17 	ldw	r7,-8(r16)
80088628:	31cdc83a 	sub	r6,r6,r7
8008862c:	30c00317 	ldw	r3,12(r6)
80088630:	31400217 	ldw	r5,8(r6)
80088634:	11c5883a 	add	r2,r2,r7
80088638:	28c00315 	stw	r3,12(r5)
8008863c:	19400215 	stw	r5,8(r3)
80088640:	10c00054 	ori	r3,r2,1
80088644:	30c00115 	stw	r3,4(r6)
80088648:	00e002b4 	movhi	r3,32778
8008864c:	18e31504 	addi	r3,r3,-29612
80088650:	18c00017 	ldw	r3,0(r3)
80088654:	21800215 	stw	r6,8(r4)
80088658:	10ffc036 	bltu	r2,r3,8008855c <_free_r+0xf0>
8008865c:	00a002b4 	movhi	r2,32778
80088660:	10aa8804 	addi	r2,r2,-21984
80088664:	11400017 	ldw	r5,0(r2)
80088668:	8809883a 	mov	r4,r17
8008866c:	00883480 	call	80088348 <_malloc_trim_r>
80088670:	003fba06 	br	8008855c <_free_r+0xf0>
80088674:	28c9883a 	add	r4,r5,r3
80088678:	21000117 	ldw	r4,4(r4)
8008867c:	2100004c 	andi	r4,r4,1
80088680:	2000391e 	bne	r4,zero,80088768 <_free_r+0x2fc>
80088684:	29c00217 	ldw	r7,8(r5)
80088688:	29000317 	ldw	r4,12(r5)
8008868c:	1885883a 	add	r2,r3,r2
80088690:	10c00054 	ori	r3,r2,1
80088694:	39000315 	stw	r4,12(r7)
80088698:	21c00215 	stw	r7,8(r4)
8008869c:	30c00115 	stw	r3,4(r6)
800886a0:	308d883a 	add	r6,r6,r2
800886a4:	30800015 	stw	r2,0(r6)
800886a8:	003fac06 	br	8008855c <_free_r+0xf0>
800886ac:	00c00504 	movi	r3,20
800886b0:	19401536 	bltu	r3,r5,80088708 <_free_r+0x29c>
800886b4:	28c01704 	addi	r3,r5,92
800886b8:	18c7883a 	add	r3,r3,r3
800886bc:	294016c4 	addi	r5,r5,91
800886c0:	003fb406 	br	80088594 <_free_r+0x128>
800886c4:	280bd0ba 	srai	r5,r5,2
800886c8:	00c00044 	movi	r3,1
800886cc:	38800117 	ldw	r2,4(r7)
800886d0:	194a983a 	sll	r5,r3,r5
800886d4:	2007883a 	mov	r3,r4
800886d8:	2884b03a 	or	r2,r5,r2
800886dc:	38800115 	stw	r2,4(r7)
800886e0:	003fbb06 	br	800885d0 <_free_r+0x164>
800886e4:	21800515 	stw	r6,20(r4)
800886e8:	21800415 	stw	r6,16(r4)
800886ec:	10c00054 	ori	r3,r2,1
800886f0:	31c00315 	stw	r7,12(r6)
800886f4:	31c00215 	stw	r7,8(r6)
800886f8:	30c00115 	stw	r3,4(r6)
800886fc:	308d883a 	add	r6,r6,r2
80088700:	30800015 	stw	r2,0(r6)
80088704:	003f9506 	br	8008855c <_free_r+0xf0>
80088708:	00c01504 	movi	r3,84
8008870c:	19400536 	bltu	r3,r5,80088724 <_free_r+0x2b8>
80088710:	100ad33a 	srli	r5,r2,12
80088714:	28c01bc4 	addi	r3,r5,111
80088718:	18c7883a 	add	r3,r3,r3
8008871c:	29401b84 	addi	r5,r5,110
80088720:	003f9c06 	br	80088594 <_free_r+0x128>
80088724:	00c05504 	movi	r3,340
80088728:	19400536 	bltu	r3,r5,80088740 <_free_r+0x2d4>
8008872c:	100ad3fa 	srli	r5,r2,15
80088730:	28c01e04 	addi	r3,r5,120
80088734:	18c7883a 	add	r3,r3,r3
80088738:	29401dc4 	addi	r5,r5,119
8008873c:	003f9506 	br	80088594 <_free_r+0x128>
80088740:	00c15504 	movi	r3,1364
80088744:	19400536 	bltu	r3,r5,8008875c <_free_r+0x2f0>
80088748:	100ad4ba 	srli	r5,r2,18
8008874c:	28c01f44 	addi	r3,r5,125
80088750:	18c7883a 	add	r3,r3,r3
80088754:	29401f04 	addi	r5,r5,124
80088758:	003f8e06 	br	80088594 <_free_r+0x128>
8008875c:	00c03f84 	movi	r3,254
80088760:	01401f84 	movi	r5,126
80088764:	003f8b06 	br	80088594 <_free_r+0x128>
80088768:	10c00054 	ori	r3,r2,1
8008876c:	30c00115 	stw	r3,4(r6)
80088770:	308d883a 	add	r6,r6,r2
80088774:	30800015 	stw	r2,0(r6)
80088778:	003f7806 	br	8008855c <_free_r+0xf0>

8008877c <__sfvwrite_r>:
8008877c:	30800217 	ldw	r2,8(r6)
80088780:	10006726 	beq	r2,zero,80088920 <__sfvwrite_r+0x1a4>
80088784:	28c0030b 	ldhu	r3,12(r5)
80088788:	defff404 	addi	sp,sp,-48
8008878c:	dd400715 	stw	r21,28(sp)
80088790:	dd000615 	stw	r20,24(sp)
80088794:	dc000215 	stw	r16,8(sp)
80088798:	dfc00b15 	stw	ra,44(sp)
8008879c:	df000a15 	stw	fp,40(sp)
800887a0:	ddc00915 	stw	r23,36(sp)
800887a4:	dd800815 	stw	r22,32(sp)
800887a8:	dcc00515 	stw	r19,20(sp)
800887ac:	dc800415 	stw	r18,16(sp)
800887b0:	dc400315 	stw	r17,12(sp)
800887b4:	1880020c 	andi	r2,r3,8
800887b8:	2821883a 	mov	r16,r5
800887bc:	202b883a 	mov	r21,r4
800887c0:	3029883a 	mov	r20,r6
800887c4:	10002726 	beq	r2,zero,80088864 <__sfvwrite_r+0xe8>
800887c8:	28800417 	ldw	r2,16(r5)
800887cc:	10002526 	beq	r2,zero,80088864 <__sfvwrite_r+0xe8>
800887d0:	1880008c 	andi	r2,r3,2
800887d4:	a4400017 	ldw	r17,0(r20)
800887d8:	10002a26 	beq	r2,zero,80088884 <__sfvwrite_r+0x108>
800887dc:	05a00034 	movhi	r22,32768
800887e0:	0027883a 	mov	r19,zero
800887e4:	0025883a 	mov	r18,zero
800887e8:	b5bf0004 	addi	r22,r22,-1024
800887ec:	980d883a 	mov	r6,r19
800887f0:	a809883a 	mov	r4,r21
800887f4:	90004626 	beq	r18,zero,80088910 <__sfvwrite_r+0x194>
800887f8:	900f883a 	mov	r7,r18
800887fc:	b480022e 	bgeu	r22,r18,80088808 <__sfvwrite_r+0x8c>
80088800:	01e00034 	movhi	r7,32768
80088804:	39ff0004 	addi	r7,r7,-1024
80088808:	80800917 	ldw	r2,36(r16)
8008880c:	81400717 	ldw	r5,28(r16)
80088810:	103ee83a 	callr	r2
80088814:	0080570e 	bge	zero,r2,80088974 <__sfvwrite_r+0x1f8>
80088818:	a0c00217 	ldw	r3,8(r20)
8008881c:	98a7883a 	add	r19,r19,r2
80088820:	90a5c83a 	sub	r18,r18,r2
80088824:	1885c83a 	sub	r2,r3,r2
80088828:	a0800215 	stw	r2,8(r20)
8008882c:	103fef1e 	bne	r2,zero,800887ec <__sfvwrite_r+0x70>
80088830:	0005883a 	mov	r2,zero
80088834:	dfc00b17 	ldw	ra,44(sp)
80088838:	df000a17 	ldw	fp,40(sp)
8008883c:	ddc00917 	ldw	r23,36(sp)
80088840:	dd800817 	ldw	r22,32(sp)
80088844:	dd400717 	ldw	r21,28(sp)
80088848:	dd000617 	ldw	r20,24(sp)
8008884c:	dcc00517 	ldw	r19,20(sp)
80088850:	dc800417 	ldw	r18,16(sp)
80088854:	dc400317 	ldw	r17,12(sp)
80088858:	dc000217 	ldw	r16,8(sp)
8008885c:	dec00c04 	addi	sp,sp,48
80088860:	f800283a 	ret
80088864:	800b883a 	mov	r5,r16
80088868:	a809883a 	mov	r4,r21
8008886c:	00863240 	call	80086324 <__swsetup_r>
80088870:	1000eb1e 	bne	r2,zero,80088c20 <__sfvwrite_r+0x4a4>
80088874:	80c0030b 	ldhu	r3,12(r16)
80088878:	a4400017 	ldw	r17,0(r20)
8008887c:	1880008c 	andi	r2,r3,2
80088880:	103fd61e 	bne	r2,zero,800887dc <__sfvwrite_r+0x60>
80088884:	1880004c 	andi	r2,r3,1
80088888:	10003f1e 	bne	r2,zero,80088988 <__sfvwrite_r+0x20c>
8008888c:	0039883a 	mov	fp,zero
80088890:	0025883a 	mov	r18,zero
80088894:	90001a26 	beq	r18,zero,80088900 <__sfvwrite_r+0x184>
80088898:	1880800c 	andi	r2,r3,512
8008889c:	84c00217 	ldw	r19,8(r16)
800888a0:	10002126 	beq	r2,zero,80088928 <__sfvwrite_r+0x1ac>
800888a4:	982f883a 	mov	r23,r19
800888a8:	94c09336 	bltu	r18,r19,80088af8 <__sfvwrite_r+0x37c>
800888ac:	1881200c 	andi	r2,r3,1152
800888b0:	10009e1e 	bne	r2,zero,80088b2c <__sfvwrite_r+0x3b0>
800888b4:	81000017 	ldw	r4,0(r16)
800888b8:	b80d883a 	mov	r6,r23
800888bc:	e00b883a 	mov	r5,fp
800888c0:	0089a900 	call	80089a90 <memmove>
800888c4:	80c00217 	ldw	r3,8(r16)
800888c8:	81000017 	ldw	r4,0(r16)
800888cc:	9005883a 	mov	r2,r18
800888d0:	1ce7c83a 	sub	r19,r3,r19
800888d4:	25cf883a 	add	r7,r4,r23
800888d8:	84c00215 	stw	r19,8(r16)
800888dc:	81c00015 	stw	r7,0(r16)
800888e0:	a0c00217 	ldw	r3,8(r20)
800888e4:	e0b9883a 	add	fp,fp,r2
800888e8:	90a5c83a 	sub	r18,r18,r2
800888ec:	18a7c83a 	sub	r19,r3,r2
800888f0:	a4c00215 	stw	r19,8(r20)
800888f4:	983fce26 	beq	r19,zero,80088830 <__sfvwrite_r+0xb4>
800888f8:	80c0030b 	ldhu	r3,12(r16)
800888fc:	903fe61e 	bne	r18,zero,80088898 <__sfvwrite_r+0x11c>
80088900:	8f000017 	ldw	fp,0(r17)
80088904:	8c800117 	ldw	r18,4(r17)
80088908:	8c400204 	addi	r17,r17,8
8008890c:	003fe106 	br	80088894 <__sfvwrite_r+0x118>
80088910:	8cc00017 	ldw	r19,0(r17)
80088914:	8c800117 	ldw	r18,4(r17)
80088918:	8c400204 	addi	r17,r17,8
8008891c:	003fb306 	br	800887ec <__sfvwrite_r+0x70>
80088920:	0005883a 	mov	r2,zero
80088924:	f800283a 	ret
80088928:	81000017 	ldw	r4,0(r16)
8008892c:	80800417 	ldw	r2,16(r16)
80088930:	11005736 	bltu	r2,r4,80088a90 <__sfvwrite_r+0x314>
80088934:	85c00517 	ldw	r23,20(r16)
80088938:	95c05536 	bltu	r18,r23,80088a90 <__sfvwrite_r+0x314>
8008893c:	00a00034 	movhi	r2,32768
80088940:	10bfffc4 	addi	r2,r2,-1
80088944:	9009883a 	mov	r4,r18
80088948:	1480012e 	bgeu	r2,r18,80088950 <__sfvwrite_r+0x1d4>
8008894c:	1009883a 	mov	r4,r2
80088950:	b80b883a 	mov	r5,r23
80088954:	008f57c0 	call	8008f57c <__divsi3>
80088958:	15cf383a 	mul	r7,r2,r23
8008895c:	81400717 	ldw	r5,28(r16)
80088960:	80800917 	ldw	r2,36(r16)
80088964:	e00d883a 	mov	r6,fp
80088968:	a809883a 	mov	r4,r21
8008896c:	103ee83a 	callr	r2
80088970:	00bfdb16 	blt	zero,r2,800888e0 <__sfvwrite_r+0x164>
80088974:	8080030b 	ldhu	r2,12(r16)
80088978:	10801014 	ori	r2,r2,64
8008897c:	8080030d 	sth	r2,12(r16)
80088980:	00bfffc4 	movi	r2,-1
80088984:	003fab06 	br	80088834 <__sfvwrite_r+0xb8>
80088988:	0027883a 	mov	r19,zero
8008898c:	0011883a 	mov	r8,zero
80088990:	0039883a 	mov	fp,zero
80088994:	0025883a 	mov	r18,zero
80088998:	90001f26 	beq	r18,zero,80088a18 <__sfvwrite_r+0x29c>
8008899c:	40005a26 	beq	r8,zero,80088b08 <__sfvwrite_r+0x38c>
800889a0:	982d883a 	mov	r22,r19
800889a4:	94c0012e 	bgeu	r18,r19,800889ac <__sfvwrite_r+0x230>
800889a8:	902d883a 	mov	r22,r18
800889ac:	81000017 	ldw	r4,0(r16)
800889b0:	80800417 	ldw	r2,16(r16)
800889b4:	b02f883a 	mov	r23,r22
800889b8:	81c00517 	ldw	r7,20(r16)
800889bc:	1100032e 	bgeu	r2,r4,800889cc <__sfvwrite_r+0x250>
800889c0:	80c00217 	ldw	r3,8(r16)
800889c4:	38c7883a 	add	r3,r7,r3
800889c8:	1d801816 	blt	r3,r22,80088a2c <__sfvwrite_r+0x2b0>
800889cc:	b1c03e16 	blt	r22,r7,80088ac8 <__sfvwrite_r+0x34c>
800889d0:	80800917 	ldw	r2,36(r16)
800889d4:	81400717 	ldw	r5,28(r16)
800889d8:	e00d883a 	mov	r6,fp
800889dc:	da000115 	stw	r8,4(sp)
800889e0:	a809883a 	mov	r4,r21
800889e4:	103ee83a 	callr	r2
800889e8:	102f883a 	mov	r23,r2
800889ec:	da000117 	ldw	r8,4(sp)
800889f0:	00bfe00e 	bge	zero,r2,80088974 <__sfvwrite_r+0x1f8>
800889f4:	9de7c83a 	sub	r19,r19,r23
800889f8:	98001f26 	beq	r19,zero,80088a78 <__sfvwrite_r+0x2fc>
800889fc:	a0800217 	ldw	r2,8(r20)
80088a00:	e5f9883a 	add	fp,fp,r23
80088a04:	95e5c83a 	sub	r18,r18,r23
80088a08:	15efc83a 	sub	r23,r2,r23
80088a0c:	a5c00215 	stw	r23,8(r20)
80088a10:	b83f8726 	beq	r23,zero,80088830 <__sfvwrite_r+0xb4>
80088a14:	903fe11e 	bne	r18,zero,8008899c <__sfvwrite_r+0x220>
80088a18:	8f000017 	ldw	fp,0(r17)
80088a1c:	8c800117 	ldw	r18,4(r17)
80088a20:	0011883a 	mov	r8,zero
80088a24:	8c400204 	addi	r17,r17,8
80088a28:	003fdb06 	br	80088998 <__sfvwrite_r+0x21c>
80088a2c:	180d883a 	mov	r6,r3
80088a30:	e00b883a 	mov	r5,fp
80088a34:	da000115 	stw	r8,4(sp)
80088a38:	d8c00015 	stw	r3,0(sp)
80088a3c:	0089a900 	call	80089a90 <memmove>
80088a40:	d8c00017 	ldw	r3,0(sp)
80088a44:	80800017 	ldw	r2,0(r16)
80088a48:	800b883a 	mov	r5,r16
80088a4c:	a809883a 	mov	r4,r21
80088a50:	10c5883a 	add	r2,r2,r3
80088a54:	80800015 	stw	r2,0(r16)
80088a58:	d8c00015 	stw	r3,0(sp)
80088a5c:	0087f1c0 	call	80087f1c <_fflush_r>
80088a60:	d8c00017 	ldw	r3,0(sp)
80088a64:	da000117 	ldw	r8,4(sp)
80088a68:	103fc21e 	bne	r2,zero,80088974 <__sfvwrite_r+0x1f8>
80088a6c:	182f883a 	mov	r23,r3
80088a70:	9de7c83a 	sub	r19,r19,r23
80088a74:	983fe11e 	bne	r19,zero,800889fc <__sfvwrite_r+0x280>
80088a78:	800b883a 	mov	r5,r16
80088a7c:	a809883a 	mov	r4,r21
80088a80:	0087f1c0 	call	80087f1c <_fflush_r>
80088a84:	103fbb1e 	bne	r2,zero,80088974 <__sfvwrite_r+0x1f8>
80088a88:	0011883a 	mov	r8,zero
80088a8c:	003fdb06 	br	800889fc <__sfvwrite_r+0x280>
80088a90:	94c0012e 	bgeu	r18,r19,80088a98 <__sfvwrite_r+0x31c>
80088a94:	9027883a 	mov	r19,r18
80088a98:	980d883a 	mov	r6,r19
80088a9c:	e00b883a 	mov	r5,fp
80088aa0:	0089a900 	call	80089a90 <memmove>
80088aa4:	80800217 	ldw	r2,8(r16)
80088aa8:	80c00017 	ldw	r3,0(r16)
80088aac:	14c5c83a 	sub	r2,r2,r19
80088ab0:	1cc7883a 	add	r3,r3,r19
80088ab4:	80800215 	stw	r2,8(r16)
80088ab8:	80c00015 	stw	r3,0(r16)
80088abc:	10004326 	beq	r2,zero,80088bcc <__sfvwrite_r+0x450>
80088ac0:	9805883a 	mov	r2,r19
80088ac4:	003f8606 	br	800888e0 <__sfvwrite_r+0x164>
80088ac8:	b00d883a 	mov	r6,r22
80088acc:	e00b883a 	mov	r5,fp
80088ad0:	da000115 	stw	r8,4(sp)
80088ad4:	0089a900 	call	80089a90 <memmove>
80088ad8:	80800217 	ldw	r2,8(r16)
80088adc:	80c00017 	ldw	r3,0(r16)
80088ae0:	da000117 	ldw	r8,4(sp)
80088ae4:	1585c83a 	sub	r2,r2,r22
80088ae8:	1dad883a 	add	r22,r3,r22
80088aec:	80800215 	stw	r2,8(r16)
80088af0:	85800015 	stw	r22,0(r16)
80088af4:	003fbf06 	br	800889f4 <__sfvwrite_r+0x278>
80088af8:	81000017 	ldw	r4,0(r16)
80088afc:	9027883a 	mov	r19,r18
80088b00:	902f883a 	mov	r23,r18
80088b04:	003f6c06 	br	800888b8 <__sfvwrite_r+0x13c>
80088b08:	900d883a 	mov	r6,r18
80088b0c:	01400284 	movi	r5,10
80088b10:	e009883a 	mov	r4,fp
80088b14:	00898640 	call	80089864 <memchr>
80088b18:	10003e26 	beq	r2,zero,80088c14 <__sfvwrite_r+0x498>
80088b1c:	10800044 	addi	r2,r2,1
80088b20:	1727c83a 	sub	r19,r2,fp
80088b24:	02000044 	movi	r8,1
80088b28:	003f9d06 	br	800889a0 <__sfvwrite_r+0x224>
80088b2c:	80800517 	ldw	r2,20(r16)
80088b30:	81400417 	ldw	r5,16(r16)
80088b34:	81c00017 	ldw	r7,0(r16)
80088b38:	10a7883a 	add	r19,r2,r2
80088b3c:	9885883a 	add	r2,r19,r2
80088b40:	1026d7fa 	srli	r19,r2,31
80088b44:	396dc83a 	sub	r22,r7,r5
80088b48:	b1000044 	addi	r4,r22,1
80088b4c:	9885883a 	add	r2,r19,r2
80088b50:	1027d07a 	srai	r19,r2,1
80088b54:	2485883a 	add	r2,r4,r18
80088b58:	980d883a 	mov	r6,r19
80088b5c:	9880022e 	bgeu	r19,r2,80088b68 <__sfvwrite_r+0x3ec>
80088b60:	1027883a 	mov	r19,r2
80088b64:	100d883a 	mov	r6,r2
80088b68:	18c1000c 	andi	r3,r3,1024
80088b6c:	18001c26 	beq	r3,zero,80088be0 <__sfvwrite_r+0x464>
80088b70:	300b883a 	mov	r5,r6
80088b74:	a809883a 	mov	r4,r21
80088b78:	00890580 	call	80089058 <_malloc_r>
80088b7c:	102f883a 	mov	r23,r2
80088b80:	10002926 	beq	r2,zero,80088c28 <__sfvwrite_r+0x4ac>
80088b84:	81400417 	ldw	r5,16(r16)
80088b88:	b00d883a 	mov	r6,r22
80088b8c:	1009883a 	mov	r4,r2
80088b90:	00899480 	call	80089948 <memcpy>
80088b94:	8080030b 	ldhu	r2,12(r16)
80088b98:	00fedfc4 	movi	r3,-1153
80088b9c:	10c4703a 	and	r2,r2,r3
80088ba0:	10802014 	ori	r2,r2,128
80088ba4:	8080030d 	sth	r2,12(r16)
80088ba8:	bd89883a 	add	r4,r23,r22
80088bac:	9d8fc83a 	sub	r7,r19,r22
80088bb0:	85c00415 	stw	r23,16(r16)
80088bb4:	84c00515 	stw	r19,20(r16)
80088bb8:	81000015 	stw	r4,0(r16)
80088bbc:	9027883a 	mov	r19,r18
80088bc0:	81c00215 	stw	r7,8(r16)
80088bc4:	902f883a 	mov	r23,r18
80088bc8:	003f3b06 	br	800888b8 <__sfvwrite_r+0x13c>
80088bcc:	800b883a 	mov	r5,r16
80088bd0:	a809883a 	mov	r4,r21
80088bd4:	0087f1c0 	call	80087f1c <_fflush_r>
80088bd8:	103fb926 	beq	r2,zero,80088ac0 <__sfvwrite_r+0x344>
80088bdc:	003f6506 	br	80088974 <__sfvwrite_r+0x1f8>
80088be0:	a809883a 	mov	r4,r21
80088be4:	008ad100 	call	8008ad10 <_realloc_r>
80088be8:	102f883a 	mov	r23,r2
80088bec:	103fee1e 	bne	r2,zero,80088ba8 <__sfvwrite_r+0x42c>
80088bf0:	81400417 	ldw	r5,16(r16)
80088bf4:	a809883a 	mov	r4,r21
80088bf8:	008846c0 	call	8008846c <_free_r>
80088bfc:	8080030b 	ldhu	r2,12(r16)
80088c00:	00ffdfc4 	movi	r3,-129
80088c04:	1884703a 	and	r2,r3,r2
80088c08:	00c00304 	movi	r3,12
80088c0c:	a8c00015 	stw	r3,0(r21)
80088c10:	003f5906 	br	80088978 <__sfvwrite_r+0x1fc>
80088c14:	94c00044 	addi	r19,r18,1
80088c18:	02000044 	movi	r8,1
80088c1c:	003f6006 	br	800889a0 <__sfvwrite_r+0x224>
80088c20:	00bfffc4 	movi	r2,-1
80088c24:	003f0306 	br	80088834 <__sfvwrite_r+0xb8>
80088c28:	00800304 	movi	r2,12
80088c2c:	a8800015 	stw	r2,0(r21)
80088c30:	8080030b 	ldhu	r2,12(r16)
80088c34:	003f5006 	br	80088978 <__sfvwrite_r+0x1fc>

80088c38 <_fwalk>:
80088c38:	defff704 	addi	sp,sp,-36
80088c3c:	dd000415 	stw	r20,16(sp)
80088c40:	dfc00815 	stw	ra,32(sp)
80088c44:	ddc00715 	stw	r23,28(sp)
80088c48:	dd800615 	stw	r22,24(sp)
80088c4c:	dd400515 	stw	r21,20(sp)
80088c50:	dcc00315 	stw	r19,12(sp)
80088c54:	dc800215 	stw	r18,8(sp)
80088c58:	dc400115 	stw	r17,4(sp)
80088c5c:	dc000015 	stw	r16,0(sp)
80088c60:	2500b804 	addi	r20,r4,736
80088c64:	a0002326 	beq	r20,zero,80088cf4 <_fwalk+0xbc>
80088c68:	282b883a 	mov	r21,r5
80088c6c:	002f883a 	mov	r23,zero
80088c70:	05800044 	movi	r22,1
80088c74:	04ffffc4 	movi	r19,-1
80088c78:	a4400117 	ldw	r17,4(r20)
80088c7c:	a4800217 	ldw	r18,8(r20)
80088c80:	8c7fffc4 	addi	r17,r17,-1
80088c84:	88000d16 	blt	r17,zero,80088cbc <_fwalk+0x84>
80088c88:	94000304 	addi	r16,r18,12
80088c8c:	94800384 	addi	r18,r18,14
80088c90:	8080000b 	ldhu	r2,0(r16)
80088c94:	8c7fffc4 	addi	r17,r17,-1
80088c98:	813ffd04 	addi	r4,r16,-12
80088c9c:	b080042e 	bgeu	r22,r2,80088cb0 <_fwalk+0x78>
80088ca0:	9080000f 	ldh	r2,0(r18)
80088ca4:	14c00226 	beq	r2,r19,80088cb0 <_fwalk+0x78>
80088ca8:	a83ee83a 	callr	r21
80088cac:	b8aeb03a 	or	r23,r23,r2
80088cb0:	84001a04 	addi	r16,r16,104
80088cb4:	94801a04 	addi	r18,r18,104
80088cb8:	8cfff51e 	bne	r17,r19,80088c90 <_fwalk+0x58>
80088cbc:	a5000017 	ldw	r20,0(r20)
80088cc0:	a03fed1e 	bne	r20,zero,80088c78 <_fwalk+0x40>
80088cc4:	b805883a 	mov	r2,r23
80088cc8:	dfc00817 	ldw	ra,32(sp)
80088ccc:	ddc00717 	ldw	r23,28(sp)
80088cd0:	dd800617 	ldw	r22,24(sp)
80088cd4:	dd400517 	ldw	r21,20(sp)
80088cd8:	dd000417 	ldw	r20,16(sp)
80088cdc:	dcc00317 	ldw	r19,12(sp)
80088ce0:	dc800217 	ldw	r18,8(sp)
80088ce4:	dc400117 	ldw	r17,4(sp)
80088ce8:	dc000017 	ldw	r16,0(sp)
80088cec:	dec00904 	addi	sp,sp,36
80088cf0:	f800283a 	ret
80088cf4:	002f883a 	mov	r23,zero
80088cf8:	003ff206 	br	80088cc4 <_fwalk+0x8c>

80088cfc <_fwalk_reent>:
80088cfc:	defff704 	addi	sp,sp,-36
80088d00:	dd000415 	stw	r20,16(sp)
80088d04:	dfc00815 	stw	ra,32(sp)
80088d08:	ddc00715 	stw	r23,28(sp)
80088d0c:	dd800615 	stw	r22,24(sp)
80088d10:	dd400515 	stw	r21,20(sp)
80088d14:	dcc00315 	stw	r19,12(sp)
80088d18:	dc800215 	stw	r18,8(sp)
80088d1c:	dc400115 	stw	r17,4(sp)
80088d20:	dc000015 	stw	r16,0(sp)
80088d24:	2500b804 	addi	r20,r4,736
80088d28:	a0002326 	beq	r20,zero,80088db8 <_fwalk_reent+0xbc>
80088d2c:	282b883a 	mov	r21,r5
80088d30:	2027883a 	mov	r19,r4
80088d34:	002f883a 	mov	r23,zero
80088d38:	05800044 	movi	r22,1
80088d3c:	04bfffc4 	movi	r18,-1
80088d40:	a4400117 	ldw	r17,4(r20)
80088d44:	a4000217 	ldw	r16,8(r20)
80088d48:	8c7fffc4 	addi	r17,r17,-1
80088d4c:	88000c16 	blt	r17,zero,80088d80 <_fwalk_reent+0x84>
80088d50:	84000304 	addi	r16,r16,12
80088d54:	8080000b 	ldhu	r2,0(r16)
80088d58:	8c7fffc4 	addi	r17,r17,-1
80088d5c:	817ffd04 	addi	r5,r16,-12
80088d60:	b080052e 	bgeu	r22,r2,80088d78 <_fwalk_reent+0x7c>
80088d64:	8080008f 	ldh	r2,2(r16)
80088d68:	9809883a 	mov	r4,r19
80088d6c:	14800226 	beq	r2,r18,80088d78 <_fwalk_reent+0x7c>
80088d70:	a83ee83a 	callr	r21
80088d74:	b8aeb03a 	or	r23,r23,r2
80088d78:	84001a04 	addi	r16,r16,104
80088d7c:	8cbff51e 	bne	r17,r18,80088d54 <_fwalk_reent+0x58>
80088d80:	a5000017 	ldw	r20,0(r20)
80088d84:	a03fee1e 	bne	r20,zero,80088d40 <_fwalk_reent+0x44>
80088d88:	b805883a 	mov	r2,r23
80088d8c:	dfc00817 	ldw	ra,32(sp)
80088d90:	ddc00717 	ldw	r23,28(sp)
80088d94:	dd800617 	ldw	r22,24(sp)
80088d98:	dd400517 	ldw	r21,20(sp)
80088d9c:	dd000417 	ldw	r20,16(sp)
80088da0:	dcc00317 	ldw	r19,12(sp)
80088da4:	dc800217 	ldw	r18,8(sp)
80088da8:	dc400117 	ldw	r17,4(sp)
80088dac:	dc000017 	ldw	r16,0(sp)
80088db0:	dec00904 	addi	sp,sp,36
80088db4:	f800283a 	ret
80088db8:	002f883a 	mov	r23,zero
80088dbc:	003ff206 	br	80088d88 <_fwalk_reent+0x8c>

80088dc0 <_setlocale_r>:
80088dc0:	30001b26 	beq	r6,zero,80088e30 <_setlocale_r+0x70>
80088dc4:	01600274 	movhi	r5,32777
80088dc8:	defffe04 	addi	sp,sp,-8
80088dcc:	295aa704 	addi	r5,r5,27292
80088dd0:	3009883a 	mov	r4,r6
80088dd4:	dc000015 	stw	r16,0(sp)
80088dd8:	dfc00115 	stw	ra,4(sp)
80088ddc:	3021883a 	mov	r16,r6
80088de0:	008b6680 	call	8008b668 <strcmp>
80088de4:	1000061e 	bne	r2,zero,80088e00 <_setlocale_r+0x40>
80088de8:	00a00274 	movhi	r2,32777
80088dec:	109a8004 	addi	r2,r2,27136
80088df0:	dfc00117 	ldw	ra,4(sp)
80088df4:	dc000017 	ldw	r16,0(sp)
80088df8:	dec00204 	addi	sp,sp,8
80088dfc:	f800283a 	ret
80088e00:	01600274 	movhi	r5,32777
80088e04:	295a8004 	addi	r5,r5,27136
80088e08:	8009883a 	mov	r4,r16
80088e0c:	008b6680 	call	8008b668 <strcmp>
80088e10:	103ff526 	beq	r2,zero,80088de8 <_setlocale_r+0x28>
80088e14:	01600274 	movhi	r5,32777
80088e18:	295a3404 	addi	r5,r5,26832
80088e1c:	8009883a 	mov	r4,r16
80088e20:	008b6680 	call	8008b668 <strcmp>
80088e24:	103ff026 	beq	r2,zero,80088de8 <_setlocale_r+0x28>
80088e28:	0005883a 	mov	r2,zero
80088e2c:	003ff006 	br	80088df0 <_setlocale_r+0x30>
80088e30:	00a00274 	movhi	r2,32777
80088e34:	109a8004 	addi	r2,r2,27136
80088e38:	f800283a 	ret

80088e3c <__locale_charset>:
80088e3c:	00a00274 	movhi	r2,32777
80088e40:	109cd804 	addi	r2,r2,29536
80088e44:	f800283a 	ret

80088e48 <__locale_mb_cur_max>:
80088e48:	00a002b4 	movhi	r2,32778
80088e4c:	10a31304 	addi	r2,r2,-29620
80088e50:	10800017 	ldw	r2,0(r2)
80088e54:	f800283a 	ret

80088e58 <__locale_msgcharset>:
80088e58:	00a00274 	movhi	r2,32777
80088e5c:	109cd004 	addi	r2,r2,29504
80088e60:	f800283a 	ret

80088e64 <__locale_cjk_lang>:
80088e64:	0005883a 	mov	r2,zero
80088e68:	f800283a 	ret

80088e6c <_localeconv_r>:
80088e6c:	00a00274 	movhi	r2,32777
80088e70:	109ce004 	addi	r2,r2,29568
80088e74:	f800283a 	ret

80088e78 <setlocale>:
80088e78:	00a002b4 	movhi	r2,32778
80088e7c:	10a31204 	addi	r2,r2,-29624
80088e80:	280d883a 	mov	r6,r5
80088e84:	200b883a 	mov	r5,r4
80088e88:	11000017 	ldw	r4,0(r2)
80088e8c:	0088dc01 	jmpi	80088dc0 <_setlocale_r>

80088e90 <localeconv>:
80088e90:	00a00274 	movhi	r2,32777
80088e94:	109ce004 	addi	r2,r2,29568
80088e98:	f800283a 	ret

80088e9c <__smakebuf_r>:
80088e9c:	2880030b 	ldhu	r2,12(r5)
80088ea0:	10c0008c 	andi	r3,r2,2
80088ea4:	1800411e 	bne	r3,zero,80088fac <__smakebuf_r+0x110>
80088ea8:	deffec04 	addi	sp,sp,-80
80088eac:	dc000f15 	stw	r16,60(sp)
80088eb0:	2821883a 	mov	r16,r5
80088eb4:	2940038f 	ldh	r5,14(r5)
80088eb8:	dc401015 	stw	r17,64(sp)
80088ebc:	dfc01315 	stw	ra,76(sp)
80088ec0:	dcc01215 	stw	r19,72(sp)
80088ec4:	dc801115 	stw	r18,68(sp)
80088ec8:	2023883a 	mov	r17,r4
80088ecc:	28001c16 	blt	r5,zero,80088f40 <__smakebuf_r+0xa4>
80088ed0:	d80d883a 	mov	r6,sp
80088ed4:	008e61c0 	call	8008e61c <_fstat_r>
80088ed8:	10001816 	blt	r2,zero,80088f3c <__smakebuf_r+0xa0>
80088edc:	d8800117 	ldw	r2,4(sp)
80088ee0:	00e00014 	movui	r3,32768
80088ee4:	10bc000c 	andi	r2,r2,61440
80088ee8:	14c80020 	cmpeqi	r19,r2,8192
80088eec:	10c03726 	beq	r2,r3,80088fcc <__smakebuf_r+0x130>
80088ef0:	80c0030b 	ldhu	r3,12(r16)
80088ef4:	18c20014 	ori	r3,r3,2048
80088ef8:	80c0030d 	sth	r3,12(r16)
80088efc:	00c80004 	movi	r3,8192
80088f00:	10c0521e 	bne	r2,r3,8008904c <__smakebuf_r+0x1b0>
80088f04:	8140038f 	ldh	r5,14(r16)
80088f08:	8809883a 	mov	r4,r17
80088f0c:	008e6780 	call	8008e678 <_isatty_r>
80088f10:	10004c26 	beq	r2,zero,80089044 <__smakebuf_r+0x1a8>
80088f14:	8080030b 	ldhu	r2,12(r16)
80088f18:	80c010c4 	addi	r3,r16,67
80088f1c:	80c00015 	stw	r3,0(r16)
80088f20:	10800054 	ori	r2,r2,1
80088f24:	8080030d 	sth	r2,12(r16)
80088f28:	00800044 	movi	r2,1
80088f2c:	80c00415 	stw	r3,16(r16)
80088f30:	80800515 	stw	r2,20(r16)
80088f34:	04810004 	movi	r18,1024
80088f38:	00000706 	br	80088f58 <__smakebuf_r+0xbc>
80088f3c:	8080030b 	ldhu	r2,12(r16)
80088f40:	10c0200c 	andi	r3,r2,128
80088f44:	18001f1e 	bne	r3,zero,80088fc4 <__smakebuf_r+0x128>
80088f48:	04810004 	movi	r18,1024
80088f4c:	10820014 	ori	r2,r2,2048
80088f50:	8080030d 	sth	r2,12(r16)
80088f54:	0027883a 	mov	r19,zero
80088f58:	900b883a 	mov	r5,r18
80088f5c:	8809883a 	mov	r4,r17
80088f60:	00890580 	call	80089058 <_malloc_r>
80088f64:	10002c26 	beq	r2,zero,80089018 <__smakebuf_r+0x17c>
80088f68:	80c0030b 	ldhu	r3,12(r16)
80088f6c:	01200234 	movhi	r4,32776
80088f70:	211fec04 	addi	r4,r4,32688
80088f74:	89000f15 	stw	r4,60(r17)
80088f78:	18c02014 	ori	r3,r3,128
80088f7c:	80c0030d 	sth	r3,12(r16)
80088f80:	80800015 	stw	r2,0(r16)
80088f84:	80800415 	stw	r2,16(r16)
80088f88:	84800515 	stw	r18,20(r16)
80088f8c:	98001a1e 	bne	r19,zero,80088ff8 <__smakebuf_r+0x15c>
80088f90:	dfc01317 	ldw	ra,76(sp)
80088f94:	dcc01217 	ldw	r19,72(sp)
80088f98:	dc801117 	ldw	r18,68(sp)
80088f9c:	dc401017 	ldw	r17,64(sp)
80088fa0:	dc000f17 	ldw	r16,60(sp)
80088fa4:	dec01404 	addi	sp,sp,80
80088fa8:	f800283a 	ret
80088fac:	288010c4 	addi	r2,r5,67
80088fb0:	28800015 	stw	r2,0(r5)
80088fb4:	28800415 	stw	r2,16(r5)
80088fb8:	00800044 	movi	r2,1
80088fbc:	28800515 	stw	r2,20(r5)
80088fc0:	f800283a 	ret
80088fc4:	04801004 	movi	r18,64
80088fc8:	003fe006 	br	80088f4c <__smakebuf_r+0xb0>
80088fcc:	81000a17 	ldw	r4,40(r16)
80088fd0:	00e00274 	movhi	r3,32777
80088fd4:	18ed8104 	addi	r3,r3,-18940
80088fd8:	20ffc51e 	bne	r4,r3,80088ef0 <__smakebuf_r+0x54>
80088fdc:	8080030b 	ldhu	r2,12(r16)
80088fe0:	04810004 	movi	r18,1024
80088fe4:	84801315 	stw	r18,76(r16)
80088fe8:	1484b03a 	or	r2,r2,r18
80088fec:	8080030d 	sth	r2,12(r16)
80088ff0:	0027883a 	mov	r19,zero
80088ff4:	003fd806 	br	80088f58 <__smakebuf_r+0xbc>
80088ff8:	8140038f 	ldh	r5,14(r16)
80088ffc:	8809883a 	mov	r4,r17
80089000:	008e6780 	call	8008e678 <_isatty_r>
80089004:	103fe226 	beq	r2,zero,80088f90 <__smakebuf_r+0xf4>
80089008:	8080030b 	ldhu	r2,12(r16)
8008900c:	10800054 	ori	r2,r2,1
80089010:	8080030d 	sth	r2,12(r16)
80089014:	003fde06 	br	80088f90 <__smakebuf_r+0xf4>
80089018:	8080030b 	ldhu	r2,12(r16)
8008901c:	10c0800c 	andi	r3,r2,512
80089020:	183fdb1e 	bne	r3,zero,80088f90 <__smakebuf_r+0xf4>
80089024:	10800094 	ori	r2,r2,2
80089028:	80c010c4 	addi	r3,r16,67
8008902c:	8080030d 	sth	r2,12(r16)
80089030:	00800044 	movi	r2,1
80089034:	80c00015 	stw	r3,0(r16)
80089038:	80c00415 	stw	r3,16(r16)
8008903c:	80800515 	stw	r2,20(r16)
80089040:	003fd306 	br	80088f90 <__smakebuf_r+0xf4>
80089044:	04810004 	movi	r18,1024
80089048:	003fc306 	br	80088f58 <__smakebuf_r+0xbc>
8008904c:	0027883a 	mov	r19,zero
80089050:	04810004 	movi	r18,1024
80089054:	003fc006 	br	80088f58 <__smakebuf_r+0xbc>

80089058 <_malloc_r>:
80089058:	defff504 	addi	sp,sp,-44
8008905c:	dc800315 	stw	r18,12(sp)
80089060:	dfc00a15 	stw	ra,40(sp)
80089064:	df000915 	stw	fp,36(sp)
80089068:	ddc00815 	stw	r23,32(sp)
8008906c:	dd800715 	stw	r22,28(sp)
80089070:	dd400615 	stw	r21,24(sp)
80089074:	dd000515 	stw	r20,20(sp)
80089078:	dcc00415 	stw	r19,16(sp)
8008907c:	dc400215 	stw	r17,8(sp)
80089080:	dc000115 	stw	r16,4(sp)
80089084:	288002c4 	addi	r2,r5,11
80089088:	00c00584 	movi	r3,22
8008908c:	2025883a 	mov	r18,r4
80089090:	18807f2e 	bgeu	r3,r2,80089290 <_malloc_r+0x238>
80089094:	047ffe04 	movi	r17,-8
80089098:	1462703a 	and	r17,r2,r17
8008909c:	8800a316 	blt	r17,zero,8008932c <_malloc_r+0x2d4>
800890a0:	8940a236 	bltu	r17,r5,8008932c <_malloc_r+0x2d4>
800890a4:	0091a140 	call	80091a14 <__malloc_lock>
800890a8:	00807dc4 	movi	r2,503
800890ac:	1441e92e 	bgeu	r2,r17,80089854 <_malloc_r+0x7fc>
800890b0:	8804d27a 	srli	r2,r17,9
800890b4:	1000a126 	beq	r2,zero,8008933c <_malloc_r+0x2e4>
800890b8:	00c00104 	movi	r3,4
800890bc:	18811e36 	bltu	r3,r2,80089538 <_malloc_r+0x4e0>
800890c0:	8804d1ba 	srli	r2,r17,6
800890c4:	12000e44 	addi	r8,r2,57
800890c8:	11c00e04 	addi	r7,r2,56
800890cc:	4209883a 	add	r4,r8,r8
800890d0:	04e00274 	movhi	r19,32777
800890d4:	2109883a 	add	r4,r4,r4
800890d8:	9cdcee04 	addi	r19,r19,29624
800890dc:	2109883a 	add	r4,r4,r4
800890e0:	9909883a 	add	r4,r19,r4
800890e4:	24000117 	ldw	r16,4(r4)
800890e8:	213ffe04 	addi	r4,r4,-8
800890ec:	24009726 	beq	r4,r16,8008934c <_malloc_r+0x2f4>
800890f0:	80800117 	ldw	r2,4(r16)
800890f4:	01bfff04 	movi	r6,-4
800890f8:	014003c4 	movi	r5,15
800890fc:	1184703a 	and	r2,r2,r6
80089100:	1447c83a 	sub	r3,r2,r17
80089104:	28c00716 	blt	r5,r3,80089124 <_malloc_r+0xcc>
80089108:	1800920e 	bge	r3,zero,80089354 <_malloc_r+0x2fc>
8008910c:	84000317 	ldw	r16,12(r16)
80089110:	24008e26 	beq	r4,r16,8008934c <_malloc_r+0x2f4>
80089114:	80800117 	ldw	r2,4(r16)
80089118:	1184703a 	and	r2,r2,r6
8008911c:	1447c83a 	sub	r3,r2,r17
80089120:	28fff90e 	bge	r5,r3,80089108 <_malloc_r+0xb0>
80089124:	3809883a 	mov	r4,r7
80089128:	01a00274 	movhi	r6,32777
8008912c:	9c000417 	ldw	r16,16(r19)
80089130:	319cee04 	addi	r6,r6,29624
80089134:	32000204 	addi	r8,r6,8
80089138:	82013426 	beq	r16,r8,8008960c <_malloc_r+0x5b4>
8008913c:	80c00117 	ldw	r3,4(r16)
80089140:	00bfff04 	movi	r2,-4
80089144:	188e703a 	and	r7,r3,r2
80089148:	3c45c83a 	sub	r2,r7,r17
8008914c:	00c003c4 	movi	r3,15
80089150:	18811f16 	blt	r3,r2,800895d0 <_malloc_r+0x578>
80089154:	32000515 	stw	r8,20(r6)
80089158:	32000415 	stw	r8,16(r6)
8008915c:	10007f0e 	bge	r2,zero,8008935c <_malloc_r+0x304>
80089160:	00807fc4 	movi	r2,511
80089164:	11c0fd36 	bltu	r2,r7,8008955c <_malloc_r+0x504>
80089168:	3806d0fa 	srli	r3,r7,3
8008916c:	01c00044 	movi	r7,1
80089170:	30800117 	ldw	r2,4(r6)
80089174:	19400044 	addi	r5,r3,1
80089178:	294b883a 	add	r5,r5,r5
8008917c:	1807d0ba 	srai	r3,r3,2
80089180:	294b883a 	add	r5,r5,r5
80089184:	294b883a 	add	r5,r5,r5
80089188:	298b883a 	add	r5,r5,r6
8008918c:	38c6983a 	sll	r3,r7,r3
80089190:	29c00017 	ldw	r7,0(r5)
80089194:	2a7ffe04 	addi	r9,r5,-8
80089198:	1886b03a 	or	r3,r3,r2
8008919c:	82400315 	stw	r9,12(r16)
800891a0:	81c00215 	stw	r7,8(r16)
800891a4:	30c00115 	stw	r3,4(r6)
800891a8:	2c000015 	stw	r16,0(r5)
800891ac:	3c000315 	stw	r16,12(r7)
800891b0:	2005d0ba 	srai	r2,r4,2
800891b4:	01400044 	movi	r5,1
800891b8:	288a983a 	sll	r5,r5,r2
800891bc:	19406f36 	bltu	r3,r5,8008937c <_malloc_r+0x324>
800891c0:	28c4703a 	and	r2,r5,r3
800891c4:	10000a1e 	bne	r2,zero,800891f0 <_malloc_r+0x198>
800891c8:	00bfff04 	movi	r2,-4
800891cc:	294b883a 	add	r5,r5,r5
800891d0:	2088703a 	and	r4,r4,r2
800891d4:	28c4703a 	and	r2,r5,r3
800891d8:	21000104 	addi	r4,r4,4
800891dc:	1000041e 	bne	r2,zero,800891f0 <_malloc_r+0x198>
800891e0:	294b883a 	add	r5,r5,r5
800891e4:	28c4703a 	and	r2,r5,r3
800891e8:	21000104 	addi	r4,r4,4
800891ec:	103ffc26 	beq	r2,zero,800891e0 <_malloc_r+0x188>
800891f0:	02bfff04 	movi	r10,-4
800891f4:	024003c4 	movi	r9,15
800891f8:	21800044 	addi	r6,r4,1
800891fc:	318d883a 	add	r6,r6,r6
80089200:	318d883a 	add	r6,r6,r6
80089204:	318d883a 	add	r6,r6,r6
80089208:	998d883a 	add	r6,r19,r6
8008920c:	333ffe04 	addi	r12,r6,-8
80089210:	2017883a 	mov	r11,r4
80089214:	31800104 	addi	r6,r6,4
80089218:	34000017 	ldw	r16,0(r6)
8008921c:	31fffd04 	addi	r7,r6,-12
80089220:	81c0041e 	bne	r16,r7,80089234 <_malloc_r+0x1dc>
80089224:	0000fb06 	br	80089614 <_malloc_r+0x5bc>
80089228:	1801030e 	bge	r3,zero,80089638 <_malloc_r+0x5e0>
8008922c:	84000317 	ldw	r16,12(r16)
80089230:	81c0f826 	beq	r16,r7,80089614 <_malloc_r+0x5bc>
80089234:	80800117 	ldw	r2,4(r16)
80089238:	1284703a 	and	r2,r2,r10
8008923c:	1447c83a 	sub	r3,r2,r17
80089240:	48fff90e 	bge	r9,r3,80089228 <_malloc_r+0x1d0>
80089244:	80800317 	ldw	r2,12(r16)
80089248:	81000217 	ldw	r4,8(r16)
8008924c:	89400054 	ori	r5,r17,1
80089250:	81400115 	stw	r5,4(r16)
80089254:	20800315 	stw	r2,12(r4)
80089258:	11000215 	stw	r4,8(r2)
8008925c:	8463883a 	add	r17,r16,r17
80089260:	9c400515 	stw	r17,20(r19)
80089264:	9c400415 	stw	r17,16(r19)
80089268:	18800054 	ori	r2,r3,1
8008926c:	88800115 	stw	r2,4(r17)
80089270:	8a000315 	stw	r8,12(r17)
80089274:	8a000215 	stw	r8,8(r17)
80089278:	88e3883a 	add	r17,r17,r3
8008927c:	88c00015 	stw	r3,0(r17)
80089280:	9009883a 	mov	r4,r18
80089284:	0091a380 	call	80091a38 <__malloc_unlock>
80089288:	80800204 	addi	r2,r16,8
8008928c:	00001b06 	br	800892fc <_malloc_r+0x2a4>
80089290:	04400404 	movi	r17,16
80089294:	89402536 	bltu	r17,r5,8008932c <_malloc_r+0x2d4>
80089298:	0091a140 	call	80091a14 <__malloc_lock>
8008929c:	00800184 	movi	r2,6
800892a0:	01000084 	movi	r4,2
800892a4:	04e00274 	movhi	r19,32777
800892a8:	1085883a 	add	r2,r2,r2
800892ac:	9cdcee04 	addi	r19,r19,29624
800892b0:	1085883a 	add	r2,r2,r2
800892b4:	9885883a 	add	r2,r19,r2
800892b8:	14000117 	ldw	r16,4(r2)
800892bc:	10fffe04 	addi	r3,r2,-8
800892c0:	80c0d926 	beq	r16,r3,80089628 <_malloc_r+0x5d0>
800892c4:	80c00117 	ldw	r3,4(r16)
800892c8:	81000317 	ldw	r4,12(r16)
800892cc:	00bfff04 	movi	r2,-4
800892d0:	1884703a 	and	r2,r3,r2
800892d4:	81400217 	ldw	r5,8(r16)
800892d8:	8085883a 	add	r2,r16,r2
800892dc:	10c00117 	ldw	r3,4(r2)
800892e0:	29000315 	stw	r4,12(r5)
800892e4:	21400215 	stw	r5,8(r4)
800892e8:	18c00054 	ori	r3,r3,1
800892ec:	10c00115 	stw	r3,4(r2)
800892f0:	9009883a 	mov	r4,r18
800892f4:	0091a380 	call	80091a38 <__malloc_unlock>
800892f8:	80800204 	addi	r2,r16,8
800892fc:	dfc00a17 	ldw	ra,40(sp)
80089300:	df000917 	ldw	fp,36(sp)
80089304:	ddc00817 	ldw	r23,32(sp)
80089308:	dd800717 	ldw	r22,28(sp)
8008930c:	dd400617 	ldw	r21,24(sp)
80089310:	dd000517 	ldw	r20,20(sp)
80089314:	dcc00417 	ldw	r19,16(sp)
80089318:	dc800317 	ldw	r18,12(sp)
8008931c:	dc400217 	ldw	r17,8(sp)
80089320:	dc000117 	ldw	r16,4(sp)
80089324:	dec00b04 	addi	sp,sp,44
80089328:	f800283a 	ret
8008932c:	00800304 	movi	r2,12
80089330:	90800015 	stw	r2,0(r18)
80089334:	0005883a 	mov	r2,zero
80089338:	003ff006 	br	800892fc <_malloc_r+0x2a4>
8008933c:	01002004 	movi	r4,128
80089340:	02001004 	movi	r8,64
80089344:	01c00fc4 	movi	r7,63
80089348:	003f6106 	br	800890d0 <_malloc_r+0x78>
8008934c:	4009883a 	mov	r4,r8
80089350:	003f7506 	br	80089128 <_malloc_r+0xd0>
80089354:	81000317 	ldw	r4,12(r16)
80089358:	003fde06 	br	800892d4 <_malloc_r+0x27c>
8008935c:	81c5883a 	add	r2,r16,r7
80089360:	11400117 	ldw	r5,4(r2)
80089364:	9009883a 	mov	r4,r18
80089368:	29400054 	ori	r5,r5,1
8008936c:	11400115 	stw	r5,4(r2)
80089370:	0091a380 	call	80091a38 <__malloc_unlock>
80089374:	80800204 	addi	r2,r16,8
80089378:	003fe006 	br	800892fc <_malloc_r+0x2a4>
8008937c:	9c000217 	ldw	r16,8(r19)
80089380:	00bfff04 	movi	r2,-4
80089384:	85800117 	ldw	r22,4(r16)
80089388:	b0ac703a 	and	r22,r22,r2
8008938c:	b4400336 	bltu	r22,r17,8008939c <_malloc_r+0x344>
80089390:	b445c83a 	sub	r2,r22,r17
80089394:	00c003c4 	movi	r3,15
80089398:	18805d16 	blt	r3,r2,80089510 <_malloc_r+0x4b8>
8008939c:	05e002b4 	movhi	r23,32778
800893a0:	00a002b4 	movhi	r2,32778
800893a4:	10aa8804 	addi	r2,r2,-21984
800893a8:	bde31404 	addi	r23,r23,-29616
800893ac:	15400017 	ldw	r21,0(r2)
800893b0:	b8c00017 	ldw	r3,0(r23)
800893b4:	00bfffc4 	movi	r2,-1
800893b8:	858d883a 	add	r6,r16,r22
800893bc:	8d6b883a 	add	r21,r17,r21
800893c0:	1880ea26 	beq	r3,r2,8008976c <_malloc_r+0x714>
800893c4:	ad4403c4 	addi	r21,r21,4111
800893c8:	00bc0004 	movi	r2,-4096
800893cc:	a8aa703a 	and	r21,r21,r2
800893d0:	a80b883a 	mov	r5,r21
800893d4:	9009883a 	mov	r4,r18
800893d8:	d9800015 	stw	r6,0(sp)
800893dc:	008b4d80 	call	8008b4d8 <_sbrk_r>
800893e0:	1029883a 	mov	r20,r2
800893e4:	00bfffc4 	movi	r2,-1
800893e8:	d9800017 	ldw	r6,0(sp)
800893ec:	a080e826 	beq	r20,r2,80089790 <_malloc_r+0x738>
800893f0:	a180a636 	bltu	r20,r6,8008968c <_malloc_r+0x634>
800893f4:	072002b4 	movhi	fp,32778
800893f8:	e72a9104 	addi	fp,fp,-21948
800893fc:	e0800017 	ldw	r2,0(fp)
80089400:	a887883a 	add	r3,r21,r2
80089404:	e0c00015 	stw	r3,0(fp)
80089408:	3500e626 	beq	r6,r20,800897a4 <_malloc_r+0x74c>
8008940c:	b9000017 	ldw	r4,0(r23)
80089410:	00bfffc4 	movi	r2,-1
80089414:	2080ee26 	beq	r4,r2,800897d0 <_malloc_r+0x778>
80089418:	a185c83a 	sub	r2,r20,r6
8008941c:	10c5883a 	add	r2,r2,r3
80089420:	e0800015 	stw	r2,0(fp)
80089424:	a0c001cc 	andi	r3,r20,7
80089428:	1800bc26 	beq	r3,zero,8008971c <_malloc_r+0x6c4>
8008942c:	a0e9c83a 	sub	r20,r20,r3
80089430:	00840204 	movi	r2,4104
80089434:	a5000204 	addi	r20,r20,8
80089438:	10c7c83a 	sub	r3,r2,r3
8008943c:	a545883a 	add	r2,r20,r21
80089440:	1083ffcc 	andi	r2,r2,4095
80089444:	18abc83a 	sub	r21,r3,r2
80089448:	a80b883a 	mov	r5,r21
8008944c:	9009883a 	mov	r4,r18
80089450:	008b4d80 	call	8008b4d8 <_sbrk_r>
80089454:	00ffffc4 	movi	r3,-1
80089458:	10c0e126 	beq	r2,r3,800897e0 <_malloc_r+0x788>
8008945c:	1505c83a 	sub	r2,r2,r20
80089460:	1545883a 	add	r2,r2,r21
80089464:	10800054 	ori	r2,r2,1
80089468:	e0c00017 	ldw	r3,0(fp)
8008946c:	9d000215 	stw	r20,8(r19)
80089470:	a0800115 	stw	r2,4(r20)
80089474:	a8c7883a 	add	r3,r21,r3
80089478:	e0c00015 	stw	r3,0(fp)
8008947c:	84c00e26 	beq	r16,r19,800894b8 <_malloc_r+0x460>
80089480:	018003c4 	movi	r6,15
80089484:	3580a72e 	bgeu	r6,r22,80089724 <_malloc_r+0x6cc>
80089488:	81400117 	ldw	r5,4(r16)
8008948c:	013ffe04 	movi	r4,-8
80089490:	b0bffd04 	addi	r2,r22,-12
80089494:	1104703a 	and	r2,r2,r4
80089498:	2900004c 	andi	r4,r5,1
8008949c:	2088b03a 	or	r4,r4,r2
800894a0:	81000115 	stw	r4,4(r16)
800894a4:	01400144 	movi	r5,5
800894a8:	8089883a 	add	r4,r16,r2
800894ac:	21400115 	stw	r5,4(r4)
800894b0:	21400215 	stw	r5,8(r4)
800894b4:	3080cd36 	bltu	r6,r2,800897ec <_malloc_r+0x794>
800894b8:	00a002b4 	movhi	r2,32778
800894bc:	10aa8704 	addi	r2,r2,-21988
800894c0:	11000017 	ldw	r4,0(r2)
800894c4:	20c0012e 	bgeu	r4,r3,800894cc <_malloc_r+0x474>
800894c8:	10c00015 	stw	r3,0(r2)
800894cc:	00a002b4 	movhi	r2,32778
800894d0:	10aa8604 	addi	r2,r2,-21992
800894d4:	11000017 	ldw	r4,0(r2)
800894d8:	9c000217 	ldw	r16,8(r19)
800894dc:	20c0012e 	bgeu	r4,r3,800894e4 <_malloc_r+0x48c>
800894e0:	10c00015 	stw	r3,0(r2)
800894e4:	80c00117 	ldw	r3,4(r16)
800894e8:	00bfff04 	movi	r2,-4
800894ec:	1886703a 	and	r3,r3,r2
800894f0:	1c45c83a 	sub	r2,r3,r17
800894f4:	1c400236 	bltu	r3,r17,80089500 <_malloc_r+0x4a8>
800894f8:	00c003c4 	movi	r3,15
800894fc:	18800416 	blt	r3,r2,80089510 <_malloc_r+0x4b8>
80089500:	9009883a 	mov	r4,r18
80089504:	0091a380 	call	80091a38 <__malloc_unlock>
80089508:	0005883a 	mov	r2,zero
8008950c:	003f7b06 	br	800892fc <_malloc_r+0x2a4>
80089510:	88c00054 	ori	r3,r17,1
80089514:	80c00115 	stw	r3,4(r16)
80089518:	8463883a 	add	r17,r16,r17
8008951c:	10800054 	ori	r2,r2,1
80089520:	9c400215 	stw	r17,8(r19)
80089524:	88800115 	stw	r2,4(r17)
80089528:	9009883a 	mov	r4,r18
8008952c:	0091a380 	call	80091a38 <__malloc_unlock>
80089530:	80800204 	addi	r2,r16,8
80089534:	003f7106 	br	800892fc <_malloc_r+0x2a4>
80089538:	00c00504 	movi	r3,20
8008953c:	18804a2e 	bgeu	r3,r2,80089668 <_malloc_r+0x610>
80089540:	00c01504 	movi	r3,84
80089544:	18806e36 	bltu	r3,r2,80089700 <_malloc_r+0x6a8>
80089548:	8804d33a 	srli	r2,r17,12
8008954c:	12001bc4 	addi	r8,r2,111
80089550:	11c01b84 	addi	r7,r2,110
80089554:	4209883a 	add	r4,r8,r8
80089558:	003edd06 	br	800890d0 <_malloc_r+0x78>
8008955c:	3804d27a 	srli	r2,r7,9
80089560:	00c00104 	movi	r3,4
80089564:	1880442e 	bgeu	r3,r2,80089678 <_malloc_r+0x620>
80089568:	00c00504 	movi	r3,20
8008956c:	18808136 	bltu	r3,r2,80089774 <_malloc_r+0x71c>
80089570:	11401704 	addi	r5,r2,92
80089574:	10c016c4 	addi	r3,r2,91
80089578:	294b883a 	add	r5,r5,r5
8008957c:	294b883a 	add	r5,r5,r5
80089580:	294b883a 	add	r5,r5,r5
80089584:	994b883a 	add	r5,r19,r5
80089588:	28800017 	ldw	r2,0(r5)
8008958c:	01a00274 	movhi	r6,32777
80089590:	297ffe04 	addi	r5,r5,-8
80089594:	319cee04 	addi	r6,r6,29624
80089598:	28806526 	beq	r5,r2,80089730 <_malloc_r+0x6d8>
8008959c:	01bfff04 	movi	r6,-4
800895a0:	10c00117 	ldw	r3,4(r2)
800895a4:	1986703a 	and	r3,r3,r6
800895a8:	38c0022e 	bgeu	r7,r3,800895b4 <_malloc_r+0x55c>
800895ac:	10800217 	ldw	r2,8(r2)
800895b0:	28bffb1e 	bne	r5,r2,800895a0 <_malloc_r+0x548>
800895b4:	11400317 	ldw	r5,12(r2)
800895b8:	98c00117 	ldw	r3,4(r19)
800895bc:	81400315 	stw	r5,12(r16)
800895c0:	80800215 	stw	r2,8(r16)
800895c4:	2c000215 	stw	r16,8(r5)
800895c8:	14000315 	stw	r16,12(r2)
800895cc:	003ef806 	br	800891b0 <_malloc_r+0x158>
800895d0:	88c00054 	ori	r3,r17,1
800895d4:	80c00115 	stw	r3,4(r16)
800895d8:	8463883a 	add	r17,r16,r17
800895dc:	34400515 	stw	r17,20(r6)
800895e0:	34400415 	stw	r17,16(r6)
800895e4:	10c00054 	ori	r3,r2,1
800895e8:	8a000315 	stw	r8,12(r17)
800895ec:	8a000215 	stw	r8,8(r17)
800895f0:	88c00115 	stw	r3,4(r17)
800895f4:	88a3883a 	add	r17,r17,r2
800895f8:	88800015 	stw	r2,0(r17)
800895fc:	9009883a 	mov	r4,r18
80089600:	0091a380 	call	80091a38 <__malloc_unlock>
80089604:	80800204 	addi	r2,r16,8
80089608:	003f3c06 	br	800892fc <_malloc_r+0x2a4>
8008960c:	30c00117 	ldw	r3,4(r6)
80089610:	003ee706 	br	800891b0 <_malloc_r+0x158>
80089614:	5ac00044 	addi	r11,r11,1
80089618:	588000cc 	andi	r2,r11,3
8008961c:	31800204 	addi	r6,r6,8
80089620:	103efd1e 	bne	r2,zero,80089218 <_malloc_r+0x1c0>
80089624:	00002406 	br	800896b8 <_malloc_r+0x660>
80089628:	14000317 	ldw	r16,12(r2)
8008962c:	143f251e 	bne	r2,r16,800892c4 <_malloc_r+0x26c>
80089630:	21000084 	addi	r4,r4,2
80089634:	003ebc06 	br	80089128 <_malloc_r+0xd0>
80089638:	8085883a 	add	r2,r16,r2
8008963c:	10c00117 	ldw	r3,4(r2)
80089640:	81000317 	ldw	r4,12(r16)
80089644:	81400217 	ldw	r5,8(r16)
80089648:	18c00054 	ori	r3,r3,1
8008964c:	10c00115 	stw	r3,4(r2)
80089650:	29000315 	stw	r4,12(r5)
80089654:	21400215 	stw	r5,8(r4)
80089658:	9009883a 	mov	r4,r18
8008965c:	0091a380 	call	80091a38 <__malloc_unlock>
80089660:	80800204 	addi	r2,r16,8
80089664:	003f2506 	br	800892fc <_malloc_r+0x2a4>
80089668:	12001704 	addi	r8,r2,92
8008966c:	11c016c4 	addi	r7,r2,91
80089670:	4209883a 	add	r4,r8,r8
80089674:	003e9606 	br	800890d0 <_malloc_r+0x78>
80089678:	3804d1ba 	srli	r2,r7,6
8008967c:	11400e44 	addi	r5,r2,57
80089680:	10c00e04 	addi	r3,r2,56
80089684:	294b883a 	add	r5,r5,r5
80089688:	003fbc06 	br	8008957c <_malloc_r+0x524>
8008968c:	84ff5926 	beq	r16,r19,800893f4 <_malloc_r+0x39c>
80089690:	00a00274 	movhi	r2,32777
80089694:	109cee04 	addi	r2,r2,29624
80089698:	14000217 	ldw	r16,8(r2)
8008969c:	00bfff04 	movi	r2,-4
800896a0:	80c00117 	ldw	r3,4(r16)
800896a4:	1886703a 	and	r3,r3,r2
800896a8:	003f9106 	br	800894f0 <_malloc_r+0x498>
800896ac:	60800217 	ldw	r2,8(r12)
800896b0:	213fffc4 	addi	r4,r4,-1
800896b4:	1300651e 	bne	r2,r12,8008984c <_malloc_r+0x7f4>
800896b8:	208000cc 	andi	r2,r4,3
800896bc:	633ffe04 	addi	r12,r12,-8
800896c0:	103ffa1e 	bne	r2,zero,800896ac <_malloc_r+0x654>
800896c4:	98800117 	ldw	r2,4(r19)
800896c8:	0146303a 	nor	r3,zero,r5
800896cc:	1884703a 	and	r2,r3,r2
800896d0:	98800115 	stw	r2,4(r19)
800896d4:	294b883a 	add	r5,r5,r5
800896d8:	117f2836 	bltu	r2,r5,8008937c <_malloc_r+0x324>
800896dc:	283f2726 	beq	r5,zero,8008937c <_malloc_r+0x324>
800896e0:	2886703a 	and	r3,r5,r2
800896e4:	5809883a 	mov	r4,r11
800896e8:	183ec31e 	bne	r3,zero,800891f8 <_malloc_r+0x1a0>
800896ec:	294b883a 	add	r5,r5,r5
800896f0:	2886703a 	and	r3,r5,r2
800896f4:	21000104 	addi	r4,r4,4
800896f8:	183ffc26 	beq	r3,zero,800896ec <_malloc_r+0x694>
800896fc:	003ebe06 	br	800891f8 <_malloc_r+0x1a0>
80089700:	00c05504 	movi	r3,340
80089704:	18801236 	bltu	r3,r2,80089750 <_malloc_r+0x6f8>
80089708:	8804d3fa 	srli	r2,r17,15
8008970c:	12001e04 	addi	r8,r2,120
80089710:	11c01dc4 	addi	r7,r2,119
80089714:	4209883a 	add	r4,r8,r8
80089718:	003e6d06 	br	800890d0 <_malloc_r+0x78>
8008971c:	00c40004 	movi	r3,4096
80089720:	003f4606 	br	8008943c <_malloc_r+0x3e4>
80089724:	00800044 	movi	r2,1
80089728:	a0800115 	stw	r2,4(r20)
8008972c:	003f7406 	br	80089500 <_malloc_r+0x4a8>
80089730:	1805d0ba 	srai	r2,r3,2
80089734:	01c00044 	movi	r7,1
80089738:	30c00117 	ldw	r3,4(r6)
8008973c:	388e983a 	sll	r7,r7,r2
80089740:	2805883a 	mov	r2,r5
80089744:	38c6b03a 	or	r3,r7,r3
80089748:	30c00115 	stw	r3,4(r6)
8008974c:	003f9b06 	br	800895bc <_malloc_r+0x564>
80089750:	00c15504 	movi	r3,1364
80089754:	18801a36 	bltu	r3,r2,800897c0 <_malloc_r+0x768>
80089758:	8804d4ba 	srli	r2,r17,18
8008975c:	12001f44 	addi	r8,r2,125
80089760:	11c01f04 	addi	r7,r2,124
80089764:	4209883a 	add	r4,r8,r8
80089768:	003e5906 	br	800890d0 <_malloc_r+0x78>
8008976c:	ad400404 	addi	r21,r21,16
80089770:	003f1706 	br	800893d0 <_malloc_r+0x378>
80089774:	00c01504 	movi	r3,84
80089778:	18802336 	bltu	r3,r2,80089808 <_malloc_r+0x7b0>
8008977c:	3804d33a 	srli	r2,r7,12
80089780:	11401bc4 	addi	r5,r2,111
80089784:	10c01b84 	addi	r3,r2,110
80089788:	294b883a 	add	r5,r5,r5
8008978c:	003f7b06 	br	8008957c <_malloc_r+0x524>
80089790:	9c000217 	ldw	r16,8(r19)
80089794:	00bfff04 	movi	r2,-4
80089798:	80c00117 	ldw	r3,4(r16)
8008979c:	1886703a 	and	r3,r3,r2
800897a0:	003f5306 	br	800894f0 <_malloc_r+0x498>
800897a4:	3083ffcc 	andi	r2,r6,4095
800897a8:	103f181e 	bne	r2,zero,8008940c <_malloc_r+0x3b4>
800897ac:	99000217 	ldw	r4,8(r19)
800897b0:	b545883a 	add	r2,r22,r21
800897b4:	10800054 	ori	r2,r2,1
800897b8:	20800115 	stw	r2,4(r4)
800897bc:	003f3e06 	br	800894b8 <_malloc_r+0x460>
800897c0:	01003f84 	movi	r4,254
800897c4:	02001fc4 	movi	r8,127
800897c8:	01c01f84 	movi	r7,126
800897cc:	003e4006 	br	800890d0 <_malloc_r+0x78>
800897d0:	00a002b4 	movhi	r2,32778
800897d4:	10a31404 	addi	r2,r2,-29616
800897d8:	15000015 	stw	r20,0(r2)
800897dc:	003f1106 	br	80089424 <_malloc_r+0x3cc>
800897e0:	00800044 	movi	r2,1
800897e4:	002b883a 	mov	r21,zero
800897e8:	003f1f06 	br	80089468 <_malloc_r+0x410>
800897ec:	81400204 	addi	r5,r16,8
800897f0:	9009883a 	mov	r4,r18
800897f4:	008846c0 	call	8008846c <_free_r>
800897f8:	00a002b4 	movhi	r2,32778
800897fc:	10aa9104 	addi	r2,r2,-21948
80089800:	10c00017 	ldw	r3,0(r2)
80089804:	003f2c06 	br	800894b8 <_malloc_r+0x460>
80089808:	00c05504 	movi	r3,340
8008980c:	18800536 	bltu	r3,r2,80089824 <_malloc_r+0x7cc>
80089810:	3804d3fa 	srli	r2,r7,15
80089814:	11401e04 	addi	r5,r2,120
80089818:	10c01dc4 	addi	r3,r2,119
8008981c:	294b883a 	add	r5,r5,r5
80089820:	003f5606 	br	8008957c <_malloc_r+0x524>
80089824:	00c15504 	movi	r3,1364
80089828:	18800536 	bltu	r3,r2,80089840 <_malloc_r+0x7e8>
8008982c:	3804d4ba 	srli	r2,r7,18
80089830:	11401f44 	addi	r5,r2,125
80089834:	10c01f04 	addi	r3,r2,124
80089838:	294b883a 	add	r5,r5,r5
8008983c:	003f4f06 	br	8008957c <_malloc_r+0x524>
80089840:	01403f84 	movi	r5,254
80089844:	00c01f84 	movi	r3,126
80089848:	003f4c06 	br	8008957c <_malloc_r+0x524>
8008984c:	98800117 	ldw	r2,4(r19)
80089850:	003fa006 	br	800896d4 <_malloc_r+0x67c>
80089854:	8808d0fa 	srli	r4,r17,3
80089858:	20800044 	addi	r2,r4,1
8008985c:	1085883a 	add	r2,r2,r2
80089860:	003e9006 	br	800892a4 <_malloc_r+0x24c>

80089864 <memchr>:
80089864:	208000cc 	andi	r2,r4,3
80089868:	280f883a 	mov	r7,r5
8008986c:	10003426 	beq	r2,zero,80089940 <memchr+0xdc>
80089870:	30bfffc4 	addi	r2,r6,-1
80089874:	30001a26 	beq	r6,zero,800898e0 <memchr+0x7c>
80089878:	20c00003 	ldbu	r3,0(r4)
8008987c:	29803fcc 	andi	r6,r5,255
80089880:	30c0051e 	bne	r6,r3,80089898 <memchr+0x34>
80089884:	00001806 	br	800898e8 <memchr+0x84>
80089888:	10001526 	beq	r2,zero,800898e0 <memchr+0x7c>
8008988c:	20c00003 	ldbu	r3,0(r4)
80089890:	10bfffc4 	addi	r2,r2,-1
80089894:	30c01426 	beq	r6,r3,800898e8 <memchr+0x84>
80089898:	21000044 	addi	r4,r4,1
8008989c:	20c000cc 	andi	r3,r4,3
800898a0:	183ff91e 	bne	r3,zero,80089888 <memchr+0x24>
800898a4:	020000c4 	movi	r8,3
800898a8:	40801136 	bltu	r8,r2,800898f0 <memchr+0x8c>
800898ac:	10000c26 	beq	r2,zero,800898e0 <memchr+0x7c>
800898b0:	20c00003 	ldbu	r3,0(r4)
800898b4:	29403fcc 	andi	r5,r5,255
800898b8:	28c00b26 	beq	r5,r3,800898e8 <memchr+0x84>
800898bc:	20c00044 	addi	r3,r4,1
800898c0:	39803fcc 	andi	r6,r7,255
800898c4:	2089883a 	add	r4,r4,r2
800898c8:	00000306 	br	800898d8 <memchr+0x74>
800898cc:	18c00044 	addi	r3,r3,1
800898d0:	197fffc3 	ldbu	r5,-1(r3)
800898d4:	31400526 	beq	r6,r5,800898ec <memchr+0x88>
800898d8:	1805883a 	mov	r2,r3
800898dc:	20fffb1e 	bne	r4,r3,800898cc <memchr+0x68>
800898e0:	0005883a 	mov	r2,zero
800898e4:	f800283a 	ret
800898e8:	2005883a 	mov	r2,r4
800898ec:	f800283a 	ret
800898f0:	28c03fcc 	andi	r3,r5,255
800898f4:	1812923a 	slli	r9,r3,8
800898f8:	02ffbff4 	movhi	r11,65279
800898fc:	02a02074 	movhi	r10,32897
80089900:	48d2b03a 	or	r9,r9,r3
80089904:	4806943a 	slli	r3,r9,16
80089908:	5affbfc4 	addi	r11,r11,-257
8008990c:	52a02004 	addi	r10,r10,-32640
80089910:	48d2b03a 	or	r9,r9,r3
80089914:	20c00017 	ldw	r3,0(r4)
80089918:	48c6f03a 	xor	r3,r9,r3
8008991c:	1acd883a 	add	r6,r3,r11
80089920:	00c6303a 	nor	r3,zero,r3
80089924:	30c6703a 	and	r3,r6,r3
80089928:	1a86703a 	and	r3,r3,r10
8008992c:	183fe01e 	bne	r3,zero,800898b0 <memchr+0x4c>
80089930:	10bfff04 	addi	r2,r2,-4
80089934:	21000104 	addi	r4,r4,4
80089938:	40bff636 	bltu	r8,r2,80089914 <memchr+0xb0>
8008993c:	003fdb06 	br	800898ac <memchr+0x48>
80089940:	3005883a 	mov	r2,r6
80089944:	003fd706 	br	800898a4 <memchr+0x40>

80089948 <memcpy>:
80089948:	defffd04 	addi	sp,sp,-12
8008994c:	dfc00215 	stw	ra,8(sp)
80089950:	dc400115 	stw	r17,4(sp)
80089954:	dc000015 	stw	r16,0(sp)
80089958:	00c003c4 	movi	r3,15
8008995c:	2005883a 	mov	r2,r4
80089960:	1980452e 	bgeu	r3,r6,80089a78 <memcpy+0x130>
80089964:	2906b03a 	or	r3,r5,r4
80089968:	18c000cc 	andi	r3,r3,3
8008996c:	1800441e 	bne	r3,zero,80089a80 <memcpy+0x138>
80089970:	347ffc04 	addi	r17,r6,-16
80089974:	8822d13a 	srli	r17,r17,4
80089978:	28c00104 	addi	r3,r5,4
8008997c:	23400104 	addi	r13,r4,4
80089980:	8820913a 	slli	r16,r17,4
80089984:	2b000204 	addi	r12,r5,8
80089988:	22c00204 	addi	r11,r4,8
8008998c:	84000504 	addi	r16,r16,20
80089990:	2a800304 	addi	r10,r5,12
80089994:	22400304 	addi	r9,r4,12
80089998:	2c21883a 	add	r16,r5,r16
8008999c:	2811883a 	mov	r8,r5
800899a0:	200f883a 	mov	r7,r4
800899a4:	41000017 	ldw	r4,0(r8)
800899a8:	1fc00017 	ldw	ra,0(r3)
800899ac:	63c00017 	ldw	r15,0(r12)
800899b0:	39000015 	stw	r4,0(r7)
800899b4:	53800017 	ldw	r14,0(r10)
800899b8:	6fc00015 	stw	ra,0(r13)
800899bc:	5bc00015 	stw	r15,0(r11)
800899c0:	4b800015 	stw	r14,0(r9)
800899c4:	18c00404 	addi	r3,r3,16
800899c8:	39c00404 	addi	r7,r7,16
800899cc:	42000404 	addi	r8,r8,16
800899d0:	6b400404 	addi	r13,r13,16
800899d4:	63000404 	addi	r12,r12,16
800899d8:	5ac00404 	addi	r11,r11,16
800899dc:	52800404 	addi	r10,r10,16
800899e0:	4a400404 	addi	r9,r9,16
800899e4:	1c3fef1e 	bne	r3,r16,800899a4 <memcpy+0x5c>
800899e8:	89c00044 	addi	r7,r17,1
800899ec:	380e913a 	slli	r7,r7,4
800899f0:	310003cc 	andi	r4,r6,15
800899f4:	02c000c4 	movi	r11,3
800899f8:	11c7883a 	add	r3,r2,r7
800899fc:	29cb883a 	add	r5,r5,r7
80089a00:	5900212e 	bgeu	r11,r4,80089a88 <memcpy+0x140>
80089a04:	1813883a 	mov	r9,r3
80089a08:	2811883a 	mov	r8,r5
80089a0c:	200f883a 	mov	r7,r4
80089a10:	42800017 	ldw	r10,0(r8)
80089a14:	4a400104 	addi	r9,r9,4
80089a18:	39ffff04 	addi	r7,r7,-4
80089a1c:	4abfff15 	stw	r10,-4(r9)
80089a20:	42000104 	addi	r8,r8,4
80089a24:	59fffa36 	bltu	r11,r7,80089a10 <memcpy+0xc8>
80089a28:	213fff04 	addi	r4,r4,-4
80089a2c:	2008d0ba 	srli	r4,r4,2
80089a30:	318000cc 	andi	r6,r6,3
80089a34:	21000044 	addi	r4,r4,1
80089a38:	2109883a 	add	r4,r4,r4
80089a3c:	2109883a 	add	r4,r4,r4
80089a40:	1907883a 	add	r3,r3,r4
80089a44:	290b883a 	add	r5,r5,r4
80089a48:	30000626 	beq	r6,zero,80089a64 <memcpy+0x11c>
80089a4c:	198d883a 	add	r6,r3,r6
80089a50:	29c00003 	ldbu	r7,0(r5)
80089a54:	18c00044 	addi	r3,r3,1
80089a58:	29400044 	addi	r5,r5,1
80089a5c:	19ffffc5 	stb	r7,-1(r3)
80089a60:	19bffb1e 	bne	r3,r6,80089a50 <memcpy+0x108>
80089a64:	dfc00217 	ldw	ra,8(sp)
80089a68:	dc400117 	ldw	r17,4(sp)
80089a6c:	dc000017 	ldw	r16,0(sp)
80089a70:	dec00304 	addi	sp,sp,12
80089a74:	f800283a 	ret
80089a78:	2007883a 	mov	r3,r4
80089a7c:	003ff206 	br	80089a48 <memcpy+0x100>
80089a80:	2007883a 	mov	r3,r4
80089a84:	003ff106 	br	80089a4c <memcpy+0x104>
80089a88:	200d883a 	mov	r6,r4
80089a8c:	003fee06 	br	80089a48 <memcpy+0x100>

80089a90 <memmove>:
80089a90:	2005883a 	mov	r2,r4
80089a94:	29000b2e 	bgeu	r5,r4,80089ac4 <memmove+0x34>
80089a98:	298f883a 	add	r7,r5,r6
80089a9c:	21c0092e 	bgeu	r4,r7,80089ac4 <memmove+0x34>
80089aa0:	2187883a 	add	r3,r4,r6
80089aa4:	198bc83a 	sub	r5,r3,r6
80089aa8:	30004826 	beq	r6,zero,80089bcc <memmove+0x13c>
80089aac:	39ffffc4 	addi	r7,r7,-1
80089ab0:	39000003 	ldbu	r4,0(r7)
80089ab4:	18ffffc4 	addi	r3,r3,-1
80089ab8:	19000005 	stb	r4,0(r3)
80089abc:	28fffb1e 	bne	r5,r3,80089aac <memmove+0x1c>
80089ac0:	f800283a 	ret
80089ac4:	00c003c4 	movi	r3,15
80089ac8:	1980412e 	bgeu	r3,r6,80089bd0 <memmove+0x140>
80089acc:	2886b03a 	or	r3,r5,r2
80089ad0:	18c000cc 	andi	r3,r3,3
80089ad4:	1800401e 	bne	r3,zero,80089bd8 <memmove+0x148>
80089ad8:	33fffc04 	addi	r15,r6,-16
80089adc:	781ed13a 	srli	r15,r15,4
80089ae0:	28c00104 	addi	r3,r5,4
80089ae4:	13400104 	addi	r13,r2,4
80089ae8:	781c913a 	slli	r14,r15,4
80089aec:	2b000204 	addi	r12,r5,8
80089af0:	12c00204 	addi	r11,r2,8
80089af4:	73800504 	addi	r14,r14,20
80089af8:	2a800304 	addi	r10,r5,12
80089afc:	12400304 	addi	r9,r2,12
80089b00:	2b9d883a 	add	r14,r5,r14
80089b04:	2811883a 	mov	r8,r5
80089b08:	100f883a 	mov	r7,r2
80089b0c:	41000017 	ldw	r4,0(r8)
80089b10:	39c00404 	addi	r7,r7,16
80089b14:	18c00404 	addi	r3,r3,16
80089b18:	393ffc15 	stw	r4,-16(r7)
80089b1c:	193ffc17 	ldw	r4,-16(r3)
80089b20:	6b400404 	addi	r13,r13,16
80089b24:	5ac00404 	addi	r11,r11,16
80089b28:	693ffc15 	stw	r4,-16(r13)
80089b2c:	61000017 	ldw	r4,0(r12)
80089b30:	4a400404 	addi	r9,r9,16
80089b34:	42000404 	addi	r8,r8,16
80089b38:	593ffc15 	stw	r4,-16(r11)
80089b3c:	51000017 	ldw	r4,0(r10)
80089b40:	63000404 	addi	r12,r12,16
80089b44:	52800404 	addi	r10,r10,16
80089b48:	493ffc15 	stw	r4,-16(r9)
80089b4c:	1bbfef1e 	bne	r3,r14,80089b0c <memmove+0x7c>
80089b50:	79000044 	addi	r4,r15,1
80089b54:	2008913a 	slli	r4,r4,4
80089b58:	328003cc 	andi	r10,r6,15
80089b5c:	02c000c4 	movi	r11,3
80089b60:	1107883a 	add	r3,r2,r4
80089b64:	290b883a 	add	r5,r5,r4
80089b68:	5a801e2e 	bgeu	r11,r10,80089be4 <memmove+0x154>
80089b6c:	1813883a 	mov	r9,r3
80089b70:	2811883a 	mov	r8,r5
80089b74:	500f883a 	mov	r7,r10
80089b78:	41000017 	ldw	r4,0(r8)
80089b7c:	4a400104 	addi	r9,r9,4
80089b80:	39ffff04 	addi	r7,r7,-4
80089b84:	493fff15 	stw	r4,-4(r9)
80089b88:	42000104 	addi	r8,r8,4
80089b8c:	59fffa36 	bltu	r11,r7,80089b78 <memmove+0xe8>
80089b90:	513fff04 	addi	r4,r10,-4
80089b94:	2008d0ba 	srli	r4,r4,2
80089b98:	318000cc 	andi	r6,r6,3
80089b9c:	21000044 	addi	r4,r4,1
80089ba0:	2109883a 	add	r4,r4,r4
80089ba4:	2109883a 	add	r4,r4,r4
80089ba8:	1907883a 	add	r3,r3,r4
80089bac:	290b883a 	add	r5,r5,r4
80089bb0:	30000b26 	beq	r6,zero,80089be0 <memmove+0x150>
80089bb4:	198d883a 	add	r6,r3,r6
80089bb8:	29c00003 	ldbu	r7,0(r5)
80089bbc:	18c00044 	addi	r3,r3,1
80089bc0:	29400044 	addi	r5,r5,1
80089bc4:	19ffffc5 	stb	r7,-1(r3)
80089bc8:	19bffb1e 	bne	r3,r6,80089bb8 <memmove+0x128>
80089bcc:	f800283a 	ret
80089bd0:	1007883a 	mov	r3,r2
80089bd4:	003ff606 	br	80089bb0 <memmove+0x120>
80089bd8:	1007883a 	mov	r3,r2
80089bdc:	003ff506 	br	80089bb4 <memmove+0x124>
80089be0:	f800283a 	ret
80089be4:	500d883a 	mov	r6,r10
80089be8:	003ff106 	br	80089bb0 <memmove+0x120>

80089bec <memset>:
80089bec:	20c000cc 	andi	r3,r4,3
80089bf0:	2005883a 	mov	r2,r4
80089bf4:	18004426 	beq	r3,zero,80089d08 <memset+0x11c>
80089bf8:	31ffffc4 	addi	r7,r6,-1
80089bfc:	30004026 	beq	r6,zero,80089d00 <memset+0x114>
80089c00:	2813883a 	mov	r9,r5
80089c04:	200d883a 	mov	r6,r4
80089c08:	2007883a 	mov	r3,r4
80089c0c:	00000406 	br	80089c20 <memset+0x34>
80089c10:	3a3fffc4 	addi	r8,r7,-1
80089c14:	31800044 	addi	r6,r6,1
80089c18:	38003926 	beq	r7,zero,80089d00 <memset+0x114>
80089c1c:	400f883a 	mov	r7,r8
80089c20:	18c00044 	addi	r3,r3,1
80089c24:	32400005 	stb	r9,0(r6)
80089c28:	1a0000cc 	andi	r8,r3,3
80089c2c:	403ff81e 	bne	r8,zero,80089c10 <memset+0x24>
80089c30:	010000c4 	movi	r4,3
80089c34:	21c02d2e 	bgeu	r4,r7,80089cec <memset+0x100>
80089c38:	29003fcc 	andi	r4,r5,255
80089c3c:	200c923a 	slli	r6,r4,8
80089c40:	3108b03a 	or	r4,r6,r4
80089c44:	200c943a 	slli	r6,r4,16
80089c48:	218cb03a 	or	r6,r4,r6
80089c4c:	010003c4 	movi	r4,15
80089c50:	21c0182e 	bgeu	r4,r7,80089cb4 <memset+0xc8>
80089c54:	3b3ffc04 	addi	r12,r7,-16
80089c58:	6018d13a 	srli	r12,r12,4
80089c5c:	1a000104 	addi	r8,r3,4
80089c60:	1ac00204 	addi	r11,r3,8
80089c64:	6008913a 	slli	r4,r12,4
80089c68:	1a800304 	addi	r10,r3,12
80089c6c:	1813883a 	mov	r9,r3
80089c70:	21000504 	addi	r4,r4,20
80089c74:	1909883a 	add	r4,r3,r4
80089c78:	49800015 	stw	r6,0(r9)
80089c7c:	41800015 	stw	r6,0(r8)
80089c80:	59800015 	stw	r6,0(r11)
80089c84:	51800015 	stw	r6,0(r10)
80089c88:	42000404 	addi	r8,r8,16
80089c8c:	4a400404 	addi	r9,r9,16
80089c90:	5ac00404 	addi	r11,r11,16
80089c94:	52800404 	addi	r10,r10,16
80089c98:	413ff71e 	bne	r8,r4,80089c78 <memset+0x8c>
80089c9c:	63000044 	addi	r12,r12,1
80089ca0:	6018913a 	slli	r12,r12,4
80089ca4:	39c003cc 	andi	r7,r7,15
80089ca8:	010000c4 	movi	r4,3
80089cac:	1b07883a 	add	r3,r3,r12
80089cb0:	21c00e2e 	bgeu	r4,r7,80089cec <memset+0x100>
80089cb4:	1813883a 	mov	r9,r3
80089cb8:	3811883a 	mov	r8,r7
80089cbc:	010000c4 	movi	r4,3
80089cc0:	49800015 	stw	r6,0(r9)
80089cc4:	423fff04 	addi	r8,r8,-4
80089cc8:	4a400104 	addi	r9,r9,4
80089ccc:	223ffc36 	bltu	r4,r8,80089cc0 <memset+0xd4>
80089cd0:	393fff04 	addi	r4,r7,-4
80089cd4:	2008d0ba 	srli	r4,r4,2
80089cd8:	39c000cc 	andi	r7,r7,3
80089cdc:	21000044 	addi	r4,r4,1
80089ce0:	2109883a 	add	r4,r4,r4
80089ce4:	2109883a 	add	r4,r4,r4
80089ce8:	1907883a 	add	r3,r3,r4
80089cec:	38000526 	beq	r7,zero,80089d04 <memset+0x118>
80089cf0:	19cf883a 	add	r7,r3,r7
80089cf4:	19400005 	stb	r5,0(r3)
80089cf8:	18c00044 	addi	r3,r3,1
80089cfc:	38fffd1e 	bne	r7,r3,80089cf4 <memset+0x108>
80089d00:	f800283a 	ret
80089d04:	f800283a 	ret
80089d08:	2007883a 	mov	r3,r4
80089d0c:	300f883a 	mov	r7,r6
80089d10:	003fc706 	br	80089c30 <memset+0x44>

80089d14 <_Balloc>:
80089d14:	20801317 	ldw	r2,76(r4)
80089d18:	defffc04 	addi	sp,sp,-16
80089d1c:	dc400115 	stw	r17,4(sp)
80089d20:	dc000015 	stw	r16,0(sp)
80089d24:	dfc00315 	stw	ra,12(sp)
80089d28:	dc800215 	stw	r18,8(sp)
80089d2c:	2023883a 	mov	r17,r4
80089d30:	2821883a 	mov	r16,r5
80089d34:	10000f26 	beq	r2,zero,80089d74 <_Balloc+0x60>
80089d38:	8407883a 	add	r3,r16,r16
80089d3c:	18c7883a 	add	r3,r3,r3
80089d40:	10c7883a 	add	r3,r2,r3
80089d44:	18800017 	ldw	r2,0(r3)
80089d48:	10001126 	beq	r2,zero,80089d90 <_Balloc+0x7c>
80089d4c:	11000017 	ldw	r4,0(r2)
80089d50:	19000015 	stw	r4,0(r3)
80089d54:	10000415 	stw	zero,16(r2)
80089d58:	10000315 	stw	zero,12(r2)
80089d5c:	dfc00317 	ldw	ra,12(sp)
80089d60:	dc800217 	ldw	r18,8(sp)
80089d64:	dc400117 	ldw	r17,4(sp)
80089d68:	dc000017 	ldw	r16,0(sp)
80089d6c:	dec00404 	addi	sp,sp,16
80089d70:	f800283a 	ret
80089d74:	01800844 	movi	r6,33
80089d78:	01400104 	movi	r5,4
80089d7c:	008e24c0 	call	8008e24c <_calloc_r>
80089d80:	88801315 	stw	r2,76(r17)
80089d84:	103fec1e 	bne	r2,zero,80089d38 <_Balloc+0x24>
80089d88:	0005883a 	mov	r2,zero
80089d8c:	003ff306 	br	80089d5c <_Balloc+0x48>
80089d90:	01400044 	movi	r5,1
80089d94:	2c24983a 	sll	r18,r5,r16
80089d98:	8809883a 	mov	r4,r17
80089d9c:	91800144 	addi	r6,r18,5
80089da0:	318d883a 	add	r6,r6,r6
80089da4:	318d883a 	add	r6,r6,r6
80089da8:	008e24c0 	call	8008e24c <_calloc_r>
80089dac:	103ff626 	beq	r2,zero,80089d88 <_Balloc+0x74>
80089db0:	14000115 	stw	r16,4(r2)
80089db4:	14800215 	stw	r18,8(r2)
80089db8:	003fe606 	br	80089d54 <_Balloc+0x40>

80089dbc <_Bfree>:
80089dbc:	28000826 	beq	r5,zero,80089de0 <_Bfree+0x24>
80089dc0:	28c00117 	ldw	r3,4(r5)
80089dc4:	20801317 	ldw	r2,76(r4)
80089dc8:	18c7883a 	add	r3,r3,r3
80089dcc:	18c7883a 	add	r3,r3,r3
80089dd0:	10c5883a 	add	r2,r2,r3
80089dd4:	10c00017 	ldw	r3,0(r2)
80089dd8:	28c00015 	stw	r3,0(r5)
80089ddc:	11400015 	stw	r5,0(r2)
80089de0:	f800283a 	ret

80089de4 <__multadd>:
80089de4:	defffa04 	addi	sp,sp,-24
80089de8:	dc800315 	stw	r18,12(sp)
80089dec:	dc400215 	stw	r17,8(sp)
80089df0:	dc000115 	stw	r16,4(sp)
80089df4:	2823883a 	mov	r17,r5
80089df8:	2c000417 	ldw	r16,16(r5)
80089dfc:	dfc00515 	stw	ra,20(sp)
80089e00:	dcc00415 	stw	r19,16(sp)
80089e04:	2025883a 	mov	r18,r4
80089e08:	29400504 	addi	r5,r5,20
80089e0c:	0011883a 	mov	r8,zero
80089e10:	28c00017 	ldw	r3,0(r5)
80089e14:	29400104 	addi	r5,r5,4
80089e18:	42000044 	addi	r8,r8,1
80089e1c:	18bfffcc 	andi	r2,r3,65535
80089e20:	1185383a 	mul	r2,r2,r6
80089e24:	1806d43a 	srli	r3,r3,16
80089e28:	11cf883a 	add	r7,r2,r7
80089e2c:	3808d43a 	srli	r4,r7,16
80089e30:	1987383a 	mul	r3,r3,r6
80089e34:	38bfffcc 	andi	r2,r7,65535
80089e38:	1907883a 	add	r3,r3,r4
80089e3c:	1808943a 	slli	r4,r3,16
80089e40:	180ed43a 	srli	r7,r3,16
80089e44:	2085883a 	add	r2,r4,r2
80089e48:	28bfff15 	stw	r2,-4(r5)
80089e4c:	443ff016 	blt	r8,r16,80089e10 <__multadd+0x2c>
80089e50:	38000926 	beq	r7,zero,80089e78 <__multadd+0x94>
80089e54:	88800217 	ldw	r2,8(r17)
80089e58:	80800f0e 	bge	r16,r2,80089e98 <__multadd+0xb4>
80089e5c:	80800144 	addi	r2,r16,5
80089e60:	1085883a 	add	r2,r2,r2
80089e64:	1085883a 	add	r2,r2,r2
80089e68:	8885883a 	add	r2,r17,r2
80089e6c:	11c00015 	stw	r7,0(r2)
80089e70:	84000044 	addi	r16,r16,1
80089e74:	8c000415 	stw	r16,16(r17)
80089e78:	8805883a 	mov	r2,r17
80089e7c:	dfc00517 	ldw	ra,20(sp)
80089e80:	dcc00417 	ldw	r19,16(sp)
80089e84:	dc800317 	ldw	r18,12(sp)
80089e88:	dc400217 	ldw	r17,8(sp)
80089e8c:	dc000117 	ldw	r16,4(sp)
80089e90:	dec00604 	addi	sp,sp,24
80089e94:	f800283a 	ret
80089e98:	89400117 	ldw	r5,4(r17)
80089e9c:	9009883a 	mov	r4,r18
80089ea0:	d9c00015 	stw	r7,0(sp)
80089ea4:	29400044 	addi	r5,r5,1
80089ea8:	0089d140 	call	80089d14 <_Balloc>
80089eac:	89800417 	ldw	r6,16(r17)
80089eb0:	89400304 	addi	r5,r17,12
80089eb4:	11000304 	addi	r4,r2,12
80089eb8:	31800084 	addi	r6,r6,2
80089ebc:	318d883a 	add	r6,r6,r6
80089ec0:	318d883a 	add	r6,r6,r6
80089ec4:	1027883a 	mov	r19,r2
80089ec8:	00899480 	call	80089948 <memcpy>
80089ecc:	d9c00017 	ldw	r7,0(sp)
80089ed0:	88000a26 	beq	r17,zero,80089efc <__multadd+0x118>
80089ed4:	88c00117 	ldw	r3,4(r17)
80089ed8:	90801317 	ldw	r2,76(r18)
80089edc:	18c7883a 	add	r3,r3,r3
80089ee0:	18c7883a 	add	r3,r3,r3
80089ee4:	10c5883a 	add	r2,r2,r3
80089ee8:	10c00017 	ldw	r3,0(r2)
80089eec:	88c00015 	stw	r3,0(r17)
80089ef0:	14400015 	stw	r17,0(r2)
80089ef4:	9823883a 	mov	r17,r19
80089ef8:	003fd806 	br	80089e5c <__multadd+0x78>
80089efc:	9823883a 	mov	r17,r19
80089f00:	003fd606 	br	80089e5c <__multadd+0x78>

80089f04 <__s2b>:
80089f04:	defff904 	addi	sp,sp,-28
80089f08:	dc400115 	stw	r17,4(sp)
80089f0c:	dc000015 	stw	r16,0(sp)
80089f10:	2023883a 	mov	r17,r4
80089f14:	2821883a 	mov	r16,r5
80089f18:	39000204 	addi	r4,r7,8
80089f1c:	01400244 	movi	r5,9
80089f20:	dcc00315 	stw	r19,12(sp)
80089f24:	dc800215 	stw	r18,8(sp)
80089f28:	dfc00615 	stw	ra,24(sp)
80089f2c:	dd400515 	stw	r21,20(sp)
80089f30:	dd000415 	stw	r20,16(sp)
80089f34:	3825883a 	mov	r18,r7
80089f38:	3027883a 	mov	r19,r6
80089f3c:	008f57c0 	call	8008f57c <__divsi3>
80089f40:	00c00044 	movi	r3,1
80089f44:	000b883a 	mov	r5,zero
80089f48:	1880030e 	bge	r3,r2,80089f58 <__s2b+0x54>
80089f4c:	18c7883a 	add	r3,r3,r3
80089f50:	29400044 	addi	r5,r5,1
80089f54:	18bffd16 	blt	r3,r2,80089f4c <__s2b+0x48>
80089f58:	8809883a 	mov	r4,r17
80089f5c:	0089d140 	call	80089d14 <_Balloc>
80089f60:	d8c00717 	ldw	r3,28(sp)
80089f64:	10c00515 	stw	r3,20(r2)
80089f68:	00c00044 	movi	r3,1
80089f6c:	10c00415 	stw	r3,16(r2)
80089f70:	00c00244 	movi	r3,9
80089f74:	1cc0210e 	bge	r3,r19,80089ffc <__s2b+0xf8>
80089f78:	80eb883a 	add	r21,r16,r3
80089f7c:	a829883a 	mov	r20,r21
80089f80:	84e1883a 	add	r16,r16,r19
80089f84:	a1c00007 	ldb	r7,0(r20)
80089f88:	01800284 	movi	r6,10
80089f8c:	a5000044 	addi	r20,r20,1
80089f90:	100b883a 	mov	r5,r2
80089f94:	39fff404 	addi	r7,r7,-48
80089f98:	8809883a 	mov	r4,r17
80089f9c:	0089de40 	call	80089de4 <__multadd>
80089fa0:	a43ff81e 	bne	r20,r16,80089f84 <__s2b+0x80>
80089fa4:	ace1883a 	add	r16,r21,r19
80089fa8:	843ffe04 	addi	r16,r16,-8
80089fac:	9c800a0e 	bge	r19,r18,80089fd8 <__s2b+0xd4>
80089fb0:	94e5c83a 	sub	r18,r18,r19
80089fb4:	84a5883a 	add	r18,r16,r18
80089fb8:	81c00007 	ldb	r7,0(r16)
80089fbc:	01800284 	movi	r6,10
80089fc0:	84000044 	addi	r16,r16,1
80089fc4:	100b883a 	mov	r5,r2
80089fc8:	39fff404 	addi	r7,r7,-48
80089fcc:	8809883a 	mov	r4,r17
80089fd0:	0089de40 	call	80089de4 <__multadd>
80089fd4:	84bff81e 	bne	r16,r18,80089fb8 <__s2b+0xb4>
80089fd8:	dfc00617 	ldw	ra,24(sp)
80089fdc:	dd400517 	ldw	r21,20(sp)
80089fe0:	dd000417 	ldw	r20,16(sp)
80089fe4:	dcc00317 	ldw	r19,12(sp)
80089fe8:	dc800217 	ldw	r18,8(sp)
80089fec:	dc400117 	ldw	r17,4(sp)
80089ff0:	dc000017 	ldw	r16,0(sp)
80089ff4:	dec00704 	addi	sp,sp,28
80089ff8:	f800283a 	ret
80089ffc:	84000284 	addi	r16,r16,10
8008a000:	1827883a 	mov	r19,r3
8008a004:	003fe906 	br	80089fac <__s2b+0xa8>

8008a008 <__hi0bits>:
8008a008:	20bfffec 	andhi	r2,r4,65535
8008a00c:	1000141e 	bne	r2,zero,8008a060 <__hi0bits+0x58>
8008a010:	2008943a 	slli	r4,r4,16
8008a014:	00800404 	movi	r2,16
8008a018:	20ffc02c 	andhi	r3,r4,65280
8008a01c:	1800021e 	bne	r3,zero,8008a028 <__hi0bits+0x20>
8008a020:	2008923a 	slli	r4,r4,8
8008a024:	10800204 	addi	r2,r2,8
8008a028:	20fc002c 	andhi	r3,r4,61440
8008a02c:	1800021e 	bne	r3,zero,8008a038 <__hi0bits+0x30>
8008a030:	2008913a 	slli	r4,r4,4
8008a034:	10800104 	addi	r2,r2,4
8008a038:	20f0002c 	andhi	r3,r4,49152
8008a03c:	1800031e 	bne	r3,zero,8008a04c <__hi0bits+0x44>
8008a040:	2109883a 	add	r4,r4,r4
8008a044:	10800084 	addi	r2,r2,2
8008a048:	2109883a 	add	r4,r4,r4
8008a04c:	20000316 	blt	r4,zero,8008a05c <__hi0bits+0x54>
8008a050:	2110002c 	andhi	r4,r4,16384
8008a054:	2000041e 	bne	r4,zero,8008a068 <__hi0bits+0x60>
8008a058:	00800804 	movi	r2,32
8008a05c:	f800283a 	ret
8008a060:	0005883a 	mov	r2,zero
8008a064:	003fec06 	br	8008a018 <__hi0bits+0x10>
8008a068:	10800044 	addi	r2,r2,1
8008a06c:	f800283a 	ret

8008a070 <__lo0bits>:
8008a070:	20c00017 	ldw	r3,0(r4)
8008a074:	188001cc 	andi	r2,r3,7
8008a078:	10000826 	beq	r2,zero,8008a09c <__lo0bits+0x2c>
8008a07c:	1880004c 	andi	r2,r3,1
8008a080:	1000211e 	bne	r2,zero,8008a108 <__lo0bits+0x98>
8008a084:	1880008c 	andi	r2,r3,2
8008a088:	1000211e 	bne	r2,zero,8008a110 <__lo0bits+0xa0>
8008a08c:	1806d0ba 	srli	r3,r3,2
8008a090:	00800084 	movi	r2,2
8008a094:	20c00015 	stw	r3,0(r4)
8008a098:	f800283a 	ret
8008a09c:	18bfffcc 	andi	r2,r3,65535
8008a0a0:	10001326 	beq	r2,zero,8008a0f0 <__lo0bits+0x80>
8008a0a4:	0005883a 	mov	r2,zero
8008a0a8:	19403fcc 	andi	r5,r3,255
8008a0ac:	2800021e 	bne	r5,zero,8008a0b8 <__lo0bits+0x48>
8008a0b0:	1806d23a 	srli	r3,r3,8
8008a0b4:	10800204 	addi	r2,r2,8
8008a0b8:	194003cc 	andi	r5,r3,15
8008a0bc:	2800021e 	bne	r5,zero,8008a0c8 <__lo0bits+0x58>
8008a0c0:	1806d13a 	srli	r3,r3,4
8008a0c4:	10800104 	addi	r2,r2,4
8008a0c8:	194000cc 	andi	r5,r3,3
8008a0cc:	2800021e 	bne	r5,zero,8008a0d8 <__lo0bits+0x68>
8008a0d0:	1806d0ba 	srli	r3,r3,2
8008a0d4:	10800084 	addi	r2,r2,2
8008a0d8:	1940004c 	andi	r5,r3,1
8008a0dc:	2800081e 	bne	r5,zero,8008a100 <__lo0bits+0x90>
8008a0e0:	1806d07a 	srli	r3,r3,1
8008a0e4:	1800051e 	bne	r3,zero,8008a0fc <__lo0bits+0x8c>
8008a0e8:	00800804 	movi	r2,32
8008a0ec:	f800283a 	ret
8008a0f0:	1806d43a 	srli	r3,r3,16
8008a0f4:	00800404 	movi	r2,16
8008a0f8:	003feb06 	br	8008a0a8 <__lo0bits+0x38>
8008a0fc:	10800044 	addi	r2,r2,1
8008a100:	20c00015 	stw	r3,0(r4)
8008a104:	f800283a 	ret
8008a108:	0005883a 	mov	r2,zero
8008a10c:	f800283a 	ret
8008a110:	1806d07a 	srli	r3,r3,1
8008a114:	00800044 	movi	r2,1
8008a118:	20c00015 	stw	r3,0(r4)
8008a11c:	f800283a 	ret

8008a120 <__i2b>:
8008a120:	defffd04 	addi	sp,sp,-12
8008a124:	dc000015 	stw	r16,0(sp)
8008a128:	04000044 	movi	r16,1
8008a12c:	dc400115 	stw	r17,4(sp)
8008a130:	2823883a 	mov	r17,r5
8008a134:	800b883a 	mov	r5,r16
8008a138:	dfc00215 	stw	ra,8(sp)
8008a13c:	0089d140 	call	80089d14 <_Balloc>
8008a140:	14400515 	stw	r17,20(r2)
8008a144:	14000415 	stw	r16,16(r2)
8008a148:	dfc00217 	ldw	ra,8(sp)
8008a14c:	dc400117 	ldw	r17,4(sp)
8008a150:	dc000017 	ldw	r16,0(sp)
8008a154:	dec00304 	addi	sp,sp,12
8008a158:	f800283a 	ret

8008a15c <__multiply>:
8008a15c:	defffa04 	addi	sp,sp,-24
8008a160:	dcc00315 	stw	r19,12(sp)
8008a164:	dc800215 	stw	r18,8(sp)
8008a168:	34c00417 	ldw	r19,16(r6)
8008a16c:	2c800417 	ldw	r18,16(r5)
8008a170:	dd000415 	stw	r20,16(sp)
8008a174:	dc400115 	stw	r17,4(sp)
8008a178:	dfc00515 	stw	ra,20(sp)
8008a17c:	dc000015 	stw	r16,0(sp)
8008a180:	2829883a 	mov	r20,r5
8008a184:	3023883a 	mov	r17,r6
8008a188:	94c0050e 	bge	r18,r19,8008a1a0 <__multiply+0x44>
8008a18c:	9007883a 	mov	r3,r18
8008a190:	3029883a 	mov	r20,r6
8008a194:	9825883a 	mov	r18,r19
8008a198:	2823883a 	mov	r17,r5
8008a19c:	1827883a 	mov	r19,r3
8008a1a0:	a0800217 	ldw	r2,8(r20)
8008a1a4:	94e1883a 	add	r16,r18,r19
8008a1a8:	a1400117 	ldw	r5,4(r20)
8008a1ac:	1400010e 	bge	r2,r16,8008a1b4 <__multiply+0x58>
8008a1b0:	29400044 	addi	r5,r5,1
8008a1b4:	0089d140 	call	80089d14 <_Balloc>
8008a1b8:	8415883a 	add	r10,r16,r16
8008a1bc:	12c00504 	addi	r11,r2,20
8008a1c0:	5295883a 	add	r10,r10,r10
8008a1c4:	5a95883a 	add	r10,r11,r10
8008a1c8:	5807883a 	mov	r3,r11
8008a1cc:	5a80032e 	bgeu	r11,r10,8008a1dc <__multiply+0x80>
8008a1d0:	18000015 	stw	zero,0(r3)
8008a1d4:	18c00104 	addi	r3,r3,4
8008a1d8:	1abffd36 	bltu	r3,r10,8008a1d0 <__multiply+0x74>
8008a1dc:	9ce7883a 	add	r19,r19,r19
8008a1e0:	94a5883a 	add	r18,r18,r18
8008a1e4:	89800504 	addi	r6,r17,20
8008a1e8:	9ce7883a 	add	r19,r19,r19
8008a1ec:	a3400504 	addi	r13,r20,20
8008a1f0:	94a5883a 	add	r18,r18,r18
8008a1f4:	34d9883a 	add	r12,r6,r19
8008a1f8:	6c93883a 	add	r9,r13,r18
8008a1fc:	3300422e 	bgeu	r6,r12,8008a308 <__multiply+0x1ac>
8008a200:	37c00017 	ldw	ra,0(r6)
8008a204:	fbffffcc 	andi	r15,ra,65535
8008a208:	78001b26 	beq	r15,zero,8008a278 <__multiply+0x11c>
8008a20c:	5811883a 	mov	r8,r11
8008a210:	681d883a 	mov	r14,r13
8008a214:	000f883a 	mov	r7,zero
8008a218:	71000017 	ldw	r4,0(r14)
8008a21c:	40c00017 	ldw	r3,0(r8)
8008a220:	73800104 	addi	r14,r14,4
8008a224:	217fffcc 	andi	r5,r4,65535
8008a228:	2bcb383a 	mul	r5,r5,r15
8008a22c:	2008d43a 	srli	r4,r4,16
8008a230:	1c7fffcc 	andi	r17,r3,65535
8008a234:	2c4b883a 	add	r5,r5,r17
8008a238:	29cb883a 	add	r5,r5,r7
8008a23c:	23c9383a 	mul	r4,r4,r15
8008a240:	1806d43a 	srli	r3,r3,16
8008a244:	280ed43a 	srli	r7,r5,16
8008a248:	297fffcc 	andi	r5,r5,65535
8008a24c:	20c7883a 	add	r3,r4,r3
8008a250:	19c7883a 	add	r3,r3,r7
8008a254:	1808943a 	slli	r4,r3,16
8008a258:	4023883a 	mov	r17,r8
8008a25c:	180ed43a 	srli	r7,r3,16
8008a260:	214ab03a 	or	r5,r4,r5
8008a264:	41400015 	stw	r5,0(r8)
8008a268:	42000104 	addi	r8,r8,4
8008a26c:	727fea36 	bltu	r14,r9,8008a218 <__multiply+0xbc>
8008a270:	89c00115 	stw	r7,4(r17)
8008a274:	37c00017 	ldw	ra,0(r6)
8008a278:	f83ed43a 	srli	ra,ra,16
8008a27c:	f8001f26 	beq	ra,zero,8008a2fc <__multiply+0x1a0>
8008a280:	58c00017 	ldw	r3,0(r11)
8008a284:	681d883a 	mov	r14,r13
8008a288:	581f883a 	mov	r15,r11
8008a28c:	1811883a 	mov	r8,r3
8008a290:	5825883a 	mov	r18,r11
8008a294:	000f883a 	mov	r7,zero
8008a298:	00000106 	br	8008a2a0 <__multiply+0x144>
8008a29c:	8825883a 	mov	r18,r17
8008a2a0:	7140000b 	ldhu	r5,0(r14)
8008a2a4:	4010d43a 	srli	r8,r8,16
8008a2a8:	193fffcc 	andi	r4,r3,65535
8008a2ac:	2fcb383a 	mul	r5,r5,ra
8008a2b0:	7bc00104 	addi	r15,r15,4
8008a2b4:	73800104 	addi	r14,r14,4
8008a2b8:	2a0b883a 	add	r5,r5,r8
8008a2bc:	29cb883a 	add	r5,r5,r7
8008a2c0:	2806943a 	slli	r3,r5,16
8008a2c4:	94400104 	addi	r17,r18,4
8008a2c8:	280ad43a 	srli	r5,r5,16
8008a2cc:	1908b03a 	or	r4,r3,r4
8008a2d0:	793fff15 	stw	r4,-4(r15)
8008a2d4:	70ffff17 	ldw	r3,-4(r14)
8008a2d8:	8a000017 	ldw	r8,0(r17)
8008a2dc:	1806d43a 	srli	r3,r3,16
8008a2e0:	413fffcc 	andi	r4,r8,65535
8008a2e4:	1fc7383a 	mul	r3,r3,ra
8008a2e8:	1907883a 	add	r3,r3,r4
8008a2ec:	1947883a 	add	r3,r3,r5
8008a2f0:	180ed43a 	srli	r7,r3,16
8008a2f4:	727fe936 	bltu	r14,r9,8008a29c <__multiply+0x140>
8008a2f8:	90c00115 	stw	r3,4(r18)
8008a2fc:	31800104 	addi	r6,r6,4
8008a300:	5ac00104 	addi	r11,r11,4
8008a304:	333fbe36 	bltu	r6,r12,8008a200 <__multiply+0xa4>
8008a308:	0400090e 	bge	zero,r16,8008a330 <__multiply+0x1d4>
8008a30c:	50ffff17 	ldw	r3,-4(r10)
8008a310:	52bfff04 	addi	r10,r10,-4
8008a314:	18000326 	beq	r3,zero,8008a324 <__multiply+0x1c8>
8008a318:	00000506 	br	8008a330 <__multiply+0x1d4>
8008a31c:	50c00017 	ldw	r3,0(r10)
8008a320:	1800031e 	bne	r3,zero,8008a330 <__multiply+0x1d4>
8008a324:	843fffc4 	addi	r16,r16,-1
8008a328:	52bfff04 	addi	r10,r10,-4
8008a32c:	803ffb1e 	bne	r16,zero,8008a31c <__multiply+0x1c0>
8008a330:	14000415 	stw	r16,16(r2)
8008a334:	dfc00517 	ldw	ra,20(sp)
8008a338:	dd000417 	ldw	r20,16(sp)
8008a33c:	dcc00317 	ldw	r19,12(sp)
8008a340:	dc800217 	ldw	r18,8(sp)
8008a344:	dc400117 	ldw	r17,4(sp)
8008a348:	dc000017 	ldw	r16,0(sp)
8008a34c:	dec00604 	addi	sp,sp,24
8008a350:	f800283a 	ret

8008a354 <__pow5mult>:
8008a354:	defffa04 	addi	sp,sp,-24
8008a358:	dcc00315 	stw	r19,12(sp)
8008a35c:	dc000015 	stw	r16,0(sp)
8008a360:	dfc00515 	stw	ra,20(sp)
8008a364:	dd000415 	stw	r20,16(sp)
8008a368:	dc800215 	stw	r18,8(sp)
8008a36c:	dc400115 	stw	r17,4(sp)
8008a370:	308000cc 	andi	r2,r6,3
8008a374:	3021883a 	mov	r16,r6
8008a378:	2027883a 	mov	r19,r4
8008a37c:	10002f1e 	bne	r2,zero,8008a43c <__pow5mult+0xe8>
8008a380:	2825883a 	mov	r18,r5
8008a384:	8021d0ba 	srai	r16,r16,2
8008a388:	80001a26 	beq	r16,zero,8008a3f4 <__pow5mult+0xa0>
8008a38c:	9c401217 	ldw	r17,72(r19)
8008a390:	8800061e 	bne	r17,zero,8008a3ac <__pow5mult+0x58>
8008a394:	00003406 	br	8008a468 <__pow5mult+0x114>
8008a398:	8021d07a 	srai	r16,r16,1
8008a39c:	80001526 	beq	r16,zero,8008a3f4 <__pow5mult+0xa0>
8008a3a0:	88800017 	ldw	r2,0(r17)
8008a3a4:	10001c26 	beq	r2,zero,8008a418 <__pow5mult+0xc4>
8008a3a8:	1023883a 	mov	r17,r2
8008a3ac:	8080004c 	andi	r2,r16,1
8008a3b0:	103ff926 	beq	r2,zero,8008a398 <__pow5mult+0x44>
8008a3b4:	880d883a 	mov	r6,r17
8008a3b8:	900b883a 	mov	r5,r18
8008a3bc:	9809883a 	mov	r4,r19
8008a3c0:	008a15c0 	call	8008a15c <__multiply>
8008a3c4:	90001b26 	beq	r18,zero,8008a434 <__pow5mult+0xe0>
8008a3c8:	91000117 	ldw	r4,4(r18)
8008a3cc:	98c01317 	ldw	r3,76(r19)
8008a3d0:	8021d07a 	srai	r16,r16,1
8008a3d4:	2109883a 	add	r4,r4,r4
8008a3d8:	2109883a 	add	r4,r4,r4
8008a3dc:	1907883a 	add	r3,r3,r4
8008a3e0:	19000017 	ldw	r4,0(r3)
8008a3e4:	91000015 	stw	r4,0(r18)
8008a3e8:	1c800015 	stw	r18,0(r3)
8008a3ec:	1025883a 	mov	r18,r2
8008a3f0:	803feb1e 	bne	r16,zero,8008a3a0 <__pow5mult+0x4c>
8008a3f4:	9005883a 	mov	r2,r18
8008a3f8:	dfc00517 	ldw	ra,20(sp)
8008a3fc:	dd000417 	ldw	r20,16(sp)
8008a400:	dcc00317 	ldw	r19,12(sp)
8008a404:	dc800217 	ldw	r18,8(sp)
8008a408:	dc400117 	ldw	r17,4(sp)
8008a40c:	dc000017 	ldw	r16,0(sp)
8008a410:	dec00604 	addi	sp,sp,24
8008a414:	f800283a 	ret
8008a418:	880d883a 	mov	r6,r17
8008a41c:	880b883a 	mov	r5,r17
8008a420:	9809883a 	mov	r4,r19
8008a424:	008a15c0 	call	8008a15c <__multiply>
8008a428:	88800015 	stw	r2,0(r17)
8008a42c:	10000015 	stw	zero,0(r2)
8008a430:	003fdd06 	br	8008a3a8 <__pow5mult+0x54>
8008a434:	1025883a 	mov	r18,r2
8008a438:	003fd706 	br	8008a398 <__pow5mult+0x44>
8008a43c:	10bfffc4 	addi	r2,r2,-1
8008a440:	1085883a 	add	r2,r2,r2
8008a444:	00e00274 	movhi	r3,32777
8008a448:	18daa904 	addi	r3,r3,27300
8008a44c:	1085883a 	add	r2,r2,r2
8008a450:	1885883a 	add	r2,r3,r2
8008a454:	11800017 	ldw	r6,0(r2)
8008a458:	000f883a 	mov	r7,zero
8008a45c:	0089de40 	call	80089de4 <__multadd>
8008a460:	1025883a 	mov	r18,r2
8008a464:	003fc706 	br	8008a384 <__pow5mult+0x30>
8008a468:	05000044 	movi	r20,1
8008a46c:	a00b883a 	mov	r5,r20
8008a470:	9809883a 	mov	r4,r19
8008a474:	0089d140 	call	80089d14 <_Balloc>
8008a478:	1023883a 	mov	r17,r2
8008a47c:	00809c44 	movi	r2,625
8008a480:	88800515 	stw	r2,20(r17)
8008a484:	8d000415 	stw	r20,16(r17)
8008a488:	9c401215 	stw	r17,72(r19)
8008a48c:	88000015 	stw	zero,0(r17)
8008a490:	003fc606 	br	8008a3ac <__pow5mult+0x58>

8008a494 <__lshift>:
8008a494:	defff904 	addi	sp,sp,-28
8008a498:	dd400515 	stw	r21,20(sp)
8008a49c:	dcc00315 	stw	r19,12(sp)
8008a4a0:	302bd17a 	srai	r21,r6,5
8008a4a4:	2cc00417 	ldw	r19,16(r5)
8008a4a8:	28800217 	ldw	r2,8(r5)
8008a4ac:	dd000415 	stw	r20,16(sp)
8008a4b0:	ace7883a 	add	r19,r21,r19
8008a4b4:	dc800215 	stw	r18,8(sp)
8008a4b8:	dc400115 	stw	r17,4(sp)
8008a4bc:	dc000015 	stw	r16,0(sp)
8008a4c0:	dfc00615 	stw	ra,24(sp)
8008a4c4:	9c000044 	addi	r16,r19,1
8008a4c8:	2823883a 	mov	r17,r5
8008a4cc:	3029883a 	mov	r20,r6
8008a4d0:	2025883a 	mov	r18,r4
8008a4d4:	29400117 	ldw	r5,4(r5)
8008a4d8:	1400030e 	bge	r2,r16,8008a4e8 <__lshift+0x54>
8008a4dc:	1085883a 	add	r2,r2,r2
8008a4e0:	29400044 	addi	r5,r5,1
8008a4e4:	143ffd16 	blt	r2,r16,8008a4dc <__lshift+0x48>
8008a4e8:	9009883a 	mov	r4,r18
8008a4ec:	0089d140 	call	80089d14 <_Balloc>
8008a4f0:	10c00504 	addi	r3,r2,20
8008a4f4:	0540070e 	bge	zero,r21,8008a514 <__lshift+0x80>
8008a4f8:	ad6b883a 	add	r21,r21,r21
8008a4fc:	ad6b883a 	add	r21,r21,r21
8008a500:	1809883a 	mov	r4,r3
8008a504:	1d47883a 	add	r3,r3,r21
8008a508:	20000015 	stw	zero,0(r4)
8008a50c:	21000104 	addi	r4,r4,4
8008a510:	193ffd1e 	bne	r3,r4,8008a508 <__lshift+0x74>
8008a514:	8a000417 	ldw	r8,16(r17)
8008a518:	89000504 	addi	r4,r17,20
8008a51c:	a18007cc 	andi	r6,r20,31
8008a520:	4211883a 	add	r8,r8,r8
8008a524:	4211883a 	add	r8,r8,r8
8008a528:	2211883a 	add	r8,r4,r8
8008a52c:	30002326 	beq	r6,zero,8008a5bc <__lshift+0x128>
8008a530:	02400804 	movi	r9,32
8008a534:	4993c83a 	sub	r9,r9,r6
8008a538:	000b883a 	mov	r5,zero
8008a53c:	21c00017 	ldw	r7,0(r4)
8008a540:	1815883a 	mov	r10,r3
8008a544:	18c00104 	addi	r3,r3,4
8008a548:	398e983a 	sll	r7,r7,r6
8008a54c:	21000104 	addi	r4,r4,4
8008a550:	394ab03a 	or	r5,r7,r5
8008a554:	197fff15 	stw	r5,-4(r3)
8008a558:	217fff17 	ldw	r5,-4(r4)
8008a55c:	2a4ad83a 	srl	r5,r5,r9
8008a560:	223ff636 	bltu	r4,r8,8008a53c <__lshift+0xa8>
8008a564:	51400115 	stw	r5,4(r10)
8008a568:	28001a1e 	bne	r5,zero,8008a5d4 <__lshift+0x140>
8008a56c:	843fffc4 	addi	r16,r16,-1
8008a570:	14000415 	stw	r16,16(r2)
8008a574:	88000826 	beq	r17,zero,8008a598 <__lshift+0x104>
8008a578:	89000117 	ldw	r4,4(r17)
8008a57c:	90c01317 	ldw	r3,76(r18)
8008a580:	2109883a 	add	r4,r4,r4
8008a584:	2109883a 	add	r4,r4,r4
8008a588:	1907883a 	add	r3,r3,r4
8008a58c:	19000017 	ldw	r4,0(r3)
8008a590:	89000015 	stw	r4,0(r17)
8008a594:	1c400015 	stw	r17,0(r3)
8008a598:	dfc00617 	ldw	ra,24(sp)
8008a59c:	dd400517 	ldw	r21,20(sp)
8008a5a0:	dd000417 	ldw	r20,16(sp)
8008a5a4:	dcc00317 	ldw	r19,12(sp)
8008a5a8:	dc800217 	ldw	r18,8(sp)
8008a5ac:	dc400117 	ldw	r17,4(sp)
8008a5b0:	dc000017 	ldw	r16,0(sp)
8008a5b4:	dec00704 	addi	sp,sp,28
8008a5b8:	f800283a 	ret
8008a5bc:	21400017 	ldw	r5,0(r4)
8008a5c0:	18c00104 	addi	r3,r3,4
8008a5c4:	21000104 	addi	r4,r4,4
8008a5c8:	197fff15 	stw	r5,-4(r3)
8008a5cc:	223ffb36 	bltu	r4,r8,8008a5bc <__lshift+0x128>
8008a5d0:	003fe606 	br	8008a56c <__lshift+0xd8>
8008a5d4:	9c000084 	addi	r16,r19,2
8008a5d8:	003fe406 	br	8008a56c <__lshift+0xd8>

8008a5dc <__mcmp>:
8008a5dc:	20800417 	ldw	r2,16(r4)
8008a5e0:	28c00417 	ldw	r3,16(r5)
8008a5e4:	10c5c83a 	sub	r2,r2,r3
8008a5e8:	1000111e 	bne	r2,zero,8008a630 <__mcmp+0x54>
8008a5ec:	18c7883a 	add	r3,r3,r3
8008a5f0:	18c7883a 	add	r3,r3,r3
8008a5f4:	21000504 	addi	r4,r4,20
8008a5f8:	29400504 	addi	r5,r5,20
8008a5fc:	20c5883a 	add	r2,r4,r3
8008a600:	28cb883a 	add	r5,r5,r3
8008a604:	00000106 	br	8008a60c <__mcmp+0x30>
8008a608:	20800a2e 	bgeu	r4,r2,8008a634 <__mcmp+0x58>
8008a60c:	10bfff04 	addi	r2,r2,-4
8008a610:	297fff04 	addi	r5,r5,-4
8008a614:	11800017 	ldw	r6,0(r2)
8008a618:	28c00017 	ldw	r3,0(r5)
8008a61c:	30fffa26 	beq	r6,r3,8008a608 <__mcmp+0x2c>
8008a620:	30c00236 	bltu	r6,r3,8008a62c <__mcmp+0x50>
8008a624:	00800044 	movi	r2,1
8008a628:	f800283a 	ret
8008a62c:	00bfffc4 	movi	r2,-1
8008a630:	f800283a 	ret
8008a634:	0005883a 	mov	r2,zero
8008a638:	f800283a 	ret

8008a63c <__mdiff>:
8008a63c:	28c00417 	ldw	r3,16(r5)
8008a640:	30800417 	ldw	r2,16(r6)
8008a644:	defffa04 	addi	sp,sp,-24
8008a648:	dcc00315 	stw	r19,12(sp)
8008a64c:	dc800215 	stw	r18,8(sp)
8008a650:	dfc00515 	stw	ra,20(sp)
8008a654:	dd000415 	stw	r20,16(sp)
8008a658:	dc400115 	stw	r17,4(sp)
8008a65c:	dc000015 	stw	r16,0(sp)
8008a660:	1887c83a 	sub	r3,r3,r2
8008a664:	2825883a 	mov	r18,r5
8008a668:	3027883a 	mov	r19,r6
8008a66c:	1800141e 	bne	r3,zero,8008a6c0 <__mdiff+0x84>
8008a670:	1085883a 	add	r2,r2,r2
8008a674:	1085883a 	add	r2,r2,r2
8008a678:	2a000504 	addi	r8,r5,20
8008a67c:	34000504 	addi	r16,r6,20
8008a680:	4087883a 	add	r3,r8,r2
8008a684:	8085883a 	add	r2,r16,r2
8008a688:	00000106 	br	8008a690 <__mdiff+0x54>
8008a68c:	40c0592e 	bgeu	r8,r3,8008a7f4 <__mdiff+0x1b8>
8008a690:	18ffff04 	addi	r3,r3,-4
8008a694:	10bfff04 	addi	r2,r2,-4
8008a698:	19c00017 	ldw	r7,0(r3)
8008a69c:	11400017 	ldw	r5,0(r2)
8008a6a0:	397ffa26 	beq	r7,r5,8008a68c <__mdiff+0x50>
8008a6a4:	3940592e 	bgeu	r7,r5,8008a80c <__mdiff+0x1d0>
8008a6a8:	9005883a 	mov	r2,r18
8008a6ac:	4023883a 	mov	r17,r8
8008a6b0:	9825883a 	mov	r18,r19
8008a6b4:	05000044 	movi	r20,1
8008a6b8:	1027883a 	mov	r19,r2
8008a6bc:	00000406 	br	8008a6d0 <__mdiff+0x94>
8008a6c0:	18005616 	blt	r3,zero,8008a81c <__mdiff+0x1e0>
8008a6c4:	34400504 	addi	r17,r6,20
8008a6c8:	2c000504 	addi	r16,r5,20
8008a6cc:	0029883a 	mov	r20,zero
8008a6d0:	91400117 	ldw	r5,4(r18)
8008a6d4:	0089d140 	call	80089d14 <_Balloc>
8008a6d8:	92400417 	ldw	r9,16(r18)
8008a6dc:	9b000417 	ldw	r12,16(r19)
8008a6e0:	12c00504 	addi	r11,r2,20
8008a6e4:	4a51883a 	add	r8,r9,r9
8008a6e8:	6319883a 	add	r12,r12,r12
8008a6ec:	4211883a 	add	r8,r8,r8
8008a6f0:	6319883a 	add	r12,r12,r12
8008a6f4:	15000315 	stw	r20,12(r2)
8008a6f8:	8211883a 	add	r8,r16,r8
8008a6fc:	8b19883a 	add	r12,r17,r12
8008a700:	0007883a 	mov	r3,zero
8008a704:	81400017 	ldw	r5,0(r16)
8008a708:	89c00017 	ldw	r7,0(r17)
8008a70c:	59800104 	addi	r6,r11,4
8008a710:	293fffcc 	andi	r4,r5,65535
8008a714:	20c7883a 	add	r3,r4,r3
8008a718:	393fffcc 	andi	r4,r7,65535
8008a71c:	1909c83a 	sub	r4,r3,r4
8008a720:	280ad43a 	srli	r5,r5,16
8008a724:	380ed43a 	srli	r7,r7,16
8008a728:	2007d43a 	srai	r3,r4,16
8008a72c:	213fffcc 	andi	r4,r4,65535
8008a730:	29cbc83a 	sub	r5,r5,r7
8008a734:	28c7883a 	add	r3,r5,r3
8008a738:	180a943a 	slli	r5,r3,16
8008a73c:	8c400104 	addi	r17,r17,4
8008a740:	84000104 	addi	r16,r16,4
8008a744:	2908b03a 	or	r4,r5,r4
8008a748:	59000015 	stw	r4,0(r11)
8008a74c:	1807d43a 	srai	r3,r3,16
8008a750:	3015883a 	mov	r10,r6
8008a754:	3017883a 	mov	r11,r6
8008a758:	8b3fea36 	bltu	r17,r12,8008a704 <__mdiff+0xc8>
8008a75c:	8200162e 	bgeu	r16,r8,8008a7b8 <__mdiff+0x17c>
8008a760:	8017883a 	mov	r11,r16
8008a764:	59400017 	ldw	r5,0(r11)
8008a768:	31800104 	addi	r6,r6,4
8008a76c:	5ac00104 	addi	r11,r11,4
8008a770:	293fffcc 	andi	r4,r5,65535
8008a774:	20c7883a 	add	r3,r4,r3
8008a778:	280ed43a 	srli	r7,r5,16
8008a77c:	180bd43a 	srai	r5,r3,16
8008a780:	193fffcc 	andi	r4,r3,65535
8008a784:	3947883a 	add	r3,r7,r5
8008a788:	180a943a 	slli	r5,r3,16
8008a78c:	1807d43a 	srai	r3,r3,16
8008a790:	2908b03a 	or	r4,r5,r4
8008a794:	313fff15 	stw	r4,-4(r6)
8008a798:	5a3ff236 	bltu	r11,r8,8008a764 <__mdiff+0x128>
8008a79c:	0406303a 	nor	r3,zero,r16
8008a7a0:	1a07883a 	add	r3,r3,r8
8008a7a4:	1806d0ba 	srli	r3,r3,2
8008a7a8:	18c00044 	addi	r3,r3,1
8008a7ac:	18c7883a 	add	r3,r3,r3
8008a7b0:	18c7883a 	add	r3,r3,r3
8008a7b4:	50d5883a 	add	r10,r10,r3
8008a7b8:	50ffff04 	addi	r3,r10,-4
8008a7bc:	2000041e 	bne	r4,zero,8008a7d0 <__mdiff+0x194>
8008a7c0:	18ffff04 	addi	r3,r3,-4
8008a7c4:	19000017 	ldw	r4,0(r3)
8008a7c8:	4a7fffc4 	addi	r9,r9,-1
8008a7cc:	203ffc26 	beq	r4,zero,8008a7c0 <__mdiff+0x184>
8008a7d0:	12400415 	stw	r9,16(r2)
8008a7d4:	dfc00517 	ldw	ra,20(sp)
8008a7d8:	dd000417 	ldw	r20,16(sp)
8008a7dc:	dcc00317 	ldw	r19,12(sp)
8008a7e0:	dc800217 	ldw	r18,8(sp)
8008a7e4:	dc400117 	ldw	r17,4(sp)
8008a7e8:	dc000017 	ldw	r16,0(sp)
8008a7ec:	dec00604 	addi	sp,sp,24
8008a7f0:	f800283a 	ret
8008a7f4:	000b883a 	mov	r5,zero
8008a7f8:	0089d140 	call	80089d14 <_Balloc>
8008a7fc:	00c00044 	movi	r3,1
8008a800:	10c00415 	stw	r3,16(r2)
8008a804:	10000515 	stw	zero,20(r2)
8008a808:	003ff206 	br	8008a7d4 <__mdiff+0x198>
8008a80c:	8023883a 	mov	r17,r16
8008a810:	0029883a 	mov	r20,zero
8008a814:	4021883a 	mov	r16,r8
8008a818:	003fad06 	br	8008a6d0 <__mdiff+0x94>
8008a81c:	9005883a 	mov	r2,r18
8008a820:	94400504 	addi	r17,r18,20
8008a824:	9c000504 	addi	r16,r19,20
8008a828:	9825883a 	mov	r18,r19
8008a82c:	05000044 	movi	r20,1
8008a830:	1027883a 	mov	r19,r2
8008a834:	003fa606 	br	8008a6d0 <__mdiff+0x94>

8008a838 <__ulp>:
8008a838:	295ffc2c 	andhi	r5,r5,32752
8008a83c:	00bf3034 	movhi	r2,64704
8008a840:	2887883a 	add	r3,r5,r2
8008a844:	00c0020e 	bge	zero,r3,8008a850 <__ulp+0x18>
8008a848:	0005883a 	mov	r2,zero
8008a84c:	f800283a 	ret
8008a850:	00c7c83a 	sub	r3,zero,r3
8008a854:	1807d53a 	srai	r3,r3,20
8008a858:	008004c4 	movi	r2,19
8008a85c:	10c00b0e 	bge	r2,r3,8008a88c <__ulp+0x54>
8008a860:	18bffb04 	addi	r2,r3,-20
8008a864:	01000784 	movi	r4,30
8008a868:	0007883a 	mov	r3,zero
8008a86c:	20800516 	blt	r4,r2,8008a884 <__ulp+0x4c>
8008a870:	010007c4 	movi	r4,31
8008a874:	2089c83a 	sub	r4,r4,r2
8008a878:	00800044 	movi	r2,1
8008a87c:	1104983a 	sll	r2,r2,r4
8008a880:	f800283a 	ret
8008a884:	00800044 	movi	r2,1
8008a888:	f800283a 	ret
8008a88c:	01400234 	movhi	r5,8
8008a890:	28c7d83a 	sra	r3,r5,r3
8008a894:	0005883a 	mov	r2,zero
8008a898:	f800283a 	ret

8008a89c <__b2d>:
8008a89c:	defffa04 	addi	sp,sp,-24
8008a8a0:	dc000015 	stw	r16,0(sp)
8008a8a4:	24000417 	ldw	r16,16(r4)
8008a8a8:	dc400115 	stw	r17,4(sp)
8008a8ac:	24400504 	addi	r17,r4,20
8008a8b0:	8421883a 	add	r16,r16,r16
8008a8b4:	8421883a 	add	r16,r16,r16
8008a8b8:	8c21883a 	add	r16,r17,r16
8008a8bc:	dc800215 	stw	r18,8(sp)
8008a8c0:	84bfff17 	ldw	r18,-4(r16)
8008a8c4:	dd000415 	stw	r20,16(sp)
8008a8c8:	dcc00315 	stw	r19,12(sp)
8008a8cc:	9009883a 	mov	r4,r18
8008a8d0:	2829883a 	mov	r20,r5
8008a8d4:	dfc00515 	stw	ra,20(sp)
8008a8d8:	008a0080 	call	8008a008 <__hi0bits>
8008a8dc:	00c00804 	movi	r3,32
8008a8e0:	1889c83a 	sub	r4,r3,r2
8008a8e4:	a1000015 	stw	r4,0(r20)
8008a8e8:	01000284 	movi	r4,10
8008a8ec:	84ffff04 	addi	r19,r16,-4
8008a8f0:	20801216 	blt	r4,r2,8008a93c <__b2d+0xa0>
8008a8f4:	018002c4 	movi	r6,11
8008a8f8:	308dc83a 	sub	r6,r6,r2
8008a8fc:	9186d83a 	srl	r3,r18,r6
8008a900:	18cffc34 	orhi	r3,r3,16368
8008a904:	8cc0212e 	bgeu	r17,r19,8008a98c <__b2d+0xf0>
8008a908:	813ffe17 	ldw	r4,-8(r16)
8008a90c:	218cd83a 	srl	r6,r4,r6
8008a910:	10800544 	addi	r2,r2,21
8008a914:	9084983a 	sll	r2,r18,r2
8008a918:	1184b03a 	or	r2,r2,r6
8008a91c:	dfc00517 	ldw	ra,20(sp)
8008a920:	dd000417 	ldw	r20,16(sp)
8008a924:	dcc00317 	ldw	r19,12(sp)
8008a928:	dc800217 	ldw	r18,8(sp)
8008a92c:	dc400117 	ldw	r17,4(sp)
8008a930:	dc000017 	ldw	r16,0(sp)
8008a934:	dec00604 	addi	sp,sp,24
8008a938:	f800283a 	ret
8008a93c:	8cc00f2e 	bgeu	r17,r19,8008a97c <__b2d+0xe0>
8008a940:	117ffd44 	addi	r5,r2,-11
8008a944:	80bffe17 	ldw	r2,-8(r16)
8008a948:	28000e26 	beq	r5,zero,8008a984 <__b2d+0xe8>
8008a94c:	1949c83a 	sub	r4,r3,r5
8008a950:	9164983a 	sll	r18,r18,r5
8008a954:	1106d83a 	srl	r3,r2,r4
8008a958:	81bffe04 	addi	r6,r16,-8
8008a95c:	948ffc34 	orhi	r18,r18,16368
8008a960:	90c6b03a 	or	r3,r18,r3
8008a964:	89800e2e 	bgeu	r17,r6,8008a9a0 <__b2d+0x104>
8008a968:	81bffd17 	ldw	r6,-12(r16)
8008a96c:	1144983a 	sll	r2,r2,r5
8008a970:	310ad83a 	srl	r5,r6,r4
8008a974:	2884b03a 	or	r2,r5,r2
8008a978:	003fe806 	br	8008a91c <__b2d+0x80>
8008a97c:	10bffd44 	addi	r2,r2,-11
8008a980:	1000041e 	bne	r2,zero,8008a994 <__b2d+0xf8>
8008a984:	90cffc34 	orhi	r3,r18,16368
8008a988:	003fe406 	br	8008a91c <__b2d+0x80>
8008a98c:	000d883a 	mov	r6,zero
8008a990:	003fdf06 	br	8008a910 <__b2d+0x74>
8008a994:	90a4983a 	sll	r18,r18,r2
8008a998:	0005883a 	mov	r2,zero
8008a99c:	003ff906 	br	8008a984 <__b2d+0xe8>
8008a9a0:	1144983a 	sll	r2,r2,r5
8008a9a4:	003fdd06 	br	8008a91c <__b2d+0x80>

8008a9a8 <__d2b>:
8008a9a8:	defff804 	addi	sp,sp,-32
8008a9ac:	dc000215 	stw	r16,8(sp)
8008a9b0:	3021883a 	mov	r16,r6
8008a9b4:	dc400315 	stw	r17,12(sp)
8008a9b8:	8022907a 	slli	r17,r16,1
8008a9bc:	dd000615 	stw	r20,24(sp)
8008a9c0:	2829883a 	mov	r20,r5
8008a9c4:	01400044 	movi	r5,1
8008a9c8:	dcc00515 	stw	r19,20(sp)
8008a9cc:	dc800415 	stw	r18,16(sp)
8008a9d0:	dfc00715 	stw	ra,28(sp)
8008a9d4:	3825883a 	mov	r18,r7
8008a9d8:	8822d57a 	srli	r17,r17,21
8008a9dc:	0089d140 	call	80089d14 <_Balloc>
8008a9e0:	1027883a 	mov	r19,r2
8008a9e4:	00800434 	movhi	r2,16
8008a9e8:	10bfffc4 	addi	r2,r2,-1
8008a9ec:	808c703a 	and	r6,r16,r2
8008a9f0:	88000126 	beq	r17,zero,8008a9f8 <__d2b+0x50>
8008a9f4:	31800434 	orhi	r6,r6,16
8008a9f8:	d9800015 	stw	r6,0(sp)
8008a9fc:	a0002426 	beq	r20,zero,8008aa90 <__d2b+0xe8>
8008aa00:	d9000104 	addi	r4,sp,4
8008aa04:	dd000115 	stw	r20,4(sp)
8008aa08:	008a0700 	call	8008a070 <__lo0bits>
8008aa0c:	d8c00017 	ldw	r3,0(sp)
8008aa10:	10002f1e 	bne	r2,zero,8008aad0 <__d2b+0x128>
8008aa14:	d9000117 	ldw	r4,4(sp)
8008aa18:	99000515 	stw	r4,20(r19)
8008aa1c:	1821003a 	cmpeq	r16,r3,zero
8008aa20:	01000084 	movi	r4,2
8008aa24:	2421c83a 	sub	r16,r4,r16
8008aa28:	98c00615 	stw	r3,24(r19)
8008aa2c:	9c000415 	stw	r16,16(r19)
8008aa30:	88001f1e 	bne	r17,zero,8008aab0 <__d2b+0x108>
8008aa34:	10bef384 	addi	r2,r2,-1074
8008aa38:	90800015 	stw	r2,0(r18)
8008aa3c:	00900034 	movhi	r2,16384
8008aa40:	10bfffc4 	addi	r2,r2,-1
8008aa44:	8085883a 	add	r2,r16,r2
8008aa48:	1085883a 	add	r2,r2,r2
8008aa4c:	1085883a 	add	r2,r2,r2
8008aa50:	9885883a 	add	r2,r19,r2
8008aa54:	11000517 	ldw	r4,20(r2)
8008aa58:	8020917a 	slli	r16,r16,5
8008aa5c:	008a0080 	call	8008a008 <__hi0bits>
8008aa60:	d8c00817 	ldw	r3,32(sp)
8008aa64:	8085c83a 	sub	r2,r16,r2
8008aa68:	18800015 	stw	r2,0(r3)
8008aa6c:	9805883a 	mov	r2,r19
8008aa70:	dfc00717 	ldw	ra,28(sp)
8008aa74:	dd000617 	ldw	r20,24(sp)
8008aa78:	dcc00517 	ldw	r19,20(sp)
8008aa7c:	dc800417 	ldw	r18,16(sp)
8008aa80:	dc400317 	ldw	r17,12(sp)
8008aa84:	dc000217 	ldw	r16,8(sp)
8008aa88:	dec00804 	addi	sp,sp,32
8008aa8c:	f800283a 	ret
8008aa90:	d809883a 	mov	r4,sp
8008aa94:	008a0700 	call	8008a070 <__lo0bits>
8008aa98:	d8c00017 	ldw	r3,0(sp)
8008aa9c:	04000044 	movi	r16,1
8008aaa0:	9c000415 	stw	r16,16(r19)
8008aaa4:	98c00515 	stw	r3,20(r19)
8008aaa8:	10800804 	addi	r2,r2,32
8008aaac:	883fe126 	beq	r17,zero,8008aa34 <__d2b+0x8c>
8008aab0:	00c00d44 	movi	r3,53
8008aab4:	8c7ef344 	addi	r17,r17,-1075
8008aab8:	88a3883a 	add	r17,r17,r2
8008aabc:	1885c83a 	sub	r2,r3,r2
8008aac0:	d8c00817 	ldw	r3,32(sp)
8008aac4:	94400015 	stw	r17,0(r18)
8008aac8:	18800015 	stw	r2,0(r3)
8008aacc:	003fe706 	br	8008aa6c <__d2b+0xc4>
8008aad0:	01000804 	movi	r4,32
8008aad4:	2089c83a 	sub	r4,r4,r2
8008aad8:	1908983a 	sll	r4,r3,r4
8008aadc:	d9400117 	ldw	r5,4(sp)
8008aae0:	1886d83a 	srl	r3,r3,r2
8008aae4:	2148b03a 	or	r4,r4,r5
8008aae8:	99000515 	stw	r4,20(r19)
8008aaec:	d8c00015 	stw	r3,0(sp)
8008aaf0:	003fca06 	br	8008aa1c <__d2b+0x74>

8008aaf4 <__ratio>:
8008aaf4:	defff904 	addi	sp,sp,-28
8008aaf8:	dc400315 	stw	r17,12(sp)
8008aafc:	2823883a 	mov	r17,r5
8008ab00:	d9400104 	addi	r5,sp,4
8008ab04:	dfc00615 	stw	ra,24(sp)
8008ab08:	dcc00515 	stw	r19,20(sp)
8008ab0c:	dc800415 	stw	r18,16(sp)
8008ab10:	2027883a 	mov	r19,r4
8008ab14:	dc000215 	stw	r16,8(sp)
8008ab18:	008a89c0 	call	8008a89c <__b2d>
8008ab1c:	d80b883a 	mov	r5,sp
8008ab20:	8809883a 	mov	r4,r17
8008ab24:	1025883a 	mov	r18,r2
8008ab28:	1821883a 	mov	r16,r3
8008ab2c:	008a89c0 	call	8008a89c <__b2d>
8008ab30:	8a000417 	ldw	r8,16(r17)
8008ab34:	99000417 	ldw	r4,16(r19)
8008ab38:	d9400117 	ldw	r5,4(sp)
8008ab3c:	2209c83a 	sub	r4,r4,r8
8008ab40:	2010917a 	slli	r8,r4,5
8008ab44:	d9000017 	ldw	r4,0(sp)
8008ab48:	2909c83a 	sub	r4,r5,r4
8008ab4c:	4109883a 	add	r4,r8,r4
8008ab50:	01000e0e 	bge	zero,r4,8008ab8c <__ratio+0x98>
8008ab54:	2008953a 	slli	r4,r4,20
8008ab58:	2421883a 	add	r16,r4,r16
8008ab5c:	100d883a 	mov	r6,r2
8008ab60:	180f883a 	mov	r7,r3
8008ab64:	9009883a 	mov	r4,r18
8008ab68:	800b883a 	mov	r5,r16
8008ab6c:	008ffdc0 	call	8008ffdc <__divdf3>
8008ab70:	dfc00617 	ldw	ra,24(sp)
8008ab74:	dcc00517 	ldw	r19,20(sp)
8008ab78:	dc800417 	ldw	r18,16(sp)
8008ab7c:	dc400317 	ldw	r17,12(sp)
8008ab80:	dc000217 	ldw	r16,8(sp)
8008ab84:	dec00704 	addi	sp,sp,28
8008ab88:	f800283a 	ret
8008ab8c:	2008953a 	slli	r4,r4,20
8008ab90:	1907c83a 	sub	r3,r3,r4
8008ab94:	003ff106 	br	8008ab5c <__ratio+0x68>

8008ab98 <_mprec_log10>:
8008ab98:	defffe04 	addi	sp,sp,-8
8008ab9c:	dc000015 	stw	r16,0(sp)
8008aba0:	dfc00115 	stw	ra,4(sp)
8008aba4:	008005c4 	movi	r2,23
8008aba8:	2021883a 	mov	r16,r4
8008abac:	11000d0e 	bge	r2,r4,8008abe4 <_mprec_log10+0x4c>
8008abb0:	0005883a 	mov	r2,zero
8008abb4:	00cffc34 	movhi	r3,16368
8008abb8:	843fffc4 	addi	r16,r16,-1
8008abbc:	000d883a 	mov	r6,zero
8008abc0:	01d00934 	movhi	r7,16420
8008abc4:	1009883a 	mov	r4,r2
8008abc8:	180b883a 	mov	r5,r3
8008abcc:	00811180 	call	80081118 <__muldf3>
8008abd0:	803ff91e 	bne	r16,zero,8008abb8 <_mprec_log10+0x20>
8008abd4:	dfc00117 	ldw	ra,4(sp)
8008abd8:	dc000017 	ldw	r16,0(sp)
8008abdc:	dec00204 	addi	sp,sp,8
8008abe0:	f800283a 	ret
8008abe4:	202090fa 	slli	r16,r4,3
8008abe8:	00a00274 	movhi	r2,32777
8008abec:	109ac004 	addi	r2,r2,27392
8008abf0:	1421883a 	add	r16,r2,r16
8008abf4:	80800017 	ldw	r2,0(r16)
8008abf8:	80c00117 	ldw	r3,4(r16)
8008abfc:	dfc00117 	ldw	ra,4(sp)
8008ac00:	dc000017 	ldw	r16,0(sp)
8008ac04:	dec00204 	addi	sp,sp,8
8008ac08:	f800283a 	ret

8008ac0c <__copybits>:
8008ac0c:	297fffc4 	addi	r5,r5,-1
8008ac10:	280fd17a 	srai	r7,r5,5
8008ac14:	30c00417 	ldw	r3,16(r6)
8008ac18:	30800504 	addi	r2,r6,20
8008ac1c:	39c00044 	addi	r7,r7,1
8008ac20:	18c7883a 	add	r3,r3,r3
8008ac24:	39cf883a 	add	r7,r7,r7
8008ac28:	18c7883a 	add	r3,r3,r3
8008ac2c:	39cf883a 	add	r7,r7,r7
8008ac30:	10c7883a 	add	r3,r2,r3
8008ac34:	21cf883a 	add	r7,r4,r7
8008ac38:	10c00d2e 	bgeu	r2,r3,8008ac70 <__copybits+0x64>
8008ac3c:	200b883a 	mov	r5,r4
8008ac40:	12000017 	ldw	r8,0(r2)
8008ac44:	29400104 	addi	r5,r5,4
8008ac48:	10800104 	addi	r2,r2,4
8008ac4c:	2a3fff15 	stw	r8,-4(r5)
8008ac50:	10fffb36 	bltu	r2,r3,8008ac40 <__copybits+0x34>
8008ac54:	1985c83a 	sub	r2,r3,r6
8008ac58:	10bffac4 	addi	r2,r2,-21
8008ac5c:	1004d0ba 	srli	r2,r2,2
8008ac60:	10800044 	addi	r2,r2,1
8008ac64:	1085883a 	add	r2,r2,r2
8008ac68:	1085883a 	add	r2,r2,r2
8008ac6c:	2089883a 	add	r4,r4,r2
8008ac70:	21c0032e 	bgeu	r4,r7,8008ac80 <__copybits+0x74>
8008ac74:	20000015 	stw	zero,0(r4)
8008ac78:	21000104 	addi	r4,r4,4
8008ac7c:	21fffd36 	bltu	r4,r7,8008ac74 <__copybits+0x68>
8008ac80:	f800283a 	ret

8008ac84 <__any_on>:
8008ac84:	20c00417 	ldw	r3,16(r4)
8008ac88:	2805d17a 	srai	r2,r5,5
8008ac8c:	21000504 	addi	r4,r4,20
8008ac90:	18800d0e 	bge	r3,r2,8008acc8 <__any_on+0x44>
8008ac94:	18c7883a 	add	r3,r3,r3
8008ac98:	18c7883a 	add	r3,r3,r3
8008ac9c:	20c7883a 	add	r3,r4,r3
8008aca0:	20c0192e 	bgeu	r4,r3,8008ad08 <__any_on+0x84>
8008aca4:	18bfff17 	ldw	r2,-4(r3)
8008aca8:	18ffff04 	addi	r3,r3,-4
8008acac:	1000041e 	bne	r2,zero,8008acc0 <__any_on+0x3c>
8008acb0:	20c0142e 	bgeu	r4,r3,8008ad04 <__any_on+0x80>
8008acb4:	18ffff04 	addi	r3,r3,-4
8008acb8:	19400017 	ldw	r5,0(r3)
8008acbc:	283ffc26 	beq	r5,zero,8008acb0 <__any_on+0x2c>
8008acc0:	00800044 	movi	r2,1
8008acc4:	f800283a 	ret
8008acc8:	10c00a0e 	bge	r2,r3,8008acf4 <__any_on+0x70>
8008accc:	1085883a 	add	r2,r2,r2
8008acd0:	1085883a 	add	r2,r2,r2
8008acd4:	294007cc 	andi	r5,r5,31
8008acd8:	2087883a 	add	r3,r4,r2
8008acdc:	283ff026 	beq	r5,zero,8008aca0 <__any_on+0x1c>
8008ace0:	19800017 	ldw	r6,0(r3)
8008ace4:	3144d83a 	srl	r2,r6,r5
8008ace8:	114a983a 	sll	r5,r2,r5
8008acec:	317ff41e 	bne	r6,r5,8008acc0 <__any_on+0x3c>
8008acf0:	003feb06 	br	8008aca0 <__any_on+0x1c>
8008acf4:	1085883a 	add	r2,r2,r2
8008acf8:	1085883a 	add	r2,r2,r2
8008acfc:	2087883a 	add	r3,r4,r2
8008ad00:	003fe706 	br	8008aca0 <__any_on+0x1c>
8008ad04:	f800283a 	ret
8008ad08:	0005883a 	mov	r2,zero
8008ad0c:	f800283a 	ret

8008ad10 <_realloc_r>:
8008ad10:	defff604 	addi	sp,sp,-40
8008ad14:	dc800215 	stw	r18,8(sp)
8008ad18:	dfc00915 	stw	ra,36(sp)
8008ad1c:	df000815 	stw	fp,32(sp)
8008ad20:	ddc00715 	stw	r23,28(sp)
8008ad24:	dd800615 	stw	r22,24(sp)
8008ad28:	dd400515 	stw	r21,20(sp)
8008ad2c:	dd000415 	stw	r20,16(sp)
8008ad30:	dcc00315 	stw	r19,12(sp)
8008ad34:	dc400115 	stw	r17,4(sp)
8008ad38:	dc000015 	stw	r16,0(sp)
8008ad3c:	3025883a 	mov	r18,r6
8008ad40:	2800b726 	beq	r5,zero,8008b020 <_realloc_r+0x310>
8008ad44:	282b883a 	mov	r21,r5
8008ad48:	2029883a 	mov	r20,r4
8008ad4c:	0091a140 	call	80091a14 <__malloc_lock>
8008ad50:	a8bfff17 	ldw	r2,-4(r21)
8008ad54:	043fff04 	movi	r16,-4
8008ad58:	90c002c4 	addi	r3,r18,11
8008ad5c:	01000584 	movi	r4,22
8008ad60:	acfffe04 	addi	r19,r21,-8
8008ad64:	1420703a 	and	r16,r2,r16
8008ad68:	20c0332e 	bgeu	r4,r3,8008ae38 <_realloc_r+0x128>
8008ad6c:	047ffe04 	movi	r17,-8
8008ad70:	1c62703a 	and	r17,r3,r17
8008ad74:	8807883a 	mov	r3,r17
8008ad78:	88005816 	blt	r17,zero,8008aedc <_realloc_r+0x1cc>
8008ad7c:	8c805736 	bltu	r17,r18,8008aedc <_realloc_r+0x1cc>
8008ad80:	80c0300e 	bge	r16,r3,8008ae44 <_realloc_r+0x134>
8008ad84:	07200274 	movhi	fp,32777
8008ad88:	e71cee04 	addi	fp,fp,29624
8008ad8c:	e1c00217 	ldw	r7,8(fp)
8008ad90:	9c09883a 	add	r4,r19,r16
8008ad94:	22000117 	ldw	r8,4(r4)
8008ad98:	21c06326 	beq	r4,r7,8008af28 <_realloc_r+0x218>
8008ad9c:	017fff84 	movi	r5,-2
8008ada0:	414a703a 	and	r5,r8,r5
8008ada4:	214b883a 	add	r5,r4,r5
8008ada8:	29800117 	ldw	r6,4(r5)
8008adac:	3180004c 	andi	r6,r6,1
8008adb0:	30003f26 	beq	r6,zero,8008aeb0 <_realloc_r+0x1a0>
8008adb4:	1080004c 	andi	r2,r2,1
8008adb8:	10008326 	beq	r2,zero,8008afc8 <_realloc_r+0x2b8>
8008adbc:	900b883a 	mov	r5,r18
8008adc0:	a009883a 	mov	r4,r20
8008adc4:	00890580 	call	80089058 <_malloc_r>
8008adc8:	1025883a 	mov	r18,r2
8008adcc:	10011e26 	beq	r2,zero,8008b248 <_realloc_r+0x538>
8008add0:	a93fff17 	ldw	r4,-4(r21)
8008add4:	10fffe04 	addi	r3,r2,-8
8008add8:	00bfff84 	movi	r2,-2
8008addc:	2084703a 	and	r2,r4,r2
8008ade0:	9885883a 	add	r2,r19,r2
8008ade4:	1880ee26 	beq	r3,r2,8008b1a0 <_realloc_r+0x490>
8008ade8:	81bfff04 	addi	r6,r16,-4
8008adec:	00800904 	movi	r2,36
8008adf0:	1180b836 	bltu	r2,r6,8008b0d4 <_realloc_r+0x3c4>
8008adf4:	00c004c4 	movi	r3,19
8008adf8:	19809636 	bltu	r3,r6,8008b054 <_realloc_r+0x344>
8008adfc:	9005883a 	mov	r2,r18
8008ae00:	a807883a 	mov	r3,r21
8008ae04:	19000017 	ldw	r4,0(r3)
8008ae08:	11000015 	stw	r4,0(r2)
8008ae0c:	19000117 	ldw	r4,4(r3)
8008ae10:	11000115 	stw	r4,4(r2)
8008ae14:	18c00217 	ldw	r3,8(r3)
8008ae18:	10c00215 	stw	r3,8(r2)
8008ae1c:	a80b883a 	mov	r5,r21
8008ae20:	a009883a 	mov	r4,r20
8008ae24:	008846c0 	call	8008846c <_free_r>
8008ae28:	a009883a 	mov	r4,r20
8008ae2c:	0091a380 	call	80091a38 <__malloc_unlock>
8008ae30:	9005883a 	mov	r2,r18
8008ae34:	00001206 	br	8008ae80 <_realloc_r+0x170>
8008ae38:	00c00404 	movi	r3,16
8008ae3c:	1823883a 	mov	r17,r3
8008ae40:	003fce06 	br	8008ad7c <_realloc_r+0x6c>
8008ae44:	a825883a 	mov	r18,r21
8008ae48:	8445c83a 	sub	r2,r16,r17
8008ae4c:	00c003c4 	movi	r3,15
8008ae50:	18802636 	bltu	r3,r2,8008aeec <_realloc_r+0x1dc>
8008ae54:	99800117 	ldw	r6,4(r19)
8008ae58:	9c07883a 	add	r3,r19,r16
8008ae5c:	3180004c 	andi	r6,r6,1
8008ae60:	3420b03a 	or	r16,r6,r16
8008ae64:	9c000115 	stw	r16,4(r19)
8008ae68:	18800117 	ldw	r2,4(r3)
8008ae6c:	10800054 	ori	r2,r2,1
8008ae70:	18800115 	stw	r2,4(r3)
8008ae74:	a009883a 	mov	r4,r20
8008ae78:	0091a380 	call	80091a38 <__malloc_unlock>
8008ae7c:	9005883a 	mov	r2,r18
8008ae80:	dfc00917 	ldw	ra,36(sp)
8008ae84:	df000817 	ldw	fp,32(sp)
8008ae88:	ddc00717 	ldw	r23,28(sp)
8008ae8c:	dd800617 	ldw	r22,24(sp)
8008ae90:	dd400517 	ldw	r21,20(sp)
8008ae94:	dd000417 	ldw	r20,16(sp)
8008ae98:	dcc00317 	ldw	r19,12(sp)
8008ae9c:	dc800217 	ldw	r18,8(sp)
8008aea0:	dc400117 	ldw	r17,4(sp)
8008aea4:	dc000017 	ldw	r16,0(sp)
8008aea8:	dec00a04 	addi	sp,sp,40
8008aeac:	f800283a 	ret
8008aeb0:	017fff04 	movi	r5,-4
8008aeb4:	414a703a 	and	r5,r8,r5
8008aeb8:	814d883a 	add	r6,r16,r5
8008aebc:	30c01f16 	blt	r6,r3,8008af3c <_realloc_r+0x22c>
8008aec0:	20800317 	ldw	r2,12(r4)
8008aec4:	20c00217 	ldw	r3,8(r4)
8008aec8:	a825883a 	mov	r18,r21
8008aecc:	3021883a 	mov	r16,r6
8008aed0:	18800315 	stw	r2,12(r3)
8008aed4:	10c00215 	stw	r3,8(r2)
8008aed8:	003fdb06 	br	8008ae48 <_realloc_r+0x138>
8008aedc:	00800304 	movi	r2,12
8008aee0:	a0800015 	stw	r2,0(r20)
8008aee4:	0005883a 	mov	r2,zero
8008aee8:	003fe506 	br	8008ae80 <_realloc_r+0x170>
8008aeec:	98c00117 	ldw	r3,4(r19)
8008aef0:	9c4b883a 	add	r5,r19,r17
8008aef4:	11000054 	ori	r4,r2,1
8008aef8:	18c0004c 	andi	r3,r3,1
8008aefc:	1c62b03a 	or	r17,r3,r17
8008af00:	9c400115 	stw	r17,4(r19)
8008af04:	29000115 	stw	r4,4(r5)
8008af08:	2885883a 	add	r2,r5,r2
8008af0c:	10c00117 	ldw	r3,4(r2)
8008af10:	29400204 	addi	r5,r5,8
8008af14:	a009883a 	mov	r4,r20
8008af18:	18c00054 	ori	r3,r3,1
8008af1c:	10c00115 	stw	r3,4(r2)
8008af20:	008846c0 	call	8008846c <_free_r>
8008af24:	003fd306 	br	8008ae74 <_realloc_r+0x164>
8008af28:	017fff04 	movi	r5,-4
8008af2c:	414a703a 	and	r5,r8,r5
8008af30:	89800404 	addi	r6,r17,16
8008af34:	8151883a 	add	r8,r16,r5
8008af38:	4180590e 	bge	r8,r6,8008b0a0 <_realloc_r+0x390>
8008af3c:	1080004c 	andi	r2,r2,1
8008af40:	103f9e1e 	bne	r2,zero,8008adbc <_realloc_r+0xac>
8008af44:	adbffe17 	ldw	r22,-8(r21)
8008af48:	00bfff04 	movi	r2,-4
8008af4c:	9dadc83a 	sub	r22,r19,r22
8008af50:	b1800117 	ldw	r6,4(r22)
8008af54:	3084703a 	and	r2,r6,r2
8008af58:	20002026 	beq	r4,zero,8008afdc <_realloc_r+0x2cc>
8008af5c:	80af883a 	add	r23,r16,r2
8008af60:	b96f883a 	add	r23,r23,r5
8008af64:	21c05f26 	beq	r4,r7,8008b0e4 <_realloc_r+0x3d4>
8008af68:	b8c01c16 	blt	r23,r3,8008afdc <_realloc_r+0x2cc>
8008af6c:	20800317 	ldw	r2,12(r4)
8008af70:	20c00217 	ldw	r3,8(r4)
8008af74:	81bfff04 	addi	r6,r16,-4
8008af78:	01000904 	movi	r4,36
8008af7c:	18800315 	stw	r2,12(r3)
8008af80:	10c00215 	stw	r3,8(r2)
8008af84:	b0c00217 	ldw	r3,8(r22)
8008af88:	b0800317 	ldw	r2,12(r22)
8008af8c:	b4800204 	addi	r18,r22,8
8008af90:	18800315 	stw	r2,12(r3)
8008af94:	10c00215 	stw	r3,8(r2)
8008af98:	21801b36 	bltu	r4,r6,8008b008 <_realloc_r+0x2f8>
8008af9c:	008004c4 	movi	r2,19
8008afa0:	1180352e 	bgeu	r2,r6,8008b078 <_realloc_r+0x368>
8008afa4:	a8800017 	ldw	r2,0(r21)
8008afa8:	b0800215 	stw	r2,8(r22)
8008afac:	a8800117 	ldw	r2,4(r21)
8008afb0:	b0800315 	stw	r2,12(r22)
8008afb4:	008006c4 	movi	r2,27
8008afb8:	11807f36 	bltu	r2,r6,8008b1b8 <_realloc_r+0x4a8>
8008afbc:	b0800404 	addi	r2,r22,16
8008afc0:	ad400204 	addi	r21,r21,8
8008afc4:	00002d06 	br	8008b07c <_realloc_r+0x36c>
8008afc8:	adbffe17 	ldw	r22,-8(r21)
8008afcc:	00bfff04 	movi	r2,-4
8008afd0:	9dadc83a 	sub	r22,r19,r22
8008afd4:	b1000117 	ldw	r4,4(r22)
8008afd8:	2084703a 	and	r2,r4,r2
8008afdc:	b03f7726 	beq	r22,zero,8008adbc <_realloc_r+0xac>
8008afe0:	80af883a 	add	r23,r16,r2
8008afe4:	b8ff7516 	blt	r23,r3,8008adbc <_realloc_r+0xac>
8008afe8:	b0800317 	ldw	r2,12(r22)
8008afec:	b0c00217 	ldw	r3,8(r22)
8008aff0:	81bfff04 	addi	r6,r16,-4
8008aff4:	01000904 	movi	r4,36
8008aff8:	18800315 	stw	r2,12(r3)
8008affc:	10c00215 	stw	r3,8(r2)
8008b000:	b4800204 	addi	r18,r22,8
8008b004:	21bfe52e 	bgeu	r4,r6,8008af9c <_realloc_r+0x28c>
8008b008:	a80b883a 	mov	r5,r21
8008b00c:	9009883a 	mov	r4,r18
8008b010:	0089a900 	call	80089a90 <memmove>
8008b014:	b821883a 	mov	r16,r23
8008b018:	b027883a 	mov	r19,r22
8008b01c:	003f8a06 	br	8008ae48 <_realloc_r+0x138>
8008b020:	300b883a 	mov	r5,r6
8008b024:	dfc00917 	ldw	ra,36(sp)
8008b028:	df000817 	ldw	fp,32(sp)
8008b02c:	ddc00717 	ldw	r23,28(sp)
8008b030:	dd800617 	ldw	r22,24(sp)
8008b034:	dd400517 	ldw	r21,20(sp)
8008b038:	dd000417 	ldw	r20,16(sp)
8008b03c:	dcc00317 	ldw	r19,12(sp)
8008b040:	dc800217 	ldw	r18,8(sp)
8008b044:	dc400117 	ldw	r17,4(sp)
8008b048:	dc000017 	ldw	r16,0(sp)
8008b04c:	dec00a04 	addi	sp,sp,40
8008b050:	00890581 	jmpi	80089058 <_malloc_r>
8008b054:	a8c00017 	ldw	r3,0(r21)
8008b058:	90c00015 	stw	r3,0(r18)
8008b05c:	a8c00117 	ldw	r3,4(r21)
8008b060:	90c00115 	stw	r3,4(r18)
8008b064:	00c006c4 	movi	r3,27
8008b068:	19804536 	bltu	r3,r6,8008b180 <_realloc_r+0x470>
8008b06c:	90800204 	addi	r2,r18,8
8008b070:	a8c00204 	addi	r3,r21,8
8008b074:	003f6306 	br	8008ae04 <_realloc_r+0xf4>
8008b078:	9005883a 	mov	r2,r18
8008b07c:	a8c00017 	ldw	r3,0(r21)
8008b080:	b821883a 	mov	r16,r23
8008b084:	b027883a 	mov	r19,r22
8008b088:	10c00015 	stw	r3,0(r2)
8008b08c:	a8c00117 	ldw	r3,4(r21)
8008b090:	10c00115 	stw	r3,4(r2)
8008b094:	a8c00217 	ldw	r3,8(r21)
8008b098:	10c00215 	stw	r3,8(r2)
8008b09c:	003f6a06 	br	8008ae48 <_realloc_r+0x138>
8008b0a0:	9c67883a 	add	r19,r19,r17
8008b0a4:	4445c83a 	sub	r2,r8,r17
8008b0a8:	e4c00215 	stw	r19,8(fp)
8008b0ac:	10800054 	ori	r2,r2,1
8008b0b0:	98800115 	stw	r2,4(r19)
8008b0b4:	a8bfff17 	ldw	r2,-4(r21)
8008b0b8:	a009883a 	mov	r4,r20
8008b0bc:	1080004c 	andi	r2,r2,1
8008b0c0:	1462b03a 	or	r17,r2,r17
8008b0c4:	ac7fff15 	stw	r17,-4(r21)
8008b0c8:	0091a380 	call	80091a38 <__malloc_unlock>
8008b0cc:	a805883a 	mov	r2,r21
8008b0d0:	003f6b06 	br	8008ae80 <_realloc_r+0x170>
8008b0d4:	a80b883a 	mov	r5,r21
8008b0d8:	9009883a 	mov	r4,r18
8008b0dc:	0089a900 	call	80089a90 <memmove>
8008b0e0:	003f4e06 	br	8008ae1c <_realloc_r+0x10c>
8008b0e4:	89000404 	addi	r4,r17,16
8008b0e8:	b93fbc16 	blt	r23,r4,8008afdc <_realloc_r+0x2cc>
8008b0ec:	b0800317 	ldw	r2,12(r22)
8008b0f0:	b0c00217 	ldw	r3,8(r22)
8008b0f4:	81bfff04 	addi	r6,r16,-4
8008b0f8:	01000904 	movi	r4,36
8008b0fc:	18800315 	stw	r2,12(r3)
8008b100:	10c00215 	stw	r3,8(r2)
8008b104:	b4800204 	addi	r18,r22,8
8008b108:	21804336 	bltu	r4,r6,8008b218 <_realloc_r+0x508>
8008b10c:	008004c4 	movi	r2,19
8008b110:	11803f2e 	bgeu	r2,r6,8008b210 <_realloc_r+0x500>
8008b114:	a8800017 	ldw	r2,0(r21)
8008b118:	b0800215 	stw	r2,8(r22)
8008b11c:	a8800117 	ldw	r2,4(r21)
8008b120:	b0800315 	stw	r2,12(r22)
8008b124:	008006c4 	movi	r2,27
8008b128:	11803f36 	bltu	r2,r6,8008b228 <_realloc_r+0x518>
8008b12c:	b0800404 	addi	r2,r22,16
8008b130:	ad400204 	addi	r21,r21,8
8008b134:	a8c00017 	ldw	r3,0(r21)
8008b138:	10c00015 	stw	r3,0(r2)
8008b13c:	a8c00117 	ldw	r3,4(r21)
8008b140:	10c00115 	stw	r3,4(r2)
8008b144:	a8c00217 	ldw	r3,8(r21)
8008b148:	10c00215 	stw	r3,8(r2)
8008b14c:	b447883a 	add	r3,r22,r17
8008b150:	bc45c83a 	sub	r2,r23,r17
8008b154:	e0c00215 	stw	r3,8(fp)
8008b158:	10800054 	ori	r2,r2,1
8008b15c:	18800115 	stw	r2,4(r3)
8008b160:	b0800117 	ldw	r2,4(r22)
8008b164:	a009883a 	mov	r4,r20
8008b168:	1080004c 	andi	r2,r2,1
8008b16c:	1462b03a 	or	r17,r2,r17
8008b170:	b4400115 	stw	r17,4(r22)
8008b174:	0091a380 	call	80091a38 <__malloc_unlock>
8008b178:	9005883a 	mov	r2,r18
8008b17c:	003f4006 	br	8008ae80 <_realloc_r+0x170>
8008b180:	a8c00217 	ldw	r3,8(r21)
8008b184:	90c00215 	stw	r3,8(r18)
8008b188:	a8c00317 	ldw	r3,12(r21)
8008b18c:	90c00315 	stw	r3,12(r18)
8008b190:	30801126 	beq	r6,r2,8008b1d8 <_realloc_r+0x4c8>
8008b194:	90800404 	addi	r2,r18,16
8008b198:	a8c00404 	addi	r3,r21,16
8008b19c:	003f1906 	br	8008ae04 <_realloc_r+0xf4>
8008b1a0:	90ffff17 	ldw	r3,-4(r18)
8008b1a4:	00bfff04 	movi	r2,-4
8008b1a8:	a825883a 	mov	r18,r21
8008b1ac:	1884703a 	and	r2,r3,r2
8008b1b0:	80a1883a 	add	r16,r16,r2
8008b1b4:	003f2406 	br	8008ae48 <_realloc_r+0x138>
8008b1b8:	a8800217 	ldw	r2,8(r21)
8008b1bc:	b0800415 	stw	r2,16(r22)
8008b1c0:	a8800317 	ldw	r2,12(r21)
8008b1c4:	b0800515 	stw	r2,20(r22)
8008b1c8:	31000a26 	beq	r6,r4,8008b1f4 <_realloc_r+0x4e4>
8008b1cc:	b0800604 	addi	r2,r22,24
8008b1d0:	ad400404 	addi	r21,r21,16
8008b1d4:	003fa906 	br	8008b07c <_realloc_r+0x36c>
8008b1d8:	a9000417 	ldw	r4,16(r21)
8008b1dc:	90800604 	addi	r2,r18,24
8008b1e0:	a8c00604 	addi	r3,r21,24
8008b1e4:	91000415 	stw	r4,16(r18)
8008b1e8:	a9000517 	ldw	r4,20(r21)
8008b1ec:	91000515 	stw	r4,20(r18)
8008b1f0:	003f0406 	br	8008ae04 <_realloc_r+0xf4>
8008b1f4:	a8c00417 	ldw	r3,16(r21)
8008b1f8:	ad400604 	addi	r21,r21,24
8008b1fc:	b0800804 	addi	r2,r22,32
8008b200:	b0c00615 	stw	r3,24(r22)
8008b204:	a8ffff17 	ldw	r3,-4(r21)
8008b208:	b0c00715 	stw	r3,28(r22)
8008b20c:	003f9b06 	br	8008b07c <_realloc_r+0x36c>
8008b210:	9005883a 	mov	r2,r18
8008b214:	003fc706 	br	8008b134 <_realloc_r+0x424>
8008b218:	a80b883a 	mov	r5,r21
8008b21c:	9009883a 	mov	r4,r18
8008b220:	0089a900 	call	80089a90 <memmove>
8008b224:	003fc906 	br	8008b14c <_realloc_r+0x43c>
8008b228:	a8800217 	ldw	r2,8(r21)
8008b22c:	b0800415 	stw	r2,16(r22)
8008b230:	a8800317 	ldw	r2,12(r21)
8008b234:	b0800515 	stw	r2,20(r22)
8008b238:	31000726 	beq	r6,r4,8008b258 <_realloc_r+0x548>
8008b23c:	b0800604 	addi	r2,r22,24
8008b240:	ad400404 	addi	r21,r21,16
8008b244:	003fbb06 	br	8008b134 <_realloc_r+0x424>
8008b248:	a009883a 	mov	r4,r20
8008b24c:	0091a380 	call	80091a38 <__malloc_unlock>
8008b250:	0005883a 	mov	r2,zero
8008b254:	003f0a06 	br	8008ae80 <_realloc_r+0x170>
8008b258:	a8c00417 	ldw	r3,16(r21)
8008b25c:	ad400604 	addi	r21,r21,24
8008b260:	b0800804 	addi	r2,r22,32
8008b264:	b0c00615 	stw	r3,24(r22)
8008b268:	a8ffff17 	ldw	r3,-4(r21)
8008b26c:	b0c00715 	stw	r3,28(r22)
8008b270:	003fb006 	br	8008b134 <_realloc_r+0x424>

8008b274 <lflush>:
8008b274:	2080030b 	ldhu	r2,12(r4)
8008b278:	00c00244 	movi	r3,9
8008b27c:	1080024c 	andi	r2,r2,9
8008b280:	10c00226 	beq	r2,r3,8008b28c <lflush+0x18>
8008b284:	0005883a 	mov	r2,zero
8008b288:	f800283a 	ret
8008b28c:	0087f781 	jmpi	80087f78 <fflush>

8008b290 <__srefill_r>:
8008b290:	defffc04 	addi	sp,sp,-16
8008b294:	dc400115 	stw	r17,4(sp)
8008b298:	dc000015 	stw	r16,0(sp)
8008b29c:	dfc00315 	stw	ra,12(sp)
8008b2a0:	dc800215 	stw	r18,8(sp)
8008b2a4:	2023883a 	mov	r17,r4
8008b2a8:	2821883a 	mov	r16,r5
8008b2ac:	20000226 	beq	r4,zero,8008b2b8 <__srefill_r+0x28>
8008b2b0:	20800e17 	ldw	r2,56(r4)
8008b2b4:	10003c26 	beq	r2,zero,8008b3a8 <__srefill_r+0x118>
8008b2b8:	80c0030b 	ldhu	r3,12(r16)
8008b2bc:	1908000c 	andi	r4,r3,8192
8008b2c0:	1805883a 	mov	r2,r3
8008b2c4:	2000071e 	bne	r4,zero,8008b2e4 <__srefill_r+0x54>
8008b2c8:	81001917 	ldw	r4,100(r16)
8008b2cc:	18880014 	ori	r2,r3,8192
8008b2d0:	00f7ffc4 	movi	r3,-8193
8008b2d4:	20c8703a 	and	r4,r4,r3
8008b2d8:	8080030d 	sth	r2,12(r16)
8008b2dc:	1007883a 	mov	r3,r2
8008b2e0:	81001915 	stw	r4,100(r16)
8008b2e4:	80000115 	stw	zero,4(r16)
8008b2e8:	1100080c 	andi	r4,r2,32
8008b2ec:	2000571e 	bne	r4,zero,8008b44c <__srefill_r+0x1bc>
8008b2f0:	1100010c 	andi	r4,r2,4
8008b2f4:	20001f26 	beq	r4,zero,8008b374 <__srefill_r+0xe4>
8008b2f8:	81400c17 	ldw	r5,48(r16)
8008b2fc:	28000826 	beq	r5,zero,8008b320 <__srefill_r+0x90>
8008b300:	80801004 	addi	r2,r16,64
8008b304:	28800226 	beq	r5,r2,8008b310 <__srefill_r+0x80>
8008b308:	8809883a 	mov	r4,r17
8008b30c:	008846c0 	call	8008846c <_free_r>
8008b310:	80800f17 	ldw	r2,60(r16)
8008b314:	80000c15 	stw	zero,48(r16)
8008b318:	80800115 	stw	r2,4(r16)
8008b31c:	1000391e 	bne	r2,zero,8008b404 <__srefill_r+0x174>
8008b320:	80800417 	ldw	r2,16(r16)
8008b324:	10004b26 	beq	r2,zero,8008b454 <__srefill_r+0x1c4>
8008b328:	8480030b 	ldhu	r18,12(r16)
8008b32c:	908000cc 	andi	r2,r18,3
8008b330:	10001f1e 	bne	r2,zero,8008b3b0 <__srefill_r+0x120>
8008b334:	81800417 	ldw	r6,16(r16)
8008b338:	80800817 	ldw	r2,32(r16)
8008b33c:	81c00517 	ldw	r7,20(r16)
8008b340:	81400717 	ldw	r5,28(r16)
8008b344:	81800015 	stw	r6,0(r16)
8008b348:	8809883a 	mov	r4,r17
8008b34c:	103ee83a 	callr	r2
8008b350:	80800115 	stw	r2,4(r16)
8008b354:	00800e0e 	bge	zero,r2,8008b390 <__srefill_r+0x100>
8008b358:	0005883a 	mov	r2,zero
8008b35c:	dfc00317 	ldw	ra,12(sp)
8008b360:	dc800217 	ldw	r18,8(sp)
8008b364:	dc400117 	ldw	r17,4(sp)
8008b368:	dc000017 	ldw	r16,0(sp)
8008b36c:	dec00404 	addi	sp,sp,16
8008b370:	f800283a 	ret
8008b374:	1100040c 	andi	r4,r2,16
8008b378:	20003026 	beq	r4,zero,8008b43c <__srefill_r+0x1ac>
8008b37c:	1080020c 	andi	r2,r2,8
8008b380:	1000241e 	bne	r2,zero,8008b414 <__srefill_r+0x184>
8008b384:	18c00114 	ori	r3,r3,4
8008b388:	80c0030d 	sth	r3,12(r16)
8008b38c:	003fe406 	br	8008b320 <__srefill_r+0x90>
8008b390:	80c0030b 	ldhu	r3,12(r16)
8008b394:	1000161e 	bne	r2,zero,8008b3f0 <__srefill_r+0x160>
8008b398:	18c00814 	ori	r3,r3,32
8008b39c:	00bfffc4 	movi	r2,-1
8008b3a0:	80c0030d 	sth	r3,12(r16)
8008b3a4:	003fed06 	br	8008b35c <__srefill_r+0xcc>
8008b3a8:	00882f80 	call	800882f8 <__sinit>
8008b3ac:	003fc206 	br	8008b2b8 <__srefill_r+0x28>
8008b3b0:	00a002b4 	movhi	r2,32778
8008b3b4:	10a31104 	addi	r2,r2,-29628
8008b3b8:	11000017 	ldw	r4,0(r2)
8008b3bc:	01600274 	movhi	r5,32777
8008b3c0:	00800044 	movi	r2,1
8008b3c4:	296c9d04 	addi	r5,r5,-19852
8008b3c8:	8080030d 	sth	r2,12(r16)
8008b3cc:	0088c380 	call	80088c38 <_fwalk>
8008b3d0:	00800244 	movi	r2,9
8008b3d4:	8480030d 	sth	r18,12(r16)
8008b3d8:	9480024c 	andi	r18,r18,9
8008b3dc:	90bfd51e 	bne	r18,r2,8008b334 <__srefill_r+0xa4>
8008b3e0:	800b883a 	mov	r5,r16
8008b3e4:	8809883a 	mov	r4,r17
8008b3e8:	0087d000 	call	80087d00 <__sflush_r>
8008b3ec:	003fd106 	br	8008b334 <__srefill_r+0xa4>
8008b3f0:	18c01014 	ori	r3,r3,64
8008b3f4:	80000115 	stw	zero,4(r16)
8008b3f8:	00bfffc4 	movi	r2,-1
8008b3fc:	80c0030d 	sth	r3,12(r16)
8008b400:	003fd606 	br	8008b35c <__srefill_r+0xcc>
8008b404:	80c00e17 	ldw	r3,56(r16)
8008b408:	0005883a 	mov	r2,zero
8008b40c:	80c00015 	stw	r3,0(r16)
8008b410:	003fd206 	br	8008b35c <__srefill_r+0xcc>
8008b414:	800b883a 	mov	r5,r16
8008b418:	8809883a 	mov	r4,r17
8008b41c:	0087f1c0 	call	80087f1c <_fflush_r>
8008b420:	10000a1e 	bne	r2,zero,8008b44c <__srefill_r+0x1bc>
8008b424:	8080030b 	ldhu	r2,12(r16)
8008b428:	00fffdc4 	movi	r3,-9
8008b42c:	80000215 	stw	zero,8(r16)
8008b430:	1886703a 	and	r3,r3,r2
8008b434:	80000615 	stw	zero,24(r16)
8008b438:	003fd206 	br	8008b384 <__srefill_r+0xf4>
8008b43c:	00800244 	movi	r2,9
8008b440:	88800015 	stw	r2,0(r17)
8008b444:	18c01014 	ori	r3,r3,64
8008b448:	80c0030d 	sth	r3,12(r16)
8008b44c:	00bfffc4 	movi	r2,-1
8008b450:	003fc206 	br	8008b35c <__srefill_r+0xcc>
8008b454:	800b883a 	mov	r5,r16
8008b458:	8809883a 	mov	r4,r17
8008b45c:	0088e9c0 	call	80088e9c <__smakebuf_r>
8008b460:	003fb106 	br	8008b328 <__srefill_r+0x98>

8008b464 <__fpclassifyd>:
8008b464:	00a00034 	movhi	r2,32768
8008b468:	10bfffc4 	addi	r2,r2,-1
8008b46c:	2884703a 	and	r2,r5,r2
8008b470:	10000726 	beq	r2,zero,8008b490 <__fpclassifyd+0x2c>
8008b474:	00fffc34 	movhi	r3,65520
8008b478:	019ff834 	movhi	r6,32736
8008b47c:	28c7883a 	add	r3,r5,r3
8008b480:	31bfffc4 	addi	r6,r6,-1
8008b484:	30c00536 	bltu	r6,r3,8008b49c <__fpclassifyd+0x38>
8008b488:	00800104 	movi	r2,4
8008b48c:	f800283a 	ret
8008b490:	2000021e 	bne	r4,zero,8008b49c <__fpclassifyd+0x38>
8008b494:	00800084 	movi	r2,2
8008b498:	f800283a 	ret
8008b49c:	00dffc34 	movhi	r3,32752
8008b4a0:	019ff834 	movhi	r6,32736
8008b4a4:	28cb883a 	add	r5,r5,r3
8008b4a8:	31bfffc4 	addi	r6,r6,-1
8008b4ac:	317ff62e 	bgeu	r6,r5,8008b488 <__fpclassifyd+0x24>
8008b4b0:	01400434 	movhi	r5,16
8008b4b4:	297fffc4 	addi	r5,r5,-1
8008b4b8:	28800236 	bltu	r5,r2,8008b4c4 <__fpclassifyd+0x60>
8008b4bc:	008000c4 	movi	r2,3
8008b4c0:	f800283a 	ret
8008b4c4:	10c00226 	beq	r2,r3,8008b4d0 <__fpclassifyd+0x6c>
8008b4c8:	0005883a 	mov	r2,zero
8008b4cc:	f800283a 	ret
8008b4d0:	2005003a 	cmpeq	r2,r4,zero
8008b4d4:	f800283a 	ret

8008b4d8 <_sbrk_r>:
8008b4d8:	defffd04 	addi	sp,sp,-12
8008b4dc:	dc000015 	stw	r16,0(sp)
8008b4e0:	042002b4 	movhi	r16,32778
8008b4e4:	dc400115 	stw	r17,4(sp)
8008b4e8:	842a8904 	addi	r16,r16,-21980
8008b4ec:	2023883a 	mov	r17,r4
8008b4f0:	2809883a 	mov	r4,r5
8008b4f4:	dfc00215 	stw	ra,8(sp)
8008b4f8:	80000015 	stw	zero,0(r16)
8008b4fc:	0091bf80 	call	80091bf8 <sbrk>
8008b500:	00ffffc4 	movi	r3,-1
8008b504:	10c00526 	beq	r2,r3,8008b51c <_sbrk_r+0x44>
8008b508:	dfc00217 	ldw	ra,8(sp)
8008b50c:	dc400117 	ldw	r17,4(sp)
8008b510:	dc000017 	ldw	r16,0(sp)
8008b514:	dec00304 	addi	sp,sp,12
8008b518:	f800283a 	ret
8008b51c:	80c00017 	ldw	r3,0(r16)
8008b520:	183ff926 	beq	r3,zero,8008b508 <_sbrk_r+0x30>
8008b524:	88c00015 	stw	r3,0(r17)
8008b528:	003ff706 	br	8008b508 <_sbrk_r+0x30>

8008b52c <__sread>:
8008b52c:	defffe04 	addi	sp,sp,-8
8008b530:	dc000015 	stw	r16,0(sp)
8008b534:	2821883a 	mov	r16,r5
8008b538:	2940038f 	ldh	r5,14(r5)
8008b53c:	dfc00115 	stw	ra,4(sp)
8008b540:	008e72c0 	call	8008e72c <_read_r>
8008b544:	10000716 	blt	r2,zero,8008b564 <__sread+0x38>
8008b548:	80c01417 	ldw	r3,80(r16)
8008b54c:	1887883a 	add	r3,r3,r2
8008b550:	80c01415 	stw	r3,80(r16)
8008b554:	dfc00117 	ldw	ra,4(sp)
8008b558:	dc000017 	ldw	r16,0(sp)
8008b55c:	dec00204 	addi	sp,sp,8
8008b560:	f800283a 	ret
8008b564:	80c0030b 	ldhu	r3,12(r16)
8008b568:	18fbffcc 	andi	r3,r3,61439
8008b56c:	80c0030d 	sth	r3,12(r16)
8008b570:	dfc00117 	ldw	ra,4(sp)
8008b574:	dc000017 	ldw	r16,0(sp)
8008b578:	dec00204 	addi	sp,sp,8
8008b57c:	f800283a 	ret

8008b580 <__seofread>:
8008b580:	0005883a 	mov	r2,zero
8008b584:	f800283a 	ret

8008b588 <__swrite>:
8008b588:	2880030b 	ldhu	r2,12(r5)
8008b58c:	defffb04 	addi	sp,sp,-20
8008b590:	dcc00315 	stw	r19,12(sp)
8008b594:	dc800215 	stw	r18,8(sp)
8008b598:	dc400115 	stw	r17,4(sp)
8008b59c:	dc000015 	stw	r16,0(sp)
8008b5a0:	dfc00415 	stw	ra,16(sp)
8008b5a4:	10c0400c 	andi	r3,r2,256
8008b5a8:	2821883a 	mov	r16,r5
8008b5ac:	2023883a 	mov	r17,r4
8008b5b0:	3025883a 	mov	r18,r6
8008b5b4:	3827883a 	mov	r19,r7
8008b5b8:	18000526 	beq	r3,zero,8008b5d0 <__swrite+0x48>
8008b5bc:	2940038f 	ldh	r5,14(r5)
8008b5c0:	01c00084 	movi	r7,2
8008b5c4:	000d883a 	mov	r6,zero
8008b5c8:	008e6cc0 	call	8008e6cc <_lseek_r>
8008b5cc:	8080030b 	ldhu	r2,12(r16)
8008b5d0:	8140038f 	ldh	r5,14(r16)
8008b5d4:	10bbffcc 	andi	r2,r2,61439
8008b5d8:	980f883a 	mov	r7,r19
8008b5dc:	900d883a 	mov	r6,r18
8008b5e0:	8809883a 	mov	r4,r17
8008b5e4:	8080030d 	sth	r2,12(r16)
8008b5e8:	dfc00417 	ldw	ra,16(sp)
8008b5ec:	dcc00317 	ldw	r19,12(sp)
8008b5f0:	dc800217 	ldw	r18,8(sp)
8008b5f4:	dc400117 	ldw	r17,4(sp)
8008b5f8:	dc000017 	ldw	r16,0(sp)
8008b5fc:	dec00504 	addi	sp,sp,20
8008b600:	008e1981 	jmpi	8008e198 <_write_r>

8008b604 <__sseek>:
8008b604:	defffe04 	addi	sp,sp,-8
8008b608:	dc000015 	stw	r16,0(sp)
8008b60c:	2821883a 	mov	r16,r5
8008b610:	2940038f 	ldh	r5,14(r5)
8008b614:	dfc00115 	stw	ra,4(sp)
8008b618:	008e6cc0 	call	8008e6cc <_lseek_r>
8008b61c:	00ffffc4 	movi	r3,-1
8008b620:	10c00826 	beq	r2,r3,8008b644 <__sseek+0x40>
8008b624:	80c0030b 	ldhu	r3,12(r16)
8008b628:	80801415 	stw	r2,80(r16)
8008b62c:	18c40014 	ori	r3,r3,4096
8008b630:	80c0030d 	sth	r3,12(r16)
8008b634:	dfc00117 	ldw	ra,4(sp)
8008b638:	dc000017 	ldw	r16,0(sp)
8008b63c:	dec00204 	addi	sp,sp,8
8008b640:	f800283a 	ret
8008b644:	80c0030b 	ldhu	r3,12(r16)
8008b648:	18fbffcc 	andi	r3,r3,61439
8008b64c:	80c0030d 	sth	r3,12(r16)
8008b650:	dfc00117 	ldw	ra,4(sp)
8008b654:	dc000017 	ldw	r16,0(sp)
8008b658:	dec00204 	addi	sp,sp,8
8008b65c:	f800283a 	ret

8008b660 <__sclose>:
8008b660:	2940038f 	ldh	r5,14(r5)
8008b664:	008e1f81 	jmpi	8008e1f8 <_close_r>

8008b668 <strcmp>:
8008b668:	2144b03a 	or	r2,r4,r5
8008b66c:	108000cc 	andi	r2,r2,3
8008b670:	1000171e 	bne	r2,zero,8008b6d0 <strcmp+0x68>
8008b674:	20800017 	ldw	r2,0(r4)
8008b678:	28c00017 	ldw	r3,0(r5)
8008b67c:	10c0141e 	bne	r2,r3,8008b6d0 <strcmp+0x68>
8008b680:	027fbff4 	movhi	r9,65279
8008b684:	4a7fbfc4 	addi	r9,r9,-257
8008b688:	0086303a 	nor	r3,zero,r2
8008b68c:	02202074 	movhi	r8,32897
8008b690:	1245883a 	add	r2,r2,r9
8008b694:	42202004 	addi	r8,r8,-32640
8008b698:	10c4703a 	and	r2,r2,r3
8008b69c:	1204703a 	and	r2,r2,r8
8008b6a0:	10000226 	beq	r2,zero,8008b6ac <strcmp+0x44>
8008b6a4:	00002306 	br	8008b734 <strcmp+0xcc>
8008b6a8:	1000221e 	bne	r2,zero,8008b734 <strcmp+0xcc>
8008b6ac:	21000104 	addi	r4,r4,4
8008b6b0:	20c00017 	ldw	r3,0(r4)
8008b6b4:	29400104 	addi	r5,r5,4
8008b6b8:	29800017 	ldw	r6,0(r5)
8008b6bc:	1a4f883a 	add	r7,r3,r9
8008b6c0:	00c4303a 	nor	r2,zero,r3
8008b6c4:	3884703a 	and	r2,r7,r2
8008b6c8:	1204703a 	and	r2,r2,r8
8008b6cc:	19bff626 	beq	r3,r6,8008b6a8 <strcmp+0x40>
8008b6d0:	20800003 	ldbu	r2,0(r4)
8008b6d4:	10c03fcc 	andi	r3,r2,255
8008b6d8:	18c0201c 	xori	r3,r3,128
8008b6dc:	18ffe004 	addi	r3,r3,-128
8008b6e0:	18000c26 	beq	r3,zero,8008b714 <strcmp+0xac>
8008b6e4:	29800007 	ldb	r6,0(r5)
8008b6e8:	19800326 	beq	r3,r6,8008b6f8 <strcmp+0x90>
8008b6ec:	00001306 	br	8008b73c <strcmp+0xd4>
8008b6f0:	29800007 	ldb	r6,0(r5)
8008b6f4:	11800b1e 	bne	r2,r6,8008b724 <strcmp+0xbc>
8008b6f8:	21000044 	addi	r4,r4,1
8008b6fc:	20c00003 	ldbu	r3,0(r4)
8008b700:	29400044 	addi	r5,r5,1
8008b704:	18803fcc 	andi	r2,r3,255
8008b708:	1080201c 	xori	r2,r2,128
8008b70c:	10bfe004 	addi	r2,r2,-128
8008b710:	103ff71e 	bne	r2,zero,8008b6f0 <strcmp+0x88>
8008b714:	0007883a 	mov	r3,zero
8008b718:	28800003 	ldbu	r2,0(r5)
8008b71c:	1885c83a 	sub	r2,r3,r2
8008b720:	f800283a 	ret
8008b724:	28800003 	ldbu	r2,0(r5)
8008b728:	18c03fcc 	andi	r3,r3,255
8008b72c:	1885c83a 	sub	r2,r3,r2
8008b730:	f800283a 	ret
8008b734:	0005883a 	mov	r2,zero
8008b738:	f800283a 	ret
8008b73c:	10c03fcc 	andi	r3,r2,255
8008b740:	003ff506 	br	8008b718 <strcmp+0xb0>

8008b744 <__ssprint_r>:
8008b744:	30800217 	ldw	r2,8(r6)
8008b748:	defff604 	addi	sp,sp,-40
8008b74c:	dc800215 	stw	r18,8(sp)
8008b750:	dfc00915 	stw	ra,36(sp)
8008b754:	df000815 	stw	fp,32(sp)
8008b758:	ddc00715 	stw	r23,28(sp)
8008b75c:	dd800615 	stw	r22,24(sp)
8008b760:	dd400515 	stw	r21,20(sp)
8008b764:	dd000415 	stw	r20,16(sp)
8008b768:	dcc00315 	stw	r19,12(sp)
8008b76c:	dc400115 	stw	r17,4(sp)
8008b770:	dc000015 	stw	r16,0(sp)
8008b774:	3025883a 	mov	r18,r6
8008b778:	10005826 	beq	r2,zero,8008b8dc <__ssprint_r+0x198>
8008b77c:	2027883a 	mov	r19,r4
8008b780:	35c00017 	ldw	r23,0(r6)
8008b784:	29000017 	ldw	r4,0(r5)
8008b788:	28800217 	ldw	r2,8(r5)
8008b78c:	2823883a 	mov	r17,r5
8008b790:	0039883a 	mov	fp,zero
8008b794:	0021883a 	mov	r16,zero
8008b798:	80003926 	beq	r16,zero,8008b880 <__ssprint_r+0x13c>
8008b79c:	102b883a 	mov	r21,r2
8008b7a0:	102d883a 	mov	r22,r2
8008b7a4:	80803a36 	bltu	r16,r2,8008b890 <__ssprint_r+0x14c>
8008b7a8:	88c0030b 	ldhu	r3,12(r17)
8008b7ac:	1881200c 	andi	r2,r3,1152
8008b7b0:	10002626 	beq	r2,zero,8008b84c <__ssprint_r+0x108>
8008b7b4:	88800517 	ldw	r2,20(r17)
8008b7b8:	89400417 	ldw	r5,16(r17)
8008b7bc:	81800044 	addi	r6,r16,1
8008b7c0:	108f883a 	add	r7,r2,r2
8008b7c4:	3885883a 	add	r2,r7,r2
8008b7c8:	100ed7fa 	srli	r7,r2,31
8008b7cc:	216dc83a 	sub	r22,r4,r5
8008b7d0:	3589883a 	add	r4,r6,r22
8008b7d4:	3885883a 	add	r2,r7,r2
8008b7d8:	102bd07a 	srai	r21,r2,1
8008b7dc:	a80d883a 	mov	r6,r21
8008b7e0:	a900022e 	bgeu	r21,r4,8008b7ec <__ssprint_r+0xa8>
8008b7e4:	202b883a 	mov	r21,r4
8008b7e8:	200d883a 	mov	r6,r4
8008b7ec:	18c1000c 	andi	r3,r3,1024
8008b7f0:	18002a26 	beq	r3,zero,8008b89c <__ssprint_r+0x158>
8008b7f4:	300b883a 	mov	r5,r6
8008b7f8:	9809883a 	mov	r4,r19
8008b7fc:	00890580 	call	80089058 <_malloc_r>
8008b800:	1029883a 	mov	r20,r2
8008b804:	10002c26 	beq	r2,zero,8008b8b8 <__ssprint_r+0x174>
8008b808:	89400417 	ldw	r5,16(r17)
8008b80c:	b00d883a 	mov	r6,r22
8008b810:	1009883a 	mov	r4,r2
8008b814:	00899480 	call	80089948 <memcpy>
8008b818:	8880030b 	ldhu	r2,12(r17)
8008b81c:	00fedfc4 	movi	r3,-1153
8008b820:	10c4703a 	and	r2,r2,r3
8008b824:	10802014 	ori	r2,r2,128
8008b828:	8880030d 	sth	r2,12(r17)
8008b82c:	a589883a 	add	r4,r20,r22
8008b830:	adadc83a 	sub	r22,r21,r22
8008b834:	8d400515 	stw	r21,20(r17)
8008b838:	8d800215 	stw	r22,8(r17)
8008b83c:	8d000415 	stw	r20,16(r17)
8008b840:	89000015 	stw	r4,0(r17)
8008b844:	802b883a 	mov	r21,r16
8008b848:	802d883a 	mov	r22,r16
8008b84c:	b00d883a 	mov	r6,r22
8008b850:	e00b883a 	mov	r5,fp
8008b854:	0089a900 	call	80089a90 <memmove>
8008b858:	88800217 	ldw	r2,8(r17)
8008b85c:	89000017 	ldw	r4,0(r17)
8008b860:	90c00217 	ldw	r3,8(r18)
8008b864:	1545c83a 	sub	r2,r2,r21
8008b868:	2589883a 	add	r4,r4,r22
8008b86c:	88800215 	stw	r2,8(r17)
8008b870:	89000015 	stw	r4,0(r17)
8008b874:	1c21c83a 	sub	r16,r3,r16
8008b878:	94000215 	stw	r16,8(r18)
8008b87c:	80001726 	beq	r16,zero,8008b8dc <__ssprint_r+0x198>
8008b880:	bf000017 	ldw	fp,0(r23)
8008b884:	bc000117 	ldw	r16,4(r23)
8008b888:	bdc00204 	addi	r23,r23,8
8008b88c:	003fc206 	br	8008b798 <__ssprint_r+0x54>
8008b890:	802b883a 	mov	r21,r16
8008b894:	802d883a 	mov	r22,r16
8008b898:	003fec06 	br	8008b84c <__ssprint_r+0x108>
8008b89c:	9809883a 	mov	r4,r19
8008b8a0:	008ad100 	call	8008ad10 <_realloc_r>
8008b8a4:	1029883a 	mov	r20,r2
8008b8a8:	103fe01e 	bne	r2,zero,8008b82c <__ssprint_r+0xe8>
8008b8ac:	89400417 	ldw	r5,16(r17)
8008b8b0:	9809883a 	mov	r4,r19
8008b8b4:	008846c0 	call	8008846c <_free_r>
8008b8b8:	88c0030b 	ldhu	r3,12(r17)
8008b8bc:	00800304 	movi	r2,12
8008b8c0:	98800015 	stw	r2,0(r19)
8008b8c4:	18c01014 	ori	r3,r3,64
8008b8c8:	88c0030d 	sth	r3,12(r17)
8008b8cc:	00bfffc4 	movi	r2,-1
8008b8d0:	90000215 	stw	zero,8(r18)
8008b8d4:	90000115 	stw	zero,4(r18)
8008b8d8:	00000206 	br	8008b8e4 <__ssprint_r+0x1a0>
8008b8dc:	90000115 	stw	zero,4(r18)
8008b8e0:	0005883a 	mov	r2,zero
8008b8e4:	dfc00917 	ldw	ra,36(sp)
8008b8e8:	df000817 	ldw	fp,32(sp)
8008b8ec:	ddc00717 	ldw	r23,28(sp)
8008b8f0:	dd800617 	ldw	r22,24(sp)
8008b8f4:	dd400517 	ldw	r21,20(sp)
8008b8f8:	dd000417 	ldw	r20,16(sp)
8008b8fc:	dcc00317 	ldw	r19,12(sp)
8008b900:	dc800217 	ldw	r18,8(sp)
8008b904:	dc400117 	ldw	r17,4(sp)
8008b908:	dc000017 	ldw	r16,0(sp)
8008b90c:	dec00a04 	addi	sp,sp,40
8008b910:	f800283a 	ret

8008b914 <___svfiprintf_internal_r>:
8008b914:	2880030b 	ldhu	r2,12(r5)
8008b918:	deffc804 	addi	sp,sp,-224
8008b91c:	dcc03115 	stw	r19,196(sp)
8008b920:	dfc03715 	stw	ra,220(sp)
8008b924:	df003615 	stw	fp,216(sp)
8008b928:	ddc03515 	stw	r23,212(sp)
8008b92c:	dd803415 	stw	r22,208(sp)
8008b930:	dd403315 	stw	r21,204(sp)
8008b934:	dd003215 	stw	r20,200(sp)
8008b938:	dc803015 	stw	r18,192(sp)
8008b93c:	dc402f15 	stw	r17,188(sp)
8008b940:	dc002e15 	stw	r16,184(sp)
8008b944:	d9402715 	stw	r5,156(sp)
8008b948:	d9002a15 	stw	r4,168(sp)
8008b94c:	1080200c 	andi	r2,r2,128
8008b950:	d9c02315 	stw	r7,140(sp)
8008b954:	3027883a 	mov	r19,r6
8008b958:	10000226 	beq	r2,zero,8008b964 <___svfiprintf_internal_r+0x50>
8008b95c:	28800417 	ldw	r2,16(r5)
8008b960:	10041d26 	beq	r2,zero,8008c9d8 <___svfiprintf_internal_r+0x10c4>
8008b964:	dac01a04 	addi	r11,sp,104
8008b968:	dac01e15 	stw	r11,120(sp)
8008b96c:	d8801e17 	ldw	r2,120(sp)
8008b970:	dac019c4 	addi	r11,sp,103
8008b974:	dd402a17 	ldw	r21,168(sp)
8008b978:	ddc02717 	ldw	r23,156(sp)
8008b97c:	05a00274 	movhi	r22,32777
8008b980:	05200274 	movhi	r20,32777
8008b984:	dac01f15 	stw	r11,124(sp)
8008b988:	12d7c83a 	sub	r11,r2,r11
8008b98c:	b59af604 	addi	r22,r22,27608
8008b990:	a51af204 	addi	r20,r20,27592
8008b994:	dec01a15 	stw	sp,104(sp)
8008b998:	d8001c15 	stw	zero,112(sp)
8008b99c:	d8001b15 	stw	zero,108(sp)
8008b9a0:	d811883a 	mov	r8,sp
8008b9a4:	d8002915 	stw	zero,164(sp)
8008b9a8:	d8002515 	stw	zero,148(sp)
8008b9ac:	dac02b15 	stw	r11,172(sp)
8008b9b0:	98800007 	ldb	r2,0(r19)
8008b9b4:	1002dd26 	beq	r2,zero,8008c52c <___svfiprintf_internal_r+0xc18>
8008b9b8:	00c00944 	movi	r3,37
8008b9bc:	9823883a 	mov	r17,r19
8008b9c0:	10c0021e 	bne	r2,r3,8008b9cc <___svfiprintf_internal_r+0xb8>
8008b9c4:	00001406 	br	8008ba18 <___svfiprintf_internal_r+0x104>
8008b9c8:	10c00326 	beq	r2,r3,8008b9d8 <___svfiprintf_internal_r+0xc4>
8008b9cc:	8c400044 	addi	r17,r17,1
8008b9d0:	88800007 	ldb	r2,0(r17)
8008b9d4:	103ffc1e 	bne	r2,zero,8008b9c8 <___svfiprintf_internal_r+0xb4>
8008b9d8:	8ce1c83a 	sub	r16,r17,r19
8008b9dc:	80000e26 	beq	r16,zero,8008ba18 <___svfiprintf_internal_r+0x104>
8008b9e0:	d8c01c17 	ldw	r3,112(sp)
8008b9e4:	d8801b17 	ldw	r2,108(sp)
8008b9e8:	44c00015 	stw	r19,0(r8)
8008b9ec:	1c07883a 	add	r3,r3,r16
8008b9f0:	10800044 	addi	r2,r2,1
8008b9f4:	d8c01c15 	stw	r3,112(sp)
8008b9f8:	44000115 	stw	r16,4(r8)
8008b9fc:	d8801b15 	stw	r2,108(sp)
8008ba00:	00c001c4 	movi	r3,7
8008ba04:	18831e16 	blt	r3,r2,8008c680 <___svfiprintf_internal_r+0xd6c>
8008ba08:	42000204 	addi	r8,r8,8
8008ba0c:	dac02517 	ldw	r11,148(sp)
8008ba10:	5c17883a 	add	r11,r11,r16
8008ba14:	dac02515 	stw	r11,148(sp)
8008ba18:	88800007 	ldb	r2,0(r17)
8008ba1c:	1002c526 	beq	r2,zero,8008c534 <___svfiprintf_internal_r+0xc20>
8008ba20:	88c00047 	ldb	r3,1(r17)
8008ba24:	8cc00044 	addi	r19,r17,1
8008ba28:	d8001d85 	stb	zero,118(sp)
8008ba2c:	0009883a 	mov	r4,zero
8008ba30:	000f883a 	mov	r7,zero
8008ba34:	043fffc4 	movi	r16,-1
8008ba38:	d8002415 	stw	zero,144(sp)
8008ba3c:	0025883a 	mov	r18,zero
8008ba40:	01401604 	movi	r5,88
8008ba44:	01800244 	movi	r6,9
8008ba48:	02800a84 	movi	r10,42
8008ba4c:	02401b04 	movi	r9,108
8008ba50:	9cc00044 	addi	r19,r19,1
8008ba54:	18bff804 	addi	r2,r3,-32
8008ba58:	2881dd36 	bltu	r5,r2,8008c1d0 <___svfiprintf_internal_r+0x8bc>
8008ba5c:	100490ba 	slli	r2,r2,2
8008ba60:	02e00274 	movhi	r11,32777
8008ba64:	5aee9d04 	addi	r11,r11,-17804
8008ba68:	12c5883a 	add	r2,r2,r11
8008ba6c:	10800017 	ldw	r2,0(r2)
8008ba70:	1000683a 	jmp	r2
8008ba74:	8008bc70 	cmpltui	zero,r16,8945
8008ba78:	8008c1d0 	cmplti	zero,r16,8967
8008ba7c:	8008c1d0 	cmplti	zero,r16,8967
8008ba80:	8008bc64 	muli	zero,r16,8945
8008ba84:	8008c1d0 	cmplti	zero,r16,8967
8008ba88:	8008c1d0 	cmplti	zero,r16,8967
8008ba8c:	8008c1d0 	cmplti	zero,r16,8967
8008ba90:	8008c1d0 	cmplti	zero,r16,8967
8008ba94:	8008c1d0 	cmplti	zero,r16,8967
8008ba98:	8008c1d0 	cmplti	zero,r16,8967
8008ba9c:	8008bbd8 	cmpnei	zero,r16,8943
8008baa0:	8008bdb4 	orhi	zero,r16,8950
8008baa4:	8008c1d0 	cmplti	zero,r16,8967
8008baa8:	8008bc04 	addi	zero,r16,8944
8008baac:	8008c204 	addi	zero,r16,8968
8008bab0:	8008c1d0 	cmplti	zero,r16,8967
8008bab4:	8008c1f8 	rdprs	zero,r16,8967
8008bab8:	8008c198 	cmpnei	zero,r16,8966
8008babc:	8008c198 	cmpnei	zero,r16,8966
8008bac0:	8008c198 	cmpnei	zero,r16,8966
8008bac4:	8008c198 	cmpnei	zero,r16,8966
8008bac8:	8008c198 	cmpnei	zero,r16,8966
8008bacc:	8008c198 	cmpnei	zero,r16,8966
8008bad0:	8008c198 	cmpnei	zero,r16,8966
8008bad4:	8008c198 	cmpnei	zero,r16,8966
8008bad8:	8008c198 	cmpnei	zero,r16,8966
8008badc:	8008c1d0 	cmplti	zero,r16,8967
8008bae0:	8008c1d0 	cmplti	zero,r16,8967
8008bae4:	8008c1d0 	cmplti	zero,r16,8967
8008bae8:	8008c1d0 	cmplti	zero,r16,8967
8008baec:	8008c1d0 	cmplti	zero,r16,8967
8008baf0:	8008c1d0 	cmplti	zero,r16,8967
8008baf4:	8008c1d0 	cmplti	zero,r16,8967
8008baf8:	8008c1d0 	cmplti	zero,r16,8967
8008bafc:	8008c1d0 	cmplti	zero,r16,8967
8008bb00:	8008c1d0 	cmplti	zero,r16,8967
8008bb04:	8008c134 	orhi	zero,r16,8964
8008bb08:	8008c1d0 	cmplti	zero,r16,8967
8008bb0c:	8008c1d0 	cmplti	zero,r16,8967
8008bb10:	8008c1d0 	cmplti	zero,r16,8967
8008bb14:	8008c1d0 	cmplti	zero,r16,8967
8008bb18:	8008c1d0 	cmplti	zero,r16,8967
8008bb1c:	8008c1d0 	cmplti	zero,r16,8967
8008bb20:	8008c1d0 	cmplti	zero,r16,8967
8008bb24:	8008c1d0 	cmplti	zero,r16,8967
8008bb28:	8008c1d0 	cmplti	zero,r16,8967
8008bb2c:	8008c1d0 	cmplti	zero,r16,8967
8008bb30:	8008c2ac 	andhi	zero,r16,8970
8008bb34:	8008c1d0 	cmplti	zero,r16,8967
8008bb38:	8008c1d0 	cmplti	zero,r16,8967
8008bb3c:	8008c1d0 	cmplti	zero,r16,8967
8008bb40:	8008c1d0 	cmplti	zero,r16,8967
8008bb44:	8008c1d0 	cmplti	zero,r16,8967
8008bb48:	8008c244 	addi	zero,r16,8969
8008bb4c:	8008c1d0 	cmplti	zero,r16,8967
8008bb50:	8008c1d0 	cmplti	zero,r16,8967
8008bb54:	8008bf78 	rdprs	zero,r16,8957
8008bb58:	8008c1d0 	cmplti	zero,r16,8967
8008bb5c:	8008c1d0 	cmplti	zero,r16,8967
8008bb60:	8008c1d0 	cmplti	zero,r16,8967
8008bb64:	8008c1d0 	cmplti	zero,r16,8967
8008bb68:	8008c1d0 	cmplti	zero,r16,8967
8008bb6c:	8008c1d0 	cmplti	zero,r16,8967
8008bb70:	8008c1d0 	cmplti	zero,r16,8967
8008bb74:	8008c1d0 	cmplti	zero,r16,8967
8008bb78:	8008c1d0 	cmplti	zero,r16,8967
8008bb7c:	8008c1d0 	cmplti	zero,r16,8967
8008bb80:	8008be68 	cmpgeui	zero,r16,8953
8008bb84:	8008c014 	ori	zero,r16,8960
8008bb88:	8008c1d0 	cmplti	zero,r16,8967
8008bb8c:	8008c1d0 	cmplti	zero,r16,8967
8008bb90:	8008c1d0 	cmplti	zero,r16,8967
8008bb94:	8008c008 	cmpgei	zero,r16,8960
8008bb98:	8008c014 	ori	zero,r16,8960
8008bb9c:	8008c1d0 	cmplti	zero,r16,8967
8008bba0:	8008c1d0 	cmplti	zero,r16,8967
8008bba4:	8008bff8 	rdprs	zero,r16,8959
8008bba8:	8008c1d0 	cmplti	zero,r16,8967
8008bbac:	8008bfbc 	xorhi	zero,r16,8958
8008bbb0:	8008bdc4 	addi	zero,r16,8951
8008bbb4:	8008bc10 	cmplti	zero,r16,8944
8008bbb8:	8008c128 	cmpgeui	zero,r16,8964
8008bbbc:	8008c1d0 	cmplti	zero,r16,8967
8008bbc0:	8008c0dc 	xori	zero,r16,8963
8008bbc4:	8008c1d0 	cmplti	zero,r16,8967
8008bbc8:	8008bd34 	orhi	zero,r16,8948
8008bbcc:	8008c1d0 	cmplti	zero,r16,8967
8008bbd0:	8008c1d0 	cmplti	zero,r16,8967
8008bbd4:	8008bc90 	cmplti	zero,r16,8946
8008bbd8:	dac02317 	ldw	r11,140(sp)
8008bbdc:	5ac00017 	ldw	r11,0(r11)
8008bbe0:	dac02415 	stw	r11,144(sp)
8008bbe4:	dac02317 	ldw	r11,140(sp)
8008bbe8:	58800104 	addi	r2,r11,4
8008bbec:	dac02417 	ldw	r11,144(sp)
8008bbf0:	5802e90e 	bge	r11,zero,8008c798 <___svfiprintf_internal_r+0xe84>
8008bbf4:	dac02417 	ldw	r11,144(sp)
8008bbf8:	d8802315 	stw	r2,140(sp)
8008bbfc:	02d7c83a 	sub	r11,zero,r11
8008bc00:	dac02415 	stw	r11,144(sp)
8008bc04:	94800114 	ori	r18,r18,4
8008bc08:	98c00007 	ldb	r3,0(r19)
8008bc0c:	003f9006 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008bc10:	00800c04 	movi	r2,48
8008bc14:	dac02317 	ldw	r11,140(sp)
8008bc18:	d8801d05 	stb	r2,116(sp)
8008bc1c:	00801e04 	movi	r2,120
8008bc20:	d8801d45 	stb	r2,117(sp)
8008bc24:	d8001d85 	stb	zero,118(sp)
8008bc28:	58c00104 	addi	r3,r11,4
8008bc2c:	5f000017 	ldw	fp,0(r11)
8008bc30:	0013883a 	mov	r9,zero
8008bc34:	90800094 	ori	r2,r18,2
8008bc38:	80032b16 	blt	r16,zero,8008c8e8 <___svfiprintf_internal_r+0xfd4>
8008bc3c:	00bfdfc4 	movi	r2,-129
8008bc40:	90a4703a 	and	r18,r18,r2
8008bc44:	d8c02315 	stw	r3,140(sp)
8008bc48:	94800094 	ori	r18,r18,2
8008bc4c:	e002dc26 	beq	fp,zero,8008c7c0 <___svfiprintf_internal_r+0xeac>
8008bc50:	01200274 	movhi	r4,32777
8008bc54:	211a8b04 	addi	r4,r4,27180
8008bc58:	0015883a 	mov	r10,zero
8008bc5c:	d9002915 	stw	r4,164(sp)
8008bc60:	00002306 	br	8008bcf0 <___svfiprintf_internal_r+0x3dc>
8008bc64:	94800054 	ori	r18,r18,1
8008bc68:	98c00007 	ldb	r3,0(r19)
8008bc6c:	003f7806 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008bc70:	38803fcc 	andi	r2,r7,255
8008bc74:	1080201c 	xori	r2,r2,128
8008bc78:	10bfe004 	addi	r2,r2,-128
8008bc7c:	1002f31e 	bne	r2,zero,8008c84c <___svfiprintf_internal_r+0xf38>
8008bc80:	01000044 	movi	r4,1
8008bc84:	01c00804 	movi	r7,32
8008bc88:	98c00007 	ldb	r3,0(r19)
8008bc8c:	003f7006 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008bc90:	21003fcc 	andi	r4,r4,255
8008bc94:	2003aa1e 	bne	r4,zero,8008cb40 <___svfiprintf_internal_r+0x122c>
8008bc98:	00a00274 	movhi	r2,32777
8008bc9c:	109a8b04 	addi	r2,r2,27180
8008bca0:	d8802915 	stw	r2,164(sp)
8008bca4:	9080080c 	andi	r2,r18,32
8008bca8:	1000ba26 	beq	r2,zero,8008bf94 <___svfiprintf_internal_r+0x680>
8008bcac:	dac02317 	ldw	r11,140(sp)
8008bcb0:	5f000017 	ldw	fp,0(r11)
8008bcb4:	5a400117 	ldw	r9,4(r11)
8008bcb8:	5ac00204 	addi	r11,r11,8
8008bcbc:	dac02315 	stw	r11,140(sp)
8008bcc0:	9080004c 	andi	r2,r18,1
8008bcc4:	10029026 	beq	r2,zero,8008c708 <___svfiprintf_internal_r+0xdf4>
8008bcc8:	e244b03a 	or	r2,fp,r9
8008bccc:	1002d41e 	bne	r2,zero,8008c820 <___svfiprintf_internal_r+0xf0c>
8008bcd0:	d8001d85 	stb	zero,118(sp)
8008bcd4:	80030b16 	blt	r16,zero,8008c904 <___svfiprintf_internal_r+0xff0>
8008bcd8:	00bfdfc4 	movi	r2,-129
8008bcdc:	90a4703a 	and	r18,r18,r2
8008bce0:	0015883a 	mov	r10,zero
8008bce4:	80002426 	beq	r16,zero,8008bd78 <___svfiprintf_internal_r+0x464>
8008bce8:	0039883a 	mov	fp,zero
8008bcec:	0013883a 	mov	r9,zero
8008bcf0:	d9002917 	ldw	r4,164(sp)
8008bcf4:	dc401a04 	addi	r17,sp,104
8008bcf8:	e08003cc 	andi	r2,fp,15
8008bcfc:	4806973a 	slli	r3,r9,28
8008bd00:	2085883a 	add	r2,r4,r2
8008bd04:	e038d13a 	srli	fp,fp,4
8008bd08:	10800003 	ldbu	r2,0(r2)
8008bd0c:	4812d13a 	srli	r9,r9,4
8008bd10:	8c7fffc4 	addi	r17,r17,-1
8008bd14:	1f38b03a 	or	fp,r3,fp
8008bd18:	88800005 	stb	r2,0(r17)
8008bd1c:	e244b03a 	or	r2,fp,r9
8008bd20:	103ff51e 	bne	r2,zero,8008bcf8 <___svfiprintf_internal_r+0x3e4>
8008bd24:	dac01e17 	ldw	r11,120(sp)
8008bd28:	5c57c83a 	sub	r11,r11,r17
8008bd2c:	dac02115 	stw	r11,132(sp)
8008bd30:	00001406 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008bd34:	21003fcc 	andi	r4,r4,255
8008bd38:	2003741e 	bne	r4,zero,8008cb0c <___svfiprintf_internal_r+0x11f8>
8008bd3c:	9080080c 	andi	r2,r18,32
8008bd40:	10014526 	beq	r2,zero,8008c258 <___svfiprintf_internal_r+0x944>
8008bd44:	dac02317 	ldw	r11,140(sp)
8008bd48:	d8001d85 	stb	zero,118(sp)
8008bd4c:	58c00204 	addi	r3,r11,8
8008bd50:	5f000017 	ldw	fp,0(r11)
8008bd54:	5a400117 	ldw	r9,4(r11)
8008bd58:	8002d916 	blt	r16,zero,8008c8c0 <___svfiprintf_internal_r+0xfac>
8008bd5c:	013fdfc4 	movi	r4,-129
8008bd60:	e244b03a 	or	r2,fp,r9
8008bd64:	d8c02315 	stw	r3,140(sp)
8008bd68:	9124703a 	and	r18,r18,r4
8008bd6c:	0015883a 	mov	r10,zero
8008bd70:	1000b91e 	bne	r2,zero,8008c058 <___svfiprintf_internal_r+0x744>
8008bd74:	8002e61e 	bne	r16,zero,8008c910 <___svfiprintf_internal_r+0xffc>
8008bd78:	0021883a 	mov	r16,zero
8008bd7c:	d8002115 	stw	zero,132(sp)
8008bd80:	dc401a04 	addi	r17,sp,104
8008bd84:	d8c02117 	ldw	r3,132(sp)
8008bd88:	dc002015 	stw	r16,128(sp)
8008bd8c:	80c0010e 	bge	r16,r3,8008bd94 <___svfiprintf_internal_r+0x480>
8008bd90:	d8c02015 	stw	r3,128(sp)
8008bd94:	52803fcc 	andi	r10,r10,255
8008bd98:	5280201c 	xori	r10,r10,128
8008bd9c:	52bfe004 	addi	r10,r10,-128
8008bda0:	50003c26 	beq	r10,zero,8008be94 <___svfiprintf_internal_r+0x580>
8008bda4:	dac02017 	ldw	r11,128(sp)
8008bda8:	5ac00044 	addi	r11,r11,1
8008bdac:	dac02015 	stw	r11,128(sp)
8008bdb0:	00003806 	br	8008be94 <___svfiprintf_internal_r+0x580>
8008bdb4:	01000044 	movi	r4,1
8008bdb8:	01c00ac4 	movi	r7,43
8008bdbc:	98c00007 	ldb	r3,0(r19)
8008bdc0:	003f2306 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008bdc4:	21003fcc 	andi	r4,r4,255
8008bdc8:	2003481e 	bne	r4,zero,8008caec <___svfiprintf_internal_r+0x11d8>
8008bdcc:	9080080c 	andi	r2,r18,32
8008bdd0:	10013b26 	beq	r2,zero,8008c2c0 <___svfiprintf_internal_r+0x9ac>
8008bdd4:	dac02317 	ldw	r11,140(sp)
8008bdd8:	d8001d85 	stb	zero,118(sp)
8008bddc:	58800204 	addi	r2,r11,8
8008bde0:	5f000017 	ldw	fp,0(r11)
8008bde4:	5a400117 	ldw	r9,4(r11)
8008bde8:	8002a816 	blt	r16,zero,8008c88c <___svfiprintf_internal_r+0xf78>
8008bdec:	013fdfc4 	movi	r4,-129
8008bdf0:	e246b03a 	or	r3,fp,r9
8008bdf4:	d8802315 	stw	r2,140(sp)
8008bdf8:	9124703a 	and	r18,r18,r4
8008bdfc:	18013c26 	beq	r3,zero,8008c2f0 <___svfiprintf_internal_r+0x9dc>
8008be00:	0015883a 	mov	r10,zero
8008be04:	dc401a04 	addi	r17,sp,104
8008be08:	e006d0fa 	srli	r3,fp,3
8008be0c:	4808977a 	slli	r4,r9,29
8008be10:	4812d0fa 	srli	r9,r9,3
8008be14:	e70001cc 	andi	fp,fp,7
8008be18:	e0800c04 	addi	r2,fp,48
8008be1c:	8c7fffc4 	addi	r17,r17,-1
8008be20:	20f8b03a 	or	fp,r4,r3
8008be24:	88800005 	stb	r2,0(r17)
8008be28:	e246b03a 	or	r3,fp,r9
8008be2c:	183ff61e 	bne	r3,zero,8008be08 <___svfiprintf_internal_r+0x4f4>
8008be30:	90c0004c 	andi	r3,r18,1
8008be34:	1800a526 	beq	r3,zero,8008c0cc <___svfiprintf_internal_r+0x7b8>
8008be38:	10803fcc 	andi	r2,r2,255
8008be3c:	1080201c 	xori	r2,r2,128
8008be40:	10bfe004 	addi	r2,r2,-128
8008be44:	00c00c04 	movi	r3,48
8008be48:	10ffb626 	beq	r2,r3,8008bd24 <___svfiprintf_internal_r+0x410>
8008be4c:	88ffffc5 	stb	r3,-1(r17)
8008be50:	d8c01e17 	ldw	r3,120(sp)
8008be54:	88bfffc4 	addi	r2,r17,-1
8008be58:	1023883a 	mov	r17,r2
8008be5c:	1887c83a 	sub	r3,r3,r2
8008be60:	d8c02115 	stw	r3,132(sp)
8008be64:	003fc706 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008be68:	dac02317 	ldw	r11,140(sp)
8008be6c:	00c00044 	movi	r3,1
8008be70:	d8c02015 	stw	r3,128(sp)
8008be74:	58800017 	ldw	r2,0(r11)
8008be78:	5ac00104 	addi	r11,r11,4
8008be7c:	d8001d85 	stb	zero,118(sp)
8008be80:	d8801005 	stb	r2,64(sp)
8008be84:	dac02315 	stw	r11,140(sp)
8008be88:	d8c02115 	stw	r3,132(sp)
8008be8c:	dc401004 	addi	r17,sp,64
8008be90:	0021883a 	mov	r16,zero
8008be94:	90c0008c 	andi	r3,r18,2
8008be98:	d8c02215 	stw	r3,136(sp)
8008be9c:	18000326 	beq	r3,zero,8008beac <___svfiprintf_internal_r+0x598>
8008bea0:	dac02017 	ldw	r11,128(sp)
8008bea4:	5ac00084 	addi	r11,r11,2
8008bea8:	dac02015 	stw	r11,128(sp)
8008beac:	90c0210c 	andi	r3,r18,132
8008beb0:	d8c02615 	stw	r3,152(sp)
8008beb4:	1801131e 	bne	r3,zero,8008c304 <___svfiprintf_internal_r+0x9f0>
8008beb8:	dac02417 	ldw	r11,144(sp)
8008bebc:	d8c02017 	ldw	r3,128(sp)
8008bec0:	58f9c83a 	sub	fp,r11,r3
8008bec4:	07010f0e 	bge	zero,fp,8008c304 <___svfiprintf_internal_r+0x9f0>
8008bec8:	02400404 	movi	r9,16
8008becc:	d8c01c17 	ldw	r3,112(sp)
8008bed0:	d8801b17 	ldw	r2,108(sp)
8008bed4:	4f02d60e 	bge	r9,fp,8008ca30 <___svfiprintf_internal_r+0x111c>
8008bed8:	01600274 	movhi	r5,32777
8008bedc:	295af604 	addi	r5,r5,27608
8008bee0:	d9402815 	stw	r5,160(sp)
8008bee4:	028001c4 	movi	r10,7
8008bee8:	00000306 	br	8008bef8 <___svfiprintf_internal_r+0x5e4>
8008beec:	e73ffc04 	addi	fp,fp,-16
8008bef0:	42000204 	addi	r8,r8,8
8008bef4:	4f00150e 	bge	r9,fp,8008bf4c <___svfiprintf_internal_r+0x638>
8008bef8:	18c00404 	addi	r3,r3,16
8008befc:	10800044 	addi	r2,r2,1
8008bf00:	45800015 	stw	r22,0(r8)
8008bf04:	42400115 	stw	r9,4(r8)
8008bf08:	d8c01c15 	stw	r3,112(sp)
8008bf0c:	d8801b15 	stw	r2,108(sp)
8008bf10:	50bff60e 	bge	r10,r2,8008beec <___svfiprintf_internal_r+0x5d8>
8008bf14:	d9801a04 	addi	r6,sp,104
8008bf18:	b80b883a 	mov	r5,r23
8008bf1c:	a809883a 	mov	r4,r21
8008bf20:	da402c15 	stw	r9,176(sp)
8008bf24:	da802d15 	stw	r10,180(sp)
8008bf28:	008b7440 	call	8008b744 <__ssprint_r>
8008bf2c:	da402c17 	ldw	r9,176(sp)
8008bf30:	da802d17 	ldw	r10,180(sp)
8008bf34:	1001851e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008bf38:	e73ffc04 	addi	fp,fp,-16
8008bf3c:	d8c01c17 	ldw	r3,112(sp)
8008bf40:	d8801b17 	ldw	r2,108(sp)
8008bf44:	d811883a 	mov	r8,sp
8008bf48:	4f3feb16 	blt	r9,fp,8008bef8 <___svfiprintf_internal_r+0x5e4>
8008bf4c:	dac02817 	ldw	r11,160(sp)
8008bf50:	e0c7883a 	add	r3,fp,r3
8008bf54:	10800044 	addi	r2,r2,1
8008bf58:	42c00015 	stw	r11,0(r8)
8008bf5c:	47000115 	stw	fp,4(r8)
8008bf60:	d8c01c15 	stw	r3,112(sp)
8008bf64:	d8801b15 	stw	r2,108(sp)
8008bf68:	010001c4 	movi	r4,7
8008bf6c:	2081ee16 	blt	r4,r2,8008c728 <___svfiprintf_internal_r+0xe14>
8008bf70:	42000204 	addi	r8,r8,8
8008bf74:	0000e506 	br	8008c30c <___svfiprintf_internal_r+0x9f8>
8008bf78:	21003fcc 	andi	r4,r4,255
8008bf7c:	2002dd1e 	bne	r4,zero,8008caf4 <___svfiprintf_internal_r+0x11e0>
8008bf80:	00a00274 	movhi	r2,32777
8008bf84:	109a8604 	addi	r2,r2,27160
8008bf88:	d8802915 	stw	r2,164(sp)
8008bf8c:	9080080c 	andi	r2,r18,32
8008bf90:	103f461e 	bne	r2,zero,8008bcac <___svfiprintf_internal_r+0x398>
8008bf94:	9080040c 	andi	r2,r18,16
8008bf98:	10022e1e 	bne	r2,zero,8008c854 <___svfiprintf_internal_r+0xf40>
8008bf9c:	9080100c 	andi	r2,r18,64
8008bfa0:	dac02317 	ldw	r11,140(sp)
8008bfa4:	10027326 	beq	r2,zero,8008c974 <___svfiprintf_internal_r+0x1060>
8008bfa8:	5f00000b 	ldhu	fp,0(r11)
8008bfac:	5ac00104 	addi	r11,r11,4
8008bfb0:	0013883a 	mov	r9,zero
8008bfb4:	dac02315 	stw	r11,140(sp)
8008bfb8:	003f4106 	br	8008bcc0 <___svfiprintf_internal_r+0x3ac>
8008bfbc:	21003fcc 	andi	r4,r4,255
8008bfc0:	2002e11e 	bne	r4,zero,8008cb48 <___svfiprintf_internal_r+0x1234>
8008bfc4:	9080080c 	andi	r2,r18,32
8008bfc8:	1002011e 	bne	r2,zero,8008c7d0 <___svfiprintf_internal_r+0xebc>
8008bfcc:	9080040c 	andi	r2,r18,16
8008bfd0:	10023e1e 	bne	r2,zero,8008c8cc <___svfiprintf_internal_r+0xfb8>
8008bfd4:	9480100c 	andi	r18,r18,64
8008bfd8:	90023c26 	beq	r18,zero,8008c8cc <___svfiprintf_internal_r+0xfb8>
8008bfdc:	dac02317 	ldw	r11,140(sp)
8008bfe0:	58800017 	ldw	r2,0(r11)
8008bfe4:	5ac00104 	addi	r11,r11,4
8008bfe8:	dac02315 	stw	r11,140(sp)
8008bfec:	dac02517 	ldw	r11,148(sp)
8008bff0:	12c0000d 	sth	r11,0(r2)
8008bff4:	003e6e06 	br	8008b9b0 <___svfiprintf_internal_r+0x9c>
8008bff8:	98c00007 	ldb	r3,0(r19)
8008bffc:	1a422926 	beq	r3,r9,8008c8a4 <___svfiprintf_internal_r+0xf90>
8008c000:	94800414 	ori	r18,r18,16
8008c004:	003e9206 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008c008:	94801014 	ori	r18,r18,64
8008c00c:	98c00007 	ldb	r3,0(r19)
8008c010:	003e8f06 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008c014:	21003fcc 	andi	r4,r4,255
8008c018:	2002c71e 	bne	r4,zero,8008cb38 <___svfiprintf_internal_r+0x1224>
8008c01c:	9080080c 	andi	r2,r18,32
8008c020:	10004926 	beq	r2,zero,8008c148 <___svfiprintf_internal_r+0x834>
8008c024:	dac02317 	ldw	r11,140(sp)
8008c028:	58800117 	ldw	r2,4(r11)
8008c02c:	5f000017 	ldw	fp,0(r11)
8008c030:	5ac00204 	addi	r11,r11,8
8008c034:	dac02315 	stw	r11,140(sp)
8008c038:	1013883a 	mov	r9,r2
8008c03c:	10004b16 	blt	r2,zero,8008c16c <___svfiprintf_internal_r+0x858>
8008c040:	da801d83 	ldbu	r10,118(sp)
8008c044:	8001cb16 	blt	r16,zero,8008c774 <___svfiprintf_internal_r+0xe60>
8008c048:	00ffdfc4 	movi	r3,-129
8008c04c:	e244b03a 	or	r2,fp,r9
8008c050:	90e4703a 	and	r18,r18,r3
8008c054:	103f4726 	beq	r2,zero,8008bd74 <___svfiprintf_internal_r+0x460>
8008c058:	48008c26 	beq	r9,zero,8008c28c <___svfiprintf_internal_r+0x978>
8008c05c:	dc802015 	stw	r18,128(sp)
8008c060:	dc002115 	stw	r16,132(sp)
8008c064:	dc401a04 	addi	r17,sp,104
8008c068:	e021883a 	mov	r16,fp
8008c06c:	da002215 	stw	r8,136(sp)
8008c070:	5039883a 	mov	fp,r10
8008c074:	4825883a 	mov	r18,r9
8008c078:	8009883a 	mov	r4,r16
8008c07c:	900b883a 	mov	r5,r18
8008c080:	01800284 	movi	r6,10
8008c084:	000f883a 	mov	r7,zero
8008c088:	008f0440 	call	8008f044 <__umoddi3>
8008c08c:	10800c04 	addi	r2,r2,48
8008c090:	8c7fffc4 	addi	r17,r17,-1
8008c094:	8009883a 	mov	r4,r16
8008c098:	900b883a 	mov	r5,r18
8008c09c:	88800005 	stb	r2,0(r17)
8008c0a0:	01800284 	movi	r6,10
8008c0a4:	000f883a 	mov	r7,zero
8008c0a8:	008eacc0 	call	8008eacc <__udivdi3>
8008c0ac:	1021883a 	mov	r16,r2
8008c0b0:	10c4b03a 	or	r2,r2,r3
8008c0b4:	1825883a 	mov	r18,r3
8008c0b8:	103fef1e 	bne	r2,zero,8008c078 <___svfiprintf_internal_r+0x764>
8008c0bc:	dc802017 	ldw	r18,128(sp)
8008c0c0:	dc002117 	ldw	r16,132(sp)
8008c0c4:	da002217 	ldw	r8,136(sp)
8008c0c8:	e015883a 	mov	r10,fp
8008c0cc:	d8c01e17 	ldw	r3,120(sp)
8008c0d0:	1c47c83a 	sub	r3,r3,r17
8008c0d4:	d8c02115 	stw	r3,132(sp)
8008c0d8:	003f2a06 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008c0dc:	dac02317 	ldw	r11,140(sp)
8008c0e0:	d8001d85 	stb	zero,118(sp)
8008c0e4:	5c400017 	ldw	r17,0(r11)
8008c0e8:	5f000104 	addi	fp,r11,4
8008c0ec:	88022f26 	beq	r17,zero,8008c9ac <___svfiprintf_internal_r+0x1098>
8008c0f0:	80022516 	blt	r16,zero,8008c988 <___svfiprintf_internal_r+0x1074>
8008c0f4:	800d883a 	mov	r6,r16
8008c0f8:	000b883a 	mov	r5,zero
8008c0fc:	8809883a 	mov	r4,r17
8008c100:	da002c15 	stw	r8,176(sp)
8008c104:	00898640 	call	80089864 <memchr>
8008c108:	da002c17 	ldw	r8,176(sp)
8008c10c:	10026426 	beq	r2,zero,8008caa0 <___svfiprintf_internal_r+0x118c>
8008c110:	1445c83a 	sub	r2,r2,r17
8008c114:	d8802115 	stw	r2,132(sp)
8008c118:	da801d83 	ldbu	r10,118(sp)
8008c11c:	df002315 	stw	fp,140(sp)
8008c120:	0021883a 	mov	r16,zero
8008c124:	003f1706 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008c128:	94800814 	ori	r18,r18,32
8008c12c:	98c00007 	ldb	r3,0(r19)
8008c130:	003e4706 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008c134:	21003fcc 	andi	r4,r4,255
8008c138:	2002701e 	bne	r4,zero,8008cafc <___svfiprintf_internal_r+0x11e8>
8008c13c:	94800414 	ori	r18,r18,16
8008c140:	9080080c 	andi	r2,r18,32
8008c144:	103fb71e 	bne	r2,zero,8008c024 <___svfiprintf_internal_r+0x710>
8008c148:	9080040c 	andi	r2,r18,16
8008c14c:	1001ab26 	beq	r2,zero,8008c7fc <___svfiprintf_internal_r+0xee8>
8008c150:	dac02317 	ldw	r11,140(sp)
8008c154:	5f000017 	ldw	fp,0(r11)
8008c158:	5ac00104 	addi	r11,r11,4
8008c15c:	dac02315 	stw	r11,140(sp)
8008c160:	e013d7fa 	srai	r9,fp,31
8008c164:	4805883a 	mov	r2,r9
8008c168:	103fb50e 	bge	r2,zero,8008c040 <___svfiprintf_internal_r+0x72c>
8008c16c:	0739c83a 	sub	fp,zero,fp
8008c170:	02800b44 	movi	r10,45
8008c174:	e004c03a 	cmpne	r2,fp,zero
8008c178:	0253c83a 	sub	r9,zero,r9
8008c17c:	da801d85 	stb	r10,118(sp)
8008c180:	4893c83a 	sub	r9,r9,r2
8008c184:	80023016 	blt	r16,zero,8008ca48 <___svfiprintf_internal_r+0x1134>
8008c188:	00bfdfc4 	movi	r2,-129
8008c18c:	90a4703a 	and	r18,r18,r2
8008c190:	483fb21e 	bne	r9,zero,8008c05c <___svfiprintf_internal_r+0x748>
8008c194:	00003d06 	br	8008c28c <___svfiprintf_internal_r+0x978>
8008c198:	9817883a 	mov	r11,r19
8008c19c:	d8002415 	stw	zero,144(sp)
8008c1a0:	18bff404 	addi	r2,r3,-48
8008c1a4:	0019883a 	mov	r12,zero
8008c1a8:	58c00007 	ldb	r3,0(r11)
8008c1ac:	630002a4 	muli	r12,r12,10
8008c1b0:	9cc00044 	addi	r19,r19,1
8008c1b4:	9817883a 	mov	r11,r19
8008c1b8:	1319883a 	add	r12,r2,r12
8008c1bc:	18bff404 	addi	r2,r3,-48
8008c1c0:	30bff92e 	bgeu	r6,r2,8008c1a8 <___svfiprintf_internal_r+0x894>
8008c1c4:	db002415 	stw	r12,144(sp)
8008c1c8:	18bff804 	addi	r2,r3,-32
8008c1cc:	28be232e 	bgeu	r5,r2,8008ba5c <___svfiprintf_internal_r+0x148>
8008c1d0:	21003fcc 	andi	r4,r4,255
8008c1d4:	20024b1e 	bne	r4,zero,8008cb04 <___svfiprintf_internal_r+0x11f0>
8008c1d8:	1800d626 	beq	r3,zero,8008c534 <___svfiprintf_internal_r+0xc20>
8008c1dc:	02c00044 	movi	r11,1
8008c1e0:	dac02015 	stw	r11,128(sp)
8008c1e4:	d8c01005 	stb	r3,64(sp)
8008c1e8:	d8001d85 	stb	zero,118(sp)
8008c1ec:	dac02115 	stw	r11,132(sp)
8008c1f0:	dc401004 	addi	r17,sp,64
8008c1f4:	003f2606 	br	8008be90 <___svfiprintf_internal_r+0x57c>
8008c1f8:	94802014 	ori	r18,r18,128
8008c1fc:	98c00007 	ldb	r3,0(r19)
8008c200:	003e1306 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008c204:	98c00007 	ldb	r3,0(r19)
8008c208:	9ac00044 	addi	r11,r19,1
8008c20c:	1a822b26 	beq	r3,r10,8008cabc <___svfiprintf_internal_r+0x11a8>
8008c210:	18bff404 	addi	r2,r3,-48
8008c214:	0021883a 	mov	r16,zero
8008c218:	30821e36 	bltu	r6,r2,8008ca94 <___svfiprintf_internal_r+0x1180>
8008c21c:	58c00007 	ldb	r3,0(r11)
8008c220:	840002a4 	muli	r16,r16,10
8008c224:	5cc00044 	addi	r19,r11,1
8008c228:	9817883a 	mov	r11,r19
8008c22c:	80a1883a 	add	r16,r16,r2
8008c230:	18bff404 	addi	r2,r3,-48
8008c234:	30bff92e 	bgeu	r6,r2,8008c21c <___svfiprintf_internal_r+0x908>
8008c238:	803e060e 	bge	r16,zero,8008ba54 <___svfiprintf_internal_r+0x140>
8008c23c:	043fffc4 	movi	r16,-1
8008c240:	003e0406 	br	8008ba54 <___svfiprintf_internal_r+0x140>
8008c244:	21003fcc 	andi	r4,r4,255
8008c248:	2002371e 	bne	r4,zero,8008cb28 <___svfiprintf_internal_r+0x1214>
8008c24c:	94800414 	ori	r18,r18,16
8008c250:	9080080c 	andi	r2,r18,32
8008c254:	103ebb1e 	bne	r2,zero,8008bd44 <___svfiprintf_internal_r+0x430>
8008c258:	9080040c 	andi	r2,r18,16
8008c25c:	10013b26 	beq	r2,zero,8008c74c <___svfiprintf_internal_r+0xe38>
8008c260:	dac02317 	ldw	r11,140(sp)
8008c264:	d8001d85 	stb	zero,118(sp)
8008c268:	0013883a 	mov	r9,zero
8008c26c:	58800104 	addi	r2,r11,4
8008c270:	5f000017 	ldw	fp,0(r11)
8008c274:	80013d16 	blt	r16,zero,8008c76c <___svfiprintf_internal_r+0xe58>
8008c278:	00ffdfc4 	movi	r3,-129
8008c27c:	d8802315 	stw	r2,140(sp)
8008c280:	90e4703a 	and	r18,r18,r3
8008c284:	0015883a 	mov	r10,zero
8008c288:	e03eba26 	beq	fp,zero,8008bd74 <___svfiprintf_internal_r+0x460>
8008c28c:	00800244 	movi	r2,9
8008c290:	173f7236 	bltu	r2,fp,8008c05c <___svfiprintf_internal_r+0x748>
8008c294:	dac02b17 	ldw	r11,172(sp)
8008c298:	e7000c04 	addi	fp,fp,48
8008c29c:	df0019c5 	stb	fp,103(sp)
8008c2a0:	dac02115 	stw	r11,132(sp)
8008c2a4:	dc4019c4 	addi	r17,sp,103
8008c2a8:	003eb606 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008c2ac:	21003fcc 	andi	r4,r4,255
8008c2b0:	20021f1e 	bne	r4,zero,8008cb30 <___svfiprintf_internal_r+0x121c>
8008c2b4:	94800414 	ori	r18,r18,16
8008c2b8:	9080080c 	andi	r2,r18,32
8008c2bc:	103ec51e 	bne	r2,zero,8008bdd4 <___svfiprintf_internal_r+0x4c0>
8008c2c0:	9080040c 	andi	r2,r18,16
8008c2c4:	10016926 	beq	r2,zero,8008c86c <___svfiprintf_internal_r+0xf58>
8008c2c8:	dac02317 	ldw	r11,140(sp)
8008c2cc:	d8001d85 	stb	zero,118(sp)
8008c2d0:	0013883a 	mov	r9,zero
8008c2d4:	58800104 	addi	r2,r11,4
8008c2d8:	5f000017 	ldw	fp,0(r11)
8008c2dc:	80016b16 	blt	r16,zero,8008c88c <___svfiprintf_internal_r+0xf78>
8008c2e0:	00ffdfc4 	movi	r3,-129
8008c2e4:	d8802315 	stw	r2,140(sp)
8008c2e8:	90e4703a 	and	r18,r18,r3
8008c2ec:	e03ec41e 	bne	fp,zero,8008be00 <___svfiprintf_internal_r+0x4ec>
8008c2f0:	0015883a 	mov	r10,zero
8008c2f4:	8001c226 	beq	r16,zero,8008ca00 <___svfiprintf_internal_r+0x10ec>
8008c2f8:	0039883a 	mov	fp,zero
8008c2fc:	0013883a 	mov	r9,zero
8008c300:	003ec006 	br	8008be04 <___svfiprintf_internal_r+0x4f0>
8008c304:	d8c01c17 	ldw	r3,112(sp)
8008c308:	d8801b17 	ldw	r2,108(sp)
8008c30c:	d9001d87 	ldb	r4,118(sp)
8008c310:	20000b26 	beq	r4,zero,8008c340 <___svfiprintf_internal_r+0xa2c>
8008c314:	d9001d84 	addi	r4,sp,118
8008c318:	18c00044 	addi	r3,r3,1
8008c31c:	10800044 	addi	r2,r2,1
8008c320:	41000015 	stw	r4,0(r8)
8008c324:	01000044 	movi	r4,1
8008c328:	41000115 	stw	r4,4(r8)
8008c32c:	d8c01c15 	stw	r3,112(sp)
8008c330:	d8801b15 	stw	r2,108(sp)
8008c334:	010001c4 	movi	r4,7
8008c338:	2080e116 	blt	r4,r2,8008c6c0 <___svfiprintf_internal_r+0xdac>
8008c33c:	42000204 	addi	r8,r8,8
8008c340:	dac02217 	ldw	r11,136(sp)
8008c344:	58000b26 	beq	r11,zero,8008c374 <___svfiprintf_internal_r+0xa60>
8008c348:	d9001d04 	addi	r4,sp,116
8008c34c:	18c00084 	addi	r3,r3,2
8008c350:	10800044 	addi	r2,r2,1
8008c354:	41000015 	stw	r4,0(r8)
8008c358:	01000084 	movi	r4,2
8008c35c:	41000115 	stw	r4,4(r8)
8008c360:	d8c01c15 	stw	r3,112(sp)
8008c364:	d8801b15 	stw	r2,108(sp)
8008c368:	010001c4 	movi	r4,7
8008c36c:	2080dd16 	blt	r4,r2,8008c6e4 <___svfiprintf_internal_r+0xdd0>
8008c370:	42000204 	addi	r8,r8,8
8008c374:	dac02617 	ldw	r11,152(sp)
8008c378:	01002004 	movi	r4,128
8008c37c:	59008426 	beq	r11,r4,8008c590 <___svfiprintf_internal_r+0xc7c>
8008c380:	dac02117 	ldw	r11,132(sp)
8008c384:	82e1c83a 	sub	r16,r16,r11
8008c388:	0400270e 	bge	zero,r16,8008c428 <___svfiprintf_internal_r+0xb14>
8008c38c:	01c00404 	movi	r7,16
8008c390:	3c016a0e 	bge	r7,r16,8008c93c <___svfiprintf_internal_r+0x1028>
8008c394:	01600274 	movhi	r5,32777
8008c398:	295af204 	addi	r5,r5,27592
8008c39c:	d9402215 	stw	r5,136(sp)
8008c3a0:	070001c4 	movi	fp,7
8008c3a4:	00000306 	br	8008c3b4 <___svfiprintf_internal_r+0xaa0>
8008c3a8:	843ffc04 	addi	r16,r16,-16
8008c3ac:	42000204 	addi	r8,r8,8
8008c3b0:	3c00130e 	bge	r7,r16,8008c400 <___svfiprintf_internal_r+0xaec>
8008c3b4:	18c00404 	addi	r3,r3,16
8008c3b8:	10800044 	addi	r2,r2,1
8008c3bc:	45000015 	stw	r20,0(r8)
8008c3c0:	41c00115 	stw	r7,4(r8)
8008c3c4:	d8c01c15 	stw	r3,112(sp)
8008c3c8:	d8801b15 	stw	r2,108(sp)
8008c3cc:	e0bff60e 	bge	fp,r2,8008c3a8 <___svfiprintf_internal_r+0xa94>
8008c3d0:	d9801a04 	addi	r6,sp,104
8008c3d4:	b80b883a 	mov	r5,r23
8008c3d8:	a809883a 	mov	r4,r21
8008c3dc:	d9c02c15 	stw	r7,176(sp)
8008c3e0:	008b7440 	call	8008b744 <__ssprint_r>
8008c3e4:	d9c02c17 	ldw	r7,176(sp)
8008c3e8:	1000581e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c3ec:	843ffc04 	addi	r16,r16,-16
8008c3f0:	d8c01c17 	ldw	r3,112(sp)
8008c3f4:	d8801b17 	ldw	r2,108(sp)
8008c3f8:	d811883a 	mov	r8,sp
8008c3fc:	3c3fed16 	blt	r7,r16,8008c3b4 <___svfiprintf_internal_r+0xaa0>
8008c400:	dac02217 	ldw	r11,136(sp)
8008c404:	1c07883a 	add	r3,r3,r16
8008c408:	10800044 	addi	r2,r2,1
8008c40c:	42c00015 	stw	r11,0(r8)
8008c410:	44000115 	stw	r16,4(r8)
8008c414:	d8c01c15 	stw	r3,112(sp)
8008c418:	d8801b15 	stw	r2,108(sp)
8008c41c:	010001c4 	movi	r4,7
8008c420:	20809e16 	blt	r4,r2,8008c69c <___svfiprintf_internal_r+0xd88>
8008c424:	42000204 	addi	r8,r8,8
8008c428:	dac02117 	ldw	r11,132(sp)
8008c42c:	10800044 	addi	r2,r2,1
8008c430:	44400015 	stw	r17,0(r8)
8008c434:	58c7883a 	add	r3,r11,r3
8008c438:	42c00115 	stw	r11,4(r8)
8008c43c:	d8c01c15 	stw	r3,112(sp)
8008c440:	d8801b15 	stw	r2,108(sp)
8008c444:	010001c4 	movi	r4,7
8008c448:	20807f16 	blt	r4,r2,8008c648 <___svfiprintf_internal_r+0xd34>
8008c44c:	42000204 	addi	r8,r8,8
8008c450:	9480010c 	andi	r18,r18,4
8008c454:	90002926 	beq	r18,zero,8008c4fc <___svfiprintf_internal_r+0xbe8>
8008c458:	dac02417 	ldw	r11,144(sp)
8008c45c:	d8802017 	ldw	r2,128(sp)
8008c460:	58a1c83a 	sub	r16,r11,r2
8008c464:	0400250e 	bge	zero,r16,8008c4fc <___svfiprintf_internal_r+0xbe8>
8008c468:	04400404 	movi	r17,16
8008c46c:	d8801b17 	ldw	r2,108(sp)
8008c470:	8c017c0e 	bge	r17,r16,8008ca64 <___svfiprintf_internal_r+0x1150>
8008c474:	01600274 	movhi	r5,32777
8008c478:	295af604 	addi	r5,r5,27608
8008c47c:	d9402815 	stw	r5,160(sp)
8008c480:	048001c4 	movi	r18,7
8008c484:	00000306 	br	8008c494 <___svfiprintf_internal_r+0xb80>
8008c488:	843ffc04 	addi	r16,r16,-16
8008c48c:	42000204 	addi	r8,r8,8
8008c490:	8c00110e 	bge	r17,r16,8008c4d8 <___svfiprintf_internal_r+0xbc4>
8008c494:	18c00404 	addi	r3,r3,16
8008c498:	10800044 	addi	r2,r2,1
8008c49c:	45800015 	stw	r22,0(r8)
8008c4a0:	44400115 	stw	r17,4(r8)
8008c4a4:	d8c01c15 	stw	r3,112(sp)
8008c4a8:	d8801b15 	stw	r2,108(sp)
8008c4ac:	90bff60e 	bge	r18,r2,8008c488 <___svfiprintf_internal_r+0xb74>
8008c4b0:	d9801a04 	addi	r6,sp,104
8008c4b4:	b80b883a 	mov	r5,r23
8008c4b8:	a809883a 	mov	r4,r21
8008c4bc:	008b7440 	call	8008b744 <__ssprint_r>
8008c4c0:	1000221e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c4c4:	843ffc04 	addi	r16,r16,-16
8008c4c8:	d8c01c17 	ldw	r3,112(sp)
8008c4cc:	d8801b17 	ldw	r2,108(sp)
8008c4d0:	d811883a 	mov	r8,sp
8008c4d4:	8c3fef16 	blt	r17,r16,8008c494 <___svfiprintf_internal_r+0xb80>
8008c4d8:	dac02817 	ldw	r11,160(sp)
8008c4dc:	1c07883a 	add	r3,r3,r16
8008c4e0:	10800044 	addi	r2,r2,1
8008c4e4:	42c00015 	stw	r11,0(r8)
8008c4e8:	44000115 	stw	r16,4(r8)
8008c4ec:	d8c01c15 	stw	r3,112(sp)
8008c4f0:	d8801b15 	stw	r2,108(sp)
8008c4f4:	010001c4 	movi	r4,7
8008c4f8:	2080aa16 	blt	r4,r2,8008c7a4 <___svfiprintf_internal_r+0xe90>
8008c4fc:	d8802417 	ldw	r2,144(sp)
8008c500:	dac02017 	ldw	r11,128(sp)
8008c504:	12c0010e 	bge	r2,r11,8008c50c <___svfiprintf_internal_r+0xbf8>
8008c508:	5805883a 	mov	r2,r11
8008c50c:	dac02517 	ldw	r11,148(sp)
8008c510:	5897883a 	add	r11,r11,r2
8008c514:	dac02515 	stw	r11,148(sp)
8008c518:	1800531e 	bne	r3,zero,8008c668 <___svfiprintf_internal_r+0xd54>
8008c51c:	98800007 	ldb	r2,0(r19)
8008c520:	d8001b15 	stw	zero,108(sp)
8008c524:	d811883a 	mov	r8,sp
8008c528:	103d231e 	bne	r2,zero,8008b9b8 <___svfiprintf_internal_r+0xa4>
8008c52c:	9823883a 	mov	r17,r19
8008c530:	003d3906 	br	8008ba18 <___svfiprintf_internal_r+0x104>
8008c534:	d8801c17 	ldw	r2,112(sp)
8008c538:	10000426 	beq	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c53c:	d9402717 	ldw	r5,156(sp)
8008c540:	d9002a17 	ldw	r4,168(sp)
8008c544:	d9801a04 	addi	r6,sp,104
8008c548:	008b7440 	call	8008b744 <__ssprint_r>
8008c54c:	dac02717 	ldw	r11,156(sp)
8008c550:	d8802517 	ldw	r2,148(sp)
8008c554:	58c0030b 	ldhu	r3,12(r11)
8008c558:	18c0100c 	andi	r3,r3,64
8008c55c:	1801381e 	bne	r3,zero,8008ca40 <___svfiprintf_internal_r+0x112c>
8008c560:	dfc03717 	ldw	ra,220(sp)
8008c564:	df003617 	ldw	fp,216(sp)
8008c568:	ddc03517 	ldw	r23,212(sp)
8008c56c:	dd803417 	ldw	r22,208(sp)
8008c570:	dd403317 	ldw	r21,204(sp)
8008c574:	dd003217 	ldw	r20,200(sp)
8008c578:	dcc03117 	ldw	r19,196(sp)
8008c57c:	dc803017 	ldw	r18,192(sp)
8008c580:	dc402f17 	ldw	r17,188(sp)
8008c584:	dc002e17 	ldw	r16,184(sp)
8008c588:	dec03804 	addi	sp,sp,224
8008c58c:	f800283a 	ret
8008c590:	dac02417 	ldw	r11,144(sp)
8008c594:	d9002017 	ldw	r4,128(sp)
8008c598:	5939c83a 	sub	fp,r11,r4
8008c59c:	073f780e 	bge	zero,fp,8008c380 <___svfiprintf_internal_r+0xa6c>
8008c5a0:	02400404 	movi	r9,16
8008c5a4:	4f01370e 	bge	r9,fp,8008ca84 <___svfiprintf_internal_r+0x1170>
8008c5a8:	02e00274 	movhi	r11,32777
8008c5ac:	5adaf204 	addi	r11,r11,27592
8008c5b0:	dac02215 	stw	r11,136(sp)
8008c5b4:	028001c4 	movi	r10,7
8008c5b8:	00000306 	br	8008c5c8 <___svfiprintf_internal_r+0xcb4>
8008c5bc:	e73ffc04 	addi	fp,fp,-16
8008c5c0:	42000204 	addi	r8,r8,8
8008c5c4:	4f00150e 	bge	r9,fp,8008c61c <___svfiprintf_internal_r+0xd08>
8008c5c8:	18c00404 	addi	r3,r3,16
8008c5cc:	10800044 	addi	r2,r2,1
8008c5d0:	45000015 	stw	r20,0(r8)
8008c5d4:	42400115 	stw	r9,4(r8)
8008c5d8:	d8c01c15 	stw	r3,112(sp)
8008c5dc:	d8801b15 	stw	r2,108(sp)
8008c5e0:	50bff60e 	bge	r10,r2,8008c5bc <___svfiprintf_internal_r+0xca8>
8008c5e4:	d9801a04 	addi	r6,sp,104
8008c5e8:	b80b883a 	mov	r5,r23
8008c5ec:	a809883a 	mov	r4,r21
8008c5f0:	da402c15 	stw	r9,176(sp)
8008c5f4:	da802d15 	stw	r10,180(sp)
8008c5f8:	008b7440 	call	8008b744 <__ssprint_r>
8008c5fc:	da402c17 	ldw	r9,176(sp)
8008c600:	da802d17 	ldw	r10,180(sp)
8008c604:	103fd11e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c608:	e73ffc04 	addi	fp,fp,-16
8008c60c:	d8c01c17 	ldw	r3,112(sp)
8008c610:	d8801b17 	ldw	r2,108(sp)
8008c614:	d811883a 	mov	r8,sp
8008c618:	4f3feb16 	blt	r9,fp,8008c5c8 <___svfiprintf_internal_r+0xcb4>
8008c61c:	dac02217 	ldw	r11,136(sp)
8008c620:	1f07883a 	add	r3,r3,fp
8008c624:	10800044 	addi	r2,r2,1
8008c628:	42c00015 	stw	r11,0(r8)
8008c62c:	47000115 	stw	fp,4(r8)
8008c630:	d8c01c15 	stw	r3,112(sp)
8008c634:	d8801b15 	stw	r2,108(sp)
8008c638:	010001c4 	movi	r4,7
8008c63c:	2080b616 	blt	r4,r2,8008c918 <___svfiprintf_internal_r+0x1004>
8008c640:	42000204 	addi	r8,r8,8
8008c644:	003f4e06 	br	8008c380 <___svfiprintf_internal_r+0xa6c>
8008c648:	d9801a04 	addi	r6,sp,104
8008c64c:	b80b883a 	mov	r5,r23
8008c650:	a809883a 	mov	r4,r21
8008c654:	008b7440 	call	8008b744 <__ssprint_r>
8008c658:	103fbc1e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c65c:	d8c01c17 	ldw	r3,112(sp)
8008c660:	d811883a 	mov	r8,sp
8008c664:	003f7a06 	br	8008c450 <___svfiprintf_internal_r+0xb3c>
8008c668:	d9801a04 	addi	r6,sp,104
8008c66c:	b80b883a 	mov	r5,r23
8008c670:	a809883a 	mov	r4,r21
8008c674:	008b7440 	call	8008b744 <__ssprint_r>
8008c678:	103fa826 	beq	r2,zero,8008c51c <___svfiprintf_internal_r+0xc08>
8008c67c:	003fb306 	br	8008c54c <___svfiprintf_internal_r+0xc38>
8008c680:	d9801a04 	addi	r6,sp,104
8008c684:	b80b883a 	mov	r5,r23
8008c688:	a809883a 	mov	r4,r21
8008c68c:	008b7440 	call	8008b744 <__ssprint_r>
8008c690:	103fae1e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c694:	d811883a 	mov	r8,sp
8008c698:	003cdc06 	br	8008ba0c <___svfiprintf_internal_r+0xf8>
8008c69c:	d9801a04 	addi	r6,sp,104
8008c6a0:	b80b883a 	mov	r5,r23
8008c6a4:	a809883a 	mov	r4,r21
8008c6a8:	008b7440 	call	8008b744 <__ssprint_r>
8008c6ac:	103fa71e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c6b0:	d8c01c17 	ldw	r3,112(sp)
8008c6b4:	d8801b17 	ldw	r2,108(sp)
8008c6b8:	d811883a 	mov	r8,sp
8008c6bc:	003f5a06 	br	8008c428 <___svfiprintf_internal_r+0xb14>
8008c6c0:	d9801a04 	addi	r6,sp,104
8008c6c4:	b80b883a 	mov	r5,r23
8008c6c8:	a809883a 	mov	r4,r21
8008c6cc:	008b7440 	call	8008b744 <__ssprint_r>
8008c6d0:	103f9e1e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c6d4:	d8c01c17 	ldw	r3,112(sp)
8008c6d8:	d8801b17 	ldw	r2,108(sp)
8008c6dc:	d811883a 	mov	r8,sp
8008c6e0:	003f1706 	br	8008c340 <___svfiprintf_internal_r+0xa2c>
8008c6e4:	d9801a04 	addi	r6,sp,104
8008c6e8:	b80b883a 	mov	r5,r23
8008c6ec:	a809883a 	mov	r4,r21
8008c6f0:	008b7440 	call	8008b744 <__ssprint_r>
8008c6f4:	103f951e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c6f8:	d8c01c17 	ldw	r3,112(sp)
8008c6fc:	d8801b17 	ldw	r2,108(sp)
8008c700:	d811883a 	mov	r8,sp
8008c704:	003f1b06 	br	8008c374 <___svfiprintf_internal_r+0xa60>
8008c708:	d8001d85 	stb	zero,118(sp)
8008c70c:	80007b16 	blt	r16,zero,8008c8fc <___svfiprintf_internal_r+0xfe8>
8008c710:	00ffdfc4 	movi	r3,-129
8008c714:	e244b03a 	or	r2,fp,r9
8008c718:	90e4703a 	and	r18,r18,r3
8008c71c:	103d7026 	beq	r2,zero,8008bce0 <___svfiprintf_internal_r+0x3cc>
8008c720:	0015883a 	mov	r10,zero
8008c724:	003d7206 	br	8008bcf0 <___svfiprintf_internal_r+0x3dc>
8008c728:	d9801a04 	addi	r6,sp,104
8008c72c:	b80b883a 	mov	r5,r23
8008c730:	a809883a 	mov	r4,r21
8008c734:	008b7440 	call	8008b744 <__ssprint_r>
8008c738:	103f841e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c73c:	d8c01c17 	ldw	r3,112(sp)
8008c740:	d8801b17 	ldw	r2,108(sp)
8008c744:	d811883a 	mov	r8,sp
8008c748:	003ef006 	br	8008c30c <___svfiprintf_internal_r+0x9f8>
8008c74c:	9080100c 	andi	r2,r18,64
8008c750:	d8001d85 	stb	zero,118(sp)
8008c754:	dac02317 	ldw	r11,140(sp)
8008c758:	10008126 	beq	r2,zero,8008c960 <___svfiprintf_internal_r+0x104c>
8008c75c:	58800104 	addi	r2,r11,4
8008c760:	5f00000b 	ldhu	fp,0(r11)
8008c764:	0013883a 	mov	r9,zero
8008c768:	803ec30e 	bge	r16,zero,8008c278 <___svfiprintf_internal_r+0x964>
8008c76c:	d8802315 	stw	r2,140(sp)
8008c770:	0015883a 	mov	r10,zero
8008c774:	e244b03a 	or	r2,fp,r9
8008c778:	103e371e 	bne	r2,zero,8008c058 <___svfiprintf_internal_r+0x744>
8008c77c:	00800044 	movi	r2,1
8008c780:	10803fcc 	andi	r2,r2,255
8008c784:	00c00044 	movi	r3,1
8008c788:	10c06126 	beq	r2,r3,8008c910 <___svfiprintf_internal_r+0xffc>
8008c78c:	00c00084 	movi	r3,2
8008c790:	10fd5526 	beq	r2,r3,8008bce8 <___svfiprintf_internal_r+0x3d4>
8008c794:	003ed806 	br	8008c2f8 <___svfiprintf_internal_r+0x9e4>
8008c798:	d8802315 	stw	r2,140(sp)
8008c79c:	98c00007 	ldb	r3,0(r19)
8008c7a0:	003cab06 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008c7a4:	d9801a04 	addi	r6,sp,104
8008c7a8:	b80b883a 	mov	r5,r23
8008c7ac:	a809883a 	mov	r4,r21
8008c7b0:	008b7440 	call	8008b744 <__ssprint_r>
8008c7b4:	103f651e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c7b8:	d8c01c17 	ldw	r3,112(sp)
8008c7bc:	003f4f06 	br	8008c4fc <___svfiprintf_internal_r+0xbe8>
8008c7c0:	00a00274 	movhi	r2,32777
8008c7c4:	109a8b04 	addi	r2,r2,27180
8008c7c8:	d8802915 	stw	r2,164(sp)
8008c7cc:	003d4406 	br	8008bce0 <___svfiprintf_internal_r+0x3cc>
8008c7d0:	dac02317 	ldw	r11,140(sp)
8008c7d4:	58800017 	ldw	r2,0(r11)
8008c7d8:	dac02517 	ldw	r11,148(sp)
8008c7dc:	5807d7fa 	srai	r3,r11,31
8008c7e0:	dac02317 	ldw	r11,140(sp)
8008c7e4:	10c00115 	stw	r3,4(r2)
8008c7e8:	5ac00104 	addi	r11,r11,4
8008c7ec:	dac02315 	stw	r11,140(sp)
8008c7f0:	dac02517 	ldw	r11,148(sp)
8008c7f4:	12c00015 	stw	r11,0(r2)
8008c7f8:	003c6d06 	br	8008b9b0 <___svfiprintf_internal_r+0x9c>
8008c7fc:	9080100c 	andi	r2,r18,64
8008c800:	dac02317 	ldw	r11,140(sp)
8008c804:	103e5326 	beq	r2,zero,8008c154 <___svfiprintf_internal_r+0x840>
8008c808:	5f00000f 	ldh	fp,0(r11)
8008c80c:	5ac00104 	addi	r11,r11,4
8008c810:	dac02315 	stw	r11,140(sp)
8008c814:	e013d7fa 	srai	r9,fp,31
8008c818:	4805883a 	mov	r2,r9
8008c81c:	003e0706 	br	8008c03c <___svfiprintf_internal_r+0x728>
8008c820:	00800c04 	movi	r2,48
8008c824:	d8801d05 	stb	r2,116(sp)
8008c828:	d8c01d45 	stb	r3,117(sp)
8008c82c:	d8001d85 	stb	zero,118(sp)
8008c830:	90800094 	ori	r2,r18,2
8008c834:	80008f16 	blt	r16,zero,8008ca74 <___svfiprintf_internal_r+0x1160>
8008c838:	00bfdfc4 	movi	r2,-129
8008c83c:	90a4703a 	and	r18,r18,r2
8008c840:	94800094 	ori	r18,r18,2
8008c844:	0015883a 	mov	r10,zero
8008c848:	003d2906 	br	8008bcf0 <___svfiprintf_internal_r+0x3dc>
8008c84c:	98c00007 	ldb	r3,0(r19)
8008c850:	003c7f06 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008c854:	dac02317 	ldw	r11,140(sp)
8008c858:	0013883a 	mov	r9,zero
8008c85c:	5f000017 	ldw	fp,0(r11)
8008c860:	5ac00104 	addi	r11,r11,4
8008c864:	dac02315 	stw	r11,140(sp)
8008c868:	003d1506 	br	8008bcc0 <___svfiprintf_internal_r+0x3ac>
8008c86c:	9080100c 	andi	r2,r18,64
8008c870:	d8001d85 	stb	zero,118(sp)
8008c874:	dac02317 	ldw	r11,140(sp)
8008c878:	10003426 	beq	r2,zero,8008c94c <___svfiprintf_internal_r+0x1038>
8008c87c:	58800104 	addi	r2,r11,4
8008c880:	5f00000b 	ldhu	fp,0(r11)
8008c884:	0013883a 	mov	r9,zero
8008c888:	803e950e 	bge	r16,zero,8008c2e0 <___svfiprintf_internal_r+0x9cc>
8008c88c:	e246b03a 	or	r3,fp,r9
8008c890:	d8802315 	stw	r2,140(sp)
8008c894:	183d5a1e 	bne	r3,zero,8008be00 <___svfiprintf_internal_r+0x4ec>
8008c898:	0015883a 	mov	r10,zero
8008c89c:	0005883a 	mov	r2,zero
8008c8a0:	003fb706 	br	8008c780 <___svfiprintf_internal_r+0xe6c>
8008c8a4:	98c00043 	ldbu	r3,1(r19)
8008c8a8:	94800814 	ori	r18,r18,32
8008c8ac:	9cc00044 	addi	r19,r19,1
8008c8b0:	18c03fcc 	andi	r3,r3,255
8008c8b4:	18c0201c 	xori	r3,r3,128
8008c8b8:	18ffe004 	addi	r3,r3,-128
8008c8bc:	003c6406 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008c8c0:	d8c02315 	stw	r3,140(sp)
8008c8c4:	0015883a 	mov	r10,zero
8008c8c8:	003faa06 	br	8008c774 <___svfiprintf_internal_r+0xe60>
8008c8cc:	dac02317 	ldw	r11,140(sp)
8008c8d0:	58800017 	ldw	r2,0(r11)
8008c8d4:	5ac00104 	addi	r11,r11,4
8008c8d8:	dac02315 	stw	r11,140(sp)
8008c8dc:	dac02517 	ldw	r11,148(sp)
8008c8e0:	12c00015 	stw	r11,0(r2)
8008c8e4:	003c3206 	br	8008b9b0 <___svfiprintf_internal_r+0x9c>
8008c8e8:	01200274 	movhi	r4,32777
8008c8ec:	211a8b04 	addi	r4,r4,27180
8008c8f0:	d9002915 	stw	r4,164(sp)
8008c8f4:	d8c02315 	stw	r3,140(sp)
8008c8f8:	1025883a 	mov	r18,r2
8008c8fc:	e244b03a 	or	r2,fp,r9
8008c900:	103f871e 	bne	r2,zero,8008c720 <___svfiprintf_internal_r+0xe0c>
8008c904:	0015883a 	mov	r10,zero
8008c908:	00800084 	movi	r2,2
8008c90c:	003f9c06 	br	8008c780 <___svfiprintf_internal_r+0xe6c>
8008c910:	0039883a 	mov	fp,zero
8008c914:	003e5f06 	br	8008c294 <___svfiprintf_internal_r+0x980>
8008c918:	d9801a04 	addi	r6,sp,104
8008c91c:	b80b883a 	mov	r5,r23
8008c920:	a809883a 	mov	r4,r21
8008c924:	008b7440 	call	8008b744 <__ssprint_r>
8008c928:	103f081e 	bne	r2,zero,8008c54c <___svfiprintf_internal_r+0xc38>
8008c92c:	d8c01c17 	ldw	r3,112(sp)
8008c930:	d8801b17 	ldw	r2,108(sp)
8008c934:	d811883a 	mov	r8,sp
8008c938:	003e9106 	br	8008c380 <___svfiprintf_internal_r+0xa6c>
8008c93c:	01200274 	movhi	r4,32777
8008c940:	211af204 	addi	r4,r4,27592
8008c944:	d9002215 	stw	r4,136(sp)
8008c948:	003ead06 	br	8008c400 <___svfiprintf_internal_r+0xaec>
8008c94c:	58800104 	addi	r2,r11,4
8008c950:	5f000017 	ldw	fp,0(r11)
8008c954:	0013883a 	mov	r9,zero
8008c958:	803e610e 	bge	r16,zero,8008c2e0 <___svfiprintf_internal_r+0x9cc>
8008c95c:	003fcb06 	br	8008c88c <___svfiprintf_internal_r+0xf78>
8008c960:	58800104 	addi	r2,r11,4
8008c964:	5f000017 	ldw	fp,0(r11)
8008c968:	0013883a 	mov	r9,zero
8008c96c:	803e420e 	bge	r16,zero,8008c278 <___svfiprintf_internal_r+0x964>
8008c970:	003f7e06 	br	8008c76c <___svfiprintf_internal_r+0xe58>
8008c974:	5f000017 	ldw	fp,0(r11)
8008c978:	5ac00104 	addi	r11,r11,4
8008c97c:	0013883a 	mov	r9,zero
8008c980:	dac02315 	stw	r11,140(sp)
8008c984:	003cce06 	br	8008bcc0 <___svfiprintf_internal_r+0x3ac>
8008c988:	8809883a 	mov	r4,r17
8008c98c:	da002c15 	stw	r8,176(sp)
8008c990:	0081cc00 	call	80081cc0 <strlen>
8008c994:	d8802115 	stw	r2,132(sp)
8008c998:	da801d83 	ldbu	r10,118(sp)
8008c99c:	df002315 	stw	fp,140(sp)
8008c9a0:	0021883a 	mov	r16,zero
8008c9a4:	da002c17 	ldw	r8,176(sp)
8008c9a8:	003cf606 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008c9ac:	00800184 	movi	r2,6
8008c9b0:	1400012e 	bgeu	r2,r16,8008c9b8 <___svfiprintf_internal_r+0x10a4>
8008c9b4:	1021883a 	mov	r16,r2
8008c9b8:	dc002115 	stw	r16,132(sp)
8008c9bc:	8005883a 	mov	r2,r16
8008c9c0:	80003c16 	blt	r16,zero,8008cab4 <___svfiprintf_internal_r+0x11a0>
8008c9c4:	04600274 	movhi	r17,32777
8008c9c8:	d8802015 	stw	r2,128(sp)
8008c9cc:	df002315 	stw	fp,140(sp)
8008c9d0:	8c5a9004 	addi	r17,r17,27200
8008c9d4:	003d2e06 	br	8008be90 <___svfiprintf_internal_r+0x57c>
8008c9d8:	04001004 	movi	r16,64
8008c9dc:	800b883a 	mov	r5,r16
8008c9e0:	00890580 	call	80089058 <_malloc_r>
8008c9e4:	dac02717 	ldw	r11,156(sp)
8008c9e8:	58800015 	stw	r2,0(r11)
8008c9ec:	58800415 	stw	r2,16(r11)
8008c9f0:	10004826 	beq	r2,zero,8008cb14 <___svfiprintf_internal_r+0x1200>
8008c9f4:	dac02717 	ldw	r11,156(sp)
8008c9f8:	5c000515 	stw	r16,20(r11)
8008c9fc:	003bd906 	br	8008b964 <___svfiprintf_internal_r+0x50>
8008ca00:	9080004c 	andi	r2,r18,1
8008ca04:	0015883a 	mov	r10,zero
8008ca08:	10000626 	beq	r2,zero,8008ca24 <___svfiprintf_internal_r+0x1110>
8008ca0c:	dac02b17 	ldw	r11,172(sp)
8008ca10:	00800c04 	movi	r2,48
8008ca14:	d88019c5 	stb	r2,103(sp)
8008ca18:	dac02115 	stw	r11,132(sp)
8008ca1c:	dc4019c4 	addi	r17,sp,103
8008ca20:	003cd806 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008ca24:	d8002115 	stw	zero,132(sp)
8008ca28:	dc401a04 	addi	r17,sp,104
8008ca2c:	003cd506 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008ca30:	01200274 	movhi	r4,32777
8008ca34:	211af604 	addi	r4,r4,27608
8008ca38:	d9002815 	stw	r4,160(sp)
8008ca3c:	003d4306 	br	8008bf4c <___svfiprintf_internal_r+0x638>
8008ca40:	00bfffc4 	movi	r2,-1
8008ca44:	003ec606 	br	8008c560 <___svfiprintf_internal_r+0xc4c>
8008ca48:	00800044 	movi	r2,1
8008ca4c:	10803fcc 	andi	r2,r2,255
8008ca50:	00c00044 	movi	r3,1
8008ca54:	10fd8026 	beq	r2,r3,8008c058 <___svfiprintf_internal_r+0x744>
8008ca58:	00c00084 	movi	r3,2
8008ca5c:	10fca426 	beq	r2,r3,8008bcf0 <___svfiprintf_internal_r+0x3dc>
8008ca60:	003ce806 	br	8008be04 <___svfiprintf_internal_r+0x4f0>
8008ca64:	01200274 	movhi	r4,32777
8008ca68:	211af604 	addi	r4,r4,27608
8008ca6c:	d9002815 	stw	r4,160(sp)
8008ca70:	003e9906 	br	8008c4d8 <___svfiprintf_internal_r+0xbc4>
8008ca74:	1025883a 	mov	r18,r2
8008ca78:	0015883a 	mov	r10,zero
8008ca7c:	00800084 	movi	r2,2
8008ca80:	003ff206 	br	8008ca4c <___svfiprintf_internal_r+0x1138>
8008ca84:	01600274 	movhi	r5,32777
8008ca88:	295af204 	addi	r5,r5,27592
8008ca8c:	d9402215 	stw	r5,136(sp)
8008ca90:	003ee206 	br	8008c61c <___svfiprintf_internal_r+0xd08>
8008ca94:	5827883a 	mov	r19,r11
8008ca98:	0021883a 	mov	r16,zero
8008ca9c:	003bed06 	br	8008ba54 <___svfiprintf_internal_r+0x140>
8008caa0:	dc002115 	stw	r16,132(sp)
8008caa4:	da801d83 	ldbu	r10,118(sp)
8008caa8:	df002315 	stw	fp,140(sp)
8008caac:	0021883a 	mov	r16,zero
8008cab0:	003cb406 	br	8008bd84 <___svfiprintf_internal_r+0x470>
8008cab4:	0005883a 	mov	r2,zero
8008cab8:	003fc206 	br	8008c9c4 <___svfiprintf_internal_r+0x10b0>
8008cabc:	d8802317 	ldw	r2,140(sp)
8008cac0:	98c00043 	ldbu	r3,1(r19)
8008cac4:	5827883a 	mov	r19,r11
8008cac8:	14000017 	ldw	r16,0(r2)
8008cacc:	10800104 	addi	r2,r2,4
8008cad0:	d8802315 	stw	r2,140(sp)
8008cad4:	803f760e 	bge	r16,zero,8008c8b0 <___svfiprintf_internal_r+0xf9c>
8008cad8:	18c03fcc 	andi	r3,r3,255
8008cadc:	18c0201c 	xori	r3,r3,128
8008cae0:	043fffc4 	movi	r16,-1
8008cae4:	18ffe004 	addi	r3,r3,-128
8008cae8:	003bd906 	br	8008ba50 <___svfiprintf_internal_r+0x13c>
8008caec:	d9c01d85 	stb	r7,118(sp)
8008caf0:	003cb606 	br	8008bdcc <___svfiprintf_internal_r+0x4b8>
8008caf4:	d9c01d85 	stb	r7,118(sp)
8008caf8:	003d2106 	br	8008bf80 <___svfiprintf_internal_r+0x66c>
8008cafc:	d9c01d85 	stb	r7,118(sp)
8008cb00:	003d8e06 	br	8008c13c <___svfiprintf_internal_r+0x828>
8008cb04:	d9c01d85 	stb	r7,118(sp)
8008cb08:	003db306 	br	8008c1d8 <___svfiprintf_internal_r+0x8c4>
8008cb0c:	d9c01d85 	stb	r7,118(sp)
8008cb10:	003c8a06 	br	8008bd3c <___svfiprintf_internal_r+0x428>
8008cb14:	dac02a17 	ldw	r11,168(sp)
8008cb18:	00800304 	movi	r2,12
8008cb1c:	58800015 	stw	r2,0(r11)
8008cb20:	00bfffc4 	movi	r2,-1
8008cb24:	003e8e06 	br	8008c560 <___svfiprintf_internal_r+0xc4c>
8008cb28:	d9c01d85 	stb	r7,118(sp)
8008cb2c:	003dc706 	br	8008c24c <___svfiprintf_internal_r+0x938>
8008cb30:	d9c01d85 	stb	r7,118(sp)
8008cb34:	003ddf06 	br	8008c2b4 <___svfiprintf_internal_r+0x9a0>
8008cb38:	d9c01d85 	stb	r7,118(sp)
8008cb3c:	003d3706 	br	8008c01c <___svfiprintf_internal_r+0x708>
8008cb40:	d9c01d85 	stb	r7,118(sp)
8008cb44:	003c5406 	br	8008bc98 <___svfiprintf_internal_r+0x384>
8008cb48:	d9c01d85 	stb	r7,118(sp)
8008cb4c:	003d1d06 	br	8008bfc4 <___svfiprintf_internal_r+0x6b0>

8008cb50 <__sprint_r.part.0>:
8008cb50:	28801917 	ldw	r2,100(r5)
8008cb54:	defff604 	addi	sp,sp,-40
8008cb58:	dd400515 	stw	r21,20(sp)
8008cb5c:	dfc00915 	stw	ra,36(sp)
8008cb60:	df000815 	stw	fp,32(sp)
8008cb64:	ddc00715 	stw	r23,28(sp)
8008cb68:	dd800615 	stw	r22,24(sp)
8008cb6c:	dd000415 	stw	r20,16(sp)
8008cb70:	dcc00315 	stw	r19,12(sp)
8008cb74:	dc800215 	stw	r18,8(sp)
8008cb78:	dc400115 	stw	r17,4(sp)
8008cb7c:	dc000015 	stw	r16,0(sp)
8008cb80:	1088000c 	andi	r2,r2,8192
8008cb84:	302b883a 	mov	r21,r6
8008cb88:	10002e26 	beq	r2,zero,8008cc44 <__sprint_r.part.0+0xf4>
8008cb8c:	30800217 	ldw	r2,8(r6)
8008cb90:	35800017 	ldw	r22,0(r6)
8008cb94:	10002926 	beq	r2,zero,8008cc3c <__sprint_r.part.0+0xec>
8008cb98:	2827883a 	mov	r19,r5
8008cb9c:	2029883a 	mov	r20,r4
8008cba0:	b5c00104 	addi	r23,r22,4
8008cba4:	04bfffc4 	movi	r18,-1
8008cba8:	bc400017 	ldw	r17,0(r23)
8008cbac:	b4000017 	ldw	r16,0(r22)
8008cbb0:	0039883a 	mov	fp,zero
8008cbb4:	8822d0ba 	srli	r17,r17,2
8008cbb8:	8800031e 	bne	r17,zero,8008cbc8 <__sprint_r.part.0+0x78>
8008cbbc:	00001806 	br	8008cc20 <__sprint_r.part.0+0xd0>
8008cbc0:	84000104 	addi	r16,r16,4
8008cbc4:	8f001526 	beq	r17,fp,8008cc1c <__sprint_r.part.0+0xcc>
8008cbc8:	81400017 	ldw	r5,0(r16)
8008cbcc:	980d883a 	mov	r6,r19
8008cbd0:	a009883a 	mov	r4,r20
8008cbd4:	008e5780 	call	8008e578 <_fputwc_r>
8008cbd8:	e7000044 	addi	fp,fp,1
8008cbdc:	14bff81e 	bne	r2,r18,8008cbc0 <__sprint_r.part.0+0x70>
8008cbe0:	9005883a 	mov	r2,r18
8008cbe4:	a8000215 	stw	zero,8(r21)
8008cbe8:	a8000115 	stw	zero,4(r21)
8008cbec:	dfc00917 	ldw	ra,36(sp)
8008cbf0:	df000817 	ldw	fp,32(sp)
8008cbf4:	ddc00717 	ldw	r23,28(sp)
8008cbf8:	dd800617 	ldw	r22,24(sp)
8008cbfc:	dd400517 	ldw	r21,20(sp)
8008cc00:	dd000417 	ldw	r20,16(sp)
8008cc04:	dcc00317 	ldw	r19,12(sp)
8008cc08:	dc800217 	ldw	r18,8(sp)
8008cc0c:	dc400117 	ldw	r17,4(sp)
8008cc10:	dc000017 	ldw	r16,0(sp)
8008cc14:	dec00a04 	addi	sp,sp,40
8008cc18:	f800283a 	ret
8008cc1c:	a8800217 	ldw	r2,8(r21)
8008cc20:	8c63883a 	add	r17,r17,r17
8008cc24:	8c63883a 	add	r17,r17,r17
8008cc28:	1445c83a 	sub	r2,r2,r17
8008cc2c:	a8800215 	stw	r2,8(r21)
8008cc30:	b5800204 	addi	r22,r22,8
8008cc34:	bdc00204 	addi	r23,r23,8
8008cc38:	103fdb1e 	bne	r2,zero,8008cba8 <__sprint_r.part.0+0x58>
8008cc3c:	0005883a 	mov	r2,zero
8008cc40:	003fe806 	br	8008cbe4 <__sprint_r.part.0+0x94>
8008cc44:	008877c0 	call	8008877c <__sfvwrite_r>
8008cc48:	003fe606 	br	8008cbe4 <__sprint_r.part.0+0x94>

8008cc4c <__sprint_r>:
8008cc4c:	30c00217 	ldw	r3,8(r6)
8008cc50:	18000126 	beq	r3,zero,8008cc58 <__sprint_r+0xc>
8008cc54:	008cb501 	jmpi	8008cb50 <__sprint_r.part.0>
8008cc58:	30000115 	stw	zero,4(r6)
8008cc5c:	0005883a 	mov	r2,zero
8008cc60:	f800283a 	ret

8008cc64 <___vfiprintf_internal_r>:
8008cc64:	deffc904 	addi	sp,sp,-220
8008cc68:	df003515 	stw	fp,212(sp)
8008cc6c:	dd003115 	stw	r20,196(sp)
8008cc70:	dfc03615 	stw	ra,216(sp)
8008cc74:	ddc03415 	stw	r23,208(sp)
8008cc78:	dd803315 	stw	r22,204(sp)
8008cc7c:	dd403215 	stw	r21,200(sp)
8008cc80:	dcc03015 	stw	r19,192(sp)
8008cc84:	dc802f15 	stw	r18,188(sp)
8008cc88:	dc402e15 	stw	r17,184(sp)
8008cc8c:	dc002d15 	stw	r16,180(sp)
8008cc90:	d9002015 	stw	r4,128(sp)
8008cc94:	d9c02215 	stw	r7,136(sp)
8008cc98:	2829883a 	mov	r20,r5
8008cc9c:	3039883a 	mov	fp,r6
8008cca0:	20000226 	beq	r4,zero,8008ccac <___vfiprintf_internal_r+0x48>
8008cca4:	20800e17 	ldw	r2,56(r4)
8008cca8:	1000cf26 	beq	r2,zero,8008cfe8 <___vfiprintf_internal_r+0x384>
8008ccac:	a080030b 	ldhu	r2,12(r20)
8008ccb0:	10c8000c 	andi	r3,r2,8192
8008ccb4:	1800061e 	bne	r3,zero,8008ccd0 <___vfiprintf_internal_r+0x6c>
8008ccb8:	a1001917 	ldw	r4,100(r20)
8008ccbc:	00f7ffc4 	movi	r3,-8193
8008ccc0:	10880014 	ori	r2,r2,8192
8008ccc4:	20c6703a 	and	r3,r4,r3
8008ccc8:	a080030d 	sth	r2,12(r20)
8008cccc:	a0c01915 	stw	r3,100(r20)
8008ccd0:	10c0020c 	andi	r3,r2,8
8008ccd4:	1800a926 	beq	r3,zero,8008cf7c <___vfiprintf_internal_r+0x318>
8008ccd8:	a0c00417 	ldw	r3,16(r20)
8008ccdc:	1800a726 	beq	r3,zero,8008cf7c <___vfiprintf_internal_r+0x318>
8008cce0:	1080068c 	andi	r2,r2,26
8008cce4:	00c00284 	movi	r3,10
8008cce8:	10c0ac26 	beq	r2,r3,8008cf9c <___vfiprintf_internal_r+0x338>
8008ccec:	da801a04 	addi	r10,sp,104
8008ccf0:	da801e15 	stw	r10,120(sp)
8008ccf4:	d8801e17 	ldw	r2,120(sp)
8008ccf8:	da8019c4 	addi	r10,sp,103
8008ccfc:	05a00274 	movhi	r22,32777
8008cd00:	05e00274 	movhi	r23,32777
8008cd04:	da801f15 	stw	r10,124(sp)
8008cd08:	1295c83a 	sub	r10,r2,r10
8008cd0c:	b59afe04 	addi	r22,r22,27640
8008cd10:	bddafa04 	addi	r23,r23,27624
8008cd14:	dec01a15 	stw	sp,104(sp)
8008cd18:	d8001c15 	stw	zero,112(sp)
8008cd1c:	d8001b15 	stw	zero,108(sp)
8008cd20:	d8002615 	stw	zero,152(sp)
8008cd24:	d8002315 	stw	zero,140(sp)
8008cd28:	da802715 	stw	r10,156(sp)
8008cd2c:	d811883a 	mov	r8,sp
8008cd30:	dd002115 	stw	r20,132(sp)
8008cd34:	e021883a 	mov	r16,fp
8008cd38:	80800007 	ldb	r2,0(r16)
8008cd3c:	1003ea26 	beq	r2,zero,8008dce8 <___vfiprintf_internal_r+0x1084>
8008cd40:	00c00944 	movi	r3,37
8008cd44:	8025883a 	mov	r18,r16
8008cd48:	10c0021e 	bne	r2,r3,8008cd54 <___vfiprintf_internal_r+0xf0>
8008cd4c:	00001606 	br	8008cda8 <___vfiprintf_internal_r+0x144>
8008cd50:	10c00326 	beq	r2,r3,8008cd60 <___vfiprintf_internal_r+0xfc>
8008cd54:	94800044 	addi	r18,r18,1
8008cd58:	90800007 	ldb	r2,0(r18)
8008cd5c:	103ffc1e 	bne	r2,zero,8008cd50 <___vfiprintf_internal_r+0xec>
8008cd60:	9423c83a 	sub	r17,r18,r16
8008cd64:	88001026 	beq	r17,zero,8008cda8 <___vfiprintf_internal_r+0x144>
8008cd68:	d8c01c17 	ldw	r3,112(sp)
8008cd6c:	d8801b17 	ldw	r2,108(sp)
8008cd70:	44000015 	stw	r16,0(r8)
8008cd74:	88c7883a 	add	r3,r17,r3
8008cd78:	10800044 	addi	r2,r2,1
8008cd7c:	44400115 	stw	r17,4(r8)
8008cd80:	d8c01c15 	stw	r3,112(sp)
8008cd84:	d8801b15 	stw	r2,108(sp)
8008cd88:	010001c4 	movi	r4,7
8008cd8c:	2080760e 	bge	r4,r2,8008cf68 <___vfiprintf_internal_r+0x304>
8008cd90:	1803821e 	bne	r3,zero,8008db9c <___vfiprintf_internal_r+0xf38>
8008cd94:	da802317 	ldw	r10,140(sp)
8008cd98:	d8001b15 	stw	zero,108(sp)
8008cd9c:	d811883a 	mov	r8,sp
8008cda0:	5455883a 	add	r10,r10,r17
8008cda4:	da802315 	stw	r10,140(sp)
8008cda8:	90800007 	ldb	r2,0(r18)
8008cdac:	10044626 	beq	r2,zero,8008dec8 <___vfiprintf_internal_r+0x1264>
8008cdb0:	90c00047 	ldb	r3,1(r18)
8008cdb4:	94000044 	addi	r16,r18,1
8008cdb8:	d8001d85 	stb	zero,118(sp)
8008cdbc:	0009883a 	mov	r4,zero
8008cdc0:	000f883a 	mov	r7,zero
8008cdc4:	027fffc4 	movi	r9,-1
8008cdc8:	0023883a 	mov	r17,zero
8008cdcc:	0029883a 	mov	r20,zero
8008cdd0:	01401604 	movi	r5,88
8008cdd4:	01800244 	movi	r6,9
8008cdd8:	03400a84 	movi	r13,42
8008cddc:	03001b04 	movi	r12,108
8008cde0:	84000044 	addi	r16,r16,1
8008cde4:	18bff804 	addi	r2,r3,-32
8008cde8:	28827336 	bltu	r5,r2,8008d7b8 <___vfiprintf_internal_r+0xb54>
8008cdec:	100490ba 	slli	r2,r2,2
8008cdf0:	02a00274 	movhi	r10,32777
8008cdf4:	52b38104 	addi	r10,r10,-12796
8008cdf8:	1285883a 	add	r2,r2,r10
8008cdfc:	10800017 	ldw	r2,0(r2)
8008ce00:	1000683a 	jmp	r2
8008ce04:	8008d4ec 	andhi	zero,r16,9043
8008ce08:	8008d7b8 	rdprs	zero,r16,9054
8008ce0c:	8008d7b8 	rdprs	zero,r16,9054
8008ce10:	8008d50c 	andi	zero,r16,9044
8008ce14:	8008d7b8 	rdprs	zero,r16,9054
8008ce18:	8008d7b8 	rdprs	zero,r16,9054
8008ce1c:	8008d7b8 	rdprs	zero,r16,9054
8008ce20:	8008d7b8 	rdprs	zero,r16,9054
8008ce24:	8008d7b8 	rdprs	zero,r16,9054
8008ce28:	8008d7b8 	rdprs	zero,r16,9054
8008ce2c:	8008d6f4 	orhi	zero,r16,9051
8008ce30:	8008d710 	cmplti	zero,r16,9052
8008ce34:	8008d7b8 	rdprs	zero,r16,9054
8008ce38:	8008cff8 	rdprs	zero,r16,9023
8008ce3c:	8008d720 	cmpeqi	zero,r16,9052
8008ce40:	8008d7b8 	rdprs	zero,r16,9054
8008ce44:	8008d518 	cmpnei	zero,r16,9044
8008ce48:	8008d524 	muli	zero,r16,9044
8008ce4c:	8008d524 	muli	zero,r16,9044
8008ce50:	8008d524 	muli	zero,r16,9044
8008ce54:	8008d524 	muli	zero,r16,9044
8008ce58:	8008d524 	muli	zero,r16,9044
8008ce5c:	8008d524 	muli	zero,r16,9044
8008ce60:	8008d524 	muli	zero,r16,9044
8008ce64:	8008d524 	muli	zero,r16,9044
8008ce68:	8008d524 	muli	zero,r16,9044
8008ce6c:	8008d7b8 	rdprs	zero,r16,9054
8008ce70:	8008d7b8 	rdprs	zero,r16,9054
8008ce74:	8008d7b8 	rdprs	zero,r16,9054
8008ce78:	8008d7b8 	rdprs	zero,r16,9054
8008ce7c:	8008d7b8 	rdprs	zero,r16,9054
8008ce80:	8008d7b8 	rdprs	zero,r16,9054
8008ce84:	8008d7b8 	rdprs	zero,r16,9054
8008ce88:	8008d7b8 	rdprs	zero,r16,9054
8008ce8c:	8008d7b8 	rdprs	zero,r16,9054
8008ce90:	8008d7b8 	rdprs	zero,r16,9054
8008ce94:	8008d550 	cmplti	zero,r16,9045
8008ce98:	8008d7b8 	rdprs	zero,r16,9054
8008ce9c:	8008d7b8 	rdprs	zero,r16,9054
8008cea0:	8008d7b8 	rdprs	zero,r16,9054
8008cea4:	8008d7b8 	rdprs	zero,r16,9054
8008cea8:	8008d7b8 	rdprs	zero,r16,9054
8008ceac:	8008d7b8 	rdprs	zero,r16,9054
8008ceb0:	8008d7b8 	rdprs	zero,r16,9054
8008ceb4:	8008d7b8 	rdprs	zero,r16,9054
8008ceb8:	8008d7b8 	rdprs	zero,r16,9054
8008cebc:	8008d7b8 	rdprs	zero,r16,9054
8008cec0:	8008d588 	cmpgei	zero,r16,9046
8008cec4:	8008d7b8 	rdprs	zero,r16,9054
8008cec8:	8008d7b8 	rdprs	zero,r16,9054
8008cecc:	8008d7b8 	rdprs	zero,r16,9054
8008ced0:	8008d7b8 	rdprs	zero,r16,9054
8008ced4:	8008d7b8 	rdprs	zero,r16,9054
8008ced8:	8008d5e0 	cmpeqi	zero,r16,9047
8008cedc:	8008d7b8 	rdprs	zero,r16,9054
8008cee0:	8008d7b8 	rdprs	zero,r16,9054
8008cee4:	8008d650 	cmplti	zero,r16,9049
8008cee8:	8008d7b8 	rdprs	zero,r16,9054
8008ceec:	8008d7b8 	rdprs	zero,r16,9054
8008cef0:	8008d7b8 	rdprs	zero,r16,9054
8008cef4:	8008d7b8 	rdprs	zero,r16,9054
8008cef8:	8008d7b8 	rdprs	zero,r16,9054
8008cefc:	8008d7b8 	rdprs	zero,r16,9054
8008cf00:	8008d7b8 	rdprs	zero,r16,9054
8008cf04:	8008d7b8 	rdprs	zero,r16,9054
8008cf08:	8008d7b8 	rdprs	zero,r16,9054
8008cf0c:	8008d7b8 	rdprs	zero,r16,9054
8008cf10:	8008d3fc 	xorhi	zero,r16,9039
8008cf14:	8008d428 	cmpgeui	zero,r16,9040
8008cf18:	8008d7b8 	rdprs	zero,r16,9054
8008cf1c:	8008d7b8 	rdprs	zero,r16,9054
8008cf20:	8008d7b8 	rdprs	zero,r16,9054
8008cf24:	8008d760 	cmpeqi	zero,r16,9053
8008cf28:	8008d428 	cmpgeui	zero,r16,9040
8008cf2c:	8008d7b8 	rdprs	zero,r16,9054
8008cf30:	8008d7b8 	rdprs	zero,r16,9054
8008cf34:	8008d2bc 	xorhi	zero,r16,9034
8008cf38:	8008d7b8 	rdprs	zero,r16,9054
8008cf3c:	8008d2cc 	andi	zero,r16,9035
8008cf40:	8008d308 	cmpgei	zero,r16,9036
8008cf44:	8008d004 	addi	zero,r16,9024
8008cf48:	8008d2b0 	cmpltui	zero,r16,9034
8008cf4c:	8008d7b8 	rdprs	zero,r16,9054
8008cf50:	8008d68c 	andi	zero,r16,9050
8008cf54:	8008d7b8 	rdprs	zero,r16,9054
8008cf58:	8008d6e4 	muli	zero,r16,9051
8008cf5c:	8008d7b8 	rdprs	zero,r16,9054
8008cf60:	8008d7b8 	rdprs	zero,r16,9054
8008cf64:	8008d3a8 	cmpgeui	zero,r16,9038
8008cf68:	42000204 	addi	r8,r8,8
8008cf6c:	da802317 	ldw	r10,140(sp)
8008cf70:	5455883a 	add	r10,r10,r17
8008cf74:	da802315 	stw	r10,140(sp)
8008cf78:	003f8b06 	br	8008cda8 <___vfiprintf_internal_r+0x144>
8008cf7c:	d9002017 	ldw	r4,128(sp)
8008cf80:	a00b883a 	mov	r5,r20
8008cf84:	00863240 	call	80086324 <__swsetup_r>
8008cf88:	1003b11e 	bne	r2,zero,8008de50 <___vfiprintf_internal_r+0x11ec>
8008cf8c:	a080030b 	ldhu	r2,12(r20)
8008cf90:	00c00284 	movi	r3,10
8008cf94:	1080068c 	andi	r2,r2,26
8008cf98:	10ff541e 	bne	r2,r3,8008ccec <___vfiprintf_internal_r+0x88>
8008cf9c:	a080038f 	ldh	r2,14(r20)
8008cfa0:	103f5216 	blt	r2,zero,8008ccec <___vfiprintf_internal_r+0x88>
8008cfa4:	d9c02217 	ldw	r7,136(sp)
8008cfa8:	d9002017 	ldw	r4,128(sp)
8008cfac:	e00d883a 	mov	r6,fp
8008cfb0:	a00b883a 	mov	r5,r20
8008cfb4:	008e0dc0 	call	8008e0dc <__sbprintf>
8008cfb8:	dfc03617 	ldw	ra,216(sp)
8008cfbc:	df003517 	ldw	fp,212(sp)
8008cfc0:	ddc03417 	ldw	r23,208(sp)
8008cfc4:	dd803317 	ldw	r22,204(sp)
8008cfc8:	dd403217 	ldw	r21,200(sp)
8008cfcc:	dd003117 	ldw	r20,196(sp)
8008cfd0:	dcc03017 	ldw	r19,192(sp)
8008cfd4:	dc802f17 	ldw	r18,188(sp)
8008cfd8:	dc402e17 	ldw	r17,184(sp)
8008cfdc:	dc002d17 	ldw	r16,180(sp)
8008cfe0:	dec03704 	addi	sp,sp,220
8008cfe4:	f800283a 	ret
8008cfe8:	00882f80 	call	800882f8 <__sinit>
8008cfec:	003f2f06 	br	8008ccac <___vfiprintf_internal_r+0x48>
8008cff0:	0463c83a 	sub	r17,zero,r17
8008cff4:	d8802215 	stw	r2,136(sp)
8008cff8:	a5000114 	ori	r20,r20,4
8008cffc:	80c00007 	ldb	r3,0(r16)
8008d000:	003f7706 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d004:	00800c04 	movi	r2,48
8008d008:	da802217 	ldw	r10,136(sp)
8008d00c:	d8801d05 	stb	r2,116(sp)
8008d010:	00801e04 	movi	r2,120
8008d014:	d8801d45 	stb	r2,117(sp)
8008d018:	d8001d85 	stb	zero,118(sp)
8008d01c:	50c00104 	addi	r3,r10,4
8008d020:	54800017 	ldw	r18,0(r10)
8008d024:	0027883a 	mov	r19,zero
8008d028:	a0800094 	ori	r2,r20,2
8008d02c:	48030b16 	blt	r9,zero,8008dc5c <___vfiprintf_internal_r+0xff8>
8008d030:	00bfdfc4 	movi	r2,-129
8008d034:	a096703a 	and	r11,r20,r2
8008d038:	d8c02215 	stw	r3,136(sp)
8008d03c:	5d000094 	ori	r20,r11,2
8008d040:	90032b1e 	bne	r18,zero,8008dcf0 <___vfiprintf_internal_r+0x108c>
8008d044:	00a00274 	movhi	r2,32777
8008d048:	109a8b04 	addi	r2,r2,27180
8008d04c:	d8802615 	stw	r2,152(sp)
8008d050:	0039883a 	mov	fp,zero
8008d054:	48017b1e 	bne	r9,zero,8008d644 <___vfiprintf_internal_r+0x9e0>
8008d058:	0013883a 	mov	r9,zero
8008d05c:	0027883a 	mov	r19,zero
8008d060:	dd401a04 	addi	r21,sp,104
8008d064:	4825883a 	mov	r18,r9
8008d068:	4cc0010e 	bge	r9,r19,8008d070 <___vfiprintf_internal_r+0x40c>
8008d06c:	9825883a 	mov	r18,r19
8008d070:	e7003fcc 	andi	fp,fp,255
8008d074:	e700201c 	xori	fp,fp,128
8008d078:	e73fe004 	addi	fp,fp,-128
8008d07c:	e0000126 	beq	fp,zero,8008d084 <___vfiprintf_internal_r+0x420>
8008d080:	94800044 	addi	r18,r18,1
8008d084:	a380008c 	andi	r14,r20,2
8008d088:	70000126 	beq	r14,zero,8008d090 <___vfiprintf_internal_r+0x42c>
8008d08c:	94800084 	addi	r18,r18,2
8008d090:	a700210c 	andi	fp,r20,132
8008d094:	e001df1e 	bne	fp,zero,8008d814 <___vfiprintf_internal_r+0xbb0>
8008d098:	8c87c83a 	sub	r3,r17,r18
8008d09c:	00c1dd0e 	bge	zero,r3,8008d814 <___vfiprintf_internal_r+0xbb0>
8008d0a0:	01c00404 	movi	r7,16
8008d0a4:	d8801c17 	ldw	r2,112(sp)
8008d0a8:	38c3ad0e 	bge	r7,r3,8008df60 <___vfiprintf_internal_r+0x12fc>
8008d0ac:	02a00274 	movhi	r10,32777
8008d0b0:	529afe04 	addi	r10,r10,27640
8008d0b4:	dc002915 	stw	r16,164(sp)
8008d0b8:	d9801b17 	ldw	r6,108(sp)
8008d0bc:	da802415 	stw	r10,144(sp)
8008d0c0:	03c001c4 	movi	r15,7
8008d0c4:	da402515 	stw	r9,148(sp)
8008d0c8:	db802815 	stw	r14,160(sp)
8008d0cc:	1821883a 	mov	r16,r3
8008d0d0:	00000506 	br	8008d0e8 <___vfiprintf_internal_r+0x484>
8008d0d4:	31400084 	addi	r5,r6,2
8008d0d8:	42000204 	addi	r8,r8,8
8008d0dc:	200d883a 	mov	r6,r4
8008d0e0:	843ffc04 	addi	r16,r16,-16
8008d0e4:	3c000d0e 	bge	r7,r16,8008d11c <___vfiprintf_internal_r+0x4b8>
8008d0e8:	10800404 	addi	r2,r2,16
8008d0ec:	31000044 	addi	r4,r6,1
8008d0f0:	45800015 	stw	r22,0(r8)
8008d0f4:	41c00115 	stw	r7,4(r8)
8008d0f8:	d8801c15 	stw	r2,112(sp)
8008d0fc:	d9001b15 	stw	r4,108(sp)
8008d100:	793ff40e 	bge	r15,r4,8008d0d4 <___vfiprintf_internal_r+0x470>
8008d104:	1001b51e 	bne	r2,zero,8008d7dc <___vfiprintf_internal_r+0xb78>
8008d108:	843ffc04 	addi	r16,r16,-16
8008d10c:	000d883a 	mov	r6,zero
8008d110:	01400044 	movi	r5,1
8008d114:	d811883a 	mov	r8,sp
8008d118:	3c3ff316 	blt	r7,r16,8008d0e8 <___vfiprintf_internal_r+0x484>
8008d11c:	8007883a 	mov	r3,r16
8008d120:	da402517 	ldw	r9,148(sp)
8008d124:	db802817 	ldw	r14,160(sp)
8008d128:	dc002917 	ldw	r16,164(sp)
8008d12c:	da802417 	ldw	r10,144(sp)
8008d130:	1885883a 	add	r2,r3,r2
8008d134:	40c00115 	stw	r3,4(r8)
8008d138:	42800015 	stw	r10,0(r8)
8008d13c:	d8801c15 	stw	r2,112(sp)
8008d140:	d9401b15 	stw	r5,108(sp)
8008d144:	00c001c4 	movi	r3,7
8008d148:	19426016 	blt	r3,r5,8008dacc <___vfiprintf_internal_r+0xe68>
8008d14c:	d8c01d87 	ldb	r3,118(sp)
8008d150:	42000204 	addi	r8,r8,8
8008d154:	29000044 	addi	r4,r5,1
8008d158:	1801b31e 	bne	r3,zero,8008d828 <___vfiprintf_internal_r+0xbc4>
8008d15c:	7001c026 	beq	r14,zero,8008d860 <___vfiprintf_internal_r+0xbfc>
8008d160:	d8c01d04 	addi	r3,sp,116
8008d164:	10800084 	addi	r2,r2,2
8008d168:	40c00015 	stw	r3,0(r8)
8008d16c:	00c00084 	movi	r3,2
8008d170:	40c00115 	stw	r3,4(r8)
8008d174:	d8801c15 	stw	r2,112(sp)
8008d178:	d9001b15 	stw	r4,108(sp)
8008d17c:	00c001c4 	movi	r3,7
8008d180:	1902650e 	bge	r3,r4,8008db18 <___vfiprintf_internal_r+0xeb4>
8008d184:	10029a1e 	bne	r2,zero,8008dbf0 <___vfiprintf_internal_r+0xf8c>
8008d188:	00c02004 	movi	r3,128
8008d18c:	01000044 	movi	r4,1
8008d190:	000b883a 	mov	r5,zero
8008d194:	d811883a 	mov	r8,sp
8008d198:	e0c1b31e 	bne	fp,r3,8008d868 <___vfiprintf_internal_r+0xc04>
8008d19c:	8cb9c83a 	sub	fp,r17,r18
8008d1a0:	0701b10e 	bge	zero,fp,8008d868 <___vfiprintf_internal_r+0xc04>
8008d1a4:	01c00404 	movi	r7,16
8008d1a8:	3f03890e 	bge	r7,fp,8008dfd0 <___vfiprintf_internal_r+0x136c>
8008d1ac:	00e00274 	movhi	r3,32777
8008d1b0:	18dafa04 	addi	r3,r3,27624
8008d1b4:	d8c02415 	stw	r3,144(sp)
8008d1b8:	8007883a 	mov	r3,r16
8008d1bc:	034001c4 	movi	r13,7
8008d1c0:	e021883a 	mov	r16,fp
8008d1c4:	da402515 	stw	r9,148(sp)
8008d1c8:	1839883a 	mov	fp,r3
8008d1cc:	00000506 	br	8008d1e4 <___vfiprintf_internal_r+0x580>
8008d1d0:	29800084 	addi	r6,r5,2
8008d1d4:	42000204 	addi	r8,r8,8
8008d1d8:	180b883a 	mov	r5,r3
8008d1dc:	843ffc04 	addi	r16,r16,-16
8008d1e0:	3c000d0e 	bge	r7,r16,8008d218 <___vfiprintf_internal_r+0x5b4>
8008d1e4:	10800404 	addi	r2,r2,16
8008d1e8:	28c00044 	addi	r3,r5,1
8008d1ec:	45c00015 	stw	r23,0(r8)
8008d1f0:	41c00115 	stw	r7,4(r8)
8008d1f4:	d8801c15 	stw	r2,112(sp)
8008d1f8:	d8c01b15 	stw	r3,108(sp)
8008d1fc:	68fff40e 	bge	r13,r3,8008d1d0 <___vfiprintf_internal_r+0x56c>
8008d200:	1002241e 	bne	r2,zero,8008da94 <___vfiprintf_internal_r+0xe30>
8008d204:	843ffc04 	addi	r16,r16,-16
8008d208:	01800044 	movi	r6,1
8008d20c:	000b883a 	mov	r5,zero
8008d210:	d811883a 	mov	r8,sp
8008d214:	3c3ff316 	blt	r7,r16,8008d1e4 <___vfiprintf_internal_r+0x580>
8008d218:	da402517 	ldw	r9,148(sp)
8008d21c:	e007883a 	mov	r3,fp
8008d220:	8039883a 	mov	fp,r16
8008d224:	1821883a 	mov	r16,r3
8008d228:	d8c02417 	ldw	r3,144(sp)
8008d22c:	1705883a 	add	r2,r2,fp
8008d230:	47000115 	stw	fp,4(r8)
8008d234:	40c00015 	stw	r3,0(r8)
8008d238:	d8801c15 	stw	r2,112(sp)
8008d23c:	d9801b15 	stw	r6,108(sp)
8008d240:	00c001c4 	movi	r3,7
8008d244:	19827616 	blt	r3,r6,8008dc20 <___vfiprintf_internal_r+0xfbc>
8008d248:	4cf9c83a 	sub	fp,r9,r19
8008d24c:	42000204 	addi	r8,r8,8
8008d250:	31000044 	addi	r4,r6,1
8008d254:	300b883a 	mov	r5,r6
8008d258:	07018516 	blt	zero,fp,8008d870 <___vfiprintf_internal_r+0xc0c>
8008d25c:	9885883a 	add	r2,r19,r2
8008d260:	45400015 	stw	r21,0(r8)
8008d264:	44c00115 	stw	r19,4(r8)
8008d268:	d8801c15 	stw	r2,112(sp)
8008d26c:	d9001b15 	stw	r4,108(sp)
8008d270:	00c001c4 	movi	r3,7
8008d274:	1901dd0e 	bge	r3,r4,8008d9ec <___vfiprintf_internal_r+0xd88>
8008d278:	1002401e 	bne	r2,zero,8008db7c <___vfiprintf_internal_r+0xf18>
8008d27c:	d8001b15 	stw	zero,108(sp)
8008d280:	a2c0010c 	andi	r11,r20,4
8008d284:	58000226 	beq	r11,zero,8008d290 <___vfiprintf_internal_r+0x62c>
8008d288:	8ca7c83a 	sub	r19,r17,r18
8008d28c:	04c2f216 	blt	zero,r19,8008de58 <___vfiprintf_internal_r+0x11f4>
8008d290:	8c80010e 	bge	r17,r18,8008d298 <___vfiprintf_internal_r+0x634>
8008d294:	9023883a 	mov	r17,r18
8008d298:	da802317 	ldw	r10,140(sp)
8008d29c:	5455883a 	add	r10,r10,r17
8008d2a0:	da802315 	stw	r10,140(sp)
8008d2a4:	d8001b15 	stw	zero,108(sp)
8008d2a8:	d811883a 	mov	r8,sp
8008d2ac:	003ea206 	br	8008cd38 <___vfiprintf_internal_r+0xd4>
8008d2b0:	a5000814 	ori	r20,r20,32
8008d2b4:	80c00007 	ldb	r3,0(r16)
8008d2b8:	003ec906 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d2bc:	80c00007 	ldb	r3,0(r16)
8008d2c0:	1b030926 	beq	r3,r12,8008dee8 <___vfiprintf_internal_r+0x1284>
8008d2c4:	a5000414 	ori	r20,r20,16
8008d2c8:	003ec506 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d2cc:	21003fcc 	andi	r4,r4,255
8008d2d0:	20035e1e 	bne	r4,zero,8008e04c <___vfiprintf_internal_r+0x13e8>
8008d2d4:	a080080c 	andi	r2,r20,32
8008d2d8:	1002a526 	beq	r2,zero,8008dd70 <___vfiprintf_internal_r+0x110c>
8008d2dc:	da802217 	ldw	r10,136(sp)
8008d2e0:	50800017 	ldw	r2,0(r10)
8008d2e4:	da802317 	ldw	r10,140(sp)
8008d2e8:	5007d7fa 	srai	r3,r10,31
8008d2ec:	da802217 	ldw	r10,136(sp)
8008d2f0:	10c00115 	stw	r3,4(r2)
8008d2f4:	52800104 	addi	r10,r10,4
8008d2f8:	da802215 	stw	r10,136(sp)
8008d2fc:	da802317 	ldw	r10,140(sp)
8008d300:	12800015 	stw	r10,0(r2)
8008d304:	003e8c06 	br	8008cd38 <___vfiprintf_internal_r+0xd4>
8008d308:	21003fcc 	andi	r4,r4,255
8008d30c:	2003511e 	bne	r4,zero,8008e054 <___vfiprintf_internal_r+0x13f0>
8008d310:	a080080c 	andi	r2,r20,32
8008d314:	1000a126 	beq	r2,zero,8008d59c <___vfiprintf_internal_r+0x938>
8008d318:	da802217 	ldw	r10,136(sp)
8008d31c:	d8001d85 	stb	zero,118(sp)
8008d320:	50800204 	addi	r2,r10,8
8008d324:	54800017 	ldw	r18,0(r10)
8008d328:	54c00117 	ldw	r19,4(r10)
8008d32c:	4802b416 	blt	r9,zero,8008de00 <___vfiprintf_internal_r+0x119c>
8008d330:	013fdfc4 	movi	r4,-129
8008d334:	94c6b03a 	or	r3,r18,r19
8008d338:	d8802215 	stw	r2,136(sp)
8008d33c:	a128703a 	and	r20,r20,r4
8008d340:	1800a226 	beq	r3,zero,8008d5cc <___vfiprintf_internal_r+0x968>
8008d344:	0039883a 	mov	fp,zero
8008d348:	dd401a04 	addi	r21,sp,104
8008d34c:	9006d0fa 	srli	r3,r18,3
8008d350:	9808977a 	slli	r4,r19,29
8008d354:	9826d0fa 	srli	r19,r19,3
8008d358:	948001cc 	andi	r18,r18,7
8008d35c:	90800c04 	addi	r2,r18,48
8008d360:	ad7fffc4 	addi	r21,r21,-1
8008d364:	20e4b03a 	or	r18,r4,r3
8008d368:	a8800005 	stb	r2,0(r21)
8008d36c:	94c6b03a 	or	r3,r18,r19
8008d370:	183ff61e 	bne	r3,zero,8008d34c <___vfiprintf_internal_r+0x6e8>
8008d374:	a0c0004c 	andi	r3,r20,1
8008d378:	18005926 	beq	r3,zero,8008d4e0 <___vfiprintf_internal_r+0x87c>
8008d37c:	10803fcc 	andi	r2,r2,255
8008d380:	1080201c 	xori	r2,r2,128
8008d384:	10bfe004 	addi	r2,r2,-128
8008d388:	00c00c04 	movi	r3,48
8008d38c:	10c05426 	beq	r2,r3,8008d4e0 <___vfiprintf_internal_r+0x87c>
8008d390:	da801e17 	ldw	r10,120(sp)
8008d394:	a8bfffc4 	addi	r2,r21,-1
8008d398:	a8ffffc5 	stb	r3,-1(r21)
8008d39c:	50a7c83a 	sub	r19,r10,r2
8008d3a0:	102b883a 	mov	r21,r2
8008d3a4:	003f2f06 	br	8008d064 <___vfiprintf_internal_r+0x400>
8008d3a8:	21003fcc 	andi	r4,r4,255
8008d3ac:	2003421e 	bne	r4,zero,8008e0b8 <___vfiprintf_internal_r+0x1454>
8008d3b0:	00a00274 	movhi	r2,32777
8008d3b4:	109a8b04 	addi	r2,r2,27180
8008d3b8:	d8802615 	stw	r2,152(sp)
8008d3bc:	a080080c 	andi	r2,r20,32
8008d3c0:	1000aa26 	beq	r2,zero,8008d66c <___vfiprintf_internal_r+0xa08>
8008d3c4:	da802217 	ldw	r10,136(sp)
8008d3c8:	54800017 	ldw	r18,0(r10)
8008d3cc:	54c00117 	ldw	r19,4(r10)
8008d3d0:	52800204 	addi	r10,r10,8
8008d3d4:	da802215 	stw	r10,136(sp)
8008d3d8:	a080004c 	andi	r2,r20,1
8008d3dc:	1001d226 	beq	r2,zero,8008db28 <___vfiprintf_internal_r+0xec4>
8008d3e0:	94c4b03a 	or	r2,r18,r19
8008d3e4:	1002351e 	bne	r2,zero,8008dcbc <___vfiprintf_internal_r+0x1058>
8008d3e8:	d8001d85 	stb	zero,118(sp)
8008d3ec:	48022216 	blt	r9,zero,8008dc78 <___vfiprintf_internal_r+0x1014>
8008d3f0:	00bfdfc4 	movi	r2,-129
8008d3f4:	a0a8703a 	and	r20,r20,r2
8008d3f8:	003f1506 	br	8008d050 <___vfiprintf_internal_r+0x3ec>
8008d3fc:	da802217 	ldw	r10,136(sp)
8008d400:	04800044 	movi	r18,1
8008d404:	d8001d85 	stb	zero,118(sp)
8008d408:	50800017 	ldw	r2,0(r10)
8008d40c:	52800104 	addi	r10,r10,4
8008d410:	da802215 	stw	r10,136(sp)
8008d414:	d8801005 	stb	r2,64(sp)
8008d418:	9027883a 	mov	r19,r18
8008d41c:	dd401004 	addi	r21,sp,64
8008d420:	0013883a 	mov	r9,zero
8008d424:	003f1706 	br	8008d084 <___vfiprintf_internal_r+0x420>
8008d428:	21003fcc 	andi	r4,r4,255
8008d42c:	2003201e 	bne	r4,zero,8008e0b0 <___vfiprintf_internal_r+0x144c>
8008d430:	a080080c 	andi	r2,r20,32
8008d434:	10004b26 	beq	r2,zero,8008d564 <___vfiprintf_internal_r+0x900>
8008d438:	da802217 	ldw	r10,136(sp)
8008d43c:	50800117 	ldw	r2,4(r10)
8008d440:	54800017 	ldw	r18,0(r10)
8008d444:	52800204 	addi	r10,r10,8
8008d448:	da802215 	stw	r10,136(sp)
8008d44c:	1027883a 	mov	r19,r2
8008d450:	10022c16 	blt	r2,zero,8008dd04 <___vfiprintf_internal_r+0x10a0>
8008d454:	df001d83 	ldbu	fp,118(sp)
8008d458:	48007216 	blt	r9,zero,8008d624 <___vfiprintf_internal_r+0x9c0>
8008d45c:	00ffdfc4 	movi	r3,-129
8008d460:	94c4b03a 	or	r2,r18,r19
8008d464:	a0e8703a 	and	r20,r20,r3
8008d468:	1000cc26 	beq	r2,zero,8008d79c <___vfiprintf_internal_r+0xb38>
8008d46c:	98021026 	beq	r19,zero,8008dcb0 <___vfiprintf_internal_r+0x104c>
8008d470:	dc402415 	stw	r17,144(sp)
8008d474:	dc002515 	stw	r16,148(sp)
8008d478:	9823883a 	mov	r17,r19
8008d47c:	9021883a 	mov	r16,r18
8008d480:	dd401a04 	addi	r21,sp,104
8008d484:	4825883a 	mov	r18,r9
8008d488:	4027883a 	mov	r19,r8
8008d48c:	8009883a 	mov	r4,r16
8008d490:	880b883a 	mov	r5,r17
8008d494:	01800284 	movi	r6,10
8008d498:	000f883a 	mov	r7,zero
8008d49c:	008f0440 	call	8008f044 <__umoddi3>
8008d4a0:	10800c04 	addi	r2,r2,48
8008d4a4:	ad7fffc4 	addi	r21,r21,-1
8008d4a8:	8009883a 	mov	r4,r16
8008d4ac:	880b883a 	mov	r5,r17
8008d4b0:	a8800005 	stb	r2,0(r21)
8008d4b4:	01800284 	movi	r6,10
8008d4b8:	000f883a 	mov	r7,zero
8008d4bc:	008eacc0 	call	8008eacc <__udivdi3>
8008d4c0:	1021883a 	mov	r16,r2
8008d4c4:	10c4b03a 	or	r2,r2,r3
8008d4c8:	1823883a 	mov	r17,r3
8008d4cc:	103fef1e 	bne	r2,zero,8008d48c <___vfiprintf_internal_r+0x828>
8008d4d0:	dc402417 	ldw	r17,144(sp)
8008d4d4:	dc002517 	ldw	r16,148(sp)
8008d4d8:	9013883a 	mov	r9,r18
8008d4dc:	9811883a 	mov	r8,r19
8008d4e0:	da801e17 	ldw	r10,120(sp)
8008d4e4:	5567c83a 	sub	r19,r10,r21
8008d4e8:	003ede06 	br	8008d064 <___vfiprintf_internal_r+0x400>
8008d4ec:	38803fcc 	andi	r2,r7,255
8008d4f0:	1080201c 	xori	r2,r2,128
8008d4f4:	10bfe004 	addi	r2,r2,-128
8008d4f8:	1002371e 	bne	r2,zero,8008ddd8 <___vfiprintf_internal_r+0x1174>
8008d4fc:	01000044 	movi	r4,1
8008d500:	01c00804 	movi	r7,32
8008d504:	80c00007 	ldb	r3,0(r16)
8008d508:	003e3506 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d50c:	a5000054 	ori	r20,r20,1
8008d510:	80c00007 	ldb	r3,0(r16)
8008d514:	003e3206 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d518:	a5002014 	ori	r20,r20,128
8008d51c:	80c00007 	ldb	r3,0(r16)
8008d520:	003e2f06 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d524:	8015883a 	mov	r10,r16
8008d528:	0023883a 	mov	r17,zero
8008d52c:	18bff404 	addi	r2,r3,-48
8008d530:	50c00007 	ldb	r3,0(r10)
8008d534:	8c4002a4 	muli	r17,r17,10
8008d538:	84000044 	addi	r16,r16,1
8008d53c:	8015883a 	mov	r10,r16
8008d540:	1463883a 	add	r17,r2,r17
8008d544:	18bff404 	addi	r2,r3,-48
8008d548:	30bff92e 	bgeu	r6,r2,8008d530 <___vfiprintf_internal_r+0x8cc>
8008d54c:	003e2506 	br	8008cde4 <___vfiprintf_internal_r+0x180>
8008d550:	21003fcc 	andi	r4,r4,255
8008d554:	2002d41e 	bne	r4,zero,8008e0a8 <___vfiprintf_internal_r+0x1444>
8008d558:	a5000414 	ori	r20,r20,16
8008d55c:	a080080c 	andi	r2,r20,32
8008d560:	103fb51e 	bne	r2,zero,8008d438 <___vfiprintf_internal_r+0x7d4>
8008d564:	a080040c 	andi	r2,r20,16
8008d568:	1001f826 	beq	r2,zero,8008dd4c <___vfiprintf_internal_r+0x10e8>
8008d56c:	da802217 	ldw	r10,136(sp)
8008d570:	54800017 	ldw	r18,0(r10)
8008d574:	52800104 	addi	r10,r10,4
8008d578:	da802215 	stw	r10,136(sp)
8008d57c:	9027d7fa 	srai	r19,r18,31
8008d580:	9805883a 	mov	r2,r19
8008d584:	003fb206 	br	8008d450 <___vfiprintf_internal_r+0x7ec>
8008d588:	21003fcc 	andi	r4,r4,255
8008d58c:	2002c41e 	bne	r4,zero,8008e0a0 <___vfiprintf_internal_r+0x143c>
8008d590:	a5000414 	ori	r20,r20,16
8008d594:	a080080c 	andi	r2,r20,32
8008d598:	103f5f1e 	bne	r2,zero,8008d318 <___vfiprintf_internal_r+0x6b4>
8008d59c:	a080040c 	andi	r2,r20,16
8008d5a0:	10020f26 	beq	r2,zero,8008dde0 <___vfiprintf_internal_r+0x117c>
8008d5a4:	da802217 	ldw	r10,136(sp)
8008d5a8:	d8001d85 	stb	zero,118(sp)
8008d5ac:	0027883a 	mov	r19,zero
8008d5b0:	50800104 	addi	r2,r10,4
8008d5b4:	54800017 	ldw	r18,0(r10)
8008d5b8:	48021116 	blt	r9,zero,8008de00 <___vfiprintf_internal_r+0x119c>
8008d5bc:	00ffdfc4 	movi	r3,-129
8008d5c0:	d8802215 	stw	r2,136(sp)
8008d5c4:	a0e8703a 	and	r20,r20,r3
8008d5c8:	903f5e1e 	bne	r18,zero,8008d344 <___vfiprintf_internal_r+0x6e0>
8008d5cc:	0039883a 	mov	fp,zero
8008d5d0:	4802a626 	beq	r9,zero,8008e06c <___vfiprintf_internal_r+0x1408>
8008d5d4:	0025883a 	mov	r18,zero
8008d5d8:	0027883a 	mov	r19,zero
8008d5dc:	003f5a06 	br	8008d348 <___vfiprintf_internal_r+0x6e4>
8008d5e0:	21003fcc 	andi	r4,r4,255
8008d5e4:	20029f1e 	bne	r4,zero,8008e064 <___vfiprintf_internal_r+0x1400>
8008d5e8:	a5000414 	ori	r20,r20,16
8008d5ec:	a080080c 	andi	r2,r20,32
8008d5f0:	10005e1e 	bne	r2,zero,8008d76c <___vfiprintf_internal_r+0xb08>
8008d5f4:	a080040c 	andi	r2,r20,16
8008d5f8:	1001a21e 	bne	r2,zero,8008dc84 <___vfiprintf_internal_r+0x1020>
8008d5fc:	a080100c 	andi	r2,r20,64
8008d600:	d8001d85 	stb	zero,118(sp)
8008d604:	da802217 	ldw	r10,136(sp)
8008d608:	1002231e 	bne	r2,zero,8008de98 <___vfiprintf_internal_r+0x1234>
8008d60c:	50800104 	addi	r2,r10,4
8008d610:	54800017 	ldw	r18,0(r10)
8008d614:	0027883a 	mov	r19,zero
8008d618:	4801a00e 	bge	r9,zero,8008dc9c <___vfiprintf_internal_r+0x1038>
8008d61c:	d8802215 	stw	r2,136(sp)
8008d620:	0039883a 	mov	fp,zero
8008d624:	94c4b03a 	or	r2,r18,r19
8008d628:	103f901e 	bne	r2,zero,8008d46c <___vfiprintf_internal_r+0x808>
8008d62c:	00800044 	movi	r2,1
8008d630:	10803fcc 	andi	r2,r2,255
8008d634:	00c00044 	movi	r3,1
8008d638:	10c05926 	beq	r2,r3,8008d7a0 <___vfiprintf_internal_r+0xb3c>
8008d63c:	00c00084 	movi	r3,2
8008d640:	10ffe41e 	bne	r2,r3,8008d5d4 <___vfiprintf_internal_r+0x970>
8008d644:	0025883a 	mov	r18,zero
8008d648:	0027883a 	mov	r19,zero
8008d64c:	00013d06 	br	8008db44 <___vfiprintf_internal_r+0xee0>
8008d650:	21003fcc 	andi	r4,r4,255
8008d654:	2002811e 	bne	r4,zero,8008e05c <___vfiprintf_internal_r+0x13f8>
8008d658:	00a00274 	movhi	r2,32777
8008d65c:	109a8604 	addi	r2,r2,27160
8008d660:	d8802615 	stw	r2,152(sp)
8008d664:	a080080c 	andi	r2,r20,32
8008d668:	103f561e 	bne	r2,zero,8008d3c4 <___vfiprintf_internal_r+0x760>
8008d66c:	a080040c 	andi	r2,r20,16
8008d670:	1001d126 	beq	r2,zero,8008ddb8 <___vfiprintf_internal_r+0x1154>
8008d674:	da802217 	ldw	r10,136(sp)
8008d678:	0027883a 	mov	r19,zero
8008d67c:	54800017 	ldw	r18,0(r10)
8008d680:	52800104 	addi	r10,r10,4
8008d684:	da802215 	stw	r10,136(sp)
8008d688:	003f5306 	br	8008d3d8 <___vfiprintf_internal_r+0x774>
8008d68c:	da802217 	ldw	r10,136(sp)
8008d690:	d8001d85 	stb	zero,118(sp)
8008d694:	55400017 	ldw	r21,0(r10)
8008d698:	50c00104 	addi	r3,r10,4
8008d69c:	a8024226 	beq	r21,zero,8008dfa8 <___vfiprintf_internal_r+0x1344>
8008d6a0:	48021816 	blt	r9,zero,8008df04 <___vfiprintf_internal_r+0x12a0>
8008d6a4:	480d883a 	mov	r6,r9
8008d6a8:	000b883a 	mov	r5,zero
8008d6ac:	a809883a 	mov	r4,r21
8008d6b0:	d8c02a15 	stw	r3,168(sp)
8008d6b4:	da002b15 	stw	r8,172(sp)
8008d6b8:	da402c15 	stw	r9,176(sp)
8008d6bc:	00898640 	call	80089864 <memchr>
8008d6c0:	d8c02a17 	ldw	r3,168(sp)
8008d6c4:	da002b17 	ldw	r8,172(sp)
8008d6c8:	da402c17 	ldw	r9,176(sp)
8008d6cc:	10024826 	beq	r2,zero,8008dff0 <___vfiprintf_internal_r+0x138c>
8008d6d0:	1567c83a 	sub	r19,r2,r21
8008d6d4:	df001d83 	ldbu	fp,118(sp)
8008d6d8:	d8c02215 	stw	r3,136(sp)
8008d6dc:	0013883a 	mov	r9,zero
8008d6e0:	003e6006 	br	8008d064 <___vfiprintf_internal_r+0x400>
8008d6e4:	21003fcc 	andi	r4,r4,255
8008d6e8:	203fc026 	beq	r4,zero,8008d5ec <___vfiprintf_internal_r+0x988>
8008d6ec:	d9c01d85 	stb	r7,118(sp)
8008d6f0:	003fbe06 	br	8008d5ec <___vfiprintf_internal_r+0x988>
8008d6f4:	da802217 	ldw	r10,136(sp)
8008d6f8:	54400017 	ldw	r17,0(r10)
8008d6fc:	50800104 	addi	r2,r10,4
8008d700:	883e3b16 	blt	r17,zero,8008cff0 <___vfiprintf_internal_r+0x38c>
8008d704:	d8802215 	stw	r2,136(sp)
8008d708:	80c00007 	ldb	r3,0(r16)
8008d70c:	003db406 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d710:	01000044 	movi	r4,1
8008d714:	01c00ac4 	movi	r7,43
8008d718:	80c00007 	ldb	r3,0(r16)
8008d71c:	003db006 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d720:	80c00007 	ldb	r3,0(r16)
8008d724:	82800044 	addi	r10,r16,1
8008d728:	1b423c26 	beq	r3,r13,8008e01c <___vfiprintf_internal_r+0x13b8>
8008d72c:	18bff404 	addi	r2,r3,-48
8008d730:	0013883a 	mov	r9,zero
8008d734:	30822b36 	bltu	r6,r2,8008dfe4 <___vfiprintf_internal_r+0x1380>
8008d738:	50c00007 	ldb	r3,0(r10)
8008d73c:	4a4002a4 	muli	r9,r9,10
8008d740:	54000044 	addi	r16,r10,1
8008d744:	8015883a 	mov	r10,r16
8008d748:	4893883a 	add	r9,r9,r2
8008d74c:	18bff404 	addi	r2,r3,-48
8008d750:	30bff92e 	bgeu	r6,r2,8008d738 <___vfiprintf_internal_r+0xad4>
8008d754:	483da30e 	bge	r9,zero,8008cde4 <___vfiprintf_internal_r+0x180>
8008d758:	027fffc4 	movi	r9,-1
8008d75c:	003da106 	br	8008cde4 <___vfiprintf_internal_r+0x180>
8008d760:	a5001014 	ori	r20,r20,64
8008d764:	80c00007 	ldb	r3,0(r16)
8008d768:	003d9d06 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008d76c:	da802217 	ldw	r10,136(sp)
8008d770:	d8001d85 	stb	zero,118(sp)
8008d774:	50c00204 	addi	r3,r10,8
8008d778:	54800017 	ldw	r18,0(r10)
8008d77c:	54c00117 	ldw	r19,4(r10)
8008d780:	4801ca16 	blt	r9,zero,8008deac <___vfiprintf_internal_r+0x1248>
8008d784:	013fdfc4 	movi	r4,-129
8008d788:	94c4b03a 	or	r2,r18,r19
8008d78c:	d8c02215 	stw	r3,136(sp)
8008d790:	a128703a 	and	r20,r20,r4
8008d794:	0039883a 	mov	fp,zero
8008d798:	103f341e 	bne	r2,zero,8008d46c <___vfiprintf_internal_r+0x808>
8008d79c:	483e2e26 	beq	r9,zero,8008d058 <___vfiprintf_internal_r+0x3f4>
8008d7a0:	0025883a 	mov	r18,zero
8008d7a4:	94800c04 	addi	r18,r18,48
8008d7a8:	dc8019c5 	stb	r18,103(sp)
8008d7ac:	dcc02717 	ldw	r19,156(sp)
8008d7b0:	dd4019c4 	addi	r21,sp,103
8008d7b4:	003e2b06 	br	8008d064 <___vfiprintf_internal_r+0x400>
8008d7b8:	21003fcc 	andi	r4,r4,255
8008d7bc:	2002361e 	bne	r4,zero,8008e098 <___vfiprintf_internal_r+0x1434>
8008d7c0:	1801c126 	beq	r3,zero,8008dec8 <___vfiprintf_internal_r+0x1264>
8008d7c4:	04800044 	movi	r18,1
8008d7c8:	d8c01005 	stb	r3,64(sp)
8008d7cc:	d8001d85 	stb	zero,118(sp)
8008d7d0:	9027883a 	mov	r19,r18
8008d7d4:	dd401004 	addi	r21,sp,64
8008d7d8:	003f1106 	br	8008d420 <___vfiprintf_internal_r+0x7bc>
8008d7dc:	d9402117 	ldw	r5,132(sp)
8008d7e0:	d9002017 	ldw	r4,128(sp)
8008d7e4:	d9801a04 	addi	r6,sp,104
8008d7e8:	d9c02b15 	stw	r7,172(sp)
8008d7ec:	dbc02a15 	stw	r15,168(sp)
8008d7f0:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008d7f4:	d9c02b17 	ldw	r7,172(sp)
8008d7f8:	dbc02a17 	ldw	r15,168(sp)
8008d7fc:	10006d1e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008d800:	d9801b17 	ldw	r6,108(sp)
8008d804:	d8801c17 	ldw	r2,112(sp)
8008d808:	d811883a 	mov	r8,sp
8008d80c:	31400044 	addi	r5,r6,1
8008d810:	003e3306 	br	8008d0e0 <___vfiprintf_internal_r+0x47c>
8008d814:	d9401b17 	ldw	r5,108(sp)
8008d818:	d8801c17 	ldw	r2,112(sp)
8008d81c:	29000044 	addi	r4,r5,1
8008d820:	d8c01d87 	ldb	r3,118(sp)
8008d824:	183e4d26 	beq	r3,zero,8008d15c <___vfiprintf_internal_r+0x4f8>
8008d828:	00c00044 	movi	r3,1
8008d82c:	d9401d84 	addi	r5,sp,118
8008d830:	10c5883a 	add	r2,r2,r3
8008d834:	41400015 	stw	r5,0(r8)
8008d838:	40c00115 	stw	r3,4(r8)
8008d83c:	d8801c15 	stw	r2,112(sp)
8008d840:	d9001b15 	stw	r4,108(sp)
8008d844:	014001c4 	movi	r5,7
8008d848:	2900a90e 	bge	r5,r4,8008daf0 <___vfiprintf_internal_r+0xe8c>
8008d84c:	1000da1e 	bne	r2,zero,8008dbb8 <___vfiprintf_internal_r+0xf54>
8008d850:	7000ab1e 	bne	r14,zero,8008db00 <___vfiprintf_internal_r+0xe9c>
8008d854:	000b883a 	mov	r5,zero
8008d858:	1809883a 	mov	r4,r3
8008d85c:	d811883a 	mov	r8,sp
8008d860:	00c02004 	movi	r3,128
8008d864:	e0fe4d26 	beq	fp,r3,8008d19c <___vfiprintf_internal_r+0x538>
8008d868:	4cf9c83a 	sub	fp,r9,r19
8008d86c:	073e7b0e 	bge	zero,fp,8008d25c <___vfiprintf_internal_r+0x5f8>
8008d870:	01c00404 	movi	r7,16
8008d874:	3f01900e 	bge	r7,fp,8008deb8 <___vfiprintf_internal_r+0x1254>
8008d878:	00e00274 	movhi	r3,32777
8008d87c:	18dafa04 	addi	r3,r3,27624
8008d880:	d8c02415 	stw	r3,144(sp)
8008d884:	034001c4 	movi	r13,7
8008d888:	00000506 	br	8008d8a0 <___vfiprintf_internal_r+0xc3c>
8008d88c:	29000084 	addi	r4,r5,2
8008d890:	42000204 	addi	r8,r8,8
8008d894:	180b883a 	mov	r5,r3
8008d898:	e73ffc04 	addi	fp,fp,-16
8008d89c:	3f000d0e 	bge	r7,fp,8008d8d4 <___vfiprintf_internal_r+0xc70>
8008d8a0:	10800404 	addi	r2,r2,16
8008d8a4:	28c00044 	addi	r3,r5,1
8008d8a8:	45c00015 	stw	r23,0(r8)
8008d8ac:	41c00115 	stw	r7,4(r8)
8008d8b0:	d8801c15 	stw	r2,112(sp)
8008d8b4:	d8c01b15 	stw	r3,108(sp)
8008d8b8:	68fff40e 	bge	r13,r3,8008d88c <___vfiprintf_internal_r+0xc28>
8008d8bc:	1000101e 	bne	r2,zero,8008d900 <___vfiprintf_internal_r+0xc9c>
8008d8c0:	e73ffc04 	addi	fp,fp,-16
8008d8c4:	01000044 	movi	r4,1
8008d8c8:	000b883a 	mov	r5,zero
8008d8cc:	d811883a 	mov	r8,sp
8008d8d0:	3f3ff316 	blt	r7,fp,8008d8a0 <___vfiprintf_internal_r+0xc3c>
8008d8d4:	da802417 	ldw	r10,144(sp)
8008d8d8:	1705883a 	add	r2,r2,fp
8008d8dc:	47000115 	stw	fp,4(r8)
8008d8e0:	42800015 	stw	r10,0(r8)
8008d8e4:	d8801c15 	stw	r2,112(sp)
8008d8e8:	d9001b15 	stw	r4,108(sp)
8008d8ec:	00c001c4 	movi	r3,7
8008d8f0:	19003616 	blt	r3,r4,8008d9cc <___vfiprintf_internal_r+0xd68>
8008d8f4:	42000204 	addi	r8,r8,8
8008d8f8:	21000044 	addi	r4,r4,1
8008d8fc:	003e5706 	br	8008d25c <___vfiprintf_internal_r+0x5f8>
8008d900:	d9402117 	ldw	r5,132(sp)
8008d904:	d9002017 	ldw	r4,128(sp)
8008d908:	d9801a04 	addi	r6,sp,104
8008d90c:	d9c02b15 	stw	r7,172(sp)
8008d910:	db402a15 	stw	r13,168(sp)
8008d914:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008d918:	d9c02b17 	ldw	r7,172(sp)
8008d91c:	db402a17 	ldw	r13,168(sp)
8008d920:	1000241e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008d924:	d9401b17 	ldw	r5,108(sp)
8008d928:	d8801c17 	ldw	r2,112(sp)
8008d92c:	d811883a 	mov	r8,sp
8008d930:	29000044 	addi	r4,r5,1
8008d934:	003fd806 	br	8008d898 <___vfiprintf_internal_r+0xc34>
8008d938:	d9401b17 	ldw	r5,108(sp)
8008d93c:	00e00274 	movhi	r3,32777
8008d940:	18dafe04 	addi	r3,r3,27640
8008d944:	d8c02415 	stw	r3,144(sp)
8008d948:	29400044 	addi	r5,r5,1
8008d94c:	d8c02417 	ldw	r3,144(sp)
8008d950:	14c5883a 	add	r2,r2,r19
8008d954:	44c00115 	stw	r19,4(r8)
8008d958:	40c00015 	stw	r3,0(r8)
8008d95c:	d8801c15 	stw	r2,112(sp)
8008d960:	d9401b15 	stw	r5,108(sp)
8008d964:	00c001c4 	movi	r3,7
8008d968:	1940070e 	bge	r3,r5,8008d988 <___vfiprintf_internal_r+0xd24>
8008d96c:	103e4826 	beq	r2,zero,8008d290 <___vfiprintf_internal_r+0x62c>
8008d970:	d9402117 	ldw	r5,132(sp)
8008d974:	d9002017 	ldw	r4,128(sp)
8008d978:	d9801a04 	addi	r6,sp,104
8008d97c:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008d980:	10000c1e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008d984:	d8801c17 	ldw	r2,112(sp)
8008d988:	8c80010e 	bge	r17,r18,8008d990 <___vfiprintf_internal_r+0xd2c>
8008d98c:	9023883a 	mov	r17,r18
8008d990:	da802317 	ldw	r10,140(sp)
8008d994:	5455883a 	add	r10,r10,r17
8008d998:	da802315 	stw	r10,140(sp)
8008d99c:	103e4126 	beq	r2,zero,8008d2a4 <___vfiprintf_internal_r+0x640>
8008d9a0:	d9402117 	ldw	r5,132(sp)
8008d9a4:	d9002017 	ldw	r4,128(sp)
8008d9a8:	d9801a04 	addi	r6,sp,104
8008d9ac:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008d9b0:	103e3c26 	beq	r2,zero,8008d2a4 <___vfiprintf_internal_r+0x640>
8008d9b4:	dd002117 	ldw	r20,132(sp)
8008d9b8:	a080030b 	ldhu	r2,12(r20)
8008d9bc:	1080100c 	andi	r2,r2,64
8008d9c0:	1001231e 	bne	r2,zero,8008de50 <___vfiprintf_internal_r+0x11ec>
8008d9c4:	d8802317 	ldw	r2,140(sp)
8008d9c8:	003d7b06 	br	8008cfb8 <___vfiprintf_internal_r+0x354>
8008d9cc:	1000991e 	bne	r2,zero,8008dc34 <___vfiprintf_internal_r+0xfd0>
8008d9d0:	00c00044 	movi	r3,1
8008d9d4:	9805883a 	mov	r2,r19
8008d9d8:	dd400015 	stw	r21,0(sp)
8008d9dc:	dcc00115 	stw	r19,4(sp)
8008d9e0:	dcc01c15 	stw	r19,112(sp)
8008d9e4:	d8c01b15 	stw	r3,108(sp)
8008d9e8:	d811883a 	mov	r8,sp
8008d9ec:	42000204 	addi	r8,r8,8
8008d9f0:	a2c0010c 	andi	r11,r20,4
8008d9f4:	583fe426 	beq	r11,zero,8008d988 <___vfiprintf_internal_r+0xd24>
8008d9f8:	8ca7c83a 	sub	r19,r17,r18
8008d9fc:	04ffe20e 	bge	zero,r19,8008d988 <___vfiprintf_internal_r+0xd24>
8008da00:	01c00404 	movi	r7,16
8008da04:	3cffcc0e 	bge	r7,r19,8008d938 <___vfiprintf_internal_r+0xcd4>
8008da08:	02a00274 	movhi	r10,32777
8008da0c:	529afe04 	addi	r10,r10,27640
8008da10:	d9001b17 	ldw	r4,108(sp)
8008da14:	da802415 	stw	r10,144(sp)
8008da18:	382b883a 	mov	r21,r7
8008da1c:	050001c4 	movi	r20,7
8008da20:	df002017 	ldw	fp,128(sp)
8008da24:	00000506 	br	8008da3c <___vfiprintf_internal_r+0xdd8>
8008da28:	21400084 	addi	r5,r4,2
8008da2c:	42000204 	addi	r8,r8,8
8008da30:	1809883a 	mov	r4,r3
8008da34:	9cfffc04 	addi	r19,r19,-16
8008da38:	acffc40e 	bge	r21,r19,8008d94c <___vfiprintf_internal_r+0xce8>
8008da3c:	10800404 	addi	r2,r2,16
8008da40:	20c00044 	addi	r3,r4,1
8008da44:	45800015 	stw	r22,0(r8)
8008da48:	45400115 	stw	r21,4(r8)
8008da4c:	d8801c15 	stw	r2,112(sp)
8008da50:	d8c01b15 	stw	r3,108(sp)
8008da54:	a0fff40e 	bge	r20,r3,8008da28 <___vfiprintf_internal_r+0xdc4>
8008da58:	1000041e 	bne	r2,zero,8008da6c <___vfiprintf_internal_r+0xe08>
8008da5c:	01400044 	movi	r5,1
8008da60:	0009883a 	mov	r4,zero
8008da64:	d811883a 	mov	r8,sp
8008da68:	003ff206 	br	8008da34 <___vfiprintf_internal_r+0xdd0>
8008da6c:	d9402117 	ldw	r5,132(sp)
8008da70:	d9801a04 	addi	r6,sp,104
8008da74:	e009883a 	mov	r4,fp
8008da78:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008da7c:	103fcd1e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008da80:	d9001b17 	ldw	r4,108(sp)
8008da84:	d8801c17 	ldw	r2,112(sp)
8008da88:	d811883a 	mov	r8,sp
8008da8c:	21400044 	addi	r5,r4,1
8008da90:	003fe806 	br	8008da34 <___vfiprintf_internal_r+0xdd0>
8008da94:	d9402117 	ldw	r5,132(sp)
8008da98:	d9002017 	ldw	r4,128(sp)
8008da9c:	d9801a04 	addi	r6,sp,104
8008daa0:	d9c02b15 	stw	r7,172(sp)
8008daa4:	db402a15 	stw	r13,168(sp)
8008daa8:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008daac:	d9c02b17 	ldw	r7,172(sp)
8008dab0:	db402a17 	ldw	r13,168(sp)
8008dab4:	103fbf1e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008dab8:	d9401b17 	ldw	r5,108(sp)
8008dabc:	d8801c17 	ldw	r2,112(sp)
8008dac0:	d811883a 	mov	r8,sp
8008dac4:	29800044 	addi	r6,r5,1
8008dac8:	003dc406 	br	8008d1dc <___vfiprintf_internal_r+0x578>
8008dacc:	1000d21e 	bne	r2,zero,8008de18 <___vfiprintf_internal_r+0x11b4>
8008dad0:	d8c01d87 	ldb	r3,118(sp)
8008dad4:	18009526 	beq	r3,zero,8008dd2c <___vfiprintf_internal_r+0x10c8>
8008dad8:	00800044 	movi	r2,1
8008dadc:	d8c01d84 	addi	r3,sp,118
8008dae0:	1009883a 	mov	r4,r2
8008dae4:	d8c00015 	stw	r3,0(sp)
8008dae8:	d8800115 	stw	r2,4(sp)
8008daec:	d811883a 	mov	r8,sp
8008daf0:	200b883a 	mov	r5,r4
8008daf4:	42000204 	addi	r8,r8,8
8008daf8:	21000044 	addi	r4,r4,1
8008dafc:	003d9706 	br	8008d15c <___vfiprintf_internal_r+0x4f8>
8008db00:	d9001d04 	addi	r4,sp,116
8008db04:	00800084 	movi	r2,2
8008db08:	d9000015 	stw	r4,0(sp)
8008db0c:	d8800115 	stw	r2,4(sp)
8008db10:	1809883a 	mov	r4,r3
8008db14:	d811883a 	mov	r8,sp
8008db18:	200b883a 	mov	r5,r4
8008db1c:	42000204 	addi	r8,r8,8
8008db20:	21000044 	addi	r4,r4,1
8008db24:	003f4e06 	br	8008d860 <___vfiprintf_internal_r+0xbfc>
8008db28:	d8001d85 	stb	zero,118(sp)
8008db2c:	48005016 	blt	r9,zero,8008dc70 <___vfiprintf_internal_r+0x100c>
8008db30:	00ffdfc4 	movi	r3,-129
8008db34:	94c4b03a 	or	r2,r18,r19
8008db38:	a0e8703a 	and	r20,r20,r3
8008db3c:	103d4426 	beq	r2,zero,8008d050 <___vfiprintf_internal_r+0x3ec>
8008db40:	0039883a 	mov	fp,zero
8008db44:	d9002617 	ldw	r4,152(sp)
8008db48:	dd401a04 	addi	r21,sp,104
8008db4c:	908003cc 	andi	r2,r18,15
8008db50:	9806973a 	slli	r3,r19,28
8008db54:	2085883a 	add	r2,r4,r2
8008db58:	9024d13a 	srli	r18,r18,4
8008db5c:	10800003 	ldbu	r2,0(r2)
8008db60:	9826d13a 	srli	r19,r19,4
8008db64:	ad7fffc4 	addi	r21,r21,-1
8008db68:	1ca4b03a 	or	r18,r3,r18
8008db6c:	a8800005 	stb	r2,0(r21)
8008db70:	94c4b03a 	or	r2,r18,r19
8008db74:	103ff51e 	bne	r2,zero,8008db4c <___vfiprintf_internal_r+0xee8>
8008db78:	003e5906 	br	8008d4e0 <___vfiprintf_internal_r+0x87c>
8008db7c:	d9402117 	ldw	r5,132(sp)
8008db80:	d9002017 	ldw	r4,128(sp)
8008db84:	d9801a04 	addi	r6,sp,104
8008db88:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008db8c:	103f891e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008db90:	d8801c17 	ldw	r2,112(sp)
8008db94:	d811883a 	mov	r8,sp
8008db98:	003f9506 	br	8008d9f0 <___vfiprintf_internal_r+0xd8c>
8008db9c:	d9402117 	ldw	r5,132(sp)
8008dba0:	d9002017 	ldw	r4,128(sp)
8008dba4:	d9801a04 	addi	r6,sp,104
8008dba8:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008dbac:	103f811e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008dbb0:	d811883a 	mov	r8,sp
8008dbb4:	003ced06 	br	8008cf6c <___vfiprintf_internal_r+0x308>
8008dbb8:	d9402117 	ldw	r5,132(sp)
8008dbbc:	d9002017 	ldw	r4,128(sp)
8008dbc0:	d9801a04 	addi	r6,sp,104
8008dbc4:	da402c15 	stw	r9,176(sp)
8008dbc8:	db802a15 	stw	r14,168(sp)
8008dbcc:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008dbd0:	da402c17 	ldw	r9,176(sp)
8008dbd4:	db802a17 	ldw	r14,168(sp)
8008dbd8:	103f761e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008dbdc:	d9401b17 	ldw	r5,108(sp)
8008dbe0:	d8801c17 	ldw	r2,112(sp)
8008dbe4:	d811883a 	mov	r8,sp
8008dbe8:	29000044 	addi	r4,r5,1
8008dbec:	003d5b06 	br	8008d15c <___vfiprintf_internal_r+0x4f8>
8008dbf0:	d9402117 	ldw	r5,132(sp)
8008dbf4:	d9002017 	ldw	r4,128(sp)
8008dbf8:	d9801a04 	addi	r6,sp,104
8008dbfc:	da402c15 	stw	r9,176(sp)
8008dc00:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008dc04:	da402c17 	ldw	r9,176(sp)
8008dc08:	103f6a1e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008dc0c:	d9401b17 	ldw	r5,108(sp)
8008dc10:	d8801c17 	ldw	r2,112(sp)
8008dc14:	d811883a 	mov	r8,sp
8008dc18:	29000044 	addi	r4,r5,1
8008dc1c:	003f1006 	br	8008d860 <___vfiprintf_internal_r+0xbfc>
8008dc20:	1000c31e 	bne	r2,zero,8008df30 <___vfiprintf_internal_r+0x12cc>
8008dc24:	01000044 	movi	r4,1
8008dc28:	000b883a 	mov	r5,zero
8008dc2c:	d811883a 	mov	r8,sp
8008dc30:	003f0d06 	br	8008d868 <___vfiprintf_internal_r+0xc04>
8008dc34:	d9402117 	ldw	r5,132(sp)
8008dc38:	d9002017 	ldw	r4,128(sp)
8008dc3c:	d9801a04 	addi	r6,sp,104
8008dc40:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008dc44:	103f5b1e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008dc48:	d9001b17 	ldw	r4,108(sp)
8008dc4c:	d8801c17 	ldw	r2,112(sp)
8008dc50:	d811883a 	mov	r8,sp
8008dc54:	21000044 	addi	r4,r4,1
8008dc58:	003d8006 	br	8008d25c <___vfiprintf_internal_r+0x5f8>
8008dc5c:	01200274 	movhi	r4,32777
8008dc60:	211a8b04 	addi	r4,r4,27180
8008dc64:	d9002615 	stw	r4,152(sp)
8008dc68:	d8c02215 	stw	r3,136(sp)
8008dc6c:	1029883a 	mov	r20,r2
8008dc70:	94c4b03a 	or	r2,r18,r19
8008dc74:	103fb21e 	bne	r2,zero,8008db40 <___vfiprintf_internal_r+0xedc>
8008dc78:	0039883a 	mov	fp,zero
8008dc7c:	00800084 	movi	r2,2
8008dc80:	003e6b06 	br	8008d630 <___vfiprintf_internal_r+0x9cc>
8008dc84:	da802217 	ldw	r10,136(sp)
8008dc88:	d8001d85 	stb	zero,118(sp)
8008dc8c:	0027883a 	mov	r19,zero
8008dc90:	50800104 	addi	r2,r10,4
8008dc94:	54800017 	ldw	r18,0(r10)
8008dc98:	483e6016 	blt	r9,zero,8008d61c <___vfiprintf_internal_r+0x9b8>
8008dc9c:	00ffdfc4 	movi	r3,-129
8008dca0:	d8802215 	stw	r2,136(sp)
8008dca4:	a0e8703a 	and	r20,r20,r3
8008dca8:	0039883a 	mov	fp,zero
8008dcac:	903ebb26 	beq	r18,zero,8008d79c <___vfiprintf_internal_r+0xb38>
8008dcb0:	00800244 	movi	r2,9
8008dcb4:	14bdee36 	bltu	r2,r18,8008d470 <___vfiprintf_internal_r+0x80c>
8008dcb8:	003eba06 	br	8008d7a4 <___vfiprintf_internal_r+0xb40>
8008dcbc:	00800c04 	movi	r2,48
8008dcc0:	d8c01d45 	stb	r3,117(sp)
8008dcc4:	d8801d05 	stb	r2,116(sp)
8008dcc8:	d8001d85 	stb	zero,118(sp)
8008dccc:	a0c00094 	ori	r3,r20,2
8008dcd0:	4800a916 	blt	r9,zero,8008df78 <___vfiprintf_internal_r+0x1314>
8008dcd4:	00bfdfc4 	movi	r2,-129
8008dcd8:	a096703a 	and	r11,r20,r2
8008dcdc:	5d000094 	ori	r20,r11,2
8008dce0:	0039883a 	mov	fp,zero
8008dce4:	003f9706 	br	8008db44 <___vfiprintf_internal_r+0xee0>
8008dce8:	8025883a 	mov	r18,r16
8008dcec:	003c2e06 	br	8008cda8 <___vfiprintf_internal_r+0x144>
8008dcf0:	00a00274 	movhi	r2,32777
8008dcf4:	109a8b04 	addi	r2,r2,27180
8008dcf8:	0039883a 	mov	fp,zero
8008dcfc:	d8802615 	stw	r2,152(sp)
8008dd00:	003f9006 	br	8008db44 <___vfiprintf_internal_r+0xee0>
8008dd04:	04a5c83a 	sub	r18,zero,r18
8008dd08:	07000b44 	movi	fp,45
8008dd0c:	9004c03a 	cmpne	r2,r18,zero
8008dd10:	04e7c83a 	sub	r19,zero,r19
8008dd14:	df001d85 	stb	fp,118(sp)
8008dd18:	98a7c83a 	sub	r19,r19,r2
8008dd1c:	48009f16 	blt	r9,zero,8008df9c <___vfiprintf_internal_r+0x1338>
8008dd20:	00bfdfc4 	movi	r2,-129
8008dd24:	a0a8703a 	and	r20,r20,r2
8008dd28:	003dd006 	br	8008d46c <___vfiprintf_internal_r+0x808>
8008dd2c:	70004c26 	beq	r14,zero,8008de60 <___vfiprintf_internal_r+0x11fc>
8008dd30:	00800084 	movi	r2,2
8008dd34:	d8c01d04 	addi	r3,sp,116
8008dd38:	d8c00015 	stw	r3,0(sp)
8008dd3c:	d8800115 	stw	r2,4(sp)
8008dd40:	01000044 	movi	r4,1
8008dd44:	d811883a 	mov	r8,sp
8008dd48:	003f7306 	br	8008db18 <___vfiprintf_internal_r+0xeb4>
8008dd4c:	a080100c 	andi	r2,r20,64
8008dd50:	da802217 	ldw	r10,136(sp)
8008dd54:	103e0626 	beq	r2,zero,8008d570 <___vfiprintf_internal_r+0x90c>
8008dd58:	5480000f 	ldh	r18,0(r10)
8008dd5c:	52800104 	addi	r10,r10,4
8008dd60:	da802215 	stw	r10,136(sp)
8008dd64:	9027d7fa 	srai	r19,r18,31
8008dd68:	9805883a 	mov	r2,r19
8008dd6c:	003db806 	br	8008d450 <___vfiprintf_internal_r+0x7ec>
8008dd70:	a080040c 	andi	r2,r20,16
8008dd74:	1000091e 	bne	r2,zero,8008dd9c <___vfiprintf_internal_r+0x1138>
8008dd78:	a2c0100c 	andi	r11,r20,64
8008dd7c:	58000726 	beq	r11,zero,8008dd9c <___vfiprintf_internal_r+0x1138>
8008dd80:	da802217 	ldw	r10,136(sp)
8008dd84:	50800017 	ldw	r2,0(r10)
8008dd88:	52800104 	addi	r10,r10,4
8008dd8c:	da802215 	stw	r10,136(sp)
8008dd90:	da802317 	ldw	r10,140(sp)
8008dd94:	1280000d 	sth	r10,0(r2)
8008dd98:	003be706 	br	8008cd38 <___vfiprintf_internal_r+0xd4>
8008dd9c:	da802217 	ldw	r10,136(sp)
8008dda0:	50800017 	ldw	r2,0(r10)
8008dda4:	52800104 	addi	r10,r10,4
8008dda8:	da802215 	stw	r10,136(sp)
8008ddac:	da802317 	ldw	r10,140(sp)
8008ddb0:	12800015 	stw	r10,0(r2)
8008ddb4:	003be006 	br	8008cd38 <___vfiprintf_internal_r+0xd4>
8008ddb8:	a080100c 	andi	r2,r20,64
8008ddbc:	da802217 	ldw	r10,136(sp)
8008ddc0:	10003026 	beq	r2,zero,8008de84 <___vfiprintf_internal_r+0x1220>
8008ddc4:	5480000b 	ldhu	r18,0(r10)
8008ddc8:	52800104 	addi	r10,r10,4
8008ddcc:	0027883a 	mov	r19,zero
8008ddd0:	da802215 	stw	r10,136(sp)
8008ddd4:	003d8006 	br	8008d3d8 <___vfiprintf_internal_r+0x774>
8008ddd8:	80c00007 	ldb	r3,0(r16)
8008dddc:	003c0006 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008dde0:	a080100c 	andi	r2,r20,64
8008dde4:	d8001d85 	stb	zero,118(sp)
8008dde8:	da802217 	ldw	r10,136(sp)
8008ddec:	1000201e 	bne	r2,zero,8008de70 <___vfiprintf_internal_r+0x120c>
8008ddf0:	50800104 	addi	r2,r10,4
8008ddf4:	54800017 	ldw	r18,0(r10)
8008ddf8:	0027883a 	mov	r19,zero
8008ddfc:	483def0e 	bge	r9,zero,8008d5bc <___vfiprintf_internal_r+0x958>
8008de00:	94c6b03a 	or	r3,r18,r19
8008de04:	d8802215 	stw	r2,136(sp)
8008de08:	183d4e1e 	bne	r3,zero,8008d344 <___vfiprintf_internal_r+0x6e0>
8008de0c:	0039883a 	mov	fp,zero
8008de10:	0005883a 	mov	r2,zero
8008de14:	003e0606 	br	8008d630 <___vfiprintf_internal_r+0x9cc>
8008de18:	d9402117 	ldw	r5,132(sp)
8008de1c:	d9002017 	ldw	r4,128(sp)
8008de20:	d9801a04 	addi	r6,sp,104
8008de24:	da402c15 	stw	r9,176(sp)
8008de28:	db802a15 	stw	r14,168(sp)
8008de2c:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008de30:	da402c17 	ldw	r9,176(sp)
8008de34:	db802a17 	ldw	r14,168(sp)
8008de38:	103ede1e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008de3c:	d9401b17 	ldw	r5,108(sp)
8008de40:	d8801c17 	ldw	r2,112(sp)
8008de44:	d811883a 	mov	r8,sp
8008de48:	29000044 	addi	r4,r5,1
8008de4c:	003e7406 	br	8008d820 <___vfiprintf_internal_r+0xbbc>
8008de50:	00bfffc4 	movi	r2,-1
8008de54:	003c5806 	br	8008cfb8 <___vfiprintf_internal_r+0x354>
8008de58:	d811883a 	mov	r8,sp
8008de5c:	003ee806 	br	8008da00 <___vfiprintf_internal_r+0xd9c>
8008de60:	000b883a 	mov	r5,zero
8008de64:	01000044 	movi	r4,1
8008de68:	d811883a 	mov	r8,sp
8008de6c:	003e7c06 	br	8008d860 <___vfiprintf_internal_r+0xbfc>
8008de70:	50800104 	addi	r2,r10,4
8008de74:	5480000b 	ldhu	r18,0(r10)
8008de78:	0027883a 	mov	r19,zero
8008de7c:	483dcf0e 	bge	r9,zero,8008d5bc <___vfiprintf_internal_r+0x958>
8008de80:	003fdf06 	br	8008de00 <___vfiprintf_internal_r+0x119c>
8008de84:	54800017 	ldw	r18,0(r10)
8008de88:	52800104 	addi	r10,r10,4
8008de8c:	0027883a 	mov	r19,zero
8008de90:	da802215 	stw	r10,136(sp)
8008de94:	003d5006 	br	8008d3d8 <___vfiprintf_internal_r+0x774>
8008de98:	50800104 	addi	r2,r10,4
8008de9c:	5480000b 	ldhu	r18,0(r10)
8008dea0:	0027883a 	mov	r19,zero
8008dea4:	483f7d0e 	bge	r9,zero,8008dc9c <___vfiprintf_internal_r+0x1038>
8008dea8:	003ddc06 	br	8008d61c <___vfiprintf_internal_r+0x9b8>
8008deac:	d8c02215 	stw	r3,136(sp)
8008deb0:	0039883a 	mov	fp,zero
8008deb4:	003ddb06 	br	8008d624 <___vfiprintf_internal_r+0x9c0>
8008deb8:	02a00274 	movhi	r10,32777
8008debc:	529afa04 	addi	r10,r10,27624
8008dec0:	da802415 	stw	r10,144(sp)
8008dec4:	003e8306 	br	8008d8d4 <___vfiprintf_internal_r+0xc70>
8008dec8:	d8801c17 	ldw	r2,112(sp)
8008decc:	dd002117 	ldw	r20,132(sp)
8008ded0:	103eb926 	beq	r2,zero,8008d9b8 <___vfiprintf_internal_r+0xd54>
8008ded4:	d9002017 	ldw	r4,128(sp)
8008ded8:	d9801a04 	addi	r6,sp,104
8008dedc:	a00b883a 	mov	r5,r20
8008dee0:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008dee4:	003eb406 	br	8008d9b8 <___vfiprintf_internal_r+0xd54>
8008dee8:	80c00043 	ldbu	r3,1(r16)
8008deec:	a5000814 	ori	r20,r20,32
8008def0:	84000044 	addi	r16,r16,1
8008def4:	18c03fcc 	andi	r3,r3,255
8008def8:	18c0201c 	xori	r3,r3,128
8008defc:	18ffe004 	addi	r3,r3,-128
8008df00:	003bb706 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008df04:	a809883a 	mov	r4,r21
8008df08:	d8c02a15 	stw	r3,168(sp)
8008df0c:	da002b15 	stw	r8,172(sp)
8008df10:	0081cc00 	call	80081cc0 <strlen>
8008df14:	d8c02a17 	ldw	r3,168(sp)
8008df18:	1027883a 	mov	r19,r2
8008df1c:	df001d83 	ldbu	fp,118(sp)
8008df20:	d8c02215 	stw	r3,136(sp)
8008df24:	0013883a 	mov	r9,zero
8008df28:	da002b17 	ldw	r8,172(sp)
8008df2c:	003c4d06 	br	8008d064 <___vfiprintf_internal_r+0x400>
8008df30:	d9402117 	ldw	r5,132(sp)
8008df34:	d9002017 	ldw	r4,128(sp)
8008df38:	d9801a04 	addi	r6,sp,104
8008df3c:	da402c15 	stw	r9,176(sp)
8008df40:	008cb500 	call	8008cb50 <__sprint_r.part.0>
8008df44:	da402c17 	ldw	r9,176(sp)
8008df48:	103e9a1e 	bne	r2,zero,8008d9b4 <___vfiprintf_internal_r+0xd50>
8008df4c:	d9401b17 	ldw	r5,108(sp)
8008df50:	d8801c17 	ldw	r2,112(sp)
8008df54:	d811883a 	mov	r8,sp
8008df58:	29000044 	addi	r4,r5,1
8008df5c:	003e4206 	br	8008d868 <___vfiprintf_internal_r+0xc04>
8008df60:	d9401b17 	ldw	r5,108(sp)
8008df64:	01200274 	movhi	r4,32777
8008df68:	211afe04 	addi	r4,r4,27640
8008df6c:	d9002415 	stw	r4,144(sp)
8008df70:	29400044 	addi	r5,r5,1
8008df74:	003c6d06 	br	8008d12c <___vfiprintf_internal_r+0x4c8>
8008df78:	0039883a 	mov	fp,zero
8008df7c:	00800084 	movi	r2,2
8008df80:	10803fcc 	andi	r2,r2,255
8008df84:	01000044 	movi	r4,1
8008df88:	11001e26 	beq	r2,r4,8008e004 <___vfiprintf_internal_r+0x13a0>
8008df8c:	01000084 	movi	r4,2
8008df90:	11001e1e 	bne	r2,r4,8008e00c <___vfiprintf_internal_r+0x13a8>
8008df94:	1829883a 	mov	r20,r3
8008df98:	003eea06 	br	8008db44 <___vfiprintf_internal_r+0xee0>
8008df9c:	a007883a 	mov	r3,r20
8008dfa0:	00800044 	movi	r2,1
8008dfa4:	003ff606 	br	8008df80 <___vfiprintf_internal_r+0x131c>
8008dfa8:	00800184 	movi	r2,6
8008dfac:	1240012e 	bgeu	r2,r9,8008dfb4 <___vfiprintf_internal_r+0x1350>
8008dfb0:	1013883a 	mov	r9,r2
8008dfb4:	4827883a 	mov	r19,r9
8008dfb8:	4825883a 	mov	r18,r9
8008dfbc:	48001516 	blt	r9,zero,8008e014 <___vfiprintf_internal_r+0x13b0>
8008dfc0:	05600274 	movhi	r21,32777
8008dfc4:	d8c02215 	stw	r3,136(sp)
8008dfc8:	ad5a9004 	addi	r21,r21,27200
8008dfcc:	003d1406 	br	8008d420 <___vfiprintf_internal_r+0x7bc>
8008dfd0:	02a00274 	movhi	r10,32777
8008dfd4:	529afa04 	addi	r10,r10,27624
8008dfd8:	da802415 	stw	r10,144(sp)
8008dfdc:	200d883a 	mov	r6,r4
8008dfe0:	003c9106 	br	8008d228 <___vfiprintf_internal_r+0x5c4>
8008dfe4:	5021883a 	mov	r16,r10
8008dfe8:	0013883a 	mov	r9,zero
8008dfec:	003b7d06 	br	8008cde4 <___vfiprintf_internal_r+0x180>
8008dff0:	4827883a 	mov	r19,r9
8008dff4:	df001d83 	ldbu	fp,118(sp)
8008dff8:	d8c02215 	stw	r3,136(sp)
8008dffc:	0013883a 	mov	r9,zero
8008e000:	003c1806 	br	8008d064 <___vfiprintf_internal_r+0x400>
8008e004:	1829883a 	mov	r20,r3
8008e008:	003d1806 	br	8008d46c <___vfiprintf_internal_r+0x808>
8008e00c:	1829883a 	mov	r20,r3
8008e010:	003ccd06 	br	8008d348 <___vfiprintf_internal_r+0x6e4>
8008e014:	0025883a 	mov	r18,zero
8008e018:	003fe906 	br	8008dfc0 <___vfiprintf_internal_r+0x135c>
8008e01c:	d8802217 	ldw	r2,136(sp)
8008e020:	80c00043 	ldbu	r3,1(r16)
8008e024:	5021883a 	mov	r16,r10
8008e028:	12400017 	ldw	r9,0(r2)
8008e02c:	10800104 	addi	r2,r2,4
8008e030:	d8802215 	stw	r2,136(sp)
8008e034:	483faf0e 	bge	r9,zero,8008def4 <___vfiprintf_internal_r+0x1290>
8008e038:	18c03fcc 	andi	r3,r3,255
8008e03c:	18c0201c 	xori	r3,r3,128
8008e040:	027fffc4 	movi	r9,-1
8008e044:	18ffe004 	addi	r3,r3,-128
8008e048:	003b6506 	br	8008cde0 <___vfiprintf_internal_r+0x17c>
8008e04c:	d9c01d85 	stb	r7,118(sp)
8008e050:	003ca006 	br	8008d2d4 <___vfiprintf_internal_r+0x670>
8008e054:	d9c01d85 	stb	r7,118(sp)
8008e058:	003cad06 	br	8008d310 <___vfiprintf_internal_r+0x6ac>
8008e05c:	d9c01d85 	stb	r7,118(sp)
8008e060:	003d7d06 	br	8008d658 <___vfiprintf_internal_r+0x9f4>
8008e064:	d9c01d85 	stb	r7,118(sp)
8008e068:	003d5f06 	br	8008d5e8 <___vfiprintf_internal_r+0x984>
8008e06c:	a080004c 	andi	r2,r20,1
8008e070:	0039883a 	mov	fp,zero
8008e074:	10000526 	beq	r2,zero,8008e08c <___vfiprintf_internal_r+0x1428>
8008e078:	00800c04 	movi	r2,48
8008e07c:	d88019c5 	stb	r2,103(sp)
8008e080:	dcc02717 	ldw	r19,156(sp)
8008e084:	dd4019c4 	addi	r21,sp,103
8008e088:	003bf606 	br	8008d064 <___vfiprintf_internal_r+0x400>
8008e08c:	0027883a 	mov	r19,zero
8008e090:	dd401a04 	addi	r21,sp,104
8008e094:	003bf306 	br	8008d064 <___vfiprintf_internal_r+0x400>
8008e098:	d9c01d85 	stb	r7,118(sp)
8008e09c:	003dc806 	br	8008d7c0 <___vfiprintf_internal_r+0xb5c>
8008e0a0:	d9c01d85 	stb	r7,118(sp)
8008e0a4:	003d3a06 	br	8008d590 <___vfiprintf_internal_r+0x92c>
8008e0a8:	d9c01d85 	stb	r7,118(sp)
8008e0ac:	003d2a06 	br	8008d558 <___vfiprintf_internal_r+0x8f4>
8008e0b0:	d9c01d85 	stb	r7,118(sp)
8008e0b4:	003cde06 	br	8008d430 <___vfiprintf_internal_r+0x7cc>
8008e0b8:	d9c01d85 	stb	r7,118(sp)
8008e0bc:	003cbc06 	br	8008d3b0 <___vfiprintf_internal_r+0x74c>

8008e0c0 <__vfiprintf_internal>:
8008e0c0:	00a002b4 	movhi	r2,32778
8008e0c4:	10a31204 	addi	r2,r2,-29624
8008e0c8:	300f883a 	mov	r7,r6
8008e0cc:	280d883a 	mov	r6,r5
8008e0d0:	200b883a 	mov	r5,r4
8008e0d4:	11000017 	ldw	r4,0(r2)
8008e0d8:	008cc641 	jmpi	8008cc64 <___vfiprintf_internal_r>

8008e0dc <__sbprintf>:
8008e0dc:	2880030b 	ldhu	r2,12(r5)
8008e0e0:	2ac01917 	ldw	r11,100(r5)
8008e0e4:	2a80038b 	ldhu	r10,14(r5)
8008e0e8:	2a400717 	ldw	r9,28(r5)
8008e0ec:	2a000917 	ldw	r8,36(r5)
8008e0f0:	defee204 	addi	sp,sp,-1144
8008e0f4:	00c10004 	movi	r3,1024
8008e0f8:	dc011a15 	stw	r16,1128(sp)
8008e0fc:	10bfff4c 	andi	r2,r2,65533
8008e100:	2821883a 	mov	r16,r5
8008e104:	d8cb883a 	add	r5,sp,r3
8008e108:	dc811c15 	stw	r18,1136(sp)
8008e10c:	dc411b15 	stw	r17,1132(sp)
8008e110:	dfc11d15 	stw	ra,1140(sp)
8008e114:	2025883a 	mov	r18,r4
8008e118:	d881030d 	sth	r2,1036(sp)
8008e11c:	dac11915 	stw	r11,1124(sp)
8008e120:	da81038d 	sth	r10,1038(sp)
8008e124:	da410715 	stw	r9,1052(sp)
8008e128:	da010915 	stw	r8,1060(sp)
8008e12c:	dec10015 	stw	sp,1024(sp)
8008e130:	dec10415 	stw	sp,1040(sp)
8008e134:	d8c10215 	stw	r3,1032(sp)
8008e138:	d8c10515 	stw	r3,1044(sp)
8008e13c:	d8010615 	stw	zero,1048(sp)
8008e140:	008cc640 	call	8008cc64 <___vfiprintf_internal_r>
8008e144:	1023883a 	mov	r17,r2
8008e148:	10000416 	blt	r2,zero,8008e15c <__sbprintf+0x80>
8008e14c:	d9410004 	addi	r5,sp,1024
8008e150:	9009883a 	mov	r4,r18
8008e154:	0087f1c0 	call	80087f1c <_fflush_r>
8008e158:	10000d1e 	bne	r2,zero,8008e190 <__sbprintf+0xb4>
8008e15c:	d881030b 	ldhu	r2,1036(sp)
8008e160:	1080100c 	andi	r2,r2,64
8008e164:	10000326 	beq	r2,zero,8008e174 <__sbprintf+0x98>
8008e168:	8080030b 	ldhu	r2,12(r16)
8008e16c:	10801014 	ori	r2,r2,64
8008e170:	8080030d 	sth	r2,12(r16)
8008e174:	8805883a 	mov	r2,r17
8008e178:	dfc11d17 	ldw	ra,1140(sp)
8008e17c:	dc811c17 	ldw	r18,1136(sp)
8008e180:	dc411b17 	ldw	r17,1132(sp)
8008e184:	dc011a17 	ldw	r16,1128(sp)
8008e188:	dec11e04 	addi	sp,sp,1144
8008e18c:	f800283a 	ret
8008e190:	047fffc4 	movi	r17,-1
8008e194:	003ff106 	br	8008e15c <__sbprintf+0x80>

8008e198 <_write_r>:
8008e198:	defffd04 	addi	sp,sp,-12
8008e19c:	2805883a 	mov	r2,r5
8008e1a0:	dc000015 	stw	r16,0(sp)
8008e1a4:	042002b4 	movhi	r16,32778
8008e1a8:	dc400115 	stw	r17,4(sp)
8008e1ac:	300b883a 	mov	r5,r6
8008e1b0:	842a8904 	addi	r16,r16,-21980
8008e1b4:	2023883a 	mov	r17,r4
8008e1b8:	380d883a 	mov	r6,r7
8008e1bc:	1009883a 	mov	r4,r2
8008e1c0:	dfc00215 	stw	ra,8(sp)
8008e1c4:	80000015 	stw	zero,0(r16)
8008e1c8:	0091e880 	call	80091e88 <write>
8008e1cc:	00ffffc4 	movi	r3,-1
8008e1d0:	10c00526 	beq	r2,r3,8008e1e8 <_write_r+0x50>
8008e1d4:	dfc00217 	ldw	ra,8(sp)
8008e1d8:	dc400117 	ldw	r17,4(sp)
8008e1dc:	dc000017 	ldw	r16,0(sp)
8008e1e0:	dec00304 	addi	sp,sp,12
8008e1e4:	f800283a 	ret
8008e1e8:	80c00017 	ldw	r3,0(r16)
8008e1ec:	183ff926 	beq	r3,zero,8008e1d4 <_write_r+0x3c>
8008e1f0:	88c00015 	stw	r3,0(r17)
8008e1f4:	003ff706 	br	8008e1d4 <_write_r+0x3c>

8008e1f8 <_close_r>:
8008e1f8:	defffd04 	addi	sp,sp,-12
8008e1fc:	dc000015 	stw	r16,0(sp)
8008e200:	042002b4 	movhi	r16,32778
8008e204:	dc400115 	stw	r17,4(sp)
8008e208:	842a8904 	addi	r16,r16,-21980
8008e20c:	2023883a 	mov	r17,r4
8008e210:	2809883a 	mov	r4,r5
8008e214:	dfc00215 	stw	ra,8(sp)
8008e218:	80000015 	stw	zero,0(r16)
8008e21c:	00914d40 	call	800914d4 <close>
8008e220:	00ffffc4 	movi	r3,-1
8008e224:	10c00526 	beq	r2,r3,8008e23c <_close_r+0x44>
8008e228:	dfc00217 	ldw	ra,8(sp)
8008e22c:	dc400117 	ldw	r17,4(sp)
8008e230:	dc000017 	ldw	r16,0(sp)
8008e234:	dec00304 	addi	sp,sp,12
8008e238:	f800283a 	ret
8008e23c:	80c00017 	ldw	r3,0(r16)
8008e240:	183ff926 	beq	r3,zero,8008e228 <_close_r+0x30>
8008e244:	88c00015 	stw	r3,0(r17)
8008e248:	003ff706 	br	8008e228 <_close_r+0x30>

8008e24c <_calloc_r>:
8008e24c:	298b383a 	mul	r5,r5,r6
8008e250:	defffe04 	addi	sp,sp,-8
8008e254:	dfc00115 	stw	ra,4(sp)
8008e258:	dc000015 	stw	r16,0(sp)
8008e25c:	00890580 	call	80089058 <_malloc_r>
8008e260:	10002926 	beq	r2,zero,8008e308 <_calloc_r+0xbc>
8008e264:	11bfff17 	ldw	r6,-4(r2)
8008e268:	1021883a 	mov	r16,r2
8008e26c:	00bfff04 	movi	r2,-4
8008e270:	308c703a 	and	r6,r6,r2
8008e274:	00c00904 	movi	r3,36
8008e278:	308d883a 	add	r6,r6,r2
8008e27c:	19801636 	bltu	r3,r6,8008e2d8 <_calloc_r+0x8c>
8008e280:	008004c4 	movi	r2,19
8008e284:	11800b2e 	bgeu	r2,r6,8008e2b4 <_calloc_r+0x68>
8008e288:	80000015 	stw	zero,0(r16)
8008e28c:	80000115 	stw	zero,4(r16)
8008e290:	008006c4 	movi	r2,27
8008e294:	11801a2e 	bgeu	r2,r6,8008e300 <_calloc_r+0xb4>
8008e298:	80000215 	stw	zero,8(r16)
8008e29c:	80000315 	stw	zero,12(r16)
8008e2a0:	30c0151e 	bne	r6,r3,8008e2f8 <_calloc_r+0xac>
8008e2a4:	80000415 	stw	zero,16(r16)
8008e2a8:	80800604 	addi	r2,r16,24
8008e2ac:	80000515 	stw	zero,20(r16)
8008e2b0:	00000106 	br	8008e2b8 <_calloc_r+0x6c>
8008e2b4:	8005883a 	mov	r2,r16
8008e2b8:	10000015 	stw	zero,0(r2)
8008e2bc:	10000115 	stw	zero,4(r2)
8008e2c0:	10000215 	stw	zero,8(r2)
8008e2c4:	8005883a 	mov	r2,r16
8008e2c8:	dfc00117 	ldw	ra,4(sp)
8008e2cc:	dc000017 	ldw	r16,0(sp)
8008e2d0:	dec00204 	addi	sp,sp,8
8008e2d4:	f800283a 	ret
8008e2d8:	000b883a 	mov	r5,zero
8008e2dc:	8009883a 	mov	r4,r16
8008e2e0:	0089bec0 	call	80089bec <memset>
8008e2e4:	8005883a 	mov	r2,r16
8008e2e8:	dfc00117 	ldw	ra,4(sp)
8008e2ec:	dc000017 	ldw	r16,0(sp)
8008e2f0:	dec00204 	addi	sp,sp,8
8008e2f4:	f800283a 	ret
8008e2f8:	80800404 	addi	r2,r16,16
8008e2fc:	003fee06 	br	8008e2b8 <_calloc_r+0x6c>
8008e300:	80800204 	addi	r2,r16,8
8008e304:	003fec06 	br	8008e2b8 <_calloc_r+0x6c>
8008e308:	0005883a 	mov	r2,zero
8008e30c:	003fee06 	br	8008e2c8 <_calloc_r+0x7c>

8008e310 <_fclose_r>:
8008e310:	28003926 	beq	r5,zero,8008e3f8 <_fclose_r+0xe8>
8008e314:	defffc04 	addi	sp,sp,-16
8008e318:	dc400115 	stw	r17,4(sp)
8008e31c:	dc000015 	stw	r16,0(sp)
8008e320:	dfc00315 	stw	ra,12(sp)
8008e324:	dc800215 	stw	r18,8(sp)
8008e328:	2023883a 	mov	r17,r4
8008e32c:	2821883a 	mov	r16,r5
8008e330:	20000226 	beq	r4,zero,8008e33c <_fclose_r+0x2c>
8008e334:	20800e17 	ldw	r2,56(r4)
8008e338:	10002726 	beq	r2,zero,8008e3d8 <_fclose_r+0xc8>
8008e33c:	8080030f 	ldh	r2,12(r16)
8008e340:	1000071e 	bne	r2,zero,8008e360 <_fclose_r+0x50>
8008e344:	0005883a 	mov	r2,zero
8008e348:	dfc00317 	ldw	ra,12(sp)
8008e34c:	dc800217 	ldw	r18,8(sp)
8008e350:	dc400117 	ldw	r17,4(sp)
8008e354:	dc000017 	ldw	r16,0(sp)
8008e358:	dec00404 	addi	sp,sp,16
8008e35c:	f800283a 	ret
8008e360:	800b883a 	mov	r5,r16
8008e364:	8809883a 	mov	r4,r17
8008e368:	0087d000 	call	80087d00 <__sflush_r>
8008e36c:	1025883a 	mov	r18,r2
8008e370:	80800b17 	ldw	r2,44(r16)
8008e374:	10000426 	beq	r2,zero,8008e388 <_fclose_r+0x78>
8008e378:	81400717 	ldw	r5,28(r16)
8008e37c:	8809883a 	mov	r4,r17
8008e380:	103ee83a 	callr	r2
8008e384:	10001616 	blt	r2,zero,8008e3e0 <_fclose_r+0xd0>
8008e388:	8080030b 	ldhu	r2,12(r16)
8008e38c:	1080200c 	andi	r2,r2,128
8008e390:	1000151e 	bne	r2,zero,8008e3e8 <_fclose_r+0xd8>
8008e394:	81400c17 	ldw	r5,48(r16)
8008e398:	28000526 	beq	r5,zero,8008e3b0 <_fclose_r+0xa0>
8008e39c:	80801004 	addi	r2,r16,64
8008e3a0:	28800226 	beq	r5,r2,8008e3ac <_fclose_r+0x9c>
8008e3a4:	8809883a 	mov	r4,r17
8008e3a8:	008846c0 	call	8008846c <_free_r>
8008e3ac:	80000c15 	stw	zero,48(r16)
8008e3b0:	81401117 	ldw	r5,68(r16)
8008e3b4:	28000326 	beq	r5,zero,8008e3c4 <_fclose_r+0xb4>
8008e3b8:	8809883a 	mov	r4,r17
8008e3bc:	008846c0 	call	8008846c <_free_r>
8008e3c0:	80001115 	stw	zero,68(r16)
8008e3c4:	00883080 	call	80088308 <__sfp_lock_acquire>
8008e3c8:	8000030d 	sth	zero,12(r16)
8008e3cc:	008830c0 	call	8008830c <__sfp_lock_release>
8008e3d0:	9005883a 	mov	r2,r18
8008e3d4:	003fdc06 	br	8008e348 <_fclose_r+0x38>
8008e3d8:	00882f80 	call	800882f8 <__sinit>
8008e3dc:	003fd706 	br	8008e33c <_fclose_r+0x2c>
8008e3e0:	04bfffc4 	movi	r18,-1
8008e3e4:	003fe806 	br	8008e388 <_fclose_r+0x78>
8008e3e8:	81400417 	ldw	r5,16(r16)
8008e3ec:	8809883a 	mov	r4,r17
8008e3f0:	008846c0 	call	8008846c <_free_r>
8008e3f4:	003fe706 	br	8008e394 <_fclose_r+0x84>
8008e3f8:	0005883a 	mov	r2,zero
8008e3fc:	f800283a 	ret

8008e400 <fclose>:
8008e400:	00a002b4 	movhi	r2,32778
8008e404:	10a31204 	addi	r2,r2,-29624
8008e408:	200b883a 	mov	r5,r4
8008e40c:	11000017 	ldw	r4,0(r2)
8008e410:	008e3101 	jmpi	8008e310 <_fclose_r>

8008e414 <__fputwc>:
8008e414:	defff804 	addi	sp,sp,-32
8008e418:	dcc00415 	stw	r19,16(sp)
8008e41c:	dc800315 	stw	r18,12(sp)
8008e420:	dc000115 	stw	r16,4(sp)
8008e424:	dfc00715 	stw	ra,28(sp)
8008e428:	dd400615 	stw	r21,24(sp)
8008e42c:	dd000515 	stw	r20,20(sp)
8008e430:	dc400215 	stw	r17,8(sp)
8008e434:	2027883a 	mov	r19,r4
8008e438:	2825883a 	mov	r18,r5
8008e43c:	3021883a 	mov	r16,r6
8008e440:	0088e480 	call	80088e48 <__locale_mb_cur_max>
8008e444:	00c00044 	movi	r3,1
8008e448:	10c03e26 	beq	r2,r3,8008e544 <__fputwc+0x130>
8008e44c:	81c01704 	addi	r7,r16,92
8008e450:	900d883a 	mov	r6,r18
8008e454:	d80b883a 	mov	r5,sp
8008e458:	9809883a 	mov	r4,r19
8008e45c:	008e8e40 	call	8008e8e4 <_wcrtomb_r>
8008e460:	1029883a 	mov	r20,r2
8008e464:	00bfffc4 	movi	r2,-1
8008e468:	a0802026 	beq	r20,r2,8008e4ec <__fputwc+0xd8>
8008e46c:	d9400003 	ldbu	r5,0(sp)
8008e470:	a0001c26 	beq	r20,zero,8008e4e4 <__fputwc+0xd0>
8008e474:	0023883a 	mov	r17,zero
8008e478:	05400284 	movi	r21,10
8008e47c:	00000906 	br	8008e4a4 <__fputwc+0x90>
8008e480:	80800017 	ldw	r2,0(r16)
8008e484:	11400005 	stb	r5,0(r2)
8008e488:	80c00017 	ldw	r3,0(r16)
8008e48c:	18c00044 	addi	r3,r3,1
8008e490:	80c00015 	stw	r3,0(r16)
8008e494:	8c400044 	addi	r17,r17,1
8008e498:	dc45883a 	add	r2,sp,r17
8008e49c:	8d00112e 	bgeu	r17,r20,8008e4e4 <__fputwc+0xd0>
8008e4a0:	11400003 	ldbu	r5,0(r2)
8008e4a4:	80c00217 	ldw	r3,8(r16)
8008e4a8:	18ffffc4 	addi	r3,r3,-1
8008e4ac:	80c00215 	stw	r3,8(r16)
8008e4b0:	183ff30e 	bge	r3,zero,8008e480 <__fputwc+0x6c>
8008e4b4:	80800617 	ldw	r2,24(r16)
8008e4b8:	18801916 	blt	r3,r2,8008e520 <__fputwc+0x10c>
8008e4bc:	80800017 	ldw	r2,0(r16)
8008e4c0:	11400005 	stb	r5,0(r2)
8008e4c4:	80800017 	ldw	r2,0(r16)
8008e4c8:	10c00003 	ldbu	r3,0(r2)
8008e4cc:	10800044 	addi	r2,r2,1
8008e4d0:	1d402326 	beq	r3,r21,8008e560 <__fputwc+0x14c>
8008e4d4:	80800015 	stw	r2,0(r16)
8008e4d8:	8c400044 	addi	r17,r17,1
8008e4dc:	dc45883a 	add	r2,sp,r17
8008e4e0:	8d3fef36 	bltu	r17,r20,8008e4a0 <__fputwc+0x8c>
8008e4e4:	9005883a 	mov	r2,r18
8008e4e8:	00000406 	br	8008e4fc <__fputwc+0xe8>
8008e4ec:	80c0030b 	ldhu	r3,12(r16)
8008e4f0:	a005883a 	mov	r2,r20
8008e4f4:	18c01014 	ori	r3,r3,64
8008e4f8:	80c0030d 	sth	r3,12(r16)
8008e4fc:	dfc00717 	ldw	ra,28(sp)
8008e500:	dd400617 	ldw	r21,24(sp)
8008e504:	dd000517 	ldw	r20,20(sp)
8008e508:	dcc00417 	ldw	r19,16(sp)
8008e50c:	dc800317 	ldw	r18,12(sp)
8008e510:	dc400217 	ldw	r17,8(sp)
8008e514:	dc000117 	ldw	r16,4(sp)
8008e518:	dec00804 	addi	sp,sp,32
8008e51c:	f800283a 	ret
8008e520:	800d883a 	mov	r6,r16
8008e524:	29403fcc 	andi	r5,r5,255
8008e528:	9809883a 	mov	r4,r19
8008e52c:	008e78c0 	call	8008e78c <__swbuf_r>
8008e530:	10bfffe0 	cmpeqi	r2,r2,-1
8008e534:	10803fcc 	andi	r2,r2,255
8008e538:	103fd626 	beq	r2,zero,8008e494 <__fputwc+0x80>
8008e53c:	00bfffc4 	movi	r2,-1
8008e540:	003fee06 	br	8008e4fc <__fputwc+0xe8>
8008e544:	90ffffc4 	addi	r3,r18,-1
8008e548:	01003f84 	movi	r4,254
8008e54c:	20ffbf36 	bltu	r4,r3,8008e44c <__fputwc+0x38>
8008e550:	900b883a 	mov	r5,r18
8008e554:	dc800005 	stb	r18,0(sp)
8008e558:	1029883a 	mov	r20,r2
8008e55c:	003fc506 	br	8008e474 <__fputwc+0x60>
8008e560:	800d883a 	mov	r6,r16
8008e564:	a80b883a 	mov	r5,r21
8008e568:	9809883a 	mov	r4,r19
8008e56c:	008e78c0 	call	8008e78c <__swbuf_r>
8008e570:	10bfffe0 	cmpeqi	r2,r2,-1
8008e574:	003fef06 	br	8008e534 <__fputwc+0x120>

8008e578 <_fputwc_r>:
8008e578:	3080030b 	ldhu	r2,12(r6)
8008e57c:	10c8000c 	andi	r3,r2,8192
8008e580:	1800051e 	bne	r3,zero,8008e598 <_fputwc_r+0x20>
8008e584:	30c01917 	ldw	r3,100(r6)
8008e588:	10880014 	ori	r2,r2,8192
8008e58c:	3080030d 	sth	r2,12(r6)
8008e590:	18880014 	ori	r2,r3,8192
8008e594:	30801915 	stw	r2,100(r6)
8008e598:	008e4141 	jmpi	8008e414 <__fputwc>

8008e59c <fputwc>:
8008e59c:	00a002b4 	movhi	r2,32778
8008e5a0:	defffc04 	addi	sp,sp,-16
8008e5a4:	10a31204 	addi	r2,r2,-29624
8008e5a8:	dc000115 	stw	r16,4(sp)
8008e5ac:	14000017 	ldw	r16,0(r2)
8008e5b0:	dc400215 	stw	r17,8(sp)
8008e5b4:	dfc00315 	stw	ra,12(sp)
8008e5b8:	2023883a 	mov	r17,r4
8008e5bc:	80000226 	beq	r16,zero,8008e5c8 <fputwc+0x2c>
8008e5c0:	80800e17 	ldw	r2,56(r16)
8008e5c4:	10001026 	beq	r2,zero,8008e608 <fputwc+0x6c>
8008e5c8:	2880030b 	ldhu	r2,12(r5)
8008e5cc:	10c8000c 	andi	r3,r2,8192
8008e5d0:	1800051e 	bne	r3,zero,8008e5e8 <fputwc+0x4c>
8008e5d4:	28c01917 	ldw	r3,100(r5)
8008e5d8:	10880014 	ori	r2,r2,8192
8008e5dc:	2880030d 	sth	r2,12(r5)
8008e5e0:	18880014 	ori	r2,r3,8192
8008e5e4:	28801915 	stw	r2,100(r5)
8008e5e8:	280d883a 	mov	r6,r5
8008e5ec:	8009883a 	mov	r4,r16
8008e5f0:	880b883a 	mov	r5,r17
8008e5f4:	dfc00317 	ldw	ra,12(sp)
8008e5f8:	dc400217 	ldw	r17,8(sp)
8008e5fc:	dc000117 	ldw	r16,4(sp)
8008e600:	dec00404 	addi	sp,sp,16
8008e604:	008e4141 	jmpi	8008e414 <__fputwc>
8008e608:	8009883a 	mov	r4,r16
8008e60c:	d9400015 	stw	r5,0(sp)
8008e610:	00882f80 	call	800882f8 <__sinit>
8008e614:	d9400017 	ldw	r5,0(sp)
8008e618:	003feb06 	br	8008e5c8 <fputwc+0x2c>

8008e61c <_fstat_r>:
8008e61c:	defffd04 	addi	sp,sp,-12
8008e620:	2805883a 	mov	r2,r5
8008e624:	dc000015 	stw	r16,0(sp)
8008e628:	042002b4 	movhi	r16,32778
8008e62c:	dc400115 	stw	r17,4(sp)
8008e630:	842a8904 	addi	r16,r16,-21980
8008e634:	2023883a 	mov	r17,r4
8008e638:	300b883a 	mov	r5,r6
8008e63c:	1009883a 	mov	r4,r2
8008e640:	dfc00215 	stw	ra,8(sp)
8008e644:	80000015 	stw	zero,0(r16)
8008e648:	009160c0 	call	8009160c <fstat>
8008e64c:	00ffffc4 	movi	r3,-1
8008e650:	10c00526 	beq	r2,r3,8008e668 <_fstat_r+0x4c>
8008e654:	dfc00217 	ldw	ra,8(sp)
8008e658:	dc400117 	ldw	r17,4(sp)
8008e65c:	dc000017 	ldw	r16,0(sp)
8008e660:	dec00304 	addi	sp,sp,12
8008e664:	f800283a 	ret
8008e668:	80c00017 	ldw	r3,0(r16)
8008e66c:	183ff926 	beq	r3,zero,8008e654 <_fstat_r+0x38>
8008e670:	88c00015 	stw	r3,0(r17)
8008e674:	003ff706 	br	8008e654 <_fstat_r+0x38>

8008e678 <_isatty_r>:
8008e678:	defffd04 	addi	sp,sp,-12
8008e67c:	dc000015 	stw	r16,0(sp)
8008e680:	042002b4 	movhi	r16,32778
8008e684:	dc400115 	stw	r17,4(sp)
8008e688:	842a8904 	addi	r16,r16,-21980
8008e68c:	2023883a 	mov	r17,r4
8008e690:	2809883a 	mov	r4,r5
8008e694:	dfc00215 	stw	ra,8(sp)
8008e698:	80000015 	stw	zero,0(r16)
8008e69c:	00916f80 	call	800916f8 <isatty>
8008e6a0:	00ffffc4 	movi	r3,-1
8008e6a4:	10c00526 	beq	r2,r3,8008e6bc <_isatty_r+0x44>
8008e6a8:	dfc00217 	ldw	ra,8(sp)
8008e6ac:	dc400117 	ldw	r17,4(sp)
8008e6b0:	dc000017 	ldw	r16,0(sp)
8008e6b4:	dec00304 	addi	sp,sp,12
8008e6b8:	f800283a 	ret
8008e6bc:	80c00017 	ldw	r3,0(r16)
8008e6c0:	183ff926 	beq	r3,zero,8008e6a8 <_isatty_r+0x30>
8008e6c4:	88c00015 	stw	r3,0(r17)
8008e6c8:	003ff706 	br	8008e6a8 <_isatty_r+0x30>

8008e6cc <_lseek_r>:
8008e6cc:	defffd04 	addi	sp,sp,-12
8008e6d0:	2805883a 	mov	r2,r5
8008e6d4:	dc000015 	stw	r16,0(sp)
8008e6d8:	042002b4 	movhi	r16,32778
8008e6dc:	dc400115 	stw	r17,4(sp)
8008e6e0:	300b883a 	mov	r5,r6
8008e6e4:	842a8904 	addi	r16,r16,-21980
8008e6e8:	2023883a 	mov	r17,r4
8008e6ec:	380d883a 	mov	r6,r7
8008e6f0:	1009883a 	mov	r4,r2
8008e6f4:	dfc00215 	stw	ra,8(sp)
8008e6f8:	80000015 	stw	zero,0(r16)
8008e6fc:	00918c40 	call	800918c4 <lseek>
8008e700:	00ffffc4 	movi	r3,-1
8008e704:	10c00526 	beq	r2,r3,8008e71c <_lseek_r+0x50>
8008e708:	dfc00217 	ldw	ra,8(sp)
8008e70c:	dc400117 	ldw	r17,4(sp)
8008e710:	dc000017 	ldw	r16,0(sp)
8008e714:	dec00304 	addi	sp,sp,12
8008e718:	f800283a 	ret
8008e71c:	80c00017 	ldw	r3,0(r16)
8008e720:	183ff926 	beq	r3,zero,8008e708 <_lseek_r+0x3c>
8008e724:	88c00015 	stw	r3,0(r17)
8008e728:	003ff706 	br	8008e708 <_lseek_r+0x3c>

8008e72c <_read_r>:
8008e72c:	defffd04 	addi	sp,sp,-12
8008e730:	2805883a 	mov	r2,r5
8008e734:	dc000015 	stw	r16,0(sp)
8008e738:	042002b4 	movhi	r16,32778
8008e73c:	dc400115 	stw	r17,4(sp)
8008e740:	300b883a 	mov	r5,r6
8008e744:	842a8904 	addi	r16,r16,-21980
8008e748:	2023883a 	mov	r17,r4
8008e74c:	380d883a 	mov	r6,r7
8008e750:	1009883a 	mov	r4,r2
8008e754:	dfc00215 	stw	ra,8(sp)
8008e758:	80000015 	stw	zero,0(r16)
8008e75c:	0091a980 	call	80091a98 <read>
8008e760:	00ffffc4 	movi	r3,-1
8008e764:	10c00526 	beq	r2,r3,8008e77c <_read_r+0x50>
8008e768:	dfc00217 	ldw	ra,8(sp)
8008e76c:	dc400117 	ldw	r17,4(sp)
8008e770:	dc000017 	ldw	r16,0(sp)
8008e774:	dec00304 	addi	sp,sp,12
8008e778:	f800283a 	ret
8008e77c:	80c00017 	ldw	r3,0(r16)
8008e780:	183ff926 	beq	r3,zero,8008e768 <_read_r+0x3c>
8008e784:	88c00015 	stw	r3,0(r17)
8008e788:	003ff706 	br	8008e768 <_read_r+0x3c>

8008e78c <__swbuf_r>:
8008e78c:	defffb04 	addi	sp,sp,-20
8008e790:	dcc00315 	stw	r19,12(sp)
8008e794:	dc800215 	stw	r18,8(sp)
8008e798:	dc000015 	stw	r16,0(sp)
8008e79c:	dfc00415 	stw	ra,16(sp)
8008e7a0:	dc400115 	stw	r17,4(sp)
8008e7a4:	2025883a 	mov	r18,r4
8008e7a8:	2827883a 	mov	r19,r5
8008e7ac:	3021883a 	mov	r16,r6
8008e7b0:	20000226 	beq	r4,zero,8008e7bc <__swbuf_r+0x30>
8008e7b4:	20800e17 	ldw	r2,56(r4)
8008e7b8:	10004226 	beq	r2,zero,8008e8c4 <__swbuf_r+0x138>
8008e7bc:	80800617 	ldw	r2,24(r16)
8008e7c0:	8100030b 	ldhu	r4,12(r16)
8008e7c4:	80800215 	stw	r2,8(r16)
8008e7c8:	2080020c 	andi	r2,r4,8
8008e7cc:	10003626 	beq	r2,zero,8008e8a8 <__swbuf_r+0x11c>
8008e7d0:	80c00417 	ldw	r3,16(r16)
8008e7d4:	18003426 	beq	r3,zero,8008e8a8 <__swbuf_r+0x11c>
8008e7d8:	2088000c 	andi	r2,r4,8192
8008e7dc:	9c403fcc 	andi	r17,r19,255
8008e7e0:	10001a26 	beq	r2,zero,8008e84c <__swbuf_r+0xc0>
8008e7e4:	80800017 	ldw	r2,0(r16)
8008e7e8:	81000517 	ldw	r4,20(r16)
8008e7ec:	10c7c83a 	sub	r3,r2,r3
8008e7f0:	1900200e 	bge	r3,r4,8008e874 <__swbuf_r+0xe8>
8008e7f4:	18c00044 	addi	r3,r3,1
8008e7f8:	81000217 	ldw	r4,8(r16)
8008e7fc:	11400044 	addi	r5,r2,1
8008e800:	81400015 	stw	r5,0(r16)
8008e804:	213fffc4 	addi	r4,r4,-1
8008e808:	81000215 	stw	r4,8(r16)
8008e80c:	14c00005 	stb	r19,0(r2)
8008e810:	80800517 	ldw	r2,20(r16)
8008e814:	10c01e26 	beq	r2,r3,8008e890 <__swbuf_r+0x104>
8008e818:	8080030b 	ldhu	r2,12(r16)
8008e81c:	1080004c 	andi	r2,r2,1
8008e820:	10000226 	beq	r2,zero,8008e82c <__swbuf_r+0xa0>
8008e824:	00800284 	movi	r2,10
8008e828:	88801926 	beq	r17,r2,8008e890 <__swbuf_r+0x104>
8008e82c:	8805883a 	mov	r2,r17
8008e830:	dfc00417 	ldw	ra,16(sp)
8008e834:	dcc00317 	ldw	r19,12(sp)
8008e838:	dc800217 	ldw	r18,8(sp)
8008e83c:	dc400117 	ldw	r17,4(sp)
8008e840:	dc000017 	ldw	r16,0(sp)
8008e844:	dec00504 	addi	sp,sp,20
8008e848:	f800283a 	ret
8008e84c:	81401917 	ldw	r5,100(r16)
8008e850:	00b7ffc4 	movi	r2,-8193
8008e854:	21080014 	ori	r4,r4,8192
8008e858:	2884703a 	and	r2,r5,r2
8008e85c:	80801915 	stw	r2,100(r16)
8008e860:	80800017 	ldw	r2,0(r16)
8008e864:	8100030d 	sth	r4,12(r16)
8008e868:	81000517 	ldw	r4,20(r16)
8008e86c:	10c7c83a 	sub	r3,r2,r3
8008e870:	193fe016 	blt	r3,r4,8008e7f4 <__swbuf_r+0x68>
8008e874:	800b883a 	mov	r5,r16
8008e878:	9009883a 	mov	r4,r18
8008e87c:	0087f1c0 	call	80087f1c <_fflush_r>
8008e880:	1000071e 	bne	r2,zero,8008e8a0 <__swbuf_r+0x114>
8008e884:	80800017 	ldw	r2,0(r16)
8008e888:	00c00044 	movi	r3,1
8008e88c:	003fda06 	br	8008e7f8 <__swbuf_r+0x6c>
8008e890:	800b883a 	mov	r5,r16
8008e894:	9009883a 	mov	r4,r18
8008e898:	0087f1c0 	call	80087f1c <_fflush_r>
8008e89c:	103fe326 	beq	r2,zero,8008e82c <__swbuf_r+0xa0>
8008e8a0:	00bfffc4 	movi	r2,-1
8008e8a4:	003fe206 	br	8008e830 <__swbuf_r+0xa4>
8008e8a8:	800b883a 	mov	r5,r16
8008e8ac:	9009883a 	mov	r4,r18
8008e8b0:	00863240 	call	80086324 <__swsetup_r>
8008e8b4:	103ffa1e 	bne	r2,zero,8008e8a0 <__swbuf_r+0x114>
8008e8b8:	8100030b 	ldhu	r4,12(r16)
8008e8bc:	80c00417 	ldw	r3,16(r16)
8008e8c0:	003fc506 	br	8008e7d8 <__swbuf_r+0x4c>
8008e8c4:	00882f80 	call	800882f8 <__sinit>
8008e8c8:	003fbc06 	br	8008e7bc <__swbuf_r+0x30>

8008e8cc <__swbuf>:
8008e8cc:	00a002b4 	movhi	r2,32778
8008e8d0:	10a31204 	addi	r2,r2,-29624
8008e8d4:	280d883a 	mov	r6,r5
8008e8d8:	200b883a 	mov	r5,r4
8008e8dc:	11000017 	ldw	r4,0(r2)
8008e8e0:	008e78c1 	jmpi	8008e78c <__swbuf_r>

8008e8e4 <_wcrtomb_r>:
8008e8e4:	defff604 	addi	sp,sp,-40
8008e8e8:	00a002b4 	movhi	r2,32778
8008e8ec:	dc800815 	stw	r18,32(sp)
8008e8f0:	dc400715 	stw	r17,28(sp)
8008e8f4:	dc000615 	stw	r16,24(sp)
8008e8f8:	10a31604 	addi	r2,r2,-29608
8008e8fc:	dfc00915 	stw	ra,36(sp)
8008e900:	2021883a 	mov	r16,r4
8008e904:	3823883a 	mov	r17,r7
8008e908:	14800017 	ldw	r18,0(r2)
8008e90c:	28001426 	beq	r5,zero,8008e960 <_wcrtomb_r+0x7c>
8008e910:	d9400415 	stw	r5,16(sp)
8008e914:	d9800515 	stw	r6,20(sp)
8008e918:	0088e3c0 	call	80088e3c <__locale_charset>
8008e91c:	d9800517 	ldw	r6,20(sp)
8008e920:	d9400417 	ldw	r5,16(sp)
8008e924:	100f883a 	mov	r7,r2
8008e928:	dc400015 	stw	r17,0(sp)
8008e92c:	8009883a 	mov	r4,r16
8008e930:	903ee83a 	callr	r18
8008e934:	00ffffc4 	movi	r3,-1
8008e938:	10c0031e 	bne	r2,r3,8008e948 <_wcrtomb_r+0x64>
8008e93c:	88000015 	stw	zero,0(r17)
8008e940:	00c02284 	movi	r3,138
8008e944:	80c00015 	stw	r3,0(r16)
8008e948:	dfc00917 	ldw	ra,36(sp)
8008e94c:	dc800817 	ldw	r18,32(sp)
8008e950:	dc400717 	ldw	r17,28(sp)
8008e954:	dc000617 	ldw	r16,24(sp)
8008e958:	dec00a04 	addi	sp,sp,40
8008e95c:	f800283a 	ret
8008e960:	0088e3c0 	call	80088e3c <__locale_charset>
8008e964:	100f883a 	mov	r7,r2
8008e968:	dc400015 	stw	r17,0(sp)
8008e96c:	000d883a 	mov	r6,zero
8008e970:	d9400104 	addi	r5,sp,4
8008e974:	8009883a 	mov	r4,r16
8008e978:	903ee83a 	callr	r18
8008e97c:	003fed06 	br	8008e934 <_wcrtomb_r+0x50>

8008e980 <wcrtomb>:
8008e980:	defff604 	addi	sp,sp,-40
8008e984:	00a002b4 	movhi	r2,32778
8008e988:	dc800615 	stw	r18,24(sp)
8008e98c:	dc400515 	stw	r17,20(sp)
8008e990:	10a31204 	addi	r2,r2,-29624
8008e994:	dfc00915 	stw	ra,36(sp)
8008e998:	dd000815 	stw	r20,32(sp)
8008e99c:	dcc00715 	stw	r19,28(sp)
8008e9a0:	dc000415 	stw	r16,16(sp)
8008e9a4:	3025883a 	mov	r18,r6
8008e9a8:	14400017 	ldw	r17,0(r2)
8008e9ac:	20001926 	beq	r4,zero,8008ea14 <wcrtomb+0x94>
8008e9b0:	00a002b4 	movhi	r2,32778
8008e9b4:	10a31604 	addi	r2,r2,-29608
8008e9b8:	15000017 	ldw	r20,0(r2)
8008e9bc:	2021883a 	mov	r16,r4
8008e9c0:	2827883a 	mov	r19,r5
8008e9c4:	0088e3c0 	call	80088e3c <__locale_charset>
8008e9c8:	100f883a 	mov	r7,r2
8008e9cc:	dc800015 	stw	r18,0(sp)
8008e9d0:	980d883a 	mov	r6,r19
8008e9d4:	800b883a 	mov	r5,r16
8008e9d8:	8809883a 	mov	r4,r17
8008e9dc:	a03ee83a 	callr	r20
8008e9e0:	00ffffc4 	movi	r3,-1
8008e9e4:	10c0031e 	bne	r2,r3,8008e9f4 <wcrtomb+0x74>
8008e9e8:	90000015 	stw	zero,0(r18)
8008e9ec:	00c02284 	movi	r3,138
8008e9f0:	88c00015 	stw	r3,0(r17)
8008e9f4:	dfc00917 	ldw	ra,36(sp)
8008e9f8:	dd000817 	ldw	r20,32(sp)
8008e9fc:	dcc00717 	ldw	r19,28(sp)
8008ea00:	dc800617 	ldw	r18,24(sp)
8008ea04:	dc400517 	ldw	r17,20(sp)
8008ea08:	dc000417 	ldw	r16,16(sp)
8008ea0c:	dec00a04 	addi	sp,sp,40
8008ea10:	f800283a 	ret
8008ea14:	00a002b4 	movhi	r2,32778
8008ea18:	10a31604 	addi	r2,r2,-29608
8008ea1c:	14000017 	ldw	r16,0(r2)
8008ea20:	0088e3c0 	call	80088e3c <__locale_charset>
8008ea24:	100f883a 	mov	r7,r2
8008ea28:	dc800015 	stw	r18,0(sp)
8008ea2c:	000d883a 	mov	r6,zero
8008ea30:	d9400104 	addi	r5,sp,4
8008ea34:	8809883a 	mov	r4,r17
8008ea38:	803ee83a 	callr	r16
8008ea3c:	003fe806 	br	8008e9e0 <wcrtomb+0x60>

8008ea40 <__ascii_wctomb>:
8008ea40:	28000526 	beq	r5,zero,8008ea58 <__ascii_wctomb+0x18>
8008ea44:	00803fc4 	movi	r2,255
8008ea48:	11800536 	bltu	r2,r6,8008ea60 <__ascii_wctomb+0x20>
8008ea4c:	29800005 	stb	r6,0(r5)
8008ea50:	00800044 	movi	r2,1
8008ea54:	f800283a 	ret
8008ea58:	0005883a 	mov	r2,zero
8008ea5c:	f800283a 	ret
8008ea60:	00802284 	movi	r2,138
8008ea64:	20800015 	stw	r2,0(r4)
8008ea68:	00bfffc4 	movi	r2,-1
8008ea6c:	f800283a 	ret

8008ea70 <_wctomb_r>:
8008ea70:	00a002b4 	movhi	r2,32778
8008ea74:	defff904 	addi	sp,sp,-28
8008ea78:	10a31604 	addi	r2,r2,-29608
8008ea7c:	dfc00615 	stw	ra,24(sp)
8008ea80:	dc400515 	stw	r17,20(sp)
8008ea84:	dc000415 	stw	r16,16(sp)
8008ea88:	3823883a 	mov	r17,r7
8008ea8c:	14000017 	ldw	r16,0(r2)
8008ea90:	d9000115 	stw	r4,4(sp)
8008ea94:	d9400215 	stw	r5,8(sp)
8008ea98:	d9800315 	stw	r6,12(sp)
8008ea9c:	0088e3c0 	call	80088e3c <__locale_charset>
8008eaa0:	d9800317 	ldw	r6,12(sp)
8008eaa4:	d9400217 	ldw	r5,8(sp)
8008eaa8:	d9000117 	ldw	r4,4(sp)
8008eaac:	100f883a 	mov	r7,r2
8008eab0:	dc400015 	stw	r17,0(sp)
8008eab4:	803ee83a 	callr	r16
8008eab8:	dfc00617 	ldw	ra,24(sp)
8008eabc:	dc400517 	ldw	r17,20(sp)
8008eac0:	dc000417 	ldw	r16,16(sp)
8008eac4:	dec00704 	addi	sp,sp,28
8008eac8:	f800283a 	ret

8008eacc <__udivdi3>:
8008eacc:	defff504 	addi	sp,sp,-44
8008ead0:	dcc00415 	stw	r19,16(sp)
8008ead4:	dc000115 	stw	r16,4(sp)
8008ead8:	dfc00a15 	stw	ra,40(sp)
8008eadc:	df000915 	stw	fp,36(sp)
8008eae0:	ddc00815 	stw	r23,32(sp)
8008eae4:	dd800715 	stw	r22,28(sp)
8008eae8:	dd400615 	stw	r21,24(sp)
8008eaec:	dd000515 	stw	r20,20(sp)
8008eaf0:	dc800315 	stw	r18,12(sp)
8008eaf4:	dc400215 	stw	r17,8(sp)
8008eaf8:	2027883a 	mov	r19,r4
8008eafc:	2821883a 	mov	r16,r5
8008eb00:	3800411e 	bne	r7,zero,8008ec08 <__udivdi3+0x13c>
8008eb04:	3023883a 	mov	r17,r6
8008eb08:	2025883a 	mov	r18,r4
8008eb0c:	2980522e 	bgeu	r5,r6,8008ec58 <__udivdi3+0x18c>
8008eb10:	00bfffd4 	movui	r2,65535
8008eb14:	282d883a 	mov	r22,r5
8008eb18:	1180a836 	bltu	r2,r6,8008edbc <__udivdi3+0x2f0>
8008eb1c:	00803fc4 	movi	r2,255
8008eb20:	1185803a 	cmpltu	r2,r2,r6
8008eb24:	100490fa 	slli	r2,r2,3
8008eb28:	3086d83a 	srl	r3,r6,r2
8008eb2c:	01200274 	movhi	r4,32777
8008eb30:	211a3fc4 	addi	r4,r4,26879
8008eb34:	20c7883a 	add	r3,r4,r3
8008eb38:	18c00003 	ldbu	r3,0(r3)
8008eb3c:	1885883a 	add	r2,r3,r2
8008eb40:	00c00804 	movi	r3,32
8008eb44:	1887c83a 	sub	r3,r3,r2
8008eb48:	18000526 	beq	r3,zero,8008eb60 <__udivdi3+0x94>
8008eb4c:	80e0983a 	sll	r16,r16,r3
8008eb50:	9884d83a 	srl	r2,r19,r2
8008eb54:	30e2983a 	sll	r17,r6,r3
8008eb58:	98e4983a 	sll	r18,r19,r3
8008eb5c:	142cb03a 	or	r22,r2,r16
8008eb60:	882ad43a 	srli	r21,r17,16
8008eb64:	b009883a 	mov	r4,r22
8008eb68:	8d3fffcc 	andi	r20,r17,65535
8008eb6c:	a80b883a 	mov	r5,r21
8008eb70:	008f6d80 	call	8008f6d8 <__umodsi3>
8008eb74:	b009883a 	mov	r4,r22
8008eb78:	a80b883a 	mov	r5,r21
8008eb7c:	1027883a 	mov	r19,r2
8008eb80:	008f6740 	call	8008f674 <__udivsi3>
8008eb84:	102d883a 	mov	r22,r2
8008eb88:	9826943a 	slli	r19,r19,16
8008eb8c:	9004d43a 	srli	r2,r18,16
8008eb90:	a5a1383a 	mul	r16,r20,r22
8008eb94:	14c4b03a 	or	r2,r2,r19
8008eb98:	1400052e 	bgeu	r2,r16,8008ebb0 <__udivdi3+0xe4>
8008eb9c:	1445883a 	add	r2,r2,r17
8008eba0:	b0ffffc4 	addi	r3,r22,-1
8008eba4:	14400136 	bltu	r2,r17,8008ebac <__udivdi3+0xe0>
8008eba8:	14012336 	bltu	r2,r16,8008f038 <__udivdi3+0x56c>
8008ebac:	182d883a 	mov	r22,r3
8008ebb0:	1421c83a 	sub	r16,r2,r16
8008ebb4:	a80b883a 	mov	r5,r21
8008ebb8:	8009883a 	mov	r4,r16
8008ebbc:	008f6d80 	call	8008f6d8 <__umodsi3>
8008ebc0:	1027883a 	mov	r19,r2
8008ebc4:	a80b883a 	mov	r5,r21
8008ebc8:	8009883a 	mov	r4,r16
8008ebcc:	008f6740 	call	8008f674 <__udivsi3>
8008ebd0:	9826943a 	slli	r19,r19,16
8008ebd4:	a0a9383a 	mul	r20,r20,r2
8008ebd8:	94bfffcc 	andi	r18,r18,65535
8008ebdc:	94e4b03a 	or	r18,r18,r19
8008ebe0:	9500052e 	bgeu	r18,r20,8008ebf8 <__udivdi3+0x12c>
8008ebe4:	8ca5883a 	add	r18,r17,r18
8008ebe8:	10ffffc4 	addi	r3,r2,-1
8008ebec:	9440f136 	bltu	r18,r17,8008efb4 <__udivdi3+0x4e8>
8008ebf0:	9500f02e 	bgeu	r18,r20,8008efb4 <__udivdi3+0x4e8>
8008ebf4:	10bfff84 	addi	r2,r2,-2
8008ebf8:	b00c943a 	slli	r6,r22,16
8008ebfc:	0007883a 	mov	r3,zero
8008ec00:	3084b03a 	or	r2,r6,r2
8008ec04:	00005906 	br	8008ed6c <__udivdi3+0x2a0>
8008ec08:	29c05636 	bltu	r5,r7,8008ed64 <__udivdi3+0x298>
8008ec0c:	00bfffd4 	movui	r2,65535
8008ec10:	11c0622e 	bgeu	r2,r7,8008ed9c <__udivdi3+0x2d0>
8008ec14:	00804034 	movhi	r2,256
8008ec18:	10bfffc4 	addi	r2,r2,-1
8008ec1c:	11c0ee36 	bltu	r2,r7,8008efd8 <__udivdi3+0x50c>
8008ec20:	00800404 	movi	r2,16
8008ec24:	3886d83a 	srl	r3,r7,r2
8008ec28:	01200274 	movhi	r4,32777
8008ec2c:	211a3fc4 	addi	r4,r4,26879
8008ec30:	20c7883a 	add	r3,r4,r3
8008ec34:	18c00003 	ldbu	r3,0(r3)
8008ec38:	05400804 	movi	r21,32
8008ec3c:	1885883a 	add	r2,r3,r2
8008ec40:	a8abc83a 	sub	r21,r21,r2
8008ec44:	a800621e 	bne	r21,zero,8008edd0 <__udivdi3+0x304>
8008ec48:	3c00e936 	bltu	r7,r16,8008eff0 <__udivdi3+0x524>
8008ec4c:	9985403a 	cmpgeu	r2,r19,r6
8008ec50:	0007883a 	mov	r3,zero
8008ec54:	00004506 	br	8008ed6c <__udivdi3+0x2a0>
8008ec58:	3000041e 	bne	r6,zero,8008ec6c <__udivdi3+0x1a0>
8008ec5c:	000b883a 	mov	r5,zero
8008ec60:	01000044 	movi	r4,1
8008ec64:	008f6740 	call	8008f674 <__udivsi3>
8008ec68:	1023883a 	mov	r17,r2
8008ec6c:	00bfffd4 	movui	r2,65535
8008ec70:	14404e2e 	bgeu	r2,r17,8008edac <__udivdi3+0x2e0>
8008ec74:	00804034 	movhi	r2,256
8008ec78:	10bfffc4 	addi	r2,r2,-1
8008ec7c:	1440d836 	bltu	r2,r17,8008efe0 <__udivdi3+0x514>
8008ec80:	00800404 	movi	r2,16
8008ec84:	8886d83a 	srl	r3,r17,r2
8008ec88:	01200274 	movhi	r4,32777
8008ec8c:	211a3fc4 	addi	r4,r4,26879
8008ec90:	20c7883a 	add	r3,r4,r3
8008ec94:	18c00003 	ldbu	r3,0(r3)
8008ec98:	1885883a 	add	r2,r3,r2
8008ec9c:	00c00804 	movi	r3,32
8008eca0:	1887c83a 	sub	r3,r3,r2
8008eca4:	18008f1e 	bne	r3,zero,8008eee4 <__udivdi3+0x418>
8008eca8:	882ad43a 	srli	r21,r17,16
8008ecac:	8461c83a 	sub	r16,r16,r17
8008ecb0:	8d3fffcc 	andi	r20,r17,65535
8008ecb4:	00c00044 	movi	r3,1
8008ecb8:	8009883a 	mov	r4,r16
8008ecbc:	a80b883a 	mov	r5,r21
8008ecc0:	d8c00015 	stw	r3,0(sp)
8008ecc4:	008f6d80 	call	8008f6d8 <__umodsi3>
8008ecc8:	8009883a 	mov	r4,r16
8008eccc:	a80b883a 	mov	r5,r21
8008ecd0:	1027883a 	mov	r19,r2
8008ecd4:	008f6740 	call	8008f674 <__udivsi3>
8008ecd8:	9826943a 	slli	r19,r19,16
8008ecdc:	9008d43a 	srli	r4,r18,16
8008ece0:	1521383a 	mul	r16,r2,r20
8008ece4:	102d883a 	mov	r22,r2
8008ece8:	24c8b03a 	or	r4,r4,r19
8008ecec:	d8c00017 	ldw	r3,0(sp)
8008ecf0:	2400052e 	bgeu	r4,r16,8008ed08 <__udivdi3+0x23c>
8008ecf4:	2449883a 	add	r4,r4,r17
8008ecf8:	b0bfffc4 	addi	r2,r22,-1
8008ecfc:	24400136 	bltu	r4,r17,8008ed04 <__udivdi3+0x238>
8008ed00:	2400ca36 	bltu	r4,r16,8008f02c <__udivdi3+0x560>
8008ed04:	102d883a 	mov	r22,r2
8008ed08:	2421c83a 	sub	r16,r4,r16
8008ed0c:	a80b883a 	mov	r5,r21
8008ed10:	8009883a 	mov	r4,r16
8008ed14:	d8c00015 	stw	r3,0(sp)
8008ed18:	008f6d80 	call	8008f6d8 <__umodsi3>
8008ed1c:	1027883a 	mov	r19,r2
8008ed20:	a80b883a 	mov	r5,r21
8008ed24:	8009883a 	mov	r4,r16
8008ed28:	008f6740 	call	8008f674 <__udivsi3>
8008ed2c:	9826943a 	slli	r19,r19,16
8008ed30:	1529383a 	mul	r20,r2,r20
8008ed34:	94bfffcc 	andi	r18,r18,65535
8008ed38:	94e4b03a 	or	r18,r18,r19
8008ed3c:	d8c00017 	ldw	r3,0(sp)
8008ed40:	9500052e 	bgeu	r18,r20,8008ed58 <__udivdi3+0x28c>
8008ed44:	8ca5883a 	add	r18,r17,r18
8008ed48:	113fffc4 	addi	r4,r2,-1
8008ed4c:	94409736 	bltu	r18,r17,8008efac <__udivdi3+0x4e0>
8008ed50:	9500962e 	bgeu	r18,r20,8008efac <__udivdi3+0x4e0>
8008ed54:	10bfff84 	addi	r2,r2,-2
8008ed58:	b00c943a 	slli	r6,r22,16
8008ed5c:	3084b03a 	or	r2,r6,r2
8008ed60:	00000206 	br	8008ed6c <__udivdi3+0x2a0>
8008ed64:	0007883a 	mov	r3,zero
8008ed68:	0005883a 	mov	r2,zero
8008ed6c:	dfc00a17 	ldw	ra,40(sp)
8008ed70:	df000917 	ldw	fp,36(sp)
8008ed74:	ddc00817 	ldw	r23,32(sp)
8008ed78:	dd800717 	ldw	r22,28(sp)
8008ed7c:	dd400617 	ldw	r21,24(sp)
8008ed80:	dd000517 	ldw	r20,20(sp)
8008ed84:	dcc00417 	ldw	r19,16(sp)
8008ed88:	dc800317 	ldw	r18,12(sp)
8008ed8c:	dc400217 	ldw	r17,8(sp)
8008ed90:	dc000117 	ldw	r16,4(sp)
8008ed94:	dec00b04 	addi	sp,sp,44
8008ed98:	f800283a 	ret
8008ed9c:	00803fc4 	movi	r2,255
8008eda0:	11c5803a 	cmpltu	r2,r2,r7
8008eda4:	100490fa 	slli	r2,r2,3
8008eda8:	003f9e06 	br	8008ec24 <__udivdi3+0x158>
8008edac:	00803fc4 	movi	r2,255
8008edb0:	1445803a 	cmpltu	r2,r2,r17
8008edb4:	100490fa 	slli	r2,r2,3
8008edb8:	003fb206 	br	8008ec84 <__udivdi3+0x1b8>
8008edbc:	00804034 	movhi	r2,256
8008edc0:	10bfffc4 	addi	r2,r2,-1
8008edc4:	11808836 	bltu	r2,r6,8008efe8 <__udivdi3+0x51c>
8008edc8:	00800404 	movi	r2,16
8008edcc:	003f5606 	br	8008eb28 <__udivdi3+0x5c>
8008edd0:	30aed83a 	srl	r23,r6,r2
8008edd4:	3d4e983a 	sll	r7,r7,r21
8008edd8:	80acd83a 	srl	r22,r16,r2
8008eddc:	9884d83a 	srl	r2,r19,r2
8008ede0:	3deeb03a 	or	r23,r7,r23
8008ede4:	b824d43a 	srli	r18,r23,16
8008ede8:	8560983a 	sll	r16,r16,r21
8008edec:	b009883a 	mov	r4,r22
8008edf0:	900b883a 	mov	r5,r18
8008edf4:	3568983a 	sll	r20,r6,r21
8008edf8:	1420b03a 	or	r16,r2,r16
8008edfc:	008f6d80 	call	8008f6d8 <__umodsi3>
8008ee00:	b009883a 	mov	r4,r22
8008ee04:	900b883a 	mov	r5,r18
8008ee08:	1023883a 	mov	r17,r2
8008ee0c:	008f6740 	call	8008f674 <__udivsi3>
8008ee10:	8808943a 	slli	r4,r17,16
8008ee14:	bf3fffcc 	andi	fp,r23,65535
8008ee18:	8006d43a 	srli	r3,r16,16
8008ee1c:	e0a3383a 	mul	r17,fp,r2
8008ee20:	100d883a 	mov	r6,r2
8008ee24:	1906b03a 	or	r3,r3,r4
8008ee28:	1c40042e 	bgeu	r3,r17,8008ee3c <__udivdi3+0x370>
8008ee2c:	1dc7883a 	add	r3,r3,r23
8008ee30:	10bfffc4 	addi	r2,r2,-1
8008ee34:	1dc0752e 	bgeu	r3,r23,8008f00c <__udivdi3+0x540>
8008ee38:	100d883a 	mov	r6,r2
8008ee3c:	1c63c83a 	sub	r17,r3,r17
8008ee40:	900b883a 	mov	r5,r18
8008ee44:	8809883a 	mov	r4,r17
8008ee48:	d9800015 	stw	r6,0(sp)
8008ee4c:	008f6d80 	call	8008f6d8 <__umodsi3>
8008ee50:	102d883a 	mov	r22,r2
8008ee54:	8809883a 	mov	r4,r17
8008ee58:	900b883a 	mov	r5,r18
8008ee5c:	008f6740 	call	8008f674 <__udivsi3>
8008ee60:	b02c943a 	slli	r22,r22,16
8008ee64:	e089383a 	mul	r4,fp,r2
8008ee68:	843fffcc 	andi	r16,r16,65535
8008ee6c:	85a0b03a 	or	r16,r16,r22
8008ee70:	d9800017 	ldw	r6,0(sp)
8008ee74:	8100042e 	bgeu	r16,r4,8008ee88 <__udivdi3+0x3bc>
8008ee78:	85e1883a 	add	r16,r16,r23
8008ee7c:	10ffffc4 	addi	r3,r2,-1
8008ee80:	85c05e2e 	bgeu	r16,r23,8008effc <__udivdi3+0x530>
8008ee84:	1805883a 	mov	r2,r3
8008ee88:	300c943a 	slli	r6,r6,16
8008ee8c:	a17fffcc 	andi	r5,r20,65535
8008ee90:	a028d43a 	srli	r20,r20,16
8008ee94:	3084b03a 	or	r2,r6,r2
8008ee98:	10ffffcc 	andi	r3,r2,65535
8008ee9c:	100cd43a 	srli	r6,r2,16
8008eea0:	194f383a 	mul	r7,r3,r5
8008eea4:	1d07383a 	mul	r3,r3,r20
8008eea8:	314b383a 	mul	r5,r6,r5
8008eeac:	3810d43a 	srli	r8,r7,16
8008eeb0:	8121c83a 	sub	r16,r16,r4
8008eeb4:	1947883a 	add	r3,r3,r5
8008eeb8:	40c7883a 	add	r3,r8,r3
8008eebc:	350d383a 	mul	r6,r6,r20
8008eec0:	1940022e 	bgeu	r3,r5,8008eecc <__udivdi3+0x400>
8008eec4:	01000074 	movhi	r4,1
8008eec8:	310d883a 	add	r6,r6,r4
8008eecc:	1828d43a 	srli	r20,r3,16
8008eed0:	a18d883a 	add	r6,r20,r6
8008eed4:	81803e36 	bltu	r16,r6,8008efd0 <__udivdi3+0x504>
8008eed8:	81803826 	beq	r16,r6,8008efbc <__udivdi3+0x4f0>
8008eedc:	0007883a 	mov	r3,zero
8008eee0:	003fa206 	br	8008ed6c <__udivdi3+0x2a0>
8008eee4:	88e2983a 	sll	r17,r17,r3
8008eee8:	80a8d83a 	srl	r20,r16,r2
8008eeec:	80e0983a 	sll	r16,r16,r3
8008eef0:	882ad43a 	srli	r21,r17,16
8008eef4:	9884d83a 	srl	r2,r19,r2
8008eef8:	a009883a 	mov	r4,r20
8008eefc:	a80b883a 	mov	r5,r21
8008ef00:	142eb03a 	or	r23,r2,r16
8008ef04:	98e4983a 	sll	r18,r19,r3
8008ef08:	008f6d80 	call	8008f6d8 <__umodsi3>
8008ef0c:	a009883a 	mov	r4,r20
8008ef10:	a80b883a 	mov	r5,r21
8008ef14:	1021883a 	mov	r16,r2
8008ef18:	008f6740 	call	8008f674 <__udivsi3>
8008ef1c:	1039883a 	mov	fp,r2
8008ef20:	8d3fffcc 	andi	r20,r17,65535
8008ef24:	8020943a 	slli	r16,r16,16
8008ef28:	b804d43a 	srli	r2,r23,16
8008ef2c:	a72d383a 	mul	r22,r20,fp
8008ef30:	1404b03a 	or	r2,r2,r16
8008ef34:	1580062e 	bgeu	r2,r22,8008ef50 <__udivdi3+0x484>
8008ef38:	1445883a 	add	r2,r2,r17
8008ef3c:	e0ffffc4 	addi	r3,fp,-1
8008ef40:	14403836 	bltu	r2,r17,8008f024 <__udivdi3+0x558>
8008ef44:	1580372e 	bgeu	r2,r22,8008f024 <__udivdi3+0x558>
8008ef48:	e73fff84 	addi	fp,fp,-2
8008ef4c:	1445883a 	add	r2,r2,r17
8008ef50:	15adc83a 	sub	r22,r2,r22
8008ef54:	a80b883a 	mov	r5,r21
8008ef58:	b009883a 	mov	r4,r22
8008ef5c:	008f6d80 	call	8008f6d8 <__umodsi3>
8008ef60:	1027883a 	mov	r19,r2
8008ef64:	b009883a 	mov	r4,r22
8008ef68:	a80b883a 	mov	r5,r21
8008ef6c:	008f6740 	call	8008f674 <__udivsi3>
8008ef70:	9826943a 	slli	r19,r19,16
8008ef74:	a0a1383a 	mul	r16,r20,r2
8008ef78:	b93fffcc 	andi	r4,r23,65535
8008ef7c:	24c8b03a 	or	r4,r4,r19
8008ef80:	2400062e 	bgeu	r4,r16,8008ef9c <__udivdi3+0x4d0>
8008ef84:	2449883a 	add	r4,r4,r17
8008ef88:	10ffffc4 	addi	r3,r2,-1
8008ef8c:	24402336 	bltu	r4,r17,8008f01c <__udivdi3+0x550>
8008ef90:	2400222e 	bgeu	r4,r16,8008f01c <__udivdi3+0x550>
8008ef94:	10bfff84 	addi	r2,r2,-2
8008ef98:	2449883a 	add	r4,r4,r17
8008ef9c:	e038943a 	slli	fp,fp,16
8008efa0:	2421c83a 	sub	r16,r4,r16
8008efa4:	e086b03a 	or	r3,fp,r2
8008efa8:	003f4306 	br	8008ecb8 <__udivdi3+0x1ec>
8008efac:	2005883a 	mov	r2,r4
8008efb0:	003f6906 	br	8008ed58 <__udivdi3+0x28c>
8008efb4:	1805883a 	mov	r2,r3
8008efb8:	003f0f06 	br	8008ebf8 <__udivdi3+0x12c>
8008efbc:	1806943a 	slli	r3,r3,16
8008efc0:	9d66983a 	sll	r19,r19,r21
8008efc4:	39ffffcc 	andi	r7,r7,65535
8008efc8:	19c7883a 	add	r3,r3,r7
8008efcc:	98ffc32e 	bgeu	r19,r3,8008eedc <__udivdi3+0x410>
8008efd0:	10bfffc4 	addi	r2,r2,-1
8008efd4:	003fc106 	br	8008eedc <__udivdi3+0x410>
8008efd8:	00800604 	movi	r2,24
8008efdc:	003f1106 	br	8008ec24 <__udivdi3+0x158>
8008efe0:	00800604 	movi	r2,24
8008efe4:	003f2706 	br	8008ec84 <__udivdi3+0x1b8>
8008efe8:	00800604 	movi	r2,24
8008efec:	003ece06 	br	8008eb28 <__udivdi3+0x5c>
8008eff0:	0007883a 	mov	r3,zero
8008eff4:	00800044 	movi	r2,1
8008eff8:	003f5c06 	br	8008ed6c <__udivdi3+0x2a0>
8008effc:	813fa12e 	bgeu	r16,r4,8008ee84 <__udivdi3+0x3b8>
8008f000:	10bfff84 	addi	r2,r2,-2
8008f004:	85e1883a 	add	r16,r16,r23
8008f008:	003f9f06 	br	8008ee88 <__udivdi3+0x3bc>
8008f00c:	1c7f8a2e 	bgeu	r3,r17,8008ee38 <__udivdi3+0x36c>
8008f010:	31bfff84 	addi	r6,r6,-2
8008f014:	1dc7883a 	add	r3,r3,r23
8008f018:	003f8806 	br	8008ee3c <__udivdi3+0x370>
8008f01c:	1805883a 	mov	r2,r3
8008f020:	003fde06 	br	8008ef9c <__udivdi3+0x4d0>
8008f024:	1839883a 	mov	fp,r3
8008f028:	003fc906 	br	8008ef50 <__udivdi3+0x484>
8008f02c:	b5bfff84 	addi	r22,r22,-2
8008f030:	2449883a 	add	r4,r4,r17
8008f034:	003f3406 	br	8008ed08 <__udivdi3+0x23c>
8008f038:	b5bfff84 	addi	r22,r22,-2
8008f03c:	1445883a 	add	r2,r2,r17
8008f040:	003edb06 	br	8008ebb0 <__udivdi3+0xe4>

8008f044 <__umoddi3>:
8008f044:	defff404 	addi	sp,sp,-48
8008f048:	df000a15 	stw	fp,40(sp)
8008f04c:	dc400315 	stw	r17,12(sp)
8008f050:	dc000215 	stw	r16,8(sp)
8008f054:	dfc00b15 	stw	ra,44(sp)
8008f058:	ddc00915 	stw	r23,36(sp)
8008f05c:	dd800815 	stw	r22,32(sp)
8008f060:	dd400715 	stw	r21,28(sp)
8008f064:	dd000615 	stw	r20,24(sp)
8008f068:	dcc00515 	stw	r19,20(sp)
8008f06c:	dc800415 	stw	r18,16(sp)
8008f070:	2021883a 	mov	r16,r4
8008f074:	2823883a 	mov	r17,r5
8008f078:	2839883a 	mov	fp,r5
8008f07c:	38003c1e 	bne	r7,zero,8008f170 <__umoddi3+0x12c>
8008f080:	3027883a 	mov	r19,r6
8008f084:	2029883a 	mov	r20,r4
8008f088:	2980512e 	bgeu	r5,r6,8008f1d0 <__umoddi3+0x18c>
8008f08c:	00bfffd4 	movui	r2,65535
8008f090:	11809a36 	bltu	r2,r6,8008f2fc <__umoddi3+0x2b8>
8008f094:	01003fc4 	movi	r4,255
8008f098:	2189803a 	cmpltu	r4,r4,r6
8008f09c:	200890fa 	slli	r4,r4,3
8008f0a0:	3104d83a 	srl	r2,r6,r4
8008f0a4:	00e00274 	movhi	r3,32777
8008f0a8:	18da3fc4 	addi	r3,r3,26879
8008f0ac:	1885883a 	add	r2,r3,r2
8008f0b0:	10c00003 	ldbu	r3,0(r2)
8008f0b4:	00800804 	movi	r2,32
8008f0b8:	1909883a 	add	r4,r3,r4
8008f0bc:	1125c83a 	sub	r18,r2,r4
8008f0c0:	90000526 	beq	r18,zero,8008f0d8 <__umoddi3+0x94>
8008f0c4:	8ca2983a 	sll	r17,r17,r18
8008f0c8:	8108d83a 	srl	r4,r16,r4
8008f0cc:	34a6983a 	sll	r19,r6,r18
8008f0d0:	84a8983a 	sll	r20,r16,r18
8008f0d4:	2478b03a 	or	fp,r4,r17
8008f0d8:	982ed43a 	srli	r23,r19,16
8008f0dc:	e009883a 	mov	r4,fp
8008f0e0:	9dbfffcc 	andi	r22,r19,65535
8008f0e4:	b80b883a 	mov	r5,r23
8008f0e8:	008f6d80 	call	8008f6d8 <__umodsi3>
8008f0ec:	e009883a 	mov	r4,fp
8008f0f0:	b80b883a 	mov	r5,r23
8008f0f4:	102b883a 	mov	r21,r2
8008f0f8:	008f6740 	call	8008f674 <__udivsi3>
8008f0fc:	a806943a 	slli	r3,r21,16
8008f100:	a008d43a 	srli	r4,r20,16
8008f104:	b085383a 	mul	r2,r22,r2
8008f108:	20c8b03a 	or	r4,r4,r3
8008f10c:	2080032e 	bgeu	r4,r2,8008f11c <__umoddi3+0xd8>
8008f110:	24c9883a 	add	r4,r4,r19
8008f114:	24c00136 	bltu	r4,r19,8008f11c <__umoddi3+0xd8>
8008f118:	20811036 	bltu	r4,r2,8008f55c <__umoddi3+0x518>
8008f11c:	20abc83a 	sub	r21,r4,r2
8008f120:	b80b883a 	mov	r5,r23
8008f124:	a809883a 	mov	r4,r21
8008f128:	008f6d80 	call	8008f6d8 <__umodsi3>
8008f12c:	1023883a 	mov	r17,r2
8008f130:	b80b883a 	mov	r5,r23
8008f134:	a809883a 	mov	r4,r21
8008f138:	008f6740 	call	8008f674 <__udivsi3>
8008f13c:	8822943a 	slli	r17,r17,16
8008f140:	b085383a 	mul	r2,r22,r2
8008f144:	a0ffffcc 	andi	r3,r20,65535
8008f148:	1c46b03a 	or	r3,r3,r17
8008f14c:	1880042e 	bgeu	r3,r2,8008f160 <__umoddi3+0x11c>
8008f150:	1cc7883a 	add	r3,r3,r19
8008f154:	1cc00236 	bltu	r3,r19,8008f160 <__umoddi3+0x11c>
8008f158:	1880012e 	bgeu	r3,r2,8008f160 <__umoddi3+0x11c>
8008f15c:	1cc7883a 	add	r3,r3,r19
8008f160:	1885c83a 	sub	r2,r3,r2
8008f164:	1484d83a 	srl	r2,r2,r18
8008f168:	0007883a 	mov	r3,zero
8008f16c:	00004f06 	br	8008f2ac <__umoddi3+0x268>
8008f170:	29c04c36 	bltu	r5,r7,8008f2a4 <__umoddi3+0x260>
8008f174:	00bfffd4 	movui	r2,65535
8008f178:	11c0582e 	bgeu	r2,r7,8008f2dc <__umoddi3+0x298>
8008f17c:	00804034 	movhi	r2,256
8008f180:	10bfffc4 	addi	r2,r2,-1
8008f184:	11c0e736 	bltu	r2,r7,8008f524 <__umoddi3+0x4e0>
8008f188:	01000404 	movi	r4,16
8008f18c:	3904d83a 	srl	r2,r7,r4
8008f190:	00e00274 	movhi	r3,32777
8008f194:	18da3fc4 	addi	r3,r3,26879
8008f198:	1885883a 	add	r2,r3,r2
8008f19c:	14c00003 	ldbu	r19,0(r2)
8008f1a0:	00c00804 	movi	r3,32
8008f1a4:	9927883a 	add	r19,r19,r4
8008f1a8:	1ce9c83a 	sub	r20,r3,r19
8008f1ac:	a000581e 	bne	r20,zero,8008f310 <__umoddi3+0x2cc>
8008f1b0:	3c400136 	bltu	r7,r17,8008f1b8 <__umoddi3+0x174>
8008f1b4:	8180eb36 	bltu	r16,r6,8008f564 <__umoddi3+0x520>
8008f1b8:	8185c83a 	sub	r2,r16,r6
8008f1bc:	89e3c83a 	sub	r17,r17,r7
8008f1c0:	8089803a 	cmpltu	r4,r16,r2
8008f1c4:	8939c83a 	sub	fp,r17,r4
8008f1c8:	e007883a 	mov	r3,fp
8008f1cc:	00003706 	br	8008f2ac <__umoddi3+0x268>
8008f1d0:	3000041e 	bne	r6,zero,8008f1e4 <__umoddi3+0x1a0>
8008f1d4:	000b883a 	mov	r5,zero
8008f1d8:	01000044 	movi	r4,1
8008f1dc:	008f6740 	call	8008f674 <__udivsi3>
8008f1e0:	1027883a 	mov	r19,r2
8008f1e4:	00bfffd4 	movui	r2,65535
8008f1e8:	14c0402e 	bgeu	r2,r19,8008f2ec <__umoddi3+0x2a8>
8008f1ec:	00804034 	movhi	r2,256
8008f1f0:	10bfffc4 	addi	r2,r2,-1
8008f1f4:	14c0cd36 	bltu	r2,r19,8008f52c <__umoddi3+0x4e8>
8008f1f8:	00800404 	movi	r2,16
8008f1fc:	9886d83a 	srl	r3,r19,r2
8008f200:	01200274 	movhi	r4,32777
8008f204:	211a3fc4 	addi	r4,r4,26879
8008f208:	20c7883a 	add	r3,r4,r3
8008f20c:	18c00003 	ldbu	r3,0(r3)
8008f210:	1887883a 	add	r3,r3,r2
8008f214:	00800804 	movi	r2,32
8008f218:	10e5c83a 	sub	r18,r2,r3
8008f21c:	9000901e 	bne	r18,zero,8008f460 <__umoddi3+0x41c>
8008f220:	982cd43a 	srli	r22,r19,16
8008f224:	8ce3c83a 	sub	r17,r17,r19
8008f228:	9d7fffcc 	andi	r21,r19,65535
8008f22c:	b00b883a 	mov	r5,r22
8008f230:	8809883a 	mov	r4,r17
8008f234:	008f6d80 	call	8008f6d8 <__umodsi3>
8008f238:	8809883a 	mov	r4,r17
8008f23c:	b00b883a 	mov	r5,r22
8008f240:	1021883a 	mov	r16,r2
8008f244:	008f6740 	call	8008f674 <__udivsi3>
8008f248:	8006943a 	slli	r3,r16,16
8008f24c:	a008d43a 	srli	r4,r20,16
8008f250:	1545383a 	mul	r2,r2,r21
8008f254:	20c8b03a 	or	r4,r4,r3
8008f258:	2080042e 	bgeu	r4,r2,8008f26c <__umoddi3+0x228>
8008f25c:	24c9883a 	add	r4,r4,r19
8008f260:	24c00236 	bltu	r4,r19,8008f26c <__umoddi3+0x228>
8008f264:	2080012e 	bgeu	r4,r2,8008f26c <__umoddi3+0x228>
8008f268:	24c9883a 	add	r4,r4,r19
8008f26c:	20a1c83a 	sub	r16,r4,r2
8008f270:	b00b883a 	mov	r5,r22
8008f274:	8009883a 	mov	r4,r16
8008f278:	008f6d80 	call	8008f6d8 <__umodsi3>
8008f27c:	1023883a 	mov	r17,r2
8008f280:	b00b883a 	mov	r5,r22
8008f284:	8009883a 	mov	r4,r16
8008f288:	008f6740 	call	8008f674 <__udivsi3>
8008f28c:	8822943a 	slli	r17,r17,16
8008f290:	1545383a 	mul	r2,r2,r21
8008f294:	a53fffcc 	andi	r20,r20,65535
8008f298:	a446b03a 	or	r3,r20,r17
8008f29c:	18bfb02e 	bgeu	r3,r2,8008f160 <__umoddi3+0x11c>
8008f2a0:	003fab06 	br	8008f150 <__umoddi3+0x10c>
8008f2a4:	2005883a 	mov	r2,r4
8008f2a8:	2807883a 	mov	r3,r5
8008f2ac:	dfc00b17 	ldw	ra,44(sp)
8008f2b0:	df000a17 	ldw	fp,40(sp)
8008f2b4:	ddc00917 	ldw	r23,36(sp)
8008f2b8:	dd800817 	ldw	r22,32(sp)
8008f2bc:	dd400717 	ldw	r21,28(sp)
8008f2c0:	dd000617 	ldw	r20,24(sp)
8008f2c4:	dcc00517 	ldw	r19,20(sp)
8008f2c8:	dc800417 	ldw	r18,16(sp)
8008f2cc:	dc400317 	ldw	r17,12(sp)
8008f2d0:	dc000217 	ldw	r16,8(sp)
8008f2d4:	dec00c04 	addi	sp,sp,48
8008f2d8:	f800283a 	ret
8008f2dc:	04c03fc4 	movi	r19,255
8008f2e0:	99c9803a 	cmpltu	r4,r19,r7
8008f2e4:	200890fa 	slli	r4,r4,3
8008f2e8:	003fa806 	br	8008f18c <__umoddi3+0x148>
8008f2ec:	00803fc4 	movi	r2,255
8008f2f0:	14c5803a 	cmpltu	r2,r2,r19
8008f2f4:	100490fa 	slli	r2,r2,3
8008f2f8:	003fc006 	br	8008f1fc <__umoddi3+0x1b8>
8008f2fc:	00804034 	movhi	r2,256
8008f300:	10bfffc4 	addi	r2,r2,-1
8008f304:	11808b36 	bltu	r2,r6,8008f534 <__umoddi3+0x4f0>
8008f308:	01000404 	movi	r4,16
8008f30c:	003f6406 	br	8008f0a0 <__umoddi3+0x5c>
8008f310:	34c4d83a 	srl	r2,r6,r19
8008f314:	3d0e983a 	sll	r7,r7,r20
8008f318:	8cf8d83a 	srl	fp,r17,r19
8008f31c:	8d10983a 	sll	r8,r17,r20
8008f320:	38aab03a 	or	r21,r7,r2
8008f324:	a82cd43a 	srli	r22,r21,16
8008f328:	84e2d83a 	srl	r17,r16,r19
8008f32c:	e009883a 	mov	r4,fp
8008f330:	b00b883a 	mov	r5,r22
8008f334:	8a22b03a 	or	r17,r17,r8
8008f338:	3524983a 	sll	r18,r6,r20
8008f33c:	008f6d80 	call	8008f6d8 <__umodsi3>
8008f340:	e009883a 	mov	r4,fp
8008f344:	b00b883a 	mov	r5,r22
8008f348:	102f883a 	mov	r23,r2
8008f34c:	008f6740 	call	8008f674 <__udivsi3>
8008f350:	100d883a 	mov	r6,r2
8008f354:	b808943a 	slli	r4,r23,16
8008f358:	aa3fffcc 	andi	r8,r21,65535
8008f35c:	8804d43a 	srli	r2,r17,16
8008f360:	41af383a 	mul	r23,r8,r6
8008f364:	8520983a 	sll	r16,r16,r20
8008f368:	1104b03a 	or	r2,r2,r4
8008f36c:	15c0042e 	bgeu	r2,r23,8008f380 <__umoddi3+0x33c>
8008f370:	1545883a 	add	r2,r2,r21
8008f374:	30ffffc4 	addi	r3,r6,-1
8008f378:	1540742e 	bgeu	r2,r21,8008f54c <__umoddi3+0x508>
8008f37c:	180d883a 	mov	r6,r3
8008f380:	15efc83a 	sub	r23,r2,r23
8008f384:	b00b883a 	mov	r5,r22
8008f388:	b809883a 	mov	r4,r23
8008f38c:	d9800115 	stw	r6,4(sp)
8008f390:	da000015 	stw	r8,0(sp)
8008f394:	008f6d80 	call	8008f6d8 <__umodsi3>
8008f398:	b00b883a 	mov	r5,r22
8008f39c:	b809883a 	mov	r4,r23
8008f3a0:	1039883a 	mov	fp,r2
8008f3a4:	008f6740 	call	8008f674 <__udivsi3>
8008f3a8:	da000017 	ldw	r8,0(sp)
8008f3ac:	e038943a 	slli	fp,fp,16
8008f3b0:	100b883a 	mov	r5,r2
8008f3b4:	4089383a 	mul	r4,r8,r2
8008f3b8:	8a3fffcc 	andi	r8,r17,65535
8008f3bc:	4710b03a 	or	r8,r8,fp
8008f3c0:	d9800117 	ldw	r6,4(sp)
8008f3c4:	4100042e 	bgeu	r8,r4,8008f3d8 <__umoddi3+0x394>
8008f3c8:	4551883a 	add	r8,r8,r21
8008f3cc:	10bfffc4 	addi	r2,r2,-1
8008f3d0:	45405a2e 	bgeu	r8,r21,8008f53c <__umoddi3+0x4f8>
8008f3d4:	100b883a 	mov	r5,r2
8008f3d8:	300c943a 	slli	r6,r6,16
8008f3dc:	91ffffcc 	andi	r7,r18,65535
8008f3e0:	9004d43a 	srli	r2,r18,16
8008f3e4:	314cb03a 	or	r6,r6,r5
8008f3e8:	317fffcc 	andi	r5,r6,65535
8008f3ec:	300cd43a 	srli	r6,r6,16
8008f3f0:	29d3383a 	mul	r9,r5,r7
8008f3f4:	288b383a 	mul	r5,r5,r2
8008f3f8:	31cf383a 	mul	r7,r6,r7
8008f3fc:	4806d43a 	srli	r3,r9,16
8008f400:	4111c83a 	sub	r8,r8,r4
8008f404:	29cb883a 	add	r5,r5,r7
8008f408:	194b883a 	add	r5,r3,r5
8008f40c:	3085383a 	mul	r2,r6,r2
8008f410:	29c0022e 	bgeu	r5,r7,8008f41c <__umoddi3+0x3d8>
8008f414:	00c00074 	movhi	r3,1
8008f418:	10c5883a 	add	r2,r2,r3
8008f41c:	2808d43a 	srli	r4,r5,16
8008f420:	280a943a 	slli	r5,r5,16
8008f424:	4a7fffcc 	andi	r9,r9,65535
8008f428:	2085883a 	add	r2,r4,r2
8008f42c:	2a4b883a 	add	r5,r5,r9
8008f430:	40803636 	bltu	r8,r2,8008f50c <__umoddi3+0x4c8>
8008f434:	40804d26 	beq	r8,r2,8008f56c <__umoddi3+0x528>
8008f438:	4089c83a 	sub	r4,r8,r2
8008f43c:	280f883a 	mov	r7,r5
8008f440:	81cfc83a 	sub	r7,r16,r7
8008f444:	81c7803a 	cmpltu	r3,r16,r7
8008f448:	20c7c83a 	sub	r3,r4,r3
8008f44c:	1cc4983a 	sll	r2,r3,r19
8008f450:	3d0ed83a 	srl	r7,r7,r20
8008f454:	1d06d83a 	srl	r3,r3,r20
8008f458:	11c4b03a 	or	r2,r2,r7
8008f45c:	003f9306 	br	8008f2ac <__umoddi3+0x268>
8008f460:	9ca6983a 	sll	r19,r19,r18
8008f464:	88e8d83a 	srl	r20,r17,r3
8008f468:	80c4d83a 	srl	r2,r16,r3
8008f46c:	982cd43a 	srli	r22,r19,16
8008f470:	8ca2983a 	sll	r17,r17,r18
8008f474:	a009883a 	mov	r4,r20
8008f478:	b00b883a 	mov	r5,r22
8008f47c:	1478b03a 	or	fp,r2,r17
8008f480:	008f6d80 	call	8008f6d8 <__umodsi3>
8008f484:	a009883a 	mov	r4,r20
8008f488:	b00b883a 	mov	r5,r22
8008f48c:	1023883a 	mov	r17,r2
8008f490:	008f6740 	call	8008f674 <__udivsi3>
8008f494:	9d7fffcc 	andi	r21,r19,65535
8008f498:	880a943a 	slli	r5,r17,16
8008f49c:	e008d43a 	srli	r4,fp,16
8008f4a0:	a885383a 	mul	r2,r21,r2
8008f4a4:	84a8983a 	sll	r20,r16,r18
8008f4a8:	2148b03a 	or	r4,r4,r5
8008f4ac:	2080042e 	bgeu	r4,r2,8008f4c0 <__umoddi3+0x47c>
8008f4b0:	24c9883a 	add	r4,r4,r19
8008f4b4:	24c00236 	bltu	r4,r19,8008f4c0 <__umoddi3+0x47c>
8008f4b8:	2080012e 	bgeu	r4,r2,8008f4c0 <__umoddi3+0x47c>
8008f4bc:	24c9883a 	add	r4,r4,r19
8008f4c0:	20a3c83a 	sub	r17,r4,r2
8008f4c4:	b00b883a 	mov	r5,r22
8008f4c8:	8809883a 	mov	r4,r17
8008f4cc:	008f6d80 	call	8008f6d8 <__umodsi3>
8008f4d0:	102f883a 	mov	r23,r2
8008f4d4:	8809883a 	mov	r4,r17
8008f4d8:	b00b883a 	mov	r5,r22
8008f4dc:	008f6740 	call	8008f674 <__udivsi3>
8008f4e0:	b82e943a 	slli	r23,r23,16
8008f4e4:	a885383a 	mul	r2,r21,r2
8008f4e8:	e13fffcc 	andi	r4,fp,65535
8008f4ec:	25c8b03a 	or	r4,r4,r23
8008f4f0:	2080042e 	bgeu	r4,r2,8008f504 <__umoddi3+0x4c0>
8008f4f4:	24c9883a 	add	r4,r4,r19
8008f4f8:	24c00236 	bltu	r4,r19,8008f504 <__umoddi3+0x4c0>
8008f4fc:	2080012e 	bgeu	r4,r2,8008f504 <__umoddi3+0x4c0>
8008f500:	24c9883a 	add	r4,r4,r19
8008f504:	20a3c83a 	sub	r17,r4,r2
8008f508:	003f4806 	br	8008f22c <__umoddi3+0x1e8>
8008f50c:	2c8fc83a 	sub	r7,r5,r18
8008f510:	1545c83a 	sub	r2,r2,r21
8008f514:	29cb803a 	cmpltu	r5,r5,r7
8008f518:	1145c83a 	sub	r2,r2,r5
8008f51c:	4089c83a 	sub	r4,r8,r2
8008f520:	003fc706 	br	8008f440 <__umoddi3+0x3fc>
8008f524:	01000604 	movi	r4,24
8008f528:	003f1806 	br	8008f18c <__umoddi3+0x148>
8008f52c:	00800604 	movi	r2,24
8008f530:	003f3206 	br	8008f1fc <__umoddi3+0x1b8>
8008f534:	01000604 	movi	r4,24
8008f538:	003ed906 	br	8008f0a0 <__umoddi3+0x5c>
8008f53c:	413fa52e 	bgeu	r8,r4,8008f3d4 <__umoddi3+0x390>
8008f540:	297fff84 	addi	r5,r5,-2
8008f544:	4551883a 	add	r8,r8,r21
8008f548:	003fa306 	br	8008f3d8 <__umoddi3+0x394>
8008f54c:	15ff8b2e 	bgeu	r2,r23,8008f37c <__umoddi3+0x338>
8008f550:	31bfff84 	addi	r6,r6,-2
8008f554:	1545883a 	add	r2,r2,r21
8008f558:	003f8906 	br	8008f380 <__umoddi3+0x33c>
8008f55c:	24c9883a 	add	r4,r4,r19
8008f560:	003eee06 	br	8008f11c <__umoddi3+0xd8>
8008f564:	8005883a 	mov	r2,r16
8008f568:	003f1706 	br	8008f1c8 <__umoddi3+0x184>
8008f56c:	817fe736 	bltu	r16,r5,8008f50c <__umoddi3+0x4c8>
8008f570:	280f883a 	mov	r7,r5
8008f574:	0009883a 	mov	r4,zero
8008f578:	003fb106 	br	8008f440 <__umoddi3+0x3fc>

8008f57c <__divsi3>:
8008f57c:	20001b16 	blt	r4,zero,8008f5ec <__divsi3+0x70>
8008f580:	000f883a 	mov	r7,zero
8008f584:	28001616 	blt	r5,zero,8008f5e0 <__divsi3+0x64>
8008f588:	200d883a 	mov	r6,r4
8008f58c:	29001a2e 	bgeu	r5,r4,8008f5f8 <__divsi3+0x7c>
8008f590:	00800804 	movi	r2,32
8008f594:	00c00044 	movi	r3,1
8008f598:	00000106 	br	8008f5a0 <__divsi3+0x24>
8008f59c:	10000d26 	beq	r2,zero,8008f5d4 <__divsi3+0x58>
8008f5a0:	294b883a 	add	r5,r5,r5
8008f5a4:	10bfffc4 	addi	r2,r2,-1
8008f5a8:	18c7883a 	add	r3,r3,r3
8008f5ac:	293ffb36 	bltu	r5,r4,8008f59c <__divsi3+0x20>
8008f5b0:	0005883a 	mov	r2,zero
8008f5b4:	18000726 	beq	r3,zero,8008f5d4 <__divsi3+0x58>
8008f5b8:	0005883a 	mov	r2,zero
8008f5bc:	31400236 	bltu	r6,r5,8008f5c8 <__divsi3+0x4c>
8008f5c0:	314dc83a 	sub	r6,r6,r5
8008f5c4:	10c4b03a 	or	r2,r2,r3
8008f5c8:	1806d07a 	srli	r3,r3,1
8008f5cc:	280ad07a 	srli	r5,r5,1
8008f5d0:	183ffa1e 	bne	r3,zero,8008f5bc <__divsi3+0x40>
8008f5d4:	38000126 	beq	r7,zero,8008f5dc <__divsi3+0x60>
8008f5d8:	0085c83a 	sub	r2,zero,r2
8008f5dc:	f800283a 	ret
8008f5e0:	014bc83a 	sub	r5,zero,r5
8008f5e4:	39c0005c 	xori	r7,r7,1
8008f5e8:	003fe706 	br	8008f588 <__divsi3+0xc>
8008f5ec:	0109c83a 	sub	r4,zero,r4
8008f5f0:	01c00044 	movi	r7,1
8008f5f4:	003fe306 	br	8008f584 <__divsi3+0x8>
8008f5f8:	00c00044 	movi	r3,1
8008f5fc:	003fee06 	br	8008f5b8 <__divsi3+0x3c>

8008f600 <__modsi3>:
8008f600:	20001716 	blt	r4,zero,8008f660 <__modsi3+0x60>
8008f604:	000f883a 	mov	r7,zero
8008f608:	2005883a 	mov	r2,r4
8008f60c:	28001216 	blt	r5,zero,8008f658 <__modsi3+0x58>
8008f610:	2900162e 	bgeu	r5,r4,8008f66c <__modsi3+0x6c>
8008f614:	01800804 	movi	r6,32
8008f618:	00c00044 	movi	r3,1
8008f61c:	00000106 	br	8008f624 <__modsi3+0x24>
8008f620:	30000a26 	beq	r6,zero,8008f64c <__modsi3+0x4c>
8008f624:	294b883a 	add	r5,r5,r5
8008f628:	31bfffc4 	addi	r6,r6,-1
8008f62c:	18c7883a 	add	r3,r3,r3
8008f630:	293ffb36 	bltu	r5,r4,8008f620 <__modsi3+0x20>
8008f634:	18000526 	beq	r3,zero,8008f64c <__modsi3+0x4c>
8008f638:	1806d07a 	srli	r3,r3,1
8008f63c:	11400136 	bltu	r2,r5,8008f644 <__modsi3+0x44>
8008f640:	1145c83a 	sub	r2,r2,r5
8008f644:	280ad07a 	srli	r5,r5,1
8008f648:	183ffb1e 	bne	r3,zero,8008f638 <__modsi3+0x38>
8008f64c:	38000126 	beq	r7,zero,8008f654 <__modsi3+0x54>
8008f650:	0085c83a 	sub	r2,zero,r2
8008f654:	f800283a 	ret
8008f658:	014bc83a 	sub	r5,zero,r5
8008f65c:	003fec06 	br	8008f610 <__modsi3+0x10>
8008f660:	0109c83a 	sub	r4,zero,r4
8008f664:	01c00044 	movi	r7,1
8008f668:	003fe706 	br	8008f608 <__modsi3+0x8>
8008f66c:	00c00044 	movi	r3,1
8008f670:	003ff106 	br	8008f638 <__modsi3+0x38>

8008f674 <__udivsi3>:
8008f674:	200d883a 	mov	r6,r4
8008f678:	2900152e 	bgeu	r5,r4,8008f6d0 <__udivsi3+0x5c>
8008f67c:	28001416 	blt	r5,zero,8008f6d0 <__udivsi3+0x5c>
8008f680:	00800804 	movi	r2,32
8008f684:	00c00044 	movi	r3,1
8008f688:	00000206 	br	8008f694 <__udivsi3+0x20>
8008f68c:	10000e26 	beq	r2,zero,8008f6c8 <__udivsi3+0x54>
8008f690:	28000516 	blt	r5,zero,8008f6a8 <__udivsi3+0x34>
8008f694:	294b883a 	add	r5,r5,r5
8008f698:	10bfffc4 	addi	r2,r2,-1
8008f69c:	18c7883a 	add	r3,r3,r3
8008f6a0:	293ffa36 	bltu	r5,r4,8008f68c <__udivsi3+0x18>
8008f6a4:	18000826 	beq	r3,zero,8008f6c8 <__udivsi3+0x54>
8008f6a8:	0005883a 	mov	r2,zero
8008f6ac:	31400236 	bltu	r6,r5,8008f6b8 <__udivsi3+0x44>
8008f6b0:	314dc83a 	sub	r6,r6,r5
8008f6b4:	10c4b03a 	or	r2,r2,r3
8008f6b8:	1806d07a 	srli	r3,r3,1
8008f6bc:	280ad07a 	srli	r5,r5,1
8008f6c0:	183ffa1e 	bne	r3,zero,8008f6ac <__udivsi3+0x38>
8008f6c4:	f800283a 	ret
8008f6c8:	0005883a 	mov	r2,zero
8008f6cc:	f800283a 	ret
8008f6d0:	00c00044 	movi	r3,1
8008f6d4:	003ff406 	br	8008f6a8 <__udivsi3+0x34>

8008f6d8 <__umodsi3>:
8008f6d8:	2005883a 	mov	r2,r4
8008f6dc:	2900122e 	bgeu	r5,r4,8008f728 <__umodsi3+0x50>
8008f6e0:	28001116 	blt	r5,zero,8008f728 <__umodsi3+0x50>
8008f6e4:	01800804 	movi	r6,32
8008f6e8:	00c00044 	movi	r3,1
8008f6ec:	00000206 	br	8008f6f8 <__umodsi3+0x20>
8008f6f0:	30000c26 	beq	r6,zero,8008f724 <__umodsi3+0x4c>
8008f6f4:	28000516 	blt	r5,zero,8008f70c <__umodsi3+0x34>
8008f6f8:	294b883a 	add	r5,r5,r5
8008f6fc:	31bfffc4 	addi	r6,r6,-1
8008f700:	18c7883a 	add	r3,r3,r3
8008f704:	293ffa36 	bltu	r5,r4,8008f6f0 <__umodsi3+0x18>
8008f708:	18000626 	beq	r3,zero,8008f724 <__umodsi3+0x4c>
8008f70c:	1806d07a 	srli	r3,r3,1
8008f710:	11400136 	bltu	r2,r5,8008f718 <__umodsi3+0x40>
8008f714:	1145c83a 	sub	r2,r2,r5
8008f718:	280ad07a 	srli	r5,r5,1
8008f71c:	183ffb1e 	bne	r3,zero,8008f70c <__umodsi3+0x34>
8008f720:	f800283a 	ret
8008f724:	f800283a 	ret
8008f728:	00c00044 	movi	r3,1
8008f72c:	003ff706 	br	8008f70c <__umodsi3+0x34>

8008f730 <__adddf3>:
8008f730:	02c00434 	movhi	r11,16
8008f734:	5affffc4 	addi	r11,r11,-1
8008f738:	2806d7fa 	srli	r3,r5,31
8008f73c:	2ad4703a 	and	r10,r5,r11
8008f740:	3ad2703a 	and	r9,r7,r11
8008f744:	3804d53a 	srli	r2,r7,20
8008f748:	3018d77a 	srli	r12,r6,29
8008f74c:	280ad53a 	srli	r5,r5,20
8008f750:	501490fa 	slli	r10,r10,3
8008f754:	2010d77a 	srli	r8,r4,29
8008f758:	481290fa 	slli	r9,r9,3
8008f75c:	380ed7fa 	srli	r7,r7,31
8008f760:	defffb04 	addi	sp,sp,-20
8008f764:	dc800215 	stw	r18,8(sp)
8008f768:	dc400115 	stw	r17,4(sp)
8008f76c:	dc000015 	stw	r16,0(sp)
8008f770:	dfc00415 	stw	ra,16(sp)
8008f774:	dcc00315 	stw	r19,12(sp)
8008f778:	1c803fcc 	andi	r18,r3,255
8008f77c:	2c01ffcc 	andi	r16,r5,2047
8008f780:	5210b03a 	or	r8,r10,r8
8008f784:	202290fa 	slli	r17,r4,3
8008f788:	1081ffcc 	andi	r2,r2,2047
8008f78c:	4b12b03a 	or	r9,r9,r12
8008f790:	300c90fa 	slli	r6,r6,3
8008f794:	91c07526 	beq	r18,r7,8008f96c <__adddf3+0x23c>
8008f798:	8087c83a 	sub	r3,r16,r2
8008f79c:	00c0ab0e 	bge	zero,r3,8008fa4c <__adddf3+0x31c>
8008f7a0:	10002a1e 	bne	r2,zero,8008f84c <__adddf3+0x11c>
8008f7a4:	4984b03a 	or	r2,r9,r6
8008f7a8:	1000961e 	bne	r2,zero,8008fa04 <__adddf3+0x2d4>
8008f7ac:	888001cc 	andi	r2,r17,7
8008f7b0:	10000726 	beq	r2,zero,8008f7d0 <__adddf3+0xa0>
8008f7b4:	888003cc 	andi	r2,r17,15
8008f7b8:	00c00104 	movi	r3,4
8008f7bc:	10c00426 	beq	r2,r3,8008f7d0 <__adddf3+0xa0>
8008f7c0:	88c7883a 	add	r3,r17,r3
8008f7c4:	1c63803a 	cmpltu	r17,r3,r17
8008f7c8:	4451883a 	add	r8,r8,r17
8008f7cc:	1823883a 	mov	r17,r3
8008f7d0:	4080202c 	andhi	r2,r8,128
8008f7d4:	10005926 	beq	r2,zero,8008f93c <__adddf3+0x20c>
8008f7d8:	84000044 	addi	r16,r16,1
8008f7dc:	0081ffc4 	movi	r2,2047
8008f7e0:	8080ba26 	beq	r16,r2,8008facc <__adddf3+0x39c>
8008f7e4:	00bfe034 	movhi	r2,65408
8008f7e8:	10bfffc4 	addi	r2,r2,-1
8008f7ec:	4090703a 	and	r8,r8,r2
8008f7f0:	4004977a 	slli	r2,r8,29
8008f7f4:	4010927a 	slli	r8,r8,9
8008f7f8:	8822d0fa 	srli	r17,r17,3
8008f7fc:	8401ffcc 	andi	r16,r16,2047
8008f800:	4010d33a 	srli	r8,r8,12
8008f804:	9007883a 	mov	r3,r18
8008f808:	1444b03a 	or	r2,r2,r17
8008f80c:	8401ffcc 	andi	r16,r16,2047
8008f810:	8020953a 	slli	r16,r16,20
8008f814:	18c03fcc 	andi	r3,r3,255
8008f818:	01000434 	movhi	r4,16
8008f81c:	213fffc4 	addi	r4,r4,-1
8008f820:	180697fa 	slli	r3,r3,31
8008f824:	4110703a 	and	r8,r8,r4
8008f828:	4410b03a 	or	r8,r8,r16
8008f82c:	40c6b03a 	or	r3,r8,r3
8008f830:	dfc00417 	ldw	ra,16(sp)
8008f834:	dcc00317 	ldw	r19,12(sp)
8008f838:	dc800217 	ldw	r18,8(sp)
8008f83c:	dc400117 	ldw	r17,4(sp)
8008f840:	dc000017 	ldw	r16,0(sp)
8008f844:	dec00504 	addi	sp,sp,20
8008f848:	f800283a 	ret
8008f84c:	0081ffc4 	movi	r2,2047
8008f850:	80bfd626 	beq	r16,r2,8008f7ac <__adddf3+0x7c>
8008f854:	4a402034 	orhi	r9,r9,128
8008f858:	00800e04 	movi	r2,56
8008f85c:	10c09f16 	blt	r2,r3,8008fadc <__adddf3+0x3ac>
8008f860:	008007c4 	movi	r2,31
8008f864:	10c0c216 	blt	r2,r3,8008fb70 <__adddf3+0x440>
8008f868:	00800804 	movi	r2,32
8008f86c:	10c5c83a 	sub	r2,r2,r3
8008f870:	488a983a 	sll	r5,r9,r2
8008f874:	30c8d83a 	srl	r4,r6,r3
8008f878:	3084983a 	sll	r2,r6,r2
8008f87c:	48c6d83a 	srl	r3,r9,r3
8008f880:	290cb03a 	or	r6,r5,r4
8008f884:	1004c03a 	cmpne	r2,r2,zero
8008f888:	308cb03a 	or	r6,r6,r2
8008f88c:	898dc83a 	sub	r6,r17,r6
8008f890:	89a3803a 	cmpltu	r17,r17,r6
8008f894:	40d1c83a 	sub	r8,r8,r3
8008f898:	4451c83a 	sub	r8,r8,r17
8008f89c:	3023883a 	mov	r17,r6
8008f8a0:	4080202c 	andhi	r2,r8,128
8008f8a4:	10002326 	beq	r2,zero,8008f934 <__adddf3+0x204>
8008f8a8:	04c02034 	movhi	r19,128
8008f8ac:	9cffffc4 	addi	r19,r19,-1
8008f8b0:	44e6703a 	and	r19,r8,r19
8008f8b4:	98007626 	beq	r19,zero,8008fa90 <__adddf3+0x360>
8008f8b8:	9809883a 	mov	r4,r19
8008f8bc:	00818d80 	call	800818d8 <__clzsi2>
8008f8c0:	10fffe04 	addi	r3,r2,-8
8008f8c4:	010007c4 	movi	r4,31
8008f8c8:	20c07716 	blt	r4,r3,8008faa8 <__adddf3+0x378>
8008f8cc:	00800804 	movi	r2,32
8008f8d0:	10c5c83a 	sub	r2,r2,r3
8008f8d4:	8884d83a 	srl	r2,r17,r2
8008f8d8:	98d0983a 	sll	r8,r19,r3
8008f8dc:	88e2983a 	sll	r17,r17,r3
8008f8e0:	1204b03a 	or	r2,r2,r8
8008f8e4:	1c007416 	blt	r3,r16,8008fab8 <__adddf3+0x388>
8008f8e8:	1c21c83a 	sub	r16,r3,r16
8008f8ec:	82000044 	addi	r8,r16,1
8008f8f0:	00c007c4 	movi	r3,31
8008f8f4:	1a009116 	blt	r3,r8,8008fb3c <__adddf3+0x40c>
8008f8f8:	00c00804 	movi	r3,32
8008f8fc:	1a07c83a 	sub	r3,r3,r8
8008f900:	8a08d83a 	srl	r4,r17,r8
8008f904:	88e2983a 	sll	r17,r17,r3
8008f908:	10c6983a 	sll	r3,r2,r3
8008f90c:	1210d83a 	srl	r8,r2,r8
8008f910:	8804c03a 	cmpne	r2,r17,zero
8008f914:	1906b03a 	or	r3,r3,r4
8008f918:	18a2b03a 	or	r17,r3,r2
8008f91c:	0021883a 	mov	r16,zero
8008f920:	003fa206 	br	8008f7ac <__adddf3+0x7c>
8008f924:	1890b03a 	or	r8,r3,r2
8008f928:	40017d26 	beq	r8,zero,8008ff20 <__adddf3+0x7f0>
8008f92c:	1011883a 	mov	r8,r2
8008f930:	1823883a 	mov	r17,r3
8008f934:	888001cc 	andi	r2,r17,7
8008f938:	103f9e1e 	bne	r2,zero,8008f7b4 <__adddf3+0x84>
8008f93c:	4004977a 	slli	r2,r8,29
8008f940:	8822d0fa 	srli	r17,r17,3
8008f944:	4010d0fa 	srli	r8,r8,3
8008f948:	9007883a 	mov	r3,r18
8008f94c:	1444b03a 	or	r2,r2,r17
8008f950:	0101ffc4 	movi	r4,2047
8008f954:	81002426 	beq	r16,r4,8008f9e8 <__adddf3+0x2b8>
8008f958:	8120703a 	and	r16,r16,r4
8008f95c:	01000434 	movhi	r4,16
8008f960:	213fffc4 	addi	r4,r4,-1
8008f964:	4110703a 	and	r8,r8,r4
8008f968:	003fa806 	br	8008f80c <__adddf3+0xdc>
8008f96c:	8089c83a 	sub	r4,r16,r2
8008f970:	01005e0e 	bge	zero,r4,8008faec <__adddf3+0x3bc>
8008f974:	10002b26 	beq	r2,zero,8008fa24 <__adddf3+0x2f4>
8008f978:	0081ffc4 	movi	r2,2047
8008f97c:	80bf8b26 	beq	r16,r2,8008f7ac <__adddf3+0x7c>
8008f980:	4a402034 	orhi	r9,r9,128
8008f984:	00800e04 	movi	r2,56
8008f988:	1100a40e 	bge	r2,r4,8008fc1c <__adddf3+0x4ec>
8008f98c:	498cb03a 	or	r6,r9,r6
8008f990:	300ac03a 	cmpne	r5,r6,zero
8008f994:	0013883a 	mov	r9,zero
8008f998:	2c4b883a 	add	r5,r5,r17
8008f99c:	2c63803a 	cmpltu	r17,r5,r17
8008f9a0:	4a11883a 	add	r8,r9,r8
8008f9a4:	8a11883a 	add	r8,r17,r8
8008f9a8:	2823883a 	mov	r17,r5
8008f9ac:	4080202c 	andhi	r2,r8,128
8008f9b0:	103fe026 	beq	r2,zero,8008f934 <__adddf3+0x204>
8008f9b4:	84000044 	addi	r16,r16,1
8008f9b8:	0081ffc4 	movi	r2,2047
8008f9bc:	8080d226 	beq	r16,r2,8008fd08 <__adddf3+0x5d8>
8008f9c0:	00bfe034 	movhi	r2,65408
8008f9c4:	10bfffc4 	addi	r2,r2,-1
8008f9c8:	4090703a 	and	r8,r8,r2
8008f9cc:	880ad07a 	srli	r5,r17,1
8008f9d0:	400897fa 	slli	r4,r8,31
8008f9d4:	88c0004c 	andi	r3,r17,1
8008f9d8:	28e2b03a 	or	r17,r5,r3
8008f9dc:	4010d07a 	srli	r8,r8,1
8008f9e0:	2462b03a 	or	r17,r4,r17
8008f9e4:	003f7106 	br	8008f7ac <__adddf3+0x7c>
8008f9e8:	4088b03a 	or	r4,r8,r2
8008f9ec:	20014526 	beq	r4,zero,8008ff04 <__adddf3+0x7d4>
8008f9f0:	01000434 	movhi	r4,16
8008f9f4:	42000234 	orhi	r8,r8,8
8008f9f8:	213fffc4 	addi	r4,r4,-1
8008f9fc:	4110703a 	and	r8,r8,r4
8008fa00:	003f8206 	br	8008f80c <__adddf3+0xdc>
8008fa04:	18ffffc4 	addi	r3,r3,-1
8008fa08:	1800491e 	bne	r3,zero,8008fb30 <__adddf3+0x400>
8008fa0c:	898bc83a 	sub	r5,r17,r6
8008fa10:	8963803a 	cmpltu	r17,r17,r5
8008fa14:	4251c83a 	sub	r8,r8,r9
8008fa18:	4451c83a 	sub	r8,r8,r17
8008fa1c:	2823883a 	mov	r17,r5
8008fa20:	003f9f06 	br	8008f8a0 <__adddf3+0x170>
8008fa24:	4984b03a 	or	r2,r9,r6
8008fa28:	103f6026 	beq	r2,zero,8008f7ac <__adddf3+0x7c>
8008fa2c:	213fffc4 	addi	r4,r4,-1
8008fa30:	2000931e 	bne	r4,zero,8008fc80 <__adddf3+0x550>
8008fa34:	898d883a 	add	r6,r17,r6
8008fa38:	3463803a 	cmpltu	r17,r6,r17
8008fa3c:	4251883a 	add	r8,r8,r9
8008fa40:	8a11883a 	add	r8,r17,r8
8008fa44:	3023883a 	mov	r17,r6
8008fa48:	003fd806 	br	8008f9ac <__adddf3+0x27c>
8008fa4c:	1800541e 	bne	r3,zero,8008fba0 <__adddf3+0x470>
8008fa50:	80800044 	addi	r2,r16,1
8008fa54:	1081ffcc 	andi	r2,r2,2047
8008fa58:	00c00044 	movi	r3,1
8008fa5c:	1880a00e 	bge	r3,r2,8008fce0 <__adddf3+0x5b0>
8008fa60:	8989c83a 	sub	r4,r17,r6
8008fa64:	8905803a 	cmpltu	r2,r17,r4
8008fa68:	4267c83a 	sub	r19,r8,r9
8008fa6c:	98a7c83a 	sub	r19,r19,r2
8008fa70:	9880202c 	andhi	r2,r19,128
8008fa74:	10006326 	beq	r2,zero,8008fc04 <__adddf3+0x4d4>
8008fa78:	3463c83a 	sub	r17,r6,r17
8008fa7c:	4a07c83a 	sub	r3,r9,r8
8008fa80:	344d803a 	cmpltu	r6,r6,r17
8008fa84:	19a7c83a 	sub	r19,r3,r6
8008fa88:	3825883a 	mov	r18,r7
8008fa8c:	983f8a1e 	bne	r19,zero,8008f8b8 <__adddf3+0x188>
8008fa90:	8809883a 	mov	r4,r17
8008fa94:	00818d80 	call	800818d8 <__clzsi2>
8008fa98:	10800804 	addi	r2,r2,32
8008fa9c:	10fffe04 	addi	r3,r2,-8
8008faa0:	010007c4 	movi	r4,31
8008faa4:	20ff890e 	bge	r4,r3,8008f8cc <__adddf3+0x19c>
8008faa8:	10bff604 	addi	r2,r2,-40
8008faac:	8884983a 	sll	r2,r17,r2
8008fab0:	0023883a 	mov	r17,zero
8008fab4:	1c3f8c0e 	bge	r3,r16,8008f8e8 <__adddf3+0x1b8>
8008fab8:	023fe034 	movhi	r8,65408
8008fabc:	423fffc4 	addi	r8,r8,-1
8008fac0:	80e1c83a 	sub	r16,r16,r3
8008fac4:	1210703a 	and	r8,r2,r8
8008fac8:	003f3806 	br	8008f7ac <__adddf3+0x7c>
8008facc:	9007883a 	mov	r3,r18
8008fad0:	0011883a 	mov	r8,zero
8008fad4:	0005883a 	mov	r2,zero
8008fad8:	003f4c06 	br	8008f80c <__adddf3+0xdc>
8008fadc:	498cb03a 	or	r6,r9,r6
8008fae0:	300cc03a 	cmpne	r6,r6,zero
8008fae4:	0007883a 	mov	r3,zero
8008fae8:	003f6806 	br	8008f88c <__adddf3+0x15c>
8008faec:	20009c1e 	bne	r4,zero,8008fd60 <__adddf3+0x630>
8008faf0:	80800044 	addi	r2,r16,1
8008faf4:	1141ffcc 	andi	r5,r2,2047
8008faf8:	01000044 	movi	r4,1
8008fafc:	2140670e 	bge	r4,r5,8008fc9c <__adddf3+0x56c>
8008fb00:	0101ffc4 	movi	r4,2047
8008fb04:	11007f26 	beq	r2,r4,8008fd04 <__adddf3+0x5d4>
8008fb08:	898d883a 	add	r6,r17,r6
8008fb0c:	4247883a 	add	r3,r8,r9
8008fb10:	3451803a 	cmpltu	r8,r6,r17
8008fb14:	40d1883a 	add	r8,r8,r3
8008fb18:	402297fa 	slli	r17,r8,31
8008fb1c:	300cd07a 	srli	r6,r6,1
8008fb20:	4010d07a 	srli	r8,r8,1
8008fb24:	1021883a 	mov	r16,r2
8008fb28:	89a2b03a 	or	r17,r17,r6
8008fb2c:	003f1f06 	br	8008f7ac <__adddf3+0x7c>
8008fb30:	0081ffc4 	movi	r2,2047
8008fb34:	80bf481e 	bne	r16,r2,8008f858 <__adddf3+0x128>
8008fb38:	003f1c06 	br	8008f7ac <__adddf3+0x7c>
8008fb3c:	843ff844 	addi	r16,r16,-31
8008fb40:	01000804 	movi	r4,32
8008fb44:	1406d83a 	srl	r3,r2,r16
8008fb48:	41005026 	beq	r8,r4,8008fc8c <__adddf3+0x55c>
8008fb4c:	01001004 	movi	r4,64
8008fb50:	2211c83a 	sub	r8,r4,r8
8008fb54:	1204983a 	sll	r2,r2,r8
8008fb58:	88a2b03a 	or	r17,r17,r2
8008fb5c:	8822c03a 	cmpne	r17,r17,zero
8008fb60:	1c62b03a 	or	r17,r3,r17
8008fb64:	0011883a 	mov	r8,zero
8008fb68:	0021883a 	mov	r16,zero
8008fb6c:	003f7106 	br	8008f934 <__adddf3+0x204>
8008fb70:	193ff804 	addi	r4,r3,-32
8008fb74:	00800804 	movi	r2,32
8008fb78:	4908d83a 	srl	r4,r9,r4
8008fb7c:	18804526 	beq	r3,r2,8008fc94 <__adddf3+0x564>
8008fb80:	00801004 	movi	r2,64
8008fb84:	10c5c83a 	sub	r2,r2,r3
8008fb88:	4886983a 	sll	r3,r9,r2
8008fb8c:	198cb03a 	or	r6,r3,r6
8008fb90:	300cc03a 	cmpne	r6,r6,zero
8008fb94:	218cb03a 	or	r6,r4,r6
8008fb98:	0007883a 	mov	r3,zero
8008fb9c:	003f3b06 	br	8008f88c <__adddf3+0x15c>
8008fba0:	80002a26 	beq	r16,zero,8008fc4c <__adddf3+0x51c>
8008fba4:	0101ffc4 	movi	r4,2047
8008fba8:	11006826 	beq	r2,r4,8008fd4c <__adddf3+0x61c>
8008fbac:	00c7c83a 	sub	r3,zero,r3
8008fbb0:	42002034 	orhi	r8,r8,128
8008fbb4:	01000e04 	movi	r4,56
8008fbb8:	20c07c16 	blt	r4,r3,8008fdac <__adddf3+0x67c>
8008fbbc:	010007c4 	movi	r4,31
8008fbc0:	20c0da16 	blt	r4,r3,8008ff2c <__adddf3+0x7fc>
8008fbc4:	01000804 	movi	r4,32
8008fbc8:	20c9c83a 	sub	r4,r4,r3
8008fbcc:	4114983a 	sll	r10,r8,r4
8008fbd0:	88cad83a 	srl	r5,r17,r3
8008fbd4:	8908983a 	sll	r4,r17,r4
8008fbd8:	40c6d83a 	srl	r3,r8,r3
8008fbdc:	5162b03a 	or	r17,r10,r5
8008fbe0:	2008c03a 	cmpne	r4,r4,zero
8008fbe4:	8922b03a 	or	r17,r17,r4
8008fbe8:	3463c83a 	sub	r17,r6,r17
8008fbec:	48c7c83a 	sub	r3,r9,r3
8008fbf0:	344d803a 	cmpltu	r6,r6,r17
8008fbf4:	1991c83a 	sub	r8,r3,r6
8008fbf8:	1021883a 	mov	r16,r2
8008fbfc:	3825883a 	mov	r18,r7
8008fc00:	003f2706 	br	8008f8a0 <__adddf3+0x170>
8008fc04:	24d0b03a 	or	r8,r4,r19
8008fc08:	40001b1e 	bne	r8,zero,8008fc78 <__adddf3+0x548>
8008fc0c:	0005883a 	mov	r2,zero
8008fc10:	0007883a 	mov	r3,zero
8008fc14:	0021883a 	mov	r16,zero
8008fc18:	003f4d06 	br	8008f950 <__adddf3+0x220>
8008fc1c:	008007c4 	movi	r2,31
8008fc20:	11003c16 	blt	r2,r4,8008fd14 <__adddf3+0x5e4>
8008fc24:	00800804 	movi	r2,32
8008fc28:	1105c83a 	sub	r2,r2,r4
8008fc2c:	488e983a 	sll	r7,r9,r2
8008fc30:	310ad83a 	srl	r5,r6,r4
8008fc34:	3084983a 	sll	r2,r6,r2
8008fc38:	4912d83a 	srl	r9,r9,r4
8008fc3c:	394ab03a 	or	r5,r7,r5
8008fc40:	1004c03a 	cmpne	r2,r2,zero
8008fc44:	288ab03a 	or	r5,r5,r2
8008fc48:	003f5306 	br	8008f998 <__adddf3+0x268>
8008fc4c:	4448b03a 	or	r4,r8,r17
8008fc50:	20003e26 	beq	r4,zero,8008fd4c <__adddf3+0x61c>
8008fc54:	00c6303a 	nor	r3,zero,r3
8008fc58:	18003a1e 	bne	r3,zero,8008fd44 <__adddf3+0x614>
8008fc5c:	3463c83a 	sub	r17,r6,r17
8008fc60:	4a07c83a 	sub	r3,r9,r8
8008fc64:	344d803a 	cmpltu	r6,r6,r17
8008fc68:	1991c83a 	sub	r8,r3,r6
8008fc6c:	1021883a 	mov	r16,r2
8008fc70:	3825883a 	mov	r18,r7
8008fc74:	003f0a06 	br	8008f8a0 <__adddf3+0x170>
8008fc78:	2023883a 	mov	r17,r4
8008fc7c:	003f0d06 	br	8008f8b4 <__adddf3+0x184>
8008fc80:	0081ffc4 	movi	r2,2047
8008fc84:	80bf3f1e 	bne	r16,r2,8008f984 <__adddf3+0x254>
8008fc88:	003ec806 	br	8008f7ac <__adddf3+0x7c>
8008fc8c:	0005883a 	mov	r2,zero
8008fc90:	003fb106 	br	8008fb58 <__adddf3+0x428>
8008fc94:	0007883a 	mov	r3,zero
8008fc98:	003fbc06 	br	8008fb8c <__adddf3+0x45c>
8008fc9c:	4444b03a 	or	r2,r8,r17
8008fca0:	8000871e 	bne	r16,zero,8008fec0 <__adddf3+0x790>
8008fca4:	1000ba26 	beq	r2,zero,8008ff90 <__adddf3+0x860>
8008fca8:	4984b03a 	or	r2,r9,r6
8008fcac:	103ebf26 	beq	r2,zero,8008f7ac <__adddf3+0x7c>
8008fcb0:	8985883a 	add	r2,r17,r6
8008fcb4:	4247883a 	add	r3,r8,r9
8008fcb8:	1451803a 	cmpltu	r8,r2,r17
8008fcbc:	40d1883a 	add	r8,r8,r3
8008fcc0:	40c0202c 	andhi	r3,r8,128
8008fcc4:	1023883a 	mov	r17,r2
8008fcc8:	183f1a26 	beq	r3,zero,8008f934 <__adddf3+0x204>
8008fccc:	00bfe034 	movhi	r2,65408
8008fcd0:	10bfffc4 	addi	r2,r2,-1
8008fcd4:	2021883a 	mov	r16,r4
8008fcd8:	4090703a 	and	r8,r8,r2
8008fcdc:	003eb306 	br	8008f7ac <__adddf3+0x7c>
8008fce0:	4444b03a 	or	r2,r8,r17
8008fce4:	8000291e 	bne	r16,zero,8008fd8c <__adddf3+0x65c>
8008fce8:	10004b1e 	bne	r2,zero,8008fe18 <__adddf3+0x6e8>
8008fcec:	4990b03a 	or	r8,r9,r6
8008fcf0:	40008b26 	beq	r8,zero,8008ff20 <__adddf3+0x7f0>
8008fcf4:	4811883a 	mov	r8,r9
8008fcf8:	3023883a 	mov	r17,r6
8008fcfc:	3825883a 	mov	r18,r7
8008fd00:	003eaa06 	br	8008f7ac <__adddf3+0x7c>
8008fd04:	1021883a 	mov	r16,r2
8008fd08:	0011883a 	mov	r8,zero
8008fd0c:	0005883a 	mov	r2,zero
8008fd10:	003f0f06 	br	8008f950 <__adddf3+0x220>
8008fd14:	217ff804 	addi	r5,r4,-32
8008fd18:	00800804 	movi	r2,32
8008fd1c:	494ad83a 	srl	r5,r9,r5
8008fd20:	20807d26 	beq	r4,r2,8008ff18 <__adddf3+0x7e8>
8008fd24:	00801004 	movi	r2,64
8008fd28:	1109c83a 	sub	r4,r2,r4
8008fd2c:	4912983a 	sll	r9,r9,r4
8008fd30:	498cb03a 	or	r6,r9,r6
8008fd34:	300cc03a 	cmpne	r6,r6,zero
8008fd38:	298ab03a 	or	r5,r5,r6
8008fd3c:	0013883a 	mov	r9,zero
8008fd40:	003f1506 	br	8008f998 <__adddf3+0x268>
8008fd44:	0101ffc4 	movi	r4,2047
8008fd48:	113f9a1e 	bne	r2,r4,8008fbb4 <__adddf3+0x484>
8008fd4c:	4811883a 	mov	r8,r9
8008fd50:	3023883a 	mov	r17,r6
8008fd54:	1021883a 	mov	r16,r2
8008fd58:	3825883a 	mov	r18,r7
8008fd5c:	003e9306 	br	8008f7ac <__adddf3+0x7c>
8008fd60:	8000161e 	bne	r16,zero,8008fdbc <__adddf3+0x68c>
8008fd64:	444ab03a 	or	r5,r8,r17
8008fd68:	28005126 	beq	r5,zero,8008feb0 <__adddf3+0x780>
8008fd6c:	0108303a 	nor	r4,zero,r4
8008fd70:	20004d1e 	bne	r4,zero,8008fea8 <__adddf3+0x778>
8008fd74:	89a3883a 	add	r17,r17,r6
8008fd78:	4253883a 	add	r9,r8,r9
8008fd7c:	898d803a 	cmpltu	r6,r17,r6
8008fd80:	3251883a 	add	r8,r6,r9
8008fd84:	1021883a 	mov	r16,r2
8008fd88:	003f0806 	br	8008f9ac <__adddf3+0x27c>
8008fd8c:	1000301e 	bne	r2,zero,8008fe50 <__adddf3+0x720>
8008fd90:	4984b03a 	or	r2,r9,r6
8008fd94:	10007126 	beq	r2,zero,8008ff5c <__adddf3+0x82c>
8008fd98:	4811883a 	mov	r8,r9
8008fd9c:	3023883a 	mov	r17,r6
8008fda0:	3825883a 	mov	r18,r7
8008fda4:	0401ffc4 	movi	r16,2047
8008fda8:	003e8006 	br	8008f7ac <__adddf3+0x7c>
8008fdac:	4462b03a 	or	r17,r8,r17
8008fdb0:	8822c03a 	cmpne	r17,r17,zero
8008fdb4:	0007883a 	mov	r3,zero
8008fdb8:	003f8b06 	br	8008fbe8 <__adddf3+0x4b8>
8008fdbc:	0141ffc4 	movi	r5,2047
8008fdc0:	11403b26 	beq	r2,r5,8008feb0 <__adddf3+0x780>
8008fdc4:	0109c83a 	sub	r4,zero,r4
8008fdc8:	42002034 	orhi	r8,r8,128
8008fdcc:	01400e04 	movi	r5,56
8008fdd0:	29006716 	blt	r5,r4,8008ff70 <__adddf3+0x840>
8008fdd4:	014007c4 	movi	r5,31
8008fdd8:	29007016 	blt	r5,r4,8008ff9c <__adddf3+0x86c>
8008fddc:	01400804 	movi	r5,32
8008fde0:	290bc83a 	sub	r5,r5,r4
8008fde4:	4154983a 	sll	r10,r8,r5
8008fde8:	890ed83a 	srl	r7,r17,r4
8008fdec:	894a983a 	sll	r5,r17,r5
8008fdf0:	4108d83a 	srl	r4,r8,r4
8008fdf4:	51e2b03a 	or	r17,r10,r7
8008fdf8:	280ac03a 	cmpne	r5,r5,zero
8008fdfc:	8962b03a 	or	r17,r17,r5
8008fe00:	89a3883a 	add	r17,r17,r6
8008fe04:	2253883a 	add	r9,r4,r9
8008fe08:	898d803a 	cmpltu	r6,r17,r6
8008fe0c:	3251883a 	add	r8,r6,r9
8008fe10:	1021883a 	mov	r16,r2
8008fe14:	003ee506 	br	8008f9ac <__adddf3+0x27c>
8008fe18:	4984b03a 	or	r2,r9,r6
8008fe1c:	103e6326 	beq	r2,zero,8008f7ac <__adddf3+0x7c>
8008fe20:	8987c83a 	sub	r3,r17,r6
8008fe24:	88c9803a 	cmpltu	r4,r17,r3
8008fe28:	4245c83a 	sub	r2,r8,r9
8008fe2c:	1105c83a 	sub	r2,r2,r4
8008fe30:	1100202c 	andhi	r4,r2,128
8008fe34:	203ebb26 	beq	r4,zero,8008f924 <__adddf3+0x1f4>
8008fe38:	3463c83a 	sub	r17,r6,r17
8008fe3c:	4a07c83a 	sub	r3,r9,r8
8008fe40:	344d803a 	cmpltu	r6,r6,r17
8008fe44:	1991c83a 	sub	r8,r3,r6
8008fe48:	3825883a 	mov	r18,r7
8008fe4c:	003e5706 	br	8008f7ac <__adddf3+0x7c>
8008fe50:	4984b03a 	or	r2,r9,r6
8008fe54:	10002e26 	beq	r2,zero,8008ff10 <__adddf3+0x7e0>
8008fe58:	4004d0fa 	srli	r2,r8,3
8008fe5c:	8822d0fa 	srli	r17,r17,3
8008fe60:	4010977a 	slli	r8,r8,29
8008fe64:	10c0022c 	andhi	r3,r2,8
8008fe68:	4462b03a 	or	r17,r8,r17
8008fe6c:	18000826 	beq	r3,zero,8008fe90 <__adddf3+0x760>
8008fe70:	4808d0fa 	srli	r4,r9,3
8008fe74:	20c0022c 	andhi	r3,r4,8
8008fe78:	1800051e 	bne	r3,zero,8008fe90 <__adddf3+0x760>
8008fe7c:	300cd0fa 	srli	r6,r6,3
8008fe80:	4806977a 	slli	r3,r9,29
8008fe84:	2005883a 	mov	r2,r4
8008fe88:	3825883a 	mov	r18,r7
8008fe8c:	19a2b03a 	or	r17,r3,r6
8008fe90:	8810d77a 	srli	r8,r17,29
8008fe94:	100490fa 	slli	r2,r2,3
8008fe98:	882290fa 	slli	r17,r17,3
8008fe9c:	0401ffc4 	movi	r16,2047
8008fea0:	4090b03a 	or	r8,r8,r2
8008fea4:	003e4106 	br	8008f7ac <__adddf3+0x7c>
8008fea8:	0141ffc4 	movi	r5,2047
8008feac:	117fc71e 	bne	r2,r5,8008fdcc <__adddf3+0x69c>
8008feb0:	4811883a 	mov	r8,r9
8008feb4:	3023883a 	mov	r17,r6
8008feb8:	1021883a 	mov	r16,r2
8008febc:	003e3b06 	br	8008f7ac <__adddf3+0x7c>
8008fec0:	10002f26 	beq	r2,zero,8008ff80 <__adddf3+0x850>
8008fec4:	4984b03a 	or	r2,r9,r6
8008fec8:	10001126 	beq	r2,zero,8008ff10 <__adddf3+0x7e0>
8008fecc:	4004d0fa 	srli	r2,r8,3
8008fed0:	8822d0fa 	srli	r17,r17,3
8008fed4:	4010977a 	slli	r8,r8,29
8008fed8:	10c0022c 	andhi	r3,r2,8
8008fedc:	4462b03a 	or	r17,r8,r17
8008fee0:	183feb26 	beq	r3,zero,8008fe90 <__adddf3+0x760>
8008fee4:	4808d0fa 	srli	r4,r9,3
8008fee8:	20c0022c 	andhi	r3,r4,8
8008feec:	183fe81e 	bne	r3,zero,8008fe90 <__adddf3+0x760>
8008fef0:	300cd0fa 	srli	r6,r6,3
8008fef4:	4806977a 	slli	r3,r9,29
8008fef8:	2005883a 	mov	r2,r4
8008fefc:	19a2b03a 	or	r17,r3,r6
8008ff00:	003fe306 	br	8008fe90 <__adddf3+0x760>
8008ff04:	0011883a 	mov	r8,zero
8008ff08:	0005883a 	mov	r2,zero
8008ff0c:	003e3f06 	br	8008f80c <__adddf3+0xdc>
8008ff10:	0401ffc4 	movi	r16,2047
8008ff14:	003e2506 	br	8008f7ac <__adddf3+0x7c>
8008ff18:	0013883a 	mov	r9,zero
8008ff1c:	003f8406 	br	8008fd30 <__adddf3+0x600>
8008ff20:	0005883a 	mov	r2,zero
8008ff24:	0007883a 	mov	r3,zero
8008ff28:	003e8906 	br	8008f950 <__adddf3+0x220>
8008ff2c:	197ff804 	addi	r5,r3,-32
8008ff30:	01000804 	movi	r4,32
8008ff34:	414ad83a 	srl	r5,r8,r5
8008ff38:	19002426 	beq	r3,r4,8008ffcc <__adddf3+0x89c>
8008ff3c:	01001004 	movi	r4,64
8008ff40:	20c7c83a 	sub	r3,r4,r3
8008ff44:	40c6983a 	sll	r3,r8,r3
8008ff48:	1c46b03a 	or	r3,r3,r17
8008ff4c:	1806c03a 	cmpne	r3,r3,zero
8008ff50:	28e2b03a 	or	r17,r5,r3
8008ff54:	0007883a 	mov	r3,zero
8008ff58:	003f2306 	br	8008fbe8 <__adddf3+0x4b8>
8008ff5c:	0007883a 	mov	r3,zero
8008ff60:	5811883a 	mov	r8,r11
8008ff64:	00bfffc4 	movi	r2,-1
8008ff68:	0401ffc4 	movi	r16,2047
8008ff6c:	003e7806 	br	8008f950 <__adddf3+0x220>
8008ff70:	4462b03a 	or	r17,r8,r17
8008ff74:	8822c03a 	cmpne	r17,r17,zero
8008ff78:	0009883a 	mov	r4,zero
8008ff7c:	003fa006 	br	8008fe00 <__adddf3+0x6d0>
8008ff80:	4811883a 	mov	r8,r9
8008ff84:	3023883a 	mov	r17,r6
8008ff88:	0401ffc4 	movi	r16,2047
8008ff8c:	003e0706 	br	8008f7ac <__adddf3+0x7c>
8008ff90:	4811883a 	mov	r8,r9
8008ff94:	3023883a 	mov	r17,r6
8008ff98:	003e0406 	br	8008f7ac <__adddf3+0x7c>
8008ff9c:	21fff804 	addi	r7,r4,-32
8008ffa0:	01400804 	movi	r5,32
8008ffa4:	41ced83a 	srl	r7,r8,r7
8008ffa8:	21400a26 	beq	r4,r5,8008ffd4 <__adddf3+0x8a4>
8008ffac:	01401004 	movi	r5,64
8008ffb0:	2909c83a 	sub	r4,r5,r4
8008ffb4:	4108983a 	sll	r4,r8,r4
8008ffb8:	2448b03a 	or	r4,r4,r17
8008ffbc:	2008c03a 	cmpne	r4,r4,zero
8008ffc0:	3922b03a 	or	r17,r7,r4
8008ffc4:	0009883a 	mov	r4,zero
8008ffc8:	003f8d06 	br	8008fe00 <__adddf3+0x6d0>
8008ffcc:	0007883a 	mov	r3,zero
8008ffd0:	003fdd06 	br	8008ff48 <__adddf3+0x818>
8008ffd4:	0009883a 	mov	r4,zero
8008ffd8:	003ff706 	br	8008ffb8 <__adddf3+0x888>

8008ffdc <__divdf3>:
8008ffdc:	defff204 	addi	sp,sp,-56
8008ffe0:	dd400915 	stw	r21,36(sp)
8008ffe4:	282ad53a 	srli	r21,r5,20
8008ffe8:	dd000815 	stw	r20,32(sp)
8008ffec:	2828d7fa 	srli	r20,r5,31
8008fff0:	dc000415 	stw	r16,16(sp)
8008fff4:	04000434 	movhi	r16,16
8008fff8:	df000c15 	stw	fp,48(sp)
8008fffc:	843fffc4 	addi	r16,r16,-1
80090000:	dfc00d15 	stw	ra,52(sp)
80090004:	ddc00b15 	stw	r23,44(sp)
80090008:	dd800a15 	stw	r22,40(sp)
8009000c:	dcc00715 	stw	r19,28(sp)
80090010:	dc800615 	stw	r18,24(sp)
80090014:	dc400515 	stw	r17,20(sp)
80090018:	ad41ffcc 	andi	r21,r21,2047
8009001c:	2c20703a 	and	r16,r5,r16
80090020:	a7003fcc 	andi	fp,r20,255
80090024:	a8006126 	beq	r21,zero,800901ac <__divdf3+0x1d0>
80090028:	0081ffc4 	movi	r2,2047
8009002c:	2025883a 	mov	r18,r4
80090030:	a8803726 	beq	r21,r2,80090110 <__divdf3+0x134>
80090034:	80800434 	orhi	r2,r16,16
80090038:	100490fa 	slli	r2,r2,3
8009003c:	2020d77a 	srli	r16,r4,29
80090040:	202490fa 	slli	r18,r4,3
80090044:	ad7f0044 	addi	r21,r21,-1023
80090048:	80a0b03a 	or	r16,r16,r2
8009004c:	0027883a 	mov	r19,zero
80090050:	0013883a 	mov	r9,zero
80090054:	3804d53a 	srli	r2,r7,20
80090058:	382cd7fa 	srli	r22,r7,31
8009005c:	04400434 	movhi	r17,16
80090060:	8c7fffc4 	addi	r17,r17,-1
80090064:	1081ffcc 	andi	r2,r2,2047
80090068:	3011883a 	mov	r8,r6
8009006c:	3c62703a 	and	r17,r7,r17
80090070:	b5c03fcc 	andi	r23,r22,255
80090074:	10006c26 	beq	r2,zero,80090228 <__divdf3+0x24c>
80090078:	00c1ffc4 	movi	r3,2047
8009007c:	10c06426 	beq	r2,r3,80090210 <__divdf3+0x234>
80090080:	88c00434 	orhi	r3,r17,16
80090084:	180690fa 	slli	r3,r3,3
80090088:	3022d77a 	srli	r17,r6,29
8009008c:	301090fa 	slli	r8,r6,3
80090090:	10bf0044 	addi	r2,r2,-1023
80090094:	88e2b03a 	or	r17,r17,r3
80090098:	000f883a 	mov	r7,zero
8009009c:	a58cf03a 	xor	r6,r20,r22
800900a0:	3cc8b03a 	or	r4,r7,r19
800900a4:	a8abc83a 	sub	r21,r21,r2
800900a8:	008003c4 	movi	r2,15
800900ac:	3007883a 	mov	r3,r6
800900b0:	34c03fcc 	andi	r19,r6,255
800900b4:	11009036 	bltu	r2,r4,800902f8 <__divdf3+0x31c>
800900b8:	200890ba 	slli	r4,r4,2
800900bc:	00a00274 	movhi	r2,32777
800900c0:	10803404 	addi	r2,r2,208
800900c4:	2089883a 	add	r4,r4,r2
800900c8:	20800017 	ldw	r2,0(r4)
800900cc:	1000683a 	jmp	r2
800900d0:	800902f8 	rdprs	zero,r16,9227
800900d4:	80090148 	cmpgei	zero,r16,9221
800900d8:	800902e8 	cmpgeui	zero,r16,9227
800900dc:	8009013c 	xorhi	zero,r16,9220
800900e0:	800902e8 	cmpgeui	zero,r16,9227
800900e4:	800902bc 	xorhi	zero,r16,9226
800900e8:	800902e8 	cmpgeui	zero,r16,9227
800900ec:	8009013c 	xorhi	zero,r16,9220
800900f0:	80090148 	cmpgei	zero,r16,9221
800900f4:	80090148 	cmpgei	zero,r16,9221
800900f8:	800902bc 	xorhi	zero,r16,9226
800900fc:	8009013c 	xorhi	zero,r16,9220
80090100:	8009012c 	andhi	zero,r16,9220
80090104:	8009012c 	andhi	zero,r16,9220
80090108:	8009012c 	andhi	zero,r16,9220
8009010c:	800905dc 	xori	zero,r16,9239
80090110:	2404b03a 	or	r2,r4,r16
80090114:	1000661e 	bne	r2,zero,800902b0 <__divdf3+0x2d4>
80090118:	04c00204 	movi	r19,8
8009011c:	0021883a 	mov	r16,zero
80090120:	0025883a 	mov	r18,zero
80090124:	02400084 	movi	r9,2
80090128:	003fca06 	br	80090054 <__divdf3+0x78>
8009012c:	8023883a 	mov	r17,r16
80090130:	9011883a 	mov	r8,r18
80090134:	e02f883a 	mov	r23,fp
80090138:	480f883a 	mov	r7,r9
8009013c:	00800084 	movi	r2,2
80090140:	3881311e 	bne	r7,r2,80090608 <__divdf3+0x62c>
80090144:	b827883a 	mov	r19,r23
80090148:	98c0004c 	andi	r3,r19,1
8009014c:	0081ffc4 	movi	r2,2047
80090150:	000b883a 	mov	r5,zero
80090154:	0025883a 	mov	r18,zero
80090158:	1004953a 	slli	r2,r2,20
8009015c:	18c03fcc 	andi	r3,r3,255
80090160:	04400434 	movhi	r17,16
80090164:	8c7fffc4 	addi	r17,r17,-1
80090168:	180697fa 	slli	r3,r3,31
8009016c:	2c4a703a 	and	r5,r5,r17
80090170:	288ab03a 	or	r5,r5,r2
80090174:	28c6b03a 	or	r3,r5,r3
80090178:	9005883a 	mov	r2,r18
8009017c:	dfc00d17 	ldw	ra,52(sp)
80090180:	df000c17 	ldw	fp,48(sp)
80090184:	ddc00b17 	ldw	r23,44(sp)
80090188:	dd800a17 	ldw	r22,40(sp)
8009018c:	dd400917 	ldw	r21,36(sp)
80090190:	dd000817 	ldw	r20,32(sp)
80090194:	dcc00717 	ldw	r19,28(sp)
80090198:	dc800617 	ldw	r18,24(sp)
8009019c:	dc400517 	ldw	r17,20(sp)
800901a0:	dc000417 	ldw	r16,16(sp)
800901a4:	dec00e04 	addi	sp,sp,56
800901a8:	f800283a 	ret
800901ac:	2404b03a 	or	r2,r4,r16
800901b0:	2027883a 	mov	r19,r4
800901b4:	10003926 	beq	r2,zero,8009029c <__divdf3+0x2c0>
800901b8:	80012e26 	beq	r16,zero,80090674 <__divdf3+0x698>
800901bc:	8009883a 	mov	r4,r16
800901c0:	d9800315 	stw	r6,12(sp)
800901c4:	d9c00215 	stw	r7,8(sp)
800901c8:	00818d80 	call	800818d8 <__clzsi2>
800901cc:	d9800317 	ldw	r6,12(sp)
800901d0:	d9c00217 	ldw	r7,8(sp)
800901d4:	113ffd44 	addi	r4,r2,-11
800901d8:	00c00704 	movi	r3,28
800901dc:	19012116 	blt	r3,r4,80090664 <__divdf3+0x688>
800901e0:	00c00744 	movi	r3,29
800901e4:	147ffe04 	addi	r17,r2,-8
800901e8:	1907c83a 	sub	r3,r3,r4
800901ec:	8460983a 	sll	r16,r16,r17
800901f0:	98c6d83a 	srl	r3,r19,r3
800901f4:	9c64983a 	sll	r18,r19,r17
800901f8:	1c20b03a 	or	r16,r3,r16
800901fc:	1080fcc4 	addi	r2,r2,1011
80090200:	00abc83a 	sub	r21,zero,r2
80090204:	0027883a 	mov	r19,zero
80090208:	0013883a 	mov	r9,zero
8009020c:	003f9106 	br	80090054 <__divdf3+0x78>
80090210:	3446b03a 	or	r3,r6,r17
80090214:	18001f1e 	bne	r3,zero,80090294 <__divdf3+0x2b8>
80090218:	0023883a 	mov	r17,zero
8009021c:	0011883a 	mov	r8,zero
80090220:	01c00084 	movi	r7,2
80090224:	003f9d06 	br	8009009c <__divdf3+0xc0>
80090228:	3446b03a 	or	r3,r6,r17
8009022c:	18001526 	beq	r3,zero,80090284 <__divdf3+0x2a8>
80090230:	88011b26 	beq	r17,zero,800906a0 <__divdf3+0x6c4>
80090234:	8809883a 	mov	r4,r17
80090238:	d9800315 	stw	r6,12(sp)
8009023c:	da400115 	stw	r9,4(sp)
80090240:	00818d80 	call	800818d8 <__clzsi2>
80090244:	d9800317 	ldw	r6,12(sp)
80090248:	da400117 	ldw	r9,4(sp)
8009024c:	113ffd44 	addi	r4,r2,-11
80090250:	00c00704 	movi	r3,28
80090254:	19010e16 	blt	r3,r4,80090690 <__divdf3+0x6b4>
80090258:	00c00744 	movi	r3,29
8009025c:	123ffe04 	addi	r8,r2,-8
80090260:	1907c83a 	sub	r3,r3,r4
80090264:	8a22983a 	sll	r17,r17,r8
80090268:	30c6d83a 	srl	r3,r6,r3
8009026c:	3210983a 	sll	r8,r6,r8
80090270:	1c62b03a 	or	r17,r3,r17
80090274:	1080fcc4 	addi	r2,r2,1011
80090278:	0085c83a 	sub	r2,zero,r2
8009027c:	000f883a 	mov	r7,zero
80090280:	003f8606 	br	8009009c <__divdf3+0xc0>
80090284:	0023883a 	mov	r17,zero
80090288:	0011883a 	mov	r8,zero
8009028c:	01c00044 	movi	r7,1
80090290:	003f8206 	br	8009009c <__divdf3+0xc0>
80090294:	01c000c4 	movi	r7,3
80090298:	003f8006 	br	8009009c <__divdf3+0xc0>
8009029c:	04c00104 	movi	r19,4
800902a0:	0021883a 	mov	r16,zero
800902a4:	0025883a 	mov	r18,zero
800902a8:	02400044 	movi	r9,1
800902ac:	003f6906 	br	80090054 <__divdf3+0x78>
800902b0:	04c00304 	movi	r19,12
800902b4:	024000c4 	movi	r9,3
800902b8:	003f6606 	br	80090054 <__divdf3+0x78>
800902bc:	01400434 	movhi	r5,16
800902c0:	0007883a 	mov	r3,zero
800902c4:	297fffc4 	addi	r5,r5,-1
800902c8:	04bfffc4 	movi	r18,-1
800902cc:	0081ffc4 	movi	r2,2047
800902d0:	003fa106 	br	80090158 <__divdf3+0x17c>
800902d4:	00c00044 	movi	r3,1
800902d8:	1887c83a 	sub	r3,r3,r2
800902dc:	01000e04 	movi	r4,56
800902e0:	20c1210e 	bge	r4,r3,80090768 <__divdf3+0x78c>
800902e4:	98c0004c 	andi	r3,r19,1
800902e8:	0005883a 	mov	r2,zero
800902ec:	000b883a 	mov	r5,zero
800902f0:	0025883a 	mov	r18,zero
800902f4:	003f9806 	br	80090158 <__divdf3+0x17c>
800902f8:	8c00fd36 	bltu	r17,r16,800906f0 <__divdf3+0x714>
800902fc:	8440fb26 	beq	r16,r17,800906ec <__divdf3+0x710>
80090300:	8007883a 	mov	r3,r16
80090304:	ad7fffc4 	addi	r21,r21,-1
80090308:	0021883a 	mov	r16,zero
8009030c:	4004d63a 	srli	r2,r8,24
80090310:	8822923a 	slli	r17,r17,8
80090314:	1809883a 	mov	r4,r3
80090318:	402c923a 	slli	r22,r8,8
8009031c:	88b8b03a 	or	fp,r17,r2
80090320:	e028d43a 	srli	r20,fp,16
80090324:	d8c00015 	stw	r3,0(sp)
80090328:	e5ffffcc 	andi	r23,fp,65535
8009032c:	a00b883a 	mov	r5,r20
80090330:	008f6740 	call	8008f674 <__udivsi3>
80090334:	d8c00017 	ldw	r3,0(sp)
80090338:	a00b883a 	mov	r5,r20
8009033c:	d8800315 	stw	r2,12(sp)
80090340:	1809883a 	mov	r4,r3
80090344:	008f6d80 	call	8008f6d8 <__umodsi3>
80090348:	d9800317 	ldw	r6,12(sp)
8009034c:	1006943a 	slli	r3,r2,16
80090350:	9004d43a 	srli	r2,r18,16
80090354:	b9a3383a 	mul	r17,r23,r6
80090358:	10c4b03a 	or	r2,r2,r3
8009035c:	1440062e 	bgeu	r2,r17,80090378 <__divdf3+0x39c>
80090360:	1705883a 	add	r2,r2,fp
80090364:	30ffffc4 	addi	r3,r6,-1
80090368:	1700ee36 	bltu	r2,fp,80090724 <__divdf3+0x748>
8009036c:	1440ed2e 	bgeu	r2,r17,80090724 <__divdf3+0x748>
80090370:	31bfff84 	addi	r6,r6,-2
80090374:	1705883a 	add	r2,r2,fp
80090378:	1463c83a 	sub	r17,r2,r17
8009037c:	a00b883a 	mov	r5,r20
80090380:	8809883a 	mov	r4,r17
80090384:	d9800315 	stw	r6,12(sp)
80090388:	008f6740 	call	8008f674 <__udivsi3>
8009038c:	a00b883a 	mov	r5,r20
80090390:	8809883a 	mov	r4,r17
80090394:	d8800215 	stw	r2,8(sp)
80090398:	008f6d80 	call	8008f6d8 <__umodsi3>
8009039c:	d9c00217 	ldw	r7,8(sp)
800903a0:	1004943a 	slli	r2,r2,16
800903a4:	94bfffcc 	andi	r18,r18,65535
800903a8:	b9d1383a 	mul	r8,r23,r7
800903ac:	90a4b03a 	or	r18,r18,r2
800903b0:	d9800317 	ldw	r6,12(sp)
800903b4:	9200062e 	bgeu	r18,r8,800903d0 <__divdf3+0x3f4>
800903b8:	9725883a 	add	r18,r18,fp
800903bc:	38bfffc4 	addi	r2,r7,-1
800903c0:	9700d636 	bltu	r18,fp,8009071c <__divdf3+0x740>
800903c4:	9200d52e 	bgeu	r18,r8,8009071c <__divdf3+0x740>
800903c8:	39ffff84 	addi	r7,r7,-2
800903cc:	9725883a 	add	r18,r18,fp
800903d0:	3004943a 	slli	r2,r6,16
800903d4:	b012d43a 	srli	r9,r22,16
800903d8:	b1bfffcc 	andi	r6,r22,65535
800903dc:	11e2b03a 	or	r17,r2,r7
800903e0:	8806d43a 	srli	r3,r17,16
800903e4:	893fffcc 	andi	r4,r17,65535
800903e8:	218b383a 	mul	r5,r4,r6
800903ec:	30c5383a 	mul	r2,r6,r3
800903f0:	2249383a 	mul	r4,r4,r9
800903f4:	280ed43a 	srli	r7,r5,16
800903f8:	9225c83a 	sub	r18,r18,r8
800903fc:	2089883a 	add	r4,r4,r2
80090400:	3909883a 	add	r4,r7,r4
80090404:	1a47383a 	mul	r3,r3,r9
80090408:	2080022e 	bgeu	r4,r2,80090414 <__divdf3+0x438>
8009040c:	00800074 	movhi	r2,1
80090410:	1887883a 	add	r3,r3,r2
80090414:	2004d43a 	srli	r2,r4,16
80090418:	2008943a 	slli	r4,r4,16
8009041c:	297fffcc 	andi	r5,r5,65535
80090420:	10c7883a 	add	r3,r2,r3
80090424:	2149883a 	add	r4,r4,r5
80090428:	90c0a536 	bltu	r18,r3,800906c0 <__divdf3+0x6e4>
8009042c:	90c0bf26 	beq	r18,r3,8009072c <__divdf3+0x750>
80090430:	90c7c83a 	sub	r3,r18,r3
80090434:	810fc83a 	sub	r7,r16,r4
80090438:	81e5803a 	cmpltu	r18,r16,r7
8009043c:	1ca5c83a 	sub	r18,r3,r18
80090440:	e480c126 	beq	fp,r18,80090748 <__divdf3+0x76c>
80090444:	a00b883a 	mov	r5,r20
80090448:	9009883a 	mov	r4,r18
8009044c:	d9800315 	stw	r6,12(sp)
80090450:	d9c00215 	stw	r7,8(sp)
80090454:	da400115 	stw	r9,4(sp)
80090458:	008f6740 	call	8008f674 <__udivsi3>
8009045c:	a00b883a 	mov	r5,r20
80090460:	9009883a 	mov	r4,r18
80090464:	d8800015 	stw	r2,0(sp)
80090468:	008f6d80 	call	8008f6d8 <__umodsi3>
8009046c:	d9c00217 	ldw	r7,8(sp)
80090470:	da000017 	ldw	r8,0(sp)
80090474:	1006943a 	slli	r3,r2,16
80090478:	3804d43a 	srli	r2,r7,16
8009047c:	ba21383a 	mul	r16,r23,r8
80090480:	d9800317 	ldw	r6,12(sp)
80090484:	10c4b03a 	or	r2,r2,r3
80090488:	da400117 	ldw	r9,4(sp)
8009048c:	1400062e 	bgeu	r2,r16,800904a8 <__divdf3+0x4cc>
80090490:	1705883a 	add	r2,r2,fp
80090494:	40ffffc4 	addi	r3,r8,-1
80090498:	1700ad36 	bltu	r2,fp,80090750 <__divdf3+0x774>
8009049c:	1400ac2e 	bgeu	r2,r16,80090750 <__divdf3+0x774>
800904a0:	423fff84 	addi	r8,r8,-2
800904a4:	1705883a 	add	r2,r2,fp
800904a8:	1421c83a 	sub	r16,r2,r16
800904ac:	a00b883a 	mov	r5,r20
800904b0:	8009883a 	mov	r4,r16
800904b4:	d9800315 	stw	r6,12(sp)
800904b8:	d9c00215 	stw	r7,8(sp)
800904bc:	da000015 	stw	r8,0(sp)
800904c0:	da400115 	stw	r9,4(sp)
800904c4:	008f6740 	call	8008f674 <__udivsi3>
800904c8:	8009883a 	mov	r4,r16
800904cc:	a00b883a 	mov	r5,r20
800904d0:	1025883a 	mov	r18,r2
800904d4:	008f6d80 	call	8008f6d8 <__umodsi3>
800904d8:	d9c00217 	ldw	r7,8(sp)
800904dc:	1004943a 	slli	r2,r2,16
800904e0:	bcaf383a 	mul	r23,r23,r18
800904e4:	393fffcc 	andi	r4,r7,65535
800904e8:	2088b03a 	or	r4,r4,r2
800904ec:	d9800317 	ldw	r6,12(sp)
800904f0:	da000017 	ldw	r8,0(sp)
800904f4:	da400117 	ldw	r9,4(sp)
800904f8:	25c0062e 	bgeu	r4,r23,80090514 <__divdf3+0x538>
800904fc:	2709883a 	add	r4,r4,fp
80090500:	90bfffc4 	addi	r2,r18,-1
80090504:	27009436 	bltu	r4,fp,80090758 <__divdf3+0x77c>
80090508:	25c0932e 	bgeu	r4,r23,80090758 <__divdf3+0x77c>
8009050c:	94bfff84 	addi	r18,r18,-2
80090510:	2709883a 	add	r4,r4,fp
80090514:	4004943a 	slli	r2,r8,16
80090518:	25efc83a 	sub	r23,r4,r23
8009051c:	1490b03a 	or	r8,r2,r18
80090520:	4008d43a 	srli	r4,r8,16
80090524:	40ffffcc 	andi	r3,r8,65535
80090528:	30c5383a 	mul	r2,r6,r3
8009052c:	1a47383a 	mul	r3,r3,r9
80090530:	310d383a 	mul	r6,r6,r4
80090534:	100ad43a 	srli	r5,r2,16
80090538:	4913383a 	mul	r9,r9,r4
8009053c:	1987883a 	add	r3,r3,r6
80090540:	28c7883a 	add	r3,r5,r3
80090544:	1980022e 	bgeu	r3,r6,80090550 <__divdf3+0x574>
80090548:	01000074 	movhi	r4,1
8009054c:	4913883a 	add	r9,r9,r4
80090550:	1808d43a 	srli	r4,r3,16
80090554:	1806943a 	slli	r3,r3,16
80090558:	10bfffcc 	andi	r2,r2,65535
8009055c:	2253883a 	add	r9,r4,r9
80090560:	1887883a 	add	r3,r3,r2
80090564:	ba403836 	bltu	r23,r9,80090648 <__divdf3+0x66c>
80090568:	ba403626 	beq	r23,r9,80090644 <__divdf3+0x668>
8009056c:	42000054 	ori	r8,r8,1
80090570:	a880ffc4 	addi	r2,r21,1023
80090574:	00bf570e 	bge	zero,r2,800902d4 <__divdf3+0x2f8>
80090578:	40c001cc 	andi	r3,r8,7
8009057c:	18000726 	beq	r3,zero,8009059c <__divdf3+0x5c0>
80090580:	40c003cc 	andi	r3,r8,15
80090584:	01000104 	movi	r4,4
80090588:	19000426 	beq	r3,r4,8009059c <__divdf3+0x5c0>
8009058c:	4107883a 	add	r3,r8,r4
80090590:	1a11803a 	cmpltu	r8,r3,r8
80090594:	8a23883a 	add	r17,r17,r8
80090598:	1811883a 	mov	r8,r3
8009059c:	88c0402c 	andhi	r3,r17,256
800905a0:	18000426 	beq	r3,zero,800905b4 <__divdf3+0x5d8>
800905a4:	00ffc034 	movhi	r3,65280
800905a8:	18ffffc4 	addi	r3,r3,-1
800905ac:	a8810004 	addi	r2,r21,1024
800905b0:	88e2703a 	and	r17,r17,r3
800905b4:	00c1ff84 	movi	r3,2046
800905b8:	18bee316 	blt	r3,r2,80090148 <__divdf3+0x16c>
800905bc:	8824977a 	slli	r18,r17,29
800905c0:	4010d0fa 	srli	r8,r8,3
800905c4:	8822927a 	slli	r17,r17,9
800905c8:	1081ffcc 	andi	r2,r2,2047
800905cc:	9224b03a 	or	r18,r18,r8
800905d0:	880ad33a 	srli	r5,r17,12
800905d4:	98c0004c 	andi	r3,r19,1
800905d8:	003edf06 	br	80090158 <__divdf3+0x17c>
800905dc:	8080022c 	andhi	r2,r16,8
800905e0:	10001226 	beq	r2,zero,8009062c <__divdf3+0x650>
800905e4:	8880022c 	andhi	r2,r17,8
800905e8:	1000101e 	bne	r2,zero,8009062c <__divdf3+0x650>
800905ec:	00800434 	movhi	r2,16
800905f0:	89400234 	orhi	r5,r17,8
800905f4:	10bfffc4 	addi	r2,r2,-1
800905f8:	b007883a 	mov	r3,r22
800905fc:	288a703a 	and	r5,r5,r2
80090600:	4025883a 	mov	r18,r8
80090604:	003f3106 	br	800902cc <__divdf3+0x2f0>
80090608:	008000c4 	movi	r2,3
8009060c:	3880a626 	beq	r7,r2,800908a8 <__divdf3+0x8cc>
80090610:	00800044 	movi	r2,1
80090614:	3880521e 	bne	r7,r2,80090760 <__divdf3+0x784>
80090618:	b807883a 	mov	r3,r23
8009061c:	0005883a 	mov	r2,zero
80090620:	000b883a 	mov	r5,zero
80090624:	0025883a 	mov	r18,zero
80090628:	003ecb06 	br	80090158 <__divdf3+0x17c>
8009062c:	00800434 	movhi	r2,16
80090630:	81400234 	orhi	r5,r16,8
80090634:	10bfffc4 	addi	r2,r2,-1
80090638:	a007883a 	mov	r3,r20
8009063c:	288a703a 	and	r5,r5,r2
80090640:	003f2206 	br	800902cc <__divdf3+0x2f0>
80090644:	183fca26 	beq	r3,zero,80090570 <__divdf3+0x594>
80090648:	e5ef883a 	add	r23,fp,r23
8009064c:	40bfffc4 	addi	r2,r8,-1
80090650:	bf00392e 	bgeu	r23,fp,80090738 <__divdf3+0x75c>
80090654:	1011883a 	mov	r8,r2
80090658:	ba7fc41e 	bne	r23,r9,8009056c <__divdf3+0x590>
8009065c:	b0ffc31e 	bne	r22,r3,8009056c <__divdf3+0x590>
80090660:	003fc306 	br	80090570 <__divdf3+0x594>
80090664:	143ff604 	addi	r16,r2,-40
80090668:	9c20983a 	sll	r16,r19,r16
8009066c:	0025883a 	mov	r18,zero
80090670:	003ee206 	br	800901fc <__divdf3+0x220>
80090674:	d9800315 	stw	r6,12(sp)
80090678:	d9c00215 	stw	r7,8(sp)
8009067c:	00818d80 	call	800818d8 <__clzsi2>
80090680:	10800804 	addi	r2,r2,32
80090684:	d9c00217 	ldw	r7,8(sp)
80090688:	d9800317 	ldw	r6,12(sp)
8009068c:	003ed106 	br	800901d4 <__divdf3+0x1f8>
80090690:	147ff604 	addi	r17,r2,-40
80090694:	3462983a 	sll	r17,r6,r17
80090698:	0011883a 	mov	r8,zero
8009069c:	003ef506 	br	80090274 <__divdf3+0x298>
800906a0:	3009883a 	mov	r4,r6
800906a4:	d9800315 	stw	r6,12(sp)
800906a8:	da400115 	stw	r9,4(sp)
800906ac:	00818d80 	call	800818d8 <__clzsi2>
800906b0:	10800804 	addi	r2,r2,32
800906b4:	da400117 	ldw	r9,4(sp)
800906b8:	d9800317 	ldw	r6,12(sp)
800906bc:	003ee306 	br	8009024c <__divdf3+0x270>
800906c0:	85a1883a 	add	r16,r16,r22
800906c4:	8585803a 	cmpltu	r2,r16,r22
800906c8:	1705883a 	add	r2,r2,fp
800906cc:	14a5883a 	add	r18,r2,r18
800906d0:	88bfffc4 	addi	r2,r17,-1
800906d4:	e4800c2e 	bgeu	fp,r18,80090708 <__divdf3+0x72c>
800906d8:	90c03e36 	bltu	r18,r3,800907d4 <__divdf3+0x7f8>
800906dc:	1c806926 	beq	r3,r18,80090884 <__divdf3+0x8a8>
800906e0:	90c7c83a 	sub	r3,r18,r3
800906e4:	1023883a 	mov	r17,r2
800906e8:	003f5206 	br	80090434 <__divdf3+0x458>
800906ec:	923f0436 	bltu	r18,r8,80090300 <__divdf3+0x324>
800906f0:	800897fa 	slli	r4,r16,31
800906f4:	9004d07a 	srli	r2,r18,1
800906f8:	8006d07a 	srli	r3,r16,1
800906fc:	902097fa 	slli	r16,r18,31
80090700:	20a4b03a 	or	r18,r4,r2
80090704:	003f0106 	br	8009030c <__divdf3+0x330>
80090708:	e4bff51e 	bne	fp,r18,800906e0 <__divdf3+0x704>
8009070c:	85bff22e 	bgeu	r16,r22,800906d8 <__divdf3+0x6fc>
80090710:	e0c7c83a 	sub	r3,fp,r3
80090714:	1023883a 	mov	r17,r2
80090718:	003f4606 	br	80090434 <__divdf3+0x458>
8009071c:	100f883a 	mov	r7,r2
80090720:	003f2b06 	br	800903d0 <__divdf3+0x3f4>
80090724:	180d883a 	mov	r6,r3
80090728:	003f1306 	br	80090378 <__divdf3+0x39c>
8009072c:	813fe436 	bltu	r16,r4,800906c0 <__divdf3+0x6e4>
80090730:	0007883a 	mov	r3,zero
80090734:	003f3f06 	br	80090434 <__divdf3+0x458>
80090738:	ba402c36 	bltu	r23,r9,800907ec <__divdf3+0x810>
8009073c:	4dc05426 	beq	r9,r23,80090890 <__divdf3+0x8b4>
80090740:	1011883a 	mov	r8,r2
80090744:	003f8906 	br	8009056c <__divdf3+0x590>
80090748:	023fffc4 	movi	r8,-1
8009074c:	003f8806 	br	80090570 <__divdf3+0x594>
80090750:	1811883a 	mov	r8,r3
80090754:	003f5406 	br	800904a8 <__divdf3+0x4cc>
80090758:	1025883a 	mov	r18,r2
8009075c:	003f6d06 	br	80090514 <__divdf3+0x538>
80090760:	b827883a 	mov	r19,r23
80090764:	003f8206 	br	80090570 <__divdf3+0x594>
80090768:	010007c4 	movi	r4,31
8009076c:	20c02616 	blt	r4,r3,80090808 <__divdf3+0x82c>
80090770:	00800804 	movi	r2,32
80090774:	10c5c83a 	sub	r2,r2,r3
80090778:	888a983a 	sll	r5,r17,r2
8009077c:	40c8d83a 	srl	r4,r8,r3
80090780:	4084983a 	sll	r2,r8,r2
80090784:	88e2d83a 	srl	r17,r17,r3
80090788:	2906b03a 	or	r3,r5,r4
8009078c:	1004c03a 	cmpne	r2,r2,zero
80090790:	1886b03a 	or	r3,r3,r2
80090794:	188001cc 	andi	r2,r3,7
80090798:	10000726 	beq	r2,zero,800907b8 <__divdf3+0x7dc>
8009079c:	188003cc 	andi	r2,r3,15
800907a0:	01000104 	movi	r4,4
800907a4:	11000426 	beq	r2,r4,800907b8 <__divdf3+0x7dc>
800907a8:	1805883a 	mov	r2,r3
800907ac:	10c00104 	addi	r3,r2,4
800907b0:	1885803a 	cmpltu	r2,r3,r2
800907b4:	88a3883a 	add	r17,r17,r2
800907b8:	8880202c 	andhi	r2,r17,128
800907bc:	10002726 	beq	r2,zero,8009085c <__divdf3+0x880>
800907c0:	98c0004c 	andi	r3,r19,1
800907c4:	00800044 	movi	r2,1
800907c8:	000b883a 	mov	r5,zero
800907cc:	0025883a 	mov	r18,zero
800907d0:	003e6106 	br	80090158 <__divdf3+0x17c>
800907d4:	85a1883a 	add	r16,r16,r22
800907d8:	8585803a 	cmpltu	r2,r16,r22
800907dc:	1705883a 	add	r2,r2,fp
800907e0:	14a5883a 	add	r18,r2,r18
800907e4:	8c7fff84 	addi	r17,r17,-2
800907e8:	003f1106 	br	80090430 <__divdf3+0x454>
800907ec:	b589883a 	add	r4,r22,r22
800907f0:	25ad803a 	cmpltu	r22,r4,r22
800907f4:	b739883a 	add	fp,r22,fp
800907f8:	40bfff84 	addi	r2,r8,-2
800907fc:	bf2f883a 	add	r23,r23,fp
80090800:	202d883a 	mov	r22,r4
80090804:	003f9306 	br	80090654 <__divdf3+0x678>
80090808:	013ff844 	movi	r4,-31
8009080c:	2085c83a 	sub	r2,r4,r2
80090810:	8888d83a 	srl	r4,r17,r2
80090814:	00800804 	movi	r2,32
80090818:	18802126 	beq	r3,r2,800908a0 <__divdf3+0x8c4>
8009081c:	00801004 	movi	r2,64
80090820:	10c5c83a 	sub	r2,r2,r3
80090824:	8884983a 	sll	r2,r17,r2
80090828:	1204b03a 	or	r2,r2,r8
8009082c:	1004c03a 	cmpne	r2,r2,zero
80090830:	2084b03a 	or	r2,r4,r2
80090834:	144001cc 	andi	r17,r2,7
80090838:	88000d1e 	bne	r17,zero,80090870 <__divdf3+0x894>
8009083c:	000b883a 	mov	r5,zero
80090840:	1024d0fa 	srli	r18,r2,3
80090844:	98c0004c 	andi	r3,r19,1
80090848:	0005883a 	mov	r2,zero
8009084c:	9464b03a 	or	r18,r18,r17
80090850:	003e4106 	br	80090158 <__divdf3+0x17c>
80090854:	1007883a 	mov	r3,r2
80090858:	0023883a 	mov	r17,zero
8009085c:	880a927a 	slli	r5,r17,9
80090860:	1805883a 	mov	r2,r3
80090864:	8822977a 	slli	r17,r17,29
80090868:	280ad33a 	srli	r5,r5,12
8009086c:	003ff406 	br	80090840 <__divdf3+0x864>
80090870:	10c003cc 	andi	r3,r2,15
80090874:	01000104 	movi	r4,4
80090878:	193ff626 	beq	r3,r4,80090854 <__divdf3+0x878>
8009087c:	0023883a 	mov	r17,zero
80090880:	003fca06 	br	800907ac <__divdf3+0x7d0>
80090884:	813fd336 	bltu	r16,r4,800907d4 <__divdf3+0x7f8>
80090888:	1023883a 	mov	r17,r2
8009088c:	003fa806 	br	80090730 <__divdf3+0x754>
80090890:	b0ffd636 	bltu	r22,r3,800907ec <__divdf3+0x810>
80090894:	1011883a 	mov	r8,r2
80090898:	b0ff341e 	bne	r22,r3,8009056c <__divdf3+0x590>
8009089c:	003f3406 	br	80090570 <__divdf3+0x594>
800908a0:	0005883a 	mov	r2,zero
800908a4:	003fe006 	br	80090828 <__divdf3+0x84c>
800908a8:	00800434 	movhi	r2,16
800908ac:	89400234 	orhi	r5,r17,8
800908b0:	10bfffc4 	addi	r2,r2,-1
800908b4:	b807883a 	mov	r3,r23
800908b8:	288a703a 	and	r5,r5,r2
800908bc:	4025883a 	mov	r18,r8
800908c0:	003e8206 	br	800902cc <__divdf3+0x2f0>

800908c4 <__eqdf2>:
800908c4:	2804d53a 	srli	r2,r5,20
800908c8:	3806d53a 	srli	r3,r7,20
800908cc:	02000434 	movhi	r8,16
800908d0:	423fffc4 	addi	r8,r8,-1
800908d4:	1081ffcc 	andi	r2,r2,2047
800908d8:	0281ffc4 	movi	r10,2047
800908dc:	2a12703a 	and	r9,r5,r8
800908e0:	18c1ffcc 	andi	r3,r3,2047
800908e4:	3a10703a 	and	r8,r7,r8
800908e8:	280ad7fa 	srli	r5,r5,31
800908ec:	380ed7fa 	srli	r7,r7,31
800908f0:	12801026 	beq	r2,r10,80090934 <__eqdf2+0x70>
800908f4:	0281ffc4 	movi	r10,2047
800908f8:	1a800a26 	beq	r3,r10,80090924 <__eqdf2+0x60>
800908fc:	10c00226 	beq	r2,r3,80090908 <__eqdf2+0x44>
80090900:	00800044 	movi	r2,1
80090904:	f800283a 	ret
80090908:	4a3ffd1e 	bne	r9,r8,80090900 <__eqdf2+0x3c>
8009090c:	21bffc1e 	bne	r4,r6,80090900 <__eqdf2+0x3c>
80090910:	29c00c26 	beq	r5,r7,80090944 <__eqdf2+0x80>
80090914:	103ffa1e 	bne	r2,zero,80090900 <__eqdf2+0x3c>
80090918:	2244b03a 	or	r2,r4,r9
8009091c:	1004c03a 	cmpne	r2,r2,zero
80090920:	f800283a 	ret
80090924:	3214b03a 	or	r10,r6,r8
80090928:	503ff426 	beq	r10,zero,800908fc <__eqdf2+0x38>
8009092c:	00800044 	movi	r2,1
80090930:	f800283a 	ret
80090934:	2254b03a 	or	r10,r4,r9
80090938:	503fee26 	beq	r10,zero,800908f4 <__eqdf2+0x30>
8009093c:	00800044 	movi	r2,1
80090940:	f800283a 	ret
80090944:	0005883a 	mov	r2,zero
80090948:	f800283a 	ret

8009094c <__ledf2>:
8009094c:	2804d53a 	srli	r2,r5,20
80090950:	3810d53a 	srli	r8,r7,20
80090954:	00c00434 	movhi	r3,16
80090958:	18ffffc4 	addi	r3,r3,-1
8009095c:	1081ffcc 	andi	r2,r2,2047
80090960:	0241ffc4 	movi	r9,2047
80090964:	28d4703a 	and	r10,r5,r3
80090968:	4201ffcc 	andi	r8,r8,2047
8009096c:	38c6703a 	and	r3,r7,r3
80090970:	280ad7fa 	srli	r5,r5,31
80090974:	380ed7fa 	srli	r7,r7,31
80090978:	12401f26 	beq	r2,r9,800909f8 <__ledf2+0xac>
8009097c:	0241ffc4 	movi	r9,2047
80090980:	42401426 	beq	r8,r9,800909d4 <__ledf2+0x88>
80090984:	1000091e 	bne	r2,zero,800909ac <__ledf2+0x60>
80090988:	2296b03a 	or	r11,r4,r10
8009098c:	5813003a 	cmpeq	r9,r11,zero
80090990:	29403fcc 	andi	r5,r5,255
80090994:	40000a1e 	bne	r8,zero,800909c0 <__ledf2+0x74>
80090998:	30d8b03a 	or	r12,r6,r3
8009099c:	6000081e 	bne	r12,zero,800909c0 <__ledf2+0x74>
800909a0:	0005883a 	mov	r2,zero
800909a4:	5800111e 	bne	r11,zero,800909ec <__ledf2+0xa0>
800909a8:	f800283a 	ret
800909ac:	29403fcc 	andi	r5,r5,255
800909b0:	40000c1e 	bne	r8,zero,800909e4 <__ledf2+0x98>
800909b4:	30d2b03a 	or	r9,r6,r3
800909b8:	48000c26 	beq	r9,zero,800909ec <__ledf2+0xa0>
800909bc:	0013883a 	mov	r9,zero
800909c0:	39c03fcc 	andi	r7,r7,255
800909c4:	48000826 	beq	r9,zero,800909e8 <__ledf2+0x9c>
800909c8:	38001126 	beq	r7,zero,80090a10 <__ledf2+0xc4>
800909cc:	00800044 	movi	r2,1
800909d0:	f800283a 	ret
800909d4:	30d2b03a 	or	r9,r6,r3
800909d8:	483fea26 	beq	r9,zero,80090984 <__ledf2+0x38>
800909dc:	00800084 	movi	r2,2
800909e0:	f800283a 	ret
800909e4:	39c03fcc 	andi	r7,r7,255
800909e8:	39400726 	beq	r7,r5,80090a08 <__ledf2+0xbc>
800909ec:	2800081e 	bne	r5,zero,80090a10 <__ledf2+0xc4>
800909f0:	00800044 	movi	r2,1
800909f4:	f800283a 	ret
800909f8:	2292b03a 	or	r9,r4,r10
800909fc:	483fdf26 	beq	r9,zero,8009097c <__ledf2+0x30>
80090a00:	00800084 	movi	r2,2
80090a04:	f800283a 	ret
80090a08:	4080030e 	bge	r8,r2,80090a18 <__ledf2+0xcc>
80090a0c:	383fef26 	beq	r7,zero,800909cc <__ledf2+0x80>
80090a10:	00bfffc4 	movi	r2,-1
80090a14:	f800283a 	ret
80090a18:	123feb16 	blt	r2,r8,800909c8 <__ledf2+0x7c>
80090a1c:	1abff336 	bltu	r3,r10,800909ec <__ledf2+0xa0>
80090a20:	50c00326 	beq	r10,r3,80090a30 <__ledf2+0xe4>
80090a24:	50c0042e 	bgeu	r10,r3,80090a38 <__ledf2+0xec>
80090a28:	283fe81e 	bne	r5,zero,800909cc <__ledf2+0x80>
80090a2c:	003ff806 	br	80090a10 <__ledf2+0xc4>
80090a30:	313fee36 	bltu	r6,r4,800909ec <__ledf2+0xa0>
80090a34:	21bffc36 	bltu	r4,r6,80090a28 <__ledf2+0xdc>
80090a38:	0005883a 	mov	r2,zero
80090a3c:	f800283a 	ret

80090a40 <__subdf3>:
80090a40:	02000434 	movhi	r8,16
80090a44:	423fffc4 	addi	r8,r8,-1
80090a48:	defffb04 	addi	sp,sp,-20
80090a4c:	2a14703a 	and	r10,r5,r8
80090a50:	3812d53a 	srli	r9,r7,20
80090a54:	3a10703a 	and	r8,r7,r8
80090a58:	2006d77a 	srli	r3,r4,29
80090a5c:	3004d77a 	srli	r2,r6,29
80090a60:	dc000015 	stw	r16,0(sp)
80090a64:	501490fa 	slli	r10,r10,3
80090a68:	2820d53a 	srli	r16,r5,20
80090a6c:	401090fa 	slli	r8,r8,3
80090a70:	dc800215 	stw	r18,8(sp)
80090a74:	dc400115 	stw	r17,4(sp)
80090a78:	dfc00415 	stw	ra,16(sp)
80090a7c:	202290fa 	slli	r17,r4,3
80090a80:	dcc00315 	stw	r19,12(sp)
80090a84:	4a41ffcc 	andi	r9,r9,2047
80090a88:	0101ffc4 	movi	r4,2047
80090a8c:	2824d7fa 	srli	r18,r5,31
80090a90:	8401ffcc 	andi	r16,r16,2047
80090a94:	50c6b03a 	or	r3,r10,r3
80090a98:	380ed7fa 	srli	r7,r7,31
80090a9c:	408ab03a 	or	r5,r8,r2
80090aa0:	300c90fa 	slli	r6,r6,3
80090aa4:	49009626 	beq	r9,r4,80090d00 <__subdf3+0x2c0>
80090aa8:	39c0005c 	xori	r7,r7,1
80090aac:	8245c83a 	sub	r2,r16,r9
80090ab0:	3c807426 	beq	r7,r18,80090c84 <__subdf3+0x244>
80090ab4:	0080af0e 	bge	zero,r2,80090d74 <__subdf3+0x334>
80090ab8:	48002a1e 	bne	r9,zero,80090b64 <__subdf3+0x124>
80090abc:	2988b03a 	or	r4,r5,r6
80090ac0:	20009a1e 	bne	r4,zero,80090d2c <__subdf3+0x2ec>
80090ac4:	888001cc 	andi	r2,r17,7
80090ac8:	10000726 	beq	r2,zero,80090ae8 <__subdf3+0xa8>
80090acc:	888003cc 	andi	r2,r17,15
80090ad0:	01000104 	movi	r4,4
80090ad4:	11000426 	beq	r2,r4,80090ae8 <__subdf3+0xa8>
80090ad8:	890b883a 	add	r5,r17,r4
80090adc:	2c63803a 	cmpltu	r17,r5,r17
80090ae0:	1c47883a 	add	r3,r3,r17
80090ae4:	2823883a 	mov	r17,r5
80090ae8:	1880202c 	andhi	r2,r3,128
80090aec:	10005926 	beq	r2,zero,80090c54 <__subdf3+0x214>
80090af0:	84000044 	addi	r16,r16,1
80090af4:	0081ffc4 	movi	r2,2047
80090af8:	8080be26 	beq	r16,r2,80090df4 <__subdf3+0x3b4>
80090afc:	017fe034 	movhi	r5,65408
80090b00:	297fffc4 	addi	r5,r5,-1
80090b04:	1946703a 	and	r3,r3,r5
80090b08:	1804977a 	slli	r2,r3,29
80090b0c:	1806927a 	slli	r3,r3,9
80090b10:	8822d0fa 	srli	r17,r17,3
80090b14:	8401ffcc 	andi	r16,r16,2047
80090b18:	180ad33a 	srli	r5,r3,12
80090b1c:	9100004c 	andi	r4,r18,1
80090b20:	1444b03a 	or	r2,r2,r17
80090b24:	80c1ffcc 	andi	r3,r16,2047
80090b28:	1820953a 	slli	r16,r3,20
80090b2c:	20c03fcc 	andi	r3,r4,255
80090b30:	180897fa 	slli	r4,r3,31
80090b34:	00c00434 	movhi	r3,16
80090b38:	18ffffc4 	addi	r3,r3,-1
80090b3c:	28c6703a 	and	r3,r5,r3
80090b40:	1c06b03a 	or	r3,r3,r16
80090b44:	1906b03a 	or	r3,r3,r4
80090b48:	dfc00417 	ldw	ra,16(sp)
80090b4c:	dcc00317 	ldw	r19,12(sp)
80090b50:	dc800217 	ldw	r18,8(sp)
80090b54:	dc400117 	ldw	r17,4(sp)
80090b58:	dc000017 	ldw	r16,0(sp)
80090b5c:	dec00504 	addi	sp,sp,20
80090b60:	f800283a 	ret
80090b64:	0101ffc4 	movi	r4,2047
80090b68:	813fd626 	beq	r16,r4,80090ac4 <__subdf3+0x84>
80090b6c:	29402034 	orhi	r5,r5,128
80090b70:	01000e04 	movi	r4,56
80090b74:	2080a316 	blt	r4,r2,80090e04 <__subdf3+0x3c4>
80090b78:	010007c4 	movi	r4,31
80090b7c:	2080c616 	blt	r4,r2,80090e98 <__subdf3+0x458>
80090b80:	01000804 	movi	r4,32
80090b84:	2089c83a 	sub	r4,r4,r2
80090b88:	2910983a 	sll	r8,r5,r4
80090b8c:	308ed83a 	srl	r7,r6,r2
80090b90:	3108983a 	sll	r4,r6,r4
80090b94:	2884d83a 	srl	r2,r5,r2
80090b98:	41ccb03a 	or	r6,r8,r7
80090b9c:	2008c03a 	cmpne	r4,r4,zero
80090ba0:	310cb03a 	or	r6,r6,r4
80090ba4:	898dc83a 	sub	r6,r17,r6
80090ba8:	89a3803a 	cmpltu	r17,r17,r6
80090bac:	1887c83a 	sub	r3,r3,r2
80090bb0:	1c47c83a 	sub	r3,r3,r17
80090bb4:	3023883a 	mov	r17,r6
80090bb8:	1880202c 	andhi	r2,r3,128
80090bbc:	10002326 	beq	r2,zero,80090c4c <__subdf3+0x20c>
80090bc0:	04c02034 	movhi	r19,128
80090bc4:	9cffffc4 	addi	r19,r19,-1
80090bc8:	1ce6703a 	and	r19,r3,r19
80090bcc:	98007a26 	beq	r19,zero,80090db8 <__subdf3+0x378>
80090bd0:	9809883a 	mov	r4,r19
80090bd4:	00818d80 	call	800818d8 <__clzsi2>
80090bd8:	113ffe04 	addi	r4,r2,-8
80090bdc:	00c007c4 	movi	r3,31
80090be0:	19007b16 	blt	r3,r4,80090dd0 <__subdf3+0x390>
80090be4:	00800804 	movi	r2,32
80090be8:	1105c83a 	sub	r2,r2,r4
80090bec:	8884d83a 	srl	r2,r17,r2
80090bf0:	9906983a 	sll	r3,r19,r4
80090bf4:	8922983a 	sll	r17,r17,r4
80090bf8:	10c4b03a 	or	r2,r2,r3
80090bfc:	24007816 	blt	r4,r16,80090de0 <__subdf3+0x3a0>
80090c00:	2421c83a 	sub	r16,r4,r16
80090c04:	80c00044 	addi	r3,r16,1
80090c08:	010007c4 	movi	r4,31
80090c0c:	20c09516 	blt	r4,r3,80090e64 <__subdf3+0x424>
80090c10:	01400804 	movi	r5,32
80090c14:	28cbc83a 	sub	r5,r5,r3
80090c18:	88c8d83a 	srl	r4,r17,r3
80090c1c:	8962983a 	sll	r17,r17,r5
80090c20:	114a983a 	sll	r5,r2,r5
80090c24:	10c6d83a 	srl	r3,r2,r3
80090c28:	8804c03a 	cmpne	r2,r17,zero
80090c2c:	290ab03a 	or	r5,r5,r4
80090c30:	28a2b03a 	or	r17,r5,r2
80090c34:	0021883a 	mov	r16,zero
80090c38:	003fa206 	br	80090ac4 <__subdf3+0x84>
80090c3c:	2090b03a 	or	r8,r4,r2
80090c40:	40018e26 	beq	r8,zero,8009127c <__subdf3+0x83c>
80090c44:	1007883a 	mov	r3,r2
80090c48:	2023883a 	mov	r17,r4
80090c4c:	888001cc 	andi	r2,r17,7
80090c50:	103f9e1e 	bne	r2,zero,80090acc <__subdf3+0x8c>
80090c54:	1804977a 	slli	r2,r3,29
80090c58:	8822d0fa 	srli	r17,r17,3
80090c5c:	1810d0fa 	srli	r8,r3,3
80090c60:	9100004c 	andi	r4,r18,1
80090c64:	1444b03a 	or	r2,r2,r17
80090c68:	00c1ffc4 	movi	r3,2047
80090c6c:	80c02826 	beq	r16,r3,80090d10 <__subdf3+0x2d0>
80090c70:	01400434 	movhi	r5,16
80090c74:	297fffc4 	addi	r5,r5,-1
80090c78:	80e0703a 	and	r16,r16,r3
80090c7c:	414a703a 	and	r5,r8,r5
80090c80:	003fa806 	br	80090b24 <__subdf3+0xe4>
80090c84:	0080630e 	bge	zero,r2,80090e14 <__subdf3+0x3d4>
80090c88:	48003026 	beq	r9,zero,80090d4c <__subdf3+0x30c>
80090c8c:	0101ffc4 	movi	r4,2047
80090c90:	813f8c26 	beq	r16,r4,80090ac4 <__subdf3+0x84>
80090c94:	29402034 	orhi	r5,r5,128
80090c98:	01000e04 	movi	r4,56
80090c9c:	2080a90e 	bge	r4,r2,80090f44 <__subdf3+0x504>
80090ca0:	298cb03a 	or	r6,r5,r6
80090ca4:	3012c03a 	cmpne	r9,r6,zero
80090ca8:	0005883a 	mov	r2,zero
80090cac:	4c53883a 	add	r9,r9,r17
80090cb0:	4c63803a 	cmpltu	r17,r9,r17
80090cb4:	10c7883a 	add	r3,r2,r3
80090cb8:	88c7883a 	add	r3,r17,r3
80090cbc:	4823883a 	mov	r17,r9
80090cc0:	1880202c 	andhi	r2,r3,128
80090cc4:	1000d026 	beq	r2,zero,80091008 <__subdf3+0x5c8>
80090cc8:	84000044 	addi	r16,r16,1
80090ccc:	0081ffc4 	movi	r2,2047
80090cd0:	8080fe26 	beq	r16,r2,800910cc <__subdf3+0x68c>
80090cd4:	00bfe034 	movhi	r2,65408
80090cd8:	10bfffc4 	addi	r2,r2,-1
80090cdc:	1886703a 	and	r3,r3,r2
80090ce0:	880ad07a 	srli	r5,r17,1
80090ce4:	180497fa 	slli	r2,r3,31
80090ce8:	8900004c 	andi	r4,r17,1
80090cec:	2922b03a 	or	r17,r5,r4
80090cf0:	1806d07a 	srli	r3,r3,1
80090cf4:	1462b03a 	or	r17,r2,r17
80090cf8:	3825883a 	mov	r18,r7
80090cfc:	003f7106 	br	80090ac4 <__subdf3+0x84>
80090d00:	2984b03a 	or	r2,r5,r6
80090d04:	103f6826 	beq	r2,zero,80090aa8 <__subdf3+0x68>
80090d08:	39c03fcc 	andi	r7,r7,255
80090d0c:	003f6706 	br	80090aac <__subdf3+0x6c>
80090d10:	4086b03a 	or	r3,r8,r2
80090d14:	18015226 	beq	r3,zero,80091260 <__subdf3+0x820>
80090d18:	00c00434 	movhi	r3,16
80090d1c:	41400234 	orhi	r5,r8,8
80090d20:	18ffffc4 	addi	r3,r3,-1
80090d24:	28ca703a 	and	r5,r5,r3
80090d28:	003f7e06 	br	80090b24 <__subdf3+0xe4>
80090d2c:	10bfffc4 	addi	r2,r2,-1
80090d30:	1000491e 	bne	r2,zero,80090e58 <__subdf3+0x418>
80090d34:	898fc83a 	sub	r7,r17,r6
80090d38:	89e3803a 	cmpltu	r17,r17,r7
80090d3c:	1947c83a 	sub	r3,r3,r5
80090d40:	1c47c83a 	sub	r3,r3,r17
80090d44:	3823883a 	mov	r17,r7
80090d48:	003f9b06 	br	80090bb8 <__subdf3+0x178>
80090d4c:	2988b03a 	or	r4,r5,r6
80090d50:	203f5c26 	beq	r4,zero,80090ac4 <__subdf3+0x84>
80090d54:	10bfffc4 	addi	r2,r2,-1
80090d58:	1000931e 	bne	r2,zero,80090fa8 <__subdf3+0x568>
80090d5c:	898d883a 	add	r6,r17,r6
80090d60:	3463803a 	cmpltu	r17,r6,r17
80090d64:	1947883a 	add	r3,r3,r5
80090d68:	88c7883a 	add	r3,r17,r3
80090d6c:	3023883a 	mov	r17,r6
80090d70:	003fd306 	br	80090cc0 <__subdf3+0x280>
80090d74:	1000541e 	bne	r2,zero,80090ec8 <__subdf3+0x488>
80090d78:	80800044 	addi	r2,r16,1
80090d7c:	1081ffcc 	andi	r2,r2,2047
80090d80:	01000044 	movi	r4,1
80090d84:	2080a20e 	bge	r4,r2,80091010 <__subdf3+0x5d0>
80090d88:	8989c83a 	sub	r4,r17,r6
80090d8c:	8905803a 	cmpltu	r2,r17,r4
80090d90:	1967c83a 	sub	r19,r3,r5
80090d94:	98a7c83a 	sub	r19,r19,r2
80090d98:	9880202c 	andhi	r2,r19,128
80090d9c:	10006326 	beq	r2,zero,80090f2c <__subdf3+0x4ec>
80090da0:	3463c83a 	sub	r17,r6,r17
80090da4:	28c7c83a 	sub	r3,r5,r3
80090da8:	344d803a 	cmpltu	r6,r6,r17
80090dac:	19a7c83a 	sub	r19,r3,r6
80090db0:	3825883a 	mov	r18,r7
80090db4:	983f861e 	bne	r19,zero,80090bd0 <__subdf3+0x190>
80090db8:	8809883a 	mov	r4,r17
80090dbc:	00818d80 	call	800818d8 <__clzsi2>
80090dc0:	10800804 	addi	r2,r2,32
80090dc4:	113ffe04 	addi	r4,r2,-8
80090dc8:	00c007c4 	movi	r3,31
80090dcc:	193f850e 	bge	r3,r4,80090be4 <__subdf3+0x1a4>
80090dd0:	10bff604 	addi	r2,r2,-40
80090dd4:	8884983a 	sll	r2,r17,r2
80090dd8:	0023883a 	mov	r17,zero
80090ddc:	243f880e 	bge	r4,r16,80090c00 <__subdf3+0x1c0>
80090de0:	00ffe034 	movhi	r3,65408
80090de4:	18ffffc4 	addi	r3,r3,-1
80090de8:	8121c83a 	sub	r16,r16,r4
80090dec:	10c6703a 	and	r3,r2,r3
80090df0:	003f3406 	br	80090ac4 <__subdf3+0x84>
80090df4:	9100004c 	andi	r4,r18,1
80090df8:	000b883a 	mov	r5,zero
80090dfc:	0005883a 	mov	r2,zero
80090e00:	003f4806 	br	80090b24 <__subdf3+0xe4>
80090e04:	298cb03a 	or	r6,r5,r6
80090e08:	300cc03a 	cmpne	r6,r6,zero
80090e0c:	0005883a 	mov	r2,zero
80090e10:	003f6406 	br	80090ba4 <__subdf3+0x164>
80090e14:	10009a1e 	bne	r2,zero,80091080 <__subdf3+0x640>
80090e18:	82400044 	addi	r9,r16,1
80090e1c:	4881ffcc 	andi	r2,r9,2047
80090e20:	02800044 	movi	r10,1
80090e24:	5080670e 	bge	r10,r2,80090fc4 <__subdf3+0x584>
80090e28:	0081ffc4 	movi	r2,2047
80090e2c:	4880af26 	beq	r9,r2,800910ec <__subdf3+0x6ac>
80090e30:	898d883a 	add	r6,r17,r6
80090e34:	1945883a 	add	r2,r3,r5
80090e38:	3447803a 	cmpltu	r3,r6,r17
80090e3c:	1887883a 	add	r3,r3,r2
80090e40:	182297fa 	slli	r17,r3,31
80090e44:	300cd07a 	srli	r6,r6,1
80090e48:	1806d07a 	srli	r3,r3,1
80090e4c:	4821883a 	mov	r16,r9
80090e50:	89a2b03a 	or	r17,r17,r6
80090e54:	003f1b06 	br	80090ac4 <__subdf3+0x84>
80090e58:	0101ffc4 	movi	r4,2047
80090e5c:	813f441e 	bne	r16,r4,80090b70 <__subdf3+0x130>
80090e60:	003f1806 	br	80090ac4 <__subdf3+0x84>
80090e64:	843ff844 	addi	r16,r16,-31
80090e68:	01400804 	movi	r5,32
80090e6c:	1408d83a 	srl	r4,r2,r16
80090e70:	19405026 	beq	r3,r5,80090fb4 <__subdf3+0x574>
80090e74:	01401004 	movi	r5,64
80090e78:	28c7c83a 	sub	r3,r5,r3
80090e7c:	10c4983a 	sll	r2,r2,r3
80090e80:	88a2b03a 	or	r17,r17,r2
80090e84:	8822c03a 	cmpne	r17,r17,zero
80090e88:	2462b03a 	or	r17,r4,r17
80090e8c:	0007883a 	mov	r3,zero
80090e90:	0021883a 	mov	r16,zero
80090e94:	003f6d06 	br	80090c4c <__subdf3+0x20c>
80090e98:	11fff804 	addi	r7,r2,-32
80090e9c:	01000804 	movi	r4,32
80090ea0:	29ced83a 	srl	r7,r5,r7
80090ea4:	11004526 	beq	r2,r4,80090fbc <__subdf3+0x57c>
80090ea8:	01001004 	movi	r4,64
80090eac:	2089c83a 	sub	r4,r4,r2
80090eb0:	2904983a 	sll	r2,r5,r4
80090eb4:	118cb03a 	or	r6,r2,r6
80090eb8:	300cc03a 	cmpne	r6,r6,zero
80090ebc:	398cb03a 	or	r6,r7,r6
80090ec0:	0005883a 	mov	r2,zero
80090ec4:	003f3706 	br	80090ba4 <__subdf3+0x164>
80090ec8:	80002a26 	beq	r16,zero,80090f74 <__subdf3+0x534>
80090ecc:	0101ffc4 	movi	r4,2047
80090ed0:	49006626 	beq	r9,r4,8009106c <__subdf3+0x62c>
80090ed4:	0085c83a 	sub	r2,zero,r2
80090ed8:	18c02034 	orhi	r3,r3,128
80090edc:	01000e04 	movi	r4,56
80090ee0:	20807e16 	blt	r4,r2,800910dc <__subdf3+0x69c>
80090ee4:	010007c4 	movi	r4,31
80090ee8:	2080e716 	blt	r4,r2,80091288 <__subdf3+0x848>
80090eec:	01000804 	movi	r4,32
80090ef0:	2089c83a 	sub	r4,r4,r2
80090ef4:	1914983a 	sll	r10,r3,r4
80090ef8:	8890d83a 	srl	r8,r17,r2
80090efc:	8908983a 	sll	r4,r17,r4
80090f00:	1884d83a 	srl	r2,r3,r2
80090f04:	5222b03a 	or	r17,r10,r8
80090f08:	2006c03a 	cmpne	r3,r4,zero
80090f0c:	88e2b03a 	or	r17,r17,r3
80090f10:	3463c83a 	sub	r17,r6,r17
80090f14:	2885c83a 	sub	r2,r5,r2
80090f18:	344d803a 	cmpltu	r6,r6,r17
80090f1c:	1187c83a 	sub	r3,r2,r6
80090f20:	4821883a 	mov	r16,r9
80090f24:	3825883a 	mov	r18,r7
80090f28:	003f2306 	br	80090bb8 <__subdf3+0x178>
80090f2c:	24d0b03a 	or	r8,r4,r19
80090f30:	40001b1e 	bne	r8,zero,80090fa0 <__subdf3+0x560>
80090f34:	0005883a 	mov	r2,zero
80090f38:	0009883a 	mov	r4,zero
80090f3c:	0021883a 	mov	r16,zero
80090f40:	003f4906 	br	80090c68 <__subdf3+0x228>
80090f44:	010007c4 	movi	r4,31
80090f48:	20803a16 	blt	r4,r2,80091034 <__subdf3+0x5f4>
80090f4c:	01000804 	movi	r4,32
80090f50:	2089c83a 	sub	r4,r4,r2
80090f54:	2912983a 	sll	r9,r5,r4
80090f58:	3090d83a 	srl	r8,r6,r2
80090f5c:	3108983a 	sll	r4,r6,r4
80090f60:	2884d83a 	srl	r2,r5,r2
80090f64:	4a12b03a 	or	r9,r9,r8
80090f68:	2008c03a 	cmpne	r4,r4,zero
80090f6c:	4912b03a 	or	r9,r9,r4
80090f70:	003f4e06 	br	80090cac <__subdf3+0x26c>
80090f74:	1c48b03a 	or	r4,r3,r17
80090f78:	20003c26 	beq	r4,zero,8009106c <__subdf3+0x62c>
80090f7c:	0084303a 	nor	r2,zero,r2
80090f80:	1000381e 	bne	r2,zero,80091064 <__subdf3+0x624>
80090f84:	3463c83a 	sub	r17,r6,r17
80090f88:	28c5c83a 	sub	r2,r5,r3
80090f8c:	344d803a 	cmpltu	r6,r6,r17
80090f90:	1187c83a 	sub	r3,r2,r6
80090f94:	4821883a 	mov	r16,r9
80090f98:	3825883a 	mov	r18,r7
80090f9c:	003f0606 	br	80090bb8 <__subdf3+0x178>
80090fa0:	2023883a 	mov	r17,r4
80090fa4:	003f0906 	br	80090bcc <__subdf3+0x18c>
80090fa8:	0101ffc4 	movi	r4,2047
80090fac:	813f3a1e 	bne	r16,r4,80090c98 <__subdf3+0x258>
80090fb0:	003ec406 	br	80090ac4 <__subdf3+0x84>
80090fb4:	0005883a 	mov	r2,zero
80090fb8:	003fb106 	br	80090e80 <__subdf3+0x440>
80090fbc:	0005883a 	mov	r2,zero
80090fc0:	003fbc06 	br	80090eb4 <__subdf3+0x474>
80090fc4:	1c44b03a 	or	r2,r3,r17
80090fc8:	80008e1e 	bne	r16,zero,80091204 <__subdf3+0x7c4>
80090fcc:	1000c826 	beq	r2,zero,800912f0 <__subdf3+0x8b0>
80090fd0:	2984b03a 	or	r2,r5,r6
80090fd4:	103ebb26 	beq	r2,zero,80090ac4 <__subdf3+0x84>
80090fd8:	8989883a 	add	r4,r17,r6
80090fdc:	1945883a 	add	r2,r3,r5
80090fe0:	2447803a 	cmpltu	r3,r4,r17
80090fe4:	1887883a 	add	r3,r3,r2
80090fe8:	1880202c 	andhi	r2,r3,128
80090fec:	2023883a 	mov	r17,r4
80090ff0:	103f1626 	beq	r2,zero,80090c4c <__subdf3+0x20c>
80090ff4:	00bfe034 	movhi	r2,65408
80090ff8:	10bfffc4 	addi	r2,r2,-1
80090ffc:	5021883a 	mov	r16,r10
80091000:	1886703a 	and	r3,r3,r2
80091004:	003eaf06 	br	80090ac4 <__subdf3+0x84>
80091008:	3825883a 	mov	r18,r7
8009100c:	003f0f06 	br	80090c4c <__subdf3+0x20c>
80091010:	1c44b03a 	or	r2,r3,r17
80091014:	8000251e 	bne	r16,zero,800910ac <__subdf3+0x66c>
80091018:	1000661e 	bne	r2,zero,800911b4 <__subdf3+0x774>
8009101c:	2990b03a 	or	r8,r5,r6
80091020:	40009626 	beq	r8,zero,8009127c <__subdf3+0x83c>
80091024:	2807883a 	mov	r3,r5
80091028:	3023883a 	mov	r17,r6
8009102c:	3825883a 	mov	r18,r7
80091030:	003ea406 	br	80090ac4 <__subdf3+0x84>
80091034:	127ff804 	addi	r9,r2,-32
80091038:	01000804 	movi	r4,32
8009103c:	2a52d83a 	srl	r9,r5,r9
80091040:	11008c26 	beq	r2,r4,80091274 <__subdf3+0x834>
80091044:	01001004 	movi	r4,64
80091048:	2085c83a 	sub	r2,r4,r2
8009104c:	2884983a 	sll	r2,r5,r2
80091050:	118cb03a 	or	r6,r2,r6
80091054:	300cc03a 	cmpne	r6,r6,zero
80091058:	4992b03a 	or	r9,r9,r6
8009105c:	0005883a 	mov	r2,zero
80091060:	003f1206 	br	80090cac <__subdf3+0x26c>
80091064:	0101ffc4 	movi	r4,2047
80091068:	493f9c1e 	bne	r9,r4,80090edc <__subdf3+0x49c>
8009106c:	2807883a 	mov	r3,r5
80091070:	3023883a 	mov	r17,r6
80091074:	4821883a 	mov	r16,r9
80091078:	3825883a 	mov	r18,r7
8009107c:	003e9106 	br	80090ac4 <__subdf3+0x84>
80091080:	80001f1e 	bne	r16,zero,80091100 <__subdf3+0x6c0>
80091084:	1c48b03a 	or	r4,r3,r17
80091088:	20005a26 	beq	r4,zero,800911f4 <__subdf3+0x7b4>
8009108c:	0084303a 	nor	r2,zero,r2
80091090:	1000561e 	bne	r2,zero,800911ec <__subdf3+0x7ac>
80091094:	89a3883a 	add	r17,r17,r6
80091098:	1945883a 	add	r2,r3,r5
8009109c:	898d803a 	cmpltu	r6,r17,r6
800910a0:	3087883a 	add	r3,r6,r2
800910a4:	4821883a 	mov	r16,r9
800910a8:	003f0506 	br	80090cc0 <__subdf3+0x280>
800910ac:	10002b1e 	bne	r2,zero,8009115c <__subdf3+0x71c>
800910b0:	2984b03a 	or	r2,r5,r6
800910b4:	10008026 	beq	r2,zero,800912b8 <__subdf3+0x878>
800910b8:	2807883a 	mov	r3,r5
800910bc:	3023883a 	mov	r17,r6
800910c0:	3825883a 	mov	r18,r7
800910c4:	0401ffc4 	movi	r16,2047
800910c8:	003e7e06 	br	80090ac4 <__subdf3+0x84>
800910cc:	3809883a 	mov	r4,r7
800910d0:	0011883a 	mov	r8,zero
800910d4:	0005883a 	mov	r2,zero
800910d8:	003ee306 	br	80090c68 <__subdf3+0x228>
800910dc:	1c62b03a 	or	r17,r3,r17
800910e0:	8822c03a 	cmpne	r17,r17,zero
800910e4:	0005883a 	mov	r2,zero
800910e8:	003f8906 	br	80090f10 <__subdf3+0x4d0>
800910ec:	3809883a 	mov	r4,r7
800910f0:	4821883a 	mov	r16,r9
800910f4:	0011883a 	mov	r8,zero
800910f8:	0005883a 	mov	r2,zero
800910fc:	003eda06 	br	80090c68 <__subdf3+0x228>
80091100:	0101ffc4 	movi	r4,2047
80091104:	49003b26 	beq	r9,r4,800911f4 <__subdf3+0x7b4>
80091108:	0085c83a 	sub	r2,zero,r2
8009110c:	18c02034 	orhi	r3,r3,128
80091110:	01000e04 	movi	r4,56
80091114:	20806e16 	blt	r4,r2,800912d0 <__subdf3+0x890>
80091118:	010007c4 	movi	r4,31
8009111c:	20807716 	blt	r4,r2,800912fc <__subdf3+0x8bc>
80091120:	01000804 	movi	r4,32
80091124:	2089c83a 	sub	r4,r4,r2
80091128:	1914983a 	sll	r10,r3,r4
8009112c:	8890d83a 	srl	r8,r17,r2
80091130:	8908983a 	sll	r4,r17,r4
80091134:	1884d83a 	srl	r2,r3,r2
80091138:	5222b03a 	or	r17,r10,r8
8009113c:	2006c03a 	cmpne	r3,r4,zero
80091140:	88e2b03a 	or	r17,r17,r3
80091144:	89a3883a 	add	r17,r17,r6
80091148:	1145883a 	add	r2,r2,r5
8009114c:	898d803a 	cmpltu	r6,r17,r6
80091150:	3087883a 	add	r3,r6,r2
80091154:	4821883a 	mov	r16,r9
80091158:	003ed906 	br	80090cc0 <__subdf3+0x280>
8009115c:	2984b03a 	or	r2,r5,r6
80091160:	10004226 	beq	r2,zero,8009126c <__subdf3+0x82c>
80091164:	1808d0fa 	srli	r4,r3,3
80091168:	8822d0fa 	srli	r17,r17,3
8009116c:	1806977a 	slli	r3,r3,29
80091170:	2080022c 	andhi	r2,r4,8
80091174:	1c62b03a 	or	r17,r3,r17
80091178:	10000826 	beq	r2,zero,8009119c <__subdf3+0x75c>
8009117c:	2812d0fa 	srli	r9,r5,3
80091180:	4880022c 	andhi	r2,r9,8
80091184:	1000051e 	bne	r2,zero,8009119c <__subdf3+0x75c>
80091188:	300cd0fa 	srli	r6,r6,3
8009118c:	2804977a 	slli	r2,r5,29
80091190:	4809883a 	mov	r4,r9
80091194:	3825883a 	mov	r18,r7
80091198:	11a2b03a 	or	r17,r2,r6
8009119c:	8806d77a 	srli	r3,r17,29
800911a0:	200890fa 	slli	r4,r4,3
800911a4:	882290fa 	slli	r17,r17,3
800911a8:	0401ffc4 	movi	r16,2047
800911ac:	1906b03a 	or	r3,r3,r4
800911b0:	003e4406 	br	80090ac4 <__subdf3+0x84>
800911b4:	2984b03a 	or	r2,r5,r6
800911b8:	103e4226 	beq	r2,zero,80090ac4 <__subdf3+0x84>
800911bc:	8989c83a 	sub	r4,r17,r6
800911c0:	8911803a 	cmpltu	r8,r17,r4
800911c4:	1945c83a 	sub	r2,r3,r5
800911c8:	1205c83a 	sub	r2,r2,r8
800911cc:	1200202c 	andhi	r8,r2,128
800911d0:	403e9a26 	beq	r8,zero,80090c3c <__subdf3+0x1fc>
800911d4:	3463c83a 	sub	r17,r6,r17
800911d8:	28c5c83a 	sub	r2,r5,r3
800911dc:	344d803a 	cmpltu	r6,r6,r17
800911e0:	1187c83a 	sub	r3,r2,r6
800911e4:	3825883a 	mov	r18,r7
800911e8:	003e3606 	br	80090ac4 <__subdf3+0x84>
800911ec:	0101ffc4 	movi	r4,2047
800911f0:	493fc71e 	bne	r9,r4,80091110 <__subdf3+0x6d0>
800911f4:	2807883a 	mov	r3,r5
800911f8:	3023883a 	mov	r17,r6
800911fc:	4821883a 	mov	r16,r9
80091200:	003e3006 	br	80090ac4 <__subdf3+0x84>
80091204:	10003626 	beq	r2,zero,800912e0 <__subdf3+0x8a0>
80091208:	2984b03a 	or	r2,r5,r6
8009120c:	10001726 	beq	r2,zero,8009126c <__subdf3+0x82c>
80091210:	1808d0fa 	srli	r4,r3,3
80091214:	8822d0fa 	srli	r17,r17,3
80091218:	1806977a 	slli	r3,r3,29
8009121c:	2080022c 	andhi	r2,r4,8
80091220:	1c62b03a 	or	r17,r3,r17
80091224:	10000726 	beq	r2,zero,80091244 <__subdf3+0x804>
80091228:	2812d0fa 	srli	r9,r5,3
8009122c:	4880022c 	andhi	r2,r9,8
80091230:	1000041e 	bne	r2,zero,80091244 <__subdf3+0x804>
80091234:	300cd0fa 	srli	r6,r6,3
80091238:	2804977a 	slli	r2,r5,29
8009123c:	4809883a 	mov	r4,r9
80091240:	11a2b03a 	or	r17,r2,r6
80091244:	8806d77a 	srli	r3,r17,29
80091248:	200890fa 	slli	r4,r4,3
8009124c:	882290fa 	slli	r17,r17,3
80091250:	3825883a 	mov	r18,r7
80091254:	1906b03a 	or	r3,r3,r4
80091258:	0401ffc4 	movi	r16,2047
8009125c:	003e1906 	br	80090ac4 <__subdf3+0x84>
80091260:	000b883a 	mov	r5,zero
80091264:	0005883a 	mov	r2,zero
80091268:	003e2e06 	br	80090b24 <__subdf3+0xe4>
8009126c:	0401ffc4 	movi	r16,2047
80091270:	003e1406 	br	80090ac4 <__subdf3+0x84>
80091274:	0005883a 	mov	r2,zero
80091278:	003f7506 	br	80091050 <__subdf3+0x610>
8009127c:	0005883a 	mov	r2,zero
80091280:	0009883a 	mov	r4,zero
80091284:	003e7806 	br	80090c68 <__subdf3+0x228>
80091288:	123ff804 	addi	r8,r2,-32
8009128c:	01000804 	movi	r4,32
80091290:	1a10d83a 	srl	r8,r3,r8
80091294:	11002526 	beq	r2,r4,8009132c <__subdf3+0x8ec>
80091298:	01001004 	movi	r4,64
8009129c:	2085c83a 	sub	r2,r4,r2
800912a0:	1884983a 	sll	r2,r3,r2
800912a4:	1444b03a 	or	r2,r2,r17
800912a8:	1004c03a 	cmpne	r2,r2,zero
800912ac:	40a2b03a 	or	r17,r8,r2
800912b0:	0005883a 	mov	r2,zero
800912b4:	003f1606 	br	80090f10 <__subdf3+0x4d0>
800912b8:	02000434 	movhi	r8,16
800912bc:	0009883a 	mov	r4,zero
800912c0:	423fffc4 	addi	r8,r8,-1
800912c4:	00bfffc4 	movi	r2,-1
800912c8:	0401ffc4 	movi	r16,2047
800912cc:	003e6606 	br	80090c68 <__subdf3+0x228>
800912d0:	1c62b03a 	or	r17,r3,r17
800912d4:	8822c03a 	cmpne	r17,r17,zero
800912d8:	0005883a 	mov	r2,zero
800912dc:	003f9906 	br	80091144 <__subdf3+0x704>
800912e0:	2807883a 	mov	r3,r5
800912e4:	3023883a 	mov	r17,r6
800912e8:	0401ffc4 	movi	r16,2047
800912ec:	003df506 	br	80090ac4 <__subdf3+0x84>
800912f0:	2807883a 	mov	r3,r5
800912f4:	3023883a 	mov	r17,r6
800912f8:	003df206 	br	80090ac4 <__subdf3+0x84>
800912fc:	123ff804 	addi	r8,r2,-32
80091300:	01000804 	movi	r4,32
80091304:	1a10d83a 	srl	r8,r3,r8
80091308:	11000a26 	beq	r2,r4,80091334 <__subdf3+0x8f4>
8009130c:	01001004 	movi	r4,64
80091310:	2085c83a 	sub	r2,r4,r2
80091314:	1884983a 	sll	r2,r3,r2
80091318:	1444b03a 	or	r2,r2,r17
8009131c:	1004c03a 	cmpne	r2,r2,zero
80091320:	40a2b03a 	or	r17,r8,r2
80091324:	0005883a 	mov	r2,zero
80091328:	003f8606 	br	80091144 <__subdf3+0x704>
8009132c:	0005883a 	mov	r2,zero
80091330:	003fdc06 	br	800912a4 <__subdf3+0x864>
80091334:	0005883a 	mov	r2,zero
80091338:	003ff706 	br	80091318 <__subdf3+0x8d8>

8009133c <__fixdfsi>:
8009133c:	280cd53a 	srli	r6,r5,20
80091340:	00c00434 	movhi	r3,16
80091344:	18ffffc4 	addi	r3,r3,-1
80091348:	3181ffcc 	andi	r6,r6,2047
8009134c:	01c0ff84 	movi	r7,1022
80091350:	28c6703a 	and	r3,r5,r3
80091354:	280ad7fa 	srli	r5,r5,31
80091358:	3980120e 	bge	r7,r6,800913a4 <__fixdfsi+0x68>
8009135c:	00810744 	movi	r2,1053
80091360:	11800c16 	blt	r2,r6,80091394 <__fixdfsi+0x58>
80091364:	00810cc4 	movi	r2,1075
80091368:	1185c83a 	sub	r2,r2,r6
8009136c:	01c007c4 	movi	r7,31
80091370:	18c00434 	orhi	r3,r3,16
80091374:	38800d16 	blt	r7,r2,800913ac <__fixdfsi+0x70>
80091378:	31befb44 	addi	r6,r6,-1043
8009137c:	2084d83a 	srl	r2,r4,r2
80091380:	1986983a 	sll	r3,r3,r6
80091384:	1884b03a 	or	r2,r3,r2
80091388:	28000726 	beq	r5,zero,800913a8 <__fixdfsi+0x6c>
8009138c:	0085c83a 	sub	r2,zero,r2
80091390:	f800283a 	ret
80091394:	00a00034 	movhi	r2,32768
80091398:	10bfffc4 	addi	r2,r2,-1
8009139c:	2885883a 	add	r2,r5,r2
800913a0:	f800283a 	ret
800913a4:	0005883a 	mov	r2,zero
800913a8:	f800283a 	ret
800913ac:	008104c4 	movi	r2,1043
800913b0:	1185c83a 	sub	r2,r2,r6
800913b4:	1884d83a 	srl	r2,r3,r2
800913b8:	003ff306 	br	80091388 <__fixdfsi+0x4c>

800913bc <__floatsidf>:
800913bc:	defffd04 	addi	sp,sp,-12
800913c0:	dfc00215 	stw	ra,8(sp)
800913c4:	dc400115 	stw	r17,4(sp)
800913c8:	dc000015 	stw	r16,0(sp)
800913cc:	20002b26 	beq	r4,zero,8009147c <__floatsidf+0xc0>
800913d0:	2023883a 	mov	r17,r4
800913d4:	2020d7fa 	srli	r16,r4,31
800913d8:	20002d16 	blt	r4,zero,80091490 <__floatsidf+0xd4>
800913dc:	8809883a 	mov	r4,r17
800913e0:	00818d80 	call	800818d8 <__clzsi2>
800913e4:	01410784 	movi	r5,1054
800913e8:	288bc83a 	sub	r5,r5,r2
800913ec:	01010cc4 	movi	r4,1075
800913f0:	2149c83a 	sub	r4,r4,r5
800913f4:	00c007c4 	movi	r3,31
800913f8:	1900160e 	bge	r3,r4,80091454 <__floatsidf+0x98>
800913fc:	00c104c4 	movi	r3,1043
80091400:	1947c83a 	sub	r3,r3,r5
80091404:	88c6983a 	sll	r3,r17,r3
80091408:	00800434 	movhi	r2,16
8009140c:	10bfffc4 	addi	r2,r2,-1
80091410:	1886703a 	and	r3,r3,r2
80091414:	2941ffcc 	andi	r5,r5,2047
80091418:	800d883a 	mov	r6,r16
8009141c:	0005883a 	mov	r2,zero
80091420:	280a953a 	slli	r5,r5,20
80091424:	31803fcc 	andi	r6,r6,255
80091428:	01000434 	movhi	r4,16
8009142c:	300c97fa 	slli	r6,r6,31
80091430:	213fffc4 	addi	r4,r4,-1
80091434:	1906703a 	and	r3,r3,r4
80091438:	1946b03a 	or	r3,r3,r5
8009143c:	1986b03a 	or	r3,r3,r6
80091440:	dfc00217 	ldw	ra,8(sp)
80091444:	dc400117 	ldw	r17,4(sp)
80091448:	dc000017 	ldw	r16,0(sp)
8009144c:	dec00304 	addi	sp,sp,12
80091450:	f800283a 	ret
80091454:	00c002c4 	movi	r3,11
80091458:	1887c83a 	sub	r3,r3,r2
8009145c:	88c6d83a 	srl	r3,r17,r3
80091460:	8904983a 	sll	r2,r17,r4
80091464:	01000434 	movhi	r4,16
80091468:	213fffc4 	addi	r4,r4,-1
8009146c:	2941ffcc 	andi	r5,r5,2047
80091470:	1906703a 	and	r3,r3,r4
80091474:	800d883a 	mov	r6,r16
80091478:	003fe906 	br	80091420 <__floatsidf+0x64>
8009147c:	000d883a 	mov	r6,zero
80091480:	000b883a 	mov	r5,zero
80091484:	0007883a 	mov	r3,zero
80091488:	0005883a 	mov	r2,zero
8009148c:	003fe406 	br	80091420 <__floatsidf+0x64>
80091490:	0123c83a 	sub	r17,zero,r4
80091494:	003fd106 	br	800913dc <__floatsidf+0x20>

80091498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80091498:	defffe04 	addi	sp,sp,-8
8009149c:	dfc00115 	stw	ra,4(sp)
800914a0:	df000015 	stw	fp,0(sp)
800914a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
800914a8:	d0a01a17 	ldw	r2,-32664(gp)
800914ac:	10000326 	beq	r2,zero,800914bc <alt_get_errno+0x24>
800914b0:	d0a01a17 	ldw	r2,-32664(gp)
800914b4:	103ee83a 	callr	r2
800914b8:	00000106 	br	800914c0 <alt_get_errno+0x28>
800914bc:	d0a78704 	addi	r2,gp,-25060
}
800914c0:	e037883a 	mov	sp,fp
800914c4:	dfc00117 	ldw	ra,4(sp)
800914c8:	df000017 	ldw	fp,0(sp)
800914cc:	dec00204 	addi	sp,sp,8
800914d0:	f800283a 	ret

800914d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
800914d4:	defffb04 	addi	sp,sp,-20
800914d8:	dfc00415 	stw	ra,16(sp)
800914dc:	df000315 	stw	fp,12(sp)
800914e0:	df000304 	addi	fp,sp,12
800914e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
800914e8:	e0bfff17 	ldw	r2,-4(fp)
800914ec:	10000616 	blt	r2,zero,80091508 <close+0x34>
800914f0:	e0bfff17 	ldw	r2,-4(fp)
800914f4:	10c00324 	muli	r3,r2,12
800914f8:	00a00274 	movhi	r2,32777
800914fc:	109dfa04 	addi	r2,r2,30696
80091500:	1885883a 	add	r2,r3,r2
80091504:	00000106 	br	8009150c <close+0x38>
80091508:	0005883a 	mov	r2,zero
8009150c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
80091510:	e0bffd17 	ldw	r2,-12(fp)
80091514:	10001926 	beq	r2,zero,8009157c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
80091518:	e0bffd17 	ldw	r2,-12(fp)
8009151c:	10800017 	ldw	r2,0(r2)
80091520:	10800417 	ldw	r2,16(r2)
80091524:	10000626 	beq	r2,zero,80091540 <close+0x6c>
80091528:	e0bffd17 	ldw	r2,-12(fp)
8009152c:	10800017 	ldw	r2,0(r2)
80091530:	10800417 	ldw	r2,16(r2)
80091534:	e13ffd17 	ldw	r4,-12(fp)
80091538:	103ee83a 	callr	r2
8009153c:	00000106 	br	80091544 <close+0x70>
80091540:	0005883a 	mov	r2,zero
80091544:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
80091548:	e13fff17 	ldw	r4,-4(fp)
8009154c:	0091b940 	call	80091b94 <alt_release_fd>
    if (rval < 0)
80091550:	e0bffe17 	ldw	r2,-8(fp)
80091554:	1000070e 	bge	r2,zero,80091574 <close+0xa0>
    {
      ALT_ERRNO = -rval;
80091558:	00914980 	call	80091498 <alt_get_errno>
8009155c:	1007883a 	mov	r3,r2
80091560:	e0bffe17 	ldw	r2,-8(fp)
80091564:	0085c83a 	sub	r2,zero,r2
80091568:	18800015 	stw	r2,0(r3)
      return -1;
8009156c:	00bfffc4 	movi	r2,-1
80091570:	00000706 	br	80091590 <close+0xbc>
    }
    return 0;
80091574:	0005883a 	mov	r2,zero
80091578:	00000506 	br	80091590 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8009157c:	00914980 	call	80091498 <alt_get_errno>
80091580:	1007883a 	mov	r3,r2
80091584:	00801444 	movi	r2,81
80091588:	18800015 	stw	r2,0(r3)
    return -1;
8009158c:	00bfffc4 	movi	r2,-1
  }
}
80091590:	e037883a 	mov	sp,fp
80091594:	dfc00117 	ldw	ra,4(sp)
80091598:	df000017 	ldw	fp,0(sp)
8009159c:	dec00204 	addi	sp,sp,8
800915a0:	f800283a 	ret

800915a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
800915a4:	defffc04 	addi	sp,sp,-16
800915a8:	df000315 	stw	fp,12(sp)
800915ac:	df000304 	addi	fp,sp,12
800915b0:	e13ffd15 	stw	r4,-12(fp)
800915b4:	e17ffe15 	stw	r5,-8(fp)
800915b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
800915bc:	e0bfff17 	ldw	r2,-4(fp)
}
800915c0:	e037883a 	mov	sp,fp
800915c4:	df000017 	ldw	fp,0(sp)
800915c8:	dec00104 	addi	sp,sp,4
800915cc:	f800283a 	ret

800915d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
800915d0:	defffe04 	addi	sp,sp,-8
800915d4:	dfc00115 	stw	ra,4(sp)
800915d8:	df000015 	stw	fp,0(sp)
800915dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
800915e0:	d0a01a17 	ldw	r2,-32664(gp)
800915e4:	10000326 	beq	r2,zero,800915f4 <alt_get_errno+0x24>
800915e8:	d0a01a17 	ldw	r2,-32664(gp)
800915ec:	103ee83a 	callr	r2
800915f0:	00000106 	br	800915f8 <alt_get_errno+0x28>
800915f4:	d0a78704 	addi	r2,gp,-25060
}
800915f8:	e037883a 	mov	sp,fp
800915fc:	dfc00117 	ldw	ra,4(sp)
80091600:	df000017 	ldw	fp,0(sp)
80091604:	dec00204 	addi	sp,sp,8
80091608:	f800283a 	ret

8009160c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8009160c:	defffb04 	addi	sp,sp,-20
80091610:	dfc00415 	stw	ra,16(sp)
80091614:	df000315 	stw	fp,12(sp)
80091618:	df000304 	addi	fp,sp,12
8009161c:	e13ffe15 	stw	r4,-8(fp)
80091620:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80091624:	e0bffe17 	ldw	r2,-8(fp)
80091628:	10000616 	blt	r2,zero,80091644 <fstat+0x38>
8009162c:	e0bffe17 	ldw	r2,-8(fp)
80091630:	10c00324 	muli	r3,r2,12
80091634:	00a00274 	movhi	r2,32777
80091638:	109dfa04 	addi	r2,r2,30696
8009163c:	1885883a 	add	r2,r3,r2
80091640:	00000106 	br	80091648 <fstat+0x3c>
80091644:	0005883a 	mov	r2,zero
80091648:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8009164c:	e0bffd17 	ldw	r2,-12(fp)
80091650:	10001026 	beq	r2,zero,80091694 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
80091654:	e0bffd17 	ldw	r2,-12(fp)
80091658:	10800017 	ldw	r2,0(r2)
8009165c:	10800817 	ldw	r2,32(r2)
80091660:	10000726 	beq	r2,zero,80091680 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
80091664:	e0bffd17 	ldw	r2,-12(fp)
80091668:	10800017 	ldw	r2,0(r2)
8009166c:	10800817 	ldw	r2,32(r2)
80091670:	e17fff17 	ldw	r5,-4(fp)
80091674:	e13ffd17 	ldw	r4,-12(fp)
80091678:	103ee83a 	callr	r2
8009167c:	00000a06 	br	800916a8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
80091680:	e0bfff17 	ldw	r2,-4(fp)
80091684:	00c80004 	movi	r3,8192
80091688:	10c00115 	stw	r3,4(r2)
      return 0;
8009168c:	0005883a 	mov	r2,zero
80091690:	00000506 	br	800916a8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80091694:	00915d00 	call	800915d0 <alt_get_errno>
80091698:	1007883a 	mov	r3,r2
8009169c:	00801444 	movi	r2,81
800916a0:	18800015 	stw	r2,0(r3)
    return -1;
800916a4:	00bfffc4 	movi	r2,-1
  }
}
800916a8:	e037883a 	mov	sp,fp
800916ac:	dfc00117 	ldw	ra,4(sp)
800916b0:	df000017 	ldw	fp,0(sp)
800916b4:	dec00204 	addi	sp,sp,8
800916b8:	f800283a 	ret

800916bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
800916bc:	defffe04 	addi	sp,sp,-8
800916c0:	dfc00115 	stw	ra,4(sp)
800916c4:	df000015 	stw	fp,0(sp)
800916c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
800916cc:	d0a01a17 	ldw	r2,-32664(gp)
800916d0:	10000326 	beq	r2,zero,800916e0 <alt_get_errno+0x24>
800916d4:	d0a01a17 	ldw	r2,-32664(gp)
800916d8:	103ee83a 	callr	r2
800916dc:	00000106 	br	800916e4 <alt_get_errno+0x28>
800916e0:	d0a78704 	addi	r2,gp,-25060
}
800916e4:	e037883a 	mov	sp,fp
800916e8:	dfc00117 	ldw	ra,4(sp)
800916ec:	df000017 	ldw	fp,0(sp)
800916f0:	dec00204 	addi	sp,sp,8
800916f4:	f800283a 	ret

800916f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
800916f8:	deffed04 	addi	sp,sp,-76
800916fc:	dfc01215 	stw	ra,72(sp)
80091700:	df001115 	stw	fp,68(sp)
80091704:	df001104 	addi	fp,sp,68
80091708:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8009170c:	e0bfff17 	ldw	r2,-4(fp)
80091710:	10000616 	blt	r2,zero,8009172c <isatty+0x34>
80091714:	e0bfff17 	ldw	r2,-4(fp)
80091718:	10c00324 	muli	r3,r2,12
8009171c:	00a00274 	movhi	r2,32777
80091720:	109dfa04 	addi	r2,r2,30696
80091724:	1885883a 	add	r2,r3,r2
80091728:	00000106 	br	80091730 <isatty+0x38>
8009172c:	0005883a 	mov	r2,zero
80091730:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
80091734:	e0bfef17 	ldw	r2,-68(fp)
80091738:	10000e26 	beq	r2,zero,80091774 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
8009173c:	e0bfef17 	ldw	r2,-68(fp)
80091740:	10800017 	ldw	r2,0(r2)
80091744:	10800817 	ldw	r2,32(r2)
80091748:	1000021e 	bne	r2,zero,80091754 <isatty+0x5c>
    {
      return 1;
8009174c:	00800044 	movi	r2,1
80091750:	00000d06 	br	80091788 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
80091754:	e0bff004 	addi	r2,fp,-64
80091758:	100b883a 	mov	r5,r2
8009175c:	e13fff17 	ldw	r4,-4(fp)
80091760:	009160c0 	call	8009160c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
80091764:	e0bff117 	ldw	r2,-60(fp)
80091768:	10880020 	cmpeqi	r2,r2,8192
8009176c:	10803fcc 	andi	r2,r2,255
80091770:	00000506 	br	80091788 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80091774:	00916bc0 	call	800916bc <alt_get_errno>
80091778:	1007883a 	mov	r3,r2
8009177c:	00801444 	movi	r2,81
80091780:	18800015 	stw	r2,0(r3)
    return 0;
80091784:	0005883a 	mov	r2,zero
  }
}
80091788:	e037883a 	mov	sp,fp
8009178c:	dfc00117 	ldw	ra,4(sp)
80091790:	df000017 	ldw	fp,0(sp)
80091794:	dec00204 	addi	sp,sp,8
80091798:	f800283a 	ret

8009179c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
8009179c:	defffc04 	addi	sp,sp,-16
800917a0:	df000315 	stw	fp,12(sp)
800917a4:	df000304 	addi	fp,sp,12
800917a8:	e13ffd15 	stw	r4,-12(fp)
800917ac:	e17ffe15 	stw	r5,-8(fp)
800917b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
800917b4:	e0fffe17 	ldw	r3,-8(fp)
800917b8:	e0bffd17 	ldw	r2,-12(fp)
800917bc:	18800c26 	beq	r3,r2,800917f0 <alt_load_section+0x54>
  {
    while( to != end )
800917c0:	00000806 	br	800917e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
800917c4:	e0bffe17 	ldw	r2,-8(fp)
800917c8:	10c00104 	addi	r3,r2,4
800917cc:	e0fffe15 	stw	r3,-8(fp)
800917d0:	e0fffd17 	ldw	r3,-12(fp)
800917d4:	19000104 	addi	r4,r3,4
800917d8:	e13ffd15 	stw	r4,-12(fp)
800917dc:	18c00017 	ldw	r3,0(r3)
800917e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
800917e4:	e0fffe17 	ldw	r3,-8(fp)
800917e8:	e0bfff17 	ldw	r2,-4(fp)
800917ec:	18bff51e 	bne	r3,r2,800917c4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
800917f0:	0001883a 	nop
800917f4:	e037883a 	mov	sp,fp
800917f8:	df000017 	ldw	fp,0(sp)
800917fc:	dec00104 	addi	sp,sp,4
80091800:	f800283a 	ret

80091804 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
80091804:	defffe04 	addi	sp,sp,-8
80091808:	dfc00115 	stw	ra,4(sp)
8009180c:	df000015 	stw	fp,0(sp)
80091810:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
80091814:	01a002b4 	movhi	r6,32778
80091818:	31a32304 	addi	r6,r6,-29556
8009181c:	01600274 	movhi	r5,32777
80091820:	295bc704 	addi	r5,r5,28444
80091824:	012002b4 	movhi	r4,32778
80091828:	21232304 	addi	r4,r4,-29556
8009182c:	009179c0 	call	8009179c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
80091830:	01a00234 	movhi	r6,32776
80091834:	31809104 	addi	r6,r6,580
80091838:	01600234 	movhi	r5,32776
8009183c:	29400804 	addi	r5,r5,32
80091840:	01200234 	movhi	r4,32776
80091844:	21000804 	addi	r4,r4,32
80091848:	009179c0 	call	8009179c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
8009184c:	01a00274 	movhi	r6,32777
80091850:	319bc704 	addi	r6,r6,28444
80091854:	01600274 	movhi	r5,32777
80091858:	29583c04 	addi	r5,r5,24816
8009185c:	01200274 	movhi	r4,32777
80091860:	21183c04 	addi	r4,r4,24816
80091864:	009179c0 	call	8009179c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
80091868:	0094db00 	call	80094db0 <alt_dcache_flush_all>
  alt_icache_flush_all();
8009186c:	00950280 	call	80095028 <alt_icache_flush_all>
}
80091870:	0001883a 	nop
80091874:	e037883a 	mov	sp,fp
80091878:	dfc00117 	ldw	ra,4(sp)
8009187c:	df000017 	ldw	fp,0(sp)
80091880:	dec00204 	addi	sp,sp,8
80091884:	f800283a 	ret

80091888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80091888:	defffe04 	addi	sp,sp,-8
8009188c:	dfc00115 	stw	ra,4(sp)
80091890:	df000015 	stw	fp,0(sp)
80091894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80091898:	d0a01a17 	ldw	r2,-32664(gp)
8009189c:	10000326 	beq	r2,zero,800918ac <alt_get_errno+0x24>
800918a0:	d0a01a17 	ldw	r2,-32664(gp)
800918a4:	103ee83a 	callr	r2
800918a8:	00000106 	br	800918b0 <alt_get_errno+0x28>
800918ac:	d0a78704 	addi	r2,gp,-25060
}
800918b0:	e037883a 	mov	sp,fp
800918b4:	dfc00117 	ldw	ra,4(sp)
800918b8:	df000017 	ldw	fp,0(sp)
800918bc:	dec00204 	addi	sp,sp,8
800918c0:	f800283a 	ret

800918c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
800918c4:	defff904 	addi	sp,sp,-28
800918c8:	dfc00615 	stw	ra,24(sp)
800918cc:	df000515 	stw	fp,20(sp)
800918d0:	df000504 	addi	fp,sp,20
800918d4:	e13ffd15 	stw	r4,-12(fp)
800918d8:	e17ffe15 	stw	r5,-8(fp)
800918dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
800918e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
800918e4:	e0bffd17 	ldw	r2,-12(fp)
800918e8:	10000616 	blt	r2,zero,80091904 <lseek+0x40>
800918ec:	e0bffd17 	ldw	r2,-12(fp)
800918f0:	10c00324 	muli	r3,r2,12
800918f4:	00a00274 	movhi	r2,32777
800918f8:	109dfa04 	addi	r2,r2,30696
800918fc:	1885883a 	add	r2,r3,r2
80091900:	00000106 	br	80091908 <lseek+0x44>
80091904:	0005883a 	mov	r2,zero
80091908:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
8009190c:	e0bffc17 	ldw	r2,-16(fp)
80091910:	10001026 	beq	r2,zero,80091954 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
80091914:	e0bffc17 	ldw	r2,-16(fp)
80091918:	10800017 	ldw	r2,0(r2)
8009191c:	10800717 	ldw	r2,28(r2)
80091920:	10000926 	beq	r2,zero,80091948 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
80091924:	e0bffc17 	ldw	r2,-16(fp)
80091928:	10800017 	ldw	r2,0(r2)
8009192c:	10800717 	ldw	r2,28(r2)
80091930:	e1bfff17 	ldw	r6,-4(fp)
80091934:	e17ffe17 	ldw	r5,-8(fp)
80091938:	e13ffc17 	ldw	r4,-16(fp)
8009193c:	103ee83a 	callr	r2
80091940:	e0bffb15 	stw	r2,-20(fp)
80091944:	00000506 	br	8009195c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
80091948:	00bfde84 	movi	r2,-134
8009194c:	e0bffb15 	stw	r2,-20(fp)
80091950:	00000206 	br	8009195c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
80091954:	00bfebc4 	movi	r2,-81
80091958:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8009195c:	e0bffb17 	ldw	r2,-20(fp)
80091960:	1000070e 	bge	r2,zero,80091980 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
80091964:	00918880 	call	80091888 <alt_get_errno>
80091968:	1007883a 	mov	r3,r2
8009196c:	e0bffb17 	ldw	r2,-20(fp)
80091970:	0085c83a 	sub	r2,zero,r2
80091974:	18800015 	stw	r2,0(r3)
    rc = -1;
80091978:	00bfffc4 	movi	r2,-1
8009197c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
80091980:	e0bffb17 	ldw	r2,-20(fp)
}
80091984:	e037883a 	mov	sp,fp
80091988:	dfc00117 	ldw	ra,4(sp)
8009198c:	df000017 	ldw	fp,0(sp)
80091990:	dec00204 	addi	sp,sp,8
80091994:	f800283a 	ret

80091998 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80091998:	defffd04 	addi	sp,sp,-12
8009199c:	dfc00215 	stw	ra,8(sp)
800919a0:	df000115 	stw	fp,4(sp)
800919a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
800919a8:	0009883a 	mov	r4,zero
800919ac:	0091fb40 	call	80091fb4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
800919b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
800919b4:	0091fec0 	call	80091fec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
800919b8:	01a00274 	movhi	r6,32777
800919bc:	319b0504 	addi	r6,r6,27668
800919c0:	01600274 	movhi	r5,32777
800919c4:	295b0504 	addi	r5,r5,27668
800919c8:	01200274 	movhi	r4,32777
800919cc:	211b0504 	addi	r4,r4,27668
800919d0:	00953c00 	call	800953c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
800919d4:	0094ed80 	call	80094ed8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
800919d8:	01200274 	movhi	r4,32777
800919dc:	2113ce04 	addi	r4,r4,20280
800919e0:	0095bf40 	call	80095bf4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
800919e4:	d0a78817 	ldw	r2,-25056(gp)
800919e8:	d0e78917 	ldw	r3,-25052(gp)
800919ec:	d1278a17 	ldw	r4,-25048(gp)
800919f0:	200d883a 	mov	r6,r4
800919f4:	180b883a 	mov	r5,r3
800919f8:	1009883a 	mov	r4,r2
800919fc:	00803100 	call	80080310 <main>
80091a00:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
80091a04:	01000044 	movi	r4,1
80091a08:	00914d40 	call	800914d4 <close>
  exit (result);
80091a0c:	e13fff17 	ldw	r4,-4(fp)
80091a10:	0095c080 	call	80095c08 <exit>

80091a14 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
80091a14:	defffe04 	addi	sp,sp,-8
80091a18:	df000115 	stw	fp,4(sp)
80091a1c:	df000104 	addi	fp,sp,4
80091a20:	e13fff15 	stw	r4,-4(fp)
}
80091a24:	0001883a 	nop
80091a28:	e037883a 	mov	sp,fp
80091a2c:	df000017 	ldw	fp,0(sp)
80091a30:	dec00104 	addi	sp,sp,4
80091a34:	f800283a 	ret

80091a38 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80091a38:	defffe04 	addi	sp,sp,-8
80091a3c:	df000115 	stw	fp,4(sp)
80091a40:	df000104 	addi	fp,sp,4
80091a44:	e13fff15 	stw	r4,-4(fp)
}
80091a48:	0001883a 	nop
80091a4c:	e037883a 	mov	sp,fp
80091a50:	df000017 	ldw	fp,0(sp)
80091a54:	dec00104 	addi	sp,sp,4
80091a58:	f800283a 	ret

80091a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80091a5c:	defffe04 	addi	sp,sp,-8
80091a60:	dfc00115 	stw	ra,4(sp)
80091a64:	df000015 	stw	fp,0(sp)
80091a68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80091a6c:	d0a01a17 	ldw	r2,-32664(gp)
80091a70:	10000326 	beq	r2,zero,80091a80 <alt_get_errno+0x24>
80091a74:	d0a01a17 	ldw	r2,-32664(gp)
80091a78:	103ee83a 	callr	r2
80091a7c:	00000106 	br	80091a84 <alt_get_errno+0x28>
80091a80:	d0a78704 	addi	r2,gp,-25060
}
80091a84:	e037883a 	mov	sp,fp
80091a88:	dfc00117 	ldw	ra,4(sp)
80091a8c:	df000017 	ldw	fp,0(sp)
80091a90:	dec00204 	addi	sp,sp,8
80091a94:	f800283a 	ret

80091a98 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80091a98:	defff904 	addi	sp,sp,-28
80091a9c:	dfc00615 	stw	ra,24(sp)
80091aa0:	df000515 	stw	fp,20(sp)
80091aa4:	df000504 	addi	fp,sp,20
80091aa8:	e13ffd15 	stw	r4,-12(fp)
80091aac:	e17ffe15 	stw	r5,-8(fp)
80091ab0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80091ab4:	e0bffd17 	ldw	r2,-12(fp)
80091ab8:	10000616 	blt	r2,zero,80091ad4 <read+0x3c>
80091abc:	e0bffd17 	ldw	r2,-12(fp)
80091ac0:	10c00324 	muli	r3,r2,12
80091ac4:	00a00274 	movhi	r2,32777
80091ac8:	109dfa04 	addi	r2,r2,30696
80091acc:	1885883a 	add	r2,r3,r2
80091ad0:	00000106 	br	80091ad8 <read+0x40>
80091ad4:	0005883a 	mov	r2,zero
80091ad8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80091adc:	e0bffb17 	ldw	r2,-20(fp)
80091ae0:	10002226 	beq	r2,zero,80091b6c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80091ae4:	e0bffb17 	ldw	r2,-20(fp)
80091ae8:	10800217 	ldw	r2,8(r2)
80091aec:	108000cc 	andi	r2,r2,3
80091af0:	10800060 	cmpeqi	r2,r2,1
80091af4:	1000181e 	bne	r2,zero,80091b58 <read+0xc0>
        (fd->dev->read))
80091af8:	e0bffb17 	ldw	r2,-20(fp)
80091afc:	10800017 	ldw	r2,0(r2)
80091b00:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80091b04:	10001426 	beq	r2,zero,80091b58 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
80091b08:	e0bffb17 	ldw	r2,-20(fp)
80091b0c:	10800017 	ldw	r2,0(r2)
80091b10:	10800517 	ldw	r2,20(r2)
80091b14:	e0ffff17 	ldw	r3,-4(fp)
80091b18:	180d883a 	mov	r6,r3
80091b1c:	e17ffe17 	ldw	r5,-8(fp)
80091b20:	e13ffb17 	ldw	r4,-20(fp)
80091b24:	103ee83a 	callr	r2
80091b28:	e0bffc15 	stw	r2,-16(fp)
80091b2c:	e0bffc17 	ldw	r2,-16(fp)
80091b30:	1000070e 	bge	r2,zero,80091b50 <read+0xb8>
        {
          ALT_ERRNO = -rval;
80091b34:	0091a5c0 	call	80091a5c <alt_get_errno>
80091b38:	1007883a 	mov	r3,r2
80091b3c:	e0bffc17 	ldw	r2,-16(fp)
80091b40:	0085c83a 	sub	r2,zero,r2
80091b44:	18800015 	stw	r2,0(r3)
          return -1;
80091b48:	00bfffc4 	movi	r2,-1
80091b4c:	00000c06 	br	80091b80 <read+0xe8>
        }
        return rval;
80091b50:	e0bffc17 	ldw	r2,-16(fp)
80091b54:	00000a06 	br	80091b80 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
80091b58:	0091a5c0 	call	80091a5c <alt_get_errno>
80091b5c:	1007883a 	mov	r3,r2
80091b60:	00800344 	movi	r2,13
80091b64:	18800015 	stw	r2,0(r3)
80091b68:	00000406 	br	80091b7c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
80091b6c:	0091a5c0 	call	80091a5c <alt_get_errno>
80091b70:	1007883a 	mov	r3,r2
80091b74:	00801444 	movi	r2,81
80091b78:	18800015 	stw	r2,0(r3)
  }
  return -1;
80091b7c:	00bfffc4 	movi	r2,-1
}
80091b80:	e037883a 	mov	sp,fp
80091b84:	dfc00117 	ldw	ra,4(sp)
80091b88:	df000017 	ldw	fp,0(sp)
80091b8c:	dec00204 	addi	sp,sp,8
80091b90:	f800283a 	ret

80091b94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
80091b94:	defffe04 	addi	sp,sp,-8
80091b98:	df000115 	stw	fp,4(sp)
80091b9c:	df000104 	addi	fp,sp,4
80091ba0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
80091ba4:	e0bfff17 	ldw	r2,-4(fp)
80091ba8:	108000d0 	cmplti	r2,r2,3
80091bac:	10000d1e 	bne	r2,zero,80091be4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
80091bb0:	00a00274 	movhi	r2,32777
80091bb4:	109dfa04 	addi	r2,r2,30696
80091bb8:	e0ffff17 	ldw	r3,-4(fp)
80091bbc:	18c00324 	muli	r3,r3,12
80091bc0:	10c5883a 	add	r2,r2,r3
80091bc4:	10800204 	addi	r2,r2,8
80091bc8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
80091bcc:	00a00274 	movhi	r2,32777
80091bd0:	109dfa04 	addi	r2,r2,30696
80091bd4:	e0ffff17 	ldw	r3,-4(fp)
80091bd8:	18c00324 	muli	r3,r3,12
80091bdc:	10c5883a 	add	r2,r2,r3
80091be0:	10000015 	stw	zero,0(r2)
  }
}
80091be4:	0001883a 	nop
80091be8:	e037883a 	mov	sp,fp
80091bec:	df000017 	ldw	fp,0(sp)
80091bf0:	dec00104 	addi	sp,sp,4
80091bf4:	f800283a 	ret

80091bf8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
80091bf8:	defff904 	addi	sp,sp,-28
80091bfc:	df000615 	stw	fp,24(sp)
80091c00:	df000604 	addi	fp,sp,24
80091c04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80091c08:	0005303a 	rdctl	r2,status
80091c0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80091c10:	e0fffe17 	ldw	r3,-8(fp)
80091c14:	00bfff84 	movi	r2,-2
80091c18:	1884703a 	and	r2,r3,r2
80091c1c:	1001703a 	wrctl	status,r2
  
  return context;
80091c20:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
80091c24:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80091c28:	d0a01b17 	ldw	r2,-32660(gp)
80091c2c:	10c000c4 	addi	r3,r2,3
80091c30:	00bfff04 	movi	r2,-4
80091c34:	1884703a 	and	r2,r3,r2
80091c38:	d0a01b15 	stw	r2,-32660(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80091c3c:	d0e01b17 	ldw	r3,-32660(gp)
80091c40:	e0bfff17 	ldw	r2,-4(fp)
80091c44:	1887883a 	add	r3,r3,r2
80091c48:	00a00434 	movhi	r2,32784
80091c4c:	10b40004 	addi	r2,r2,-12288
80091c50:	10c0062e 	bgeu	r2,r3,80091c6c <sbrk+0x74>
80091c54:	e0bffb17 	ldw	r2,-20(fp)
80091c58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80091c5c:	e0bffa17 	ldw	r2,-24(fp)
80091c60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
80091c64:	00bfffc4 	movi	r2,-1
80091c68:	00000b06 	br	80091c98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
80091c6c:	d0a01b17 	ldw	r2,-32660(gp)
80091c70:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
80091c74:	d0e01b17 	ldw	r3,-32660(gp)
80091c78:	e0bfff17 	ldw	r2,-4(fp)
80091c7c:	1885883a 	add	r2,r3,r2
80091c80:	d0a01b15 	stw	r2,-32660(gp)
80091c84:	e0bffb17 	ldw	r2,-20(fp)
80091c88:	e0bffc15 	stw	r2,-16(fp)
80091c8c:	e0bffc17 	ldw	r2,-16(fp)
80091c90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
80091c94:	e0bffd17 	ldw	r2,-12(fp)
} 
80091c98:	e037883a 	mov	sp,fp
80091c9c:	df000017 	ldw	fp,0(sp)
80091ca0:	dec00104 	addi	sp,sp,4
80091ca4:	f800283a 	ret

80091ca8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
80091ca8:	defffa04 	addi	sp,sp,-24
80091cac:	df000515 	stw	fp,20(sp)
80091cb0:	df000504 	addi	fp,sp,20
80091cb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80091cb8:	0005303a 	rdctl	r2,status
80091cbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80091cc0:	e0fffc17 	ldw	r3,-16(fp)
80091cc4:	00bfff84 	movi	r2,-2
80091cc8:	1884703a 	and	r2,r3,r2
80091ccc:	1001703a 	wrctl	status,r2
  
  return context;
80091cd0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
80091cd4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
80091cd8:	e0bfff17 	ldw	r2,-4(fp)
80091cdc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80091ce0:	e0bffd17 	ldw	r2,-12(fp)
80091ce4:	10800017 	ldw	r2,0(r2)
80091ce8:	e0fffd17 	ldw	r3,-12(fp)
80091cec:	18c00117 	ldw	r3,4(r3)
80091cf0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80091cf4:	e0bffd17 	ldw	r2,-12(fp)
80091cf8:	10800117 	ldw	r2,4(r2)
80091cfc:	e0fffd17 	ldw	r3,-12(fp)
80091d00:	18c00017 	ldw	r3,0(r3)
80091d04:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
80091d08:	e0bffd17 	ldw	r2,-12(fp)
80091d0c:	e0fffd17 	ldw	r3,-12(fp)
80091d10:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
80091d14:	e0bffd17 	ldw	r2,-12(fp)
80091d18:	e0fffd17 	ldw	r3,-12(fp)
80091d1c:	10c00015 	stw	r3,0(r2)
80091d20:	e0bffb17 	ldw	r2,-20(fp)
80091d24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80091d28:	e0bffe17 	ldw	r2,-8(fp)
80091d2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80091d30:	0001883a 	nop
80091d34:	e037883a 	mov	sp,fp
80091d38:	df000017 	ldw	fp,0(sp)
80091d3c:	dec00104 	addi	sp,sp,4
80091d40:	f800283a 	ret

80091d44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80091d44:	defffb04 	addi	sp,sp,-20
80091d48:	dfc00415 	stw	ra,16(sp)
80091d4c:	df000315 	stw	fp,12(sp)
80091d50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
80091d54:	d0a01c17 	ldw	r2,-32656(gp)
80091d58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
80091d5c:	d0a78c17 	ldw	r2,-25040(gp)
80091d60:	10800044 	addi	r2,r2,1
80091d64:	d0a78c15 	stw	r2,-25040(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80091d68:	00002e06 	br	80091e24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
80091d6c:	e0bffd17 	ldw	r2,-12(fp)
80091d70:	10800017 	ldw	r2,0(r2)
80091d74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80091d78:	e0bffd17 	ldw	r2,-12(fp)
80091d7c:	10800403 	ldbu	r2,16(r2)
80091d80:	10803fcc 	andi	r2,r2,255
80091d84:	10000426 	beq	r2,zero,80091d98 <alt_tick+0x54>
80091d88:	d0a78c17 	ldw	r2,-25040(gp)
80091d8c:	1000021e 	bne	r2,zero,80091d98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
80091d90:	e0bffd17 	ldw	r2,-12(fp)
80091d94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
80091d98:	e0bffd17 	ldw	r2,-12(fp)
80091d9c:	10800217 	ldw	r2,8(r2)
80091da0:	d0e78c17 	ldw	r3,-25040(gp)
80091da4:	18801d36 	bltu	r3,r2,80091e1c <alt_tick+0xd8>
80091da8:	e0bffd17 	ldw	r2,-12(fp)
80091dac:	10800403 	ldbu	r2,16(r2)
80091db0:	10803fcc 	andi	r2,r2,255
80091db4:	1000191e 	bne	r2,zero,80091e1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
80091db8:	e0bffd17 	ldw	r2,-12(fp)
80091dbc:	10800317 	ldw	r2,12(r2)
80091dc0:	e0fffd17 	ldw	r3,-12(fp)
80091dc4:	18c00517 	ldw	r3,20(r3)
80091dc8:	1809883a 	mov	r4,r3
80091dcc:	103ee83a 	callr	r2
80091dd0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80091dd4:	e0bfff17 	ldw	r2,-4(fp)
80091dd8:	1000031e 	bne	r2,zero,80091de8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80091ddc:	e13ffd17 	ldw	r4,-12(fp)
80091de0:	0091ca80 	call	80091ca8 <alt_alarm_stop>
80091de4:	00000d06 	br	80091e1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
80091de8:	e0bffd17 	ldw	r2,-12(fp)
80091dec:	10c00217 	ldw	r3,8(r2)
80091df0:	e0bfff17 	ldw	r2,-4(fp)
80091df4:	1887883a 	add	r3,r3,r2
80091df8:	e0bffd17 	ldw	r2,-12(fp)
80091dfc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80091e00:	e0bffd17 	ldw	r2,-12(fp)
80091e04:	10c00217 	ldw	r3,8(r2)
80091e08:	d0a78c17 	ldw	r2,-25040(gp)
80091e0c:	1880032e 	bgeu	r3,r2,80091e1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80091e10:	e0bffd17 	ldw	r2,-12(fp)
80091e14:	00c00044 	movi	r3,1
80091e18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80091e1c:	e0bffe17 	ldw	r2,-8(fp)
80091e20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80091e24:	e0fffd17 	ldw	r3,-12(fp)
80091e28:	d0a01c04 	addi	r2,gp,-32656
80091e2c:	18bfcf1e 	bne	r3,r2,80091d6c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80091e30:	0001883a 	nop
}
80091e34:	0001883a 	nop
80091e38:	e037883a 	mov	sp,fp
80091e3c:	dfc00117 	ldw	ra,4(sp)
80091e40:	df000017 	ldw	fp,0(sp)
80091e44:	dec00204 	addi	sp,sp,8
80091e48:	f800283a 	ret

80091e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80091e4c:	defffe04 	addi	sp,sp,-8
80091e50:	dfc00115 	stw	ra,4(sp)
80091e54:	df000015 	stw	fp,0(sp)
80091e58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80091e5c:	d0a01a17 	ldw	r2,-32664(gp)
80091e60:	10000326 	beq	r2,zero,80091e70 <alt_get_errno+0x24>
80091e64:	d0a01a17 	ldw	r2,-32664(gp)
80091e68:	103ee83a 	callr	r2
80091e6c:	00000106 	br	80091e74 <alt_get_errno+0x28>
80091e70:	d0a78704 	addi	r2,gp,-25060
}
80091e74:	e037883a 	mov	sp,fp
80091e78:	dfc00117 	ldw	ra,4(sp)
80091e7c:	df000017 	ldw	fp,0(sp)
80091e80:	dec00204 	addi	sp,sp,8
80091e84:	f800283a 	ret

80091e88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80091e88:	defff904 	addi	sp,sp,-28
80091e8c:	dfc00615 	stw	ra,24(sp)
80091e90:	df000515 	stw	fp,20(sp)
80091e94:	df000504 	addi	fp,sp,20
80091e98:	e13ffd15 	stw	r4,-12(fp)
80091e9c:	e17ffe15 	stw	r5,-8(fp)
80091ea0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80091ea4:	e0bffd17 	ldw	r2,-12(fp)
80091ea8:	10000616 	blt	r2,zero,80091ec4 <write+0x3c>
80091eac:	e0bffd17 	ldw	r2,-12(fp)
80091eb0:	10c00324 	muli	r3,r2,12
80091eb4:	00a00274 	movhi	r2,32777
80091eb8:	109dfa04 	addi	r2,r2,30696
80091ebc:	1885883a 	add	r2,r3,r2
80091ec0:	00000106 	br	80091ec8 <write+0x40>
80091ec4:	0005883a 	mov	r2,zero
80091ec8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80091ecc:	e0bffb17 	ldw	r2,-20(fp)
80091ed0:	10002126 	beq	r2,zero,80091f58 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
80091ed4:	e0bffb17 	ldw	r2,-20(fp)
80091ed8:	10800217 	ldw	r2,8(r2)
80091edc:	108000cc 	andi	r2,r2,3
80091ee0:	10001826 	beq	r2,zero,80091f44 <write+0xbc>
80091ee4:	e0bffb17 	ldw	r2,-20(fp)
80091ee8:	10800017 	ldw	r2,0(r2)
80091eec:	10800617 	ldw	r2,24(r2)
80091ef0:	10001426 	beq	r2,zero,80091f44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
80091ef4:	e0bffb17 	ldw	r2,-20(fp)
80091ef8:	10800017 	ldw	r2,0(r2)
80091efc:	10800617 	ldw	r2,24(r2)
80091f00:	e0ffff17 	ldw	r3,-4(fp)
80091f04:	180d883a 	mov	r6,r3
80091f08:	e17ffe17 	ldw	r5,-8(fp)
80091f0c:	e13ffb17 	ldw	r4,-20(fp)
80091f10:	103ee83a 	callr	r2
80091f14:	e0bffc15 	stw	r2,-16(fp)
80091f18:	e0bffc17 	ldw	r2,-16(fp)
80091f1c:	1000070e 	bge	r2,zero,80091f3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
80091f20:	0091e4c0 	call	80091e4c <alt_get_errno>
80091f24:	1007883a 	mov	r3,r2
80091f28:	e0bffc17 	ldw	r2,-16(fp)
80091f2c:	0085c83a 	sub	r2,zero,r2
80091f30:	18800015 	stw	r2,0(r3)
        return -1;
80091f34:	00bfffc4 	movi	r2,-1
80091f38:	00000c06 	br	80091f6c <write+0xe4>
      }
      return rval;
80091f3c:	e0bffc17 	ldw	r2,-16(fp)
80091f40:	00000a06 	br	80091f6c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
80091f44:	0091e4c0 	call	80091e4c <alt_get_errno>
80091f48:	1007883a 	mov	r3,r2
80091f4c:	00800344 	movi	r2,13
80091f50:	18800015 	stw	r2,0(r3)
80091f54:	00000406 	br	80091f68 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
80091f58:	0091e4c0 	call	80091e4c <alt_get_errno>
80091f5c:	1007883a 	mov	r3,r2
80091f60:	00801444 	movi	r2,81
80091f64:	18800015 	stw	r2,0(r3)
  }
  return -1;
80091f68:	00bfffc4 	movi	r2,-1
}
80091f6c:	e037883a 	mov	sp,fp
80091f70:	dfc00117 	ldw	ra,4(sp)
80091f74:	df000017 	ldw	fp,0(sp)
80091f78:	dec00204 	addi	sp,sp,8
80091f7c:	f800283a 	ret

80091f80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
80091f80:	defffd04 	addi	sp,sp,-12
80091f84:	dfc00215 	stw	ra,8(sp)
80091f88:	df000115 	stw	fp,4(sp)
80091f8c:	df000104 	addi	fp,sp,4
80091f90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
80091f94:	d1601704 	addi	r5,gp,-32676
80091f98:	e13fff17 	ldw	r4,-4(fp)
80091f9c:	0094e340 	call	80094e34 <alt_dev_llist_insert>
}
80091fa0:	e037883a 	mov	sp,fp
80091fa4:	dfc00117 	ldw	ra,4(sp)
80091fa8:	df000017 	ldw	fp,0(sp)
80091fac:	dec00204 	addi	sp,sp,8
80091fb0:	f800283a 	ret

80091fb4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
80091fb4:	defffd04 	addi	sp,sp,-12
80091fb8:	dfc00215 	stw	ra,8(sp)
80091fbc:	df000115 	stw	fp,4(sp)
80091fc0:	df000104 	addi	fp,sp,4
80091fc4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
80091fc8:	00958f80 	call	800958f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
80091fcc:	00800044 	movi	r2,1
80091fd0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
80091fd4:	0001883a 	nop
80091fd8:	e037883a 	mov	sp,fp
80091fdc:	dfc00117 	ldw	ra,4(sp)
80091fe0:	df000017 	ldw	fp,0(sp)
80091fe4:	dec00204 	addi	sp,sp,8
80091fe8:	f800283a 	ret

80091fec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80091fec:	defffe04 	addi	sp,sp,-8
80091ff0:	dfc00115 	stw	ra,4(sp)
80091ff4:	df000015 	stw	fp,0(sp)
80091ff8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
80091ffc:	01c0fa04 	movi	r7,1000
80092000:	018001c4 	movi	r6,7
80092004:	000b883a 	mov	r5,zero
80092008:	01200434 	movhi	r4,32784
8009200c:	21040004 	addi	r4,r4,4096
80092010:	0092c340 	call	80092c34 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
80092014:	01800184 	movi	r6,6
80092018:	000b883a 	mov	r5,zero
8009201c:	01200274 	movhi	r4,32777
80092020:	211e6404 	addi	r4,r4,31120
80092024:	00922b80 	call	800922b8 <altera_avalon_jtag_uart_init>
80092028:	01200274 	movhi	r4,32777
8009202c:	211e5a04 	addi	r4,r4,31080
80092030:	0091f800 	call	80091f80 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_1_DMA, dma_fifo_subsystem_1_dma);
80092034:	00a002b4 	movhi	r2,32778
80092038:	10a27204 	addi	r2,r2,-30264
8009203c:	10c00717 	ldw	r3,28(r2)
80092040:	00a002b4 	movhi	r2,32778
80092044:	10a27204 	addi	r2,r2,-30264
80092048:	10800817 	ldw	r2,32(r2)
8009204c:	100d883a 	mov	r6,r2
80092050:	180b883a 	mov	r5,r3
80092054:	012002b4 	movhi	r4,32778
80092058:	21227204 	addi	r4,r4,-30264
8009205c:	009487c0 	call	8009487c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_2_DMA, dma_fifo_subsystem_2_dma);
80092060:	00a002b4 	movhi	r2,32778
80092064:	10a28a04 	addi	r2,r2,-30168
80092068:	10c00717 	ldw	r3,28(r2)
8009206c:	00a002b4 	movhi	r2,32778
80092070:	10a28a04 	addi	r2,r2,-30168
80092074:	10800817 	ldw	r2,32(r2)
80092078:	100d883a 	mov	r6,r2
8009207c:	180b883a 	mov	r5,r3
80092080:	012002b4 	movhi	r4,32778
80092084:	21228a04 	addi	r4,r4,-30168
80092088:	009487c0 	call	8009487c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_3_DMA, dma_fifo_subsystem_3_dma);
8009208c:	00a002b4 	movhi	r2,32778
80092090:	10a2a204 	addi	r2,r2,-30072
80092094:	10c00717 	ldw	r3,28(r2)
80092098:	00a002b4 	movhi	r2,32778
8009209c:	10a2a204 	addi	r2,r2,-30072
800920a0:	10800817 	ldw	r2,32(r2)
800920a4:	100d883a 	mov	r6,r2
800920a8:	180b883a 	mov	r5,r3
800920ac:	012002b4 	movhi	r4,32778
800920b0:	2122a204 	addi	r4,r4,-30072
800920b4:	009487c0 	call	8009487c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_4_DMA, dma_fifo_subsystem_4_dma);
800920b8:	00a002b4 	movhi	r2,32778
800920bc:	10a2ba04 	addi	r2,r2,-29976
800920c0:	10c00717 	ldw	r3,28(r2)
800920c4:	00a002b4 	movhi	r2,32778
800920c8:	10a2ba04 	addi	r2,r2,-29976
800920cc:	10800817 	ldw	r2,32(r2)
800920d0:	100d883a 	mov	r6,r2
800920d4:	180b883a 	mov	r5,r3
800920d8:	012002b4 	movhi	r4,32778
800920dc:	2122ba04 	addi	r4,r4,-29976
800920e0:	009487c0 	call	8009487c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUSBYSTEM_DMA, dma_fifo_susbystem_dma);
800920e4:	00a002b4 	movhi	r2,32778
800920e8:	10a2d204 	addi	r2,r2,-29880
800920ec:	10c00717 	ldw	r3,28(r2)
800920f0:	00a002b4 	movhi	r2,32778
800920f4:	10a2d204 	addi	r2,r2,-29880
800920f8:	10800817 	ldw	r2,32(r2)
800920fc:	100d883a 	mov	r6,r2
80092100:	180b883a 	mov	r5,r3
80092104:	012002b4 	movhi	r4,32778
80092108:	2122d204 	addi	r4,r4,-29880
8009210c:	009487c0 	call	8009487c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( FROM_ETH_TO_DDR_ETH_DMA, from_ETH_to_DDR_ETH_DMA);
80092110:	00a002b4 	movhi	r2,32778
80092114:	10a2ea04 	addi	r2,r2,-29784
80092118:	10c00717 	ldw	r3,28(r2)
8009211c:	00a002b4 	movhi	r2,32778
80092120:	10a2ea04 	addi	r2,r2,-29784
80092124:	10800817 	ldw	r2,32(r2)
80092128:	100d883a 	mov	r6,r2
8009212c:	180b883a 	mov	r5,r3
80092130:	012002b4 	movhi	r4,32778
80092134:	2122ea04 	addi	r4,r4,-29784
80092138:	009487c0 	call	8009487c <alt_msgdma_init>
}
8009213c:	0001883a 	nop
80092140:	e037883a 	mov	sp,fp
80092144:	dfc00117 	ldw	ra,4(sp)
80092148:	df000017 	ldw	fp,0(sp)
8009214c:	dec00204 	addi	sp,sp,8
80092150:	f800283a 	ret

80092154 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
80092154:	defffa04 	addi	sp,sp,-24
80092158:	dfc00515 	stw	ra,20(sp)
8009215c:	df000415 	stw	fp,16(sp)
80092160:	df000404 	addi	fp,sp,16
80092164:	e13ffd15 	stw	r4,-12(fp)
80092168:	e17ffe15 	stw	r5,-8(fp)
8009216c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80092170:	e0bffd17 	ldw	r2,-12(fp)
80092174:	10800017 	ldw	r2,0(r2)
80092178:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8009217c:	e0bffc17 	ldw	r2,-16(fp)
80092180:	10c00a04 	addi	r3,r2,40
80092184:	e0bffd17 	ldw	r2,-12(fp)
80092188:	10800217 	ldw	r2,8(r2)
8009218c:	100f883a 	mov	r7,r2
80092190:	e1bfff17 	ldw	r6,-4(fp)
80092194:	e17ffe17 	ldw	r5,-8(fp)
80092198:	1809883a 	mov	r4,r3
8009219c:	009277c0 	call	8009277c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
800921a0:	e037883a 	mov	sp,fp
800921a4:	dfc00117 	ldw	ra,4(sp)
800921a8:	df000017 	ldw	fp,0(sp)
800921ac:	dec00204 	addi	sp,sp,8
800921b0:	f800283a 	ret

800921b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
800921b4:	defffa04 	addi	sp,sp,-24
800921b8:	dfc00515 	stw	ra,20(sp)
800921bc:	df000415 	stw	fp,16(sp)
800921c0:	df000404 	addi	fp,sp,16
800921c4:	e13ffd15 	stw	r4,-12(fp)
800921c8:	e17ffe15 	stw	r5,-8(fp)
800921cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
800921d0:	e0bffd17 	ldw	r2,-12(fp)
800921d4:	10800017 	ldw	r2,0(r2)
800921d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
800921dc:	e0bffc17 	ldw	r2,-16(fp)
800921e0:	10c00a04 	addi	r3,r2,40
800921e4:	e0bffd17 	ldw	r2,-12(fp)
800921e8:	10800217 	ldw	r2,8(r2)
800921ec:	100f883a 	mov	r7,r2
800921f0:	e1bfff17 	ldw	r6,-4(fp)
800921f4:	e17ffe17 	ldw	r5,-8(fp)
800921f8:	1809883a 	mov	r4,r3
800921fc:	00929980 	call	80092998 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
80092200:	e037883a 	mov	sp,fp
80092204:	dfc00117 	ldw	ra,4(sp)
80092208:	df000017 	ldw	fp,0(sp)
8009220c:	dec00204 	addi	sp,sp,8
80092210:	f800283a 	ret

80092214 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
80092214:	defffc04 	addi	sp,sp,-16
80092218:	dfc00315 	stw	ra,12(sp)
8009221c:	df000215 	stw	fp,8(sp)
80092220:	df000204 	addi	fp,sp,8
80092224:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80092228:	e0bfff17 	ldw	r2,-4(fp)
8009222c:	10800017 	ldw	r2,0(r2)
80092230:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
80092234:	e0bffe17 	ldw	r2,-8(fp)
80092238:	10c00a04 	addi	r3,r2,40
8009223c:	e0bfff17 	ldw	r2,-4(fp)
80092240:	10800217 	ldw	r2,8(r2)
80092244:	100b883a 	mov	r5,r2
80092248:	1809883a 	mov	r4,r3
8009224c:	00926240 	call	80092624 <altera_avalon_jtag_uart_close>
}
80092250:	e037883a 	mov	sp,fp
80092254:	dfc00117 	ldw	ra,4(sp)
80092258:	df000017 	ldw	fp,0(sp)
8009225c:	dec00204 	addi	sp,sp,8
80092260:	f800283a 	ret

80092264 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
80092264:	defffa04 	addi	sp,sp,-24
80092268:	dfc00515 	stw	ra,20(sp)
8009226c:	df000415 	stw	fp,16(sp)
80092270:	df000404 	addi	fp,sp,16
80092274:	e13ffd15 	stw	r4,-12(fp)
80092278:	e17ffe15 	stw	r5,-8(fp)
8009227c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80092280:	e0bffd17 	ldw	r2,-12(fp)
80092284:	10800017 	ldw	r2,0(r2)
80092288:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8009228c:	e0bffc17 	ldw	r2,-16(fp)
80092290:	10800a04 	addi	r2,r2,40
80092294:	e1bfff17 	ldw	r6,-4(fp)
80092298:	e17ffe17 	ldw	r5,-8(fp)
8009229c:	1009883a 	mov	r4,r2
800922a0:	009268c0 	call	8009268c <altera_avalon_jtag_uart_ioctl>
}
800922a4:	e037883a 	mov	sp,fp
800922a8:	dfc00117 	ldw	ra,4(sp)
800922ac:	df000017 	ldw	fp,0(sp)
800922b0:	dec00204 	addi	sp,sp,8
800922b4:	f800283a 	ret

800922b8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
800922b8:	defffa04 	addi	sp,sp,-24
800922bc:	dfc00515 	stw	ra,20(sp)
800922c0:	df000415 	stw	fp,16(sp)
800922c4:	df000404 	addi	fp,sp,16
800922c8:	e13ffd15 	stw	r4,-12(fp)
800922cc:	e17ffe15 	stw	r5,-8(fp)
800922d0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
800922d4:	e0bffd17 	ldw	r2,-12(fp)
800922d8:	00c00044 	movi	r3,1
800922dc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
800922e0:	e0bffd17 	ldw	r2,-12(fp)
800922e4:	10800017 	ldw	r2,0(r2)
800922e8:	10800104 	addi	r2,r2,4
800922ec:	1007883a 	mov	r3,r2
800922f0:	e0bffd17 	ldw	r2,-12(fp)
800922f4:	10800817 	ldw	r2,32(r2)
800922f8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
800922fc:	e0bffe17 	ldw	r2,-8(fp)
80092300:	e0ffff17 	ldw	r3,-4(fp)
80092304:	d8000015 	stw	zero,0(sp)
80092308:	e1fffd17 	ldw	r7,-12(fp)
8009230c:	01a00274 	movhi	r6,32777
80092310:	3188de04 	addi	r6,r6,9080
80092314:	180b883a 	mov	r5,r3
80092318:	1009883a 	mov	r4,r2
8009231c:	009505c0 	call	8009505c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
80092320:	e0bffd17 	ldw	r2,-12(fp)
80092324:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
80092328:	e0bffd17 	ldw	r2,-12(fp)
8009232c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80092330:	d0e78b17 	ldw	r3,-25044(gp)
80092334:	e1fffd17 	ldw	r7,-12(fp)
80092338:	01a00274 	movhi	r6,32777
8009233c:	31896104 	addi	r6,r6,9604
80092340:	180b883a 	mov	r5,r3
80092344:	1009883a 	mov	r4,r2
80092348:	0094b2c0 	call	80094b2c <alt_alarm_start>
8009234c:	1000040e 	bge	r2,zero,80092360 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
80092350:	e0fffd17 	ldw	r3,-12(fp)
80092354:	00a00034 	movhi	r2,32768
80092358:	10bfffc4 	addi	r2,r2,-1
8009235c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
80092360:	0001883a 	nop
80092364:	e037883a 	mov	sp,fp
80092368:	dfc00117 	ldw	ra,4(sp)
8009236c:	df000017 	ldw	fp,0(sp)
80092370:	dec00204 	addi	sp,sp,8
80092374:	f800283a 	ret

80092378 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80092378:	defff804 	addi	sp,sp,-32
8009237c:	df000715 	stw	fp,28(sp)
80092380:	df000704 	addi	fp,sp,28
80092384:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80092388:	e0bfff17 	ldw	r2,-4(fp)
8009238c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
80092390:	e0bffb17 	ldw	r2,-20(fp)
80092394:	10800017 	ldw	r2,0(r2)
80092398:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8009239c:	e0bffc17 	ldw	r2,-16(fp)
800923a0:	10800104 	addi	r2,r2,4
800923a4:	10800037 	ldwio	r2,0(r2)
800923a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
800923ac:	e0bffd17 	ldw	r2,-12(fp)
800923b0:	1080c00c 	andi	r2,r2,768
800923b4:	10006d26 	beq	r2,zero,8009256c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
800923b8:	e0bffd17 	ldw	r2,-12(fp)
800923bc:	1080400c 	andi	r2,r2,256
800923c0:	10003526 	beq	r2,zero,80092498 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
800923c4:	00800074 	movhi	r2,1
800923c8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800923cc:	e0bffb17 	ldw	r2,-20(fp)
800923d0:	10800a17 	ldw	r2,40(r2)
800923d4:	10800044 	addi	r2,r2,1
800923d8:	1081ffcc 	andi	r2,r2,2047
800923dc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
800923e0:	e0bffb17 	ldw	r2,-20(fp)
800923e4:	10c00b17 	ldw	r3,44(r2)
800923e8:	e0bffe17 	ldw	r2,-8(fp)
800923ec:	18801526 	beq	r3,r2,80092444 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
800923f0:	e0bffc17 	ldw	r2,-16(fp)
800923f4:	10800037 	ldwio	r2,0(r2)
800923f8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
800923fc:	e0bff917 	ldw	r2,-28(fp)
80092400:	10a0000c 	andi	r2,r2,32768
80092404:	10001126 	beq	r2,zero,8009244c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
80092408:	e0bffb17 	ldw	r2,-20(fp)
8009240c:	10800a17 	ldw	r2,40(r2)
80092410:	e0fff917 	ldw	r3,-28(fp)
80092414:	1809883a 	mov	r4,r3
80092418:	e0fffb17 	ldw	r3,-20(fp)
8009241c:	1885883a 	add	r2,r3,r2
80092420:	10800e04 	addi	r2,r2,56
80092424:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80092428:	e0bffb17 	ldw	r2,-20(fp)
8009242c:	10800a17 	ldw	r2,40(r2)
80092430:	10800044 	addi	r2,r2,1
80092434:	10c1ffcc 	andi	r3,r2,2047
80092438:	e0bffb17 	ldw	r2,-20(fp)
8009243c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
80092440:	003fe206 	br	800923cc <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
80092444:	0001883a 	nop
80092448:	00000106 	br	80092450 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8009244c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
80092450:	e0bff917 	ldw	r2,-28(fp)
80092454:	10bfffec 	andhi	r2,r2,65535
80092458:	10000f26 	beq	r2,zero,80092498 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8009245c:	e0bffb17 	ldw	r2,-20(fp)
80092460:	10c00817 	ldw	r3,32(r2)
80092464:	00bfff84 	movi	r2,-2
80092468:	1886703a 	and	r3,r3,r2
8009246c:	e0bffb17 	ldw	r2,-20(fp)
80092470:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
80092474:	e0bffc17 	ldw	r2,-16(fp)
80092478:	10800104 	addi	r2,r2,4
8009247c:	1007883a 	mov	r3,r2
80092480:	e0bffb17 	ldw	r2,-20(fp)
80092484:	10800817 	ldw	r2,32(r2)
80092488:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8009248c:	e0bffc17 	ldw	r2,-16(fp)
80092490:	10800104 	addi	r2,r2,4
80092494:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80092498:	e0bffd17 	ldw	r2,-12(fp)
8009249c:	1080800c 	andi	r2,r2,512
800924a0:	103fbe26 	beq	r2,zero,8009239c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
800924a4:	e0bffd17 	ldw	r2,-12(fp)
800924a8:	1004d43a 	srli	r2,r2,16
800924ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
800924b0:	00001406 	br	80092504 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
800924b4:	e0bffc17 	ldw	r2,-16(fp)
800924b8:	e0fffb17 	ldw	r3,-20(fp)
800924bc:	18c00d17 	ldw	r3,52(r3)
800924c0:	e13ffb17 	ldw	r4,-20(fp)
800924c4:	20c7883a 	add	r3,r4,r3
800924c8:	18c20e04 	addi	r3,r3,2104
800924cc:	18c00003 	ldbu	r3,0(r3)
800924d0:	18c03fcc 	andi	r3,r3,255
800924d4:	18c0201c 	xori	r3,r3,128
800924d8:	18ffe004 	addi	r3,r3,-128
800924dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800924e0:	e0bffb17 	ldw	r2,-20(fp)
800924e4:	10800d17 	ldw	r2,52(r2)
800924e8:	10800044 	addi	r2,r2,1
800924ec:	10c1ffcc 	andi	r3,r2,2047
800924f0:	e0bffb17 	ldw	r2,-20(fp)
800924f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
800924f8:	e0bffa17 	ldw	r2,-24(fp)
800924fc:	10bfffc4 	addi	r2,r2,-1
80092500:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
80092504:	e0bffa17 	ldw	r2,-24(fp)
80092508:	10000526 	beq	r2,zero,80092520 <altera_avalon_jtag_uart_irq+0x1a8>
8009250c:	e0bffb17 	ldw	r2,-20(fp)
80092510:	10c00d17 	ldw	r3,52(r2)
80092514:	e0bffb17 	ldw	r2,-20(fp)
80092518:	10800c17 	ldw	r2,48(r2)
8009251c:	18bfe51e 	bne	r3,r2,800924b4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
80092520:	e0bffa17 	ldw	r2,-24(fp)
80092524:	103f9d26 	beq	r2,zero,8009239c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80092528:	e0bffb17 	ldw	r2,-20(fp)
8009252c:	10c00817 	ldw	r3,32(r2)
80092530:	00bfff44 	movi	r2,-3
80092534:	1886703a 	and	r3,r3,r2
80092538:	e0bffb17 	ldw	r2,-20(fp)
8009253c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80092540:	e0bffb17 	ldw	r2,-20(fp)
80092544:	10800017 	ldw	r2,0(r2)
80092548:	10800104 	addi	r2,r2,4
8009254c:	1007883a 	mov	r3,r2
80092550:	e0bffb17 	ldw	r2,-20(fp)
80092554:	10800817 	ldw	r2,32(r2)
80092558:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8009255c:	e0bffc17 	ldw	r2,-16(fp)
80092560:	10800104 	addi	r2,r2,4
80092564:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
80092568:	003f8c06 	br	8009239c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8009256c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
80092570:	0001883a 	nop
80092574:	e037883a 	mov	sp,fp
80092578:	df000017 	ldw	fp,0(sp)
8009257c:	dec00104 	addi	sp,sp,4
80092580:	f800283a 	ret

80092584 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
80092584:	defff804 	addi	sp,sp,-32
80092588:	df000715 	stw	fp,28(sp)
8009258c:	df000704 	addi	fp,sp,28
80092590:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
80092594:	e0bffb17 	ldw	r2,-20(fp)
80092598:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8009259c:	e0bff917 	ldw	r2,-28(fp)
800925a0:	10800017 	ldw	r2,0(r2)
800925a4:	10800104 	addi	r2,r2,4
800925a8:	10800037 	ldwio	r2,0(r2)
800925ac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
800925b0:	e0bffa17 	ldw	r2,-24(fp)
800925b4:	1081000c 	andi	r2,r2,1024
800925b8:	10000b26 	beq	r2,zero,800925e8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
800925bc:	e0bff917 	ldw	r2,-28(fp)
800925c0:	10800017 	ldw	r2,0(r2)
800925c4:	10800104 	addi	r2,r2,4
800925c8:	1007883a 	mov	r3,r2
800925cc:	e0bff917 	ldw	r2,-28(fp)
800925d0:	10800817 	ldw	r2,32(r2)
800925d4:	10810014 	ori	r2,r2,1024
800925d8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
800925dc:	e0bff917 	ldw	r2,-28(fp)
800925e0:	10000915 	stw	zero,36(r2)
800925e4:	00000a06 	br	80092610 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
800925e8:	e0bff917 	ldw	r2,-28(fp)
800925ec:	10c00917 	ldw	r3,36(r2)
800925f0:	00a00034 	movhi	r2,32768
800925f4:	10bfff04 	addi	r2,r2,-4
800925f8:	10c00536 	bltu	r2,r3,80092610 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
800925fc:	e0bff917 	ldw	r2,-28(fp)
80092600:	10800917 	ldw	r2,36(r2)
80092604:	10c00044 	addi	r3,r2,1
80092608:	e0bff917 	ldw	r2,-28(fp)
8009260c:	10c00915 	stw	r3,36(r2)
80092610:	d0a78b17 	ldw	r2,-25044(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
80092614:	e037883a 	mov	sp,fp
80092618:	df000017 	ldw	fp,0(sp)
8009261c:	dec00104 	addi	sp,sp,4
80092620:	f800283a 	ret

80092624 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
80092624:	defffd04 	addi	sp,sp,-12
80092628:	df000215 	stw	fp,8(sp)
8009262c:	df000204 	addi	fp,sp,8
80092630:	e13ffe15 	stw	r4,-8(fp)
80092634:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80092638:	00000506 	br	80092650 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8009263c:	e0bfff17 	ldw	r2,-4(fp)
80092640:	1090000c 	andi	r2,r2,16384
80092644:	10000226 	beq	r2,zero,80092650 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
80092648:	00bffd44 	movi	r2,-11
8009264c:	00000b06 	br	8009267c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80092650:	e0bffe17 	ldw	r2,-8(fp)
80092654:	10c00d17 	ldw	r3,52(r2)
80092658:	e0bffe17 	ldw	r2,-8(fp)
8009265c:	10800c17 	ldw	r2,48(r2)
80092660:	18800526 	beq	r3,r2,80092678 <altera_avalon_jtag_uart_close+0x54>
80092664:	e0bffe17 	ldw	r2,-8(fp)
80092668:	10c00917 	ldw	r3,36(r2)
8009266c:	e0bffe17 	ldw	r2,-8(fp)
80092670:	10800117 	ldw	r2,4(r2)
80092674:	18bff136 	bltu	r3,r2,8009263c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80092678:	0005883a 	mov	r2,zero
}
8009267c:	e037883a 	mov	sp,fp
80092680:	df000017 	ldw	fp,0(sp)
80092684:	dec00104 	addi	sp,sp,4
80092688:	f800283a 	ret

8009268c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8009268c:	defffa04 	addi	sp,sp,-24
80092690:	df000515 	stw	fp,20(sp)
80092694:	df000504 	addi	fp,sp,20
80092698:	e13ffd15 	stw	r4,-12(fp)
8009269c:	e17ffe15 	stw	r5,-8(fp)
800926a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
800926a4:	00bff9c4 	movi	r2,-25
800926a8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
800926ac:	e0bffe17 	ldw	r2,-8(fp)
800926b0:	10da8060 	cmpeqi	r3,r2,27137
800926b4:	1800031e 	bne	r3,zero,800926c4 <altera_avalon_jtag_uart_ioctl+0x38>
800926b8:	109a80a0 	cmpeqi	r2,r2,27138
800926bc:	1000181e 	bne	r2,zero,80092720 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
800926c0:	00002906 	br	80092768 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
800926c4:	e0bffd17 	ldw	r2,-12(fp)
800926c8:	10c00117 	ldw	r3,4(r2)
800926cc:	00a00034 	movhi	r2,32768
800926d0:	10bfffc4 	addi	r2,r2,-1
800926d4:	18802126 	beq	r3,r2,8009275c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
800926d8:	e0bfff17 	ldw	r2,-4(fp)
800926dc:	10800017 	ldw	r2,0(r2)
800926e0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
800926e4:	e0bffc17 	ldw	r2,-16(fp)
800926e8:	10800090 	cmplti	r2,r2,2
800926ec:	1000061e 	bne	r2,zero,80092708 <altera_avalon_jtag_uart_ioctl+0x7c>
800926f0:	e0fffc17 	ldw	r3,-16(fp)
800926f4:	00a00034 	movhi	r2,32768
800926f8:	10bfffc4 	addi	r2,r2,-1
800926fc:	18800226 	beq	r3,r2,80092708 <altera_avalon_jtag_uart_ioctl+0x7c>
80092700:	e0bffc17 	ldw	r2,-16(fp)
80092704:	00000206 	br	80092710 <altera_avalon_jtag_uart_ioctl+0x84>
80092708:	00a00034 	movhi	r2,32768
8009270c:	10bfff84 	addi	r2,r2,-2
80092710:	e0fffd17 	ldw	r3,-12(fp)
80092714:	18800115 	stw	r2,4(r3)
      rc = 0;
80092718:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8009271c:	00000f06 	br	8009275c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
80092720:	e0bffd17 	ldw	r2,-12(fp)
80092724:	10c00117 	ldw	r3,4(r2)
80092728:	00a00034 	movhi	r2,32768
8009272c:	10bfffc4 	addi	r2,r2,-1
80092730:	18800c26 	beq	r3,r2,80092764 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
80092734:	e0bffd17 	ldw	r2,-12(fp)
80092738:	10c00917 	ldw	r3,36(r2)
8009273c:	e0bffd17 	ldw	r2,-12(fp)
80092740:	10800117 	ldw	r2,4(r2)
80092744:	1885803a 	cmpltu	r2,r3,r2
80092748:	10c03fcc 	andi	r3,r2,255
8009274c:	e0bfff17 	ldw	r2,-4(fp)
80092750:	10c00015 	stw	r3,0(r2)
      rc = 0;
80092754:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80092758:	00000206 	br	80092764 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8009275c:	0001883a 	nop
80092760:	00000106 	br	80092768 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
80092764:	0001883a 	nop

  default:
    break;
  }

  return rc;
80092768:	e0bffb17 	ldw	r2,-20(fp)
}
8009276c:	e037883a 	mov	sp,fp
80092770:	df000017 	ldw	fp,0(sp)
80092774:	dec00104 	addi	sp,sp,4
80092778:	f800283a 	ret

8009277c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8009277c:	defff304 	addi	sp,sp,-52
80092780:	dfc00c15 	stw	ra,48(sp)
80092784:	df000b15 	stw	fp,44(sp)
80092788:	df000b04 	addi	fp,sp,44
8009278c:	e13ffc15 	stw	r4,-16(fp)
80092790:	e17ffd15 	stw	r5,-12(fp)
80092794:	e1bffe15 	stw	r6,-8(fp)
80092798:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8009279c:	e0bffd17 	ldw	r2,-12(fp)
800927a0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
800927a4:	00004706 	br	800928c4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
800927a8:	e0bffc17 	ldw	r2,-16(fp)
800927ac:	10800a17 	ldw	r2,40(r2)
800927b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
800927b4:	e0bffc17 	ldw	r2,-16(fp)
800927b8:	10800b17 	ldw	r2,44(r2)
800927bc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
800927c0:	e0fff717 	ldw	r3,-36(fp)
800927c4:	e0bff817 	ldw	r2,-32(fp)
800927c8:	18800536 	bltu	r3,r2,800927e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
800927cc:	e0fff717 	ldw	r3,-36(fp)
800927d0:	e0bff817 	ldw	r2,-32(fp)
800927d4:	1885c83a 	sub	r2,r3,r2
800927d8:	e0bff615 	stw	r2,-40(fp)
800927dc:	00000406 	br	800927f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
800927e0:	00c20004 	movi	r3,2048
800927e4:	e0bff817 	ldw	r2,-32(fp)
800927e8:	1885c83a 	sub	r2,r3,r2
800927ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
800927f0:	e0bff617 	ldw	r2,-40(fp)
800927f4:	10001e26 	beq	r2,zero,80092870 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
800927f8:	e0fffe17 	ldw	r3,-8(fp)
800927fc:	e0bff617 	ldw	r2,-40(fp)
80092800:	1880022e 	bgeu	r3,r2,8009280c <altera_avalon_jtag_uart_read+0x90>
        n = space;
80092804:	e0bffe17 	ldw	r2,-8(fp)
80092808:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8009280c:	e0bffc17 	ldw	r2,-16(fp)
80092810:	10c00e04 	addi	r3,r2,56
80092814:	e0bff817 	ldw	r2,-32(fp)
80092818:	1885883a 	add	r2,r3,r2
8009281c:	e1bff617 	ldw	r6,-40(fp)
80092820:	100b883a 	mov	r5,r2
80092824:	e13ff517 	ldw	r4,-44(fp)
80092828:	00899480 	call	80089948 <memcpy>
      ptr   += n;
8009282c:	e0fff517 	ldw	r3,-44(fp)
80092830:	e0bff617 	ldw	r2,-40(fp)
80092834:	1885883a 	add	r2,r3,r2
80092838:	e0bff515 	stw	r2,-44(fp)
      space -= n;
8009283c:	e0fffe17 	ldw	r3,-8(fp)
80092840:	e0bff617 	ldw	r2,-40(fp)
80092844:	1885c83a 	sub	r2,r3,r2
80092848:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8009284c:	e0fff817 	ldw	r3,-32(fp)
80092850:	e0bff617 	ldw	r2,-40(fp)
80092854:	1885883a 	add	r2,r3,r2
80092858:	10c1ffcc 	andi	r3,r2,2047
8009285c:	e0bffc17 	ldw	r2,-16(fp)
80092860:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
80092864:	e0bffe17 	ldw	r2,-8(fp)
80092868:	00bfcf16 	blt	zero,r2,800927a8 <altera_avalon_jtag_uart_read+0x2c>
8009286c:	00000106 	br	80092874 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
80092870:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80092874:	e0fff517 	ldw	r3,-44(fp)
80092878:	e0bffd17 	ldw	r2,-12(fp)
8009287c:	1880141e 	bne	r3,r2,800928d0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
80092880:	e0bfff17 	ldw	r2,-4(fp)
80092884:	1090000c 	andi	r2,r2,16384
80092888:	1000131e 	bne	r2,zero,800928d8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8009288c:	0001883a 	nop
80092890:	e0bffc17 	ldw	r2,-16(fp)
80092894:	10c00a17 	ldw	r3,40(r2)
80092898:	e0bff717 	ldw	r2,-36(fp)
8009289c:	1880051e 	bne	r3,r2,800928b4 <altera_avalon_jtag_uart_read+0x138>
800928a0:	e0bffc17 	ldw	r2,-16(fp)
800928a4:	10c00917 	ldw	r3,36(r2)
800928a8:	e0bffc17 	ldw	r2,-16(fp)
800928ac:	10800117 	ldw	r2,4(r2)
800928b0:	18bff736 	bltu	r3,r2,80092890 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
800928b4:	e0bffc17 	ldw	r2,-16(fp)
800928b8:	10c00a17 	ldw	r3,40(r2)
800928bc:	e0bff717 	ldw	r2,-36(fp)
800928c0:	18800726 	beq	r3,r2,800928e0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
800928c4:	e0bffe17 	ldw	r2,-8(fp)
800928c8:	00bfb716 	blt	zero,r2,800927a8 <altera_avalon_jtag_uart_read+0x2c>
800928cc:	00000506 	br	800928e4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
800928d0:	0001883a 	nop
800928d4:	00000306 	br	800928e4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
800928d8:	0001883a 	nop
800928dc:	00000106 	br	800928e4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
800928e0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
800928e4:	e0fff517 	ldw	r3,-44(fp)
800928e8:	e0bffd17 	ldw	r2,-12(fp)
800928ec:	18801826 	beq	r3,r2,80092950 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800928f0:	0005303a 	rdctl	r2,status
800928f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800928f8:	e0fffb17 	ldw	r3,-20(fp)
800928fc:	00bfff84 	movi	r2,-2
80092900:	1884703a 	and	r2,r3,r2
80092904:	1001703a 	wrctl	status,r2
  
  return context;
80092908:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8009290c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80092910:	e0bffc17 	ldw	r2,-16(fp)
80092914:	10800817 	ldw	r2,32(r2)
80092918:	10c00054 	ori	r3,r2,1
8009291c:	e0bffc17 	ldw	r2,-16(fp)
80092920:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80092924:	e0bffc17 	ldw	r2,-16(fp)
80092928:	10800017 	ldw	r2,0(r2)
8009292c:	10800104 	addi	r2,r2,4
80092930:	1007883a 	mov	r3,r2
80092934:	e0bffc17 	ldw	r2,-16(fp)
80092938:	10800817 	ldw	r2,32(r2)
8009293c:	18800035 	stwio	r2,0(r3)
80092940:	e0bffa17 	ldw	r2,-24(fp)
80092944:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80092948:	e0bff917 	ldw	r2,-28(fp)
8009294c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
80092950:	e0fff517 	ldw	r3,-44(fp)
80092954:	e0bffd17 	ldw	r2,-12(fp)
80092958:	18800426 	beq	r3,r2,8009296c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
8009295c:	e0fff517 	ldw	r3,-44(fp)
80092960:	e0bffd17 	ldw	r2,-12(fp)
80092964:	1885c83a 	sub	r2,r3,r2
80092968:	00000606 	br	80092984 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
8009296c:	e0bfff17 	ldw	r2,-4(fp)
80092970:	1090000c 	andi	r2,r2,16384
80092974:	10000226 	beq	r2,zero,80092980 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80092978:	00bffd44 	movi	r2,-11
8009297c:	00000106 	br	80092984 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
80092980:	00bffec4 	movi	r2,-5
}
80092984:	e037883a 	mov	sp,fp
80092988:	dfc00117 	ldw	ra,4(sp)
8009298c:	df000017 	ldw	fp,0(sp)
80092990:	dec00204 	addi	sp,sp,8
80092994:	f800283a 	ret

80092998 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80092998:	defff304 	addi	sp,sp,-52
8009299c:	dfc00c15 	stw	ra,48(sp)
800929a0:	df000b15 	stw	fp,44(sp)
800929a4:	df000b04 	addi	fp,sp,44
800929a8:	e13ffc15 	stw	r4,-16(fp)
800929ac:	e17ffd15 	stw	r5,-12(fp)
800929b0:	e1bffe15 	stw	r6,-8(fp)
800929b4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
800929b8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
800929bc:	e0bffd17 	ldw	r2,-12(fp)
800929c0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
800929c4:	00003706 	br	80092aa4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
800929c8:	e0bffc17 	ldw	r2,-16(fp)
800929cc:	10800c17 	ldw	r2,48(r2)
800929d0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
800929d4:	e0bffc17 	ldw	r2,-16(fp)
800929d8:	10800d17 	ldw	r2,52(r2)
800929dc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
800929e0:	e0fff917 	ldw	r3,-28(fp)
800929e4:	e0bff517 	ldw	r2,-44(fp)
800929e8:	1880062e 	bgeu	r3,r2,80092a04 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
800929ec:	e0fff517 	ldw	r3,-44(fp)
800929f0:	e0bff917 	ldw	r2,-28(fp)
800929f4:	1885c83a 	sub	r2,r3,r2
800929f8:	10bfffc4 	addi	r2,r2,-1
800929fc:	e0bff615 	stw	r2,-40(fp)
80092a00:	00000b06 	br	80092a30 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
80092a04:	e0bff517 	ldw	r2,-44(fp)
80092a08:	10000526 	beq	r2,zero,80092a20 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80092a0c:	00c20004 	movi	r3,2048
80092a10:	e0bff917 	ldw	r2,-28(fp)
80092a14:	1885c83a 	sub	r2,r3,r2
80092a18:	e0bff615 	stw	r2,-40(fp)
80092a1c:	00000406 	br	80092a30 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
80092a20:	00c1ffc4 	movi	r3,2047
80092a24:	e0bff917 	ldw	r2,-28(fp)
80092a28:	1885c83a 	sub	r2,r3,r2
80092a2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80092a30:	e0bff617 	ldw	r2,-40(fp)
80092a34:	10001e26 	beq	r2,zero,80092ab0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
80092a38:	e0fffe17 	ldw	r3,-8(fp)
80092a3c:	e0bff617 	ldw	r2,-40(fp)
80092a40:	1880022e 	bgeu	r3,r2,80092a4c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
80092a44:	e0bffe17 	ldw	r2,-8(fp)
80092a48:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
80092a4c:	e0bffc17 	ldw	r2,-16(fp)
80092a50:	10c20e04 	addi	r3,r2,2104
80092a54:	e0bff917 	ldw	r2,-28(fp)
80092a58:	1885883a 	add	r2,r3,r2
80092a5c:	e1bff617 	ldw	r6,-40(fp)
80092a60:	e17ffd17 	ldw	r5,-12(fp)
80092a64:	1009883a 	mov	r4,r2
80092a68:	00899480 	call	80089948 <memcpy>
      ptr   += n;
80092a6c:	e0fffd17 	ldw	r3,-12(fp)
80092a70:	e0bff617 	ldw	r2,-40(fp)
80092a74:	1885883a 	add	r2,r3,r2
80092a78:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
80092a7c:	e0fffe17 	ldw	r3,-8(fp)
80092a80:	e0bff617 	ldw	r2,-40(fp)
80092a84:	1885c83a 	sub	r2,r3,r2
80092a88:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80092a8c:	e0fff917 	ldw	r3,-28(fp)
80092a90:	e0bff617 	ldw	r2,-40(fp)
80092a94:	1885883a 	add	r2,r3,r2
80092a98:	10c1ffcc 	andi	r3,r2,2047
80092a9c:	e0bffc17 	ldw	r2,-16(fp)
80092aa0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80092aa4:	e0bffe17 	ldw	r2,-8(fp)
80092aa8:	00bfc716 	blt	zero,r2,800929c8 <altera_avalon_jtag_uart_write+0x30>
80092aac:	00000106 	br	80092ab4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
80092ab0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80092ab4:	0005303a 	rdctl	r2,status
80092ab8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80092abc:	e0fffb17 	ldw	r3,-20(fp)
80092ac0:	00bfff84 	movi	r2,-2
80092ac4:	1884703a 	and	r2,r3,r2
80092ac8:	1001703a 	wrctl	status,r2
  
  return context;
80092acc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
80092ad0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80092ad4:	e0bffc17 	ldw	r2,-16(fp)
80092ad8:	10800817 	ldw	r2,32(r2)
80092adc:	10c00094 	ori	r3,r2,2
80092ae0:	e0bffc17 	ldw	r2,-16(fp)
80092ae4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80092ae8:	e0bffc17 	ldw	r2,-16(fp)
80092aec:	10800017 	ldw	r2,0(r2)
80092af0:	10800104 	addi	r2,r2,4
80092af4:	1007883a 	mov	r3,r2
80092af8:	e0bffc17 	ldw	r2,-16(fp)
80092afc:	10800817 	ldw	r2,32(r2)
80092b00:	18800035 	stwio	r2,0(r3)
80092b04:	e0bffa17 	ldw	r2,-24(fp)
80092b08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80092b0c:	e0bff817 	ldw	r2,-32(fp)
80092b10:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
80092b14:	e0bffe17 	ldw	r2,-8(fp)
80092b18:	0080100e 	bge	zero,r2,80092b5c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
80092b1c:	e0bfff17 	ldw	r2,-4(fp)
80092b20:	1090000c 	andi	r2,r2,16384
80092b24:	1000101e 	bne	r2,zero,80092b68 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
80092b28:	0001883a 	nop
80092b2c:	e0bffc17 	ldw	r2,-16(fp)
80092b30:	10c00d17 	ldw	r3,52(r2)
80092b34:	e0bff517 	ldw	r2,-44(fp)
80092b38:	1880051e 	bne	r3,r2,80092b50 <altera_avalon_jtag_uart_write+0x1b8>
80092b3c:	e0bffc17 	ldw	r2,-16(fp)
80092b40:	10c00917 	ldw	r3,36(r2)
80092b44:	e0bffc17 	ldw	r2,-16(fp)
80092b48:	10800117 	ldw	r2,4(r2)
80092b4c:	18bff736 	bltu	r3,r2,80092b2c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
80092b50:	e0bffc17 	ldw	r2,-16(fp)
80092b54:	10800917 	ldw	r2,36(r2)
80092b58:	1000051e 	bne	r2,zero,80092b70 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
80092b5c:	e0bffe17 	ldw	r2,-8(fp)
80092b60:	00bfd016 	blt	zero,r2,80092aa4 <altera_avalon_jtag_uart_write+0x10c>
80092b64:	00000306 	br	80092b74 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
80092b68:	0001883a 	nop
80092b6c:	00000106 	br	80092b74 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
80092b70:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
80092b74:	e0fffd17 	ldw	r3,-12(fp)
80092b78:	e0bff717 	ldw	r2,-36(fp)
80092b7c:	18800426 	beq	r3,r2,80092b90 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
80092b80:	e0fffd17 	ldw	r3,-12(fp)
80092b84:	e0bff717 	ldw	r2,-36(fp)
80092b88:	1885c83a 	sub	r2,r3,r2
80092b8c:	00000606 	br	80092ba8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
80092b90:	e0bfff17 	ldw	r2,-4(fp)
80092b94:	1090000c 	andi	r2,r2,16384
80092b98:	10000226 	beq	r2,zero,80092ba4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
80092b9c:	00bffd44 	movi	r2,-11
80092ba0:	00000106 	br	80092ba8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
80092ba4:	00bffec4 	movi	r2,-5
}
80092ba8:	e037883a 	mov	sp,fp
80092bac:	dfc00117 	ldw	ra,4(sp)
80092bb0:	df000017 	ldw	fp,0(sp)
80092bb4:	dec00204 	addi	sp,sp,8
80092bb8:	f800283a 	ret

80092bbc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
80092bbc:	defffa04 	addi	sp,sp,-24
80092bc0:	dfc00515 	stw	ra,20(sp)
80092bc4:	df000415 	stw	fp,16(sp)
80092bc8:	df000404 	addi	fp,sp,16
80092bcc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
80092bd0:	0007883a 	mov	r3,zero
80092bd4:	e0bfff17 	ldw	r2,-4(fp)
80092bd8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
80092bdc:	e0bfff17 	ldw	r2,-4(fp)
80092be0:	10800104 	addi	r2,r2,4
80092be4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80092be8:	0005303a 	rdctl	r2,status
80092bec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80092bf0:	e0fffd17 	ldw	r3,-12(fp)
80092bf4:	00bfff84 	movi	r2,-2
80092bf8:	1884703a 	and	r2,r3,r2
80092bfc:	1001703a 	wrctl	status,r2
  
  return context;
80092c00:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
80092c04:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
80092c08:	0091d440 	call	80091d44 <alt_tick>
80092c0c:	e0bffc17 	ldw	r2,-16(fp)
80092c10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80092c14:	e0bffe17 	ldw	r2,-8(fp)
80092c18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
80092c1c:	0001883a 	nop
80092c20:	e037883a 	mov	sp,fp
80092c24:	dfc00117 	ldw	ra,4(sp)
80092c28:	df000017 	ldw	fp,0(sp)
80092c2c:	dec00204 	addi	sp,sp,8
80092c30:	f800283a 	ret

80092c34 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
80092c34:	defff804 	addi	sp,sp,-32
80092c38:	dfc00715 	stw	ra,28(sp)
80092c3c:	df000615 	stw	fp,24(sp)
80092c40:	df000604 	addi	fp,sp,24
80092c44:	e13ffc15 	stw	r4,-16(fp)
80092c48:	e17ffd15 	stw	r5,-12(fp)
80092c4c:	e1bffe15 	stw	r6,-8(fp)
80092c50:	e1ffff15 	stw	r7,-4(fp)
80092c54:	e0bfff17 	ldw	r2,-4(fp)
80092c58:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
80092c5c:	d0a78b17 	ldw	r2,-25044(gp)
80092c60:	1000021e 	bne	r2,zero,80092c6c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
80092c64:	e0bffb17 	ldw	r2,-20(fp)
80092c68:	d0a78b15 	stw	r2,-25044(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
80092c6c:	e0bffc17 	ldw	r2,-16(fp)
80092c70:	10800104 	addi	r2,r2,4
80092c74:	00c001c4 	movi	r3,7
80092c78:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
80092c7c:	d8000015 	stw	zero,0(sp)
80092c80:	e1fffc17 	ldw	r7,-16(fp)
80092c84:	01a00274 	movhi	r6,32777
80092c88:	318aef04 	addi	r6,r6,11196
80092c8c:	e17ffe17 	ldw	r5,-8(fp)
80092c90:	e13ffd17 	ldw	r4,-12(fp)
80092c94:	009505c0 	call	8009505c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
80092c98:	0001883a 	nop
80092c9c:	e037883a 	mov	sp,fp
80092ca0:	dfc00117 	ldw	ra,4(sp)
80092ca4:	df000017 	ldw	fp,0(sp)
80092ca8:	dec00204 	addi	sp,sp,8
80092cac:	f800283a 	ret

80092cb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80092cb0:	defffe04 	addi	sp,sp,-8
80092cb4:	dfc00115 	stw	ra,4(sp)
80092cb8:	df000015 	stw	fp,0(sp)
80092cbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80092cc0:	d0a01a17 	ldw	r2,-32664(gp)
80092cc4:	10000326 	beq	r2,zero,80092cd4 <alt_get_errno+0x24>
80092cc8:	d0a01a17 	ldw	r2,-32664(gp)
80092ccc:	103ee83a 	callr	r2
80092cd0:	00000106 	br	80092cd8 <alt_get_errno+0x28>
80092cd4:	d0a78704 	addi	r2,gp,-25060
}
80092cd8:	e037883a 	mov	sp,fp
80092cdc:	dfc00117 	ldw	ra,4(sp)
80092ce0:	df000017 	ldw	fp,0(sp)
80092ce4:	dec00204 	addi	sp,sp,8
80092ce8:	f800283a 	ret

80092cec <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
80092cec:	defffc04 	addi	sp,sp,-16
80092cf0:	df000315 	stw	fp,12(sp)
80092cf4:	df000304 	addi	fp,sp,12
80092cf8:	e13ffd15 	stw	r4,-12(fp)
80092cfc:	e17ffe15 	stw	r5,-8(fp)
80092d00:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80092d04:	e0bffd17 	ldw	r2,-12(fp)
80092d08:	10800037 	ldwio	r2,0(r2)
80092d0c:	1080010c 	andi	r2,r2,4
80092d10:	10000226 	beq	r2,zero,80092d1c <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
80092d14:	00bff904 	movi	r2,-28
80092d18:	00001506 	br	80092d70 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
80092d1c:	e0bfff17 	ldw	r2,-4(fp)
80092d20:	10800017 	ldw	r2,0(r2)
80092d24:	1007883a 	mov	r3,r2
80092d28:	e0bffe17 	ldw	r2,-8(fp)
80092d2c:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
80092d30:	e0bffe17 	ldw	r2,-8(fp)
80092d34:	10800104 	addi	r2,r2,4
80092d38:	e0ffff17 	ldw	r3,-4(fp)
80092d3c:	18c00117 	ldw	r3,4(r3)
80092d40:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
80092d44:	e0bffe17 	ldw	r2,-8(fp)
80092d48:	10800204 	addi	r2,r2,8
80092d4c:	e0ffff17 	ldw	r3,-4(fp)
80092d50:	18c00217 	ldw	r3,8(r3)
80092d54:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
80092d58:	e0bffe17 	ldw	r2,-8(fp)
80092d5c:	10800304 	addi	r2,r2,12
80092d60:	e0ffff17 	ldw	r3,-4(fp)
80092d64:	18c00317 	ldw	r3,12(r3)
80092d68:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
80092d6c:	0005883a 	mov	r2,zero
}
80092d70:	e037883a 	mov	sp,fp
80092d74:	df000017 	ldw	fp,0(sp)
80092d78:	dec00104 	addi	sp,sp,4
80092d7c:	f800283a 	ret

80092d80 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
80092d80:	defffc04 	addi	sp,sp,-16
80092d84:	df000315 	stw	fp,12(sp)
80092d88:	df000304 	addi	fp,sp,12
80092d8c:	e13ffd15 	stw	r4,-12(fp)
80092d90:	e17ffe15 	stw	r5,-8(fp)
80092d94:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80092d98:	e0bffd17 	ldw	r2,-12(fp)
80092d9c:	10800037 	ldwio	r2,0(r2)
80092da0:	1080010c 	andi	r2,r2,4
80092da4:	10000226 	beq	r2,zero,80092db0 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
80092da8:	00bff904 	movi	r2,-28
80092dac:	00003b06 	br	80092e9c <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
80092db0:	e0bfff17 	ldw	r2,-4(fp)
80092db4:	10800017 	ldw	r2,0(r2)
80092db8:	1007883a 	mov	r3,r2
80092dbc:	e0bffe17 	ldw	r2,-8(fp)
80092dc0:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
80092dc4:	e0bffe17 	ldw	r2,-8(fp)
80092dc8:	10800104 	addi	r2,r2,4
80092dcc:	e0ffff17 	ldw	r3,-4(fp)
80092dd0:	18c00117 	ldw	r3,4(r3)
80092dd4:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
80092dd8:	e0bffe17 	ldw	r2,-8(fp)
80092ddc:	10800204 	addi	r2,r2,8
80092de0:	e0ffff17 	ldw	r3,-4(fp)
80092de4:	18c00217 	ldw	r3,8(r3)
80092de8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
80092dec:	e0bffe17 	ldw	r2,-8(fp)
80092df0:	10800304 	addi	r2,r2,12
80092df4:	e0ffff17 	ldw	r3,-4(fp)
80092df8:	18c0030b 	ldhu	r3,12(r3)
80092dfc:	18ffffcc 	andi	r3,r3,65535
80092e00:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
80092e04:	e0bffe17 	ldw	r2,-8(fp)
80092e08:	10800384 	addi	r2,r2,14
80092e0c:	e0ffff17 	ldw	r3,-4(fp)
80092e10:	18c00383 	ldbu	r3,14(r3)
80092e14:	18c03fcc 	andi	r3,r3,255
80092e18:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
80092e1c:	e0bffe17 	ldw	r2,-8(fp)
80092e20:	108003c4 	addi	r2,r2,15
80092e24:	e0ffff17 	ldw	r3,-4(fp)
80092e28:	18c003c3 	ldbu	r3,15(r3)
80092e2c:	18c03fcc 	andi	r3,r3,255
80092e30:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
80092e34:	e0bffe17 	ldw	r2,-8(fp)
80092e38:	10800404 	addi	r2,r2,16
80092e3c:	e0ffff17 	ldw	r3,-4(fp)
80092e40:	18c0040b 	ldhu	r3,16(r3)
80092e44:	18ffffcc 	andi	r3,r3,65535
80092e48:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
80092e4c:	e0bffe17 	ldw	r2,-8(fp)
80092e50:	10800484 	addi	r2,r2,18
80092e54:	e0ffff17 	ldw	r3,-4(fp)
80092e58:	18c0048b 	ldhu	r3,18(r3)
80092e5c:	18ffffcc 	andi	r3,r3,65535
80092e60:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
80092e64:	e0bffe17 	ldw	r2,-8(fp)
80092e68:	10800504 	addi	r2,r2,20
80092e6c:	0007883a 	mov	r3,zero
80092e70:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
80092e74:	e0bffe17 	ldw	r2,-8(fp)
80092e78:	10800604 	addi	r2,r2,24
80092e7c:	0007883a 	mov	r3,zero
80092e80:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
80092e84:	e0bffe17 	ldw	r2,-8(fp)
80092e88:	10800704 	addi	r2,r2,28
80092e8c:	e0ffff17 	ldw	r3,-4(fp)
80092e90:	18c00717 	ldw	r3,28(r3)
80092e94:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
80092e98:	0005883a 	mov	r2,zero
}
80092e9c:	e037883a 	mov	sp,fp
80092ea0:	df000017 	ldw	fp,0(sp)
80092ea4:	dec00104 	addi	sp,sp,4
80092ea8:	f800283a 	ret

80092eac <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
80092eac:	defff804 	addi	sp,sp,-32
80092eb0:	dfc00715 	stw	ra,28(sp)
80092eb4:	df000615 	stw	fp,24(sp)
80092eb8:	df000604 	addi	fp,sp,24
80092ebc:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
80092ec0:	e0bfff17 	ldw	r2,-4(fp)
80092ec4:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
80092ec8:	e0bffa17 	ldw	r2,-24(fp)
80092ecc:	10801783 	ldbu	r2,94(r2)
80092ed0:	10803fcc 	andi	r2,r2,255
80092ed4:	10001126 	beq	r2,zero,80092f1c <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80092ed8:	e0bffa17 	ldw	r2,-24(fp)
80092edc:	10800617 	ldw	r2,24(r2)
80092ee0:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80092ee4:	1007883a 	mov	r3,r2
80092ee8:	00bffdc4 	movi	r2,-9
80092eec:	1884703a 	and	r2,r3,r2
80092ef0:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80092ef4:	e0bffa17 	ldw	r2,-24(fp)
80092ef8:	10800617 	ldw	r2,24(r2)
80092efc:	e0fffb17 	ldw	r3,-20(fp)
80092f00:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
80092f04:	e0bffa17 	ldw	r2,-24(fp)
80092f08:	10800617 	ldw	r2,24(r2)
80092f0c:	10800404 	addi	r2,r2,16
80092f10:	00c00044 	movi	r3,1
80092f14:	10c00035 	stwio	r3,0(r2)
80092f18:	00001106 	br	80092f60 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80092f1c:	e0bffa17 	ldw	r2,-24(fp)
80092f20:	10800317 	ldw	r2,12(r2)
80092f24:	10800104 	addi	r2,r2,4
80092f28:	10800037 	ldwio	r2,0(r2)
80092f2c:	1007883a 	mov	r3,r2
80092f30:	00bffbc4 	movi	r2,-17
80092f34:	1884703a 	and	r2,r3,r2
80092f38:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80092f3c:	e0bffa17 	ldw	r2,-24(fp)
80092f40:	10800317 	ldw	r2,12(r2)
80092f44:	10800104 	addi	r2,r2,4
80092f48:	e0fffb17 	ldw	r3,-20(fp)
80092f4c:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80092f50:	e0bffa17 	ldw	r2,-24(fp)
80092f54:	10800317 	ldw	r2,12(r2)
80092f58:	00c08004 	movi	r3,512
80092f5c:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
80092f60:	e0bffa17 	ldw	r2,-24(fp)
80092f64:	10800b17 	ldw	r2,44(r2)
80092f68:	10001226 	beq	r2,zero,80092fb4 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80092f6c:	0005303a 	rdctl	r2,status
80092f70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80092f74:	e0fffd17 	ldw	r3,-12(fp)
80092f78:	00bfff84 	movi	r2,-2
80092f7c:	1884703a 	and	r2,r3,r2
80092f80:	1001703a 	wrctl	status,r2
  
  return context;
80092f84:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
80092f88:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
80092f8c:	e0bffa17 	ldw	r2,-24(fp)
80092f90:	10800b17 	ldw	r2,44(r2)
80092f94:	e0fffa17 	ldw	r3,-24(fp)
80092f98:	18c00c17 	ldw	r3,48(r3)
80092f9c:	1809883a 	mov	r4,r3
80092fa0:	103ee83a 	callr	r2
80092fa4:	e0bffc17 	ldw	r2,-16(fp)
80092fa8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80092fac:	e0bffe17 	ldw	r2,-8(fp)
80092fb0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
80092fb4:	e0bffa17 	ldw	r2,-24(fp)
80092fb8:	10801783 	ldbu	r2,94(r2)
80092fbc:	10803fcc 	andi	r2,r2,255
80092fc0:	10000a26 	beq	r2,zero,80092fec <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80092fc4:	e0bffa17 	ldw	r2,-24(fp)
80092fc8:	10800617 	ldw	r2,24(r2)
80092fcc:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80092fd0:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
80092fd4:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80092fd8:	e0bffa17 	ldw	r2,-24(fp)
80092fdc:	10800617 	ldw	r2,24(r2)
80092fe0:	e0fffb17 	ldw	r3,-20(fp)
80092fe4:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
80092fe8:	00000c06 	br	8009301c <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80092fec:	e0bffa17 	ldw	r2,-24(fp)
80092ff0:	10800317 	ldw	r2,12(r2)
80092ff4:	10800104 	addi	r2,r2,4
80092ff8:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
80092ffc:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80093000:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80093004:	e0bffa17 	ldw	r2,-24(fp)
80093008:	10800317 	ldw	r2,12(r2)
8009300c:	10800104 	addi	r2,r2,4
80093010:	e0fffb17 	ldw	r3,-20(fp)
80093014:	10c00035 	stwio	r3,0(r2)
    }

    return;
80093018:	0001883a 	nop
}
8009301c:	e037883a 	mov	sp,fp
80093020:	dfc00117 	ldw	ra,4(sp)
80093024:	df000017 	ldw	fp,0(sp)
80093028:	dec00204 	addi	sp,sp,8
8009302c:	f800283a 	ret

80093030 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
80093030:	defffb04 	addi	sp,sp,-20
80093034:	df000415 	stw	fp,16(sp)
80093038:	df000404 	addi	fp,sp,16
8009303c:	e13ffc15 	stw	r4,-16(fp)
80093040:	e17ffd15 	stw	r5,-12(fp)
80093044:	e1bffe15 	stw	r6,-8(fp)
80093048:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8009304c:	e0bffc17 	ldw	r2,-16(fp)
80093050:	10c01217 	ldw	r3,72(r2)
80093054:	e0800117 	ldw	r2,4(fp)
80093058:	18800436 	bltu	r3,r2,8009306c <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8009305c:	e0bffc17 	ldw	r2,-16(fp)
80093060:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
80093064:	10803fcc 	andi	r2,r2,255
80093068:	10000226 	beq	r2,zero,80093074 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8009306c:	00bffa84 	movi	r2,-22
80093070:	00000e06 	br	800930ac <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
80093074:	e0bffd17 	ldw	r2,-12(fp)
80093078:	e0fffe17 	ldw	r3,-8(fp)
8009307c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80093080:	e0bffd17 	ldw	r2,-12(fp)
80093084:	e0ffff17 	ldw	r3,-4(fp)
80093088:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8009308c:	e0bffd17 	ldw	r2,-12(fp)
80093090:	e0c00117 	ldw	r3,4(fp)
80093094:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80093098:	e0800217 	ldw	r2,8(fp)
8009309c:	10e00034 	orhi	r3,r2,32768
800930a0:	e0bffd17 	ldw	r2,-12(fp)
800930a4:	10c00315 	stw	r3,12(r2)
    
    return 0;
800930a8:	0005883a 	mov	r2,zero
}
800930ac:	e037883a 	mov	sp,fp
800930b0:	df000017 	ldw	fp,0(sp)
800930b4:	dec00104 	addi	sp,sp,4
800930b8:	f800283a 	ret

800930bc <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
800930bc:	defff604 	addi	sp,sp,-40
800930c0:	df000915 	stw	fp,36(sp)
800930c4:	df000904 	addi	fp,sp,36
800930c8:	e13ff715 	stw	r4,-36(fp)
800930cc:	e17ff815 	stw	r5,-32(fp)
800930d0:	e1bff915 	stw	r6,-28(fp)
800930d4:	e1fffa15 	stw	r7,-24(fp)
800930d8:	e1800317 	ldw	r6,12(fp)
800930dc:	e1400417 	ldw	r5,16(fp)
800930e0:	e1000517 	ldw	r4,20(fp)
800930e4:	e0c00617 	ldw	r3,24(fp)
800930e8:	e0800717 	ldw	r2,28(fp)
800930ec:	e1bffb0d 	sth	r6,-20(fp)
800930f0:	e17ffc05 	stb	r5,-16(fp)
800930f4:	e13ffd05 	stb	r4,-12(fp)
800930f8:	e0fffe0d 	sth	r3,-8(fp)
800930fc:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
80093100:	e0bff717 	ldw	r2,-36(fp)
80093104:	10c01217 	ldw	r3,72(r2)
80093108:	e0800117 	ldw	r2,4(fp)
8009310c:	18801936 	bltu	r3,r2,80093174 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80093110:	e13ff717 	ldw	r4,-36(fp)
80093114:	20801317 	ldw	r2,76(r4)
80093118:	20c01417 	ldw	r3,80(r4)
8009311c:	e13ffe0b 	ldhu	r4,-8(fp)
80093120:	213fffcc 	andi	r4,r4,65535
80093124:	2015883a 	mov	r10,r4
80093128:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8009312c:	1ac01136 	bltu	r3,r11,80093174 <alt_msgdma_construct_extended_descriptor+0xb8>
80093130:	58c0011e 	bne	r11,r3,80093138 <alt_msgdma_construct_extended_descriptor+0x7c>
80093134:	12800f36 	bltu	r2,r10,80093174 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80093138:	e13ff717 	ldw	r4,-36(fp)
8009313c:	20801317 	ldw	r2,76(r4)
80093140:	20c01417 	ldw	r3,80(r4)
80093144:	e13fff0b 	ldhu	r4,-4(fp)
80093148:	213fffcc 	andi	r4,r4,65535
8009314c:	2011883a 	mov	r8,r4
80093150:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80093154:	1a400736 	bltu	r3,r9,80093174 <alt_msgdma_construct_extended_descriptor+0xb8>
80093158:	48c0011e 	bne	r9,r3,80093160 <alt_msgdma_construct_extended_descriptor+0xa4>
8009315c:	12000536 	bltu	r2,r8,80093174 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
80093160:	e0bff717 	ldw	r2,-36(fp)
80093164:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80093168:	10803fcc 	andi	r2,r2,255
8009316c:	10800060 	cmpeqi	r2,r2,1
80093170:	1000021e 	bne	r2,zero,8009317c <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80093174:	00bffa84 	movi	r2,-22
80093178:	00002106 	br	80093200 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8009317c:	e0bff817 	ldw	r2,-32(fp)
80093180:	e0fff917 	ldw	r3,-28(fp)
80093184:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
80093188:	e0bff817 	ldw	r2,-32(fp)
8009318c:	e0fffa17 	ldw	r3,-24(fp)
80093190:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80093194:	e0bff817 	ldw	r2,-32(fp)
80093198:	e0c00117 	ldw	r3,4(fp)
8009319c:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
800931a0:	e0bff817 	ldw	r2,-32(fp)
800931a4:	e0fffb0b 	ldhu	r3,-20(fp)
800931a8:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
800931ac:	e0bff817 	ldw	r2,-32(fp)
800931b0:	e0fffc03 	ldbu	r3,-16(fp)
800931b4:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
800931b8:	e0bff817 	ldw	r2,-32(fp)
800931bc:	e0fffd03 	ldbu	r3,-12(fp)
800931c0:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
800931c4:	e0bff817 	ldw	r2,-32(fp)
800931c8:	e0fffe0b 	ldhu	r3,-8(fp)
800931cc:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
800931d0:	e0bff817 	ldw	r2,-32(fp)
800931d4:	e0ffff0b 	ldhu	r3,-4(fp)
800931d8:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
800931dc:	e0bff817 	ldw	r2,-32(fp)
800931e0:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
800931e4:	e0bff817 	ldw	r2,-32(fp)
800931e8:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
800931ec:	e0800217 	ldw	r2,8(fp)
800931f0:	10e00034 	orhi	r3,r2,32768
800931f4:	e0bff817 	ldw	r2,-32(fp)
800931f8:	10c00715 	stw	r3,28(r2)

  return 0 ;
800931fc:	0005883a 	mov	r2,zero

}
80093200:	e037883a 	mov	sp,fp
80093204:	df000017 	ldw	fp,0(sp)
80093208:	dec00104 	addi	sp,sp,4
8009320c:	f800283a 	ret

80093210 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
80093210:	defff004 	addi	sp,sp,-64
80093214:	dfc00f15 	stw	ra,60(sp)
80093218:	df000e15 	stw	fp,56(sp)
8009321c:	df000e04 	addi	fp,sp,56
80093220:	e13ffd15 	stw	r4,-12(fp)
80093224:	e17ffe15 	stw	r5,-8(fp)
80093228:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8009322c:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
80093230:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
80093234:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80093238:	e0bffd17 	ldw	r2,-12(fp)
8009323c:	10800317 	ldw	r2,12(r2)
80093240:	10800204 	addi	r2,r2,8
80093244:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80093248:	10bfffcc 	andi	r2,r2,65535
8009324c:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80093250:	e0bffd17 	ldw	r2,-12(fp)
80093254:	10800317 	ldw	r2,12(r2)
80093258:	10800204 	addi	r2,r2,8
8009325c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80093260:	1004d43a 	srli	r2,r2,16
80093264:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80093268:	e0bffd17 	ldw	r2,-12(fp)
8009326c:	10800917 	ldw	r2,36(r2)
80093270:	e0fff617 	ldw	r3,-40(fp)
80093274:	1880042e 	bgeu	r3,r2,80093288 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
80093278:	e0bffd17 	ldw	r2,-12(fp)
8009327c:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80093280:	e0fff517 	ldw	r3,-44(fp)
80093284:	18800236 	bltu	r3,r2,80093290 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
80093288:	00bff904 	movi	r2,-28
8009328c:	00008f06 	br	800934cc <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80093290:	00800804 	movi	r2,32
80093294:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093298:	0005303a 	rdctl	r2,status
8009329c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800932a0:	e0fff717 	ldw	r3,-36(fp)
800932a4:	00bfff84 	movi	r2,-2
800932a8:	1884703a 	and	r2,r3,r2
800932ac:	1001703a 	wrctl	status,r2
  
  return context;
800932b0:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
800932b4:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
800932b8:	e0bffd17 	ldw	r2,-12(fp)
800932bc:	10800317 	ldw	r2,12(r2)
800932c0:	10800104 	addi	r2,r2,4
800932c4:	e0fff317 	ldw	r3,-52(fp)
800932c8:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
800932cc:	e0bffd17 	ldw	r2,-12(fp)
800932d0:	10800317 	ldw	r2,12(r2)
800932d4:	e0fffd17 	ldw	r3,-12(fp)
800932d8:	18c00317 	ldw	r3,12(r3)
800932dc:	18c00037 	ldwio	r3,0(r3)
800932e0:	10c00035 	stwio	r3,0(r2)
800932e4:	e0bff417 	ldw	r2,-48(fp)
800932e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
800932ec:	e0bffc17 	ldw	r2,-16(fp)
800932f0:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
800932f4:	e0bffe17 	ldw	r2,-8(fp)
800932f8:	10001a26 	beq	r2,zero,80093364 <alt_msgdma_descriptor_async_transfer+0x154>
800932fc:	e0bfff17 	ldw	r2,-4(fp)
80093300:	1000181e 	bne	r2,zero,80093364 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80093304:	00000d06 	br	8009333c <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80093308:	01000044 	movi	r4,1
8009330c:	0094c580 	call	80094c58 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80093310:	e0bff20b 	ldhu	r2,-56(fp)
80093314:	1084e230 	cmpltui	r2,r2,5000
80093318:	1000051e 	bne	r2,zero,80093330 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8009331c:	01200274 	movhi	r4,32777
80093320:	211b4b04 	addi	r4,r4,27948
80093324:	00956900 	call	80095690 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
80093328:	00bff084 	movi	r2,-62
8009332c:	00006706 	br	800934cc <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80093330:	e0bff20b 	ldhu	r2,-56(fp)
80093334:	10800044 	addi	r2,r2,1
80093338:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8009333c:	e0bffd17 	ldw	r2,-12(fp)
80093340:	10c00317 	ldw	r3,12(r2)
80093344:	e0bffd17 	ldw	r2,-12(fp)
80093348:	10800417 	ldw	r2,16(r2)
8009334c:	e1bffe17 	ldw	r6,-8(fp)
80093350:	100b883a 	mov	r5,r2
80093354:	1809883a 	mov	r4,r3
80093358:	0092cec0 	call	80092cec <alt_msgdma_write_standard_descriptor>
8009335c:	103fea1e 	bne	r2,zero,80093308 <alt_msgdma_descriptor_async_transfer+0xf8>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
80093360:	00001f06 	br	800933e0 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80093364:	e0bffe17 	ldw	r2,-8(fp)
80093368:	10001b1e 	bne	r2,zero,800933d8 <alt_msgdma_descriptor_async_transfer+0x1c8>
8009336c:	e0bfff17 	ldw	r2,-4(fp)
80093370:	10001926 	beq	r2,zero,800933d8 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
80093374:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80093378:	00000d06 	br	800933b0 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8009337c:	01000044 	movi	r4,1
80093380:	0094c580 	call	80094c58 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80093384:	e0bff20b 	ldhu	r2,-56(fp)
80093388:	1084e230 	cmpltui	r2,r2,5000
8009338c:	1000051e 	bne	r2,zero,800933a4 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
80093390:	01200274 	movhi	r4,32777
80093394:	211b6104 	addi	r4,r4,28036
80093398:	00956900 	call	80095690 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009339c:	00bff084 	movi	r2,-62
800933a0:	00004a06 	br	800934cc <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
800933a4:	e0bff20b 	ldhu	r2,-56(fp)
800933a8:	10800044 	addi	r2,r2,1
800933ac:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
800933b0:	e0bffd17 	ldw	r2,-12(fp)
800933b4:	10c00317 	ldw	r3,12(r2)
800933b8:	e0bffd17 	ldw	r2,-12(fp)
800933bc:	10800417 	ldw	r2,16(r2)
800933c0:	e1bfff17 	ldw	r6,-4(fp)
800933c4:	100b883a 	mov	r5,r2
800933c8:	1809883a 	mov	r4,r3
800933cc:	0092d800 	call	80092d80 <alt_msgdma_write_extended_descriptor>
800933d0:	103fea1e 	bne	r2,zero,8009337c <alt_msgdma_descriptor_async_transfer+0x16c>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
800933d4:	00000206 	br	800933e0 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
800933d8:	00bfffc4 	movi	r2,-1
800933dc:	00003b06 	br	800934cc <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
800933e0:	e0bffd17 	ldw	r2,-12(fp)
800933e4:	10800b17 	ldw	r2,44(r2)
800933e8:	10001c26 	beq	r2,zero,8009345c <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
800933ec:	e0bffd17 	ldw	r2,-12(fp)
800933f0:	10c00d17 	ldw	r3,52(r2)
800933f4:	e0bff317 	ldw	r2,-52(fp)
800933f8:	1884b03a 	or	r2,r3,r2
800933fc:	10800514 	ori	r2,r2,20
80093400:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80093404:	e0fff317 	ldw	r3,-52(fp)
80093408:	00bff7c4 	movi	r2,-33
8009340c:	1884703a 	and	r2,r3,r2
80093410:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093414:	0005303a 	rdctl	r2,status
80093418:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009341c:	e0fffa17 	ldw	r3,-24(fp)
80093420:	00bfff84 	movi	r2,-2
80093424:	1884703a 	and	r2,r3,r2
80093428:	1001703a 	wrctl	status,r2
  
  return context;
8009342c:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80093430:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80093434:	e0bffd17 	ldw	r2,-12(fp)
80093438:	10800317 	ldw	r2,12(r2)
8009343c:	10800104 	addi	r2,r2,4
80093440:	e0fff317 	ldw	r3,-52(fp)
80093444:	10c00035 	stwio	r3,0(r2)
80093448:	e0bff417 	ldw	r2,-48(fp)
8009344c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093450:	e0bff817 	ldw	r2,-32(fp)
80093454:	1001703a 	wrctl	status,r2
80093458:	00001b06 	br	800934c8 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8009345c:	e0bffd17 	ldw	r2,-12(fp)
80093460:	10c00d17 	ldw	r3,52(r2)
80093464:	e0bff317 	ldw	r2,-52(fp)
80093468:	1884b03a 	or	r2,r3,r2
8009346c:	10800114 	ori	r2,r2,4
80093470:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
80093474:	e0fff317 	ldw	r3,-52(fp)
80093478:	00bff3c4 	movi	r2,-49
8009347c:	1884703a 	and	r2,r3,r2
80093480:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80093484:	0005303a 	rdctl	r2,status
80093488:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009348c:	e0fffb17 	ldw	r3,-20(fp)
80093490:	00bfff84 	movi	r2,-2
80093494:	1884703a 	and	r2,r3,r2
80093498:	1001703a 	wrctl	status,r2
  
  return context;
8009349c:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
800934a0:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
800934a4:	e0bffd17 	ldw	r2,-12(fp)
800934a8:	10800317 	ldw	r2,12(r2)
800934ac:	10800104 	addi	r2,r2,4
800934b0:	e0fff317 	ldw	r3,-52(fp)
800934b4:	10c00035 	stwio	r3,0(r2)
800934b8:	e0bff417 	ldw	r2,-48(fp)
800934bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
800934c0:	e0bff917 	ldw	r2,-28(fp)
800934c4:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
800934c8:	0005883a 	mov	r2,zero
}
800934cc:	e037883a 	mov	sp,fp
800934d0:	dfc00117 	ldw	ra,4(sp)
800934d4:	df000017 	ldw	fp,0(sp)
800934d8:	dec00204 	addi	sp,sp,8
800934dc:	f800283a 	ret

800934e0 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
800934e0:	defff004 	addi	sp,sp,-64
800934e4:	dfc00f15 	stw	ra,60(sp)
800934e8:	df000e15 	stw	fp,56(sp)
800934ec:	df000e04 	addi	fp,sp,56
800934f0:	e13ffd15 	stw	r4,-12(fp)
800934f4:	e17ffe15 	stw	r5,-8(fp)
800934f8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
800934fc:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
80093500:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
80093504:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
80093508:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009350c:	e0bffd17 	ldw	r2,-12(fp)
80093510:	10800317 	ldw	r2,12(r2)
80093514:	10800204 	addi	r2,r2,8
80093518:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8009351c:	10bfffcc 	andi	r2,r2,65535
80093520:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80093524:	e0bffd17 	ldw	r2,-12(fp)
80093528:	10800317 	ldw	r2,12(r2)
8009352c:	10800204 	addi	r2,r2,8
80093530:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80093534:	1004d43a 	srli	r2,r2,16
80093538:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8009353c:	00807804 	movi	r2,480
80093540:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80093544:	00001906 	br	800935ac <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
80093548:	01000044 	movi	r4,1
8009354c:	0094c580 	call	80094c58 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80093550:	e0bff30b 	ldhu	r2,-52(fp)
80093554:	1084e230 	cmpltui	r2,r2,5000
80093558:	1000051e 	bne	r2,zero,80093570 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8009355c:	01200274 	movhi	r4,32777
80093560:	211b7704 	addi	r4,r4,28124
80093564:	00956900 	call	80095690 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
80093568:	00bff084 	movi	r2,-62
8009356c:	0000b506 	br	80093844 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
80093570:	e0bff30b 	ldhu	r2,-52(fp)
80093574:	10800044 	addi	r2,r2,1
80093578:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009357c:	e0bffd17 	ldw	r2,-12(fp)
80093580:	10800317 	ldw	r2,12(r2)
80093584:	10800204 	addi	r2,r2,8
80093588:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8009358c:	10bfffcc 	andi	r2,r2,65535
80093590:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80093594:	e0bffd17 	ldw	r2,-12(fp)
80093598:	10800317 	ldw	r2,12(r2)
8009359c:	10800204 	addi	r2,r2,8
800935a0:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
800935a4:	1004d43a 	srli	r2,r2,16
800935a8:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
800935ac:	e0bffd17 	ldw	r2,-12(fp)
800935b0:	10800917 	ldw	r2,36(r2)
800935b4:	e0fff517 	ldw	r3,-44(fp)
800935b8:	18bfe32e 	bgeu	r3,r2,80093548 <alt_msgdma_descriptor_sync_transfer+0x68>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
800935bc:	e0bffd17 	ldw	r2,-12(fp)
800935c0:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
800935c4:	e0fff417 	ldw	r3,-48(fp)
800935c8:	18bfdf2e 	bgeu	r3,r2,80093548 <alt_msgdma_descriptor_sync_transfer+0x68>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800935cc:	0005303a 	rdctl	r2,status
800935d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800935d4:	e0fffc17 	ldw	r3,-16(fp)
800935d8:	00bfff84 	movi	r2,-2
800935dc:	1884703a 	and	r2,r3,r2
800935e0:	1001703a 	wrctl	status,r2
  
  return context;
800935e4:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
800935e8:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
800935ec:	e0bffd17 	ldw	r2,-12(fp)
800935f0:	10800317 	ldw	r2,12(r2)
800935f4:	10800104 	addi	r2,r2,4
800935f8:	00c00804 	movi	r3,32
800935fc:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80093600:	e0bffd17 	ldw	r2,-12(fp)
80093604:	10800317 	ldw	r2,12(r2)
80093608:	e0fffd17 	ldw	r3,-12(fp)
8009360c:	18c00317 	ldw	r3,12(r3)
80093610:	18c00037 	ldwio	r3,0(r3)
80093614:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80093618:	e0bffe17 	ldw	r2,-8(fp)
8009361c:	10001b26 	beq	r2,zero,8009368c <alt_msgdma_descriptor_sync_transfer+0x1ac>
80093620:	e0bfff17 	ldw	r2,-4(fp)
80093624:	1000191e 	bne	r2,zero,8009368c <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
80093628:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8009362c:	00000d06 	br	80093664 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
80093630:	01000044 	movi	r4,1
80093634:	0094c580 	call	80094c58 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80093638:	e0bff30b 	ldhu	r2,-52(fp)
8009363c:	1084e230 	cmpltui	r2,r2,5000
80093640:	1000051e 	bne	r2,zero,80093658 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
80093644:	01200274 	movhi	r4,32777
80093648:	211b8b04 	addi	r4,r4,28204
8009364c:	00956900 	call	80095690 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
80093650:	00bff084 	movi	r2,-62
80093654:	00007b06 	br	80093844 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
80093658:	e0bff30b 	ldhu	r2,-52(fp)
8009365c:	10800044 	addi	r2,r2,1
80093660:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80093664:	e0bffd17 	ldw	r2,-12(fp)
80093668:	10c00317 	ldw	r3,12(r2)
8009366c:	e0bffd17 	ldw	r2,-12(fp)
80093670:	10800417 	ldw	r2,16(r2)
80093674:	e1bffe17 	ldw	r6,-8(fp)
80093678:	100b883a 	mov	r5,r2
8009367c:	1809883a 	mov	r4,r3
80093680:	0092cec0 	call	80092cec <alt_msgdma_write_standard_descriptor>
80093684:	103fea1e 	bne	r2,zero,80093630 <alt_msgdma_descriptor_sync_transfer+0x150>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80093688:	00001f06 	br	80093708 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8009368c:	e0bffe17 	ldw	r2,-8(fp)
80093690:	10001b1e 	bne	r2,zero,80093700 <alt_msgdma_descriptor_sync_transfer+0x220>
80093694:	e0bfff17 	ldw	r2,-4(fp)
80093698:	10001926 	beq	r2,zero,80093700 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8009369c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
800936a0:	00000d06 	br	800936d8 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
800936a4:	01000044 	movi	r4,1
800936a8:	0094c580 	call	80094c58 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
800936ac:	e0bff30b 	ldhu	r2,-52(fp)
800936b0:	1084e230 	cmpltui	r2,r2,5000
800936b4:	1000051e 	bne	r2,zero,800936cc <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
800936b8:	01200274 	movhi	r4,32777
800936bc:	211b9c04 	addi	r4,r4,28272
800936c0:	00956900 	call	80095690 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
800936c4:	00bff084 	movi	r2,-62
800936c8:	00005e06 	br	80093844 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
800936cc:	e0bff30b 	ldhu	r2,-52(fp)
800936d0:	10800044 	addi	r2,r2,1
800936d4:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
800936d8:	e0bffd17 	ldw	r2,-12(fp)
800936dc:	10c00317 	ldw	r3,12(r2)
800936e0:	e0bffd17 	ldw	r2,-12(fp)
800936e4:	10800417 	ldw	r2,16(r2)
800936e8:	e1bfff17 	ldw	r6,-4(fp)
800936ec:	100b883a 	mov	r5,r2
800936f0:	1809883a 	mov	r4,r3
800936f4:	0092d800 	call	80092d80 <alt_msgdma_write_extended_descriptor>
800936f8:	103fea1e 	bne	r2,zero,800936a4 <alt_msgdma_descriptor_sync_transfer+0x1c4>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
800936fc:	00000206 	br	80093708 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80093700:	00bfffc4 	movi	r2,-1
80093704:	00004f06 	br	80093844 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80093708:	e0bffd17 	ldw	r2,-12(fp)
8009370c:	10800317 	ldw	r2,12(r2)
80093710:	10800104 	addi	r2,r2,4
80093714:	e0fffd17 	ldw	r3,-12(fp)
80093718:	19000d17 	ldw	r4,52(r3)
8009371c:	00fff2c4 	movi	r3,-53
80093720:	20c6703a 	and	r3,r4,r3
80093724:	18c00114 	ori	r3,r3,4
80093728:	10c00035 	stwio	r3,0(r2)
8009372c:	e0bff717 	ldw	r2,-36(fp)
80093730:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093734:	e0bff917 	ldw	r2,-28(fp)
80093738:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8009373c:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80093740:	e0bffd17 	ldw	r2,-12(fp)
80093744:	10800317 	ldw	r2,12(r2)
80093748:	10800037 	ldwio	r2,0(r2)
8009374c:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80093750:	00001106 	br	80093798 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
80093754:	01000044 	movi	r4,1
80093758:	0094c580 	call	80094c58 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009375c:	e0bff30b 	ldhu	r2,-52(fp)
80093760:	1084e230 	cmpltui	r2,r2,5000
80093764:	1000051e 	bne	r2,zero,8009377c <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
80093768:	01200274 	movhi	r4,32777
8009376c:	211bad04 	addi	r4,r4,28340
80093770:	00956900 	call	80095690 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
80093774:	00bff084 	movi	r2,-62
80093778:	00003206 	br	80093844 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8009377c:	e0bff30b 	ldhu	r2,-52(fp)
80093780:	10800044 	addi	r2,r2,1
80093784:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80093788:	e0bffd17 	ldw	r2,-12(fp)
8009378c:	10800317 	ldw	r2,12(r2)
80093790:	10800037 	ldwio	r2,0(r2)
80093794:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80093798:	e0fff217 	ldw	r3,-56(fp)
8009379c:	e0bff817 	ldw	r2,-32(fp)
800937a0:	1884703a 	and	r2,r3,r2
800937a4:	1000031e 	bne	r2,zero,800937b4 <alt_msgdma_descriptor_sync_transfer+0x2d4>
800937a8:	e0bff217 	ldw	r2,-56(fp)
800937ac:	1080004c 	andi	r2,r2,1
800937b0:	103fe81e 	bne	r2,zero,80093754 <alt_msgdma_descriptor_sync_transfer+0x274>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
800937b4:	e0fff217 	ldw	r3,-56(fp)
800937b8:	e0bff817 	ldw	r2,-32(fp)
800937bc:	1884703a 	and	r2,r3,r2
800937c0:	10000226 	beq	r2,zero,800937cc <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
800937c4:	e0bff817 	ldw	r2,-32(fp)
800937c8:	00001e06 	br	80093844 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
800937cc:	e0bffd17 	ldw	r2,-12(fp)
800937d0:	10800317 	ldw	r2,12(r2)
800937d4:	10800104 	addi	r2,r2,4
800937d8:	10800037 	ldwio	r2,0(r2)
800937dc:	10800814 	ori	r2,r2,32
800937e0:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800937e4:	0005303a 	rdctl	r2,status
800937e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800937ec:	e0fffa17 	ldw	r3,-24(fp)
800937f0:	00bfff84 	movi	r2,-2
800937f4:	1884703a 	and	r2,r3,r2
800937f8:	1001703a 	wrctl	status,r2
  
  return context;
800937fc:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
80093800:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80093804:	e0bffd17 	ldw	r2,-12(fp)
80093808:	10800317 	ldw	r2,12(r2)
8009380c:	10800104 	addi	r2,r2,4
80093810:	e0fff617 	ldw	r3,-40(fp)
80093814:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80093818:	e0bffd17 	ldw	r2,-12(fp)
8009381c:	10800317 	ldw	r2,12(r2)
80093820:	e0fffd17 	ldw	r3,-12(fp)
80093824:	18c00317 	ldw	r3,12(r3)
80093828:	18c00037 	ldwio	r3,0(r3)
8009382c:	10c00035 	stwio	r3,0(r2)
80093830:	e0bff717 	ldw	r2,-36(fp)
80093834:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80093838:	e0bffb17 	ldw	r2,-20(fp)
8009383c:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80093840:	0005883a 	mov	r2,zero

}
80093844:	e037883a 	mov	sp,fp
80093848:	dfc00117 	ldw	ra,4(sp)
8009384c:	df000017 	ldw	fp,0(sp)
80093850:	dec00204 	addi	sp,sp,8
80093854:	f800283a 	ret

80093858 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
80093858:	defff804 	addi	sp,sp,-32
8009385c:	dfc00715 	stw	ra,28(sp)
80093860:	df000615 	stw	fp,24(sp)
80093864:	df000604 	addi	fp,sp,24
80093868:	e13ffc15 	stw	r4,-16(fp)
8009386c:	e17ffd15 	stw	r5,-12(fp)
80093870:	e1bffe15 	stw	r6,-8(fp)
80093874:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
80093878:	e0800217 	ldw	r2,8(fp)
8009387c:	d8800115 	stw	r2,4(sp)
80093880:	e0bfff17 	ldw	r2,-4(fp)
80093884:	d8800015 	stw	r2,0(sp)
80093888:	e1fffe17 	ldw	r7,-8(fp)
8009388c:	000d883a 	mov	r6,zero
80093890:	e17ffd17 	ldw	r5,-12(fp)
80093894:	e13ffc17 	ldw	r4,-16(fp)
80093898:	00930300 	call	80093030 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8009389c:	e037883a 	mov	sp,fp
800938a0:	dfc00117 	ldw	ra,4(sp)
800938a4:	df000017 	ldw	fp,0(sp)
800938a8:	dec00204 	addi	sp,sp,8
800938ac:	f800283a 	ret

800938b0 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
800938b0:	defff804 	addi	sp,sp,-32
800938b4:	dfc00715 	stw	ra,28(sp)
800938b8:	df000615 	stw	fp,24(sp)
800938bc:	df000604 	addi	fp,sp,24
800938c0:	e13ffc15 	stw	r4,-16(fp)
800938c4:	e17ffd15 	stw	r5,-12(fp)
800938c8:	e1bffe15 	stw	r6,-8(fp)
800938cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
800938d0:	e0800217 	ldw	r2,8(fp)
800938d4:	d8800115 	stw	r2,4(sp)
800938d8:	e0bfff17 	ldw	r2,-4(fp)
800938dc:	d8800015 	stw	r2,0(sp)
800938e0:	000f883a 	mov	r7,zero
800938e4:	e1bffe17 	ldw	r6,-8(fp)
800938e8:	e17ffd17 	ldw	r5,-12(fp)
800938ec:	e13ffc17 	ldw	r4,-16(fp)
800938f0:	00930300 	call	80093030 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
800938f4:	e037883a 	mov	sp,fp
800938f8:	dfc00117 	ldw	ra,4(sp)
800938fc:	df000017 	ldw	fp,0(sp)
80093900:	dec00204 	addi	sp,sp,8
80093904:	f800283a 	ret

80093908 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
80093908:	defff804 	addi	sp,sp,-32
8009390c:	dfc00715 	stw	ra,28(sp)
80093910:	df000615 	stw	fp,24(sp)
80093914:	df000604 	addi	fp,sp,24
80093918:	e13ffc15 	stw	r4,-16(fp)
8009391c:	e17ffd15 	stw	r5,-12(fp)
80093920:	e1bffe15 	stw	r6,-8(fp)
80093924:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80093928:	e0800317 	ldw	r2,12(fp)
8009392c:	d8800115 	stw	r2,4(sp)
80093930:	e0800217 	ldw	r2,8(fp)
80093934:	d8800015 	stw	r2,0(sp)
80093938:	e1ffff17 	ldw	r7,-4(fp)
8009393c:	e1bffe17 	ldw	r6,-8(fp)
80093940:	e17ffd17 	ldw	r5,-12(fp)
80093944:	e13ffc17 	ldw	r4,-16(fp)
80093948:	00930300 	call	80093030 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8009394c:	e037883a 	mov	sp,fp
80093950:	dfc00117 	ldw	ra,4(sp)
80093954:	df000017 	ldw	fp,0(sp)
80093958:	dec00204 	addi	sp,sp,8
8009395c:	f800283a 	ret

80093960 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
80093960:	defff004 	addi	sp,sp,-64
80093964:	dfc00f15 	stw	ra,60(sp)
80093968:	df000e15 	stw	fp,56(sp)
8009396c:	df000e04 	addi	fp,sp,56
80093970:	e13ff915 	stw	r4,-28(fp)
80093974:	e17ffa15 	stw	r5,-24(fp)
80093978:	e1bffb15 	stw	r6,-20(fp)
8009397c:	e1fffc15 	stw	r7,-16(fp)
80093980:	e1000317 	ldw	r4,12(fp)
80093984:	e0c00417 	ldw	r3,16(fp)
80093988:	e0800517 	ldw	r2,20(fp)
8009398c:	e13ffd0d 	sth	r4,-12(fp)
80093990:	e0fffe05 	stb	r3,-8(fp)
80093994:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80093998:	e0bffd0b 	ldhu	r2,-12(fp)
8009399c:	e0fffe03 	ldbu	r3,-8(fp)
800939a0:	e13fff0b 	ldhu	r4,-4(fp)
800939a4:	d9000615 	stw	r4,24(sp)
800939a8:	d8000515 	stw	zero,20(sp)
800939ac:	d8c00415 	stw	r3,16(sp)
800939b0:	d8000315 	stw	zero,12(sp)
800939b4:	d8800215 	stw	r2,8(sp)
800939b8:	e0800217 	ldw	r2,8(fp)
800939bc:	d8800115 	stw	r2,4(sp)
800939c0:	e0bffc17 	ldw	r2,-16(fp)
800939c4:	d8800015 	stw	r2,0(sp)
800939c8:	e1fffb17 	ldw	r7,-20(fp)
800939cc:	000d883a 	mov	r6,zero
800939d0:	e17ffa17 	ldw	r5,-24(fp)
800939d4:	e13ff917 	ldw	r4,-28(fp)
800939d8:	00930bc0 	call	800930bc <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
800939dc:	e037883a 	mov	sp,fp
800939e0:	dfc00117 	ldw	ra,4(sp)
800939e4:	df000017 	ldw	fp,0(sp)
800939e8:	dec00204 	addi	sp,sp,8
800939ec:	f800283a 	ret

800939f0 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
800939f0:	defff004 	addi	sp,sp,-64
800939f4:	dfc00f15 	stw	ra,60(sp)
800939f8:	df000e15 	stw	fp,56(sp)
800939fc:	df000e04 	addi	fp,sp,56
80093a00:	e13ff915 	stw	r4,-28(fp)
80093a04:	e17ffa15 	stw	r5,-24(fp)
80093a08:	e1bffb15 	stw	r6,-20(fp)
80093a0c:	e1fffc15 	stw	r7,-16(fp)
80093a10:	e1000317 	ldw	r4,12(fp)
80093a14:	e0c00417 	ldw	r3,16(fp)
80093a18:	e0800517 	ldw	r2,20(fp)
80093a1c:	e13ffd0d 	sth	r4,-12(fp)
80093a20:	e0fffe05 	stb	r3,-8(fp)
80093a24:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
80093a28:	e0bffd0b 	ldhu	r2,-12(fp)
80093a2c:	e0fffe03 	ldbu	r3,-8(fp)
80093a30:	e13fff0b 	ldhu	r4,-4(fp)
80093a34:	d8000615 	stw	zero,24(sp)
80093a38:	d9000515 	stw	r4,20(sp)
80093a3c:	d8000415 	stw	zero,16(sp)
80093a40:	d8c00315 	stw	r3,12(sp)
80093a44:	d8800215 	stw	r2,8(sp)
80093a48:	e0800217 	ldw	r2,8(fp)
80093a4c:	d8800115 	stw	r2,4(sp)
80093a50:	e0bffc17 	ldw	r2,-16(fp)
80093a54:	d8800015 	stw	r2,0(sp)
80093a58:	000f883a 	mov	r7,zero
80093a5c:	e1bffb17 	ldw	r6,-20(fp)
80093a60:	e17ffa17 	ldw	r5,-24(fp)
80093a64:	e13ff917 	ldw	r4,-28(fp)
80093a68:	00930bc0 	call	800930bc <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
80093a6c:	e037883a 	mov	sp,fp
80093a70:	dfc00117 	ldw	ra,4(sp)
80093a74:	df000017 	ldw	fp,0(sp)
80093a78:	dec00204 	addi	sp,sp,8
80093a7c:	f800283a 	ret

80093a80 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80093a80:	deffee04 	addi	sp,sp,-72
80093a84:	dfc01115 	stw	ra,68(sp)
80093a88:	df001015 	stw	fp,64(sp)
80093a8c:	df001004 	addi	fp,sp,64
80093a90:	e13ff715 	stw	r4,-36(fp)
80093a94:	e17ff815 	stw	r5,-32(fp)
80093a98:	e1bff915 	stw	r6,-28(fp)
80093a9c:	e1fffa15 	stw	r7,-24(fp)
80093aa0:	e1800417 	ldw	r6,16(fp)
80093aa4:	e1400517 	ldw	r5,20(fp)
80093aa8:	e1000617 	ldw	r4,24(fp)
80093aac:	e0c00717 	ldw	r3,28(fp)
80093ab0:	e0800817 	ldw	r2,32(fp)
80093ab4:	e1bffb0d 	sth	r6,-20(fp)
80093ab8:	e17ffc05 	stb	r5,-16(fp)
80093abc:	e13ffd05 	stb	r4,-12(fp)
80093ac0:	e0fffe0d 	sth	r3,-8(fp)
80093ac4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80093ac8:	e0bffb0b 	ldhu	r2,-20(fp)
80093acc:	e0fffc03 	ldbu	r3,-16(fp)
80093ad0:	e13ffd03 	ldbu	r4,-12(fp)
80093ad4:	e17ffe0b 	ldhu	r5,-8(fp)
80093ad8:	e1bfff0b 	ldhu	r6,-4(fp)
80093adc:	d9800615 	stw	r6,24(sp)
80093ae0:	d9400515 	stw	r5,20(sp)
80093ae4:	d9000415 	stw	r4,16(sp)
80093ae8:	d8c00315 	stw	r3,12(sp)
80093aec:	d8800215 	stw	r2,8(sp)
80093af0:	e0800317 	ldw	r2,12(fp)
80093af4:	d8800115 	stw	r2,4(sp)
80093af8:	e0800217 	ldw	r2,8(fp)
80093afc:	d8800015 	stw	r2,0(sp)
80093b00:	e1fffa17 	ldw	r7,-24(fp)
80093b04:	e1bff917 	ldw	r6,-28(fp)
80093b08:	e17ff817 	ldw	r5,-32(fp)
80093b0c:	e13ff717 	ldw	r4,-36(fp)
80093b10:	00930bc0 	call	800930bc <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80093b14:	e037883a 	mov	sp,fp
80093b18:	dfc00117 	ldw	ra,4(sp)
80093b1c:	df000017 	ldw	fp,0(sp)
80093b20:	dec00204 	addi	sp,sp,8
80093b24:	f800283a 	ret

80093b28 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
80093b28:	defffb04 	addi	sp,sp,-20
80093b2c:	df000415 	stw	fp,16(sp)
80093b30:	df000404 	addi	fp,sp,16
80093b34:	e13ffc15 	stw	r4,-16(fp)
80093b38:	e17ffd15 	stw	r5,-12(fp)
80093b3c:	e1bffe15 	stw	r6,-8(fp)
80093b40:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
80093b44:	e0bffc17 	ldw	r2,-16(fp)
80093b48:	10c01217 	ldw	r3,72(r2)
80093b4c:	e0800117 	ldw	r2,4(fp)
80093b50:	18800436 	bltu	r3,r2,80093b64 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
80093b54:	e0bffc17 	ldw	r2,-16(fp)
80093b58:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
80093b5c:	10803fcc 	andi	r2,r2,255
80093b60:	10000226 	beq	r2,zero,80093b6c <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80093b64:	00bffa84 	movi	r2,-22
80093b68:	00001406 	br	80093bbc <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
80093b6c:	e0bffd17 	ldw	r2,-12(fp)
80093b70:	e0fffe17 	ldw	r3,-8(fp)
80093b74:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80093b78:	e0bffd17 	ldw	r2,-12(fp)
80093b7c:	e0ffff17 	ldw	r3,-4(fp)
80093b80:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80093b84:	e0bffd17 	ldw	r2,-12(fp)
80093b88:	e0c00117 	ldw	r3,4(fp)
80093b8c:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
80093b90:	e0fffd17 	ldw	r3,-12(fp)
80093b94:	e0bffd17 	ldw	r2,-12(fp)
80093b98:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80093b9c:	e0c00217 	ldw	r3,8(fp)
80093ba0:	00900034 	movhi	r2,16384
80093ba4:	10bfffc4 	addi	r2,r2,-1
80093ba8:	1884703a 	and	r2,r3,r2
80093bac:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80093bb0:	e0bffd17 	ldw	r2,-12(fp)
80093bb4:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80093bb8:	0005883a 	mov	r2,zero
}
80093bbc:	e037883a 	mov	sp,fp
80093bc0:	df000017 	ldw	fp,0(sp)
80093bc4:	dec00104 	addi	sp,sp,4
80093bc8:	f800283a 	ret

80093bcc <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
80093bcc:	defff404 	addi	sp,sp,-48
80093bd0:	df000b15 	stw	fp,44(sp)
80093bd4:	df000b04 	addi	fp,sp,44
80093bd8:	e13ff715 	stw	r4,-36(fp)
80093bdc:	e17ff815 	stw	r5,-32(fp)
80093be0:	e1bff915 	stw	r6,-28(fp)
80093be4:	e1fffa15 	stw	r7,-24(fp)
80093be8:	e1800517 	ldw	r6,20(fp)
80093bec:	e1400617 	ldw	r5,24(fp)
80093bf0:	e1000717 	ldw	r4,28(fp)
80093bf4:	e0c00817 	ldw	r3,32(fp)
80093bf8:	e0800917 	ldw	r2,36(fp)
80093bfc:	e1bffb0d 	sth	r6,-20(fp)
80093c00:	e17ffc05 	stb	r5,-16(fp)
80093c04:	e13ffd05 	stb	r4,-12(fp)
80093c08:	e0fffe0d 	sth	r3,-8(fp)
80093c0c:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80093c10:	e0bff717 	ldw	r2,-36(fp)
80093c14:	10c01217 	ldw	r3,72(r2)
80093c18:	e0800317 	ldw	r2,12(fp)
80093c1c:	18801936 	bltu	r3,r2,80093c84 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80093c20:	e13ff717 	ldw	r4,-36(fp)
80093c24:	20801317 	ldw	r2,76(r4)
80093c28:	20c01417 	ldw	r3,80(r4)
80093c2c:	e13ffe0b 	ldhu	r4,-8(fp)
80093c30:	213fffcc 	andi	r4,r4,65535
80093c34:	2015883a 	mov	r10,r4
80093c38:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80093c3c:	1ac01136 	bltu	r3,r11,80093c84 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
80093c40:	58c0011e 	bne	r11,r3,80093c48 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
80093c44:	12800f36 	bltu	r2,r10,80093c84 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80093c48:	e13ff717 	ldw	r4,-36(fp)
80093c4c:	20801317 	ldw	r2,76(r4)
80093c50:	20c01417 	ldw	r3,80(r4)
80093c54:	e13fff0b 	ldhu	r4,-4(fp)
80093c58:	213fffcc 	andi	r4,r4,65535
80093c5c:	2011883a 	mov	r8,r4
80093c60:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80093c64:	1a400736 	bltu	r3,r9,80093c84 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
80093c68:	48c0011e 	bne	r9,r3,80093c70 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
80093c6c:	12000536 	bltu	r2,r8,80093c84 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
80093c70:	e0bff717 	ldw	r2,-36(fp)
80093c74:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80093c78:	10803fcc 	andi	r2,r2,255
80093c7c:	10800060 	cmpeqi	r2,r2,1
80093c80:	1000021e 	bne	r2,zero,80093c8c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80093c84:	00bffa84 	movi	r2,-22
80093c88:	00003106 	br	80093d50 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
80093c8c:	e0bff817 	ldw	r2,-32(fp)
80093c90:	e0fff917 	ldw	r3,-28(fp)
80093c94:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
80093c98:	e0bff817 	ldw	r2,-32(fp)
80093c9c:	e0fffa17 	ldw	r3,-24(fp)
80093ca0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
80093ca4:	e0bff817 	ldw	r2,-32(fp)
80093ca8:	e0c00117 	ldw	r3,4(fp)
80093cac:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
80093cb0:	e0bff817 	ldw	r2,-32(fp)
80093cb4:	e0c00217 	ldw	r3,8(fp)
80093cb8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80093cbc:	e0bff817 	ldw	r2,-32(fp)
80093cc0:	e0c00317 	ldw	r3,12(fp)
80093cc4:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80093cc8:	e0bff817 	ldw	r2,-32(fp)
80093ccc:	e0fffb0b 	ldhu	r3,-20(fp)
80093cd0:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
80093cd4:	e0bff817 	ldw	r2,-32(fp)
80093cd8:	e0fffc03 	ldbu	r3,-16(fp)
80093cdc:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
80093ce0:	e0bff817 	ldw	r2,-32(fp)
80093ce4:	e0fffd03 	ldbu	r3,-12(fp)
80093ce8:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
80093cec:	e0bff817 	ldw	r2,-32(fp)
80093cf0:	e0fffe0b 	ldhu	r3,-8(fp)
80093cf4:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
80093cf8:	e0bff817 	ldw	r2,-32(fp)
80093cfc:	e0ffff0b 	ldhu	r3,-4(fp)
80093d00:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
80093d04:	e0bff817 	ldw	r2,-32(fp)
80093d08:	1019883a 	mov	r12,r2
80093d0c:	001b883a 	mov	r13,zero
80093d10:	e33ff515 	stw	r12,-44(fp)
80093d14:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
80093d18:	e0fff517 	ldw	r3,-44(fp)
80093d1c:	e0bff817 	ldw	r2,-32(fp)
80093d20:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80093d24:	e0fff617 	ldw	r3,-40(fp)
80093d28:	e0bff817 	ldw	r2,-32(fp)
80093d2c:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80093d30:	e0c00417 	ldw	r3,16(fp)
80093d34:	00900034 	movhi	r2,16384
80093d38:	10bfffc4 	addi	r2,r2,-1
80093d3c:	1884703a 	and	r2,r3,r2
80093d40:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
80093d44:	e0bff817 	ldw	r2,-32(fp)
80093d48:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
80093d4c:	0005883a 	mov	r2,zero
}
80093d50:	e037883a 	mov	sp,fp
80093d54:	df000017 	ldw	fp,0(sp)
80093d58:	dec00104 	addi	sp,sp,4
80093d5c:	f800283a 	ret

80093d60 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
80093d60:	defff804 	addi	sp,sp,-32
80093d64:	dfc00715 	stw	ra,28(sp)
80093d68:	df000615 	stw	fp,24(sp)
80093d6c:	df000604 	addi	fp,sp,24
80093d70:	e13ffc15 	stw	r4,-16(fp)
80093d74:	e17ffd15 	stw	r5,-12(fp)
80093d78:	e1bffe15 	stw	r6,-8(fp)
80093d7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80093d80:	e0800317 	ldw	r2,12(fp)
80093d84:	d8800115 	stw	r2,4(sp)
80093d88:	e0800217 	ldw	r2,8(fp)
80093d8c:	d8800015 	stw	r2,0(sp)
80093d90:	e1ffff17 	ldw	r7,-4(fp)
80093d94:	e1bffe17 	ldw	r6,-8(fp)
80093d98:	e17ffd17 	ldw	r5,-12(fp)
80093d9c:	e13ffc17 	ldw	r4,-16(fp)
80093da0:	0093b280 	call	80093b28 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
80093da4:	e037883a 	mov	sp,fp
80093da8:	dfc00117 	ldw	ra,4(sp)
80093dac:	df000017 	ldw	fp,0(sp)
80093db0:	dec00204 	addi	sp,sp,8
80093db4:	f800283a 	ret

80093db8 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
80093db8:	defff804 	addi	sp,sp,-32
80093dbc:	dfc00715 	stw	ra,28(sp)
80093dc0:	df000615 	stw	fp,24(sp)
80093dc4:	df000604 	addi	fp,sp,24
80093dc8:	e13ffc15 	stw	r4,-16(fp)
80093dcc:	e17ffd15 	stw	r5,-12(fp)
80093dd0:	e1bffe15 	stw	r6,-8(fp)
80093dd4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80093dd8:	e0800217 	ldw	r2,8(fp)
80093ddc:	d8800115 	stw	r2,4(sp)
80093de0:	e0bfff17 	ldw	r2,-4(fp)
80093de4:	d8800015 	stw	r2,0(sp)
80093de8:	e1fffe17 	ldw	r7,-8(fp)
80093dec:	000d883a 	mov	r6,zero
80093df0:	e17ffd17 	ldw	r5,-12(fp)
80093df4:	e13ffc17 	ldw	r4,-16(fp)
80093df8:	0093b280 	call	80093b28 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
80093dfc:	e037883a 	mov	sp,fp
80093e00:	dfc00117 	ldw	ra,4(sp)
80093e04:	df000017 	ldw	fp,0(sp)
80093e08:	dec00204 	addi	sp,sp,8
80093e0c:	f800283a 	ret

80093e10 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
80093e10:	defff804 	addi	sp,sp,-32
80093e14:	dfc00715 	stw	ra,28(sp)
80093e18:	df000615 	stw	fp,24(sp)
80093e1c:	df000604 	addi	fp,sp,24
80093e20:	e13ffc15 	stw	r4,-16(fp)
80093e24:	e17ffd15 	stw	r5,-12(fp)
80093e28:	e1bffe15 	stw	r6,-8(fp)
80093e2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80093e30:	e0800217 	ldw	r2,8(fp)
80093e34:	d8800115 	stw	r2,4(sp)
80093e38:	e0bfff17 	ldw	r2,-4(fp)
80093e3c:	d8800015 	stw	r2,0(sp)
80093e40:	000f883a 	mov	r7,zero
80093e44:	e1bffe17 	ldw	r6,-8(fp)
80093e48:	e17ffd17 	ldw	r5,-12(fp)
80093e4c:	e13ffc17 	ldw	r4,-16(fp)
80093e50:	0093b280 	call	80093b28 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
80093e54:	e037883a 	mov	sp,fp
80093e58:	dfc00117 	ldw	ra,4(sp)
80093e5c:	df000017 	ldw	fp,0(sp)
80093e60:	dec00204 	addi	sp,sp,8
80093e64:	f800283a 	ret

80093e68 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
80093e68:	deffee04 	addi	sp,sp,-72
80093e6c:	dfc01115 	stw	ra,68(sp)
80093e70:	df001015 	stw	fp,64(sp)
80093e74:	df001004 	addi	fp,sp,64
80093e78:	e13ff915 	stw	r4,-28(fp)
80093e7c:	e17ffa15 	stw	r5,-24(fp)
80093e80:	e1bffb15 	stw	r6,-20(fp)
80093e84:	e1fffc15 	stw	r7,-16(fp)
80093e88:	e1000417 	ldw	r4,16(fp)
80093e8c:	e0c00517 	ldw	r3,20(fp)
80093e90:	e0800617 	ldw	r2,24(fp)
80093e94:	e13ffd0d 	sth	r4,-12(fp)
80093e98:	e0fffe05 	stb	r3,-8(fp)
80093e9c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
80093ea0:	e0bffd0b 	ldhu	r2,-12(fp)
80093ea4:	e0fffe03 	ldbu	r3,-8(fp)
80093ea8:	e13fff0b 	ldhu	r4,-4(fp)
80093eac:	d9000815 	stw	r4,32(sp)
80093eb0:	d8000715 	stw	zero,28(sp)
80093eb4:	d8c00615 	stw	r3,24(sp)
80093eb8:	d8000515 	stw	zero,20(sp)
80093ebc:	d8800415 	stw	r2,16(sp)
80093ec0:	e0800317 	ldw	r2,12(fp)
80093ec4:	d8800315 	stw	r2,12(sp)
80093ec8:	e0800217 	ldw	r2,8(fp)
80093ecc:	d8800215 	stw	r2,8(sp)
80093ed0:	e0bffc17 	ldw	r2,-16(fp)
80093ed4:	d8800115 	stw	r2,4(sp)
80093ed8:	e0bffb17 	ldw	r2,-20(fp)
80093edc:	d8800015 	stw	r2,0(sp)
80093ee0:	000f883a 	mov	r7,zero
80093ee4:	000d883a 	mov	r6,zero
80093ee8:	e17ffa17 	ldw	r5,-24(fp)
80093eec:	e13ff917 	ldw	r4,-28(fp)
80093ef0:	0093bcc0 	call	80093bcc <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
80093ef4:	e037883a 	mov	sp,fp
80093ef8:	dfc00117 	ldw	ra,4(sp)
80093efc:	df000017 	ldw	fp,0(sp)
80093f00:	dec00204 	addi	sp,sp,8
80093f04:	f800283a 	ret

80093f08 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
80093f08:	deffee04 	addi	sp,sp,-72
80093f0c:	dfc01115 	stw	ra,68(sp)
80093f10:	df001015 	stw	fp,64(sp)
80093f14:	df001004 	addi	fp,sp,64
80093f18:	e13ff915 	stw	r4,-28(fp)
80093f1c:	e17ffa15 	stw	r5,-24(fp)
80093f20:	e1bffb15 	stw	r6,-20(fp)
80093f24:	e1fffc15 	stw	r7,-16(fp)
80093f28:	e1000417 	ldw	r4,16(fp)
80093f2c:	e0c00517 	ldw	r3,20(fp)
80093f30:	e0800617 	ldw	r2,24(fp)
80093f34:	e13ffd0d 	sth	r4,-12(fp)
80093f38:	e0fffe05 	stb	r3,-8(fp)
80093f3c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
80093f40:	e0bffd0b 	ldhu	r2,-12(fp)
80093f44:	e0fffe03 	ldbu	r3,-8(fp)
80093f48:	e13fff0b 	ldhu	r4,-4(fp)
80093f4c:	d8000815 	stw	zero,32(sp)
80093f50:	d9000715 	stw	r4,28(sp)
80093f54:	d8000615 	stw	zero,24(sp)
80093f58:	d8c00515 	stw	r3,20(sp)
80093f5c:	d8800415 	stw	r2,16(sp)
80093f60:	e0800317 	ldw	r2,12(fp)
80093f64:	d8800315 	stw	r2,12(sp)
80093f68:	e0800217 	ldw	r2,8(fp)
80093f6c:	d8800215 	stw	r2,8(sp)
80093f70:	d8000115 	stw	zero,4(sp)
80093f74:	d8000015 	stw	zero,0(sp)
80093f78:	e1fffc17 	ldw	r7,-16(fp)
80093f7c:	e1bffb17 	ldw	r6,-20(fp)
80093f80:	e17ffa17 	ldw	r5,-24(fp)
80093f84:	e13ff917 	ldw	r4,-28(fp)
80093f88:	0093bcc0 	call	80093bcc <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
80093f8c:	e037883a 	mov	sp,fp
80093f90:	dfc00117 	ldw	ra,4(sp)
80093f94:	df000017 	ldw	fp,0(sp)
80093f98:	dec00204 	addi	sp,sp,8
80093f9c:	f800283a 	ret

80093fa0 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
80093fa0:	deffec04 	addi	sp,sp,-80
80093fa4:	dfc01315 	stw	ra,76(sp)
80093fa8:	df001215 	stw	fp,72(sp)
80093fac:	df001204 	addi	fp,sp,72
80093fb0:	e13ff715 	stw	r4,-36(fp)
80093fb4:	e17ff815 	stw	r5,-32(fp)
80093fb8:	e1bff915 	stw	r6,-28(fp)
80093fbc:	e1fffa15 	stw	r7,-24(fp)
80093fc0:	e1800617 	ldw	r6,24(fp)
80093fc4:	e1400717 	ldw	r5,28(fp)
80093fc8:	e1000817 	ldw	r4,32(fp)
80093fcc:	e0c00917 	ldw	r3,36(fp)
80093fd0:	e0800a17 	ldw	r2,40(fp)
80093fd4:	e1bffb0d 	sth	r6,-20(fp)
80093fd8:	e17ffc05 	stb	r5,-16(fp)
80093fdc:	e13ffd05 	stb	r4,-12(fp)
80093fe0:	e0fffe0d 	sth	r3,-8(fp)
80093fe4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
80093fe8:	e0bffb0b 	ldhu	r2,-20(fp)
80093fec:	e0fffc03 	ldbu	r3,-16(fp)
80093ff0:	e13ffd03 	ldbu	r4,-12(fp)
80093ff4:	e17ffe0b 	ldhu	r5,-8(fp)
80093ff8:	e1bfff0b 	ldhu	r6,-4(fp)
80093ffc:	d9800815 	stw	r6,32(sp)
80094000:	d9400715 	stw	r5,28(sp)
80094004:	d9000615 	stw	r4,24(sp)
80094008:	d8c00515 	stw	r3,20(sp)
8009400c:	d8800415 	stw	r2,16(sp)
80094010:	e0800517 	ldw	r2,20(fp)
80094014:	d8800315 	stw	r2,12(sp)
80094018:	e0800417 	ldw	r2,16(fp)
8009401c:	d8800215 	stw	r2,8(sp)
80094020:	e0800317 	ldw	r2,12(fp)
80094024:	d8800115 	stw	r2,4(sp)
80094028:	e0800217 	ldw	r2,8(fp)
8009402c:	d8800015 	stw	r2,0(sp)
80094030:	e1fffa17 	ldw	r7,-24(fp)
80094034:	e1bff917 	ldw	r6,-28(fp)
80094038:	e17ff817 	ldw	r5,-32(fp)
8009403c:	e13ff717 	ldw	r4,-36(fp)
80094040:	0093bcc0 	call	80093bcc <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
80094044:	e037883a 	mov	sp,fp
80094048:	dfc00117 	ldw	ra,4(sp)
8009404c:	df000017 	ldw	fp,0(sp)
80094050:	dec00204 	addi	sp,sp,8
80094054:	f800283a 	ret

80094058 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
80094058:	defffc04 	addi	sp,sp,-16
8009405c:	df000315 	stw	fp,12(sp)
80094060:	df000304 	addi	fp,sp,12
80094064:	e13ffe15 	stw	r4,-8(fp)
80094068:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8009406c:	e0bfff17 	ldw	r2,-4(fp)
80094070:	1000021e 	bne	r2,zero,8009407c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
80094074:	00bffa84 	movi	r2,-22
80094078:	00002f06 	br	80094138 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8009407c:	e0bfff17 	ldw	r2,-4(fp)
80094080:	10c00317 	ldw	r3,12(r2)
80094084:	e0bfff17 	ldw	r2,-4(fp)
80094088:	18800226 	beq	r3,r2,80094094 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8009408c:	00bffa84 	movi	r2,-22
80094090:	00002906 	br	80094138 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
80094094:	e0bffe17 	ldw	r2,-8(fp)
80094098:	10800017 	ldw	r2,0(r2)
8009409c:	1000051e 	bne	r2,zero,800940b4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
800940a0:	e0bffe17 	ldw	r2,-8(fp)
800940a4:	e0ffff17 	ldw	r3,-4(fp)
800940a8:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
800940ac:	0005883a 	mov	r2,zero
800940b0:	00002106 	br	80094138 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
800940b4:	e0bffe17 	ldw	r2,-8(fp)
800940b8:	10c00017 	ldw	r3,0(r2)
800940bc:	e0bfff17 	ldw	r2,-4(fp)
800940c0:	1880021e 	bne	r3,r2,800940cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
800940c4:	00bffa84 	movi	r2,-22
800940c8:	00001b06 	br	80094138 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
800940cc:	e0bffe17 	ldw	r2,-8(fp)
800940d0:	10800017 	ldw	r2,0(r2)
800940d4:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
800940d8:	00000906 	br	80094100 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
800940dc:	e0bffd17 	ldw	r2,-12(fp)
800940e0:	10c00317 	ldw	r3,12(r2)
800940e4:	e0bfff17 	ldw	r2,-4(fp)
800940e8:	1880021e 	bne	r3,r2,800940f4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
800940ec:	00bffa84 	movi	r2,-22
800940f0:	00001106 	br	80094138 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
800940f4:	e0bffd17 	ldw	r2,-12(fp)
800940f8:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
800940fc:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80094100:	e0bffd17 	ldw	r2,-12(fp)
80094104:	10800317 	ldw	r2,12(r2)
80094108:	e0fffe17 	ldw	r3,-8(fp)
8009410c:	18c00017 	ldw	r3,0(r3)
80094110:	10fff21e 	bne	r2,r3,800940dc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x84>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
80094114:	e0ffff17 	ldw	r3,-4(fp)
80094118:	e0bffd17 	ldw	r2,-12(fp)
8009411c:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
80094120:	e0bffe17 	ldw	r2,-8(fp)
80094124:	10800017 	ldw	r2,0(r2)
80094128:	1007883a 	mov	r3,r2
8009412c:	e0bfff17 	ldw	r2,-4(fp)
80094130:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
80094134:	0005883a 	mov	r2,zero
}
80094138:	e037883a 	mov	sp,fp
8009413c:	df000017 	ldw	fp,0(sp)
80094140:	dec00104 	addi	sp,sp,4
80094144:	f800283a 	ret

80094148 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
80094148:	defff804 	addi	sp,sp,-32
8009414c:	df000715 	stw	fp,28(sp)
80094150:	df000704 	addi	fp,sp,28
80094154:	e13ffe15 	stw	r4,-8(fp)
80094158:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8009415c:	e13fff17 	ldw	r4,-4(fp)
80094160:	2000021e 	bne	r4,zero,8009416c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
80094164:	00bffa84 	movi	r2,-22
80094168:	00005906 	br	800942d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8009416c:	e13fff17 	ldw	r4,-4(fp)
80094170:	2015883a 	mov	r10,r4
80094174:	0017883a 	mov	r11,zero
80094178:	e2bffc15 	stw	r10,-16(fp)
8009417c:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
80094180:	e13fff17 	ldw	r4,-4(fp)
80094184:	21400317 	ldw	r5,12(r4)
80094188:	e13ffc17 	ldw	r4,-16(fp)
8009418c:	29000626 	beq	r5,r4,800941a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
80094190:	e13fff17 	ldw	r4,-4(fp)
80094194:	21400b17 	ldw	r5,44(r4)
80094198:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8009419c:	29000226 	beq	r5,r4,800941a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
800941a0:	00bffa84 	movi	r2,-22
800941a4:	00004a06 	br	800942d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
800941a8:	e13ffe17 	ldw	r4,-8(fp)
800941ac:	21000017 	ldw	r4,0(r4)
800941b0:	2000051e 	bne	r4,zero,800941c8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
800941b4:	e0bffe17 	ldw	r2,-8(fp)
800941b8:	e0ffff17 	ldw	r3,-4(fp)
800941bc:	10c00015 	stw	r3,0(r2)
		return 0;
800941c0:	0005883a 	mov	r2,zero
800941c4:	00004206 	br	800942d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
800941c8:	e13ffe17 	ldw	r4,-8(fp)
800941cc:	21400017 	ldw	r5,0(r4)
800941d0:	e13fff17 	ldw	r4,-4(fp)
800941d4:	2900021e 	bne	r5,r4,800941e0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
800941d8:	00bffa84 	movi	r2,-22
800941dc:	00003c06 	br	800942d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
800941e0:	e13ffe17 	ldw	r4,-8(fp)
800941e4:	21000017 	ldw	r4,0(r4)
800941e8:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
800941ec:	e13ffe17 	ldw	r4,-8(fp)
800941f0:	21000017 	ldw	r4,0(r4)
800941f4:	2011883a 	mov	r8,r4
800941f8:	0013883a 	mov	r9,zero
800941fc:	e23ffa15 	stw	r8,-24(fp)
80094200:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80094204:	00001806 	br	80094268 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
80094208:	e13fff17 	ldw	r4,-4(fp)
8009420c:	200d883a 	mov	r6,r4
80094210:	000f883a 	mov	r7,zero
80094214:	e1bffc15 	stw	r6,-16(fp)
80094218:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8009421c:	e13ff917 	ldw	r4,-28(fp)
80094220:	21400317 	ldw	r5,12(r4)
80094224:	e13ffc17 	ldw	r4,-16(fp)
80094228:	2900061e 	bne	r5,r4,80094244 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8009422c:	e13ff917 	ldw	r4,-28(fp)
80094230:	21400b17 	ldw	r5,44(r4)
80094234:	e13ffd17 	ldw	r4,-12(fp)
80094238:	2900021e 	bne	r5,r4,80094244 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8009423c:	00bffa84 	movi	r2,-22
80094240:	00002306 	br	800942d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80094244:	e13ff917 	ldw	r4,-28(fp)
80094248:	21000317 	ldw	r4,12(r4)
8009424c:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
80094250:	e13ff917 	ldw	r4,-28(fp)
80094254:	21000b17 	ldw	r4,44(r4)
80094258:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8009425c:	e13ffc17 	ldw	r4,-16(fp)
80094260:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
80094264:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80094268:	e13ff917 	ldw	r4,-28(fp)
8009426c:	21400317 	ldw	r5,12(r4)
80094270:	e13ffa17 	ldw	r4,-24(fp)
80094274:	29000426 	beq	r5,r4,80094288 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80094278:	e13ff917 	ldw	r4,-28(fp)
8009427c:	21400b17 	ldw	r5,44(r4)
80094280:	e13ffb17 	ldw	r4,-20(fp)
80094284:	293fe01e 	bne	r5,r4,80094208 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
80094288:	e13fff17 	ldw	r4,-4(fp)
8009428c:	2005883a 	mov	r2,r4
80094290:	0007883a 	mov	r3,zero
80094294:	e0bffc15 	stw	r2,-16(fp)
80094298:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8009429c:	e0fffc17 	ldw	r3,-16(fp)
800942a0:	e0bff917 	ldw	r2,-28(fp)
800942a4:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
800942a8:	e0fffd17 	ldw	r3,-12(fp)
800942ac:	e0bff917 	ldw	r2,-28(fp)
800942b0:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
800942b4:	e0fffa17 	ldw	r3,-24(fp)
800942b8:	e0bfff17 	ldw	r2,-4(fp)
800942bc:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
800942c0:	e0fffb17 	ldw	r3,-20(fp)
800942c4:	e0bfff17 	ldw	r2,-4(fp)
800942c8:	10c00b15 	stw	r3,44(r2)
	return 0;
800942cc:	0005883a 	mov	r2,zero
}
800942d0:	e037883a 	mov	sp,fp
800942d4:	df000017 	ldw	fp,0(sp)
800942d8:	dec00104 	addi	sp,sp,4
800942dc:	f800283a 	ret

800942e0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
800942e0:	defffc04 	addi	sp,sp,-16
800942e4:	df000315 	stw	fp,12(sp)
800942e8:	df000304 	addi	fp,sp,12
800942ec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
800942f0:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
800942f4:	e0bfff17 	ldw	r2,-4(fp)
800942f8:	1000021e 	bne	r2,zero,80094304 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
800942fc:	00bffa84 	movi	r2,-22
80094300:	00001906 	br	80094368 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
80094304:	e0bfff17 	ldw	r2,-4(fp)
80094308:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8009430c:	00000a06 	br	80094338 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
80094310:	e0bffd17 	ldw	r2,-12(fp)
80094314:	10800717 	ldw	r2,28(r2)
80094318:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8009431c:	e0bffe17 	ldw	r2,-8(fp)
80094320:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
80094324:	e0bffd17 	ldw	r2,-12(fp)
80094328:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8009432c:	e0bffd17 	ldw	r2,-12(fp)
80094330:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
80094334:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80094338:	e0bffd17 	ldw	r2,-12(fp)
8009433c:	10c00317 	ldw	r3,12(r2)
80094340:	e0bfff17 	ldw	r2,-4(fp)
80094344:	18bff21e 	bne	r3,r2,80094310 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x30>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
80094348:	e0bffd17 	ldw	r2,-12(fp)
8009434c:	10800717 	ldw	r2,28(r2)
80094350:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80094354:	e0bffe17 	ldw	r2,-8(fp)
80094358:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8009435c:	e0bffd17 	ldw	r2,-12(fp)
80094360:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
80094364:	0005883a 	mov	r2,zero
}
80094368:	e037883a 	mov	sp,fp
8009436c:	df000017 	ldw	fp,0(sp)
80094370:	dec00104 	addi	sp,sp,4
80094374:	f800283a 	ret

80094378 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
80094378:	defff804 	addi	sp,sp,-32
8009437c:	df000715 	stw	fp,28(sp)
80094380:	df000704 	addi	fp,sp,28
80094384:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
80094388:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8009438c:	e13fff17 	ldw	r4,-4(fp)
80094390:	2000021e 	bne	r4,zero,8009439c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
80094394:	00bffa84 	movi	r2,-22
80094398:	00002806 	br	8009443c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8009439c:	e13fff17 	ldw	r4,-4(fp)
800943a0:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
800943a4:	e13fff17 	ldw	r4,-4(fp)
800943a8:	2005883a 	mov	r2,r4
800943ac:	0007883a 	mov	r3,zero
800943b0:	e0bffb15 	stw	r2,-20(fp)
800943b4:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
800943b8:	00001006 	br	800943fc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
800943bc:	e0bff917 	ldw	r2,-28(fp)
800943c0:	10800f17 	ldw	r2,60(r2)
800943c4:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
800943c8:	e0bffa17 	ldw	r2,-24(fp)
800943cc:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
800943d0:	e0bff917 	ldw	r2,-28(fp)
800943d4:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
800943d8:	e0bff917 	ldw	r2,-28(fp)
800943dc:	10800317 	ldw	r2,12(r2)
800943e0:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
800943e4:	e0bff917 	ldw	r2,-28(fp)
800943e8:	10800b17 	ldw	r2,44(r2)
800943ec:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
800943f0:	e0bffd17 	ldw	r2,-12(fp)
800943f4:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
800943f8:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
800943fc:	e0bff917 	ldw	r2,-28(fp)
80094400:	10c00317 	ldw	r3,12(r2)
80094404:	e0bffb17 	ldw	r2,-20(fp)
80094408:	18800426 	beq	r3,r2,8009441c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8009440c:	e0bff917 	ldw	r2,-28(fp)
80094410:	10c00b17 	ldw	r3,44(r2)
80094414:	e0bffc17 	ldw	r2,-16(fp)
80094418:	18bfe81e 	bne	r3,r2,800943bc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x44>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8009441c:	e0bff917 	ldw	r2,-28(fp)
80094420:	10800f17 	ldw	r2,60(r2)
80094424:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80094428:	e0bffa17 	ldw	r2,-24(fp)
8009442c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
80094430:	e0bff917 	ldw	r2,-28(fp)
80094434:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
80094438:	0005883a 	mov	r2,zero
}
8009443c:	e037883a 	mov	sp,fp
80094440:	df000017 	ldw	fp,0(sp)
80094444:	dec00104 	addi	sp,sp,4
80094448:	f800283a 	ret

8009444c <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8009444c:	deffef04 	addi	sp,sp,-68
80094450:	df001015 	stw	fp,64(sp)
80094454:	df001004 	addi	fp,sp,64
80094458:	e13ffb15 	stw	r4,-20(fp)
8009445c:	e17ffc15 	stw	r5,-16(fp)
80094460:	e1bffd15 	stw	r6,-12(fp)
80094464:	3807883a 	mov	r3,r7
80094468:	e0800117 	ldw	r2,4(fp)
8009446c:	e0fffe05 	stb	r3,-8(fp)
80094470:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
80094474:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
80094478:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
8009447c:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
80094480:	e0bffc17 	ldw	r2,-16(fp)
80094484:	e0bff915 	stw	r2,-28(fp)
80094488:	e0bffd17 	ldw	r2,-12(fp)
8009448c:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
80094490:	e0bffb17 	ldw	r2,-20(fp)
80094494:	10800617 	ldw	r2,24(r2)
80094498:	10800037 	ldwio	r2,0(r2)
8009449c:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
800944a0:	e0bff017 	ldw	r2,-64(fp)
800944a4:	1080004c 	andi	r2,r2,1
800944a8:	10000226 	beq	r2,zero,800944b4 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
800944ac:	00bffc04 	movi	r2,-16
800944b0:	00009206 	br	800946fc <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
800944b4:	00800804 	movi	r2,32
800944b8:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800944bc:	0005303a 	rdctl	r2,status
800944c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800944c4:	e0fff517 	ldw	r3,-44(fp)
800944c8:	00bfff84 	movi	r2,-2
800944cc:	1884703a 	and	r2,r3,r2
800944d0:	1001703a 	wrctl	status,r2
  
  return context;
800944d4:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
800944d8:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
800944dc:	e0bffb17 	ldw	r2,-20(fp)
800944e0:	10800317 	ldw	r2,12(r2)
800944e4:	10800104 	addi	r2,r2,4
800944e8:	e0fff117 	ldw	r3,-60(fp)
800944ec:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
800944f0:	e0bffb17 	ldw	r2,-20(fp)
800944f4:	10800317 	ldw	r2,12(r2)
800944f8:	e0fffb17 	ldw	r3,-20(fp)
800944fc:	18c00317 	ldw	r3,12(r3)
80094500:	18c00037 	ldwio	r3,0(r3)
80094504:	10c00035 	stwio	r3,0(r2)
80094508:	e0bff217 	ldw	r2,-56(fp)
8009450c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80094510:	e0bff317 	ldw	r2,-52(fp)
80094514:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
80094518:	e0bffb17 	ldw	r2,-20(fp)
8009451c:	10800b17 	ldw	r2,44(r2)
80094520:	10002326 	beq	r2,zero,800945b0 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
80094524:	e0bffb17 	ldw	r2,-20(fp)
80094528:	10c00d17 	ldw	r3,52(r2)
8009452c:	e0bff117 	ldw	r2,-60(fp)
80094530:	1884b03a 	or	r2,r3,r2
80094534:	10800514 	ori	r2,r2,20
80094538:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009453c:	e0fff117 	ldw	r3,-60(fp)
80094540:	00bff7c4 	movi	r2,-33
80094544:	1884703a 	and	r2,r3,r2
80094548:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8009454c:	e0bff017 	ldw	r2,-64(fp)
80094550:	10800214 	ori	r2,r2,8
80094554:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80094558:	0005303a 	rdctl	r2,status
8009455c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80094560:	e0fff717 	ldw	r3,-36(fp)
80094564:	00bfff84 	movi	r2,-2
80094568:	1884703a 	and	r2,r3,r2
8009456c:	1001703a 	wrctl	status,r2
  
  return context;
80094570:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
80094574:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80094578:	e0bffb17 	ldw	r2,-20(fp)
8009457c:	10800317 	ldw	r2,12(r2)
80094580:	10800104 	addi	r2,r2,4
80094584:	e0fff117 	ldw	r3,-60(fp)
80094588:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8009458c:	e0bffb17 	ldw	r2,-20(fp)
80094590:	10800617 	ldw	r2,24(r2)
80094594:	e0fff017 	ldw	r3,-64(fp)
80094598:	10c00035 	stwio	r3,0(r2)
8009459c:	e0bff217 	ldw	r2,-56(fp)
800945a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
800945a4:	e0bff417 	ldw	r2,-48(fp)
800945a8:	1001703a 	wrctl	status,r2
800945ac:	00002306 	br	8009463c <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
800945b0:	e0bffb17 	ldw	r2,-20(fp)
800945b4:	10c00d17 	ldw	r3,52(r2)
800945b8:	e0bff117 	ldw	r2,-60(fp)
800945bc:	1884b03a 	or	r2,r3,r2
800945c0:	10800114 	ori	r2,r2,4
800945c4:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
800945c8:	e0fff117 	ldw	r3,-60(fp)
800945cc:	00bff3c4 	movi	r2,-49
800945d0:	1884703a 	and	r2,r3,r2
800945d4:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
800945d8:	e0fff017 	ldw	r3,-64(fp)
800945dc:	00bffdc4 	movi	r2,-9
800945e0:	1884703a 	and	r2,r3,r2
800945e4:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800945e8:	0005303a 	rdctl	r2,status
800945ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800945f0:	e0fff817 	ldw	r3,-32(fp)
800945f4:	00bfff84 	movi	r2,-2
800945f8:	1884703a 	and	r2,r3,r2
800945fc:	1001703a 	wrctl	status,r2
  
  return context;
80094600:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
80094604:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80094608:	e0bffb17 	ldw	r2,-20(fp)
8009460c:	10800317 	ldw	r2,12(r2)
80094610:	10800104 	addi	r2,r2,4
80094614:	e0fff117 	ldw	r3,-60(fp)
80094618:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8009461c:	e0bffb17 	ldw	r2,-20(fp)
80094620:	10800617 	ldw	r2,24(r2)
80094624:	e0fff017 	ldw	r3,-64(fp)
80094628:	10c00035 	stwio	r3,0(r2)
8009462c:	e0bff217 	ldw	r2,-56(fp)
80094630:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80094634:	e0bff617 	ldw	r2,-40(fp)
80094638:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8009463c:	e0bffb17 	ldw	r2,-20(fp)
80094640:	10800617 	ldw	r2,24(r2)
80094644:	10800104 	addi	r2,r2,4
80094648:	e0fff917 	ldw	r3,-28(fp)
8009464c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80094650:	e0bffb17 	ldw	r2,-20(fp)
80094654:	10800617 	ldw	r2,24(r2)
80094658:	10800204 	addi	r2,r2,8
8009465c:	e0fffa17 	ldw	r3,-24(fp)
80094660:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
80094664:	e0bffe03 	ldbu	r2,-8(fp)
80094668:	10000426 	beq	r2,zero,8009467c <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8009466c:	e0bff017 	ldw	r2,-64(fp)
80094670:	10800414 	ori	r2,r2,16
80094674:	e0bff015 	stw	r2,-64(fp)
80094678:	00000406 	br	8009468c <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8009467c:	e0fff017 	ldw	r3,-64(fp)
80094680:	00bffbc4 	movi	r2,-17
80094684:	1884703a 	and	r2,r3,r2
80094688:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8009468c:	e0bfff03 	ldbu	r2,-4(fp)
80094690:	10000e26 	beq	r2,zero,800946cc <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
80094694:	e0bff017 	ldw	r2,-64(fp)
80094698:	10800094 	ori	r2,r2,2
8009469c:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
800946a0:	e0bffb17 	ldw	r2,-20(fp)
800946a4:	10800617 	ldw	r2,24(r2)
800946a8:	10800304 	addi	r2,r2,12
800946ac:	10800037 	ldwio	r2,0(r2)
800946b0:	10000a1e 	bne	r2,zero,800946dc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
800946b4:	e0bffb17 	ldw	r2,-20(fp)
800946b8:	10800617 	ldw	r2,24(r2)
800946bc:	10800304 	addi	r2,r2,12
800946c0:	00c03fc4 	movi	r3,255
800946c4:	10c00035 	stwio	r3,0(r2)
800946c8:	00000406 	br	800946dc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
800946cc:	e0fff017 	ldw	r3,-64(fp)
800946d0:	00bfff44 	movi	r2,-3
800946d4:	1884703a 	and	r2,r3,r2
800946d8:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
800946dc:	e0bff017 	ldw	r2,-64(fp)
800946e0:	10800054 	ori	r2,r2,1
800946e4:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
800946e8:	e0bffb17 	ldw	r2,-20(fp)
800946ec:	10800617 	ldw	r2,24(r2)
800946f0:	e0fff017 	ldw	r3,-64(fp)
800946f4:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
800946f8:	0005883a 	mov	r2,zero
}
800946fc:	e037883a 	mov	sp,fp
80094700:	df000017 	ldw	fp,0(sp)
80094704:	dec00104 	addi	sp,sp,4
80094708:	f800283a 	ret

8009470c <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8009470c:	defff704 	addi	sp,sp,-36
80094710:	dfc00815 	stw	ra,32(sp)
80094714:	df000715 	stw	fp,28(sp)
80094718:	dc400615 	stw	r17,24(sp)
8009471c:	dc000515 	stw	r16,20(sp)
80094720:	df000704 	addi	fp,sp,28
80094724:	e13ffa15 	stw	r4,-24(fp)
80094728:	e17ffb15 	stw	r5,-20(fp)
8009472c:	3007883a 	mov	r3,r6
80094730:	3805883a 	mov	r2,r7
80094734:	e0fffc05 	stb	r3,-16(fp)
80094738:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8009473c:	e13ffb17 	ldw	r4,-20(fp)
80094740:	00942e00 	call	800942e0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
80094744:	10000226 	beq	r2,zero,80094750 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
80094748:	00bffa84 	movi	r2,-22
8009474c:	00000b06 	br	8009477c <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
80094750:	e0bffb17 	ldw	r2,-20(fp)
80094754:	1021883a 	mov	r16,r2
80094758:	0023883a 	mov	r17,zero
8009475c:	e0fffc03 	ldbu	r3,-16(fp)
80094760:	e0bffd03 	ldbu	r2,-12(fp)
80094764:	d8800015 	stw	r2,0(sp)
80094768:	180f883a 	mov	r7,r3
8009476c:	800b883a 	mov	r5,r16
80094770:	880d883a 	mov	r6,r17
80094774:	e13ffa17 	ldw	r4,-24(fp)
80094778:	009444c0 	call	8009444c <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8009477c:	e6fffe04 	addi	sp,fp,-8
80094780:	dfc00317 	ldw	ra,12(sp)
80094784:	df000217 	ldw	fp,8(sp)
80094788:	dc400117 	ldw	r17,4(sp)
8009478c:	dc000017 	ldw	r16,0(sp)
80094790:	dec00404 	addi	sp,sp,16
80094794:	f800283a 	ret

80094798 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
80094798:	defff704 	addi	sp,sp,-36
8009479c:	dfc00815 	stw	ra,32(sp)
800947a0:	df000715 	stw	fp,28(sp)
800947a4:	dc400615 	stw	r17,24(sp)
800947a8:	dc000515 	stw	r16,20(sp)
800947ac:	df000704 	addi	fp,sp,28
800947b0:	e13ffa15 	stw	r4,-24(fp)
800947b4:	e17ffb15 	stw	r5,-20(fp)
800947b8:	3007883a 	mov	r3,r6
800947bc:	3805883a 	mov	r2,r7
800947c0:	e0fffc05 	stb	r3,-16(fp)
800947c4:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
800947c8:	e13ffb17 	ldw	r4,-20(fp)
800947cc:	00943780 	call	80094378 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
800947d0:	10000226 	beq	r2,zero,800947dc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
800947d4:	00bffa84 	movi	r2,-22
800947d8:	00000b06 	br	80094808 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
800947dc:	e0bffb17 	ldw	r2,-20(fp)
800947e0:	1021883a 	mov	r16,r2
800947e4:	0023883a 	mov	r17,zero
800947e8:	e0fffc03 	ldbu	r3,-16(fp)
800947ec:	e0bffd03 	ldbu	r2,-12(fp)
800947f0:	d8800015 	stw	r2,0(sp)
800947f4:	180f883a 	mov	r7,r3
800947f8:	800b883a 	mov	r5,r16
800947fc:	880d883a 	mov	r6,r17
80094800:	e13ffa17 	ldw	r4,-24(fp)
80094804:	009444c0 	call	8009444c <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
80094808:	e6fffe04 	addi	sp,fp,-8
8009480c:	dfc00317 	ldw	ra,12(sp)
80094810:	df000217 	ldw	fp,8(sp)
80094814:	dc400117 	ldw	r17,4(sp)
80094818:	dc000017 	ldw	r16,0(sp)
8009481c:	dec00404 	addi	sp,sp,16
80094820:	f800283a 	ret

80094824 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
80094824:	defffc04 	addi	sp,sp,-16
80094828:	dfc00315 	stw	ra,12(sp)
8009482c:	df000215 	stw	fp,8(sp)
80094830:	df000204 	addi	fp,sp,8
80094834:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
80094838:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8009483c:	d1601e04 	addi	r5,gp,-32648
80094840:	e13fff17 	ldw	r4,-4(fp)
80094844:	0094f980 	call	80094f98 <alt_find_dev>
80094848:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8009484c:	e0bffe17 	ldw	r2,-8(fp)
80094850:	1000041e 	bne	r2,zero,80094864 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
80094854:	0092cb00 	call	80092cb0 <alt_get_errno>
80094858:	1007883a 	mov	r3,r2
8009485c:	008004c4 	movi	r2,19
80094860:	18800015 	stw	r2,0(r3)
    }

    return dev;
80094864:	e0bffe17 	ldw	r2,-8(fp)
}
80094868:	e037883a 	mov	sp,fp
8009486c:	dfc00117 	ldw	ra,4(sp)
80094870:	df000017 	ldw	fp,0(sp)
80094874:	dec00204 	addi	sp,sp,8
80094878:	f800283a 	ret

8009487c <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8009487c:	defff804 	addi	sp,sp,-32
80094880:	dfc00715 	stw	ra,28(sp)
80094884:	df000615 	stw	fp,24(sp)
80094888:	df000604 	addi	fp,sp,24
8009488c:	e13ffd15 	stw	r4,-12(fp)
80094890:	e17ffe15 	stw	r5,-8(fp)
80094894:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
80094898:	e0bffd17 	ldw	r2,-12(fp)
8009489c:	10801783 	ldbu	r2,94(r2)
800948a0:	10803fcc 	andi	r2,r2,255
800948a4:	10000b26 	beq	r2,zero,800948d4 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
800948a8:	e0bffd17 	ldw	r2,-12(fp)
800948ac:	10800617 	ldw	r2,24(r2)
800948b0:	00c00104 	movi	r3,4
800948b4:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
800948b8:	0001883a 	nop
800948bc:	e0bffd17 	ldw	r2,-12(fp)
800948c0:	10800617 	ldw	r2,24(r2)
800948c4:	10800037 	ldwio	r2,0(r2)
800948c8:	1080010c 	andi	r2,r2,4
800948cc:	1005d0ba 	srai	r2,r2,2
800948d0:	103ffa1e 	bne	r2,zero,800948bc <alt_msgdma_init+0x40>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
800948d4:	e0bffd17 	ldw	r2,-12(fp)
800948d8:	10800317 	ldw	r2,12(r2)
800948dc:	10800104 	addi	r2,r2,4
800948e0:	00c00084 	movi	r3,2
800948e4:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
800948e8:	0001883a 	nop
800948ec:	e0bffd17 	ldw	r2,-12(fp)
800948f0:	10800317 	ldw	r2,12(r2)
800948f4:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
800948f8:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
800948fc:	103ffb1e 	bne	r2,zero,800948ec <alt_msgdma_init+0x70>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80094900:	e0bffd17 	ldw	r2,-12(fp)
80094904:	10800317 	ldw	r2,12(r2)
80094908:	10800104 	addi	r2,r2,4
8009490c:	10800037 	ldwio	r2,0(r2)
80094910:	1007883a 	mov	r3,r2
80094914:	00bffbc4 	movi	r2,-17
80094918:	1884703a 	and	r2,r3,r2
8009491c:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80094920:	e0bffb17 	ldw	r2,-20(fp)
80094924:	10800814 	ori	r2,r2,32
80094928:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8009492c:	e0bffd17 	ldw	r2,-12(fp)
80094930:	10800317 	ldw	r2,12(r2)
80094934:	10800104 	addi	r2,r2,4
80094938:	e0fffb17 	ldw	r3,-20(fp)
8009493c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
80094940:	e0bffd17 	ldw	r2,-12(fp)
80094944:	10800317 	ldw	r2,12(r2)
80094948:	e0fffd17 	ldw	r3,-12(fp)
8009494c:	18c00317 	ldw	r3,12(r3)
80094950:	18c00037 	ldwio	r3,0(r3)
80094954:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
80094958:	e0bffd17 	ldw	r2,-12(fp)
8009495c:	10801783 	ldbu	r2,94(r2)
80094960:	10803fcc 	andi	r2,r2,255
80094964:	10000826 	beq	r2,zero,80094988 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
80094968:	e0bffd17 	ldw	r2,-12(fp)
8009496c:	10800617 	ldw	r2,24(r2)
80094970:	10800404 	addi	r2,r2,16
80094974:	e0fffd17 	ldw	r3,-12(fp)
80094978:	18c00617 	ldw	r3,24(r3)
8009497c:	18c00404 	addi	r3,r3,16
80094980:	18c00037 	ldwio	r3,0(r3)
80094984:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
80094988:	d1601e04 	addi	r5,gp,-32648
8009498c:	e13ffd17 	ldw	r4,-12(fp)
80094990:	0094e340 	call	80094e34 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
80094994:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
80094998:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
8009499c:	e0bffc17 	ldw	r2,-16(fp)
800949a0:	1000081e 	bne	r2,zero,800949c4 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
800949a4:	d8000015 	stw	zero,0(sp)
800949a8:	e1fffd17 	ldw	r7,-12(fp)
800949ac:	01a00274 	movhi	r6,32777
800949b0:	318bab04 	addi	r6,r6,11948
800949b4:	e17fff17 	ldw	r5,-4(fp)
800949b8:	e13ffe17 	ldw	r4,-8(fp)
800949bc:	009505c0 	call	8009505c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
800949c0:	00000406 	br	800949d4 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
800949c4:	01200274 	movhi	r4,32777
800949c8:	211bbf04 	addi	r4,r4,28412
800949cc:	00956900 	call	80095690 <alt_printf>
    }
    
    return;
800949d0:	0001883a 	nop

}
800949d4:	e037883a 	mov	sp,fp
800949d8:	dfc00117 	ldw	ra,4(sp)
800949dc:	df000017 	ldw	fp,0(sp)
800949e0:	dec00204 	addi	sp,sp,8
800949e4:	f800283a 	ret

800949e8 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
800949e8:	defffb04 	addi	sp,sp,-20
800949ec:	df000415 	stw	fp,16(sp)
800949f0:	df000404 	addi	fp,sp,16
800949f4:	e13ffc15 	stw	r4,-16(fp)
800949f8:	e17ffd15 	stw	r5,-12(fp)
800949fc:	e1bffe15 	stw	r6,-8(fp)
80094a00:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
80094a04:	e0bffc17 	ldw	r2,-16(fp)
80094a08:	e0fffd17 	ldw	r3,-12(fp)
80094a0c:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
80094a10:	e0bffc17 	ldw	r2,-16(fp)
80094a14:	e0ffff17 	ldw	r3,-4(fp)
80094a18:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
80094a1c:	e0bffc17 	ldw	r2,-16(fp)
80094a20:	e0fffe17 	ldw	r3,-8(fp)
80094a24:	10c00d15 	stw	r3,52(r2)

    return ;
80094a28:	0001883a 	nop
}
80094a2c:	e037883a 	mov	sp,fp
80094a30:	df000017 	ldw	fp,0(sp)
80094a34:	dec00104 	addi	sp,sp,4
80094a38:	f800283a 	ret

80094a3c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
80094a3c:	defffc04 	addi	sp,sp,-16
80094a40:	dfc00315 	stw	ra,12(sp)
80094a44:	df000215 	stw	fp,8(sp)
80094a48:	df000204 	addi	fp,sp,8
80094a4c:	e13ffe15 	stw	r4,-8(fp)
80094a50:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
80094a54:	000d883a 	mov	r6,zero
80094a58:	e17fff17 	ldw	r5,-4(fp)
80094a5c:	e13ffe17 	ldw	r4,-8(fp)
80094a60:	00932100 	call	80093210 <alt_msgdma_descriptor_async_transfer>

}
80094a64:	e037883a 	mov	sp,fp
80094a68:	dfc00117 	ldw	ra,4(sp)
80094a6c:	df000017 	ldw	fp,0(sp)
80094a70:	dec00204 	addi	sp,sp,8
80094a74:	f800283a 	ret

80094a78 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
80094a78:	defffc04 	addi	sp,sp,-16
80094a7c:	dfc00315 	stw	ra,12(sp)
80094a80:	df000215 	stw	fp,8(sp)
80094a84:	df000204 	addi	fp,sp,8
80094a88:	e13ffe15 	stw	r4,-8(fp)
80094a8c:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
80094a90:	e1bfff17 	ldw	r6,-4(fp)
80094a94:	000b883a 	mov	r5,zero
80094a98:	e13ffe17 	ldw	r4,-8(fp)
80094a9c:	00932100 	call	80093210 <alt_msgdma_descriptor_async_transfer>
}
80094aa0:	e037883a 	mov	sp,fp
80094aa4:	dfc00117 	ldw	ra,4(sp)
80094aa8:	df000017 	ldw	fp,0(sp)
80094aac:	dec00204 	addi	sp,sp,8
80094ab0:	f800283a 	ret

80094ab4 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
80094ab4:	defffc04 	addi	sp,sp,-16
80094ab8:	dfc00315 	stw	ra,12(sp)
80094abc:	df000215 	stw	fp,8(sp)
80094ac0:	df000204 	addi	fp,sp,8
80094ac4:	e13ffe15 	stw	r4,-8(fp)
80094ac8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
80094acc:	000d883a 	mov	r6,zero
80094ad0:	e17fff17 	ldw	r5,-4(fp)
80094ad4:	e13ffe17 	ldw	r4,-8(fp)
80094ad8:	00934e00 	call	800934e0 <alt_msgdma_descriptor_sync_transfer>
}
80094adc:	e037883a 	mov	sp,fp
80094ae0:	dfc00117 	ldw	ra,4(sp)
80094ae4:	df000017 	ldw	fp,0(sp)
80094ae8:	dec00204 	addi	sp,sp,8
80094aec:	f800283a 	ret

80094af0 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
80094af0:	defffc04 	addi	sp,sp,-16
80094af4:	dfc00315 	stw	ra,12(sp)
80094af8:	df000215 	stw	fp,8(sp)
80094afc:	df000204 	addi	fp,sp,8
80094b00:	e13ffe15 	stw	r4,-8(fp)
80094b04:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
80094b08:	e1bfff17 	ldw	r6,-4(fp)
80094b0c:	000b883a 	mov	r5,zero
80094b10:	e13ffe17 	ldw	r4,-8(fp)
80094b14:	00934e00 	call	800934e0 <alt_msgdma_descriptor_sync_transfer>
}
80094b18:	e037883a 	mov	sp,fp
80094b1c:	dfc00117 	ldw	ra,4(sp)
80094b20:	df000017 	ldw	fp,0(sp)
80094b24:	dec00204 	addi	sp,sp,8
80094b28:	f800283a 	ret

80094b2c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
80094b2c:	defff504 	addi	sp,sp,-44
80094b30:	df000a15 	stw	fp,40(sp)
80094b34:	df000a04 	addi	fp,sp,40
80094b38:	e13ffc15 	stw	r4,-16(fp)
80094b3c:	e17ffd15 	stw	r5,-12(fp)
80094b40:	e1bffe15 	stw	r6,-8(fp)
80094b44:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
80094b48:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80094b4c:	d0a78b17 	ldw	r2,-25044(gp)
  
  if (alt_ticks_per_second ())
80094b50:	10003c26 	beq	r2,zero,80094c44 <alt_alarm_start+0x118>
  {
    if (alarm)
80094b54:	e0bffc17 	ldw	r2,-16(fp)
80094b58:	10003826 	beq	r2,zero,80094c3c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
80094b5c:	e0bffc17 	ldw	r2,-16(fp)
80094b60:	e0fffe17 	ldw	r3,-8(fp)
80094b64:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
80094b68:	e0bffc17 	ldw	r2,-16(fp)
80094b6c:	e0ffff17 	ldw	r3,-4(fp)
80094b70:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80094b74:	0005303a 	rdctl	r2,status
80094b78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80094b7c:	e0fff917 	ldw	r3,-28(fp)
80094b80:	00bfff84 	movi	r2,-2
80094b84:	1884703a 	and	r2,r3,r2
80094b88:	1001703a 	wrctl	status,r2
  
  return context;
80094b8c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
80094b90:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80094b94:	d0a78c17 	ldw	r2,-25040(gp)
      
      current_nticks = alt_nticks();
80094b98:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
80094b9c:	e0fffd17 	ldw	r3,-12(fp)
80094ba0:	e0bff617 	ldw	r2,-40(fp)
80094ba4:	1885883a 	add	r2,r3,r2
80094ba8:	10c00044 	addi	r3,r2,1
80094bac:	e0bffc17 	ldw	r2,-16(fp)
80094bb0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
80094bb4:	e0bffc17 	ldw	r2,-16(fp)
80094bb8:	10c00217 	ldw	r3,8(r2)
80094bbc:	e0bff617 	ldw	r2,-40(fp)
80094bc0:	1880042e 	bgeu	r3,r2,80094bd4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
80094bc4:	e0bffc17 	ldw	r2,-16(fp)
80094bc8:	00c00044 	movi	r3,1
80094bcc:	10c00405 	stb	r3,16(r2)
80094bd0:	00000206 	br	80094bdc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
80094bd4:	e0bffc17 	ldw	r2,-16(fp)
80094bd8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
80094bdc:	e0bffc17 	ldw	r2,-16(fp)
80094be0:	d0e01c04 	addi	r3,gp,-32656
80094be4:	e0fffa15 	stw	r3,-24(fp)
80094be8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80094bec:	e0bffb17 	ldw	r2,-20(fp)
80094bf0:	e0fffa17 	ldw	r3,-24(fp)
80094bf4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80094bf8:	e0bffa17 	ldw	r2,-24(fp)
80094bfc:	10c00017 	ldw	r3,0(r2)
80094c00:	e0bffb17 	ldw	r2,-20(fp)
80094c04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80094c08:	e0bffa17 	ldw	r2,-24(fp)
80094c0c:	10800017 	ldw	r2,0(r2)
80094c10:	e0fffb17 	ldw	r3,-20(fp)
80094c14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80094c18:	e0bffa17 	ldw	r2,-24(fp)
80094c1c:	e0fffb17 	ldw	r3,-20(fp)
80094c20:	10c00015 	stw	r3,0(r2)
80094c24:	e0bff817 	ldw	r2,-32(fp)
80094c28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80094c2c:	e0bff717 	ldw	r2,-36(fp)
80094c30:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
80094c34:	0005883a 	mov	r2,zero
80094c38:	00000306 	br	80094c48 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
80094c3c:	00bffa84 	movi	r2,-22
80094c40:	00000106 	br	80094c48 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
80094c44:	00bfde84 	movi	r2,-134
  }
}
80094c48:	e037883a 	mov	sp,fp
80094c4c:	df000017 	ldw	fp,0(sp)
80094c50:	dec00104 	addi	sp,sp,4
80094c54:	f800283a 	ret

80094c58 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
80094c58:	defffa04 	addi	sp,sp,-24
80094c5c:	dfc00515 	stw	ra,20(sp)
80094c60:	df000415 	stw	fp,16(sp)
80094c64:	df000404 	addi	fp,sp,16
80094c68:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
80094c6c:	008000c4 	movi	r2,3
80094c70:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
80094c74:	e0fffd17 	ldw	r3,-12(fp)
80094c78:	008003f4 	movhi	r2,15
80094c7c:	10909004 	addi	r2,r2,16960
80094c80:	1885383a 	mul	r2,r3,r2
80094c84:	100b883a 	mov	r5,r2
80094c88:	0102fb34 	movhi	r4,3052
80094c8c:	21308004 	addi	r4,r4,-15872
80094c90:	008f6740 	call	8008f674 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80094c94:	100b883a 	mov	r5,r2
80094c98:	01200034 	movhi	r4,32768
80094c9c:	213fffc4 	addi	r4,r4,-1
80094ca0:	008f6740 	call	8008f674 <__udivsi3>
80094ca4:	100b883a 	mov	r5,r2
80094ca8:	e13fff17 	ldw	r4,-4(fp)
80094cac:	008f6740 	call	8008f674 <__udivsi3>
80094cb0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
80094cb4:	e0bffe17 	ldw	r2,-8(fp)
80094cb8:	10002a26 	beq	r2,zero,80094d64 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
80094cbc:	e03ffc15 	stw	zero,-16(fp)
80094cc0:	00001706 	br	80094d20 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80094cc4:	00a00034 	movhi	r2,32768
80094cc8:	10bfffc4 	addi	r2,r2,-1
80094ccc:	10bfffc4 	addi	r2,r2,-1
80094cd0:	103ffe1e 	bne	r2,zero,80094ccc <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
80094cd4:	e0fffd17 	ldw	r3,-12(fp)
80094cd8:	008003f4 	movhi	r2,15
80094cdc:	10909004 	addi	r2,r2,16960
80094ce0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
80094ce4:	100b883a 	mov	r5,r2
80094ce8:	0102fb34 	movhi	r4,3052
80094cec:	21308004 	addi	r4,r4,-15872
80094cf0:	008f6740 	call	8008f674 <__udivsi3>
80094cf4:	100b883a 	mov	r5,r2
80094cf8:	01200034 	movhi	r4,32768
80094cfc:	213fffc4 	addi	r4,r4,-1
80094d00:	008f6740 	call	8008f674 <__udivsi3>
80094d04:	1007883a 	mov	r3,r2
80094d08:	e0bfff17 	ldw	r2,-4(fp)
80094d0c:	10c5c83a 	sub	r2,r2,r3
80094d10:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
80094d14:	e0bffc17 	ldw	r2,-16(fp)
80094d18:	10800044 	addi	r2,r2,1
80094d1c:	e0bffc15 	stw	r2,-16(fp)
80094d20:	e0fffc17 	ldw	r3,-16(fp)
80094d24:	e0bffe17 	ldw	r2,-8(fp)
80094d28:	18bfe616 	blt	r3,r2,80094cc4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80094d2c:	e0fffd17 	ldw	r3,-12(fp)
80094d30:	008003f4 	movhi	r2,15
80094d34:	10909004 	addi	r2,r2,16960
80094d38:	1885383a 	mul	r2,r3,r2
80094d3c:	100b883a 	mov	r5,r2
80094d40:	0102fb34 	movhi	r4,3052
80094d44:	21308004 	addi	r4,r4,-15872
80094d48:	008f6740 	call	8008f674 <__udivsi3>
80094d4c:	1007883a 	mov	r3,r2
80094d50:	e0bfff17 	ldw	r2,-4(fp)
80094d54:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80094d58:	10bfffc4 	addi	r2,r2,-1
80094d5c:	103ffe1e 	bne	r2,zero,80094d58 <alt_busy_sleep+0x100>
80094d60:	00000d06 	br	80094d98 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80094d64:	e0fffd17 	ldw	r3,-12(fp)
80094d68:	008003f4 	movhi	r2,15
80094d6c:	10909004 	addi	r2,r2,16960
80094d70:	1885383a 	mul	r2,r3,r2
80094d74:	100b883a 	mov	r5,r2
80094d78:	0102fb34 	movhi	r4,3052
80094d7c:	21308004 	addi	r4,r4,-15872
80094d80:	008f6740 	call	8008f674 <__udivsi3>
80094d84:	1007883a 	mov	r3,r2
80094d88:	e0bfff17 	ldw	r2,-4(fp)
80094d8c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80094d90:	10bfffc4 	addi	r2,r2,-1
80094d94:	00bffe16 	blt	zero,r2,80094d90 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80094d98:	0005883a 	mov	r2,zero
}
80094d9c:	e037883a 	mov	sp,fp
80094da0:	dfc00117 	ldw	ra,4(sp)
80094da4:	df000017 	ldw	fp,0(sp)
80094da8:	dec00204 	addi	sp,sp,8
80094dac:	f800283a 	ret

80094db0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
80094db0:	defffe04 	addi	sp,sp,-8
80094db4:	df000115 	stw	fp,4(sp)
80094db8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
80094dbc:	e03fff15 	stw	zero,-4(fp)
80094dc0:	00000506 	br	80094dd8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
80094dc4:	e0bfff17 	ldw	r2,-4(fp)
80094dc8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
80094dcc:	e0bfff17 	ldw	r2,-4(fp)
80094dd0:	10800804 	addi	r2,r2,32
80094dd4:	e0bfff15 	stw	r2,-4(fp)
80094dd8:	e0bfff17 	ldw	r2,-4(fp)
80094ddc:	10820030 	cmpltui	r2,r2,2048
80094de0:	103ff81e 	bne	r2,zero,80094dc4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80094de4:	0001883a 	nop
80094de8:	e037883a 	mov	sp,fp
80094dec:	df000017 	ldw	fp,0(sp)
80094df0:	dec00104 	addi	sp,sp,4
80094df4:	f800283a 	ret

80094df8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80094df8:	defffe04 	addi	sp,sp,-8
80094dfc:	dfc00115 	stw	ra,4(sp)
80094e00:	df000015 	stw	fp,0(sp)
80094e04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80094e08:	d0a01a17 	ldw	r2,-32664(gp)
80094e0c:	10000326 	beq	r2,zero,80094e1c <alt_get_errno+0x24>
80094e10:	d0a01a17 	ldw	r2,-32664(gp)
80094e14:	103ee83a 	callr	r2
80094e18:	00000106 	br	80094e20 <alt_get_errno+0x28>
80094e1c:	d0a78704 	addi	r2,gp,-25060
}
80094e20:	e037883a 	mov	sp,fp
80094e24:	dfc00117 	ldw	ra,4(sp)
80094e28:	df000017 	ldw	fp,0(sp)
80094e2c:	dec00204 	addi	sp,sp,8
80094e30:	f800283a 	ret

80094e34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
80094e34:	defffa04 	addi	sp,sp,-24
80094e38:	dfc00515 	stw	ra,20(sp)
80094e3c:	df000415 	stw	fp,16(sp)
80094e40:	df000404 	addi	fp,sp,16
80094e44:	e13ffe15 	stw	r4,-8(fp)
80094e48:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
80094e4c:	e0bffe17 	ldw	r2,-8(fp)
80094e50:	10000326 	beq	r2,zero,80094e60 <alt_dev_llist_insert+0x2c>
80094e54:	e0bffe17 	ldw	r2,-8(fp)
80094e58:	10800217 	ldw	r2,8(r2)
80094e5c:	1000061e 	bne	r2,zero,80094e78 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
80094e60:	0094df80 	call	80094df8 <alt_get_errno>
80094e64:	1007883a 	mov	r3,r2
80094e68:	00800584 	movi	r2,22
80094e6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
80094e70:	00bffa84 	movi	r2,-22
80094e74:	00001306 	br	80094ec4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
80094e78:	e0bffe17 	ldw	r2,-8(fp)
80094e7c:	e0ffff17 	ldw	r3,-4(fp)
80094e80:	e0fffc15 	stw	r3,-16(fp)
80094e84:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80094e88:	e0bffd17 	ldw	r2,-12(fp)
80094e8c:	e0fffc17 	ldw	r3,-16(fp)
80094e90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80094e94:	e0bffc17 	ldw	r2,-16(fp)
80094e98:	10c00017 	ldw	r3,0(r2)
80094e9c:	e0bffd17 	ldw	r2,-12(fp)
80094ea0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80094ea4:	e0bffc17 	ldw	r2,-16(fp)
80094ea8:	10800017 	ldw	r2,0(r2)
80094eac:	e0fffd17 	ldw	r3,-12(fp)
80094eb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80094eb4:	e0bffc17 	ldw	r2,-16(fp)
80094eb8:	e0fffd17 	ldw	r3,-12(fp)
80094ebc:	10c00015 	stw	r3,0(r2)

  return 0;  
80094ec0:	0005883a 	mov	r2,zero
}
80094ec4:	e037883a 	mov	sp,fp
80094ec8:	dfc00117 	ldw	ra,4(sp)
80094ecc:	df000017 	ldw	fp,0(sp)
80094ed0:	dec00204 	addi	sp,sp,8
80094ed4:	f800283a 	ret

80094ed8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
80094ed8:	defffd04 	addi	sp,sp,-12
80094edc:	dfc00215 	stw	ra,8(sp)
80094ee0:	df000115 	stw	fp,4(sp)
80094ee4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80094ee8:	00a00274 	movhi	r2,32777
80094eec:	10983b04 	addi	r2,r2,24812
80094ef0:	e0bfff15 	stw	r2,-4(fp)
80094ef4:	00000606 	br	80094f10 <_do_ctors+0x38>
        (*ctor) (); 
80094ef8:	e0bfff17 	ldw	r2,-4(fp)
80094efc:	10800017 	ldw	r2,0(r2)
80094f00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80094f04:	e0bfff17 	ldw	r2,-4(fp)
80094f08:	10bfff04 	addi	r2,r2,-4
80094f0c:	e0bfff15 	stw	r2,-4(fp)
80094f10:	e0ffff17 	ldw	r3,-4(fp)
80094f14:	00a00274 	movhi	r2,32777
80094f18:	10983c04 	addi	r2,r2,24816
80094f1c:	18bff62e 	bgeu	r3,r2,80094ef8 <_do_ctors+0x20>
        (*ctor) (); 
}
80094f20:	0001883a 	nop
80094f24:	e037883a 	mov	sp,fp
80094f28:	dfc00117 	ldw	ra,4(sp)
80094f2c:	df000017 	ldw	fp,0(sp)
80094f30:	dec00204 	addi	sp,sp,8
80094f34:	f800283a 	ret

80094f38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
80094f38:	defffd04 	addi	sp,sp,-12
80094f3c:	dfc00215 	stw	ra,8(sp)
80094f40:	df000115 	stw	fp,4(sp)
80094f44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80094f48:	00a00274 	movhi	r2,32777
80094f4c:	10983b04 	addi	r2,r2,24812
80094f50:	e0bfff15 	stw	r2,-4(fp)
80094f54:	00000606 	br	80094f70 <_do_dtors+0x38>
        (*dtor) (); 
80094f58:	e0bfff17 	ldw	r2,-4(fp)
80094f5c:	10800017 	ldw	r2,0(r2)
80094f60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80094f64:	e0bfff17 	ldw	r2,-4(fp)
80094f68:	10bfff04 	addi	r2,r2,-4
80094f6c:	e0bfff15 	stw	r2,-4(fp)
80094f70:	e0ffff17 	ldw	r3,-4(fp)
80094f74:	00a00274 	movhi	r2,32777
80094f78:	10983c04 	addi	r2,r2,24816
80094f7c:	18bff62e 	bgeu	r3,r2,80094f58 <_do_dtors+0x20>
        (*dtor) (); 
}
80094f80:	0001883a 	nop
80094f84:	e037883a 	mov	sp,fp
80094f88:	dfc00117 	ldw	ra,4(sp)
80094f8c:	df000017 	ldw	fp,0(sp)
80094f90:	dec00204 	addi	sp,sp,8
80094f94:	f800283a 	ret

80094f98 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
80094f98:	defffa04 	addi	sp,sp,-24
80094f9c:	dfc00515 	stw	ra,20(sp)
80094fa0:	df000415 	stw	fp,16(sp)
80094fa4:	df000404 	addi	fp,sp,16
80094fa8:	e13ffe15 	stw	r4,-8(fp)
80094fac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
80094fb0:	e0bfff17 	ldw	r2,-4(fp)
80094fb4:	10800017 	ldw	r2,0(r2)
80094fb8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
80094fbc:	e13ffe17 	ldw	r4,-8(fp)
80094fc0:	0081cc00 	call	80081cc0 <strlen>
80094fc4:	10800044 	addi	r2,r2,1
80094fc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80094fcc:	00000d06 	br	80095004 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
80094fd0:	e0bffc17 	ldw	r2,-16(fp)
80094fd4:	10800217 	ldw	r2,8(r2)
80094fd8:	e0fffd17 	ldw	r3,-12(fp)
80094fdc:	180d883a 	mov	r6,r3
80094fe0:	e17ffe17 	ldw	r5,-8(fp)
80094fe4:	1009883a 	mov	r4,r2
80094fe8:	0095c400 	call	80095c40 <memcmp>
80094fec:	1000021e 	bne	r2,zero,80094ff8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
80094ff0:	e0bffc17 	ldw	r2,-16(fp)
80094ff4:	00000706 	br	80095014 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
80094ff8:	e0bffc17 	ldw	r2,-16(fp)
80094ffc:	10800017 	ldw	r2,0(r2)
80095000:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80095004:	e0fffc17 	ldw	r3,-16(fp)
80095008:	e0bfff17 	ldw	r2,-4(fp)
8009500c:	18bff01e 	bne	r3,r2,80094fd0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
80095010:	0005883a 	mov	r2,zero
}
80095014:	e037883a 	mov	sp,fp
80095018:	dfc00117 	ldw	ra,4(sp)
8009501c:	df000017 	ldw	fp,0(sp)
80095020:	dec00204 	addi	sp,sp,8
80095024:	f800283a 	ret

80095028 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
80095028:	defffe04 	addi	sp,sp,-8
8009502c:	dfc00115 	stw	ra,4(sp)
80095030:	df000015 	stw	fp,0(sp)
80095034:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
80095038:	01440004 	movi	r5,4096
8009503c:	0009883a 	mov	r4,zero
80095040:	0095ac80 	call	80095ac8 <alt_icache_flush>
#endif
}
80095044:	0001883a 	nop
80095048:	e037883a 	mov	sp,fp
8009504c:	dfc00117 	ldw	ra,4(sp)
80095050:	df000017 	ldw	fp,0(sp)
80095054:	dec00204 	addi	sp,sp,8
80095058:	f800283a 	ret

8009505c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8009505c:	defff904 	addi	sp,sp,-28
80095060:	dfc00615 	stw	ra,24(sp)
80095064:	df000515 	stw	fp,20(sp)
80095068:	df000504 	addi	fp,sp,20
8009506c:	e13ffc15 	stw	r4,-16(fp)
80095070:	e17ffd15 	stw	r5,-12(fp)
80095074:	e1bffe15 	stw	r6,-8(fp)
80095078:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8009507c:	e0800217 	ldw	r2,8(fp)
80095080:	d8800015 	stw	r2,0(sp)
80095084:	e1ffff17 	ldw	r7,-4(fp)
80095088:	e1bffe17 	ldw	r6,-8(fp)
8009508c:	e17ffd17 	ldw	r5,-12(fp)
80095090:	e13ffc17 	ldw	r4,-16(fp)
80095094:	009520c0 	call	8009520c <alt_iic_isr_register>
}  
80095098:	e037883a 	mov	sp,fp
8009509c:	dfc00117 	ldw	ra,4(sp)
800950a0:	df000017 	ldw	fp,0(sp)
800950a4:	dec00204 	addi	sp,sp,8
800950a8:	f800283a 	ret

800950ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
800950ac:	defff904 	addi	sp,sp,-28
800950b0:	df000615 	stw	fp,24(sp)
800950b4:	df000604 	addi	fp,sp,24
800950b8:	e13ffe15 	stw	r4,-8(fp)
800950bc:	e17fff15 	stw	r5,-4(fp)
800950c0:	e0bfff17 	ldw	r2,-4(fp)
800950c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800950c8:	0005303a 	rdctl	r2,status
800950cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800950d0:	e0fffb17 	ldw	r3,-20(fp)
800950d4:	00bfff84 	movi	r2,-2
800950d8:	1884703a 	and	r2,r3,r2
800950dc:	1001703a 	wrctl	status,r2
  
  return context;
800950e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
800950e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
800950e8:	00c00044 	movi	r3,1
800950ec:	e0bffa17 	ldw	r2,-24(fp)
800950f0:	1884983a 	sll	r2,r3,r2
800950f4:	1007883a 	mov	r3,r2
800950f8:	d0a78d17 	ldw	r2,-25036(gp)
800950fc:	1884b03a 	or	r2,r3,r2
80095100:	d0a78d15 	stw	r2,-25036(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80095104:	d0a78d17 	ldw	r2,-25036(gp)
80095108:	100170fa 	wrctl	ienable,r2
8009510c:	e0bffc17 	ldw	r2,-16(fp)
80095110:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80095114:	e0bffd17 	ldw	r2,-12(fp)
80095118:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8009511c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
80095120:	0001883a 	nop
}
80095124:	e037883a 	mov	sp,fp
80095128:	df000017 	ldw	fp,0(sp)
8009512c:	dec00104 	addi	sp,sp,4
80095130:	f800283a 	ret

80095134 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
80095134:	defff904 	addi	sp,sp,-28
80095138:	df000615 	stw	fp,24(sp)
8009513c:	df000604 	addi	fp,sp,24
80095140:	e13ffe15 	stw	r4,-8(fp)
80095144:	e17fff15 	stw	r5,-4(fp)
80095148:	e0bfff17 	ldw	r2,-4(fp)
8009514c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80095150:	0005303a 	rdctl	r2,status
80095154:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80095158:	e0fffb17 	ldw	r3,-20(fp)
8009515c:	00bfff84 	movi	r2,-2
80095160:	1884703a 	and	r2,r3,r2
80095164:	1001703a 	wrctl	status,r2
  
  return context;
80095168:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8009516c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
80095170:	00c00044 	movi	r3,1
80095174:	e0bffa17 	ldw	r2,-24(fp)
80095178:	1884983a 	sll	r2,r3,r2
8009517c:	0084303a 	nor	r2,zero,r2
80095180:	1007883a 	mov	r3,r2
80095184:	d0a78d17 	ldw	r2,-25036(gp)
80095188:	1884703a 	and	r2,r3,r2
8009518c:	d0a78d15 	stw	r2,-25036(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80095190:	d0a78d17 	ldw	r2,-25036(gp)
80095194:	100170fa 	wrctl	ienable,r2
80095198:	e0bffc17 	ldw	r2,-16(fp)
8009519c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
800951a0:	e0bffd17 	ldw	r2,-12(fp)
800951a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
800951a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
800951ac:	0001883a 	nop
}
800951b0:	e037883a 	mov	sp,fp
800951b4:	df000017 	ldw	fp,0(sp)
800951b8:	dec00104 	addi	sp,sp,4
800951bc:	f800283a 	ret

800951c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
800951c0:	defffc04 	addi	sp,sp,-16
800951c4:	df000315 	stw	fp,12(sp)
800951c8:	df000304 	addi	fp,sp,12
800951cc:	e13ffe15 	stw	r4,-8(fp)
800951d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
800951d4:	000530fa 	rdctl	r2,ienable
800951d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
800951dc:	00c00044 	movi	r3,1
800951e0:	e0bfff17 	ldw	r2,-4(fp)
800951e4:	1884983a 	sll	r2,r3,r2
800951e8:	1007883a 	mov	r3,r2
800951ec:	e0bffd17 	ldw	r2,-12(fp)
800951f0:	1884703a 	and	r2,r3,r2
800951f4:	1004c03a 	cmpne	r2,r2,zero
800951f8:	10803fcc 	andi	r2,r2,255
}
800951fc:	e037883a 	mov	sp,fp
80095200:	df000017 	ldw	fp,0(sp)
80095204:	dec00104 	addi	sp,sp,4
80095208:	f800283a 	ret

8009520c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8009520c:	defff504 	addi	sp,sp,-44
80095210:	dfc00a15 	stw	ra,40(sp)
80095214:	df000915 	stw	fp,36(sp)
80095218:	df000904 	addi	fp,sp,36
8009521c:	e13ffc15 	stw	r4,-16(fp)
80095220:	e17ffd15 	stw	r5,-12(fp)
80095224:	e1bffe15 	stw	r6,-8(fp)
80095228:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8009522c:	00bffa84 	movi	r2,-22
80095230:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
80095234:	e0bffd17 	ldw	r2,-12(fp)
80095238:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8009523c:	e0bff817 	ldw	r2,-32(fp)
80095240:	10800808 	cmpgei	r2,r2,32
80095244:	1000271e 	bne	r2,zero,800952e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80095248:	0005303a 	rdctl	r2,status
8009524c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80095250:	e0fffb17 	ldw	r3,-20(fp)
80095254:	00bfff84 	movi	r2,-2
80095258:	1884703a 	and	r2,r3,r2
8009525c:	1001703a 	wrctl	status,r2
  
  return context;
80095260:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
80095264:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
80095268:	00a002b4 	movhi	r2,32778
8009526c:	10ab4104 	addi	r2,r2,-21244
80095270:	e0fff817 	ldw	r3,-32(fp)
80095274:	180690fa 	slli	r3,r3,3
80095278:	10c5883a 	add	r2,r2,r3
8009527c:	e0fffe17 	ldw	r3,-8(fp)
80095280:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
80095284:	00a002b4 	movhi	r2,32778
80095288:	10ab4104 	addi	r2,r2,-21244
8009528c:	e0fff817 	ldw	r3,-32(fp)
80095290:	180690fa 	slli	r3,r3,3
80095294:	10c5883a 	add	r2,r2,r3
80095298:	10800104 	addi	r2,r2,4
8009529c:	e0ffff17 	ldw	r3,-4(fp)
800952a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
800952a4:	e0bffe17 	ldw	r2,-8(fp)
800952a8:	10000526 	beq	r2,zero,800952c0 <alt_iic_isr_register+0xb4>
800952ac:	e0bff817 	ldw	r2,-32(fp)
800952b0:	100b883a 	mov	r5,r2
800952b4:	e13ffc17 	ldw	r4,-16(fp)
800952b8:	00950ac0 	call	800950ac <alt_ic_irq_enable>
800952bc:	00000406 	br	800952d0 <alt_iic_isr_register+0xc4>
800952c0:	e0bff817 	ldw	r2,-32(fp)
800952c4:	100b883a 	mov	r5,r2
800952c8:	e13ffc17 	ldw	r4,-16(fp)
800952cc:	00951340 	call	80095134 <alt_ic_irq_disable>
800952d0:	e0bff715 	stw	r2,-36(fp)
800952d4:	e0bffa17 	ldw	r2,-24(fp)
800952d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
800952dc:	e0bff917 	ldw	r2,-28(fp)
800952e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
800952e4:	e0bff717 	ldw	r2,-36(fp)
}
800952e8:	e037883a 	mov	sp,fp
800952ec:	dfc00117 	ldw	ra,4(sp)
800952f0:	df000017 	ldw	fp,0(sp)
800952f4:	dec00204 	addi	sp,sp,8
800952f8:	f800283a 	ret

800952fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
800952fc:	defff904 	addi	sp,sp,-28
80095300:	dfc00615 	stw	ra,24(sp)
80095304:	df000515 	stw	fp,20(sp)
80095308:	df000504 	addi	fp,sp,20
8009530c:	e13ffc15 	stw	r4,-16(fp)
80095310:	e17ffd15 	stw	r5,-12(fp)
80095314:	e1bffe15 	stw	r6,-8(fp)
80095318:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8009531c:	e1bfff17 	ldw	r6,-4(fp)
80095320:	e17ffe17 	ldw	r5,-8(fp)
80095324:	e13ffd17 	ldw	r4,-12(fp)
80095328:	009553c0 	call	8009553c <open>
8009532c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
80095330:	e0bffb17 	ldw	r2,-20(fp)
80095334:	10001c16 	blt	r2,zero,800953a8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
80095338:	00a00274 	movhi	r2,32777
8009533c:	109dfa04 	addi	r2,r2,30696
80095340:	e0fffb17 	ldw	r3,-20(fp)
80095344:	18c00324 	muli	r3,r3,12
80095348:	10c5883a 	add	r2,r2,r3
8009534c:	10c00017 	ldw	r3,0(r2)
80095350:	e0bffc17 	ldw	r2,-16(fp)
80095354:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
80095358:	00a00274 	movhi	r2,32777
8009535c:	109dfa04 	addi	r2,r2,30696
80095360:	e0fffb17 	ldw	r3,-20(fp)
80095364:	18c00324 	muli	r3,r3,12
80095368:	10c5883a 	add	r2,r2,r3
8009536c:	10800104 	addi	r2,r2,4
80095370:	10c00017 	ldw	r3,0(r2)
80095374:	e0bffc17 	ldw	r2,-16(fp)
80095378:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8009537c:	00a00274 	movhi	r2,32777
80095380:	109dfa04 	addi	r2,r2,30696
80095384:	e0fffb17 	ldw	r3,-20(fp)
80095388:	18c00324 	muli	r3,r3,12
8009538c:	10c5883a 	add	r2,r2,r3
80095390:	10800204 	addi	r2,r2,8
80095394:	10c00017 	ldw	r3,0(r2)
80095398:	e0bffc17 	ldw	r2,-16(fp)
8009539c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
800953a0:	e13ffb17 	ldw	r4,-20(fp)
800953a4:	0091b940 	call	80091b94 <alt_release_fd>
  }
} 
800953a8:	0001883a 	nop
800953ac:	e037883a 	mov	sp,fp
800953b0:	dfc00117 	ldw	ra,4(sp)
800953b4:	df000017 	ldw	fp,0(sp)
800953b8:	dec00204 	addi	sp,sp,8
800953bc:	f800283a 	ret

800953c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
800953c0:	defffb04 	addi	sp,sp,-20
800953c4:	dfc00415 	stw	ra,16(sp)
800953c8:	df000315 	stw	fp,12(sp)
800953cc:	df000304 	addi	fp,sp,12
800953d0:	e13ffd15 	stw	r4,-12(fp)
800953d4:	e17ffe15 	stw	r5,-8(fp)
800953d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
800953dc:	01c07fc4 	movi	r7,511
800953e0:	01800044 	movi	r6,1
800953e4:	e17ffd17 	ldw	r5,-12(fp)
800953e8:	01200274 	movhi	r4,32777
800953ec:	211dfd04 	addi	r4,r4,30708
800953f0:	00952fc0 	call	800952fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
800953f4:	01c07fc4 	movi	r7,511
800953f8:	000d883a 	mov	r6,zero
800953fc:	e17ffe17 	ldw	r5,-8(fp)
80095400:	01200274 	movhi	r4,32777
80095404:	211dfa04 	addi	r4,r4,30696
80095408:	00952fc0 	call	800952fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8009540c:	01c07fc4 	movi	r7,511
80095410:	01800044 	movi	r6,1
80095414:	e17fff17 	ldw	r5,-4(fp)
80095418:	01200274 	movhi	r4,32777
8009541c:	211e0004 	addi	r4,r4,30720
80095420:	00952fc0 	call	800952fc <alt_open_fd>
}  
80095424:	0001883a 	nop
80095428:	e037883a 	mov	sp,fp
8009542c:	dfc00117 	ldw	ra,4(sp)
80095430:	df000017 	ldw	fp,0(sp)
80095434:	dec00204 	addi	sp,sp,8
80095438:	f800283a 	ret

8009543c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8009543c:	defffe04 	addi	sp,sp,-8
80095440:	dfc00115 	stw	ra,4(sp)
80095444:	df000015 	stw	fp,0(sp)
80095448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8009544c:	d0a01a17 	ldw	r2,-32664(gp)
80095450:	10000326 	beq	r2,zero,80095460 <alt_get_errno+0x24>
80095454:	d0a01a17 	ldw	r2,-32664(gp)
80095458:	103ee83a 	callr	r2
8009545c:	00000106 	br	80095464 <alt_get_errno+0x28>
80095460:	d0a78704 	addi	r2,gp,-25060
}
80095464:	e037883a 	mov	sp,fp
80095468:	dfc00117 	ldw	ra,4(sp)
8009546c:	df000017 	ldw	fp,0(sp)
80095470:	dec00204 	addi	sp,sp,8
80095474:	f800283a 	ret

80095478 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
80095478:	defffd04 	addi	sp,sp,-12
8009547c:	df000215 	stw	fp,8(sp)
80095480:	df000204 	addi	fp,sp,8
80095484:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
80095488:	e0bfff17 	ldw	r2,-4(fp)
8009548c:	10800217 	ldw	r2,8(r2)
80095490:	10d00034 	orhi	r3,r2,16384
80095494:	e0bfff17 	ldw	r2,-4(fp)
80095498:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8009549c:	e03ffe15 	stw	zero,-8(fp)
800954a0:	00001d06 	br	80095518 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
800954a4:	00a00274 	movhi	r2,32777
800954a8:	109dfa04 	addi	r2,r2,30696
800954ac:	e0fffe17 	ldw	r3,-8(fp)
800954b0:	18c00324 	muli	r3,r3,12
800954b4:	10c5883a 	add	r2,r2,r3
800954b8:	10c00017 	ldw	r3,0(r2)
800954bc:	e0bfff17 	ldw	r2,-4(fp)
800954c0:	10800017 	ldw	r2,0(r2)
800954c4:	1880111e 	bne	r3,r2,8009550c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
800954c8:	00a00274 	movhi	r2,32777
800954cc:	109dfa04 	addi	r2,r2,30696
800954d0:	e0fffe17 	ldw	r3,-8(fp)
800954d4:	18c00324 	muli	r3,r3,12
800954d8:	10c5883a 	add	r2,r2,r3
800954dc:	10800204 	addi	r2,r2,8
800954e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
800954e4:	1000090e 	bge	r2,zero,8009550c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
800954e8:	e0bffe17 	ldw	r2,-8(fp)
800954ec:	10c00324 	muli	r3,r2,12
800954f0:	00a00274 	movhi	r2,32777
800954f4:	109dfa04 	addi	r2,r2,30696
800954f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
800954fc:	e0bfff17 	ldw	r2,-4(fp)
80095500:	18800226 	beq	r3,r2,8009550c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
80095504:	00bffcc4 	movi	r2,-13
80095508:	00000806 	br	8009552c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8009550c:	e0bffe17 	ldw	r2,-8(fp)
80095510:	10800044 	addi	r2,r2,1
80095514:	e0bffe15 	stw	r2,-8(fp)
80095518:	d0a01917 	ldw	r2,-32668(gp)
8009551c:	1007883a 	mov	r3,r2
80095520:	e0bffe17 	ldw	r2,-8(fp)
80095524:	18bfdf2e 	bgeu	r3,r2,800954a4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
80095528:	0005883a 	mov	r2,zero
}
8009552c:	e037883a 	mov	sp,fp
80095530:	df000017 	ldw	fp,0(sp)
80095534:	dec00104 	addi	sp,sp,4
80095538:	f800283a 	ret

8009553c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8009553c:	defff604 	addi	sp,sp,-40
80095540:	dfc00915 	stw	ra,36(sp)
80095544:	df000815 	stw	fp,32(sp)
80095548:	df000804 	addi	fp,sp,32
8009554c:	e13ffd15 	stw	r4,-12(fp)
80095550:	e17ffe15 	stw	r5,-8(fp)
80095554:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
80095558:	00bfffc4 	movi	r2,-1
8009555c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
80095560:	00bffb44 	movi	r2,-19
80095564:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
80095568:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8009556c:	d1601704 	addi	r5,gp,-32676
80095570:	e13ffd17 	ldw	r4,-12(fp)
80095574:	0094f980 	call	80094f98 <alt_find_dev>
80095578:	e0bff815 	stw	r2,-32(fp)
8009557c:	e0bff817 	ldw	r2,-32(fp)
80095580:	1000051e 	bne	r2,zero,80095598 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
80095584:	e13ffd17 	ldw	r4,-12(fp)
80095588:	009591c0 	call	8009591c <alt_find_file>
8009558c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
80095590:	00800044 	movi	r2,1
80095594:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80095598:	e0bff817 	ldw	r2,-32(fp)
8009559c:	10002926 	beq	r2,zero,80095644 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
800955a0:	e13ff817 	ldw	r4,-32(fp)
800955a4:	0095a240 	call	80095a24 <alt_get_fd>
800955a8:	e0bff915 	stw	r2,-28(fp)
800955ac:	e0bff917 	ldw	r2,-28(fp)
800955b0:	1000030e 	bge	r2,zero,800955c0 <open+0x84>
    {
      status = index;
800955b4:	e0bff917 	ldw	r2,-28(fp)
800955b8:	e0bffa15 	stw	r2,-24(fp)
800955bc:	00002306 	br	8009564c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
800955c0:	e0bff917 	ldw	r2,-28(fp)
800955c4:	10c00324 	muli	r3,r2,12
800955c8:	00a00274 	movhi	r2,32777
800955cc:	109dfa04 	addi	r2,r2,30696
800955d0:	1885883a 	add	r2,r3,r2
800955d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
800955d8:	e0fffe17 	ldw	r3,-8(fp)
800955dc:	00900034 	movhi	r2,16384
800955e0:	10bfffc4 	addi	r2,r2,-1
800955e4:	1886703a 	and	r3,r3,r2
800955e8:	e0bffc17 	ldw	r2,-16(fp)
800955ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
800955f0:	e0bffb17 	ldw	r2,-20(fp)
800955f4:	1000051e 	bne	r2,zero,8009560c <open+0xd0>
800955f8:	e13ffc17 	ldw	r4,-16(fp)
800955fc:	00954780 	call	80095478 <alt_file_locked>
80095600:	e0bffa15 	stw	r2,-24(fp)
80095604:	e0bffa17 	ldw	r2,-24(fp)
80095608:	10001016 	blt	r2,zero,8009564c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8009560c:	e0bff817 	ldw	r2,-32(fp)
80095610:	10800317 	ldw	r2,12(r2)
80095614:	10000826 	beq	r2,zero,80095638 <open+0xfc>
80095618:	e0bff817 	ldw	r2,-32(fp)
8009561c:	10800317 	ldw	r2,12(r2)
80095620:	e1ffff17 	ldw	r7,-4(fp)
80095624:	e1bffe17 	ldw	r6,-8(fp)
80095628:	e17ffd17 	ldw	r5,-12(fp)
8009562c:	e13ffc17 	ldw	r4,-16(fp)
80095630:	103ee83a 	callr	r2
80095634:	00000106 	br	8009563c <open+0x100>
80095638:	0005883a 	mov	r2,zero
8009563c:	e0bffa15 	stw	r2,-24(fp)
80095640:	00000206 	br	8009564c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
80095644:	00bffb44 	movi	r2,-19
80095648:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8009564c:	e0bffa17 	ldw	r2,-24(fp)
80095650:	1000090e 	bge	r2,zero,80095678 <open+0x13c>
  {
    alt_release_fd (index);  
80095654:	e13ff917 	ldw	r4,-28(fp)
80095658:	0091b940 	call	80091b94 <alt_release_fd>
    ALT_ERRNO = -status;
8009565c:	009543c0 	call	8009543c <alt_get_errno>
80095660:	1007883a 	mov	r3,r2
80095664:	e0bffa17 	ldw	r2,-24(fp)
80095668:	0085c83a 	sub	r2,zero,r2
8009566c:	18800015 	stw	r2,0(r3)
    return -1;
80095670:	00bfffc4 	movi	r2,-1
80095674:	00000106 	br	8009567c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
80095678:	e0bff917 	ldw	r2,-28(fp)
}
8009567c:	e037883a 	mov	sp,fp
80095680:	dfc00117 	ldw	ra,4(sp)
80095684:	df000017 	ldw	fp,0(sp)
80095688:	dec00204 	addi	sp,sp,8
8009568c:	f800283a 	ret

80095690 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
80095690:	defff204 	addi	sp,sp,-56
80095694:	dfc00a15 	stw	ra,40(sp)
80095698:	df000915 	stw	fp,36(sp)
8009569c:	df000904 	addi	fp,sp,36
800956a0:	e13fff15 	stw	r4,-4(fp)
800956a4:	e1400215 	stw	r5,8(fp)
800956a8:	e1800315 	stw	r6,12(fp)
800956ac:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
800956b0:	e0800204 	addi	r2,fp,8
800956b4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
800956b8:	e0bfff17 	ldw	r2,-4(fp)
800956bc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
800956c0:	00006f06 	br	80095880 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
800956c4:	e0bff807 	ldb	r2,-32(fp)
800956c8:	10800960 	cmpeqi	r2,r2,37
800956cc:	1000041e 	bne	r2,zero,800956e0 <alt_printf+0x50>
        {
            alt_putchar(c);
800956d0:	e0bff807 	ldb	r2,-32(fp)
800956d4:	1009883a 	mov	r4,r2
800956d8:	00958bc0 	call	800958bc <alt_putchar>
800956dc:	00006806 	br	80095880 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
800956e0:	e0bff717 	ldw	r2,-36(fp)
800956e4:	10c00044 	addi	r3,r2,1
800956e8:	e0fff715 	stw	r3,-36(fp)
800956ec:	10800003 	ldbu	r2,0(r2)
800956f0:	e0bff805 	stb	r2,-32(fp)
800956f4:	e0bff807 	ldb	r2,-32(fp)
800956f8:	10006926 	beq	r2,zero,800958a0 <alt_printf+0x210>
            {
                if (c == '%')
800956fc:	e0bff807 	ldb	r2,-32(fp)
80095700:	10800958 	cmpnei	r2,r2,37
80095704:	1000041e 	bne	r2,zero,80095718 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
80095708:	e0bff807 	ldb	r2,-32(fp)
8009570c:	1009883a 	mov	r4,r2
80095710:	00958bc0 	call	800958bc <alt_putchar>
80095714:	00005a06 	br	80095880 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
80095718:	e0bff807 	ldb	r2,-32(fp)
8009571c:	108018d8 	cmpnei	r2,r2,99
80095720:	1000081e 	bne	r2,zero,80095744 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
80095724:	e0bffe17 	ldw	r2,-8(fp)
80095728:	10c00104 	addi	r3,r2,4
8009572c:	e0fffe15 	stw	r3,-8(fp)
80095730:	10800017 	ldw	r2,0(r2)
80095734:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
80095738:	e13ffd17 	ldw	r4,-12(fp)
8009573c:	00958bc0 	call	800958bc <alt_putchar>
80095740:	00004f06 	br	80095880 <alt_printf+0x1f0>
                }
                else if (c == 'x')
80095744:	e0bff807 	ldb	r2,-32(fp)
80095748:	10801e18 	cmpnei	r2,r2,120
8009574c:	1000341e 	bne	r2,zero,80095820 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
80095750:	e0bffe17 	ldw	r2,-8(fp)
80095754:	10c00104 	addi	r3,r2,4
80095758:	e0fffe15 	stw	r3,-8(fp)
8009575c:	10800017 	ldw	r2,0(r2)
80095760:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
80095764:	e0bffb17 	ldw	r2,-20(fp)
80095768:	1000031e 	bne	r2,zero,80095778 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8009576c:	01000c04 	movi	r4,48
80095770:	00958bc0 	call	800958bc <alt_putchar>
                        continue;
80095774:	00004206 	br	80095880 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80095778:	00800704 	movi	r2,28
8009577c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
80095780:	00000306 	br	80095790 <alt_printf+0x100>
                        digit_shift -= 4;
80095784:	e0bff917 	ldw	r2,-28(fp)
80095788:	10bfff04 	addi	r2,r2,-4
8009578c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
80095790:	00c003c4 	movi	r3,15
80095794:	e0bff917 	ldw	r2,-28(fp)
80095798:	1884983a 	sll	r2,r3,r2
8009579c:	1007883a 	mov	r3,r2
800957a0:	e0bffb17 	ldw	r2,-20(fp)
800957a4:	1884703a 	and	r2,r3,r2
800957a8:	103ff626 	beq	r2,zero,80095784 <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
800957ac:	00001906 	br	80095814 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
800957b0:	00c003c4 	movi	r3,15
800957b4:	e0bff917 	ldw	r2,-28(fp)
800957b8:	1884983a 	sll	r2,r3,r2
800957bc:	1007883a 	mov	r3,r2
800957c0:	e0bffb17 	ldw	r2,-20(fp)
800957c4:	1886703a 	and	r3,r3,r2
800957c8:	e0bff917 	ldw	r2,-28(fp)
800957cc:	1884d83a 	srl	r2,r3,r2
800957d0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
800957d4:	e0bffc17 	ldw	r2,-16(fp)
800957d8:	108002a8 	cmpgeui	r2,r2,10
800957dc:	1000041e 	bne	r2,zero,800957f0 <alt_printf+0x160>
                            c = '0' + digit;
800957e0:	e0bffc17 	ldw	r2,-16(fp)
800957e4:	10800c04 	addi	r2,r2,48
800957e8:	e0bff805 	stb	r2,-32(fp)
800957ec:	00000306 	br	800957fc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
800957f0:	e0bffc17 	ldw	r2,-16(fp)
800957f4:	108015c4 	addi	r2,r2,87
800957f8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
800957fc:	e0bff807 	ldb	r2,-32(fp)
80095800:	1009883a 	mov	r4,r2
80095804:	00958bc0 	call	800958bc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80095808:	e0bff917 	ldw	r2,-28(fp)
8009580c:	10bfff04 	addi	r2,r2,-4
80095810:	e0bff915 	stw	r2,-28(fp)
80095814:	e0bff917 	ldw	r2,-28(fp)
80095818:	103fe50e 	bge	r2,zero,800957b0 <alt_printf+0x120>
8009581c:	00001806 	br	80095880 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
80095820:	e0bff807 	ldb	r2,-32(fp)
80095824:	10801cd8 	cmpnei	r2,r2,115
80095828:	1000151e 	bne	r2,zero,80095880 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8009582c:	e0bffe17 	ldw	r2,-8(fp)
80095830:	10c00104 	addi	r3,r2,4
80095834:	e0fffe15 	stw	r3,-8(fp)
80095838:	10800017 	ldw	r2,0(r2)
8009583c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
80095840:	00000906 	br	80095868 <alt_printf+0x1d8>
                      alt_putchar(*s++);
80095844:	e0bffa17 	ldw	r2,-24(fp)
80095848:	10c00044 	addi	r3,r2,1
8009584c:	e0fffa15 	stw	r3,-24(fp)
80095850:	10800003 	ldbu	r2,0(r2)
80095854:	10803fcc 	andi	r2,r2,255
80095858:	1080201c 	xori	r2,r2,128
8009585c:	10bfe004 	addi	r2,r2,-128
80095860:	1009883a 	mov	r4,r2
80095864:	00958bc0 	call	800958bc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
80095868:	e0bffa17 	ldw	r2,-24(fp)
8009586c:	10800003 	ldbu	r2,0(r2)
80095870:	10803fcc 	andi	r2,r2,255
80095874:	1080201c 	xori	r2,r2,128
80095878:	10bfe004 	addi	r2,r2,-128
8009587c:	103ff11e 	bne	r2,zero,80095844 <alt_printf+0x1b4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
80095880:	e0bff717 	ldw	r2,-36(fp)
80095884:	10c00044 	addi	r3,r2,1
80095888:	e0fff715 	stw	r3,-36(fp)
8009588c:	10800003 	ldbu	r2,0(r2)
80095890:	e0bff805 	stb	r2,-32(fp)
80095894:	e0bff807 	ldb	r2,-32(fp)
80095898:	103f8a1e 	bne	r2,zero,800956c4 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8009589c:	00000106 	br	800958a4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
800958a0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
800958a4:	0001883a 	nop
800958a8:	e037883a 	mov	sp,fp
800958ac:	dfc00117 	ldw	ra,4(sp)
800958b0:	df000017 	ldw	fp,0(sp)
800958b4:	dec00504 	addi	sp,sp,20
800958b8:	f800283a 	ret

800958bc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
800958bc:	defffd04 	addi	sp,sp,-12
800958c0:	dfc00215 	stw	ra,8(sp)
800958c4:	df000115 	stw	fp,4(sp)
800958c8:	df000104 	addi	fp,sp,4
800958cc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
800958d0:	d0a01017 	ldw	r2,-32704(gp)
800958d4:	10800217 	ldw	r2,8(r2)
800958d8:	100b883a 	mov	r5,r2
800958dc:	e13fff17 	ldw	r4,-4(fp)
800958e0:	0095d5c0 	call	80095d5c <putc>
#endif
#endif
}
800958e4:	e037883a 	mov	sp,fp
800958e8:	dfc00117 	ldw	ra,4(sp)
800958ec:	df000017 	ldw	fp,0(sp)
800958f0:	dec00204 	addi	sp,sp,8
800958f4:	f800283a 	ret

800958f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
800958f8:	deffff04 	addi	sp,sp,-4
800958fc:	df000015 	stw	fp,0(sp)
80095900:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
80095904:	000170fa 	wrctl	ienable,zero
}
80095908:	0001883a 	nop
8009590c:	e037883a 	mov	sp,fp
80095910:	df000017 	ldw	fp,0(sp)
80095914:	dec00104 	addi	sp,sp,4
80095918:	f800283a 	ret

8009591c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8009591c:	defffb04 	addi	sp,sp,-20
80095920:	dfc00415 	stw	ra,16(sp)
80095924:	df000315 	stw	fp,12(sp)
80095928:	df000304 	addi	fp,sp,12
8009592c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
80095930:	d0a01517 	ldw	r2,-32684(gp)
80095934:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80095938:	00003106 	br	80095a00 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8009593c:	e0bffd17 	ldw	r2,-12(fp)
80095940:	10800217 	ldw	r2,8(r2)
80095944:	1009883a 	mov	r4,r2
80095948:	0081cc00 	call	80081cc0 <strlen>
8009594c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
80095950:	e0bffd17 	ldw	r2,-12(fp)
80095954:	10c00217 	ldw	r3,8(r2)
80095958:	e0bffe17 	ldw	r2,-8(fp)
8009595c:	10bfffc4 	addi	r2,r2,-1
80095960:	1885883a 	add	r2,r3,r2
80095964:	10800003 	ldbu	r2,0(r2)
80095968:	10803fcc 	andi	r2,r2,255
8009596c:	1080201c 	xori	r2,r2,128
80095970:	10bfe004 	addi	r2,r2,-128
80095974:	10800bd8 	cmpnei	r2,r2,47
80095978:	1000031e 	bne	r2,zero,80095988 <alt_find_file+0x6c>
    {
      len -= 1;
8009597c:	e0bffe17 	ldw	r2,-8(fp)
80095980:	10bfffc4 	addi	r2,r2,-1
80095984:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80095988:	e0bffe17 	ldw	r2,-8(fp)
8009598c:	e0ffff17 	ldw	r3,-4(fp)
80095990:	1885883a 	add	r2,r3,r2
80095994:	10800003 	ldbu	r2,0(r2)
80095998:	10803fcc 	andi	r2,r2,255
8009599c:	1080201c 	xori	r2,r2,128
800959a0:	10bfe004 	addi	r2,r2,-128
800959a4:	10800be0 	cmpeqi	r2,r2,47
800959a8:	1000081e 	bne	r2,zero,800959cc <alt_find_file+0xb0>
800959ac:	e0bffe17 	ldw	r2,-8(fp)
800959b0:	e0ffff17 	ldw	r3,-4(fp)
800959b4:	1885883a 	add	r2,r3,r2
800959b8:	10800003 	ldbu	r2,0(r2)
800959bc:	10803fcc 	andi	r2,r2,255
800959c0:	1080201c 	xori	r2,r2,128
800959c4:	10bfe004 	addi	r2,r2,-128
800959c8:	10000a1e 	bne	r2,zero,800959f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
800959cc:	e0bffd17 	ldw	r2,-12(fp)
800959d0:	10800217 	ldw	r2,8(r2)
800959d4:	e0fffe17 	ldw	r3,-8(fp)
800959d8:	180d883a 	mov	r6,r3
800959dc:	e17fff17 	ldw	r5,-4(fp)
800959e0:	1009883a 	mov	r4,r2
800959e4:	0095c400 	call	80095c40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
800959e8:	1000021e 	bne	r2,zero,800959f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
800959ec:	e0bffd17 	ldw	r2,-12(fp)
800959f0:	00000706 	br	80095a10 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
800959f4:	e0bffd17 	ldw	r2,-12(fp)
800959f8:	10800017 	ldw	r2,0(r2)
800959fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80095a00:	e0fffd17 	ldw	r3,-12(fp)
80095a04:	d0a01504 	addi	r2,gp,-32684
80095a08:	18bfcc1e 	bne	r3,r2,8009593c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
80095a0c:	0005883a 	mov	r2,zero
}
80095a10:	e037883a 	mov	sp,fp
80095a14:	dfc00117 	ldw	ra,4(sp)
80095a18:	df000017 	ldw	fp,0(sp)
80095a1c:	dec00204 	addi	sp,sp,8
80095a20:	f800283a 	ret

80095a24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
80095a24:	defffc04 	addi	sp,sp,-16
80095a28:	df000315 	stw	fp,12(sp)
80095a2c:	df000304 	addi	fp,sp,12
80095a30:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
80095a34:	00bffa04 	movi	r2,-24
80095a38:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80095a3c:	e03ffd15 	stw	zero,-12(fp)
80095a40:	00001906 	br	80095aa8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
80095a44:	00a00274 	movhi	r2,32777
80095a48:	109dfa04 	addi	r2,r2,30696
80095a4c:	e0fffd17 	ldw	r3,-12(fp)
80095a50:	18c00324 	muli	r3,r3,12
80095a54:	10c5883a 	add	r2,r2,r3
80095a58:	10800017 	ldw	r2,0(r2)
80095a5c:	10000f1e 	bne	r2,zero,80095a9c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
80095a60:	00a00274 	movhi	r2,32777
80095a64:	109dfa04 	addi	r2,r2,30696
80095a68:	e0fffd17 	ldw	r3,-12(fp)
80095a6c:	18c00324 	muli	r3,r3,12
80095a70:	10c5883a 	add	r2,r2,r3
80095a74:	e0ffff17 	ldw	r3,-4(fp)
80095a78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
80095a7c:	d0e01917 	ldw	r3,-32668(gp)
80095a80:	e0bffd17 	ldw	r2,-12(fp)
80095a84:	1880020e 	bge	r3,r2,80095a90 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
80095a88:	e0bffd17 	ldw	r2,-12(fp)
80095a8c:	d0a01915 	stw	r2,-32668(gp)
      }
      rc = i;
80095a90:	e0bffd17 	ldw	r2,-12(fp)
80095a94:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80095a98:	00000606 	br	80095ab4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80095a9c:	e0bffd17 	ldw	r2,-12(fp)
80095aa0:	10800044 	addi	r2,r2,1
80095aa4:	e0bffd15 	stw	r2,-12(fp)
80095aa8:	e0bffd17 	ldw	r2,-12(fp)
80095aac:	10800810 	cmplti	r2,r2,32
80095ab0:	103fe41e 	bne	r2,zero,80095a44 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
80095ab4:	e0bffe17 	ldw	r2,-8(fp)
}
80095ab8:	e037883a 	mov	sp,fp
80095abc:	df000017 	ldw	fp,0(sp)
80095ac0:	dec00104 	addi	sp,sp,4
80095ac4:	f800283a 	ret

80095ac8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
80095ac8:	defffb04 	addi	sp,sp,-20
80095acc:	df000415 	stw	fp,16(sp)
80095ad0:	df000404 	addi	fp,sp,16
80095ad4:	e13ffe15 	stw	r4,-8(fp)
80095ad8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
80095adc:	e0bfff17 	ldw	r2,-4(fp)
80095ae0:	10840070 	cmpltui	r2,r2,4097
80095ae4:	1000021e 	bne	r2,zero,80095af0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
80095ae8:	00840004 	movi	r2,4096
80095aec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
80095af0:	e0fffe17 	ldw	r3,-8(fp)
80095af4:	e0bfff17 	ldw	r2,-4(fp)
80095af8:	1885883a 	add	r2,r3,r2
80095afc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
80095b00:	e0bffe17 	ldw	r2,-8(fp)
80095b04:	e0bffc15 	stw	r2,-16(fp)
80095b08:	00000506 	br	80095b20 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
80095b0c:	e0bffc17 	ldw	r2,-16(fp)
80095b10:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
80095b14:	e0bffc17 	ldw	r2,-16(fp)
80095b18:	10800804 	addi	r2,r2,32
80095b1c:	e0bffc15 	stw	r2,-16(fp)
80095b20:	e0fffc17 	ldw	r3,-16(fp)
80095b24:	e0bffd17 	ldw	r2,-12(fp)
80095b28:	18bff836 	bltu	r3,r2,80095b0c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
80095b2c:	e0bffe17 	ldw	r2,-8(fp)
80095b30:	108007cc 	andi	r2,r2,31
80095b34:	10000226 	beq	r2,zero,80095b40 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
80095b38:	e0bffc17 	ldw	r2,-16(fp)
80095b3c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
80095b40:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
80095b44:	0001883a 	nop
80095b48:	e037883a 	mov	sp,fp
80095b4c:	df000017 	ldw	fp,0(sp)
80095b50:	dec00104 	addi	sp,sp,4
80095b54:	f800283a 	ret

80095b58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
80095b58:	defffe04 	addi	sp,sp,-8
80095b5c:	df000115 	stw	fp,4(sp)
80095b60:	df000104 	addi	fp,sp,4
80095b64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
80095b68:	e0bfff17 	ldw	r2,-4(fp)
80095b6c:	10bffe84 	addi	r2,r2,-6
80095b70:	10c00428 	cmpgeui	r3,r2,16
80095b74:	18001a1e 	bne	r3,zero,80095be0 <alt_exception_cause_generated_bad_addr+0x88>
80095b78:	100690ba 	slli	r3,r2,2
80095b7c:	00a00274 	movhi	r2,32777
80095b80:	1096e404 	addi	r2,r2,23440
80095b84:	1885883a 	add	r2,r3,r2
80095b88:	10800017 	ldw	r2,0(r2)
80095b8c:	1000683a 	jmp	r2
80095b90:	80095bd0 	cmplti	zero,r16,9583
80095b94:	80095bd0 	cmplti	zero,r16,9583
80095b98:	80095be0 	cmpeqi	zero,r16,9583
80095b9c:	80095be0 	cmpeqi	zero,r16,9583
80095ba0:	80095be0 	cmpeqi	zero,r16,9583
80095ba4:	80095bd0 	cmplti	zero,r16,9583
80095ba8:	80095bd8 	cmpnei	zero,r16,9583
80095bac:	80095be0 	cmpeqi	zero,r16,9583
80095bb0:	80095bd0 	cmplti	zero,r16,9583
80095bb4:	80095bd0 	cmplti	zero,r16,9583
80095bb8:	80095be0 	cmpeqi	zero,r16,9583
80095bbc:	80095bd0 	cmplti	zero,r16,9583
80095bc0:	80095bd8 	cmpnei	zero,r16,9583
80095bc4:	80095be0 	cmpeqi	zero,r16,9583
80095bc8:	80095be0 	cmpeqi	zero,r16,9583
80095bcc:	80095bd0 	cmplti	zero,r16,9583
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
80095bd0:	00800044 	movi	r2,1
80095bd4:	00000306 	br	80095be4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
80095bd8:	0005883a 	mov	r2,zero
80095bdc:	00000106 	br	80095be4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
80095be0:	0005883a 	mov	r2,zero
  }
}
80095be4:	e037883a 	mov	sp,fp
80095be8:	df000017 	ldw	fp,0(sp)
80095bec:	dec00104 	addi	sp,sp,4
80095bf0:	f800283a 	ret

80095bf4 <atexit>:
80095bf4:	200b883a 	mov	r5,r4
80095bf8:	000f883a 	mov	r7,zero
80095bfc:	000d883a 	mov	r6,zero
80095c00:	0009883a 	mov	r4,zero
80095c04:	0095e241 	jmpi	80095e24 <__register_exitproc>

80095c08 <exit>:
80095c08:	defffe04 	addi	sp,sp,-8
80095c0c:	000b883a 	mov	r5,zero
80095c10:	dc000015 	stw	r16,0(sp)
80095c14:	dfc00115 	stw	ra,4(sp)
80095c18:	2021883a 	mov	r16,r4
80095c1c:	0095f3c0 	call	80095f3c <__call_exitprocs>
80095c20:	00a002b4 	movhi	r2,32778
80095c24:	10a31104 	addi	r2,r2,-29628
80095c28:	11000017 	ldw	r4,0(r2)
80095c2c:	20800f17 	ldw	r2,60(r4)
80095c30:	10000126 	beq	r2,zero,80095c38 <exit+0x30>
80095c34:	103ee83a 	callr	r2
80095c38:	8009883a 	mov	r4,r16
80095c3c:	00960bc0 	call	800960bc <_exit>

80095c40 <memcmp>:
80095c40:	01c000c4 	movi	r7,3
80095c44:	3980192e 	bgeu	r7,r6,80095cac <memcmp+0x6c>
80095c48:	2144b03a 	or	r2,r4,r5
80095c4c:	11c4703a 	and	r2,r2,r7
80095c50:	10000f26 	beq	r2,zero,80095c90 <memcmp+0x50>
80095c54:	20800003 	ldbu	r2,0(r4)
80095c58:	28c00003 	ldbu	r3,0(r5)
80095c5c:	10c0151e 	bne	r2,r3,80095cb4 <memcmp+0x74>
80095c60:	31bfff84 	addi	r6,r6,-2
80095c64:	01ffffc4 	movi	r7,-1
80095c68:	00000406 	br	80095c7c <memcmp+0x3c>
80095c6c:	20800003 	ldbu	r2,0(r4)
80095c70:	28c00003 	ldbu	r3,0(r5)
80095c74:	31bfffc4 	addi	r6,r6,-1
80095c78:	10c00e1e 	bne	r2,r3,80095cb4 <memcmp+0x74>
80095c7c:	21000044 	addi	r4,r4,1
80095c80:	29400044 	addi	r5,r5,1
80095c84:	31fff91e 	bne	r6,r7,80095c6c <memcmp+0x2c>
80095c88:	0005883a 	mov	r2,zero
80095c8c:	f800283a 	ret
80095c90:	20c00017 	ldw	r3,0(r4)
80095c94:	28800017 	ldw	r2,0(r5)
80095c98:	18bfee1e 	bne	r3,r2,80095c54 <memcmp+0x14>
80095c9c:	31bfff04 	addi	r6,r6,-4
80095ca0:	21000104 	addi	r4,r4,4
80095ca4:	29400104 	addi	r5,r5,4
80095ca8:	39bff936 	bltu	r7,r6,80095c90 <memcmp+0x50>
80095cac:	303fe91e 	bne	r6,zero,80095c54 <memcmp+0x14>
80095cb0:	003ff506 	br	80095c88 <memcmp+0x48>
80095cb4:	10c5c83a 	sub	r2,r2,r3
80095cb8:	f800283a 	ret

80095cbc <_putc_r>:
80095cbc:	defffc04 	addi	sp,sp,-16
80095cc0:	dc000215 	stw	r16,8(sp)
80095cc4:	dfc00315 	stw	ra,12(sp)
80095cc8:	2021883a 	mov	r16,r4
80095ccc:	20000226 	beq	r4,zero,80095cd8 <_putc_r+0x1c>
80095cd0:	20800e17 	ldw	r2,56(r4)
80095cd4:	10001b26 	beq	r2,zero,80095d44 <_putc_r+0x88>
80095cd8:	30800217 	ldw	r2,8(r6)
80095cdc:	10bfffc4 	addi	r2,r2,-1
80095ce0:	30800215 	stw	r2,8(r6)
80095ce4:	10000a16 	blt	r2,zero,80095d10 <_putc_r+0x54>
80095ce8:	30800017 	ldw	r2,0(r6)
80095cec:	11400005 	stb	r5,0(r2)
80095cf0:	30800017 	ldw	r2,0(r6)
80095cf4:	10c00044 	addi	r3,r2,1
80095cf8:	30c00015 	stw	r3,0(r6)
80095cfc:	10800003 	ldbu	r2,0(r2)
80095d00:	dfc00317 	ldw	ra,12(sp)
80095d04:	dc000217 	ldw	r16,8(sp)
80095d08:	dec00404 	addi	sp,sp,16
80095d0c:	f800283a 	ret
80095d10:	30c00617 	ldw	r3,24(r6)
80095d14:	10c00616 	blt	r2,r3,80095d30 <_putc_r+0x74>
80095d18:	30800017 	ldw	r2,0(r6)
80095d1c:	00c00284 	movi	r3,10
80095d20:	11400005 	stb	r5,0(r2)
80095d24:	30800017 	ldw	r2,0(r6)
80095d28:	11400003 	ldbu	r5,0(r2)
80095d2c:	28fff11e 	bne	r5,r3,80095cf4 <_putc_r+0x38>
80095d30:	8009883a 	mov	r4,r16
80095d34:	dfc00317 	ldw	ra,12(sp)
80095d38:	dc000217 	ldw	r16,8(sp)
80095d3c:	dec00404 	addi	sp,sp,16
80095d40:	008e78c1 	jmpi	8008e78c <__swbuf_r>
80095d44:	d9400015 	stw	r5,0(sp)
80095d48:	d9800115 	stw	r6,4(sp)
80095d4c:	00882f80 	call	800882f8 <__sinit>
80095d50:	d9800117 	ldw	r6,4(sp)
80095d54:	d9400017 	ldw	r5,0(sp)
80095d58:	003fdf06 	br	80095cd8 <_putc_r+0x1c>

80095d5c <putc>:
80095d5c:	00a002b4 	movhi	r2,32778
80095d60:	defffc04 	addi	sp,sp,-16
80095d64:	10a31204 	addi	r2,r2,-29624
80095d68:	dc000115 	stw	r16,4(sp)
80095d6c:	14000017 	ldw	r16,0(r2)
80095d70:	dc400215 	stw	r17,8(sp)
80095d74:	dfc00315 	stw	ra,12(sp)
80095d78:	2023883a 	mov	r17,r4
80095d7c:	80000226 	beq	r16,zero,80095d88 <putc+0x2c>
80095d80:	80800e17 	ldw	r2,56(r16)
80095d84:	10001a26 	beq	r2,zero,80095df0 <putc+0x94>
80095d88:	28800217 	ldw	r2,8(r5)
80095d8c:	10bfffc4 	addi	r2,r2,-1
80095d90:	28800215 	stw	r2,8(r5)
80095d94:	10000b16 	blt	r2,zero,80095dc4 <putc+0x68>
80095d98:	28800017 	ldw	r2,0(r5)
80095d9c:	14400005 	stb	r17,0(r2)
80095da0:	28800017 	ldw	r2,0(r5)
80095da4:	10c00044 	addi	r3,r2,1
80095da8:	28c00015 	stw	r3,0(r5)
80095dac:	10800003 	ldbu	r2,0(r2)
80095db0:	dfc00317 	ldw	ra,12(sp)
80095db4:	dc400217 	ldw	r17,8(sp)
80095db8:	dc000117 	ldw	r16,4(sp)
80095dbc:	dec00404 	addi	sp,sp,16
80095dc0:	f800283a 	ret
80095dc4:	28c00617 	ldw	r3,24(r5)
80095dc8:	10c00e16 	blt	r2,r3,80095e04 <putc+0xa8>
80095dcc:	28800017 	ldw	r2,0(r5)
80095dd0:	01000284 	movi	r4,10
80095dd4:	14400005 	stb	r17,0(r2)
80095dd8:	28800017 	ldw	r2,0(r5)
80095ddc:	10c00003 	ldbu	r3,0(r2)
80095de0:	193ff01e 	bne	r3,r4,80095da4 <putc+0x48>
80095de4:	280d883a 	mov	r6,r5
80095de8:	180b883a 	mov	r5,r3
80095dec:	00000706 	br	80095e0c <putc+0xb0>
80095df0:	8009883a 	mov	r4,r16
80095df4:	d9400015 	stw	r5,0(sp)
80095df8:	00882f80 	call	800882f8 <__sinit>
80095dfc:	d9400017 	ldw	r5,0(sp)
80095e00:	003fe106 	br	80095d88 <putc+0x2c>
80095e04:	280d883a 	mov	r6,r5
80095e08:	880b883a 	mov	r5,r17
80095e0c:	8009883a 	mov	r4,r16
80095e10:	dfc00317 	ldw	ra,12(sp)
80095e14:	dc400217 	ldw	r17,8(sp)
80095e18:	dc000117 	ldw	r16,4(sp)
80095e1c:	dec00404 	addi	sp,sp,16
80095e20:	008e78c1 	jmpi	8008e78c <__swbuf_r>

80095e24 <__register_exitproc>:
80095e24:	defffa04 	addi	sp,sp,-24
80095e28:	dc000315 	stw	r16,12(sp)
80095e2c:	042002b4 	movhi	r16,32778
80095e30:	84231104 	addi	r16,r16,-29628
80095e34:	80c00017 	ldw	r3,0(r16)
80095e38:	dc400415 	stw	r17,16(sp)
80095e3c:	dfc00515 	stw	ra,20(sp)
80095e40:	18805217 	ldw	r2,328(r3)
80095e44:	2023883a 	mov	r17,r4
80095e48:	10003726 	beq	r2,zero,80095f28 <__register_exitproc+0x104>
80095e4c:	10c00117 	ldw	r3,4(r2)
80095e50:	010007c4 	movi	r4,31
80095e54:	20c00e16 	blt	r4,r3,80095e90 <__register_exitproc+0x6c>
80095e58:	1a000044 	addi	r8,r3,1
80095e5c:	8800221e 	bne	r17,zero,80095ee8 <__register_exitproc+0xc4>
80095e60:	18c00084 	addi	r3,r3,2
80095e64:	18c7883a 	add	r3,r3,r3
80095e68:	18c7883a 	add	r3,r3,r3
80095e6c:	12000115 	stw	r8,4(r2)
80095e70:	10c7883a 	add	r3,r2,r3
80095e74:	19400015 	stw	r5,0(r3)
80095e78:	0005883a 	mov	r2,zero
80095e7c:	dfc00517 	ldw	ra,20(sp)
80095e80:	dc400417 	ldw	r17,16(sp)
80095e84:	dc000317 	ldw	r16,12(sp)
80095e88:	dec00604 	addi	sp,sp,24
80095e8c:	f800283a 	ret
80095e90:	00800034 	movhi	r2,0
80095e94:	10800004 	addi	r2,r2,0
80095e98:	10002626 	beq	r2,zero,80095f34 <__register_exitproc+0x110>
80095e9c:	01006404 	movi	r4,400
80095ea0:	d9400015 	stw	r5,0(sp)
80095ea4:	d9800115 	stw	r6,4(sp)
80095ea8:	d9c00215 	stw	r7,8(sp)
80095eac:	00000000 	call	80000000 <__alt_mem_ddr2_ram_1+0x40000000>
80095eb0:	d9400017 	ldw	r5,0(sp)
80095eb4:	d9800117 	ldw	r6,4(sp)
80095eb8:	d9c00217 	ldw	r7,8(sp)
80095ebc:	10001d26 	beq	r2,zero,80095f34 <__register_exitproc+0x110>
80095ec0:	81000017 	ldw	r4,0(r16)
80095ec4:	10000115 	stw	zero,4(r2)
80095ec8:	02000044 	movi	r8,1
80095ecc:	22405217 	ldw	r9,328(r4)
80095ed0:	0007883a 	mov	r3,zero
80095ed4:	12400015 	stw	r9,0(r2)
80095ed8:	20805215 	stw	r2,328(r4)
80095edc:	10006215 	stw	zero,392(r2)
80095ee0:	10006315 	stw	zero,396(r2)
80095ee4:	883fde26 	beq	r17,zero,80095e60 <__register_exitproc+0x3c>
80095ee8:	18c9883a 	add	r4,r3,r3
80095eec:	2109883a 	add	r4,r4,r4
80095ef0:	1109883a 	add	r4,r2,r4
80095ef4:	21802215 	stw	r6,136(r4)
80095ef8:	01800044 	movi	r6,1
80095efc:	12406217 	ldw	r9,392(r2)
80095f00:	30cc983a 	sll	r6,r6,r3
80095f04:	4992b03a 	or	r9,r9,r6
80095f08:	12406215 	stw	r9,392(r2)
80095f0c:	21c04215 	stw	r7,264(r4)
80095f10:	01000084 	movi	r4,2
80095f14:	893fd21e 	bne	r17,r4,80095e60 <__register_exitproc+0x3c>
80095f18:	11006317 	ldw	r4,396(r2)
80095f1c:	218cb03a 	or	r6,r4,r6
80095f20:	11806315 	stw	r6,396(r2)
80095f24:	003fce06 	br	80095e60 <__register_exitproc+0x3c>
80095f28:	18805304 	addi	r2,r3,332
80095f2c:	18805215 	stw	r2,328(r3)
80095f30:	003fc606 	br	80095e4c <__register_exitproc+0x28>
80095f34:	00bfffc4 	movi	r2,-1
80095f38:	003fd006 	br	80095e7c <__register_exitproc+0x58>

80095f3c <__call_exitprocs>:
80095f3c:	defff504 	addi	sp,sp,-44
80095f40:	df000915 	stw	fp,36(sp)
80095f44:	dd400615 	stw	r21,24(sp)
80095f48:	dc800315 	stw	r18,12(sp)
80095f4c:	dfc00a15 	stw	ra,40(sp)
80095f50:	ddc00815 	stw	r23,32(sp)
80095f54:	dd800715 	stw	r22,28(sp)
80095f58:	dd000515 	stw	r20,20(sp)
80095f5c:	dcc00415 	stw	r19,16(sp)
80095f60:	dc400215 	stw	r17,8(sp)
80095f64:	dc000115 	stw	r16,4(sp)
80095f68:	d9000015 	stw	r4,0(sp)
80095f6c:	2839883a 	mov	fp,r5
80095f70:	04800044 	movi	r18,1
80095f74:	057fffc4 	movi	r21,-1
80095f78:	00a002b4 	movhi	r2,32778
80095f7c:	10a31104 	addi	r2,r2,-29628
80095f80:	12000017 	ldw	r8,0(r2)
80095f84:	45005217 	ldw	r20,328(r8)
80095f88:	44c05204 	addi	r19,r8,328
80095f8c:	a0001c26 	beq	r20,zero,80096000 <__call_exitprocs+0xc4>
80095f90:	a0800117 	ldw	r2,4(r20)
80095f94:	15ffffc4 	addi	r23,r2,-1
80095f98:	b8000d16 	blt	r23,zero,80095fd0 <__call_exitprocs+0x94>
80095f9c:	14000044 	addi	r16,r2,1
80095fa0:	8421883a 	add	r16,r16,r16
80095fa4:	8421883a 	add	r16,r16,r16
80095fa8:	84402004 	addi	r17,r16,128
80095fac:	a463883a 	add	r17,r20,r17
80095fb0:	a421883a 	add	r16,r20,r16
80095fb4:	e0001e26 	beq	fp,zero,80096030 <__call_exitprocs+0xf4>
80095fb8:	80804017 	ldw	r2,256(r16)
80095fbc:	e0801c26 	beq	fp,r2,80096030 <__call_exitprocs+0xf4>
80095fc0:	bdffffc4 	addi	r23,r23,-1
80095fc4:	843fff04 	addi	r16,r16,-4
80095fc8:	8c7fff04 	addi	r17,r17,-4
80095fcc:	bd7ff91e 	bne	r23,r21,80095fb4 <__call_exitprocs+0x78>
80095fd0:	00800034 	movhi	r2,0
80095fd4:	10800004 	addi	r2,r2,0
80095fd8:	10000926 	beq	r2,zero,80096000 <__call_exitprocs+0xc4>
80095fdc:	a0800117 	ldw	r2,4(r20)
80095fe0:	1000301e 	bne	r2,zero,800960a4 <__call_exitprocs+0x168>
80095fe4:	a0800017 	ldw	r2,0(r20)
80095fe8:	10003226 	beq	r2,zero,800960b4 <__call_exitprocs+0x178>
80095fec:	a009883a 	mov	r4,r20
80095ff0:	98800015 	stw	r2,0(r19)
80095ff4:	00000000 	call	80000000 <__alt_mem_ddr2_ram_1+0x40000000>
80095ff8:	9d000017 	ldw	r20,0(r19)
80095ffc:	a03fe41e 	bne	r20,zero,80095f90 <__call_exitprocs+0x54>
80096000:	dfc00a17 	ldw	ra,40(sp)
80096004:	df000917 	ldw	fp,36(sp)
80096008:	ddc00817 	ldw	r23,32(sp)
8009600c:	dd800717 	ldw	r22,28(sp)
80096010:	dd400617 	ldw	r21,24(sp)
80096014:	dd000517 	ldw	r20,20(sp)
80096018:	dcc00417 	ldw	r19,16(sp)
8009601c:	dc800317 	ldw	r18,12(sp)
80096020:	dc400217 	ldw	r17,8(sp)
80096024:	dc000117 	ldw	r16,4(sp)
80096028:	dec00b04 	addi	sp,sp,44
8009602c:	f800283a 	ret
80096030:	a0800117 	ldw	r2,4(r20)
80096034:	80c00017 	ldw	r3,0(r16)
80096038:	10bfffc4 	addi	r2,r2,-1
8009603c:	15c01426 	beq	r2,r23,80096090 <__call_exitprocs+0x154>
80096040:	80000015 	stw	zero,0(r16)
80096044:	183fde26 	beq	r3,zero,80095fc0 <__call_exitprocs+0x84>
80096048:	95c8983a 	sll	r4,r18,r23
8009604c:	a0806217 	ldw	r2,392(r20)
80096050:	a5800117 	ldw	r22,4(r20)
80096054:	2084703a 	and	r2,r4,r2
80096058:	10000b26 	beq	r2,zero,80096088 <__call_exitprocs+0x14c>
8009605c:	a0806317 	ldw	r2,396(r20)
80096060:	2088703a 	and	r4,r4,r2
80096064:	20000c1e 	bne	r4,zero,80096098 <__call_exitprocs+0x15c>
80096068:	89400017 	ldw	r5,0(r17)
8009606c:	d9000017 	ldw	r4,0(sp)
80096070:	183ee83a 	callr	r3
80096074:	a0800117 	ldw	r2,4(r20)
80096078:	15bfbf1e 	bne	r2,r22,80095f78 <__call_exitprocs+0x3c>
8009607c:	98800017 	ldw	r2,0(r19)
80096080:	153fcf26 	beq	r2,r20,80095fc0 <__call_exitprocs+0x84>
80096084:	003fbc06 	br	80095f78 <__call_exitprocs+0x3c>
80096088:	183ee83a 	callr	r3
8009608c:	003ff906 	br	80096074 <__call_exitprocs+0x138>
80096090:	a5c00115 	stw	r23,4(r20)
80096094:	003feb06 	br	80096044 <__call_exitprocs+0x108>
80096098:	89000017 	ldw	r4,0(r17)
8009609c:	183ee83a 	callr	r3
800960a0:	003ff406 	br	80096074 <__call_exitprocs+0x138>
800960a4:	a0800017 	ldw	r2,0(r20)
800960a8:	a027883a 	mov	r19,r20
800960ac:	1029883a 	mov	r20,r2
800960b0:	003fb606 	br	80095f8c <__call_exitprocs+0x50>
800960b4:	0005883a 	mov	r2,zero
800960b8:	003ffb06 	br	800960a8 <__call_exitprocs+0x16c>

800960bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
800960bc:	defffd04 	addi	sp,sp,-12
800960c0:	df000215 	stw	fp,8(sp)
800960c4:	df000204 	addi	fp,sp,8
800960c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
800960cc:	0001883a 	nop
800960d0:	e0bfff17 	ldw	r2,-4(fp)
800960d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
800960d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
800960dc:	10000226 	beq	r2,zero,800960e8 <_exit+0x2c>
    ALT_SIM_FAIL();
800960e0:	002af070 	cmpltui	zero,zero,43969
800960e4:	00000106 	br	800960ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
800960e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
800960ec:	003fff06 	br	800960ec <_exit+0x30>
